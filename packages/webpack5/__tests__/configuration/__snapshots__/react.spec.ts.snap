// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react configuration > android > adds ReactRefreshWebpackPlugin when HMR enabled 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json',
    '~/package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/android/app/src/main/assets/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~': '__jest__/src',
      '@': '__jest__/src',
      'react-dom': 'react-nativescript'
    },
    extensions: [
      '.android.tsx',
      '.tsx',
      '.android.ts',
      '.ts',
      '.android.js',
      '.js',
      '.android.css',
      '.css',
      '.android.scss',
      '.scss',
      '.android.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      'node_modules/@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/,
          /\\\\.tsx$/
        ],
        use: [
          /* config.module.rule('ts').use('babel-loader|react-refresh') */
          {
            loader: 'babel-loader',
            options: {
              sourceMaps: 'inline',
              babelrc: false,
              plugins: [
                'react-refresh/babel'
              ]
            }
          },
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        exclude: [
          /node_modules/
        ],
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader',
            options: {
              generatorOpts: {
                compact: false
              }
            }
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  'postcss-import'
                ]
              }
            }
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  'postcss-import'
                ]
              }
            }
          },
          /* config.module.rule('scss').use('sass-loader') */
          {
            loader: 'sass-loader'
          }
        ]
      }
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        defaultVendor: {
          test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/,
          priority: -10,
          name: 'vendor',
          chunks: 'all'
        }
      }
    },
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: false,
              sequences: false
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('ForkTsCheckerWebpackPlugin') */
    new ForkTsCheckerWebpackPlugin(
      {
        typescript: {
          memoryLimit: 4096
        }
      }
    ),
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/android/app/src/main/assets/app/**/*'
        ],
        verbose: false
      }
    ),
    /* config.plugin('PlatformSuffixPlugin') */
    new PlatformSuffixPlugin(
      {
        platform: 'android'
      }
    ),
    /* config.plugin('FilterWarningsPlugin') */
    new FilterWarningsPlugin(
      {
        exclude: /System.import\\\\(\\\\) is deprecated/
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        __DEV__: true,
        __NS_WEBPACK__: true,
        __CSS_PARSER__: '\\"css-tree\\"',
        __ANDROID__: true,
        __IOS__: false,
        'global.isAndroid': true,
        'global.isIOS': false,
        process: 'global.process',
        __TEST__: false,
        'process.env.NODE_ENV': '\\"development\\"'
      }
    ),
    /* config.plugin('CopyWebpackPlugin') */
    new CopyPlugin(
      {
        patterns: [
          {
            from: 'assets/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: 'fonts/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: '**/*.+(jpg|png)',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          }
        ]
      }
    ),
    /* config.plugin('WatchStatePlugin') */
    new WatchStatePlugin(),
    /* config.plugin('HotModuleReplacementPlugin') */
    new HotModuleReplacementPlugin(),
    /* config.plugin('ReactRefreshPlugin') */
    new ReactRefreshPlugin(
      {
        overlay: false,
        forceEnable: false,
        exclude: /node_modules/i,
        include: /\\\\.([jt]sx?|flow)$/i
      }
    )
  ],
  entry: {
    bundle: [
      '@nativescript/core/globals/index.js',
      '__jest__/src/app.js',
      '@nativescript/core/ui/frame',
      '@nativescript/core/ui/frame/activity'
    ]
  }
}"
`;

exports[`react configuration > android > base config 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json',
    '~/package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/android/app/src/main/assets/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~': '__jest__/src',
      '@': '__jest__/src',
      'react-dom': 'react-nativescript'
    },
    extensions: [
      '.android.tsx',
      '.tsx',
      '.android.ts',
      '.ts',
      '.android.js',
      '.js',
      '.android.css',
      '.css',
      '.android.scss',
      '.scss',
      '.android.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      'node_modules/@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/,
          /\\\\.tsx$/
        ],
        use: [
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        exclude: [
          /node_modules/
        ],
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader',
            options: {
              generatorOpts: {
                compact: false
              }
            }
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  'postcss-import'
                ]
              }
            }
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  'postcss-import'
                ]
              }
            }
          },
          /* config.module.rule('scss').use('sass-loader') */
          {
            loader: 'sass-loader'
          }
        ]
      }
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        defaultVendor: {
          test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/,
          priority: -10,
          name: 'vendor',
          chunks: 'all'
        }
      }
    },
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: false,
              sequences: false
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('ForkTsCheckerWebpackPlugin') */
    new ForkTsCheckerWebpackPlugin(
      {
        typescript: {
          memoryLimit: 4096
        }
      }
    ),
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/android/app/src/main/assets/app/**/*'
        ],
        verbose: false
      }
    ),
    /* config.plugin('PlatformSuffixPlugin') */
    new PlatformSuffixPlugin(
      {
        platform: 'android'
      }
    ),
    /* config.plugin('FilterWarningsPlugin') */
    new FilterWarningsPlugin(
      {
        exclude: /System.import\\\\(\\\\) is deprecated/
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        __DEV__: true,
        __NS_WEBPACK__: true,
        __CSS_PARSER__: '\\"css-tree\\"',
        __ANDROID__: true,
        __IOS__: false,
        'global.isAndroid': true,
        'global.isIOS': false,
        process: 'global.process',
        __TEST__: false,
        'process.env.NODE_ENV': '\\"development\\"'
      }
    ),
    /* config.plugin('CopyWebpackPlugin') */
    new CopyPlugin(
      {
        patterns: [
          {
            from: 'assets/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: 'fonts/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: '**/*.+(jpg|png)',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          }
        ]
      }
    ),
    /* config.plugin('WatchStatePlugin') */
    new WatchStatePlugin()
  ],
  entry: {
    bundle: [
      '@nativescript/core/globals/index.js',
      '__jest__/src/app.js',
      '@nativescript/core/ui/frame',
      '@nativescript/core/ui/frame/activity'
    ]
  }
}"
`;

exports[`react configuration > ios > adds ReactRefreshWebpackPlugin when HMR enabled 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json',
    '~/package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/ios/jest/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~': '__jest__/src',
      '@': '__jest__/src',
      'react-dom': 'react-nativescript'
    },
    extensions: [
      '.ios.tsx',
      '.tsx',
      '.ios.ts',
      '.ts',
      '.ios.js',
      '.js',
      '.ios.css',
      '.css',
      '.ios.scss',
      '.scss',
      '.ios.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      'node_modules/@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/,
          /\\\\.tsx$/
        ],
        use: [
          /* config.module.rule('ts').use('babel-loader|react-refresh') */
          {
            loader: 'babel-loader',
            options: {
              sourceMaps: 'inline',
              babelrc: false,
              plugins: [
                'react-refresh/babel'
              ]
            }
          },
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        exclude: [
          /node_modules/
        ],
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader',
            options: {
              generatorOpts: {
                compact: false
              }
            }
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  'postcss-import'
                ]
              }
            }
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  'postcss-import'
                ]
              }
            }
          },
          /* config.module.rule('scss').use('sass-loader') */
          {
            loader: 'sass-loader'
          }
        ]
      }
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        defaultVendor: {
          test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/,
          priority: -10,
          name: 'vendor',
          chunks: 'all'
        }
      }
    },
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: true,
              sequences: true
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('ForkTsCheckerWebpackPlugin') */
    new ForkTsCheckerWebpackPlugin(
      {
        typescript: {
          memoryLimit: 4096
        }
      }
    ),
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/ios/jest/app/**/*'
        ],
        verbose: false
      }
    ),
    /* config.plugin('PlatformSuffixPlugin') */
    new PlatformSuffixPlugin(
      {
        platform: 'ios'
      }
    ),
    /* config.plugin('FilterWarningsPlugin') */
    new FilterWarningsPlugin(
      {
        exclude: /System.import\\\\(\\\\) is deprecated/
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        __DEV__: true,
        __NS_WEBPACK__: true,
        __CSS_PARSER__: '\\"css-tree\\"',
        __ANDROID__: false,
        __IOS__: true,
        'global.isAndroid': false,
        'global.isIOS': true,
        process: 'global.process',
        __TEST__: false,
        'process.env.NODE_ENV': '\\"development\\"'
      }
    ),
    /* config.plugin('CopyWebpackPlugin') */
    new CopyPlugin(
      {
        patterns: [
          {
            from: 'assets/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: 'fonts/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: '**/*.+(jpg|png)',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          }
        ]
      }
    ),
    /* config.plugin('WatchStatePlugin') */
    new WatchStatePlugin(),
    /* config.plugin('HotModuleReplacementPlugin') */
    new HotModuleReplacementPlugin(),
    /* config.plugin('ReactRefreshPlugin') */
    new ReactRefreshPlugin(
      {
        overlay: false,
        forceEnable: false,
        exclude: /node_modules/i,
        include: /\\\\.([jt]sx?|flow)$/i
      }
    )
  ],
  entry: {
    bundle: [
      '@nativescript/core/globals/index.js',
      '__jest__/src/app.js'
    ],
    'tns_modules/inspector_modules': [
      '@nativescript/core/inspector_modules'
    ]
  }
}"
`;

exports[`react configuration > ios > base config 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json',
    '~/package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/ios/jest/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~': '__jest__/src',
      '@': '__jest__/src',
      'react-dom': 'react-nativescript'
    },
    extensions: [
      '.ios.tsx',
      '.tsx',
      '.ios.ts',
      '.ts',
      '.ios.js',
      '.js',
      '.ios.css',
      '.css',
      '.ios.scss',
      '.scss',
      '.ios.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      'node_modules/@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/,
          /\\\\.tsx$/
        ],
        use: [
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        exclude: [
          /node_modules/
        ],
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader',
            options: {
              generatorOpts: {
                compact: false
              }
            }
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  'postcss-import'
                ]
              }
            }
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('postcss-loader') */
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  'postcss-import'
                ]
              }
            }
          },
          /* config.module.rule('scss').use('sass-loader') */
          {
            loader: 'sass-loader'
          }
        ]
      }
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        defaultVendor: {
          test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/,
          priority: -10,
          name: 'vendor',
          chunks: 'all'
        }
      }
    },
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: true,
              sequences: true
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('ForkTsCheckerWebpackPlugin') */
    new ForkTsCheckerWebpackPlugin(
      {
        typescript: {
          memoryLimit: 4096
        }
      }
    ),
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/ios/jest/app/**/*'
        ],
        verbose: false
      }
    ),
    /* config.plugin('PlatformSuffixPlugin') */
    new PlatformSuffixPlugin(
      {
        platform: 'ios'
      }
    ),
    /* config.plugin('FilterWarningsPlugin') */
    new FilterWarningsPlugin(
      {
        exclude: /System.import\\\\(\\\\) is deprecated/
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        __DEV__: true,
        __NS_WEBPACK__: true,
        __CSS_PARSER__: '\\"css-tree\\"',
        __ANDROID__: false,
        __IOS__: true,
        'global.isAndroid': false,
        'global.isIOS': true,
        process: 'global.process',
        __TEST__: false,
        'process.env.NODE_ENV': '\\"development\\"'
      }
    ),
    /* config.plugin('CopyWebpackPlugin') */
    new CopyPlugin(
      {
        patterns: [
          {
            from: 'assets/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: 'fonts/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          },
          {
            from: '**/*.+(jpg|png)',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false,
              ignore: []
            }
          }
        ]
      }
    ),
    /* config.plugin('WatchStatePlugin') */
    new WatchStatePlugin()
  ],
  entry: {
    bundle: [
      '@nativescript/core/globals/index.js',
      '__jest__/src/app.js'
    ],
    'tns_modules/inspector_modules': [
      '@nativescript/core/inspector_modules'
    ]
  }
}"
`;
