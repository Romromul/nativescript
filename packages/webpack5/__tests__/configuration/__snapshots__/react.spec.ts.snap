// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react configuration > android > adds ReactRefreshWebpackPlugin when HMR enabled 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/android/app/src/main/assets/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~/package.json': 'package.json',
      '~': '<TODO>appFullPath',
      '@': '<TODO>appFullPath',
      'react-dom': 'react-nativescript'
    },
    extensions: [
      '.tsx',
      '.android.ts',
      '.ts',
      '.android.js',
      '.js',
      '.android.css',
      '.css',
      '.android.scss',
      '.scss',
      '.android.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      '@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/,
          /\\\\.tsx$/
        ],
        use: [
          /* config.module.rule('ts').use('babel-loader|react-refresh') */
          {
            loader: 'babel-loader',
            options: {
              sourceMaps: 'inline',
              babelrc: false,
              plugins: [
                'react-refresh/babel'
              ]
            }
          },
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader'
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('css-loader') */
          {
            loader: 'css-loader'
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('scss-loader') */
          {
            loader: 'scss-loader'
          }
        ]
      }
    ]
  },
  optimization: {
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: false,
              sequences: false
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/android/app/src/main/assets/app/**/*'
        ],
        verbose: true
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        'global.NS_WEBPACK': true,
        'global.isAndroid': true,
        'global.isIOS': false,
        process: 'global.process',
        profile: '() => {}',
        __DEV__: 'true',
        __TEST__: 'false',
        'process.env.NODE_ENV': '\\"development\\"'
      }
    ),
    /* config.plugin('WatchStateLoggerPlugin') */
    new WatchStateLoggerPlugin(),
    /* config.plugin('ReactRefreshWebpackPlugin') */
    new ReactRefreshWebpackPlugin(
      {
        overlay: false,
        forceEnable: false
      }
    )
  ],
  entry: {
    bundle: [
      'src/app.js'
    ]
  }
}"
`;

exports[`react configuration > android > base config 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/android/app/src/main/assets/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~/package.json': 'package.json',
      '~': '<TODO>appFullPath',
      '@': '<TODO>appFullPath',
      'react-dom': 'react-nativescript'
    },
    extensions: [
      '.tsx',
      '.android.ts',
      '.ts',
      '.android.js',
      '.js',
      '.android.css',
      '.css',
      '.android.scss',
      '.scss',
      '.android.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      '@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/,
          /\\\\.tsx$/
        ],
        use: [
          /* config.module.rule('ts').use('babel-loader|react-refresh') */
          {
            loader: 'babel-loader',
            options: {
              sourceMaps: 'inline',
              babelrc: false,
              plugins: [
                'react-refresh/babel'
              ]
            }
          },
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader'
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('css-loader') */
          {
            loader: 'css-loader'
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('scss-loader') */
          {
            loader: 'scss-loader'
          }
        ]
      }
    ]
  },
  optimization: {
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: false,
              sequences: false
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/android/app/src/main/assets/app/**/*'
        ],
        verbose: true
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        'global.NS_WEBPACK': true,
        'global.isAndroid': true,
        'global.isIOS': false,
        process: 'global.process',
        profile: '() => {}',
        __DEV__: 'true',
        __TEST__: 'false',
        'process.env.NODE_ENV': '\\"development\\"'
      }
    ),
    /* config.plugin('WatchStateLoggerPlugin') */
    new WatchStateLoggerPlugin()
  ],
  entry: {
    bundle: [
      'src/app.js'
    ]
  }
}"
`;

exports[`react configuration > ios > adds ReactRefreshWebpackPlugin when HMR enabled 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/ios/__jest__/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~/package.json': 'package.json',
      '~': '<TODO>appFullPath',
      '@': '<TODO>appFullPath',
      'react-dom': 'react-nativescript'
    },
    extensions: [
      '.tsx',
      '.ios.ts',
      '.ts',
      '.ios.js',
      '.js',
      '.ios.css',
      '.css',
      '.ios.scss',
      '.scss',
      '.ios.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      '@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/,
          /\\\\.tsx$/
        ],
        use: [
          /* config.module.rule('ts').use('babel-loader|react-refresh') */
          {
            loader: 'babel-loader',
            options: {
              sourceMaps: 'inline',
              babelrc: false,
              plugins: [
                'react-refresh/babel'
              ]
            }
          },
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader'
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('css-loader') */
          {
            loader: 'css-loader'
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('scss-loader') */
          {
            loader: 'scss-loader'
          }
        ]
      }
    ]
  },
  optimization: {
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: true,
              sequences: true
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/ios/__jest__/app/**/*'
        ],
        verbose: true
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        'global.NS_WEBPACK': true,
        'global.isAndroid': false,
        'global.isIOS': true,
        process: 'global.process',
        profile: '() => {}',
        __DEV__: 'true',
        __TEST__: 'false',
        'process.env.NODE_ENV': '\\"development\\"'
      }
    ),
    /* config.plugin('WatchStateLoggerPlugin') */
    new WatchStateLoggerPlugin(),
    /* config.plugin('ReactRefreshWebpackPlugin') */
    new ReactRefreshWebpackPlugin(
      {
        overlay: false,
        forceEnable: false
      }
    )
  ],
  entry: {
    bundle: [
      'src/app.js'
    ],
    'tns_modules/@nativescript/core/inspector_modules': [
      '@nativescript/core/inspector_modules'
    ]
  }
}"
`;

exports[`react configuration > ios > base config 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/ios/__jest__/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~/package.json': 'package.json',
      '~': '<TODO>appFullPath',
      '@': '<TODO>appFullPath',
      'react-dom': 'react-nativescript'
    },
    extensions: [
      '.tsx',
      '.ios.ts',
      '.ts',
      '.ios.js',
      '.js',
      '.ios.css',
      '.css',
      '.ios.scss',
      '.scss',
      '.ios.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      '@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/,
          /\\\\.tsx$/
        ],
        use: [
          /* config.module.rule('ts').use('babel-loader|react-refresh') */
          {
            loader: 'babel-loader',
            options: {
              sourceMaps: 'inline',
              babelrc: false,
              plugins: [
                'react-refresh/babel'
              ]
            }
          },
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ }
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader'
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('css').use('css-loader') */
          {
            loader: 'css-loader'
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('scss-loader') */
          {
            loader: 'scss-loader'
          }
        ]
      }
    ]
  },
  optimization: {
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: true,
              sequences: true
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/ios/__jest__/app/**/*'
        ],
        verbose: true
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        'global.NS_WEBPACK': true,
        'global.isAndroid': false,
        'global.isIOS': true,
        process: 'global.process',
        profile: '() => {}',
        __DEV__: 'true',
        __TEST__: 'false',
        'process.env.NODE_ENV': '\\"development\\"'
      }
    ),
    /* config.plugin('WatchStateLoggerPlugin') */
    new WatchStateLoggerPlugin()
  ],
  entry: {
    bundle: [
      'src/app.js'
    ],
    'tns_modules/@nativescript/core/inspector_modules': [
      '@nativescript/core/inspector_modules'
    ]
  }
}"
`;
