// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`vue configuration for android 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json',
    '~/package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/android/app/src/main/assets/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~': '__jest__/src',
      '@': '__jest__/src',
      vue: 'nativescript-vue'
    },
    extensions: [
      '.android.vue',
      '.vue',
      '.android.ts',
      '.ts',
      '.android.js',
      '.js',
      '.android.css',
      '.css',
      '.android.scss',
      '.scss',
      '.android.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      'node_modules/@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/
        ],
        use: [
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ },
              appendTsSuffixTo: [
                '\\\\\\\\.vue$'
              ]
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        exclude: [
          /node_modules/
        ],
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader',
            options: {
              generatorOpts: {
                compact: false
              }
            }
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('sass-loader') */
          {
            loader: 'sass-loader'
          }
        ]
      },
      /* config.module.rule('vue') */
      {
        test: /\\\\.vue$/,
        use: [
          /* config.module.rule('vue').use('vue-loader') */
          {
            loader: 'vue-loader',
            options: {
              compiler: {
                compile: function () { /* omitted long function */ },
                compileToFunctions: function () { /* omitted long function */ },
                parseComponent: function () { /* omitted long function */ },
                registerElement: function () { /* omitted long function */ }
              }
            }
          }
        ]
      }
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        defaultVendor: {
          test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/,
          priority: -10,
          name: 'vendor',
          chunks: 'all'
        }
      }
    },
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: false,
              sequences: false
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('VueLoaderPlugin') */
    new VueLoaderPlugin(),
    /* config.plugin('ForkTsCheckerWebpackPlugin') */
    new ForkTsCheckerWebpackPlugin(
      {
        typescript: {
          memoryLimit: 4096,
          extensions: {
            vue: {
              enabled: true,
              compiler: 'nativescript-vue-template-compiler'
            }
          }
        }
      }
    ),
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/android/app/src/main/assets/app/**/*'
        ],
        verbose: false
      }
    ),
    /* config.plugin('PlatformSuffixPlugin') */
    new PlatformSuffixPlugin(
      {
        platform: 'android'
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        __DEV__: true,
        __NS_WEBPACK__: true,
        __CSS_PARSER__: '\\"css-tree\\"',
        __ANDROID__: true,
        __IOS__: false,
        'global.isAndroid': true,
        'global.isIOS': false,
        process: 'global.process'
      }
    ),
    /* config.plugin('CopyWebpackPlugin') */
    new CopyPlugin(
      {
        patterns: [
          {
            from: 'assets/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false
            }
          },
          {
            from: 'fonts/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false
            }
          },
          {
            from: '**/*.+(jpg|png)',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false
            }
          }
        ]
      }
    ),
    /* config.plugin('WatchStatePlugin') */
    new WatchStatePlugin()
  ],
  entry: {
    bundle: [
      '@nativescript/core/globals/index.js',
      '__jest__/src/app.js'
    ]
  }
}"
`;

exports[`vue configuration for ios 1`] = `
"{
  mode: 'development',
  externals: [
    'package.json',
    '~/package.json'
  ],
  devtool: 'inline-source-map',
  target: 'node',
  output: {
    path: '__jest__/platforms/ios/__jest__/app',
    pathinfo: false,
    publicPath: '',
    libraryTarget: 'commonjs',
    globalObject: 'global'
  },
  resolve: {
    symlinks: true,
    alias: {
      '~': '__jest__/src',
      '@': '__jest__/src',
      vue: 'nativescript-vue'
    },
    extensions: [
      '.ios.vue',
      '.vue',
      '.ios.ts',
      '.ts',
      '.ios.js',
      '.js',
      '.ios.css',
      '.css',
      '.ios.scss',
      '.scss',
      '.ios.json',
      '.json'
    ]
  },
  resolveLoader: {
    modules: [
      'node_modules/@nativescript/webpack/dist/loaders',
      'node_modules'
    ]
  },
  module: {
    rules: [
      /* config.module.rule('ts') */
      {
        test: [
          /\\\\.ts$/
        ],
        use: [
          /* config.module.rule('ts').use('ts-loader') */
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              allowTsInNodeModules: true,
              compilerOptions: {
                sourceMap: true,
                declaration: false
              },
              getCustomTransformers: function () { /* omitted long function */ },
              appendTsSuffixTo: [
                '\\\\\\\\.vue$'
              ]
            }
          }
        ]
      },
      /* config.module.rule('js') */
      {
        test: /\\\\.js$/,
        exclude: [
          /node_modules/
        ],
        use: [
          /* config.module.rule('js').use('babel-loader') */
          {
            loader: 'babel-loader',
            options: {
              generatorOpts: {
                compact: false
              }
            }
          }
        ]
      },
      /* config.module.rule('css') */
      {
        test: /\\\\.css$/,
        use: [
          /* config.module.rule('css').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('css').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          }
        ]
      },
      /* config.module.rule('scss') */
      {
        test: /\\\\.scss$/,
        use: [
          /* config.module.rule('scss').use('apply-css-loader') */
          {
            loader: 'apply-css-loader'
          },
          /* config.module.rule('scss').use('css2json-loader') */
          {
            loader: 'css2json-loader'
          },
          /* config.module.rule('scss').use('sass-loader') */
          {
            loader: 'sass-loader'
          }
        ]
      },
      /* config.module.rule('vue') */
      {
        test: /\\\\.vue$/,
        use: [
          /* config.module.rule('vue').use('vue-loader') */
          {
            loader: 'vue-loader',
            options: {
              compiler: {
                compile: function () { /* omitted long function */ },
                compileToFunctions: function () { /* omitted long function */ },
                parseComponent: function () { /* omitted long function */ },
                registerElement: function () { /* omitted long function */ }
              }
            }
          }
        ]
      }
    ]
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        defaultVendor: {
          test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/,
          priority: -10,
          name: 'vendor',
          chunks: 'all'
        }
      }
    },
    minimizer: [
      /* config.optimization.minimizer('TerserPlugin') */
      new TerserPlugin(
        {
          terserOptions: {
            compress: {
              collapse_vars: true,
              sequences: true
            },
            keep_fnames: true
          }
        }
      )
    ]
  },
  plugins: [
    /* config.plugin('VueLoaderPlugin') */
    new VueLoaderPlugin(),
    /* config.plugin('ForkTsCheckerWebpackPlugin') */
    new ForkTsCheckerWebpackPlugin(
      {
        typescript: {
          memoryLimit: 4096,
          extensions: {
            vue: {
              enabled: true,
              compiler: 'nativescript-vue-template-compiler'
            }
          }
        }
      }
    ),
    /* config.plugin('CleanWebpackPlugin') */
    new CleanWebpackPlugin(
      {
        cleanOnceBeforeBuildPatterns: [
          '__jest__/platforms/ios/__jest__/app/**/*'
        ],
        verbose: false
      }
    ),
    /* config.plugin('PlatformSuffixPlugin') */
    new PlatformSuffixPlugin(
      {
        platform: 'ios'
      }
    ),
    /* config.plugin('DefinePlugin') */
    new DefinePlugin(
      {
        __DEV__: true,
        __NS_WEBPACK__: true,
        __CSS_PARSER__: '\\"css-tree\\"',
        __ANDROID__: false,
        __IOS__: true,
        'global.isAndroid': false,
        'global.isIOS': true,
        process: 'global.process'
      }
    ),
    /* config.plugin('CopyWebpackPlugin') */
    new CopyPlugin(
      {
        patterns: [
          {
            from: 'assets/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false
            }
          },
          {
            from: 'fonts/**',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false
            }
          },
          {
            from: '**/*.+(jpg|png)',
            context: '__jest__/src',
            noErrorOnMissing: true,
            globOptions: {
              dot: false
            }
          }
        ]
      }
    ),
    /* config.plugin('WatchStatePlugin') */
    new WatchStatePlugin()
  ],
  entry: {
    bundle: [
      '@nativescript/core/globals/index.js',
      '__jest__/src/app.js'
    ],
    'tns_modules/@nativescript/core/inspector_modules': [
      '@nativescript/core/inspector_modules'
    ]
  }
}"
`;
