declare function byte(v: number): native.Byte;
declare function byte(v: string): native.Byte;
declare function short(v: number): native.Short;
declare function short(v: string): native.Short;
declare function long(v: number): native.Long;
declare function long(v: string): native.Long;
declare function float(v: number): native.Float;
declare function float(v: string): native.Float;
declare function double(v: number): native.Double;
declare function double(v: string): native.Double;
declare module com {
	export module android {
		export module internal {
			export module util {
				export class Predicate<T> implements com.android.internal.util.IPredicate<T> {
					constructor(implementation: com.android.internal.util.IPredicate<T>);
					apply(arg1: T): boolean;
				}
				export interface IPredicate<T> {
					apply(arg1: T): boolean;
				}
			}
		}
	}
}
declare module android {
	export module hardware {
		export class SensorListener implements android.hardware.ISensorListener {
			constructor(implementation: android.hardware.ISensorListener);
			onAccuracyChanged(arg1: number, arg2: number): void;
			onSensorChanged(arg1: number, arg2: native.Array<native.Float>): void;
		}
		export module input {
			export class InputManager extends java.lang.Object {
				static ACTION_QUERY_KEYBOARD_LAYOUTS: java.lang.String;
				static META_DATA_KEYBOARD_LAYOUTS: java.lang.String;
				static class: java.lang.Class<android.hardware.input.InputManager>;
				unregisterInputDeviceListener(arg1: android.hardware.input.InputManager.IInputDeviceListener): void;
				registerInputDeviceListener(arg1: android.hardware.input.InputManager.IInputDeviceListener, arg2: android.os.Handler): void;
				getInputDevice(arg1: number): android.view.InputDevice;
				getInputDeviceIds(): native.Array<number>;
			}
			export module InputManager {
				export interface IInputDeviceListener {
					onInputDeviceRemoved(arg1: number): void;
					onInputDeviceChanged(arg1: number): void;
					onInputDeviceAdded(arg1: number): void;
				}
				export class InputDeviceListener implements android.hardware.input.InputManager.IInputDeviceListener {
					constructor(implementation: android.hardware.input.InputManager.IInputDeviceListener);
					onInputDeviceRemoved(arg1: number): void;
					onInputDeviceChanged(arg1: number): void;
					onInputDeviceAdded(arg1: number): void;
				}
			}
		}
		export class SensorManager extends java.lang.Object {
			static SENSOR_ORIENTATION: number;
			static SENSOR_ACCELEROMETER: number;
			static SENSOR_TEMPERATURE: number;
			static SENSOR_MAGNETIC_FIELD: number;
			static SENSOR_LIGHT: number;
			static SENSOR_PROXIMITY: number;
			static SENSOR_TRICORDER: number;
			static SENSOR_ORIENTATION_RAW: number;
			static SENSOR_ALL: number;
			static SENSOR_MIN: number;
			static SENSOR_MAX: number;
			static DATA_X: number;
			static DATA_Y: number;
			static DATA_Z: number;
			static RAW_DATA_INDEX: number;
			static RAW_DATA_X: number;
			static RAW_DATA_Y: number;
			static RAW_DATA_Z: number;
			static STANDARD_GRAVITY: native.Float;
			static GRAVITY_SUN: native.Float;
			static GRAVITY_MERCURY: native.Float;
			static GRAVITY_VENUS: native.Float;
			static GRAVITY_EARTH: native.Float;
			static GRAVITY_MOON: native.Float;
			static GRAVITY_MARS: native.Float;
			static GRAVITY_JUPITER: native.Float;
			static GRAVITY_SATURN: native.Float;
			static GRAVITY_URANUS: native.Float;
			static GRAVITY_NEPTUNE: native.Float;
			static GRAVITY_PLUTO: native.Float;
			static GRAVITY_DEATH_STAR_I: native.Float;
			static GRAVITY_THE_ISLAND: native.Float;
			static MAGNETIC_FIELD_EARTH_MAX: native.Float;
			static MAGNETIC_FIELD_EARTH_MIN: native.Float;
			static PRESSURE_STANDARD_ATMOSPHERE: native.Float;
			static LIGHT_SUNLIGHT_MAX: native.Float;
			static LIGHT_SUNLIGHT: native.Float;
			static LIGHT_SHADE: native.Float;
			static LIGHT_OVERCAST: native.Float;
			static LIGHT_SUNRISE: native.Float;
			static LIGHT_CLOUDY: native.Float;
			static LIGHT_FULLMOON: native.Float;
			static LIGHT_NO_MOON: native.Float;
			static SENSOR_DELAY_FASTEST: number;
			static SENSOR_DELAY_GAME: number;
			static SENSOR_DELAY_UI: number;
			static SENSOR_DELAY_NORMAL: number;
			static SENSOR_STATUS_UNRELIABLE: number;
			static SENSOR_STATUS_ACCURACY_LOW: number;
			static SENSOR_STATUS_ACCURACY_MEDIUM: number;
			static SENSOR_STATUS_ACCURACY_HIGH: number;
			static AXIS_X: number;
			static AXIS_Y: number;
			static AXIS_Z: number;
			static AXIS_MINUS_X: number;
			static AXIS_MINUS_Y: number;
			static AXIS_MINUS_Z: number;
			static class: java.lang.Class<android.hardware.SensorManager>;
			getSensorList(arg1: number): java.util.IList<android.hardware.Sensor>;
			getSensors(): number;
			static getAltitude(arg1: native.Float, arg2: native.Float): number;
			static getRotationMatrixFromVector(arg1: native.Array<native.Float>, arg2: native.Array<native.Float>): void;
			static getQuaternionFromVector(arg1: native.Array<native.Float>, arg2: native.Array<native.Float>): void;
			static getInclination(arg1: native.Array<native.Float>): number;
			getDefaultSensor(arg1: number): android.hardware.Sensor;
			registerListener(arg1: android.hardware.ISensorEventListener, arg2: android.hardware.Sensor, arg3: number): boolean;
			registerListener(arg1: android.hardware.ISensorEventListener, arg2: android.hardware.Sensor, arg3: number, arg4: android.os.Handler): boolean;
			registerListener(arg1: android.hardware.ISensorListener, arg2: number, arg3: number): boolean;
			registerListener(arg1: android.hardware.ISensorListener, arg2: number): boolean;
			unregisterListener(arg1: android.hardware.ISensorEventListener): void;
			unregisterListener(arg1: android.hardware.ISensorListener): void;
			unregisterListener(arg1: android.hardware.ISensorListener, arg2: number): void;
			unregisterListener(arg1: android.hardware.ISensorEventListener, arg2: android.hardware.Sensor): void;
			static getRotationMatrix(arg1: native.Array<native.Float>, arg2: native.Array<native.Float>, arg3: native.Array<native.Float>, arg4: native.Array<native.Float>): boolean;
			static remapCoordinateSystem(arg1: native.Array<native.Float>, arg2: number, arg3: number, arg4: native.Array<native.Float>): boolean;
			static getAngleChange(arg1: native.Array<native.Float>, arg2: native.Array<native.Float>, arg3: native.Array<native.Float>): void;
			static getOrientation(arg1: native.Array<native.Float>, arg2: native.Array<native.Float>): native.Array<native.Float>;
		}
		export class Camera extends java.lang.Object {
			static ACTION_NEW_PICTURE: java.lang.String;
			static ACTION_NEW_VIDEO: java.lang.String;
			static CAMERA_ERROR_UNKNOWN: number;
			static CAMERA_ERROR_SERVER_DIED: number;
			static class: java.lang.Class<android.hardware.Camera>;
			Size: { new (arg2: number, arg3: number): android.hardware.Camera.Size };
			Parameters: android.hardware.Camera.Parameters;
			static getCameraInfo(arg1: number, arg2: android.hardware.Camera.CameraInfo): void;
			takePicture(arg1: android.hardware.Camera.IShutterCallback, arg2: android.hardware.Camera.IPictureCallback, arg3: android.hardware.Camera.IPictureCallback): void;
			takePicture(arg1: android.hardware.Camera.IShutterCallback, arg2: android.hardware.Camera.IPictureCallback, arg3: android.hardware.Camera.IPictureCallback, arg4: android.hardware.Camera.IPictureCallback): void;
			stopPreview(): void;
			startPreview(): void;
			reconnect(): void;
			autoFocus(arg1: android.hardware.Camera.IAutoFocusCallback): void;
			setOneShotPreviewCallback(arg1: android.hardware.Camera.IPreviewCallback): void;
			setPreviewCallbackWithBuffer(arg1: android.hardware.Camera.IPreviewCallback): void;
			setAutoFocusMoveCallback(arg1: android.hardware.Camera.IAutoFocusMoveCallback): void;
			setFaceDetectionListener(arg1: android.hardware.Camera.IFaceDetectionListener): void;
			stopSmoothZoom(): void;
			cancelAutoFocus(): void;
			enableShutterSound(arg1: boolean): boolean;
			addCallbackBuffer(arg1: native.Array<native.Byte>): void;
			setZoomChangeListener(arg1: android.hardware.Camera.IOnZoomChangeListener): void;
			stopFaceDetection(): void;
			setPreviewCallback(arg1: android.hardware.Camera.IPreviewCallback): void;
			startSmoothZoom(arg1: number): void;
			static getNumberOfCameras(): number;
			setPreviewDisplay(arg1: android.view.ISurfaceHolder): void;
			setDisplayOrientation(arg1: number): void;
			setErrorCallback(arg1: android.hardware.Camera.IErrorCallback): void;
			setPreviewTexture(arg1: android.graphics.SurfaceTexture): void;
			startFaceDetection(): void;
			lock(): void;
			static open(): android.hardware.Camera;
			static open(arg1: number): android.hardware.Camera;
			unlock(): void;
			release(): void;
			getParameters(): android.hardware.Camera.Parameters;
			setParameters(arg1: android.hardware.Camera.Parameters): void;
		}
		export module Camera {
			export interface IAutoFocusMoveCallback {
				onAutoFocusMoving(arg1: boolean, arg2: android.hardware.Camera): void;
			}
			export class Parameters extends java.lang.Object {
				static WHITE_BALANCE_AUTO: java.lang.String;
				static WHITE_BALANCE_INCANDESCENT: java.lang.String;
				static WHITE_BALANCE_FLUORESCENT: java.lang.String;
				static WHITE_BALANCE_WARM_FLUORESCENT: java.lang.String;
				static WHITE_BALANCE_DAYLIGHT: java.lang.String;
				static WHITE_BALANCE_CLOUDY_DAYLIGHT: java.lang.String;
				static WHITE_BALANCE_TWILIGHT: java.lang.String;
				static WHITE_BALANCE_SHADE: java.lang.String;
				static EFFECT_NONE: java.lang.String;
				static EFFECT_MONO: java.lang.String;
				static EFFECT_NEGATIVE: java.lang.String;
				static EFFECT_SOLARIZE: java.lang.String;
				static EFFECT_SEPIA: java.lang.String;
				static EFFECT_POSTERIZE: java.lang.String;
				static EFFECT_WHITEBOARD: java.lang.String;
				static EFFECT_BLACKBOARD: java.lang.String;
				static EFFECT_AQUA: java.lang.String;
				static ANTIBANDING_AUTO: java.lang.String;
				static ANTIBANDING_50HZ: java.lang.String;
				static ANTIBANDING_60HZ: java.lang.String;
				static ANTIBANDING_OFF: java.lang.String;
				static FLASH_MODE_OFF: java.lang.String;
				static FLASH_MODE_AUTO: java.lang.String;
				static FLASH_MODE_ON: java.lang.String;
				static FLASH_MODE_RED_EYE: java.lang.String;
				static FLASH_MODE_TORCH: java.lang.String;
				static SCENE_MODE_AUTO: java.lang.String;
				static SCENE_MODE_ACTION: java.lang.String;
				static SCENE_MODE_PORTRAIT: java.lang.String;
				static SCENE_MODE_LANDSCAPE: java.lang.String;
				static SCENE_MODE_NIGHT: java.lang.String;
				static SCENE_MODE_NIGHT_PORTRAIT: java.lang.String;
				static SCENE_MODE_THEATRE: java.lang.String;
				static SCENE_MODE_BEACH: java.lang.String;
				static SCENE_MODE_SNOW: java.lang.String;
				static SCENE_MODE_SUNSET: java.lang.String;
				static SCENE_MODE_STEADYPHOTO: java.lang.String;
				static SCENE_MODE_FIREWORKS: java.lang.String;
				static SCENE_MODE_SPORTS: java.lang.String;
				static SCENE_MODE_PARTY: java.lang.String;
				static SCENE_MODE_CANDLELIGHT: java.lang.String;
				static SCENE_MODE_BARCODE: java.lang.String;
				static SCENE_MODE_HDR: java.lang.String;
				static FOCUS_MODE_AUTO: java.lang.String;
				static FOCUS_MODE_INFINITY: java.lang.String;
				static FOCUS_MODE_MACRO: java.lang.String;
				static FOCUS_MODE_FIXED: java.lang.String;
				static FOCUS_MODE_EDOF: java.lang.String;
				static FOCUS_MODE_CONTINUOUS_VIDEO: java.lang.String;
				static FOCUS_MODE_CONTINUOUS_PICTURE: java.lang.String;
				static FOCUS_DISTANCE_NEAR_INDEX: number;
				static FOCUS_DISTANCE_OPTIMAL_INDEX: number;
				static FOCUS_DISTANCE_FAR_INDEX: number;
				static PREVIEW_FPS_MIN_INDEX: number;
				static PREVIEW_FPS_MAX_INDEX: number;
				static class: java.lang.Class<android.hardware.Camera.Parameters>;
				FocusAreas: java.util.IList<android.hardware.Camera.Area>;
				WhiteBalance: string;
				VideoStabilization: boolean;
				Zoom: number;
				PictureFormat: number;
				Antibanding: string;
				AutoExposureLock: boolean;
				PreviewFrameRate: number;
				FocusMode: string;
				PreviewFormat: number;
				AutoWhiteBalanceLock: boolean;
				MeteringAreas: java.util.IList<android.hardware.Camera.Area>;
				ColorEffect: string;
				JpegQuality: number;
				JpegThumbnailQuality: number;
				ExposureCompensation: number;
				FlashMode: string;
				SceneMode: string;
				setRotation(arg1: number): void;
				getPreferredPreviewSizeForVideo(): android.hardware.Camera.Size;
				getSupportedJpegThumbnailSizes(): java.util.IList<android.hardware.Camera.Size>;
				isAutoWhiteBalanceLockSupported(): boolean;
				unflatten(arg1: java.lang.String): void;
				unflatten(arg1: string): void;
				flatten(): string;
				getFlashMode(): string;
				setZoom(arg1: number): void;
				getSceneMode(): string;
				getMaxZoom(): number;
				removeGpsData(): void;
				setFocusMode(arg1: java.lang.String): void;
				setFocusMode(arg1: string): void;
				setSceneMode(arg1: java.lang.String): void;
				setSceneMode(arg1: string): void;
				getFocusMode(): string;
				setFlashMode(arg1: java.lang.String): void;
				setFlashMode(arg1: string): void;
				getZoom(): number;
				setFocusAreas(arg1: java.util.IList<android.hardware.Camera.Area>): void;
				getZoomRatios(): java.util.IList<java.lang.Integer>;
				getFocusAreas(): java.util.IList<android.hardware.Camera.Area>;
				getMaxExposureCompensation(): number;
				getMinExposureCompensation(): number;
				isAutoExposureLockSupported(): boolean;
				getSupportedWhiteBalance(): java.util.IList<string>;
				getAutoWhiteBalanceLock(): boolean;
				getMaxNumMeteringAreas(): number;
				getHorizontalViewAngle(): number;
				getMaxNumDetectedFaces(): number;
				isVideoSnapshotSupported(): boolean;
				getSupportedVideoSizes(): java.util.IList<android.hardware.Camera.Size>;
				getSupportedPreviewFormats(): java.util.IList<java.lang.Integer>;
				getSupportedAntibanding(): java.util.IList<string>;
				getSupportedPictureSizes(): java.util.IList<android.hardware.Camera.Size>;
				getSupportedFlashModes(): java.util.IList<string>;
				getSupportedFocusModes(): java.util.IList<string>;
				getExposureCompensation(): number;
				setExposureCompensation(arg1: number): void;
				getSupportedPictureFormats(): java.util.IList<java.lang.Integer>;
				getSupportedSceneModes(): java.util.IList<string>;
				getJpegThumbnailQuality(): number;
				getExposureCompensationStep(): number;
				setJpegThumbnailQuality(arg1: number): void;
				setAutoWhiteBalanceLock(arg1: boolean): void;
				getSupportedPreviewFpsRange(): java.util.IList<native.Array<number>>;
				setGpsProcessingMethod(arg1: java.lang.String): void;
				setGpsProcessingMethod(arg1: string): void;
				getSupportedPreviewSizes(): java.util.IList<android.hardware.Camera.Size>;
				getSupportedColorEffects(): java.util.IList<string>;
				getSupportedPreviewFrameRates(): java.util.IList<java.lang.Integer>;
				isVideoStabilizationSupported(): boolean;
				getPictureSize(): android.hardware.Camera.Size;
				getPreviewSize(): android.hardware.Camera.Size;
				getJpegQuality(): number;
				setPictureFormat(arg1: number): void;
				setPreviewSize(arg1: number, arg2: number): void;
				getPictureFormat(): number;
				setGpsLatitude(arg1: native.Double): void;
				setGpsLatitude(arg1: number): void;
				setPreviewFrameRate(arg1: number): void;
				getPreviewFrameRate(): number;
				getJpegThumbnailSize(): android.hardware.Camera.Size;
				setJpegQuality(arg1: number): void;
				setJpegThumbnailSize(arg1: number, arg2: number): void;
				setPreviewFpsRange(arg1: number, arg2: number): void;
				setPreviewFormat(arg1: number): void;
				getPreviewFpsRange(arg1: native.Array<number>): void;
				getPreviewFormat(): number;
				setPictureSize(arg1: number, arg2: number): void;
				setRecordingHint(arg1: boolean): void;
				setGpsLongitude(arg1: native.Double): void;
				setGpsLongitude(arg1: number): void;
				getVerticalViewAngle(): number;
				isZoomSupported(): boolean;
				setVideoStabilization(arg1: boolean): void;
				setMeteringAreas(arg1: java.util.IList<android.hardware.Camera.Area>): void;
				getColorEffect(): string;
				getMeteringAreas(): java.util.IList<android.hardware.Camera.Area>;
				setGpsAltitude(arg1: native.Double): void;
				setGpsAltitude(arg1: number): void;
				getFocalLength(): number;
				isSmoothZoomSupported(): boolean;
				setAntibanding(arg1: java.lang.String): void;
				setAntibanding(arg1: string): void;
				getAutoExposureLock(): boolean;
				getAntibanding(): string;
				setAutoExposureLock(arg1: boolean): void;
				getFocusDistances(arg1: native.Array<native.Float>): void;
				getMaxNumFocusAreas(): number;
				getVideoStabilization(): boolean;
				setGpsTimestamp(arg1: native.Long): void;
				getWhiteBalance(): string;
				setWhiteBalance(arg1: java.lang.String): void;
				setWhiteBalance(arg1: string): void;
				setColorEffect(arg1: java.lang.String): void;
				setColorEffect(arg1: string): void;
				get(arg1: java.lang.String): string;
				get(arg1: string): string;
				remove(arg1: java.lang.String): void;
				remove(arg1: string): void;
				getInt(arg1: java.lang.String): number;
				getInt(arg1: string): number;
				set(arg1: java.lang.String, arg2: number): void;
				set(arg1: string, arg2: number): void;
				set(arg1: java.lang.String, arg2: java.lang.String): void;
				set(arg1: string, arg2: string): void;
			}
			export interface IErrorCallback {
				onError(arg1: number, arg2: android.hardware.Camera): void;
			}
			export class FaceDetectionListener implements android.hardware.Camera.IFaceDetectionListener {
				constructor(implementation: android.hardware.Camera.IFaceDetectionListener);
				onFaceDetection(arg1: native.Array<android.hardware.Camera.Face>, arg2: android.hardware.Camera): void;
			}
			export class Area extends java.lang.Object {
				constructor(arg1: android.graphics.Rect, arg2: number);
				rect: android.graphics.Rect;
				weight: number;
				static class: java.lang.Class<android.hardware.Camera.Area>;
				equals(arg1: any): boolean;
			}
			export class ErrorCallback implements android.hardware.Camera.IErrorCallback {
				constructor(implementation: android.hardware.Camera.IErrorCallback);
				onError(arg1: number, arg2: android.hardware.Camera): void;
			}
			export class ShutterCallback implements android.hardware.Camera.IShutterCallback {
				constructor(implementation: android.hardware.Camera.IShutterCallback);
				onShutter(): void;
			}
			export interface IShutterCallback {
				onShutter(): void;
			}
			export interface IAutoFocusCallback {
				onAutoFocus(arg1: boolean, arg2: android.hardware.Camera): void;
			}
			export class OnZoomChangeListener implements android.hardware.Camera.IOnZoomChangeListener {
				constructor(implementation: android.hardware.Camera.IOnZoomChangeListener);
				onZoomChange(arg1: number, arg2: boolean, arg3: android.hardware.Camera): void;
			}
			export interface IPictureCallback {
				onPictureTaken(arg1: native.Array<native.Byte>, arg2: android.hardware.Camera): void;
			}
			export interface IPreviewCallback {
				onPreviewFrame(arg1: native.Array<native.Byte>, arg2: android.hardware.Camera): void;
			}
			export class AutoFocusCallback implements android.hardware.Camera.IAutoFocusCallback {
				constructor(implementation: android.hardware.Camera.IAutoFocusCallback);
				onAutoFocus(arg1: boolean, arg2: android.hardware.Camera): void;
			}
			export interface IFaceDetectionListener {
				onFaceDetection(arg1: native.Array<android.hardware.Camera.Face>, arg2: android.hardware.Camera): void;
			}
			export class PreviewCallback implements android.hardware.Camera.IPreviewCallback {
				constructor(implementation: android.hardware.Camera.IPreviewCallback);
				onPreviewFrame(arg1: native.Array<native.Byte>, arg2: android.hardware.Camera): void;
			}
			export class AutoFocusMoveCallback implements android.hardware.Camera.IAutoFocusMoveCallback {
				constructor(implementation: android.hardware.Camera.IAutoFocusMoveCallback);
				onAutoFocusMoving(arg1: boolean, arg2: android.hardware.Camera): void;
			}
			export class PictureCallback implements android.hardware.Camera.IPictureCallback {
				constructor(implementation: android.hardware.Camera.IPictureCallback);
				onPictureTaken(arg1: native.Array<native.Byte>, arg2: android.hardware.Camera): void;
			}
			export interface IOnZoomChangeListener {
				onZoomChange(arg1: number, arg2: boolean, arg3: android.hardware.Camera): void;
			}
			export class CameraInfo extends java.lang.Object {
				constructor();
				static CAMERA_FACING_BACK: number;
				static CAMERA_FACING_FRONT: number;
				facing: number;
				orientation: number;
				canDisableShutterSound: boolean;
				static class: java.lang.Class<android.hardware.Camera.CameraInfo>;
			}
			export class Face extends java.lang.Object {
				constructor();
				rect: android.graphics.Rect;
				score: number;
				id: number;
				leftEye: android.graphics.Point;
				rightEye: android.graphics.Point;
				mouth: android.graphics.Point;
				static class: java.lang.Class<android.hardware.Camera.Face>;
			}
			export class Size extends java.lang.Object {
				width: number;
				height: number;
				static class: java.lang.Class<android.hardware.Camera.Size>;
				hashCode(): number;
				equals(arg1: any): boolean;
			}
		}
		export class Sensor extends java.lang.Object {
			static TYPE_ACCELEROMETER: number;
			static TYPE_MAGNETIC_FIELD: number;
			static TYPE_ORIENTATION: number;
			static TYPE_GYROSCOPE: number;
			static TYPE_LIGHT: number;
			static TYPE_PRESSURE: number;
			static TYPE_TEMPERATURE: number;
			static TYPE_PROXIMITY: number;
			static TYPE_GRAVITY: number;
			static TYPE_LINEAR_ACCELERATION: number;
			static TYPE_ROTATION_VECTOR: number;
			static TYPE_RELATIVE_HUMIDITY: number;
			static TYPE_AMBIENT_TEMPERATURE: number;
			static TYPE_ALL: number;
			static class: java.lang.Class<android.hardware.Sensor>;
			getResolution(): number;
			getPower(): number;
			getMinDelay(): number;
			getVendor(): string;
			getMaximumRange(): number;
			toString(): string;
			getName(): string;
			getType(): number;
			getVersion(): number;
		}
		export class SensorEventListener implements android.hardware.ISensorEventListener {
			constructor(implementation: android.hardware.ISensorEventListener);
			onAccuracyChanged(arg1: android.hardware.Sensor, arg2: number): void;
			onSensorChanged(arg1: android.hardware.SensorEvent): void;
		}
		export interface ISensorEventListener {
			onAccuracyChanged(arg1: android.hardware.Sensor, arg2: number): void;
			onSensorChanged(arg1: android.hardware.SensorEvent): void;
		}
		export module usb {
			export class UsbConstants extends java.lang.Object {
				constructor();
				static USB_ENDPOINT_DIR_MASK: number;
				static USB_DIR_OUT: number;
				static USB_DIR_IN: number;
				static USB_ENDPOINT_NUMBER_MASK: number;
				static USB_ENDPOINT_XFERTYPE_MASK: number;
				static USB_ENDPOINT_XFER_CONTROL: number;
				static USB_ENDPOINT_XFER_ISOC: number;
				static USB_ENDPOINT_XFER_BULK: number;
				static USB_ENDPOINT_XFER_INT: number;
				static USB_TYPE_MASK: number;
				static USB_TYPE_STANDARD: number;
				static USB_TYPE_CLASS: number;
				static USB_TYPE_VENDOR: number;
				static USB_TYPE_RESERVED: number;
				static USB_CLASS_PER_INTERFACE: number;
				static USB_CLASS_AUDIO: number;
				static USB_CLASS_COMM: number;
				static USB_CLASS_HID: number;
				static USB_CLASS_PHYSICA: number;
				static USB_CLASS_STILL_IMAGE: number;
				static USB_CLASS_PRINTER: number;
				static USB_CLASS_MASS_STORAGE: number;
				static USB_CLASS_HUB: number;
				static USB_CLASS_CDC_DATA: number;
				static USB_CLASS_CSCID: number;
				static USB_CLASS_CONTENT_SEC: number;
				static USB_CLASS_VIDEO: number;
				static USB_CLASS_WIRELESS_CONTROLLER: number;
				static USB_CLASS_MISC: number;
				static USB_CLASS_APP_SPEC: number;
				static USB_CLASS_VENDOR_SPEC: number;
				static USB_INTERFACE_SUBCLASS_BOOT: number;
				static USB_SUBCLASS_VENDOR_SPEC: number;
				static class: java.lang.Class<android.hardware.usb.UsbConstants>;
			}
			export class UsbDeviceConnection extends java.lang.Object {
				static class: java.lang.Class<android.hardware.usb.UsbDeviceConnection>;
				bulkTransfer(arg1: android.hardware.usb.UsbEndpoint, arg2: native.Array<native.Byte>, arg3: number, arg4: number): number;
				getSerial(): string;
				requestWait(): android.hardware.usb.UsbRequest;
				getRawDescriptors(): native.Array<native.Byte>;
				claimInterface(arg1: android.hardware.usb.UsbInterface, arg2: boolean): boolean;
				releaseInterface(arg1: android.hardware.usb.UsbInterface): boolean;
				controlTransfer(arg1: number, arg2: number, arg3: number, arg4: number, arg5: native.Array<native.Byte>, arg6: number, arg7: number): number;
				close(): void;
				getFileDescriptor(): number;
			}
			export class UsbAccessory extends java.lang.Object implements android.os.IParcelable {
				static CREATOR: android.os.Parcelable.ICreator<android.hardware.usb.UsbAccessory>;
				static class: java.lang.Class<android.hardware.usb.UsbAccessory>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getManufacturer(): string;
				getSerial(): string;
				getUri(): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getVersion(): string;
				getModel(): string;
				getDescription(): string;
			}
			export class UsbInterface extends java.lang.Object implements android.os.IParcelable {
				static CREATOR: android.os.Parcelable.ICreator<android.hardware.usb.UsbInterface>;
				static class: java.lang.Class<android.hardware.usb.UsbInterface>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getEndpoint(arg1: number): android.hardware.usb.UsbEndpoint;
				getInterfaceSubclass(): number;
				getInterfaceProtocol(): number;
				getEndpointCount(): number;
				getInterfaceClass(): number;
				toString(): string;
				getId(): number;
			}
			export class UsbEndpoint extends java.lang.Object implements android.os.IParcelable {
				static CREATOR: android.os.Parcelable.ICreator<android.hardware.usb.UsbEndpoint>;
				static class: java.lang.Class<android.hardware.usb.UsbEndpoint>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getInterval(): number;
				getEndpointNumber(): number;
				getMaxPacketSize(): number;
				toString(): string;
				getType(): number;
				getAddress(): number;
				getAttributes(): number;
				getDirection(): number;
			}
			export class UsbRequest extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.hardware.usb.UsbRequest>;
				ClientData: any;
				getEndpoint(): android.hardware.usb.UsbEndpoint;
				getClientData(): any;
				setClientData(arg1: any): void;
				queue(arg1: java.nio.ByteBuffer, arg2: number): boolean;
				close(): void;
				initialize(arg1: android.hardware.usb.UsbDeviceConnection, arg2: android.hardware.usb.UsbEndpoint): boolean;
				cancel(): boolean;
			}
			export class UsbManager extends java.lang.Object {
				static ACTION_USB_DEVICE_ATTACHED: java.lang.String;
				static ACTION_USB_DEVICE_DETACHED: java.lang.String;
				static ACTION_USB_ACCESSORY_ATTACHED: java.lang.String;
				static ACTION_USB_ACCESSORY_DETACHED: java.lang.String;
				static EXTRA_DEVICE: java.lang.String;
				static EXTRA_ACCESSORY: java.lang.String;
				static EXTRA_PERMISSION_GRANTED: java.lang.String;
				static class: java.lang.Class<android.hardware.usb.UsbManager>;
				openAccessory(arg1: android.hardware.usb.UsbAccessory): android.os.ParcelFileDescriptor;
				openDevice(arg1: android.hardware.usb.UsbDevice): android.hardware.usb.UsbDeviceConnection;
				getDeviceList(): java.util.HashMap<string, android.hardware.usb.UsbDevice>;
				getAccessoryList(): native.Array<android.hardware.usb.UsbAccessory>;
				requestPermission(arg1: android.hardware.usb.UsbDevice, arg2: android.app.PendingIntent): void;
				requestPermission(arg1: android.hardware.usb.UsbAccessory, arg2: android.app.PendingIntent): void;
				hasPermission(arg1: android.hardware.usb.UsbAccessory): boolean;
				hasPermission(arg1: android.hardware.usb.UsbDevice): boolean;
			}
			export class UsbDevice extends java.lang.Object implements android.os.IParcelable {
				static CREATOR: android.os.Parcelable.ICreator<android.hardware.usb.UsbDevice>;
				static class: java.lang.Class<android.hardware.usb.UsbDevice>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getDeviceClass(): number;
				getDeviceId(): number;
				static getDeviceId(arg1: java.lang.String): number;
				static getDeviceId(arg1: string): number;
				getDeviceName(): string;
				static getDeviceName(arg1: number): string;
				getVendorId(): number;
				getProductId(): number;
				getDeviceSubclass(): number;
				getDeviceProtocol(): number;
				getInterfaceCount(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getInterface(arg1: number): android.hardware.usb.UsbInterface;
			}
		}
		export module display {
			export class DisplayManager extends java.lang.Object {
				static DISPLAY_CATEGORY_PRESENTATION: java.lang.String;
				static class: java.lang.Class<android.hardware.display.DisplayManager>;
				getDisplay(arg1: number): android.view.Display;
				getDisplays(): native.Array<android.view.Display>;
				getDisplays(arg1: java.lang.String): native.Array<android.view.Display>;
				getDisplays(arg1: string): native.Array<android.view.Display>;
				registerDisplayListener(arg1: android.hardware.display.DisplayManager.IDisplayListener, arg2: android.os.Handler): void;
				unregisterDisplayListener(arg1: android.hardware.display.DisplayManager.IDisplayListener): void;
			}
			export module DisplayManager {
				export class DisplayListener implements android.hardware.display.DisplayManager.IDisplayListener {
					constructor(implementation: android.hardware.display.DisplayManager.IDisplayListener);
					onDisplayAdded(arg1: number): void;
					onDisplayRemoved(arg1: number): void;
					onDisplayChanged(arg1: number): void;
				}
				export interface IDisplayListener {
					onDisplayAdded(arg1: number): void;
					onDisplayRemoved(arg1: number): void;
					onDisplayChanged(arg1: number): void;
				}
			}
		}
		export class GeomagneticField extends java.lang.Object {
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Long);
			static class: java.lang.Class<android.hardware.GeomagneticField>;
			getZ(): number;
			getDeclination(): number;
			getInclination(): number;
			getFieldStrength(): number;
			getHorizontalStrength(): number;
			getX(): number;
			getY(): number;
		}
		export interface ISensorListener {
			onAccuracyChanged(arg1: number, arg2: number): void;
			onSensorChanged(arg1: number, arg2: native.Array<native.Float>): void;
		}
		export class SensorEvent extends java.lang.Object {
			values: native.Array<native.Float>;
			sensor: android.hardware.Sensor;
			accuracy: number;
			timestamp: native.Long;
			static class: java.lang.Class<android.hardware.SensorEvent>;
		}
	}
	export module test {
		export class RenamingDelegatingContext extends android.content.ContextWrapper {
			constructor(arg1: android.content.Context, arg2: java.lang.String);
			constructor(arg1: android.content.Context, arg2: string);
			constructor(arg1: android.content.Context, arg2: android.content.Context, arg3: java.lang.String);
			constructor(arg1: android.content.Context, arg2: android.content.Context, arg3: string);
			static class: java.lang.Class<android.test.RenamingDelegatingContext>;
			openFileOutput(arg1: java.lang.String, arg2: number): java.io.FileOutputStream;
			openFileOutput(arg1: string, arg2: number): java.io.FileOutputStream;
			openOrCreateDatabase(arg1: java.lang.String, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: string, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: java.lang.String, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: string, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
			getDatabasePath(arg1: java.lang.String): java.io.File;
			getDatabasePath(arg1: string): java.io.File;
			deleteDatabase(arg1: java.lang.String): boolean;
			deleteDatabase(arg1: string): boolean;
			getFileStreamPath(arg1: java.lang.String): java.io.File;
			getFileStreamPath(arg1: string): java.io.File;
			getCacheDir(): java.io.File;
			databaseList(): native.Array<java.lang.String>;
			deleteFile(arg1: java.lang.String): boolean;
			deleteFile(arg1: string): boolean;
			openFileInput(arg1: java.lang.String): java.io.FileInputStream;
			openFileInput(arg1: string): java.io.FileInputStream;
			fileList(): native.Array<java.lang.String>;
			getDatabasePrefix(): string;
			makeExistingFilesAndDbsAccessible(): void;
			static providerWithRenamedContext<T extends android.content.ContentProvider>(arg1: java.lang.Class<T>, arg2: android.content.Context, arg3: java.lang.String, arg4: boolean): T;
			static providerWithRenamedContext<T extends android.content.ContentProvider>(arg1: java.lang.Class<T>, arg2: android.content.Context, arg3: string, arg4: boolean): T;
			static providerWithRenamedContext<T extends android.content.ContentProvider>(arg1: java.lang.Class<T>, arg2: android.content.Context, arg3: java.lang.String): T;
			static providerWithRenamedContext<T extends android.content.ContentProvider>(arg1: java.lang.Class<T>, arg2: android.content.Context, arg3: string): T;
		}
		export class PerformanceTestCase implements android.test.IPerformanceTestCase {
			constructor(implementation: android.test.IPerformanceTestCase);
			startPerformance(arg1: android.test.PerformanceTestCase.IIntermediates): number;
			isPerformanceOnly(): boolean;
		}
		export module PerformanceTestCase {
			export interface IIntermediates {
				finishTiming(arg1: boolean): void;
				startTiming(arg1: boolean): void;
				setInternalIterations(arg1: number): void;
				addIntermediate(arg1: string, arg2: native.Long): void;
				addIntermediate(arg1: string): void;
			}
			export class Intermediates implements android.test.PerformanceTestCase.IIntermediates {
				constructor(implementation: android.test.PerformanceTestCase.IIntermediates);
				finishTiming(arg1: boolean): void;
				startTiming(arg1: boolean): void;
				setInternalIterations(arg1: number): void;
				addIntermediate(arg1: java.lang.String, arg2: native.Long): void;
				addIntermediate(arg1: string, arg2: native.Long): void;
				addIntermediate(arg1: java.lang.String): void;
				addIntermediate(arg1: string): void;
			}
		}
		export class SyncBaseInstrumentation extends android.test.InstrumentationTestCase {
			constructor();
			static class: java.lang.Class<android.test.SyncBaseInstrumentation>;
		}
		export interface ITestSuiteProvider {
			getTestSuite(): junit.framework.TestSuite;
		}
		export class ApplicationTestCase<T extends android.app.Application> extends android.test.AndroidTestCase {
			constructor(arg1: java.lang.Class<T>);
			static class: java.lang.Class<android.test.ApplicationTestCase<any>>;
			getApplication(): T;
			getSystemContext(): android.content.Context;
			testApplicationTestCaseSetUpProperly(): void;
		}
		export class LoaderTestCase extends android.test.AndroidTestCase {
			constructor();
			static class: java.lang.Class<android.test.LoaderTestCase>;
			getLoaderResultSynchronously<T>(arg1: android.content.Loader<T>): T;
		}
		export class ActivityInstrumentationTestCase2<T extends android.app.Activity> extends android.test.ActivityTestCase {
			constructor(arg1: java.lang.Class<T>);
			constructor(arg1: java.lang.String, arg2: java.lang.Class<T>);
			constructor(arg1: string, arg2: java.lang.Class<T>);
			static class: java.lang.Class<android.test.ActivityInstrumentationTestCase2<any>>;
			getActivity(): T;
			setActivityInitialTouchMode(arg1: boolean): void;
			setActivityIntent(arg1: android.content.Intent): void;
		}
		export class ProviderTestCase2<T extends android.content.ContentProvider> extends android.test.AndroidTestCase {
			constructor(arg1: java.lang.Class<T>, arg2: java.lang.String);
			constructor(arg1: java.lang.Class<T>, arg2: string);
			static class: java.lang.Class<android.test.ProviderTestCase2<any>>;
			static newResolverWithContentProviderFromSql<T extends android.content.ContentProvider>(arg1: android.content.Context, arg2: java.lang.String, arg3: java.lang.Class<T>, arg4: java.lang.String, arg5: java.lang.String, arg6: number, arg7: java.lang.String): android.content.ContentResolver;
			static newResolverWithContentProviderFromSql<T extends android.content.ContentProvider>(arg1: android.content.Context, arg2: string, arg3: java.lang.Class<T>, arg4: string, arg5: string, arg6: number, arg7: string): android.content.ContentResolver;
			getMockContentResolver(): android.test.mock.MockContentResolver;
			getMockContext(): android.test.IsolatedContext;
			getProvider(): T;
		}
		export module suitebuilder {
			export module annotation {
				export class Smoke implements java.lang.annotation.IAnnotation, android.test.suitebuilder.annotation.ISmoke {
					constructor(implementation: android.test.suitebuilder.annotation.ISmoke);
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export interface ISmoke extends java.lang.annotation.IAnnotation {
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export interface ILargeTest extends java.lang.annotation.IAnnotation {
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export interface ISmallTest extends java.lang.annotation.IAnnotation {
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export class MediumTest implements java.lang.annotation.IAnnotation, android.test.suitebuilder.annotation.IMediumTest {
					constructor(implementation: android.test.suitebuilder.annotation.IMediumTest);
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export interface IMediumTest extends java.lang.annotation.IAnnotation {
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export class Suppress implements java.lang.annotation.IAnnotation, android.test.suitebuilder.annotation.ISuppress {
					constructor(implementation: android.test.suitebuilder.annotation.ISuppress);
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export class SmallTest implements java.lang.annotation.IAnnotation, android.test.suitebuilder.annotation.ISmallTest {
					constructor(implementation: android.test.suitebuilder.annotation.ISmallTest);
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export interface ISuppress extends java.lang.annotation.IAnnotation {
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
				export class LargeTest implements java.lang.annotation.IAnnotation, android.test.suitebuilder.annotation.ILargeTest {
					constructor(implementation: android.test.suitebuilder.annotation.ILargeTest);
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					annotationType(): java.lang.Class<any>;
				}
			}
			export class TestMethod extends java.lang.Object {
				constructor(arg1: java.lang.reflect.Method, arg2: java.lang.Class<any>);
				constructor(arg1: junit.framework.TestCase);
				constructor(arg1: java.lang.String, arg2: java.lang.Class<any>);
				constructor(arg1: string, arg2: java.lang.Class<any>);
				static class: java.lang.Class<android.test.suitebuilder.TestMethod>;
				getEnclosingClassname(): string;
				createTest(): junit.framework.TestCase;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getName(): string;
				getAnnotation<T extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<T>): T;
				getEnclosingClass(): java.lang.Class<any>;
			}
			export class TestSuiteBuilder extends java.lang.Object {
				constructor(arg1: java.lang.Class<any>);
				constructor(arg1: java.lang.String, arg2: java.lang.ClassLoader);
				constructor(arg1: string, arg2: java.lang.ClassLoader);
				static class: java.lang.Class<android.test.suitebuilder.TestSuiteBuilder>;
				named(arg1: java.lang.String): android.test.suitebuilder.TestSuiteBuilder;
				named(arg1: string): android.test.suitebuilder.TestSuiteBuilder;
				addRequirements(arg1: java.util.IList<com.android.internal.util.IPredicate<android.test.suitebuilder.TestMethod>>): android.test.suitebuilder.TestSuiteBuilder;
				addRequirements(arg1: native.Array<com.android.internal.util.IPredicate<android.test.suitebuilder.TestMethod>>): android.test.suitebuilder.TestSuiteBuilder;
				excludePackages(arg1: native.Array<java.lang.String>): android.test.suitebuilder.TestSuiteBuilder;
				includePackages(arg1: native.Array<java.lang.String>): android.test.suitebuilder.TestSuiteBuilder;
				includeAllPackagesUnderHere(): android.test.suitebuilder.TestSuiteBuilder;
				build(): junit.framework.TestSuite;
			}
			export module TestSuiteBuilder {
				export class FailedToCreateTests extends junit.framework.TestCase {
					constructor(arg1: java.lang.Exception);
					static class: java.lang.Class<android.test.suitebuilder.TestSuiteBuilder.FailedToCreateTests>;
					testSuiteConstructionFailed(): void;
				}
			}
		}
		export interface IUiThreadTest extends java.lang.annotation.IAnnotation {
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class ComparisonFailure extends android.test.AssertionFailedError {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string);
			static class: java.lang.Class<android.test.ComparisonFailure>;
			getMessage(): string;
		}
		export class UiThreadTest implements java.lang.annotation.IAnnotation, android.test.IUiThreadTest {
			constructor(implementation: android.test.IUiThreadTest);
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class FlakyTest implements java.lang.annotation.IAnnotation, android.test.IFlakyTest {
			constructor(implementation: android.test.IFlakyTest);
			tolerance(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class ProviderTestCase<T extends android.content.ContentProvider> extends android.test.InstrumentationTestCase {
			constructor(arg1: java.lang.Class<T>, arg2: java.lang.String);
			constructor(arg1: java.lang.Class<T>, arg2: string);
			static class: java.lang.Class<android.test.ProviderTestCase<any>>;
			static newResolverWithContentProviderFromSql<T extends android.content.ContentProvider>(arg1: android.content.Context, arg2: java.lang.Class<T>, arg3: java.lang.String, arg4: java.lang.String, arg5: number, arg6: java.lang.String): android.content.ContentResolver;
			static newResolverWithContentProviderFromSql<T extends android.content.ContentProvider>(arg1: android.content.Context, arg2: java.lang.Class<T>, arg3: string, arg4: string, arg5: number, arg6: string): android.content.ContentResolver;
			getMockContentResolver(): android.test.mock.MockContentResolver;
			getMockContext(): android.test.IsolatedContext;
			getProvider(): T;
		}
		export class ActivityUnitTestCase<T extends android.app.Activity> extends android.test.ActivityTestCase {
			constructor(arg1: java.lang.Class<T>);
			static class: java.lang.Class<android.test.ActivityUnitTestCase<any>>;
			getActivity(): T;
			getRequestedOrientation(): number;
			getFinishedActivityRequest(): number;
			getStartedActivityIntent(): android.content.Intent;
			getStartedActivityRequest(): number;
			setActivityContext(arg1: android.content.Context): void;
			setApplication(arg1: android.app.Application): void;
			isFinishCalled(): boolean;
		}
		export class ActivityInstrumentationTestCase<T extends android.app.Activity> extends android.test.ActivityTestCase {
			constructor(arg1: java.lang.String, arg2: java.lang.Class<T>, arg3: boolean);
			constructor(arg1: string, arg2: java.lang.Class<T>, arg3: boolean);
			constructor(arg1: java.lang.String, arg2: java.lang.Class<T>);
			constructor(arg1: string, arg2: java.lang.Class<T>);
			static class: java.lang.Class<android.test.ActivityInstrumentationTestCase<any>>;
			testActivityTestCaseSetUpProperly(): void;
			getActivity(): T;
		}
		export class IsolatedContext extends android.content.ContextWrapper {
			constructor(arg1: android.content.ContentResolver, arg2: android.content.Context);
			static class: java.lang.Class<android.test.IsolatedContext>;
			unregisterReceiver(arg1: android.content.BroadcastReceiver): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: java.lang.String): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: string): void;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter): android.content.Intent;
			getSystemService(arg1: java.lang.String): any;
			getSystemService(arg1: string): any;
			getContentResolver(): android.content.ContentResolver;
			getFilesDir(): java.io.File;
			sendBroadcast(arg1: android.content.Intent): void;
			bindService(arg1: android.content.Intent, arg2: android.content.IServiceConnection, arg3: number): boolean;
			checkUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number): number;
			checkUriPermission(arg1: android.net.Uri, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number, arg6: number): number;
			checkUriPermission(arg1: android.net.Uri, arg2: string, arg3: string, arg4: number, arg5: number, arg6: number): number;
			getAndClearBroadcastIntents(): java.util.IList<android.content.Intent>;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: java.lang.String, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: java.lang.String, arg7: android.os.Bundle): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: string, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: string, arg7: android.os.Bundle): void;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter, arg3: java.lang.String, arg4: android.os.Handler): android.content.Intent;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter, arg3: string, arg4: android.os.Handler): android.content.Intent;
			sendBroadcast(arg1: android.content.Intent, arg2: java.lang.String): void;
			sendBroadcast(arg1: android.content.Intent, arg2: string): void;
		}
		export interface IFlakyTest extends java.lang.annotation.IAnnotation {
			tolerance(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class AndroidTestRunner extends junit.runner.BaseTestRunner {
			constructor();
			static class: java.lang.Class<android.test.AndroidTestRunner>;
			setTestClassName(arg1: java.lang.String, arg2: java.lang.String): void;
			setTestClassName(arg1: string, arg2: string): void;
			clearTestListeners(): void;
			addTestListener(arg1: junit.framework.ITestListener): void;
			setInstrumentation(arg1: android.app.Instrumentation): void;
			setInstrumentaiton(arg1: android.app.Instrumentation): void;
			getTestClassName(): string;
			getTestCases(): java.util.IList<junit.framework.TestCase>;
			runTest(arg1: junit.framework.TestResult): void;
			runTest(): void;
			getTestResult(): junit.framework.TestResult;
			setTest(arg1: junit.framework.ITest): void;
			testEnded(arg1: java.lang.String): void;
			testEnded(arg1: string): void;
			setContext(arg1: android.content.Context): void;
			testStarted(arg1: java.lang.String): void;
			testStarted(arg1: string): void;
			testFailed(arg1: number, arg2: junit.framework.ITest, arg3: java.lang.Throwable): void;
		}
		export class AssertionFailedError extends java.lang.Error {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.test.AssertionFailedError>;
		}
		export module mock {
			export class MockApplication extends android.app.Application {
				constructor();
				static class: java.lang.Class<android.test.mock.MockApplication>;
				onCreate(): void;
				onConfigurationChanged(arg1: android.content.res.Configuration): void;
				onTerminate(): void;
			}
			export class MockPackageManager extends android.content.pm.PackageManager {
				constructor();
				static class: java.lang.Class<android.test.mock.MockPackageManager>;
				getServiceInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.ServiceInfo;
				addPermission(arg1: android.content.pm.PermissionInfo): boolean;
				removePermission(arg1: java.lang.String): void;
				removePermission(arg1: string): void;
				getApplicationInfo(arg1: java.lang.String, arg2: number): android.content.pm.ApplicationInfo;
				getApplicationInfo(arg1: string, arg2: number): android.content.pm.ApplicationInfo;
				getDrawable(arg1: java.lang.String, arg2: number, arg3: android.content.pm.ApplicationInfo): android.graphics.drawable.Drawable;
				getDrawable(arg1: string, arg2: number, arg3: android.content.pm.ApplicationInfo): android.graphics.drawable.Drawable;
				getXml(arg1: java.lang.String, arg2: number, arg3: android.content.pm.ApplicationInfo): android.content.res.IXmlResourceParser;
				getXml(arg1: string, arg2: number, arg3: android.content.pm.ApplicationInfo): android.content.res.IXmlResourceParser;
				getNameForUid(arg1: number): string;
				isSafeMode(): boolean;
				getInstrumentationInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.InstrumentationInfo;
				getApplicationEnabledSetting(arg1: java.lang.String): number;
				getApplicationEnabledSetting(arg1: string): number;
				getPermissionGroupInfo(arg1: java.lang.String, arg2: number): android.content.pm.PermissionGroupInfo;
				getPermissionGroupInfo(arg1: string, arg2: number): android.content.pm.PermissionGroupInfo;
				resolveContentProvider(arg1: java.lang.String, arg2: number): android.content.pm.ProviderInfo;
				resolveContentProvider(arg1: string, arg2: number): android.content.pm.ProviderInfo;
				getLaunchIntentForPackage(arg1: java.lang.String): android.content.Intent;
				getLaunchIntentForPackage(arg1: string): android.content.Intent;
				getComponentEnabledSetting(arg1: android.content.ComponentName): number;
				setComponentEnabledSetting(arg1: android.content.ComponentName, arg2: number, arg3: number): void;
				getPreferredActivities(arg1: java.util.IList<android.content.IntentFilter>, arg2: java.util.IList<android.content.ComponentName>, arg3: java.lang.String): number;
				getPreferredActivities(arg1: java.util.IList<android.content.IntentFilter>, arg2: java.util.IList<android.content.ComponentName>, arg3: string): number;
				getSystemSharedLibraryNames(): native.Array<java.lang.String>;
				getSystemAvailableFeatures(): native.Array<android.content.pm.FeatureInfo>;
				extendVerificationTimeout(arg1: number, arg2: number, arg3: native.Long): void;
				getInstalledApplications(arg1: number): java.util.IList<android.content.pm.ApplicationInfo>;
				getAllPermissionGroups(arg1: number): java.util.IList<android.content.pm.PermissionGroupInfo>;
				queryBroadcastReceivers(arg1: android.content.Intent, arg2: number): java.util.IList<android.content.pm.ResolveInfo>;
				getResourcesForActivity(arg1: android.content.ComponentName): android.content.res.Resources;
				getDefaultActivityIcon(): android.graphics.drawable.Drawable;
				queryIntentActivityOptions(arg1: android.content.ComponentName, arg2: native.Array<android.content.Intent>, arg3: android.content.Intent, arg4: number): java.util.IList<android.content.pm.ResolveInfo>;
				getResourcesForApplication(arg1: java.lang.String): android.content.res.Resources;
				getResourcesForApplication(arg1: string): android.content.res.Resources;
				getResourcesForApplication(arg1: android.content.pm.ApplicationInfo): android.content.res.Resources;
				queryPermissionsByGroup(arg1: java.lang.String, arg2: number): java.util.IList<android.content.pm.PermissionInfo>;
				queryPermissionsByGroup(arg1: string, arg2: number): java.util.IList<android.content.pm.PermissionInfo>;
				setInstallerPackageName(arg1: java.lang.String, arg2: java.lang.String): void;
				setInstallerPackageName(arg1: string, arg2: string): void;
				getInstallerPackageName(arg1: java.lang.String): string;
				getInstallerPackageName(arg1: string): string;
				removePackageFromPreferred(arg1: java.lang.String): void;
				removePackageFromPreferred(arg1: string): void;
				setApplicationEnabledSetting(arg1: java.lang.String, arg2: number, arg3: number): void;
				setApplicationEnabledSetting(arg1: string, arg2: number, arg3: number): void;
				getPackageGids(arg1: java.lang.String): native.Array<number>;
				getPackageGids(arg1: string): native.Array<number>;
				getReceiverInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.ActivityInfo;
				getInstalledPackages(arg1: number): java.util.IList<android.content.pm.PackageInfo>;
				addPermissionAsync(arg1: android.content.pm.PermissionInfo): boolean;
				resolveActivity(arg1: android.content.Intent, arg2: number): android.content.pm.ResolveInfo;
				queryIntentActivities(arg1: android.content.Intent, arg2: number): java.util.IList<android.content.pm.ResolveInfo>;
				queryIntentServices(arg1: android.content.Intent, arg2: number): java.util.IList<android.content.pm.ResolveInfo>;
				getActivityInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.ActivityInfo;
				getPermissionInfo(arg1: java.lang.String, arg2: number): android.content.pm.PermissionInfo;
				getPermissionInfo(arg1: string, arg2: number): android.content.pm.PermissionInfo;
				queryContentProviders(arg1: java.lang.String, arg2: number, arg3: number): java.util.IList<android.content.pm.ProviderInfo>;
				queryContentProviders(arg1: string, arg2: number, arg3: number): java.util.IList<android.content.pm.ProviderInfo>;
				getActivityIcon(arg1: android.content.Intent): android.graphics.drawable.Drawable;
				getActivityIcon(arg1: android.content.ComponentName): android.graphics.drawable.Drawable;
				queryInstrumentation(arg1: java.lang.String, arg2: number): java.util.IList<android.content.pm.InstrumentationInfo>;
				queryInstrumentation(arg1: string, arg2: number): java.util.IList<android.content.pm.InstrumentationInfo>;
				getApplicationIcon(arg1: android.content.pm.ApplicationInfo): android.graphics.drawable.Drawable;
				getApplicationIcon(arg1: java.lang.String): android.graphics.drawable.Drawable;
				getApplicationIcon(arg1: string): android.graphics.drawable.Drawable;
				resolveService(arg1: android.content.Intent, arg2: number): android.content.pm.ResolveInfo;
				getProviderInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.ProviderInfo;
				getPackagesForUid(arg1: number): native.Array<java.lang.String>;
				getActivityLogo(arg1: android.content.ComponentName): android.graphics.drawable.Drawable;
				getActivityLogo(arg1: android.content.Intent): android.graphics.drawable.Drawable;
				checkSignatures(arg1: java.lang.String, arg2: java.lang.String): number;
				checkSignatures(arg1: string, arg2: string): number;
				checkSignatures(arg1: number, arg2: number): number;
				hasSystemFeature(arg1: java.lang.String): boolean;
				hasSystemFeature(arg1: string): boolean;
				getPreferredPackages(arg1: number): java.util.IList<android.content.pm.PackageInfo>;
				addPreferredActivity(arg1: android.content.IntentFilter, arg2: number, arg3: native.Array<android.content.ComponentName>, arg4: android.content.ComponentName): void;
				getApplicationLabel(arg1: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				addPackageToPreferred(arg1: java.lang.String): void;
				addPackageToPreferred(arg1: string): void;
				getApplicationLogo(arg1: android.content.pm.ApplicationInfo): android.graphics.drawable.Drawable;
				getApplicationLogo(arg1: java.lang.String): android.graphics.drawable.Drawable;
				getApplicationLogo(arg1: string): android.graphics.drawable.Drawable;
				verifyPendingInstall(arg1: number, arg2: number): void;
				getPackageArchiveInfo(arg1: java.lang.String, arg2: number): android.content.pm.PackageInfo;
				getPackageArchiveInfo(arg1: string, arg2: number): android.content.pm.PackageInfo;
				currentToCanonicalPackageNames(arg1: native.Array<java.lang.String>): native.Array<java.lang.String>;
				canonicalToCurrentPackageNames(arg1: native.Array<java.lang.String>): native.Array<java.lang.String>;
				clearPackagePreferredActivities(arg1: java.lang.String): void;
				clearPackagePreferredActivities(arg1: string): void;
				checkPermission(arg1: java.lang.String, arg2: java.lang.String): number;
				checkPermission(arg1: string, arg2: string): number;
				getText(arg1: java.lang.String, arg2: number, arg3: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				getText(arg1: string, arg2: number, arg3: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				getPackageInfo(arg1: java.lang.String, arg2: number): android.content.pm.PackageInfo;
				getPackageInfo(arg1: string, arg2: number): android.content.pm.PackageInfo;
			}
			export class MockContext extends android.content.Context {
				constructor();
				static class: java.lang.Class<android.test.mock.MockContext>;
				enforceCallingOrSelfPermission(arg1: java.lang.String, arg2: java.lang.String): void;
				enforceCallingOrSelfPermission(arg1: string, arg2: string): void;
				getWallpaperDesiredMinimumHeight(): number;
				sendStickyOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: java.lang.String, arg7: android.os.Bundle): void;
				sendStickyOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: string, arg7: android.os.Bundle): void;
				getWallpaperDesiredMinimumWidth(): number;
				checkCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number): number;
				enforceCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number, arg3: java.lang.String): void;
				enforceCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number, arg3: string): void;
				openFileOutput(arg1: java.lang.String, arg2: number): java.io.FileOutputStream;
				openFileOutput(arg1: string, arg2: number): java.io.FileOutputStream;
				unregisterReceiver(arg1: android.content.BroadcastReceiver): void;
				getExternalCacheDir(): java.io.File;
				openOrCreateDatabase(arg1: java.lang.String, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
				openOrCreateDatabase(arg1: string, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
				openOrCreateDatabase(arg1: java.lang.String, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
				openOrCreateDatabase(arg1: string, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
				startIntentSender(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: number, arg5: number, arg6: android.os.Bundle): void;
				startIntentSender(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: number, arg5: number): void;
				clearWallpaper(): void;
				getDatabasePath(arg1: java.lang.String): java.io.File;
				getDatabasePath(arg1: string): java.io.File;
				sendStickyBroadcast(arg1: android.content.Intent): void;
				sendOrderedBroadcast(arg1: android.content.Intent, arg2: java.lang.String, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: java.lang.String, arg7: android.os.Bundle): void;
				sendOrderedBroadcast(arg1: android.content.Intent, arg2: string, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: string, arg7: android.os.Bundle): void;
				sendOrderedBroadcast(arg1: android.content.Intent, arg2: java.lang.String): void;
				sendOrderedBroadcast(arg1: android.content.Intent, arg2: string): void;
				sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
				sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: java.lang.String): void;
				sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: string): void;
				removeStickyBroadcast(arg1: android.content.Intent): void;
				registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter): android.content.Intent;
				registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter, arg3: java.lang.String, arg4: android.os.Handler): android.content.Intent;
				registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter, arg3: string, arg4: android.os.Handler): android.content.Intent;
				startInstrumentation(arg1: android.content.ComponentName, arg2: java.lang.String, arg3: android.os.Bundle): boolean;
				startInstrumentation(arg1: android.content.ComponentName, arg2: string, arg3: android.os.Bundle): boolean;
				getPackageCodePath(): string;
				getApplicationInfo(): android.content.pm.ApplicationInfo;
				enforcePermission(arg1: java.lang.String, arg2: number, arg3: number, arg4: java.lang.String): void;
				enforcePermission(arg1: string, arg2: number, arg3: number, arg4: string): void;
				grantUriPermission(arg1: java.lang.String, arg2: android.net.Uri, arg3: number): void;
				grantUriPermission(arg1: string, arg2: android.net.Uri, arg3: number): void;
				revokeUriPermission(arg1: android.net.Uri, arg2: number): void;
				getSystemService(arg1: java.lang.String): any;
				getSystemService(arg1: string): any;
				getApplicationContext(): android.content.Context;
				getSharedPreferences(arg1: java.lang.String, arg2: number): android.content.ISharedPreferences;
				getSharedPreferences(arg1: string, arg2: number): android.content.ISharedPreferences;
				getExternalFilesDir(arg1: java.lang.String): java.io.File;
				getExternalFilesDir(arg1: string): java.io.File;
				deleteDatabase(arg1: java.lang.String): boolean;
				deleteDatabase(arg1: string): boolean;
				startActivities(arg1: native.Array<android.content.Intent>, arg2: android.os.Bundle): void;
				startActivities(arg1: native.Array<android.content.Intent>): void;
				getFileStreamPath(arg1: java.lang.String): java.io.File;
				getFileStreamPath(arg1: string): java.io.File;
				getPackageManager(): android.content.pm.PackageManager;
				getContentResolver(): android.content.ContentResolver;
				getObbDir(): java.io.File;
				getCacheDir(): java.io.File;
				getDir(arg1: java.lang.String, arg2: number): java.io.File;
				getDir(arg1: string, arg2: number): java.io.File;
				getFilesDir(): java.io.File;
				databaseList(): native.Array<java.lang.String>;
				getAssets(): android.content.res.AssetManager;
				deleteFile(arg1: java.lang.String): boolean;
				deleteFile(arg1: string): boolean;
				openFileInput(arg1: java.lang.String): java.io.FileInputStream;
				openFileInput(arg1: string): java.io.FileInputStream;
				fileList(): native.Array<java.lang.String>;
				setTheme(arg1: number): void;
				getMainLooper(): android.os.Looper;
				peekWallpaper(): android.graphics.drawable.Drawable;
				sendBroadcast(arg1: android.content.Intent): void;
				sendBroadcast(arg1: android.content.Intent, arg2: java.lang.String): void;
				sendBroadcast(arg1: android.content.Intent, arg2: string): void;
				stopService(arg1: android.content.Intent): boolean;
				startActivity(arg1: android.content.Intent): void;
				startActivity(arg1: android.content.Intent, arg2: android.os.Bundle): void;
				isRestricted(): boolean;
				setWallpaper(arg1: java.io.InputStream): void;
				setWallpaper(arg1: android.graphics.Bitmap): void;
				startService(arg1: android.content.Intent): android.content.ComponentName;
				getWallpaper(): android.graphics.drawable.Drawable;
				unbindService(arg1: android.content.IServiceConnection): void;
				bindService(arg1: android.content.Intent, arg2: android.content.IServiceConnection, arg3: number): boolean;
				sendOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: java.lang.String, arg4: android.content.BroadcastReceiver, arg5: android.os.Handler, arg6: number, arg7: java.lang.String, arg8: android.os.Bundle): void;
				sendOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: string, arg4: android.content.BroadcastReceiver, arg5: android.os.Handler, arg6: number, arg7: string, arg8: android.os.Bundle): void;
				getPackageResourcePath(): string;
				sendStickyOrderedBroadcast(arg1: android.content.Intent, arg2: android.content.BroadcastReceiver, arg3: android.os.Handler, arg4: number, arg5: java.lang.String, arg6: android.os.Bundle): void;
				sendStickyOrderedBroadcast(arg1: android.content.Intent, arg2: android.content.BroadcastReceiver, arg3: android.os.Handler, arg4: number, arg5: string, arg6: android.os.Bundle): void;
				sendStickyBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
				checkCallingPermission(arg1: java.lang.String): number;
				checkCallingPermission(arg1: string): number;
				checkCallingOrSelfPermission(arg1: java.lang.String): number;
				checkCallingOrSelfPermission(arg1: string): number;
				removeStickyBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
				enforceCallingPermission(arg1: java.lang.String, arg2: java.lang.String): void;
				enforceCallingPermission(arg1: string, arg2: string): void;
				enforceCallingUriPermission(arg1: android.net.Uri, arg2: number, arg3: java.lang.String): void;
				enforceCallingUriPermission(arg1: android.net.Uri, arg2: number, arg3: string): void;
				createConfigurationContext(arg1: android.content.res.Configuration): android.content.Context;
				checkCallingUriPermission(arg1: android.net.Uri, arg2: number): number;
				checkUriPermission(arg1: android.net.Uri, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number, arg6: number): number;
				checkUriPermission(arg1: android.net.Uri, arg2: string, arg3: string, arg4: number, arg5: number, arg6: number): number;
				checkUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number): number;
				enforceUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number, arg5: java.lang.String): void;
				enforceUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number, arg5: string): void;
				enforceUriPermission(arg1: android.net.Uri, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number, arg6: number, arg7: java.lang.String): void;
				enforceUriPermission(arg1: android.net.Uri, arg2: string, arg3: string, arg4: number, arg5: number, arg6: number, arg7: string): void;
				createDisplayContext(arg1: android.view.Display): android.content.Context;
				createPackageContext(arg1: java.lang.String, arg2: number): android.content.Context;
				createPackageContext(arg1: string, arg2: number): android.content.Context;
				checkPermission(arg1: java.lang.String, arg2: number, arg3: number): number;
				checkPermission(arg1: string, arg2: number, arg3: number): number;
				getClassLoader(): java.lang.ClassLoader;
				getResources(): android.content.res.Resources;
				getPackageName(): string;
				getTheme(): android.content.res.Resources.Theme;
			}
			export class MockContentResolver extends android.content.ContentResolver {
				constructor();
				static class: java.lang.Class<android.test.mock.MockContentResolver>;
				notifyChange(arg1: android.net.Uri, arg2: android.database.ContentObserver, arg3: boolean): void;
				addProvider(arg1: java.lang.String, arg2: android.content.ContentProvider): void;
				addProvider(arg1: string, arg2: android.content.ContentProvider): void;
				notifyChange(arg1: android.net.Uri, arg2: android.database.ContentObserver): void;
			}
			export class MockCursor extends java.lang.Object implements android.database.ICursor {
				constructor();
				static class: java.lang.Class<android.test.mock.MockCursor>;
				getBlob(arg1: number): native.Array<native.Byte>;
				isAfterLast(): boolean;
				isBeforeFirst(): boolean;
				isFirst(): boolean;
				isLast(): boolean;
				unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
				registerDataSetObserver(arg1: android.database.DataSetObserver): void;
				getExtras(): android.os.Bundle;
				moveToLast(): boolean;
				moveToFirst(): boolean;
				moveToNext(): boolean;
				requery(): boolean;
				respond(arg1: android.os.Bundle): android.os.Bundle;
				unregisterContentObserver(arg1: android.database.ContentObserver): void;
				getWantsAllOnMoveCalls(): boolean;
				registerContentObserver(arg1: android.database.ContentObserver): void;
				copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
				moveToPrevious(): boolean;
				getColumnIndexOrThrow(arg1: java.lang.String): number;
				getColumnIndexOrThrow(arg1: string): number;
				setNotificationUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): void;
				moveToPosition(arg1: number): boolean;
				getColumnNames(): native.Array<java.lang.String>;
				close(): void;
				getDouble(arg1: number): any;
				getFloat(arg1: number): number;
				getInt(arg1: number): number;
				getLong(arg1: number): any;
				getShort(arg1: number): number;
				getType(arg1: number): number;
				getString(arg1: number): string;
				move(arg1: number): boolean;
				isNull(arg1: number): boolean;
				getColumnCount(): number;
				getPosition(): number;
				isClosed(): boolean;
				deactivate(): void;
				getColumnIndex(arg1: java.lang.String): number;
				getColumnIndex(arg1: string): number;
				getColumnName(arg1: number): string;
				getCount(): number;
			}
			export class MockContentProvider extends android.content.ContentProvider {
				constructor(arg1: android.content.Context, arg2: java.lang.String, arg3: java.lang.String, arg4: native.Array<android.content.pm.PathPermission>);
				constructor(arg1: android.content.Context, arg2: string, arg3: string, arg4: native.Array<android.content.pm.PathPermission>);
				constructor(arg1: android.content.Context);
				static class: java.lang.Class<android.test.mock.MockContentProvider>;
				onCreate(): boolean;
				bulkInsert(arg1: android.net.Uri, arg2: native.Array<android.content.ContentValues>): number;
				attachInfo(arg1: android.content.Context, arg2: android.content.pm.ProviderInfo): void;
				applyBatch(arg1: java.util.ArrayList<android.content.ContentProviderOperation>): native.Array<android.content.ContentProviderResult>;
				getStreamTypes(arg1: android.net.Uri, arg2: java.lang.String): native.Array<java.lang.String>;
				getStreamTypes(arg1: android.net.Uri, arg2: string): native.Array<java.lang.String>;
				openTypedAssetFile(arg1: android.net.Uri, arg2: java.lang.String, arg3: android.os.Bundle): android.content.res.AssetFileDescriptor;
				openTypedAssetFile(arg1: android.net.Uri, arg2: string, arg3: android.os.Bundle): android.content.res.AssetFileDescriptor;
				getType(arg1: android.net.Uri): string;
				delete(arg1: android.net.Uri, arg2: java.lang.String, arg3: native.Array<java.lang.String>): number;
				delete(arg1: android.net.Uri, arg2: string, arg3: native.Array<java.lang.String>): number;
				insert(arg1: android.net.Uri, arg2: android.content.ContentValues): android.net.Uri;
				query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String): android.database.ICursor;
				query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string): android.database.ICursor;
				update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: java.lang.String, arg4: native.Array<java.lang.String>): number;
				update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: string, arg4: native.Array<java.lang.String>): number;
				query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: android.os.CancellationSignal): android.database.ICursor;
				query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: android.os.CancellationSignal): android.database.ICursor;
			}
			export class MockResources extends android.content.res.Resources {
				constructor();
				static class: java.lang.Class<android.test.mock.MockResources>;
				getAnimation(arg1: number): android.content.res.IXmlResourceParser;
				getDrawable(arg1: number): android.graphics.drawable.Drawable;
				getTextArray(arg1: number): native.Array<java.lang.ICharSequence>;
				getXml(arg1: number): android.content.res.IXmlResourceParser;
				getIntArray(arg1: number): native.Array<number>;
				getMovie(arg1: number): android.graphics.Movie;
				getDimensionPixelOffset(arg1: number): number;
				getResourcePackageName(arg1: number): string;
				getQuantityText(arg1: number, arg2: number): java.lang.ICharSequence;
				openRawResource(arg1: number): java.io.InputStream;
				getDimensionPixelSize(arg1: number): number;
				getConfiguration(): android.content.res.Configuration;
				getColorStateList(arg1: number): android.content.res.ColorStateList;
				getQuantityString(arg1: number, arg2: number, arg3: native.Array<any>): string;
				getQuantityString(arg1: number, arg2: number): string;
				openRawResourceFd(arg1: number): android.content.res.AssetFileDescriptor;
				getDisplayMetrics(): android.util.DisplayMetrics;
				obtainAttributes(arg1: android.util.IAttributeSet, arg2: native.Array<number>): android.content.res.TypedArray;
				updateConfiguration(arg1: android.content.res.Configuration, arg2: android.util.DisplayMetrics): void;
				obtainTypedArray(arg1: number): android.content.res.TypedArray;
				getResourceTypeName(arg1: number): string;
				getResourceEntryName(arg1: number): string;
				getResourceName(arg1: number): string;
				getValue(arg1: number, arg2: android.util.TypedValue, arg3: boolean): void;
				getValue(arg1: java.lang.String, arg2: android.util.TypedValue, arg3: boolean): void;
				getValue(arg1: string, arg2: android.util.TypedValue, arg3: boolean): void;
				getInteger(arg1: number): number;
				getString(arg1: number): string;
				getString(arg1: number, arg2: native.Array<any>): string;
				getLayout(arg1: number): android.content.res.IXmlResourceParser;
				getText(arg1: number): java.lang.ICharSequence;
				getText(arg1: number, arg2: java.lang.ICharSequence): java.lang.ICharSequence;
				getText(arg1: number, arg2: string): java.lang.ICharSequence;
				getStringArray(arg1: number): native.Array<java.lang.String>;
				getColor(arg1: number): number;
				getDimension(arg1: number): number;
				getIdentifier(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): number;
				getIdentifier(arg1: string, arg2: string, arg3: string): number;
				openRawResource(arg1: number, arg2: android.util.TypedValue): java.io.InputStream;
			}
			export class MockDialogInterface extends java.lang.Object implements android.content.IDialogInterface {
				constructor();
				static class: java.lang.Class<android.test.mock.MockDialogInterface>;
				dismiss(): void;
				cancel(): void;
			}
		}
		export class AndroidTestCase extends junit.framework.TestCase {
			constructor();
			static class: java.lang.Class<android.test.AndroidTestCase>;
			Context: android.content.Context;
			testAndroidTestCaseSetupProperly(): void;
			assertActivityRequiresPermission(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
			assertActivityRequiresPermission(arg1: string, arg2: string, arg3: string): void;
			assertWritingContentUriRequiresPermission(arg1: android.net.Uri, arg2: java.lang.String): void;
			assertWritingContentUriRequiresPermission(arg1: android.net.Uri, arg2: string): void;
			assertReadingContentUriRequiresPermission(arg1: android.net.Uri, arg2: java.lang.String): void;
			assertReadingContentUriRequiresPermission(arg1: android.net.Uri, arg2: string): void;
			setContext(arg1: android.content.Context): void;
			getContext(): android.content.Context;
		}
		export interface IPerformanceTestCase {
			startPerformance(arg1: android.test.PerformanceTestCase.IIntermediates): number;
			isPerformanceOnly(): boolean;
		}
		export class TouchUtils extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.test.TouchUtils>;
			static drag(arg1: android.test.InstrumentationTestCase, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: number): void;
			static drag(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: number): void;
			static dragViewBy(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View, arg3: number, arg4: number, arg5: number): number;
			static dragViewBy(arg1: android.test.InstrumentationTestCase, arg2: android.view.View, arg3: number, arg4: number, arg5: number): number;
			static scrollToTop(arg1: android.test.InstrumentationTestCase, arg2: android.app.Activity, arg3: android.view.ViewGroup): void;
			static scrollToTop(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.ViewGroup): void;
			static dragViewToTop(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View): void;
			static dragViewToTop(arg1: android.test.InstrumentationTestCase, arg2: android.view.View, arg3: number): void;
			static dragViewToTop(arg1: android.test.InstrumentationTestCase, arg2: android.view.View): void;
			static dragViewToTop(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View, arg3: number): void;
			static clickView(arg1: android.test.InstrumentationTestCase, arg2: android.view.View): void;
			static tapView(arg1: android.test.InstrumentationTestCase, arg2: android.view.View): void;
			static longClickView(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View): void;
			static longClickView(arg1: android.test.InstrumentationTestCase, arg2: android.view.View): void;
			static dragViewToY(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View, arg3: number, arg4: number): number;
			static dragViewToY(arg1: android.test.InstrumentationTestCase, arg2: android.view.View, arg3: number, arg4: number): number;
			static dragViewToX(arg1: android.test.InstrumentationTestCase, arg2: android.view.View, arg3: number, arg4: number): number;
			static dragViewToX(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View, arg3: number, arg4: number): number;
			static dragViewTo(arg1: android.test.InstrumentationTestCase, arg2: android.view.View, arg3: number, arg4: number, arg5: number): number;
			static dragViewTo(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View, arg3: number, arg4: number, arg5: number): number;
			static dragViewToBottom(arg1: android.test.InstrumentationTestCase, arg2: android.app.Activity, arg3: android.view.View, arg4: number): void;
			static dragViewToBottom(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View, arg3: number): void;
			static dragViewToBottom(arg1: android.test.InstrumentationTestCase, arg2: android.app.Activity, arg3: android.view.View): void;
			static dragViewToBottom(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.View): void;
			static touchAndCancelView(arg1: android.test.InstrumentationTestCase, arg2: android.view.View): void;
			static dragQuarterScreenUp(arg1: android.test.InstrumentationTestCase, arg2: android.app.Activity): void;
			static dragQuarterScreenUp(arg1: android.test.ActivityInstrumentationTestCase<any>): void;
			static scrollToBottom(arg1: android.test.InstrumentationTestCase, arg2: android.app.Activity, arg3: android.view.ViewGroup): void;
			static scrollToBottom(arg1: android.test.ActivityInstrumentationTestCase<any>, arg2: android.view.ViewGroup): void;
			static dragQuarterScreenDown(arg1: android.test.ActivityInstrumentationTestCase<any>): void;
			static dragQuarterScreenDown(arg1: android.test.InstrumentationTestCase, arg2: android.app.Activity): void;
		}
		export class ServiceTestCase<T extends android.app.Service> extends android.test.AndroidTestCase {
			constructor(arg1: java.lang.Class<T>);
			static class: java.lang.Class<android.test.ServiceTestCase<any>>;
			Application: android.app.Application;
			getApplication(): android.app.Application;
			getSystemContext(): android.content.Context;
			testServiceTestCaseSetUpProperly(): void;
			setApplication(arg1: android.app.Application): void;
			getService(): T;
		}
		export class ViewAsserts extends java.lang.Object {
			static class: java.lang.Class<android.test.ViewAsserts>;
			static assertGroupNotContains(arg1: android.view.ViewGroup, arg2: android.view.View): void;
			static assertHorizontalCenterAligned(arg1: android.view.View, arg2: android.view.View): void;
			static assertVerticalCenterAligned(arg1: android.view.View, arg2: android.view.View): void;
			static assertHasScreenCoordinates(arg1: android.view.View, arg2: android.view.View, arg3: number, arg4: number): void;
			static assertRightAligned(arg1: android.view.View, arg2: android.view.View, arg3: number): void;
			static assertRightAligned(arg1: android.view.View, arg2: android.view.View): void;
			static assertTopAligned(arg1: android.view.View, arg2: android.view.View): void;
			static assertTopAligned(arg1: android.view.View, arg2: android.view.View, arg3: number): void;
			static assertOffScreenBelow(arg1: android.view.View, arg2: android.view.View): void;
			static assertBottomAligned(arg1: android.view.View, arg2: android.view.View): void;
			static assertBottomAligned(arg1: android.view.View, arg2: android.view.View, arg3: number): void;
			static assertLeftAligned(arg1: android.view.View, arg2: android.view.View, arg3: number): void;
			static assertLeftAligned(arg1: android.view.View, arg2: android.view.View): void;
			static assertOffScreenAbove(arg1: android.view.View, arg2: android.view.View): void;
			static assertOnScreen(arg1: android.view.View, arg2: android.view.View): void;
			static assertGroupIntegrity(arg1: android.view.ViewGroup): void;
			static assertBaselineAligned(arg1: android.view.View, arg2: android.view.View): void;
			static assertGroupContains(arg1: android.view.ViewGroup, arg2: android.view.View): void;
		}
		export class SingleLaunchActivityTestCase<T extends android.app.Activity> extends android.test.InstrumentationTestCase {
			constructor(arg1: java.lang.String, arg2: java.lang.Class<T>);
			constructor(arg1: string, arg2: java.lang.Class<T>);
			static class: java.lang.Class<android.test.SingleLaunchActivityTestCase<any>>;
			testActivityTestCaseSetUpProperly(): void;
			getActivity(): T;
		}
		export class InstrumentationTestSuite extends junit.framework.TestSuite {
			constructor(arg1: android.app.Instrumentation);
			constructor(arg1: java.lang.Class<any>, arg2: android.app.Instrumentation);
			constructor(arg1: java.lang.String, arg2: android.app.Instrumentation);
			constructor(arg1: string, arg2: android.app.Instrumentation);
			static class: java.lang.Class<android.test.InstrumentationTestSuite>;
			runTest(arg1: junit.framework.ITest, arg2: junit.framework.TestResult): void;
			addTestSuite(arg1: java.lang.Class<any>): void;
		}
		export class InstrumentationTestRunner extends android.app.Instrumentation implements android.test.ITestSuiteProvider {
			constructor();
			static REPORT_VALUE_ID: java.lang.String;
			static REPORT_KEY_NUM_TOTAL: java.lang.String;
			static REPORT_KEY_NUM_CURRENT: java.lang.String;
			static REPORT_KEY_NAME_CLASS: java.lang.String;
			static REPORT_KEY_NAME_TEST: java.lang.String;
			static REPORT_VALUE_RESULT_START: number;
			static REPORT_VALUE_RESULT_OK: number;
			static REPORT_VALUE_RESULT_ERROR: number;
			static REPORT_VALUE_RESULT_FAILURE: number;
			static REPORT_KEY_STACK: java.lang.String;
			static class: java.lang.Class<android.test.InstrumentationTestRunner>;
			onStart(): void;
			onCreate(arg1: android.os.Bundle): void;
			getTestSuite(): junit.framework.TestSuite;
			getAllTests(): junit.framework.TestSuite;
			getLoader(): java.lang.ClassLoader;
		}
		export class MoreAsserts extends java.lang.Object {
			static class: java.lang.Class<android.test.MoreAsserts>;
			static assertEquals(arg1: java.lang.String, arg2: native.Array<native.Double>, arg3: native.Array<native.Double>): void;
			static assertEquals(arg1: string, arg2: native.Array<native.Double>, arg3: native.Array<native.Double>): void;
			static assertEquals(arg1: native.Array<number>, arg2: native.Array<number>): void;
			static assertEquals(arg1: java.util.ISet<any>, arg2: java.util.ISet<any>): void;
			static assertEquals(arg1: java.lang.String, arg2: java.util.ISet<any>, arg3: java.util.ISet<any>): void;
			static assertEquals(arg1: string, arg2: java.util.ISet<any>, arg3: java.util.ISet<any>): void;
			static assertEmpty(arg1: java.lang.String, arg2: java.util.IMap<any, any>): void;
			static assertEmpty(arg1: string, arg2: java.util.IMap<any, any>): void;
			static assertEmpty(arg1: java.lang.IIterable<any>): void;
			static assertEmpty(arg1: java.lang.String, arg2: java.lang.IIterable<any>): void;
			static assertEmpty(arg1: string, arg2: java.lang.IIterable<any>): void;
			static assertEmpty(arg1: java.util.IMap<any, any>): void;
			static checkEqualsAndHashCodeMethods(arg1: any, arg2: any, arg3: boolean): void;
			static checkEqualsAndHashCodeMethods(arg1: java.lang.String, arg2: any, arg3: any, arg4: boolean): void;
			static checkEqualsAndHashCodeMethods(arg1: string, arg2: any, arg3: any, arg4: boolean): void;
			static assertContentsInAnyOrder(arg1: java.lang.String, arg2: java.lang.IIterable<any>, arg3: native.Array<any>): void;
			static assertContentsInAnyOrder(arg1: string, arg2: java.lang.IIterable<any>, arg3: native.Array<any>): void;
			static assertContentsInAnyOrder(arg1: java.lang.IIterable<any>, arg2: native.Array<any>): void;
			static assertNotContainsRegex(arg1: java.lang.String, arg2: java.lang.String): void;
			static assertNotContainsRegex(arg1: string, arg2: string): void;
			static assertNotContainsRegex(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
			static assertNotContainsRegex(arg1: string, arg2: string, arg3: string): void;
			static assertContentsInOrder(arg1: java.lang.String, arg2: java.lang.IIterable<any>, arg3: native.Array<any>): void;
			static assertContentsInOrder(arg1: string, arg2: java.lang.IIterable<any>, arg3: native.Array<any>): void;
			static assertContentsInOrder(arg1: java.lang.IIterable<any>, arg2: native.Array<any>): void;
			static assertNotMatchesRegex(arg1: java.lang.String, arg2: java.lang.String): void;
			static assertNotMatchesRegex(arg1: string, arg2: string): void;
			static assertNotMatchesRegex(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
			static assertNotMatchesRegex(arg1: string, arg2: string, arg3: string): void;
			static assertAssignableFrom(arg1: java.lang.Class<any>, arg2: java.lang.Class<any>): void;
			static assertAssignableFrom(arg1: java.lang.Class<any>, arg2: any): void;
			static assertMatchesRegex(arg1: java.lang.String, arg2: java.lang.String): java.util.regex.IMatchResult;
			static assertMatchesRegex(arg1: string, arg2: string): java.util.regex.IMatchResult;
			static assertMatchesRegex(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.util.regex.IMatchResult;
			static assertMatchesRegex(arg1: string, arg2: string, arg3: string): java.util.regex.IMatchResult;
			static assertContainsRegex(arg1: java.lang.String, arg2: java.lang.String): java.util.regex.IMatchResult;
			static assertContainsRegex(arg1: string, arg2: string): java.util.regex.IMatchResult;
			static assertContainsRegex(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.util.regex.IMatchResult;
			static assertContainsRegex(arg1: string, arg2: string, arg3: string): java.util.regex.IMatchResult;
			static assertNotEmpty(arg1: java.lang.String, arg2: java.util.IMap<any, any>): void;
			static assertNotEmpty(arg1: string, arg2: java.util.IMap<any, any>): void;
			static assertNotEmpty(arg1: java.lang.IIterable<any>): void;
			static assertNotEmpty(arg1: java.util.IMap<any, any>): void;
			static assertNotEmpty(arg1: java.lang.String, arg2: java.lang.IIterable<any>): void;
			static assertNotEmpty(arg1: string, arg2: java.lang.IIterable<any>): void;
			static assertNotEqual(arg1: java.lang.String, arg2: any, arg3: any): void;
			static assertNotEqual(arg1: string, arg2: any, arg3: any): void;
			static assertNotEqual(arg1: any, arg2: any): void;
		}
		export class TestSuiteProvider implements android.test.ITestSuiteProvider {
			constructor(implementation: android.test.ITestSuiteProvider);
			getTestSuite(): junit.framework.TestSuite;
		}
		export class ActivityTestCase extends android.test.InstrumentationTestCase {
			constructor();
			static class: java.lang.Class<android.test.ActivityTestCase>;
		}
		export class InstrumentationTestCase extends junit.framework.TestCase {
			constructor();
			static class: java.lang.Class<android.test.InstrumentationTestCase>;
			getInstrumentation(): android.app.Instrumentation;
			launchActivity<T extends android.app.Activity>(arg1: java.lang.String, arg2: java.lang.Class<T>, arg3: android.os.Bundle): T;
			launchActivity<T extends android.app.Activity>(arg1: string, arg2: java.lang.Class<T>, arg3: android.os.Bundle): T;
			runTestOnUiThread(arg1: java.lang.IRunnable): void;
			sendRepeatedKeys(arg1: native.Array<number>): void;
			injectInstrumentation(arg1: android.app.Instrumentation): void;
			injectInsrumentation(arg1: android.app.Instrumentation): void;
			sendKeys(arg1: java.lang.String): void;
			sendKeys(arg1: string): void;
			sendKeys(arg1: native.Array<number>): void;
			launchActivityWithIntent<T extends android.app.Activity>(arg1: java.lang.String, arg2: java.lang.Class<T>, arg3: android.content.Intent): T;
			launchActivityWithIntent<T extends android.app.Activity>(arg1: string, arg2: java.lang.Class<T>, arg3: android.content.Intent): T;
		}
	}
	export module location {
		export class GpsStatus extends java.lang.Object {
			static GPS_EVENT_STARTED: number;
			static GPS_EVENT_STOPPED: number;
			static GPS_EVENT_FIRST_FIX: number;
			static GPS_EVENT_SATELLITE_STATUS: number;
			static class: java.lang.Class<android.location.GpsStatus>;
			getSatellites(): java.lang.IIterable<android.location.GpsSatellite>;
			getTimeToFirstFix(): number;
			getMaxSatellites(): number;
		}
		export module GpsStatus {
			export class Listener implements android.location.GpsStatus.IListener {
				constructor(implementation: android.location.GpsStatus.IListener);
				onGpsStatusChanged(arg1: number): void;
			}
			export class NmeaListener implements android.location.GpsStatus.INmeaListener {
				constructor(implementation: android.location.GpsStatus.INmeaListener);
				onNmeaReceived(arg1: native.Long, arg2: java.lang.String): void;
				onNmeaReceived(arg1: native.Long, arg2: string): void;
			}
			export interface INmeaListener {
				onNmeaReceived(arg1: native.Long, arg2: string): void;
			}
			export interface IListener {
				onGpsStatusChanged(arg1: number): void;
			}
		}
		export class GpsSatellite extends java.lang.Object {
			static class: java.lang.Class<android.location.GpsSatellite>;
			getSnr(): number;
			hasAlmanac(): boolean;
			getPrn(): number;
			usedInFix(): boolean;
			getElevation(): number;
			getAzimuth(): number;
			hasEphemeris(): boolean;
		}
		export class Geocoder extends java.lang.Object {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: java.util.Locale);
			static class: java.lang.Class<android.location.Geocoder>;
			static isPresent(): boolean;
			getFromLocation(arg1: native.Double, arg2: native.Double, arg3: number): java.util.IList<android.location.Address>;
			getFromLocation(arg1: number, arg2: number, arg3: number): java.util.IList<android.location.Address>;
			getFromLocationName(arg1: java.lang.String, arg2: number): java.util.IList<android.location.Address>;
			getFromLocationName(arg1: string, arg2: number): java.util.IList<android.location.Address>;
			getFromLocationName(arg1: java.lang.String, arg2: number, arg3: native.Double, arg4: native.Double, arg5: native.Double, arg6: native.Double): java.util.IList<android.location.Address>;
			getFromLocationName(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): java.util.IList<android.location.Address>;
		}
		export class LocationManager extends java.lang.Object {
			static NETWORK_PROVIDER: java.lang.String;
			static GPS_PROVIDER: java.lang.String;
			static PASSIVE_PROVIDER: java.lang.String;
			static KEY_PROXIMITY_ENTERING: java.lang.String;
			static KEY_STATUS_CHANGED: java.lang.String;
			static KEY_PROVIDER_ENABLED: java.lang.String;
			static KEY_LOCATION_CHANGED: java.lang.String;
			static PROVIDERS_CHANGED_ACTION: java.lang.String;
			static class: java.lang.Class<android.location.LocationManager>;
			removeUpdates(arg1: android.location.ILocationListener): void;
			removeUpdates(arg1: android.app.PendingIntent): void;
			getGpsStatus(arg1: android.location.GpsStatus): android.location.GpsStatus;
			getAllProviders(): java.util.IList<string>;
			getBestProvider(arg1: android.location.Criteria, arg2: boolean): string;
			requestSingleUpdate(arg1: android.location.Criteria, arg2: android.location.ILocationListener, arg3: android.os.Looper): void;
			requestSingleUpdate(arg1: java.lang.String, arg2: android.app.PendingIntent): void;
			requestSingleUpdate(arg1: string, arg2: android.app.PendingIntent): void;
			requestSingleUpdate(arg1: android.location.Criteria, arg2: android.app.PendingIntent): void;
			requestSingleUpdate(arg1: java.lang.String, arg2: android.location.ILocationListener, arg3: android.os.Looper): void;
			requestSingleUpdate(arg1: string, arg2: android.location.ILocationListener, arg3: android.os.Looper): void;
			removeProximityAlert(arg1: android.app.PendingIntent): void;
			addProximityAlert(arg1: native.Double, arg2: native.Double, arg3: native.Float, arg4: native.Long, arg5: android.app.PendingIntent): void;
			addProximityAlert(arg1: number, arg2: number, arg3: native.Float, arg4: native.Long, arg5: android.app.PendingIntent): void;
			isProviderEnabled(arg1: java.lang.String): boolean;
			isProviderEnabled(arg1: string): boolean;
			setTestProviderStatus(arg1: java.lang.String, arg2: number, arg3: android.os.Bundle, arg4: native.Long): void;
			setTestProviderStatus(arg1: string, arg2: number, arg3: android.os.Bundle, arg4: native.Long): void;
			addNmeaListener(arg1: android.location.GpsStatus.INmeaListener): boolean;
			addTestProvider(arg1: java.lang.String, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean, arg6: boolean, arg7: boolean, arg8: boolean, arg9: number, arg10: number): void;
			addTestProvider(arg1: string, arg2: boolean, arg3: boolean, arg4: boolean, arg5: boolean, arg6: boolean, arg7: boolean, arg8: boolean, arg9: number, arg10: number): void;
			getLastKnownLocation(arg1: java.lang.String): android.location.Location;
			getLastKnownLocation(arg1: string): android.location.Location;
			addGpsStatusListener(arg1: android.location.GpsStatus.IListener): boolean;
			removeNmeaListener(arg1: android.location.GpsStatus.INmeaListener): void;
			sendExtraCommand(arg1: java.lang.String, arg2: java.lang.String, arg3: android.os.Bundle): boolean;
			sendExtraCommand(arg1: string, arg2: string, arg3: android.os.Bundle): boolean;
			removeTestProvider(arg1: java.lang.String): void;
			removeTestProvider(arg1: string): void;
			setTestProviderLocation(arg1: java.lang.String, arg2: android.location.Location): void;
			setTestProviderLocation(arg1: string, arg2: android.location.Location): void;
			clearTestProviderLocation(arg1: java.lang.String): void;
			clearTestProviderLocation(arg1: string): void;
			setTestProviderEnabled(arg1: java.lang.String, arg2: boolean): void;
			setTestProviderEnabled(arg1: string, arg2: boolean): void;
			clearTestProviderEnabled(arg1: java.lang.String): void;
			clearTestProviderEnabled(arg1: string): void;
			removeGpsStatusListener(arg1: android.location.GpsStatus.IListener): void;
			clearTestProviderStatus(arg1: java.lang.String): void;
			clearTestProviderStatus(arg1: string): void;
			requestLocationUpdates(arg1: java.lang.String, arg2: native.Long, arg3: native.Float, arg4: android.location.ILocationListener): void;
			requestLocationUpdates(arg1: string, arg2: native.Long, arg3: native.Float, arg4: android.location.ILocationListener): void;
			requestLocationUpdates(arg1: java.lang.String, arg2: native.Long, arg3: native.Float, arg4: android.location.ILocationListener, arg5: android.os.Looper): void;
			requestLocationUpdates(arg1: string, arg2: native.Long, arg3: native.Float, arg4: android.location.ILocationListener, arg5: android.os.Looper): void;
			requestLocationUpdates(arg1: native.Long, arg2: native.Float, arg3: android.location.Criteria, arg4: android.location.ILocationListener, arg5: android.os.Looper): void;
			requestLocationUpdates(arg1: java.lang.String, arg2: native.Long, arg3: native.Float, arg4: android.app.PendingIntent): void;
			requestLocationUpdates(arg1: string, arg2: native.Long, arg3: native.Float, arg4: android.app.PendingIntent): void;
			requestLocationUpdates(arg1: native.Long, arg2: native.Float, arg3: android.location.Criteria, arg4: android.app.PendingIntent): void;
			getProvider(arg1: java.lang.String): android.location.LocationProvider;
			getProvider(arg1: string): android.location.LocationProvider;
			getProviders(arg1: boolean): java.util.IList<string>;
			getProviders(arg1: android.location.Criteria, arg2: boolean): java.util.IList<string>;
		}
		export class Address extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: java.util.Locale);
			static CREATOR: android.os.Parcelable.ICreator<android.location.Address>;
			static class: java.lang.Class<android.location.Address>;
			CountryName: string;
			Phone: string;
			Extras: android.os.Bundle;
			AdminArea: string;
			SubThoroughfare: string;
			Thoroughfare: string;
			PostalCode: string;
			Url: string;
			Locality: string;
			FeatureName: string;
			SubLocality: string;
			Premises: string;
			CountryCode: string;
			SubAdminArea: string;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getExtras(): android.os.Bundle;
			getUrl(): string;
			getLatitude(): any;
			getLongitude(): any;
			getAdminArea(): string;
			getLocality(): string;
			hasLongitude(): boolean;
			setAdminArea(arg1: java.lang.String): void;
			setAdminArea(arg1: string): void;
			setPremises(arg1: java.lang.String): void;
			setPremises(arg1: string): void;
			setPhone(arg1: java.lang.String): void;
			setPhone(arg1: string): void;
			getPostalCode(): string;
			setUrl(arg1: java.lang.String): void;
			setUrl(arg1: string): void;
			setLongitude(arg1: native.Double): void;
			setLongitude(arg1: number): void;
			setExtras(arg1: android.os.Bundle): void;
			clearLatitude(): void;
			setPostalCode(arg1: java.lang.String): void;
			setPostalCode(arg1: string): void;
			setLatitude(arg1: native.Double): void;
			setLatitude(arg1: number): void;
			hasLatitude(): boolean;
			getPremises(): string;
			setLocality(arg1: java.lang.String): void;
			setLocality(arg1: string): void;
			getPhone(): string;
			setSubAdminArea(arg1: java.lang.String): void;
			setSubAdminArea(arg1: string): void;
			getThoroughfare(): string;
			getSubAdminArea(): string;
			setThoroughfare(arg1: java.lang.String): void;
			setThoroughfare(arg1: string): void;
			getFeatureName(): string;
			setAddressLine(arg1: number, arg2: java.lang.String): void;
			setAddressLine(arg1: number, arg2: string): void;
			setFeatureName(arg1: java.lang.String): void;
			setFeatureName(arg1: string): void;
			getAddressLine(arg1: number): string;
			setSubLocality(arg1: java.lang.String): void;
			setSubLocality(arg1: string): void;
			getSubThoroughfare(): string;
			getSubLocality(): string;
			setSubThoroughfare(arg1: java.lang.String): void;
			setSubThoroughfare(arg1: string): void;
			getMaxAddressLineIndex(): number;
			getCountryName(): string;
			getCountryCode(): string;
			setCountryCode(arg1: java.lang.String): void;
			setCountryCode(arg1: string): void;
			setCountryName(arg1: java.lang.String): void;
			setCountryName(arg1: string): void;
			clearLongitude(): void;
			toString(): string;
			getLocale(): java.util.Locale;
		}
		export class LocationProvider extends java.lang.Object {
			static OUT_OF_SERVICE: number;
			static TEMPORARILY_UNAVAILABLE: number;
			static AVAILABLE: number;
			static class: java.lang.Class<android.location.LocationProvider>;
			supportsSpeed(): boolean;
			requiresCell(): boolean;
			meetsCriteria(arg1: android.location.Criteria): boolean;
			getAccuracy(): number;
			supportsBearing(): boolean;
			requiresNetwork(): boolean;
			requiresSatellite(): boolean;
			hasMonetaryCost(): boolean;
			supportsAltitude(): boolean;
			getPowerRequirement(): number;
			getName(): string;
		}
		export class Location extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: android.location.Location);
			static FORMAT_DEGREES: number;
			static FORMAT_MINUTES: number;
			static FORMAT_SECONDS: number;
			static CREATOR: android.os.Parcelable.ICreator<android.location.Location>;
			static class: java.lang.Class<android.location.Location>;
			Extras: android.os.Bundle;
			Provider: string;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getExtras(): android.os.Bundle;
			getAltitude(): any;
			getLatitude(): any;
			getLongitude(): any;
			setLongitude(arg1: native.Double): void;
			setLongitude(arg1: number): void;
			setExtras(arg1: android.os.Bundle): void;
			setLatitude(arg1: native.Double): void;
			setLatitude(arg1: number): void;
			hasSpeed(): boolean;
			setSpeed(arg1: native.Float): void;
			bearingTo(arg1: android.location.Location): number;
			removeSpeed(): void;
			removeBearing(): void;
			setBearing(arg1: native.Float): void;
			hasAccuracy(): boolean;
			hasAltitude(): boolean;
			setAccuracy(arg1: native.Float): void;
			distanceTo(arg1: android.location.Location): number;
			setProvider(arg1: java.lang.String): void;
			setProvider(arg1: string): void;
			setAltitude(arg1: native.Double): void;
			setAltitude(arg1: number): void;
			getSpeed(): number;
			hasBearing(): boolean;
			getBearing(): number;
			getAccuracy(): number;
			getElapsedRealtimeNanos(): any;
			setElapsedRealtimeNanos(arg1: native.Long): void;
			removeAltitude(): void;
			removeAccuracy(): void;
			static distanceBetween(arg1: native.Double, arg2: native.Double, arg3: native.Double, arg4: native.Double, arg5: native.Array<native.Float>): void;
			static distanceBetween(arg1: number, arg2: number, arg3: number, arg4: number, arg5: native.Array<native.Float>): void;
			toString(): string;
			set(arg1: android.location.Location): void;
			reset(): void;
			getProvider(): string;
			getTime(): any;
			setTime(arg1: native.Long): void;
			dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
			dump(arg1: android.util.IPrinter, arg2: string): void;
			static convert(arg1: native.Double, arg2: number): string;
			static convert(arg1: number, arg2: number): string;
			static convert(arg1: java.lang.String): any;
			static convert(arg1: string): any;
		}
		export interface ILocationListener {
			onStatusChanged(arg1: string, arg2: number, arg3: android.os.Bundle): void;
			onProviderDisabled(arg1: string): void;
			onLocationChanged(arg1: android.location.Location): void;
			onProviderEnabled(arg1: string): void;
		}
		export class Criteria extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: android.location.Criteria);
			static NO_REQUIREMENT: number;
			static POWER_LOW: number;
			static POWER_MEDIUM: number;
			static POWER_HIGH: number;
			static ACCURACY_FINE: number;
			static ACCURACY_COARSE: number;
			static ACCURACY_LOW: number;
			static ACCURACY_MEDIUM: number;
			static ACCURACY_HIGH: number;
			static CREATOR: android.os.Parcelable.ICreator<android.location.Criteria>;
			static class: java.lang.Class<android.location.Criteria>;
			VerticalAccuracy: number;
			BearingAccuracy: number;
			PowerRequirement: number;
			Accuracy: number;
			SpeedAccuracy: number;
			HorizontalAccuracy: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			isCostAllowed(): boolean;
			setAccuracy(arg1: number): void;
			getAccuracy(): number;
			setCostAllowed(arg1: boolean): void;
			getSpeedAccuracy(): number;
			setSpeedAccuracy(arg1: number): void;
			getBearingAccuracy(): number;
			setAltitudeRequired(arg1: boolean): void;
			isAltitudeRequired(): boolean;
			setSpeedRequired(arg1: boolean): void;
			setVerticalAccuracy(arg1: number): void;
			setPowerRequirement(arg1: number): void;
			setHorizontalAccuracy(arg1: number): void;
			setBearingAccuracy(arg1: number): void;
			getPowerRequirement(): number;
			getHorizontalAccuracy(): number;
			getVerticalAccuracy(): number;
			setBearingRequired(arg1: boolean): void;
			isBearingRequired(): boolean;
			isSpeedRequired(): boolean;
			toString(): string;
		}
		export class LocationListener implements android.location.ILocationListener {
			constructor(implementation: android.location.ILocationListener);
			onStatusChanged(arg1: java.lang.String, arg2: number, arg3: android.os.Bundle): void;
			onStatusChanged(arg1: string, arg2: number, arg3: android.os.Bundle): void;
			onProviderDisabled(arg1: java.lang.String): void;
			onProviderDisabled(arg1: string): void;
			onLocationChanged(arg1: android.location.Location): void;
			onProviderEnabled(arg1: java.lang.String): void;
			onProviderEnabled(arg1: string): void;
		}
	}
	export module webkit {
		export class MimeTypeMap extends java.lang.Object {
			static class: java.lang.Class<android.webkit.MimeTypeMap>;
			getMimeTypeFromExtension(arg1: java.lang.String): string;
			getMimeTypeFromExtension(arg1: string): string;
			static getFileExtensionFromUrl(arg1: java.lang.String): string;
			static getFileExtensionFromUrl(arg1: string): string;
			getExtensionFromMimeType(arg1: java.lang.String): string;
			getExtensionFromMimeType(arg1: string): string;
			hasMimeType(arg1: java.lang.String): boolean;
			hasMimeType(arg1: string): boolean;
			hasExtension(arg1: java.lang.String): boolean;
			hasExtension(arg1: string): boolean;
			static getSingleton(): android.webkit.MimeTypeMap;
		}
		export class GeolocationPermissions extends java.lang.Object {
			static class: java.lang.Class<android.webkit.GeolocationPermissions>;
			allow(arg1: java.lang.String): void;
			allow(arg1: string): void;
			getAllowed(arg1: java.lang.String, arg2: android.webkit.IValueCallback<boolean>): void;
			getAllowed(arg1: string, arg2: android.webkit.IValueCallback<boolean>): void;
			clearAll(): void;
			getOrigins(arg1: android.webkit.IValueCallback<java.util.ISet<string>>): void;
			static getInstance(): android.webkit.GeolocationPermissions;
			clear(arg1: java.lang.String): void;
			clear(arg1: string): void;
		}
		export module GeolocationPermissions {
			export interface ICallback {
				invoke(arg1: string, arg2: boolean, arg3: boolean): void;
			}
			export class Callback implements android.webkit.GeolocationPermissions.ICallback {
				constructor(implementation: android.webkit.GeolocationPermissions.ICallback);
				invoke(arg1: java.lang.String, arg2: boolean, arg3: boolean): void;
				invoke(arg1: string, arg2: boolean, arg3: boolean): void;
			}
		}
		export class ConsoleMessage extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: android.webkit.ConsoleMessage.MessageLevel);
			constructor(arg1: string, arg2: string, arg3: number, arg4: android.webkit.ConsoleMessage.MessageLevel);
			static class: java.lang.Class<android.webkit.ConsoleMessage>;
			messageLevel(): android.webkit.ConsoleMessage.MessageLevel;
			sourceId(): string;
			message(): string;
			lineNumber(): number;
		}
		export module ConsoleMessage {
			export enum MessageLevel {
				DEBUG,
				ERROR,
				LOG,
				TIP,
				WARNING
			}
			export module MessageLevel {
				export function valueOf(arg1: java.lang.String): android.webkit.ConsoleMessage.MessageLevel;
				export function valueOf(arg1: string): android.webkit.ConsoleMessage.MessageLevel;
				export function values(): native.Array<android.webkit.ConsoleMessage.MessageLevel>;
			}
		}
		export class WebIconDatabase extends java.lang.Object {
			static class: java.lang.Class<android.webkit.WebIconDatabase>;
			requestIconForPageUrl(arg1: java.lang.String, arg2: android.webkit.WebIconDatabase.IIconListener): void;
			requestIconForPageUrl(arg1: string, arg2: android.webkit.WebIconDatabase.IIconListener): void;
			releaseIconForPageUrl(arg1: java.lang.String): void;
			releaseIconForPageUrl(arg1: string): void;
			removeAllIcons(): void;
			retainIconForPageUrl(arg1: java.lang.String): void;
			retainIconForPageUrl(arg1: string): void;
			static getInstance(): android.webkit.WebIconDatabase;
			close(): void;
			open(arg1: java.lang.String): void;
			open(arg1: string): void;
		}
		export module WebIconDatabase {
			export interface IIconListener {
				onReceivedIcon(arg1: string, arg2: android.graphics.Bitmap): void;
			}
			export class IconListener implements android.webkit.WebIconDatabase.IIconListener {
				constructor(implementation: android.webkit.WebIconDatabase.IIconListener);
				onReceivedIcon(arg1: java.lang.String, arg2: android.graphics.Bitmap): void;
				onReceivedIcon(arg1: string, arg2: android.graphics.Bitmap): void;
			}
		}
		export class WebView extends android.view.ViewGroup implements android.view.ViewTreeObserver.IOnGlobalFocusChangeListener, android.view.ViewGroup.IOnHierarchyChangeListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number, arg4: boolean);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static SCHEME_TEL: java.lang.String;
			static SCHEME_MAILTO: java.lang.String;
			static SCHEME_GEO: java.lang.String;
			static class: java.lang.Class<android.webkit.WebView>;
			WebViewTransport: { new (): android.webkit.WebView.WebViewTransport };
			Certificate: android.net.http.SslCertificate;
			getScale(): number;
			setCertificate(arg1: android.net.http.SslCertificate): void;
			saveState(arg1: android.os.Bundle): android.webkit.WebBackForwardList;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			onHoverEvent(arg1: android.view.MotionEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			onWindowFocusChanged(arg1: boolean): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			shouldDelayChildPressedState(): boolean;
			requestChildRectangleOnScreen(arg1: android.view.View, arg2: android.graphics.Rect, arg3: boolean): boolean;
			performLongClick(): boolean;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			setScrollBarStyle(arg1: number): void;
			setLayoutParams(arg1: android.view.ViewGroup.LayoutParams): void;
			performAccessibilityAction(arg1: number, arg2: android.os.Bundle): boolean;
			onCreateInputConnection(arg1: android.view.inputmethod.EditorInfo): android.view.inputmethod.IInputConnection;
			setLayerType(arg1: number, arg2: android.graphics.Paint): void;
			computeScroll(): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			setOverScrollMode(arg1: number): void;
			setBackgroundColor(arg1: number): void;
			addJavascriptInterface(arg1: any, arg2: java.lang.String): void;
			addJavascriptInterface(arg1: any, arg2: string): void;
			overlayHorizontalScrollbar(): boolean;
			isPrivateBrowsingEnabled(): boolean;
			setVerticalScrollbarOverlay(arg1: boolean): void;
			getHttpAuthUsernamePassword(arg1: java.lang.String, arg2: java.lang.String): native.Array<java.lang.String>;
			getHttpAuthUsernamePassword(arg1: string, arg2: string): native.Array<java.lang.String>;
			removeJavascriptInterface(arg1: java.lang.String): void;
			removeJavascriptInterface(arg1: string): void;
			setHorizontalScrollbarOverlay(arg1: boolean): void;
			setMapTrackballToArrowKeys(arg1: boolean): void;
			overlayVerticalScrollbar(): boolean;
			setHttpAuthUsernamePassword(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void;
			setHttpAuthUsernamePassword(arg1: string, arg2: string, arg3: string, arg4: string): void;
			onResume(): void;
			onPause(): void;
			setNetworkAvailable(arg1: boolean): void;
			loadDataWithBaseURL(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): void;
			loadDataWithBaseURL(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): void;
			saveWebArchive(arg1: java.lang.String, arg2: boolean, arg3: android.webkit.IValueCallback<string>): void;
			saveWebArchive(arg1: string, arg2: boolean, arg3: android.webkit.IValueCallback<string>): void;
			saveWebArchive(arg1: java.lang.String): void;
			saveWebArchive(arg1: string): void;
			canGoBackOrForward(arg1: number): boolean;
			getHitTestResult(): android.webkit.WebView.HitTestResult;
			onChildViewRemoved(arg1: android.view.View, arg2: android.view.View): void;
			setFindListener(arg1: android.webkit.WebView.IFindListener): void;
			setDownloadListener(arg1: android.webkit.IDownloadListener): void;
			clearSslPreferences(): void;
			onGlobalFocusChanged(arg1: android.view.View, arg2: android.view.View): void;
			showFindDialog(arg1: java.lang.String, arg2: boolean): boolean;
			showFindDialog(arg1: string, arg2: boolean): boolean;
			goBackOrForward(arg1: number): void;
			requestImageRef(arg1: android.os.Message): void;
			documentHasImages(arg1: android.os.Message): void;
			requestFocusNodeHref(arg1: android.os.Message): void;
			setInitialScale(arg1: number): void;
			invokeZoomPicker(): void;
			getContentHeight(): number;
			getOriginalUrl(): string;
			setWebViewClient(arg1: android.webkit.WebViewClient): void;
			setWebChromeClient(arg1: android.webkit.WebChromeClient): void;
			onChildViewAdded(arg1: android.view.View, arg2: android.view.View): void;
			capturePicture(): android.graphics.Picture;
			copyBackForwardList(): android.webkit.WebBackForwardList;
			setPictureListener(arg1: android.webkit.WebView.IPictureListener): void;
			canGoForward(): boolean;
			savePassword(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
			savePassword(arg1: string, arg2: string, arg3: string): void;
			canGoBack(): boolean;
			pageUp(arg1: boolean): boolean;
			restoreState(arg1: android.os.Bundle): android.webkit.WebBackForwardList;
			loadUrl(arg1: java.lang.String, arg2: java.util.IMap<string, string>): void;
			loadUrl(arg1: string, arg2: java.util.IMap<string, string>): void;
			loadUrl(arg1: java.lang.String): void;
			loadUrl(arg1: string): void;
			loadData(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
			loadData(arg1: string, arg2: string, arg3: string): void;
			goBack(): void;
			goForward(): void;
			postUrl(arg1: java.lang.String, arg2: native.Array<native.Byte>): void;
			postUrl(arg1: string, arg2: native.Array<native.Byte>): void;
			zoomIn(): boolean;
			zoomOut(): boolean;
			clearMatches(): void;
			getSettings(): android.webkit.WebSettings;
			pageDown(arg1: boolean): boolean;
			findAll(arg1: java.lang.String): number;
			findAll(arg1: string): number;
			clearHistory(): void;
			static findAddress(arg1: java.lang.String): string;
			static findAddress(arg1: string): string;
			flingScroll(arg1: number, arg2: number): void;
			getFavicon(): android.graphics.Bitmap;
			canZoomOut(): boolean;
			clearView(): void;
			findAllAsync(arg1: java.lang.String): void;
			findAllAsync(arg1: string): void;
			getUrl(): string;
			canZoomIn(): boolean;
			pauseTimers(): void;
			resumeTimers(): void;
			clearFormData(): void;
			findNext(arg1: boolean): void;
			destroy(): void;
			clearCache(arg1: boolean): void;
			freeMemory(): void;
			getCertificate(): android.net.http.SslCertificate;
			getTitle(): string;
			requestFocus(arg1: number, arg2: android.graphics.Rect): boolean;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			reload(): void;
			getProgress(): number;
			stopLoading(): void;
			requestFocus(arg1: number): boolean;
			requestFocus(): boolean;
		}
		export module WebView {
			export class HitTestResult extends java.lang.Object {
				static UNKNOWN_TYPE: number;
				static ANCHOR_TYPE: number;
				static PHONE_TYPE: number;
				static GEO_TYPE: number;
				static EMAIL_TYPE: number;
				static IMAGE_TYPE: number;
				static IMAGE_ANCHOR_TYPE: number;
				static SRC_ANCHOR_TYPE: number;
				static SRC_IMAGE_ANCHOR_TYPE: number;
				static EDIT_TEXT_TYPE: number;
				static class: java.lang.Class<android.webkit.WebView.HitTestResult>;
				getType(): number;
				getExtra(): string;
			}
			export class FindListener implements android.webkit.WebView.IFindListener {
				constructor(implementation: android.webkit.WebView.IFindListener);
				onFindResultReceived(arg1: number, arg2: number, arg3: boolean): void;
			}
			export class WebViewTransport extends java.lang.Object {
				static class: java.lang.Class<android.webkit.WebView.WebViewTransport>;
				WebView: android.webkit.WebView;
				setWebView(arg1: android.webkit.WebView): void;
				getWebView(): android.webkit.WebView;
			}
			export interface IFindListener {
				onFindResultReceived(arg1: number, arg2: number, arg3: boolean): void;
			}
			export interface IPictureListener {
				onNewPicture(arg1: android.webkit.WebView, arg2: android.graphics.Picture): void;
			}
			export class PictureListener implements android.webkit.WebView.IPictureListener {
				constructor(implementation: android.webkit.WebView.IPictureListener);
				onNewPicture(arg1: android.webkit.WebView, arg2: android.graphics.Picture): void;
			}
		}
		export class WebChromeClient extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.webkit.WebChromeClient>;
			onProgressChanged(arg1: android.webkit.WebView, arg2: number): void;
			onReceivedTouchIconUrl(arg1: android.webkit.WebView, arg2: java.lang.String, arg3: boolean): void;
			onReceivedTouchIconUrl(arg1: android.webkit.WebView, arg2: string, arg3: boolean): void;
			onReachedMaxAppCacheSize(arg1: native.Long, arg2: native.Long, arg3: android.webkit.WebStorage.IQuotaUpdater): void;
			getVideoLoadingProgressView(): android.view.View;
			onExceededDatabaseQuota(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Long, arg4: native.Long, arg5: native.Long, arg6: android.webkit.WebStorage.IQuotaUpdater): void;
			onExceededDatabaseQuota(arg1: string, arg2: string, arg3: native.Long, arg4: native.Long, arg5: native.Long, arg6: android.webkit.WebStorage.IQuotaUpdater): void;
			onReceivedIcon(arg1: android.webkit.WebView, arg2: android.graphics.Bitmap): void;
			onShowCustomView(arg1: android.view.View, arg2: android.webkit.WebChromeClient.ICustomViewCallback): void;
			onShowCustomView(arg1: android.view.View, arg2: number, arg3: android.webkit.WebChromeClient.ICustomViewCallback): void;
			onReceivedTitle(arg1: android.webkit.WebView, arg2: java.lang.String): void;
			onReceivedTitle(arg1: android.webkit.WebView, arg2: string): void;
			onHideCustomView(): void;
			getDefaultVideoPoster(): android.graphics.Bitmap;
			onCreateWindow(arg1: android.webkit.WebView, arg2: boolean, arg3: boolean, arg4: android.os.Message): boolean;
			onRequestFocus(arg1: android.webkit.WebView): void;
			onConsoleMessage(arg1: android.webkit.ConsoleMessage): boolean;
			onConsoleMessage(arg1: java.lang.String, arg2: number, arg3: java.lang.String): void;
			onConsoleMessage(arg1: string, arg2: number, arg3: string): void;
			getVisitedHistory(arg1: android.webkit.IValueCallback<native.Array<java.lang.String>>): void;
			onJsBeforeUnload(arg1: android.webkit.WebView, arg2: java.lang.String, arg3: java.lang.String, arg4: android.webkit.JsResult): boolean;
			onJsBeforeUnload(arg1: android.webkit.WebView, arg2: string, arg3: string, arg4: android.webkit.JsResult): boolean;
			onJsPrompt(arg1: android.webkit.WebView, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: android.webkit.JsPromptResult): boolean;
			onJsPrompt(arg1: android.webkit.WebView, arg2: string, arg3: string, arg4: string, arg5: android.webkit.JsPromptResult): boolean;
			onJsTimeout(): boolean;
			onJsAlert(arg1: android.webkit.WebView, arg2: java.lang.String, arg3: java.lang.String, arg4: android.webkit.JsResult): boolean;
			onJsAlert(arg1: android.webkit.WebView, arg2: string, arg3: string, arg4: android.webkit.JsResult): boolean;
			onCloseWindow(arg1: android.webkit.WebView): void;
			onJsConfirm(arg1: android.webkit.WebView, arg2: java.lang.String, arg3: java.lang.String, arg4: android.webkit.JsResult): boolean;
			onJsConfirm(arg1: android.webkit.WebView, arg2: string, arg3: string, arg4: android.webkit.JsResult): boolean;
			onGeolocationPermissionsShowPrompt(arg1: java.lang.String, arg2: android.webkit.GeolocationPermissions.ICallback): void;
			onGeolocationPermissionsShowPrompt(arg1: string, arg2: android.webkit.GeolocationPermissions.ICallback): void;
			onGeolocationPermissionsHidePrompt(): void;
		}
		export module WebChromeClient {
			export class CustomViewCallback implements android.webkit.WebChromeClient.ICustomViewCallback {
				constructor(implementation: android.webkit.WebChromeClient.ICustomViewCallback);
				onCustomViewHidden(): void;
			}
			export interface ICustomViewCallback {
				onCustomViewHidden(): void;
			}
		}
		export interface IPluginStub {
			getEmbeddedView(arg1: number, arg2: android.content.Context): android.view.View;
			getFullScreenView(arg1: number, arg2: android.content.Context): android.view.View;
		}
		export class DownloadListener implements android.webkit.IDownloadListener {
			constructor(implementation: android.webkit.IDownloadListener);
			onDownloadStart(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: native.Long): void;
			onDownloadStart(arg1: string, arg2: string, arg3: string, arg4: string, arg5: native.Long): void;
		}
		export class WebStorage extends java.lang.Object {
			static class: java.lang.Class<android.webkit.WebStorage>;
			getOrigins(arg1: android.webkit.IValueCallback<java.util.IMap<any, any>>): void;
			deleteAllData(): void;
			deleteOrigin(arg1: java.lang.String): void;
			deleteOrigin(arg1: string): void;
			setQuotaForOrigin(arg1: java.lang.String, arg2: native.Long): void;
			setQuotaForOrigin(arg1: string, arg2: native.Long): void;
			getUsageForOrigin(arg1: java.lang.String, arg2: android.webkit.IValueCallback<java.lang.Long>): void;
			getUsageForOrigin(arg1: string, arg2: android.webkit.IValueCallback<java.lang.Long>): void;
			getQuotaForOrigin(arg1: java.lang.String, arg2: android.webkit.IValueCallback<java.lang.Long>): void;
			getQuotaForOrigin(arg1: string, arg2: android.webkit.IValueCallback<java.lang.Long>): void;
			static getInstance(): android.webkit.WebStorage;
		}
		export module WebStorage {
			export class QuotaUpdater implements android.webkit.WebStorage.IQuotaUpdater {
				constructor(implementation: android.webkit.WebStorage.IQuotaUpdater);
				updateQuota(arg1: native.Long): void;
			}
			export class Origin extends java.lang.Object {
				static class: java.lang.Class<android.webkit.WebStorage.Origin>;
				getQuota(): any;
				getOrigin(): string;
				getUsage(): any;
			}
			export interface IQuotaUpdater {
				updateQuota(arg1: native.Long): void;
			}
		}
		export class WebViewFragment extends android.app.Fragment {
			constructor();
			static class: java.lang.Class<android.webkit.WebViewFragment>;
			onDestroy(): void;
			onResume(): void;
			onPause(): void;
			getWebView(): android.webkit.WebView;
			onCreateView(arg1: android.view.LayoutInflater, arg2: android.view.ViewGroup, arg3: android.os.Bundle): android.view.View;
			onDestroyView(): void;
		}
		export interface IDownloadListener {
			onDownloadStart(arg1: string, arg2: string, arg3: string, arg4: string, arg5: native.Long): void;
		}
		export class ValueCallback<T> implements android.webkit.IValueCallback<T> {
			constructor(implementation: android.webkit.IValueCallback<T>);
			onReceiveValue(arg1: T): void;
		}
		export class JsPromptResult extends android.webkit.JsResult {
			static class: java.lang.Class<android.webkit.JsPromptResult>;
			confirm(arg1: java.lang.String): void;
			confirm(arg1: string): void;
			confirm(): void;
		}
		export class WebSettings extends java.lang.Object {
			static LOAD_DEFAULT: number;
			static LOAD_NORMAL: number;
			static LOAD_CACHE_ELSE_NETWORK: number;
			static LOAD_NO_CACHE: number;
			static LOAD_CACHE_ONLY: number;
			static class: java.lang.Class<android.webkit.WebSettings>;
			StandardFontFamily: string;
			FantasyFontFamily: string;
			AllowUniversalAccessFromFileURLs: boolean;
			TextSize: android.webkit.WebSettings.TextSize;
			SavePassword: boolean;
			SerifFontFamily: string;
			BlockNetworkLoads: boolean;
			AllowFileAccess: boolean;
			CursiveFontFamily: string;
			DefaultFixedFontSize: number;
			LoadsImagesAutomatically: boolean;
			SaveFormData: boolean;
			MinimumFontSize: number;
			DatabasePath: string;
			LoadWithOverviewMode: boolean;
			DisplayZoomControls: boolean;
			LayoutAlgorithm: android.webkit.WebSettings.LayoutAlgorithm;
			UseWideViewPort: boolean;
			PluginsPath: string;
			PluginState: android.webkit.WebSettings.PluginState;
			PluginsEnabled: boolean;
			LightTouchEnabled: boolean;
			AllowFileAccessFromFileURLs: boolean;
			DatabaseEnabled: boolean;
			MinimumLogicalFontSize: number;
			CacheMode: number;
			BuiltInZoomControls: boolean;
			DefaultZoom: android.webkit.WebSettings.ZoomDensity;
			TextZoom: number;
			FixedFontFamily: string;
			DefaultFontSize: number;
			DefaultTextEncodingName: string;
			DomStorageEnabled: boolean;
			UserAgentString: string;
			MediaPlaybackRequiresUserGesture: boolean;
			BlockNetworkImage: boolean;
			JavaScriptEnabled: boolean;
			SansSerifFontFamily: string;
			JavaScriptCanOpenWindowsAutomatically: boolean;
			AllowContentAccess: boolean;
			getDatabasePath(): string;
			setTextSize(arg1: android.webkit.WebSettings.TextSize): void;
			getTextSize(): android.webkit.WebSettings.TextSize;
			getDefaultFixedFontSize(): number;
			getSaveFormData(): boolean;
			setSavePassword(arg1: boolean): void;
			setJavaScriptCanOpenWindowsAutomatically(arg1: boolean): void;
			getJavaScriptCanOpenWindowsAutomatically(): boolean;
			setDisplayZoomControls(arg1: boolean): void;
			getLoadWithOverviewMode(): boolean;
			setEnableSmoothTransition(arg1: boolean): void;
			getBuiltInZoomControls(): boolean;
			getDisplayZoomControls(): boolean;
			setLoadWithOverviewMode(arg1: boolean): void;
			supportMultipleWindows(): boolean;
			setSupportMultipleWindows(arg1: boolean): void;
			getSansSerifFontFamily(): string;
			setMinimumLogicalFontSize(arg1: number): void;
			getMinimumLogicalFontSize(): number;
			setBuiltInZoomControls(arg1: boolean): void;
			setSansSerifFontFamily(arg1: java.lang.String): void;
			setSansSerifFontFamily(arg1: string): void;
			setDefaultFixedFontSize(arg1: number): void;
			enableSmoothTransition(): boolean;
			setAllowFileAccess(arg1: boolean): void;
			setAllowContentAccess(arg1: boolean): void;
			getAllowFileAccess(): boolean;
			getAllowContentAccess(): boolean;
			setSaveFormData(arg1: boolean): void;
			setSupportZoom(arg1: boolean): void;
			getTextZoom(): number;
			getCacheMode(): number;
			supportZoom(): boolean;
			setTextZoom(arg1: number): void;
			setCacheMode(arg1: number): void;
			getAllowUniversalAccessFromFileURLs(): boolean;
			setMediaPlaybackRequiresUserGesture(arg1: boolean): void;
			setAllowUniversalAccessFromFileURLs(arg1: boolean): void;
			setAllowFileAccessFromFileURLs(arg1: boolean): void;
			getMediaPlaybackRequiresUserGesture(): boolean;
			getAllowFileAccessFromFileURLs(): boolean;
			setLayoutAlgorithm(arg1: android.webkit.WebSettings.LayoutAlgorithm): void;
			setFantasyFontFamily(arg1: java.lang.String): void;
			setFantasyFontFamily(arg1: string): void;
			setDefaultZoom(arg1: android.webkit.WebSettings.ZoomDensity): void;
			getMinimumFontSize(): number;
			setStandardFontFamily(arg1: java.lang.String): void;
			setStandardFontFamily(arg1: string): void;
			getBlockNetworkImage(): boolean;
			getLayoutAlgorithm(): android.webkit.WebSettings.LayoutAlgorithm;
			getSerifFontFamily(): string;
			setFixedFontFamily(arg1: java.lang.String): void;
			setFixedFontFamily(arg1: string): void;
			setMinimumFontSize(arg1: number): void;
			setDefaultFontSize(arg1: number): void;
			setPluginsPath(arg1: java.lang.String): void;
			setPluginsPath(arg1: string): void;
			setDatabasePath(arg1: java.lang.String): void;
			setDatabasePath(arg1: string): void;
			setAppCacheEnabled(arg1: boolean): void;
			getLightTouchEnabled(): boolean;
			getDefaultZoom(): android.webkit.WebSettings.ZoomDensity;
			setUseWideViewPort(arg1: boolean): void;
			getFantasyFontFamily(): string;
			setBlockNetworkLoads(arg1: boolean): void;
			getBlockNetworkLoads(): boolean;
			setJavaScriptEnabled(arg1: boolean): void;
			setLightTouchEnabled(arg1: boolean): void;
			setCursiveFontFamily(arg1: java.lang.String): void;
			setCursiveFontFamily(arg1: string): void;
			getUseWideViewPort(): boolean;
			getCursiveFontFamily(): string;
			getFixedFontFamily(): string;
			setBlockNetworkImage(arg1: boolean): void;
			setPluginsEnabled(arg1: boolean): void;
			setPluginState(arg1: android.webkit.WebSettings.PluginState): void;
			setSerifFontFamily(arg1: java.lang.String): void;
			setSerifFontFamily(arg1: string): void;
			getStandardFontFamily(): string;
			getSavePassword(): boolean;
			setDatabaseEnabled(arg1: boolean): void;
			getPluginState(): android.webkit.WebSettings.PluginState;
			setUserAgentString(arg1: java.lang.String): void;
			setUserAgentString(arg1: string): void;
			setGeolocationEnabled(arg1: boolean): void;
			setAppCachePath(arg1: java.lang.String): void;
			setAppCachePath(arg1: string): void;
			getPluginsEnabled(): boolean;
			getPluginsPath(): string;
			getDatabaseEnabled(): boolean;
			setRenderPriority(arg1: android.webkit.WebSettings.RenderPriority): void;
			setDomStorageEnabled(arg1: boolean): void;
			getUserAgentString(): string;
			static getDefaultUserAgent(arg1: android.content.Context): string;
			getJavaScriptEnabled(): boolean;
			getDomStorageEnabled(): boolean;
			setAppCacheMaxSize(arg1: native.Long): void;
			setNeedInitialFocus(arg1: boolean): void;
			getDefaultTextEncodingName(): string;
			getLoadsImagesAutomatically(): boolean;
			setGeolocationDatabasePath(arg1: java.lang.String): void;
			setGeolocationDatabasePath(arg1: string): void;
			setLoadsImagesAutomatically(arg1: boolean): void;
			setDefaultTextEncodingName(arg1: java.lang.String): void;
			setDefaultTextEncodingName(arg1: string): void;
			getDefaultFontSize(): number;
		}
		export module WebSettings {
			export enum PluginState {
				OFF,
				ON,
				ON_DEMAND
			}
			export module PluginState {
				export function valueOf(arg1: java.lang.String): android.webkit.WebSettings.PluginState;
				export function valueOf(arg1: string): android.webkit.WebSettings.PluginState;
				export function values(): native.Array<android.webkit.WebSettings.PluginState>;
			}
			export enum RenderPriority {
				HIGH,
				LOW,
				NORMAL
			}
			export module RenderPriority {
				export function valueOf(arg1: java.lang.String): android.webkit.WebSettings.RenderPriority;
				export function valueOf(arg1: string): android.webkit.WebSettings.RenderPriority;
				export function values(): native.Array<android.webkit.WebSettings.RenderPriority>;
			}
			export enum TextSize {
				LARGER,
				LARGEST,
				NORMAL,
				SMALLER,
				SMALLEST
			}
			export module TextSize {
				export function valueOf(arg1: java.lang.String): android.webkit.WebSettings.TextSize;
				export function valueOf(arg1: string): android.webkit.WebSettings.TextSize;
				export function values(): native.Array<android.webkit.WebSettings.TextSize>;
			}
			export enum LayoutAlgorithm {
				NARROW_COLUMNS,
				NORMAL,
				SINGLE_COLUMN
			}
			export module LayoutAlgorithm {
				export function valueOf(arg1: java.lang.String): android.webkit.WebSettings.LayoutAlgorithm;
				export function valueOf(arg1: string): android.webkit.WebSettings.LayoutAlgorithm;
				export function values(): native.Array<android.webkit.WebSettings.LayoutAlgorithm>;
			}
			export enum ZoomDensity {
				CLOSE,
				FAR,
				MEDIUM
			}
			export module ZoomDensity {
				export function valueOf(arg1: java.lang.String): android.webkit.WebSettings.ZoomDensity;
				export function valueOf(arg1: string): android.webkit.WebSettings.ZoomDensity;
				export function values(): native.Array<android.webkit.WebSettings.ZoomDensity>;
			}
		}
		export interface IValueCallback<T> {
			onReceiveValue(arg1: T): void;
		}
		export class SslErrorHandler extends android.os.Handler {
			static class: java.lang.Class<android.webkit.SslErrorHandler>;
			proceed(): void;
			cancel(): void;
		}
		export class URLUtil extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.webkit.URLUtil>;
			static guessUrl(arg1: java.lang.String): string;
			static guessUrl(arg1: string): string;
			static isNetworkUrl(arg1: java.lang.String): boolean;
			static isNetworkUrl(arg1: string): boolean;
			static isHttpsUrl(arg1: java.lang.String): boolean;
			static isHttpsUrl(arg1: string): boolean;
			static isFileUrl(arg1: java.lang.String): boolean;
			static isFileUrl(arg1: string): boolean;
			static isDataUrl(arg1: java.lang.String): boolean;
			static isDataUrl(arg1: string): boolean;
			static isContentUrl(arg1: java.lang.String): boolean;
			static isContentUrl(arg1: string): boolean;
			static guessFileName(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): string;
			static guessFileName(arg1: string, arg2: string, arg3: string): string;
			static stripAnchor(arg1: java.lang.String): string;
			static stripAnchor(arg1: string): string;
			static isValidUrl(arg1: java.lang.String): boolean;
			static isValidUrl(arg1: string): boolean;
			static isHttpUrl(arg1: java.lang.String): boolean;
			static isHttpUrl(arg1: string): boolean;
			static isAssetUrl(arg1: java.lang.String): boolean;
			static isAssetUrl(arg1: string): boolean;
			static isAboutUrl(arg1: java.lang.String): boolean;
			static isAboutUrl(arg1: string): boolean;
			static isJavaScriptUrl(arg1: java.lang.String): boolean;
			static isJavaScriptUrl(arg1: string): boolean;
			static composeSearchUrl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): string;
			static composeSearchUrl(arg1: string, arg2: string, arg3: string): string;
			static isCookielessProxyUrl(arg1: java.lang.String): boolean;
			static isCookielessProxyUrl(arg1: string): boolean;
			static decode(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
		}
		export interface IJavascriptInterface extends java.lang.annotation.IAnnotation {
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class JsResult extends java.lang.Object {
			static class: java.lang.Class<android.webkit.JsResult>;
			confirm(): void;
			cancel(): void;
		}
		export class WebBackForwardList extends java.lang.Object implements java.lang.ICloneable, java.io.ISerializable {
			static class: java.lang.Class<android.webkit.WebBackForwardList>;
			getCurrentIndex(): number;
			getCurrentItem(): android.webkit.WebHistoryItem;
			getItemAtIndex(arg1: number): android.webkit.WebHistoryItem;
			getSize(): number;
		}
		export class WebSyncManager extends java.lang.Object implements java.lang.IRunnable {
			static class: java.lang.Class<android.webkit.WebSyncManager>;
			startSync(): void;
			resetSync(): void;
			stopSync(): void;
			run(): void;
			sync(): void;
		}
		export class WebViewDatabase extends java.lang.Object {
			static class: java.lang.Class<android.webkit.WebViewDatabase>;
			clearFormData(): void;
			hasFormData(): boolean;
			clearUsernamePassword(): void;
			hasUsernamePassword(): boolean;
			hasHttpAuthUsernamePassword(): boolean;
			clearHttpAuthUsernamePassword(): void;
			static getInstance(arg1: android.content.Context): android.webkit.WebViewDatabase;
		}
		export class CookieManager extends java.lang.Object {
			static class: java.lang.Class<android.webkit.CookieManager>;
			static allowFileSchemeCookies(): boolean;
			static setAcceptFileSchemeCookies(arg1: boolean): void;
			removeExpiredCookie(): void;
			setAcceptCookie(arg1: boolean): void;
			removeSessionCookie(): void;
			removeAllCookie(): void;
			getCookie(arg1: java.lang.String): string;
			getCookie(arg1: string): string;
			setCookie(arg1: java.lang.String, arg2: java.lang.String): void;
			setCookie(arg1: string, arg2: string): void;
			hasCookies(): boolean;
			acceptCookie(): boolean;
			static getInstance(): android.webkit.CookieManager;
		}
		export class DateSorter extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static DAY_COUNT: number;
			static class: java.lang.Class<android.webkit.DateSorter>;
			getBoundary(arg1: number): any;
			getIndex(arg1: native.Long): number;
			getLabel(arg1: number): string;
		}
		export class WebViewClient extends java.lang.Object {
			constructor();
			static ERROR_UNKNOWN: number;
			static ERROR_HOST_LOOKUP: number;
			static ERROR_UNSUPPORTED_AUTH_SCHEME: number;
			static ERROR_AUTHENTICATION: number;
			static ERROR_PROXY_AUTHENTICATION: number;
			static ERROR_CONNECT: number;
			static ERROR_IO: number;
			static ERROR_TIMEOUT: number;
			static ERROR_REDIRECT_LOOP: number;
			static ERROR_UNSUPPORTED_SCHEME: number;
			static ERROR_FAILED_SSL_HANDSHAKE: number;
			static ERROR_BAD_URL: number;
			static ERROR_FILE: number;
			static ERROR_FILE_NOT_FOUND: number;
			static ERROR_TOO_MANY_REQUESTS: number;
			static class: java.lang.Class<android.webkit.WebViewClient>;
			onPageStarted(arg1: android.webkit.WebView, arg2: java.lang.String, arg3: android.graphics.Bitmap): void;
			onPageStarted(arg1: android.webkit.WebView, arg2: string, arg3: android.graphics.Bitmap): void;
			onLoadResource(arg1: android.webkit.WebView, arg2: java.lang.String): void;
			onLoadResource(arg1: android.webkit.WebView, arg2: string): void;
			onTooManyRedirects(arg1: android.webkit.WebView, arg2: android.os.Message, arg3: android.os.Message): void;
			onUnhandledKeyEvent(arg1: android.webkit.WebView, arg2: android.view.KeyEvent): void;
			onScaleChanged(arg1: android.webkit.WebView, arg2: native.Float, arg3: native.Float): void;
			onPageFinished(arg1: android.webkit.WebView, arg2: java.lang.String): void;
			onPageFinished(arg1: android.webkit.WebView, arg2: string): void;
			onReceivedError(arg1: android.webkit.WebView, arg2: number, arg3: java.lang.String, arg4: java.lang.String): void;
			onReceivedError(arg1: android.webkit.WebView, arg2: number, arg3: string, arg4: string): void;
			onFormResubmission(arg1: android.webkit.WebView, arg2: android.os.Message, arg3: android.os.Message): void;
			onReceivedSslError(arg1: android.webkit.WebView, arg2: android.webkit.SslErrorHandler, arg3: android.net.http.SslError): void;
			shouldOverrideUrlLoading(arg1: android.webkit.WebView, arg2: java.lang.String): boolean;
			shouldOverrideUrlLoading(arg1: android.webkit.WebView, arg2: string): boolean;
			onReceivedLoginRequest(arg1: android.webkit.WebView, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void;
			onReceivedLoginRequest(arg1: android.webkit.WebView, arg2: string, arg3: string, arg4: string): void;
			onReceivedHttpAuthRequest(arg1: android.webkit.WebView, arg2: android.webkit.HttpAuthHandler, arg3: java.lang.String, arg4: java.lang.String): void;
			onReceivedHttpAuthRequest(arg1: android.webkit.WebView, arg2: android.webkit.HttpAuthHandler, arg3: string, arg4: string): void;
			shouldInterceptRequest(arg1: android.webkit.WebView, arg2: java.lang.String): android.webkit.WebResourceResponse;
			shouldInterceptRequest(arg1: android.webkit.WebView, arg2: string): android.webkit.WebResourceResponse;
			doUpdateVisitedHistory(arg1: android.webkit.WebView, arg2: java.lang.String, arg3: boolean): void;
			doUpdateVisitedHistory(arg1: android.webkit.WebView, arg2: string, arg3: boolean): void;
			shouldOverrideKeyEvent(arg1: android.webkit.WebView, arg2: android.view.KeyEvent): boolean;
		}
		export class JavascriptInterface implements java.lang.annotation.IAnnotation, android.webkit.IJavascriptInterface {
			constructor(implementation: android.webkit.IJavascriptInterface);
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class WebHistoryItem extends java.lang.Object implements java.lang.ICloneable {
			static class: java.lang.Class<android.webkit.WebHistoryItem>;
			getOriginalUrl(): string;
			getFavicon(): android.graphics.Bitmap;
			getUrl(): string;
			getTitle(): string;
		}
		export class CookieSyncManager extends android.webkit.WebSyncManager {
			static class: java.lang.Class<android.webkit.CookieSyncManager>;
			startSync(): void;
			resetSync(): void;
			stopSync(): void;
			static getInstance(): android.webkit.CookieSyncManager;
			run(): void;
			sync(): void;
			static createInstance(arg1: android.content.Context): android.webkit.CookieSyncManager;
		}
		export class PluginStub implements android.webkit.IPluginStub {
			constructor(implementation: android.webkit.IPluginStub);
			getEmbeddedView(arg1: number, arg2: android.content.Context): android.view.View;
			getFullScreenView(arg1: number, arg2: android.content.Context): android.view.View;
		}
		export class HttpAuthHandler extends android.os.Handler {
			static class: java.lang.Class<android.webkit.HttpAuthHandler>;
			proceed(arg1: java.lang.String, arg2: java.lang.String): void;
			proceed(arg1: string, arg2: string): void;
			useHttpAuthUsernamePassword(): boolean;
			cancel(): void;
		}
		export class WebResourceResponse extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.io.InputStream);
			constructor(arg1: string, arg2: string, arg3: java.io.InputStream);
			static class: java.lang.Class<android.webkit.WebResourceResponse>;
			Data: java.io.InputStream;
			Encoding: string;
			MimeType: string;
			setMimeType(arg1: java.lang.String): void;
			setMimeType(arg1: string): void;
			getEncoding(): string;
			setEncoding(arg1: java.lang.String): void;
			setEncoding(arg1: string): void;
			getData(): java.io.InputStream;
			setData(arg1: java.io.InputStream): void;
			getMimeType(): string;
		}
	}
	export module mtp {
		export class MtpStorageInfo extends java.lang.Object {
			static class: java.lang.Class<android.mtp.MtpStorageInfo>;
			getStorageId(): number;
			getVolumeIdentifier(): string;
			getMaxCapacity(): any;
			getFreeSpace(): any;
			getDescription(): string;
		}
		export class MtpObjectInfo extends java.lang.Object {
			static class: java.lang.Class<android.mtp.MtpObjectInfo>;
			getSequenceNumber(): number;
			getKeywords(): string;
			getStorageId(): number;
			getThumbPixWidth(): number;
			getThumbFormat(): number;
			getAssociationType(): number;
			getImagePixHeight(): number;
			getProtectionStatus(): number;
			getImagePixDepth(): number;
			getDateModified(): any;
			getThumbPixHeight(): number;
			getObjectHandle(): number;
			getImagePixWidth(): number;
			getAssociationDesc(): number;
			getDateCreated(): any;
			getThumbCompressedSize(): number;
			getName(): string;
			getParent(): number;
			getFormat(): number;
			getCompressedSize(): number;
		}
		export class MtpDeviceInfo extends java.lang.Object {
			static class: java.lang.Class<android.mtp.MtpDeviceInfo>;
			getManufacturer(): string;
			getVersion(): string;
			getModel(): string;
			getSerialNumber(): string;
		}
		export class MtpDevice extends java.lang.Object {
			constructor(arg1: android.hardware.usb.UsbDevice);
			static class: java.lang.Class<android.mtp.MtpDevice>;
			getDeviceId(): number;
			getDeviceName(): string;
			getDeviceInfo(): android.mtp.MtpDeviceInfo;
			getStorageIds(): native.Array<number>;
			getStorageId(arg1: number): any;
			getThumbnail(arg1: number): native.Array<native.Byte>;
			getStorageInfo(arg1: number): android.mtp.MtpStorageInfo;
			getObjectHandles(arg1: number, arg2: number, arg3: number): native.Array<number>;
			deleteObject(arg1: number): boolean;
			getObjectInfo(arg1: number): android.mtp.MtpObjectInfo;
			importFile(arg1: number, arg2: java.lang.String): boolean;
			importFile(arg1: number, arg2: string): boolean;
			toString(): string;
			getParent(arg1: number): any;
			close(): void;
			open(arg1: android.hardware.usb.UsbDeviceConnection): boolean;
			getObject(arg1: number, arg2: number): native.Array<native.Byte>;
		}
		export class MtpConstants extends java.lang.Object {
			constructor();
			static FORMAT_UNDEFINED: number;
			static FORMAT_ASSOCIATION: number;
			static FORMAT_SCRIPT: number;
			static FORMAT_EXECUTABLE: number;
			static FORMAT_TEXT: number;
			static FORMAT_HTML: number;
			static FORMAT_DPOF: number;
			static FORMAT_AIFF: number;
			static FORMAT_WAV: number;
			static FORMAT_MP3: number;
			static FORMAT_AVI: number;
			static FORMAT_MPEG: number;
			static FORMAT_ASF: number;
			static FORMAT_EXIF_JPEG: number;
			static FORMAT_TIFF_EP: number;
			static FORMAT_BMP: number;
			static FORMAT_GIF: number;
			static FORMAT_JFIF: number;
			static FORMAT_PICT: number;
			static FORMAT_PNG: number;
			static FORMAT_TIFF: number;
			static FORMAT_JP2: number;
			static FORMAT_JPX: number;
			static FORMAT_UNDEFINED_FIRMWARE: number;
			static FORMAT_WINDOWS_IMAGE_FORMAT: number;
			static FORMAT_UNDEFINED_AUDIO: number;
			static FORMAT_WMA: number;
			static FORMAT_OGG: number;
			static FORMAT_AAC: number;
			static FORMAT_AUDIBLE: number;
			static FORMAT_FLAC: number;
			static FORMAT_UNDEFINED_VIDEO: number;
			static FORMAT_WMV: number;
			static FORMAT_MP4_CONTAINER: number;
			static FORMAT_MP2: number;
			static FORMAT_3GP_CONTAINER: number;
			static FORMAT_UNDEFINED_COLLECTION: number;
			static FORMAT_ABSTRACT_MULTIMEDIA_ALBUM: number;
			static FORMAT_ABSTRACT_IMAGE_ALBUM: number;
			static FORMAT_ABSTRACT_AUDIO_ALBUM: number;
			static FORMAT_ABSTRACT_VIDEO_ALBUM: number;
			static FORMAT_ABSTRACT_AV_PLAYLIST: number;
			static FORMAT_ABSTRACT_AUDIO_PLAYLIST: number;
			static FORMAT_ABSTRACT_VIDEO_PLAYLIST: number;
			static FORMAT_ABSTRACT_MEDIACAST: number;
			static FORMAT_WPL_PLAYLIST: number;
			static FORMAT_M3U_PLAYLIST: number;
			static FORMAT_MPL_PLAYLIST: number;
			static FORMAT_ASX_PLAYLIST: number;
			static FORMAT_PLS_PLAYLIST: number;
			static FORMAT_UNDEFINED_DOCUMENT: number;
			static FORMAT_ABSTRACT_DOCUMENT: number;
			static FORMAT_XML_DOCUMENT: number;
			static FORMAT_MS_WORD_DOCUMENT: number;
			static FORMAT_MS_EXCEL_SPREADSHEET: number;
			static FORMAT_MS_POWERPOINT_PRESENTATION: number;
			static PROTECTION_STATUS_NONE: number;
			static PROTECTION_STATUS_READ_ONLY: number;
			static PROTECTION_STATUS_READ_ONLY_DATA: number;
			static PROTECTION_STATUS_NON_TRANSFERABLE_DATA: number;
			static ASSOCIATION_TYPE_GENERIC_FOLDER: number;
			static class: java.lang.Class<android.mtp.MtpConstants>;
			static isAbstractObject(arg1: number): boolean;
		}
	}
	export module security {
		export class KeyChain extends java.lang.Object {
			constructor();
			static EXTRA_NAME: java.lang.String;
			static EXTRA_CERTIFICATE: java.lang.String;
			static EXTRA_PKCS12: java.lang.String;
			static ACTION_STORAGE_CHANGED: java.lang.String;
			static class: java.lang.Class<android.security.KeyChain>;
			static getPrivateKey(arg1: android.content.Context, arg2: java.lang.String): java.security.IPrivateKey;
			static getPrivateKey(arg1: android.content.Context, arg2: string): java.security.IPrivateKey;
			static createInstallIntent(): android.content.Intent;
			static choosePrivateKeyAlias(arg1: android.app.Activity, arg2: android.security.IKeyChainAliasCallback, arg3: native.Array<java.lang.String>, arg4: native.Array<java.security.IPrincipal>, arg5: java.lang.String, arg6: number, arg7: java.lang.String): void;
			static choosePrivateKeyAlias(arg1: android.app.Activity, arg2: android.security.IKeyChainAliasCallback, arg3: native.Array<java.lang.String>, arg4: native.Array<java.security.IPrincipal>, arg5: string, arg6: number, arg7: string): void;
			static getCertificateChain(arg1: android.content.Context, arg2: java.lang.String): native.Array<java.security.cert.X509Certificate>;
			static getCertificateChain(arg1: android.content.Context, arg2: string): native.Array<java.security.cert.X509Certificate>;
		}
		export class KeyChainException extends java.lang.Exception {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<android.security.KeyChainException>;
		}
		export interface IKeyChainAliasCallback {
			alias(arg1: string): void;
		}
		export class KeyChainAliasCallback implements android.security.IKeyChainAliasCallback {
			constructor(implementation: android.security.IKeyChainAliasCallback);
			alias(arg1: java.lang.String): void;
			alias(arg1: string): void;
		}
	}
	export module net {
		export module nsd {
			export class NsdServiceInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				static CREATOR: android.os.Parcelable.ICreator<android.net.nsd.NsdServiceInfo>;
				static class: java.lang.Class<android.net.nsd.NsdServiceInfo>;
				Port: number;
				ServiceName: string;
				Host: java.net.InetAddress;
				ServiceType: string;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getServiceName(): string;
				setHost(arg1: java.net.InetAddress): void;
				setServiceName(arg1: java.lang.String): void;
				setServiceName(arg1: string): void;
				setServiceType(arg1: java.lang.String): void;
				setServiceType(arg1: string): void;
				getServiceType(): string;
				toString(): string;
				getHost(): java.net.InetAddress;
				getPort(): number;
				setPort(arg1: number): void;
			}
			export class NsdManager extends java.lang.Object {
				static ACTION_NSD_STATE_CHANGED: java.lang.String;
				static EXTRA_NSD_STATE: java.lang.String;
				static NSD_STATE_DISABLED: number;
				static NSD_STATE_ENABLED: number;
				static PROTOCOL_DNS_SD: number;
				static FAILURE_INTERNAL_ERROR: number;
				static FAILURE_ALREADY_ACTIVE: number;
				static FAILURE_MAX_LIMIT: number;
				static class: java.lang.Class<android.net.nsd.NsdManager>;
				resolveService(arg1: android.net.nsd.NsdServiceInfo, arg2: android.net.nsd.NsdManager.IResolveListener): void;
				discoverServices(arg1: java.lang.String, arg2: number, arg3: android.net.nsd.NsdManager.IDiscoveryListener): void;
				discoverServices(arg1: string, arg2: number, arg3: android.net.nsd.NsdManager.IDiscoveryListener): void;
				registerService(arg1: android.net.nsd.NsdServiceInfo, arg2: number, arg3: android.net.nsd.NsdManager.IRegistrationListener): void;
				stopServiceDiscovery(arg1: android.net.nsd.NsdManager.IDiscoveryListener): void;
				unregisterService(arg1: android.net.nsd.NsdManager.IRegistrationListener): void;
			}
			export module NsdManager {
				export class DiscoveryListener implements android.net.nsd.NsdManager.IDiscoveryListener {
					constructor(implementation: android.net.nsd.NsdManager.IDiscoveryListener);
					onStartDiscoveryFailed(arg1: java.lang.String, arg2: number): void;
					onStartDiscoveryFailed(arg1: string, arg2: number): void;
					onServiceLost(arg1: android.net.nsd.NsdServiceInfo): void;
					onDiscoveryStarted(arg1: java.lang.String): void;
					onDiscoveryStarted(arg1: string): void;
					onStopDiscoveryFailed(arg1: java.lang.String, arg2: number): void;
					onStopDiscoveryFailed(arg1: string, arg2: number): void;
					onServiceFound(arg1: android.net.nsd.NsdServiceInfo): void;
					onDiscoveryStopped(arg1: java.lang.String): void;
					onDiscoveryStopped(arg1: string): void;
				}
				export class ResolveListener implements android.net.nsd.NsdManager.IResolveListener {
					constructor(implementation: android.net.nsd.NsdManager.IResolveListener);
					onResolveFailed(arg1: android.net.nsd.NsdServiceInfo, arg2: number): void;
					onServiceResolved(arg1: android.net.nsd.NsdServiceInfo): void;
				}
				export class RegistrationListener implements android.net.nsd.NsdManager.IRegistrationListener {
					constructor(implementation: android.net.nsd.NsdManager.IRegistrationListener);
					onUnregistrationFailed(arg1: android.net.nsd.NsdServiceInfo, arg2: number): void;
					onRegistrationFailed(arg1: android.net.nsd.NsdServiceInfo, arg2: number): void;
					onServiceUnregistered(arg1: android.net.nsd.NsdServiceInfo): void;
					onServiceRegistered(arg1: android.net.nsd.NsdServiceInfo): void;
				}
				export interface IDiscoveryListener {
					onStartDiscoveryFailed(arg1: string, arg2: number): void;
					onServiceLost(arg1: android.net.nsd.NsdServiceInfo): void;
					onDiscoveryStarted(arg1: string): void;
					onStopDiscoveryFailed(arg1: string, arg2: number): void;
					onServiceFound(arg1: android.net.nsd.NsdServiceInfo): void;
					onDiscoveryStopped(arg1: string): void;
				}
				export interface IRegistrationListener {
					onUnregistrationFailed(arg1: android.net.nsd.NsdServiceInfo, arg2: number): void;
					onRegistrationFailed(arg1: android.net.nsd.NsdServiceInfo, arg2: number): void;
					onServiceUnregistered(arg1: android.net.nsd.NsdServiceInfo): void;
					onServiceRegistered(arg1: android.net.nsd.NsdServiceInfo): void;
				}
				export interface IResolveListener {
					onResolveFailed(arg1: android.net.nsd.NsdServiceInfo, arg2: number): void;
					onServiceResolved(arg1: android.net.nsd.NsdServiceInfo): void;
				}
			}
		}
		export class ConnectivityManager extends java.lang.Object {
			static CONNECTIVITY_ACTION: java.lang.String;
			static EXTRA_NETWORK_INFO: java.lang.String;
			static EXTRA_NETWORK_TYPE: java.lang.String;
			static EXTRA_IS_FAILOVER: java.lang.String;
			static EXTRA_OTHER_NETWORK_INFO: java.lang.String;
			static EXTRA_NO_CONNECTIVITY: java.lang.String;
			static EXTRA_REASON: java.lang.String;
			static EXTRA_EXTRA_INFO: java.lang.String;
			static ACTION_BACKGROUND_DATA_SETTING_CHANGED: java.lang.String;
			static TYPE_MOBILE: number;
			static TYPE_WIFI: number;
			static TYPE_MOBILE_MMS: number;
			static TYPE_MOBILE_SUPL: number;
			static TYPE_MOBILE_DUN: number;
			static TYPE_MOBILE_HIPRI: number;
			static TYPE_WIMAX: number;
			static TYPE_BLUETOOTH: number;
			static TYPE_DUMMY: number;
			static TYPE_ETHERNET: number;
			static DEFAULT_NETWORK_PREFERENCE: number;
			static class: java.lang.Class<android.net.ConnectivityManager>;
			NetworkPreference: number;
			startUsingNetworkFeature(arg1: number, arg2: java.lang.String): number;
			startUsingNetworkFeature(arg1: number, arg2: string): number;
			getBackgroundDataSetting(): boolean;
			isActiveNetworkMetered(): boolean;
			stopUsingNetworkFeature(arg1: number, arg2: java.lang.String): number;
			stopUsingNetworkFeature(arg1: number, arg2: string): number;
			getAllNetworkInfo(): native.Array<android.net.NetworkInfo>;
			requestRouteToHost(arg1: number, arg2: number): boolean;
			setNetworkPreference(arg1: number): void;
			static isNetworkTypeValid(arg1: number): boolean;
			getNetworkPreference(): number;
			getNetworkInfo(arg1: number): android.net.NetworkInfo;
			getActiveNetworkInfo(): android.net.NetworkInfo;
		}
		export class LocalSocket extends java.lang.Object implements java.io.ICloseable {
			constructor();
			static class: java.lang.Class<android.net.LocalSocket>;
			ReceiveBufferSize: number;
			SendBufferSize: number;
			SoTimeout: number;
			setFileDescriptorsForSend(arg1: native.Array<java.io.FileDescriptor>): void;
			getAncillaryFileDescriptors(): native.Array<java.io.FileDescriptor>;
			getPeerCredentials(): android.net.Credentials;
			toString(): string;
			close(): void;
			bind(arg1: android.net.LocalSocketAddress): void;
			getInputStream(): java.io.InputStream;
			connect(arg1: android.net.LocalSocketAddress, arg2: number): void;
			connect(arg1: android.net.LocalSocketAddress): void;
			getOutputStream(): java.io.OutputStream;
			isClosed(): boolean;
			getLocalSocketAddress(): android.net.LocalSocketAddress;
			getReceiveBufferSize(): number;
			getSoTimeout(): number;
			isBound(): boolean;
			setReceiveBufferSize(arg1: number): void;
			setSoTimeout(arg1: number): void;
			getFileDescriptor(): java.io.FileDescriptor;
			shutdownInput(): void;
			shutdownOutput(): void;
			getRemoteSocketAddress(): android.net.LocalSocketAddress;
			getSendBufferSize(): number;
			isConnected(): boolean;
			isInputShutdown(): boolean;
			isOutputShutdown(): boolean;
			setSendBufferSize(arg1: number): void;
		}
		export module rtp {
			export class AudioGroup extends java.lang.Object {
				constructor();
				static MODE_ON_HOLD: number;
				static MODE_MUTED: number;
				static MODE_NORMAL: number;
				static MODE_ECHO_SUPPRESSION: number;
				static class: java.lang.Class<android.net.rtp.AudioGroup>;
				Mode: number;
				getMode(): number;
				setMode(arg1: number): void;
				sendDtmf(arg1: number): void;
				getStreams(): native.Array<android.net.rtp.AudioStream>;
				clear(): void;
			}
			export class RtpStream extends java.lang.Object {
				static MODE_NORMAL: number;
				static MODE_SEND_ONLY: number;
				static MODE_RECEIVE_ONLY: number;
				static class: java.lang.Class<android.net.rtp.RtpStream>;
				Mode: number;
				getMode(): number;
				setMode(arg1: number): void;
				getRemotePort(): number;
				isBusy(): boolean;
				associate(arg1: java.net.InetAddress, arg2: number): void;
				release(): void;
				getLocalPort(): number;
				getLocalAddress(): java.net.InetAddress;
				getRemoteAddress(): java.net.InetAddress;
			}
			export class AudioCodec extends java.lang.Object {
				type: number;
				rtpmap: java.lang.String;
				fmtp: java.lang.String;
				static PCMU: android.net.rtp.AudioCodec;
				static PCMA: android.net.rtp.AudioCodec;
				static GSM: android.net.rtp.AudioCodec;
				static GSM_EFR: android.net.rtp.AudioCodec;
				static AMR: android.net.rtp.AudioCodec;
				static class: java.lang.Class<android.net.rtp.AudioCodec>;
				static getCodec(arg1: number, arg2: java.lang.String, arg3: java.lang.String): android.net.rtp.AudioCodec;
				static getCodec(arg1: number, arg2: string, arg3: string): android.net.rtp.AudioCodec;
				static getCodecs(): native.Array<android.net.rtp.AudioCodec>;
			}
			export class AudioStream extends android.net.rtp.RtpStream {
				constructor(arg1: java.net.InetAddress);
				static class: java.lang.Class<android.net.rtp.AudioStream>;
				Codec: android.net.rtp.AudioCodec;
				DtmfType: number;
				setDtmfType(arg1: number): void;
				getDtmfType(): number;
				setCodec(arg1: android.net.rtp.AudioCodec): void;
				getCodec(): android.net.rtp.AudioCodec;
				isBusy(): boolean;
				join(arg1: android.net.rtp.AudioGroup): void;
				getGroup(): android.net.rtp.AudioGroup;
			}
		}
		export class UrlQuerySanitizer extends java.lang.Object {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<android.net.UrlQuerySanitizer>;
			ParameterValuePair: { new (arg2: java.lang.String, arg3: java.lang.String): android.net.UrlQuerySanitizer.ParameterValuePair; new (arg2: string, arg3: string): android.net.UrlQuerySanitizer.ParameterValuePair };
			UnregisteredParameterValueSanitizer: android.net.UrlQuerySanitizer.IValueSanitizer;
			AllowUnregisteredParamaters: boolean;
			PreferFirstRepeatedParameter: boolean;
			getEffectiveValueSanitizer(arg1: java.lang.String): android.net.UrlQuerySanitizer.IValueSanitizer;
			getEffectiveValueSanitizer(arg1: string): android.net.UrlQuerySanitizer.IValueSanitizer;
			static getAllButWhitespaceLegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			parseUrl(arg1: java.lang.String): void;
			parseUrl(arg1: string): void;
			static getAllIllegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			static getAmpLegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			static getSpaceLegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			static getUrlLegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			hasParameter(arg1: java.lang.String): boolean;
			hasParameter(arg1: string): boolean;
			parseQuery(arg1: java.lang.String): void;
			parseQuery(arg1: string): void;
			static getAmpAndSpaceLegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			static getAllButNulLegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			getParameterList(): java.util.IList<android.net.UrlQuerySanitizer.ParameterValuePair>;
			registerParameters(arg1: native.Array<java.lang.String>, arg2: android.net.UrlQuerySanitizer.IValueSanitizer): void;
			static getUrlAndSpaceLegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			getParameterSet(): java.util.ISet<string>;
			registerParameter(arg1: java.lang.String, arg2: android.net.UrlQuerySanitizer.IValueSanitizer): void;
			registerParameter(arg1: string, arg2: android.net.UrlQuerySanitizer.IValueSanitizer): void;
			getValueSanitizer(arg1: java.lang.String): android.net.UrlQuerySanitizer.IValueSanitizer;
			getValueSanitizer(arg1: string): android.net.UrlQuerySanitizer.IValueSanitizer;
			getAllowUnregisteredParamaters(): boolean;
			static getAllButNulAndAngleBracketsLegal(): android.net.UrlQuerySanitizer.IValueSanitizer;
			getPreferFirstRepeatedParameter(): boolean;
			setAllowUnregisteredParamaters(arg1: boolean): void;
			setPreferFirstRepeatedParameter(arg1: boolean): void;
			setUnregisteredParameterValueSanitizer(arg1: android.net.UrlQuerySanitizer.IValueSanitizer): void;
			getUnregisteredParameterValueSanitizer(): android.net.UrlQuerySanitizer.IValueSanitizer;
			getValue(arg1: java.lang.String): string;
			getValue(arg1: string): string;
			unescape(arg1: java.lang.String): string;
			unescape(arg1: string): string;
		}
		export module UrlQuerySanitizer {
			export class IllegalCharacterValueSanitizer extends java.lang.Object implements android.net.UrlQuerySanitizer.IValueSanitizer {
				constructor(arg1: number);
				static SPACE_OK: number;
				static OTHER_WHITESPACE_OK: number;
				static NON_7_BIT_ASCII_OK: number;
				static DQUOTE_OK: number;
				static SQUOTE_OK: number;
				static LT_OK: number;
				static GT_OK: number;
				static AMP_OK: number;
				static PCT_OK: number;
				static NUL_OK: number;
				static SCRIPT_URL_OK: number;
				static ALL_OK: number;
				static ALL_WHITESPACE_OK: number;
				static ALL_ILLEGAL: number;
				static ALL_BUT_NUL_LEGAL: number;
				static ALL_BUT_WHITESPACE_LEGAL: number;
				static URL_LEGAL: number;
				static URL_AND_SPACE_LEGAL: number;
				static AMP_LEGAL: number;
				static AMP_AND_SPACE_LEGAL: number;
				static SPACE_LEGAL: number;
				static ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL: number;
				static class: java.lang.Class<android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer>;
				sanitize(arg1: java.lang.String): string;
				sanitize(arg1: string): string;
			}
			export interface IValueSanitizer {
				sanitize(arg1: string): string;
			}
			export class ParameterValuePair extends java.lang.Object {
				mParameter: java.lang.String;
				mValue: java.lang.String;
				static class: java.lang.Class<android.net.UrlQuerySanitizer.ParameterValuePair>;
			}
			export class ValueSanitizer implements android.net.UrlQuerySanitizer.IValueSanitizer {
				constructor(implementation: android.net.UrlQuerySanitizer.IValueSanitizer);
				sanitize(arg1: java.lang.String): string;
				sanitize(arg1: string): string;
			}
		}
		export class LocalSocketAddress extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: android.net.LocalSocketAddress.Namespace);
			constructor(arg1: string, arg2: android.net.LocalSocketAddress.Namespace);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.net.LocalSocketAddress>;
			getNamespace(): android.net.LocalSocketAddress.Namespace;
			getName(): string;
		}
		export module LocalSocketAddress {
			export enum Namespace {
				ABSTRACT,
				FILESYSTEM,
				RESERVED
			}
			export module Namespace {
				export function valueOf(arg1: java.lang.String): android.net.LocalSocketAddress.Namespace;
				export function valueOf(arg1: string): android.net.LocalSocketAddress.Namespace;
				export function values(): native.Array<android.net.LocalSocketAddress.Namespace>;
			}
		}
		export class ParseException extends java.lang.RuntimeException {
			response: java.lang.String;
			static class: java.lang.Class<android.net.ParseException>;
		}
		export class Credentials extends java.lang.Object {
			constructor(arg1: number, arg2: number, arg3: number);
			static class: java.lang.Class<android.net.Credentials>;
			getPid(): number;
			getUid(): number;
			getGid(): number;
		}
		export class DhcpInfo extends java.lang.Object implements android.os.IParcelable {
			constructor();
			ipAddress: number;
			gateway: number;
			netmask: number;
			dns1: number;
			dns2: number;
			serverAddress: number;
			leaseDuration: number;
			static class: java.lang.Class<android.net.DhcpInfo>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			toString(): string;
		}
		export class NetworkInfo extends java.lang.Object implements android.os.IParcelable {
			static class: java.lang.Class<android.net.NetworkInfo>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getReason(): string;
			isConnectedOrConnecting(): boolean;
			isFailover(): boolean;
			isRoaming(): boolean;
			getExtraInfo(): string;
			getSubtype(): number;
			getSubtypeName(): string;
			getDetailedState(): android.net.NetworkInfo.DetailedState;
			toString(): string;
			getState(): android.net.NetworkInfo.State;
			getType(): number;
			getTypeName(): string;
			isAvailable(): boolean;
			isConnected(): boolean;
		}
		export module NetworkInfo {
			export enum State {
				CONNECTED,
				CONNECTING,
				DISCONNECTED,
				DISCONNECTING,
				SUSPENDED,
				UNKNOWN
			}
			export module State {
				export function valueOf(arg1: java.lang.String): android.net.NetworkInfo.State;
				export function valueOf(arg1: string): android.net.NetworkInfo.State;
				export function values(): native.Array<android.net.NetworkInfo.State>;
			}
			export enum DetailedState {
				AUTHENTICATING,
				BLOCKED,
				CAPTIVE_PORTAL_CHECK,
				CONNECTED,
				CONNECTING,
				DISCONNECTED,
				DISCONNECTING,
				FAILED,
				IDLE,
				OBTAINING_IPADDR,
				SCANNING,
				SUSPENDED,
				VERIFYING_POOR_LINK
			}
			export module DetailedState {
				export function valueOf(arg1: java.lang.String): android.net.NetworkInfo.DetailedState;
				export function valueOf(arg1: string): android.net.NetworkInfo.DetailedState;
				export function values(): native.Array<android.net.NetworkInfo.DetailedState>;
			}
		}
		export class Proxy extends java.lang.Object {
			constructor();
			static PROXY_CHANGE_ACTION: java.lang.String;
			static class: java.lang.Class<android.net.Proxy>;
			static getDefaultHost(): string;
			static getHost(arg1: android.content.Context): string;
			static getDefaultPort(): number;
			static getPort(arg1: android.content.Context): number;
		}
		export module wifi {
			export class WpsInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				constructor(arg1: android.net.wifi.WpsInfo);
				static PBC: number;
				static DISPLAY: number;
				static KEYPAD: number;
				static LABEL: number;
				static INVALID: number;
				setup: number;
				pin: java.lang.String;
				static CREATOR: android.os.Parcelable.ICreator<android.net.wifi.WpsInfo>;
				static class: java.lang.Class<android.net.wifi.WpsInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
			}
			export class WifiConfiguration extends java.lang.Object implements android.os.IParcelable {
				constructor();
				networkId: number;
				status: number;
				SSID: java.lang.String;
				BSSID: java.lang.String;
				preSharedKey: java.lang.String;
				wepKeys: native.Array<java.lang.String>;
				wepTxKeyIndex: number;
				priority: number;
				hiddenSSID: boolean;
				allowedKeyManagement: java.util.BitSet;
				allowedProtocols: java.util.BitSet;
				allowedAuthAlgorithms: java.util.BitSet;
				allowedPairwiseCiphers: java.util.BitSet;
				allowedGroupCiphers: java.util.BitSet;
				static class: java.lang.Class<android.net.wifi.WifiConfiguration>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
			}
			export module WifiConfiguration {
				export class Status extends java.lang.Object {
					static CURRENT: number;
					static DISABLED: number;
					static ENABLED: number;
					static strings: native.Array<java.lang.String>;
					static class: java.lang.Class<android.net.wifi.WifiConfiguration.Status>;
				}
				export class KeyMgmt extends java.lang.Object {
					static NONE: number;
					static WPA_PSK: number;
					static WPA_EAP: number;
					static IEEE8021X: number;
					static varName: java.lang.String;
					static strings: native.Array<java.lang.String>;
					static class: java.lang.Class<android.net.wifi.WifiConfiguration.KeyMgmt>;
				}
				export class AuthAlgorithm extends java.lang.Object {
					static OPEN: number;
					static SHARED: number;
					static LEAP: number;
					static varName: java.lang.String;
					static strings: native.Array<java.lang.String>;
					static class: java.lang.Class<android.net.wifi.WifiConfiguration.AuthAlgorithm>;
				}
				export class PairwiseCipher extends java.lang.Object {
					static NONE: number;
					static TKIP: number;
					static CCMP: number;
					static varName: java.lang.String;
					static strings: native.Array<java.lang.String>;
					static class: java.lang.Class<android.net.wifi.WifiConfiguration.PairwiseCipher>;
				}
				export class GroupCipher extends java.lang.Object {
					static WEP40: number;
					static WEP104: number;
					static TKIP: number;
					static CCMP: number;
					static varName: java.lang.String;
					static strings: native.Array<java.lang.String>;
					static class: java.lang.Class<android.net.wifi.WifiConfiguration.GroupCipher>;
				}
				export class Protocol extends java.lang.Object {
					static WPA: number;
					static RSN: number;
					static varName: java.lang.String;
					static strings: native.Array<java.lang.String>;
					static class: java.lang.Class<android.net.wifi.WifiConfiguration.Protocol>;
				}
			}
			export class ScanResult extends java.lang.Object implements android.os.IParcelable {
				SSID: java.lang.String;
				BSSID: java.lang.String;
				capabilities: java.lang.String;
				level: number;
				frequency: number;
				timestamp: native.Long;
				static class: java.lang.Class<android.net.wifi.ScanResult>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
			}
			export class WifiInfo extends java.lang.Object implements android.os.IParcelable {
				static LINK_SPEED_UNITS: java.lang.String;
				static class: java.lang.Class<android.net.wifi.WifiInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getRssi(): number;
				getNetworkId(): number;
				getBSSID(): string;
				getSSID(): string;
				getHiddenSSID(): boolean;
				getLinkSpeed(): number;
				getMacAddress(): string;
				getIpAddress(): number;
				getSupplicantState(): android.net.wifi.SupplicantState;
				static getDetailedStateOf(arg1: android.net.wifi.SupplicantState): android.net.NetworkInfo.DetailedState;
				toString(): string;
			}
			export class WifiManager extends java.lang.Object {
				static ERROR_AUTHENTICATING: number;
				static WIFI_STATE_CHANGED_ACTION: java.lang.String;
				static EXTRA_WIFI_STATE: java.lang.String;
				static EXTRA_PREVIOUS_WIFI_STATE: java.lang.String;
				static WIFI_STATE_DISABLING: number;
				static WIFI_STATE_DISABLED: number;
				static WIFI_STATE_ENABLING: number;
				static WIFI_STATE_ENABLED: number;
				static WIFI_STATE_UNKNOWN: number;
				static SUPPLICANT_CONNECTION_CHANGE_ACTION: java.lang.String;
				static EXTRA_SUPPLICANT_CONNECTED: java.lang.String;
				static NETWORK_STATE_CHANGED_ACTION: java.lang.String;
				static EXTRA_NETWORK_INFO: java.lang.String;
				static EXTRA_BSSID: java.lang.String;
				static EXTRA_WIFI_INFO: java.lang.String;
				static SUPPLICANT_STATE_CHANGED_ACTION: java.lang.String;
				static EXTRA_NEW_STATE: java.lang.String;
				static EXTRA_SUPPLICANT_ERROR: java.lang.String;
				static SCAN_RESULTS_AVAILABLE_ACTION: java.lang.String;
				static RSSI_CHANGED_ACTION: java.lang.String;
				static EXTRA_NEW_RSSI: java.lang.String;
				static NETWORK_IDS_CHANGED_ACTION: java.lang.String;
				static ACTION_PICK_WIFI_NETWORK: java.lang.String;
				static WIFI_MODE_FULL: number;
				static WIFI_MODE_SCAN_ONLY: number;
				static WIFI_MODE_FULL_HIGH_PERF: number;
				static class: java.lang.Class<android.net.wifi.WifiManager>;
				reconnect(): boolean;
				startScan(): boolean;
				getWifiState(): number;
				getDhcpInfo(): android.net.DhcpInfo;
				reassociate(): boolean;
				updateNetwork(arg1: android.net.wifi.WifiConfiguration): number;
				enableNetwork(arg1: number, arg2: boolean): boolean;
				isWifiEnabled(): boolean;
				removeNetwork(arg1: number): boolean;
				addNetwork(arg1: android.net.wifi.WifiConfiguration): number;
				getConnectionInfo(): android.net.wifi.WifiInfo;
				createWifiLock(arg1: number, arg2: java.lang.String): android.net.wifi.WifiManager.WifiLock;
				createWifiLock(arg1: number, arg2: string): android.net.wifi.WifiManager.WifiLock;
				createWifiLock(arg1: java.lang.String): android.net.wifi.WifiManager.WifiLock;
				createWifiLock(arg1: string): android.net.wifi.WifiManager.WifiLock;
				static calculateSignalLevel(arg1: number, arg2: number): number;
				getConfiguredNetworks(): java.util.IList<android.net.wifi.WifiConfiguration>;
				pingSupplicant(): boolean;
				saveConfiguration(): boolean;
				static compareSignalLevel(arg1: number, arg2: number): number;
				createMulticastLock(arg1: java.lang.String): android.net.wifi.WifiManager.MulticastLock;
				createMulticastLock(arg1: string): android.net.wifi.WifiManager.MulticastLock;
				disableNetwork(arg1: number): boolean;
				getScanResults(): java.util.IList<android.net.wifi.ScanResult>;
				setWifiEnabled(arg1: boolean): boolean;
				disconnect(): boolean;
			}
			export module WifiManager {
				export class MulticastLock extends java.lang.Object {
					static class: java.lang.Class<android.net.wifi.WifiManager.MulticastLock>;
					isHeld(): boolean;
					setReferenceCounted(arg1: boolean): void;
					toString(): string;
					release(): void;
					acquire(): void;
				}
				export class WifiLock extends java.lang.Object {
					static class: java.lang.Class<android.net.wifi.WifiManager.WifiLock>;
					isHeld(): boolean;
					setWorkSource(arg1: android.os.WorkSource): void;
					setReferenceCounted(arg1: boolean): void;
					toString(): string;
					release(): void;
					acquire(): void;
				}
			}
			export enum SupplicantState {
				ASSOCIATED,
				ASSOCIATING,
				AUTHENTICATING,
				COMPLETED,
				DISCONNECTED,
				DORMANT,
				FOUR_WAY_HANDSHAKE,
				GROUP_HANDSHAKE,
				INACTIVE,
				INTERFACE_DISABLED,
				INVALID,
				SCANNING,
				UNINITIALIZED
			}
			export module SupplicantState {
				export function isValidState(arg1: android.net.wifi.SupplicantState): boolean;
				export function valueOf(arg1: java.lang.String): android.net.wifi.SupplicantState;
				export function valueOf(arg1: string): android.net.wifi.SupplicantState;
				export function values(): native.Array<android.net.wifi.SupplicantState>;
			}
			export module p2p {
				export module nsd {
					export class WifiP2pServiceRequest extends java.lang.Object implements android.os.IParcelable {
						static class: java.lang.Class<android.net.wifi.p2p.nsd.WifiP2pServiceRequest>;
						writeToParcel(arg1: android.os.Parcel, arg2: number): void;
						describeContents(): number;
						hashCode(): number;
						equals(arg1: any): boolean;
						static newInstance(arg1: number): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
						static newInstance(arg1: number, arg2: java.lang.String): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
						static newInstance(arg1: number, arg2: string): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
					}
					export class WifiP2pUpnpServiceRequest extends android.net.wifi.p2p.nsd.WifiP2pServiceRequest {
						static class: java.lang.Class<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest>;
						static newInstance(): android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest;
						static newInstance(arg1: java.lang.String): android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest;
						static newInstance(arg1: string): android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest;
						static newInstance(arg1: number): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
						static newInstance(arg1: number, arg2: java.lang.String): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
						static newInstance(arg1: number, arg2: string): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
					}
					export class WifiP2pDnsSdServiceInfo extends android.net.wifi.p2p.nsd.WifiP2pServiceInfo {
						static class: java.lang.Class<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo>;
						static newInstance(arg1: java.lang.String, arg2: java.lang.String, arg3: java.util.IMap<string, string>): android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo;
						static newInstance(arg1: string, arg2: string, arg3: java.util.IMap<string, string>): android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo;
					}
					export class WifiP2pUpnpServiceInfo extends android.net.wifi.p2p.nsd.WifiP2pServiceInfo {
						static class: java.lang.Class<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo>;
						static newInstance(arg1: java.lang.String, arg2: java.lang.String, arg3: java.util.IList<string>): android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo;
						static newInstance(arg1: string, arg2: string, arg3: java.util.IList<string>): android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo;
					}
					export class WifiP2pDnsSdServiceRequest extends android.net.wifi.p2p.nsd.WifiP2pServiceRequest {
						static class: java.lang.Class<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest>;
						static newInstance(arg1: java.lang.String, arg2: java.lang.String): android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest;
						static newInstance(arg1: string, arg2: string): android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest;
						static newInstance(arg1: java.lang.String): android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest;
						static newInstance(arg1: string): android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest;
						static newInstance(): android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest;
						static newInstance(arg1: number): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
						static newInstance(arg1: number, arg2: java.lang.String): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
						static newInstance(arg1: number, arg2: string): android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
					}
					export class WifiP2pServiceInfo extends java.lang.Object implements android.os.IParcelable {
						static SERVICE_TYPE_ALL: number;
						static SERVICE_TYPE_BONJOUR: number;
						static SERVICE_TYPE_UPNP: number;
						static SERVICE_TYPE_VENDOR_SPECIFIC: number;
						static class: java.lang.Class<android.net.wifi.p2p.nsd.WifiP2pServiceInfo>;
						writeToParcel(arg1: android.os.Parcel, arg2: number): void;
						describeContents(): number;
						hashCode(): number;
						equals(arg1: any): boolean;
					}
				}
				export class WifiP2pManager extends java.lang.Object {
					static WIFI_P2P_STATE_CHANGED_ACTION: java.lang.String;
					static EXTRA_WIFI_STATE: java.lang.String;
					static WIFI_P2P_STATE_DISABLED: number;
					static WIFI_P2P_STATE_ENABLED: number;
					static WIFI_P2P_CONNECTION_CHANGED_ACTION: java.lang.String;
					static EXTRA_WIFI_P2P_INFO: java.lang.String;
					static EXTRA_NETWORK_INFO: java.lang.String;
					static WIFI_P2P_PEERS_CHANGED_ACTION: java.lang.String;
					static WIFI_P2P_DISCOVERY_CHANGED_ACTION: java.lang.String;
					static EXTRA_DISCOVERY_STATE: java.lang.String;
					static WIFI_P2P_DISCOVERY_STOPPED: number;
					static WIFI_P2P_DISCOVERY_STARTED: number;
					static WIFI_P2P_THIS_DEVICE_CHANGED_ACTION: java.lang.String;
					static EXTRA_WIFI_P2P_DEVICE: java.lang.String;
					static ERROR: number;
					static P2P_UNSUPPORTED: number;
					static BUSY: number;
					static NO_SERVICE_REQUESTS: number;
					static class: java.lang.Class<android.net.wifi.p2p.WifiP2pManager>;
					removeGroup(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					setServiceResponseListener(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IServiceResponseListener): void;
					setDnsSdResponseListeners(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IDnsSdServiceResponseListener, arg3: android.net.wifi.p2p.WifiP2pManager.IDnsSdTxtRecordListener): void;
					cancelConnect(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					requestPeers(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IPeerListListener): void;
					discoverPeers(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					clearLocalServices(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					requestGroupInfo(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IGroupInfoListener): void;
					requestConnectionInfo(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IConnectionInfoListener): void;
					discoverServices(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					addServiceRequest(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.nsd.WifiP2pServiceRequest, arg3: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					removeLocalService(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.nsd.WifiP2pServiceInfo, arg3: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					removeServiceRequest(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.nsd.WifiP2pServiceRequest, arg3: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					clearServiceRequests(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					stopPeerDiscovery(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					addLocalService(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.nsd.WifiP2pServiceInfo, arg3: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					setUpnpServiceResponseListener(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IUpnpServiceResponseListener): void;
					initialize(arg1: android.content.Context, arg2: android.os.Looper, arg3: android.net.wifi.p2p.WifiP2pManager.IChannelListener): android.net.wifi.p2p.WifiP2pManager.Channel;
					connect(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pConfig, arg3: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
					createGroup(arg1: android.net.wifi.p2p.WifiP2pManager.Channel, arg2: android.net.wifi.p2p.WifiP2pManager.IActionListener): void;
				}
				export module WifiP2pManager {
					export class ActionListener implements android.net.wifi.p2p.WifiP2pManager.IActionListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IActionListener);
						onSuccess(): void;
						onFailure(arg1: number): void;
					}
					export class DnsSdServiceResponseListener implements android.net.wifi.p2p.WifiP2pManager.IDnsSdServiceResponseListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IDnsSdServiceResponseListener);
						onDnsSdServiceAvailable(arg1: java.lang.String, arg2: java.lang.String, arg3: android.net.wifi.p2p.WifiP2pDevice): void;
						onDnsSdServiceAvailable(arg1: string, arg2: string, arg3: android.net.wifi.p2p.WifiP2pDevice): void;
					}
					export class Channel extends java.lang.Object {
						static class: java.lang.Class<android.net.wifi.p2p.WifiP2pManager.Channel>;
					}
					export interface IPeerListListener {
						onPeersAvailable(arg1: android.net.wifi.p2p.WifiP2pDeviceList): void;
					}
					export interface IServiceResponseListener {
						onServiceAvailable(arg1: number, arg2: native.Array<native.Byte>, arg3: android.net.wifi.p2p.WifiP2pDevice): void;
					}
					export interface IDnsSdTxtRecordListener {
						onDnsSdTxtRecordAvailable(arg1: string, arg2: java.util.IMap<string, string>, arg3: android.net.wifi.p2p.WifiP2pDevice): void;
					}
					export interface IUpnpServiceResponseListener {
						onUpnpServiceAvailable(arg1: java.util.IList<string>, arg2: android.net.wifi.p2p.WifiP2pDevice): void;
					}
					export class ChannelListener implements android.net.wifi.p2p.WifiP2pManager.IChannelListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IChannelListener);
						onChannelDisconnected(): void;
					}
					export interface IActionListener {
						onSuccess(): void;
						onFailure(arg1: number): void;
					}
					export interface IDnsSdServiceResponseListener {
						onDnsSdServiceAvailable(arg1: string, arg2: string, arg3: android.net.wifi.p2p.WifiP2pDevice): void;
					}
					export interface IGroupInfoListener {
						onGroupInfoAvailable(arg1: android.net.wifi.p2p.WifiP2pGroup): void;
					}
					export class ServiceResponseListener implements android.net.wifi.p2p.WifiP2pManager.IServiceResponseListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IServiceResponseListener);
						onServiceAvailable(arg1: number, arg2: native.Array<native.Byte>, arg3: android.net.wifi.p2p.WifiP2pDevice): void;
					}
					export class DnsSdTxtRecordListener implements android.net.wifi.p2p.WifiP2pManager.IDnsSdTxtRecordListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IDnsSdTxtRecordListener);
						onDnsSdTxtRecordAvailable(arg1: java.lang.String, arg2: java.util.IMap<string, string>, arg3: android.net.wifi.p2p.WifiP2pDevice): void;
						onDnsSdTxtRecordAvailable(arg1: string, arg2: java.util.IMap<string, string>, arg3: android.net.wifi.p2p.WifiP2pDevice): void;
					}
					export class GroupInfoListener implements android.net.wifi.p2p.WifiP2pManager.IGroupInfoListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IGroupInfoListener);
						onGroupInfoAvailable(arg1: android.net.wifi.p2p.WifiP2pGroup): void;
					}
					export class UpnpServiceResponseListener implements android.net.wifi.p2p.WifiP2pManager.IUpnpServiceResponseListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IUpnpServiceResponseListener);
						onUpnpServiceAvailable(arg1: java.util.IList<string>, arg2: android.net.wifi.p2p.WifiP2pDevice): void;
					}
					export interface IChannelListener {
						onChannelDisconnected(): void;
					}
					export interface IConnectionInfoListener {
						onConnectionInfoAvailable(arg1: android.net.wifi.p2p.WifiP2pInfo): void;
					}
					export class PeerListListener implements android.net.wifi.p2p.WifiP2pManager.IPeerListListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IPeerListListener);
						onPeersAvailable(arg1: android.net.wifi.p2p.WifiP2pDeviceList): void;
					}
					export class ConnectionInfoListener implements android.net.wifi.p2p.WifiP2pManager.IConnectionInfoListener {
						constructor(implementation: android.net.wifi.p2p.WifiP2pManager.IConnectionInfoListener);
						onConnectionInfoAvailable(arg1: android.net.wifi.p2p.WifiP2pInfo): void;
					}
				}
				export class WifiP2pInfo extends java.lang.Object implements android.os.IParcelable {
					constructor();
					constructor(arg1: android.net.wifi.p2p.WifiP2pInfo);
					groupFormed: boolean;
					isGroupOwner: boolean;
					groupOwnerAddress: java.net.InetAddress;
					static CREATOR: android.os.Parcelable.ICreator<android.net.wifi.p2p.WifiP2pInfo>;
					static class: java.lang.Class<android.net.wifi.p2p.WifiP2pInfo>;
					writeToParcel(arg1: android.os.Parcel, arg2: number): void;
					describeContents(): number;
					toString(): string;
				}
				export class WifiP2pConfig extends java.lang.Object implements android.os.IParcelable {
					constructor();
					constructor(arg1: android.net.wifi.p2p.WifiP2pConfig);
					deviceAddress: java.lang.String;
					wps: android.net.wifi.WpsInfo;
					groupOwnerIntent: number;
					static CREATOR: android.os.Parcelable.ICreator<android.net.wifi.p2p.WifiP2pConfig>;
					static class: java.lang.Class<android.net.wifi.p2p.WifiP2pConfig>;
					writeToParcel(arg1: android.os.Parcel, arg2: number): void;
					describeContents(): number;
					toString(): string;
				}
				export class WifiP2pGroup extends java.lang.Object implements android.os.IParcelable {
					constructor();
					constructor(arg1: android.net.wifi.p2p.WifiP2pGroup);
					static CREATOR: android.os.Parcelable.ICreator<android.net.wifi.p2p.WifiP2pGroup>;
					static class: java.lang.Class<android.net.wifi.p2p.WifiP2pGroup>;
					writeToParcel(arg1: android.os.Parcel, arg2: number): void;
					describeContents(): number;
					isGroupOwner(): boolean;
					getPassphrase(): string;
					getClientList(): java.util.ICollection<android.net.wifi.p2p.WifiP2pDevice>;
					getNetworkName(): string;
					toString(): string;
					getOwner(): android.net.wifi.p2p.WifiP2pDevice;
					getInterface(): string;
				}
				export class WifiP2pDeviceList extends java.lang.Object implements android.os.IParcelable {
					constructor(arg1: android.net.wifi.p2p.WifiP2pDeviceList);
					constructor();
					static CREATOR: android.os.Parcelable.ICreator<android.net.wifi.p2p.WifiP2pDeviceList>;
					static class: java.lang.Class<android.net.wifi.p2p.WifiP2pDeviceList>;
					writeToParcel(arg1: android.os.Parcel, arg2: number): void;
					describeContents(): number;
					getDeviceList(): java.util.ICollection<android.net.wifi.p2p.WifiP2pDevice>;
					toString(): string;
				}
				export class WifiP2pDevice extends java.lang.Object implements android.os.IParcelable {
					constructor();
					constructor(arg1: android.net.wifi.p2p.WifiP2pDevice);
					deviceName: java.lang.String;
					deviceAddress: java.lang.String;
					primaryDeviceType: java.lang.String;
					secondaryDeviceType: java.lang.String;
					static CONNECTED: number;
					static INVITED: number;
					static FAILED: number;
					static AVAILABLE: number;
					static UNAVAILABLE: number;
					status: number;
					static CREATOR: android.os.Parcelable.ICreator<android.net.wifi.p2p.WifiP2pDevice>;
					static class: java.lang.Class<android.net.wifi.p2p.WifiP2pDevice>;
					writeToParcel(arg1: android.os.Parcel, arg2: number): void;
					describeContents(): number;
					isServiceDiscoveryCapable(): boolean;
					isGroupOwner(): boolean;
					wpsKeypadSupported(): boolean;
					wpsDisplaySupported(): boolean;
					wpsPbcSupported(): boolean;
					equals(arg1: any): boolean;
					toString(): string;
				}
			}
		}
		export class VpnService extends android.app.Service {
			constructor();
			static SERVICE_INTERFACE: java.lang.String;
			static class: java.lang.Class<android.net.VpnService>;
			Builder: { new (): android.net.VpnService.Builder };
			onBind(arg1: android.content.Intent): android.os.IIBinder;
			onRevoke(): void;
			protect(arg1: java.net.Socket): boolean;
			protect(arg1: java.net.DatagramSocket): boolean;
			protect(arg1: number): boolean;
			static prepare(arg1: android.content.Context): android.content.Intent;
		}
		export module VpnService {
			export class Builder extends java.lang.Object {
				static class: java.lang.Class<android.net.VpnService.Builder>;
				addAddress(arg1: java.net.InetAddress, arg2: number): android.net.VpnService.Builder;
				addAddress(arg1: java.lang.String, arg2: number): android.net.VpnService.Builder;
				addAddress(arg1: string, arg2: number): android.net.VpnService.Builder;
				addDnsServer(arg1: java.net.InetAddress): android.net.VpnService.Builder;
				addDnsServer(arg1: java.lang.String): android.net.VpnService.Builder;
				addDnsServer(arg1: string): android.net.VpnService.Builder;
				setMtu(arg1: number): android.net.VpnService.Builder;
				addRoute(arg1: java.net.InetAddress, arg2: number): android.net.VpnService.Builder;
				addRoute(arg1: java.lang.String, arg2: number): android.net.VpnService.Builder;
				addRoute(arg1: string, arg2: number): android.net.VpnService.Builder;
				setSession(arg1: java.lang.String): android.net.VpnService.Builder;
				setSession(arg1: string): android.net.VpnService.Builder;
				setConfigureIntent(arg1: android.app.PendingIntent): android.net.VpnService.Builder;
				addSearchDomain(arg1: java.lang.String): android.net.VpnService.Builder;
				addSearchDomain(arg1: string): android.net.VpnService.Builder;
				establish(): android.os.ParcelFileDescriptor;
			}
		}
		export class LocalServerSocket extends java.lang.Object {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.io.FileDescriptor);
			static class: java.lang.Class<android.net.LocalServerSocket>;
			close(): void;
			accept(): android.net.LocalSocket;
			getLocalSocketAddress(): android.net.LocalSocketAddress;
			getFileDescriptor(): java.io.FileDescriptor;
		}
		export class TrafficStats extends java.lang.Object {
			constructor();
			static UNSUPPORTED: number;
			static class: java.lang.Class<android.net.TrafficStats>;
			static incrementOperationCount(arg1: number, arg2: number): void;
			static incrementOperationCount(arg1: number): void;
			static tagSocket(arg1: java.net.Socket): void;
			static untagSocket(arg1: java.net.Socket): void;
			static getUidTxBytes(arg1: number): any;
			static getUidRxBytes(arg1: number): any;
			static getTotalTxPackets(): any;
			static getTotalTxBytes(): any;
			static getTotalRxBytes(): any;
			static getUidTxPackets(arg1: number): any;
			static getUidTcpTxBytes(arg1: number): any;
			static getUidUdpRxBytes(arg1: number): any;
			static getUidTcpRxSegments(arg1: number): any;
			static getUidTcpRxBytes(arg1: number): any;
			static getMobileRxBytes(): any;
			static getTotalRxPackets(): any;
			static setThreadStatsTag(arg1: number): void;
			static getUidUdpTxBytes(arg1: number): any;
			static getUidUdpRxPackets(arg1: number): any;
			static getUidUdpTxPackets(arg1: number): any;
			static getMobileTxPackets(): any;
			static getUidTcpTxSegments(arg1: number): any;
			static getMobileRxPackets(): any;
			static getUidRxPackets(arg1: number): any;
			static getThreadStatsTag(): number;
			static clearThreadStatsTag(): void;
			static getMobileTxBytes(): any;
		}
		export module sip {
			export class SipManager extends java.lang.Object {
				static INCOMING_CALL_RESULT_CODE: number;
				static EXTRA_CALL_ID: java.lang.String;
				static EXTRA_OFFER_SD: java.lang.String;
				static class: java.lang.Class<android.net.sip.SipManager>;
				isOpened(arg1: java.lang.String): boolean;
				isOpened(arg1: string): boolean;
				setRegistrationListener(arg1: java.lang.String, arg2: android.net.sip.ISipRegistrationListener): void;
				setRegistrationListener(arg1: string, arg2: android.net.sip.ISipRegistrationListener): void;
				static getOfferSessionDescription(arg1: android.content.Intent): string;
				static getCallId(arg1: android.content.Intent): string;
				makeAudioCall(arg1: java.lang.String, arg2: java.lang.String, arg3: android.net.sip.SipAudioCall.Listener, arg4: number): android.net.sip.SipAudioCall;
				makeAudioCall(arg1: string, arg2: string, arg3: android.net.sip.SipAudioCall.Listener, arg4: number): android.net.sip.SipAudioCall;
				makeAudioCall(arg1: android.net.sip.SipProfile, arg2: android.net.sip.SipProfile, arg3: android.net.sip.SipAudioCall.Listener, arg4: number): android.net.sip.SipAudioCall;
				static isSipWifiOnly(arg1: android.content.Context): boolean;
				takeAudioCall(arg1: android.content.Intent, arg2: android.net.sip.SipAudioCall.Listener): android.net.sip.SipAudioCall;
				getSessionFor(arg1: android.content.Intent): android.net.sip.SipSession;
				static isApiSupported(arg1: android.content.Context): boolean;
				static isVoipSupported(arg1: android.content.Context): boolean;
				static isIncomingCallIntent(arg1: android.content.Intent): boolean;
				createSipSession(arg1: android.net.sip.SipProfile, arg2: android.net.sip.SipSession.Listener): android.net.sip.SipSession;
				static newInstance(arg1: android.content.Context): android.net.sip.SipManager;
				isRegistered(arg1: java.lang.String): boolean;
				isRegistered(arg1: string): boolean;
				register(arg1: android.net.sip.SipProfile, arg2: number, arg3: android.net.sip.ISipRegistrationListener): void;
				close(arg1: java.lang.String): void;
				close(arg1: string): void;
				open(arg1: android.net.sip.SipProfile): void;
				open(arg1: android.net.sip.SipProfile, arg2: android.app.PendingIntent, arg3: android.net.sip.ISipRegistrationListener): void;
				unregister(arg1: android.net.sip.SipProfile, arg2: android.net.sip.ISipRegistrationListener): void;
			}
			export class SipProfile extends java.lang.Object implements android.os.IParcelable, java.io.ISerializable, java.lang.ICloneable {
				static CREATOR: android.os.Parcelable.ICreator<android.net.sip.SipProfile>;
				static class: java.lang.Class<android.net.sip.SipProfile>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSipDomain(): string;
				getUriString(): string;
				getProfileName(): string;
				getAuthUserName(): string;
				getSendKeepAlive(): boolean;
				getProxyAddress(): string;
				getAutoRegistration(): boolean;
				getProtocol(): string;
				getDisplayName(): string;
				getPort(): number;
				getPassword(): string;
				getUserName(): string;
			}
			export module SipProfile {
				export class Builder extends java.lang.Object {
					constructor(arg1: android.net.sip.SipProfile);
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					static class: java.lang.Class<android.net.sip.SipProfile.Builder>;
					setPassword(arg1: java.lang.String): android.net.sip.SipProfile.Builder;
					setPassword(arg1: string): android.net.sip.SipProfile.Builder;
					setProtocol(arg1: java.lang.String): android.net.sip.SipProfile.Builder;
					setProtocol(arg1: string): android.net.sip.SipProfile.Builder;
					setProfileName(arg1: java.lang.String): android.net.sip.SipProfile.Builder;
					setProfileName(arg1: string): android.net.sip.SipProfile.Builder;
					setSendKeepAlive(arg1: boolean): android.net.sip.SipProfile.Builder;
					setOutboundProxy(arg1: java.lang.String): android.net.sip.SipProfile.Builder;
					setOutboundProxy(arg1: string): android.net.sip.SipProfile.Builder;
					setDisplayName(arg1: java.lang.String): android.net.sip.SipProfile.Builder;
					setDisplayName(arg1: string): android.net.sip.SipProfile.Builder;
					setAuthUserName(arg1: java.lang.String): android.net.sip.SipProfile.Builder;
					setAuthUserName(arg1: string): android.net.sip.SipProfile.Builder;
					setAutoRegistration(arg1: boolean): android.net.sip.SipProfile.Builder;
					build(): android.net.sip.SipProfile;
					setPort(arg1: number): android.net.sip.SipProfile.Builder;
				}
			}
			export class SipRegistrationListener implements android.net.sip.ISipRegistrationListener {
				constructor(implementation: android.net.sip.ISipRegistrationListener);
				onRegistering(arg1: java.lang.String): void;
				onRegistering(arg1: string): void;
				onRegistrationFailed(arg1: java.lang.String, arg2: number, arg3: java.lang.String): void;
				onRegistrationFailed(arg1: string, arg2: number, arg3: string): void;
				onRegistrationDone(arg1: java.lang.String, arg2: native.Long): void;
				onRegistrationDone(arg1: string, arg2: native.Long): void;
			}
			export class SipAudioCall extends java.lang.Object {
				constructor(arg1: android.content.Context, arg2: android.net.sip.SipProfile);
				static class: java.lang.Class<android.net.sip.SipAudioCall>;
				setListener(arg1: android.net.sip.SipAudioCall.Listener, arg2: boolean): void;
				setListener(arg1: android.net.sip.SipAudioCall.Listener): void;
				sendDtmf(arg1: number): void;
				sendDtmf(arg1: number, arg2: android.os.Message): void;
				makeCall(arg1: android.net.sip.SipProfile, arg2: android.net.sip.SipSession, arg3: number): void;
				answerCall(arg1: number): void;
				isInCall(): boolean;
				endCall(): void;
				isOnHold(): boolean;
				isMuted(): boolean;
				continueCall(arg1: number): void;
				holdCall(arg1: number): void;
				attachCall(arg1: android.net.sip.SipSession, arg2: java.lang.String): void;
				attachCall(arg1: android.net.sip.SipSession, arg2: string): void;
				toggleMute(): void;
				startAudio(): void;
				getPeerProfile(): android.net.sip.SipProfile;
				getLocalProfile(): android.net.sip.SipProfile;
				setSpeakerMode(arg1: boolean): void;
				getState(): number;
				close(): void;
			}
			export module SipAudioCall {
				export class Listener extends java.lang.Object {
					constructor();
					static class: java.lang.Class<android.net.sip.SipAudioCall.Listener>;
					onChanged(arg1: android.net.sip.SipAudioCall): void;
					onError(arg1: android.net.sip.SipAudioCall, arg2: number, arg3: java.lang.String): void;
					onError(arg1: android.net.sip.SipAudioCall, arg2: number, arg3: string): void;
					onCallBusy(arg1: android.net.sip.SipAudioCall): void;
					onRingingBack(arg1: android.net.sip.SipAudioCall): void;
					onCalling(arg1: android.net.sip.SipAudioCall): void;
					onCallEnded(arg1: android.net.sip.SipAudioCall): void;
					onRinging(arg1: android.net.sip.SipAudioCall, arg2: android.net.sip.SipProfile): void;
					onReadyToCall(arg1: android.net.sip.SipAudioCall): void;
					onCallHeld(arg1: android.net.sip.SipAudioCall): void;
					onCallEstablished(arg1: android.net.sip.SipAudioCall): void;
				}
			}
			export interface ISipRegistrationListener {
				onRegistering(arg1: string): void;
				onRegistrationFailed(arg1: string, arg2: number, arg3: string): void;
				onRegistrationDone(arg1: string, arg2: native.Long): void;
			}
			export class SipSession extends java.lang.Object {
				static class: java.lang.Class<android.net.sip.SipSession>;
				setListener(arg1: android.net.sip.SipSession.Listener): void;
				getCallId(): string;
				makeCall(arg1: android.net.sip.SipProfile, arg2: java.lang.String, arg3: number): void;
				makeCall(arg1: android.net.sip.SipProfile, arg2: string, arg3: number): void;
				answerCall(arg1: java.lang.String, arg2: number): void;
				answerCall(arg1: string, arg2: number): void;
				getLocalIp(): string;
				changeCall(arg1: java.lang.String, arg2: number): void;
				changeCall(arg1: string, arg2: number): void;
				isInCall(): boolean;
				endCall(): void;
				getPeerProfile(): android.net.sip.SipProfile;
				getLocalProfile(): android.net.sip.SipProfile;
				register(arg1: number): void;
				getState(): number;
				unregister(): void;
			}
			export module SipSession {
				export class Listener extends java.lang.Object {
					constructor();
					static class: java.lang.Class<android.net.sip.SipSession.Listener>;
					onError(arg1: android.net.sip.SipSession, arg2: number, arg3: java.lang.String): void;
					onError(arg1: android.net.sip.SipSession, arg2: number, arg3: string): void;
					onCallBusy(arg1: android.net.sip.SipSession): void;
					onRegistering(arg1: android.net.sip.SipSession): void;
					onRingingBack(arg1: android.net.sip.SipSession): void;
					onCalling(arg1: android.net.sip.SipSession): void;
					onCallEnded(arg1: android.net.sip.SipSession): void;
					onRinging(arg1: android.net.sip.SipSession, arg2: android.net.sip.SipProfile, arg3: java.lang.String): void;
					onRinging(arg1: android.net.sip.SipSession, arg2: android.net.sip.SipProfile, arg3: string): void;
					onCallEstablished(arg1: android.net.sip.SipSession, arg2: java.lang.String): void;
					onCallEstablished(arg1: android.net.sip.SipSession, arg2: string): void;
					onRegistrationFailed(arg1: android.net.sip.SipSession, arg2: number, arg3: java.lang.String): void;
					onRegistrationFailed(arg1: android.net.sip.SipSession, arg2: number, arg3: string): void;
					onRegistrationTimeout(arg1: android.net.sip.SipSession): void;
					onRegistrationDone(arg1: android.net.sip.SipSession, arg2: number): void;
					onCallChangeFailed(arg1: android.net.sip.SipSession, arg2: number, arg3: java.lang.String): void;
					onCallChangeFailed(arg1: android.net.sip.SipSession, arg2: number, arg3: string): void;
				}
				export class State extends java.lang.Object {
					static READY_TO_CALL: number;
					static REGISTERING: number;
					static DEREGISTERING: number;
					static INCOMING_CALL: number;
					static INCOMING_CALL_ANSWERING: number;
					static OUTGOING_CALL: number;
					static OUTGOING_CALL_RING_BACK: number;
					static OUTGOING_CALL_CANCELING: number;
					static IN_CALL: number;
					static PINGING: number;
					static NOT_DEFINED: number;
					static class: java.lang.Class<android.net.sip.SipSession.State>;
					static toString(arg1: number): string;
					toString(): string;
				}
			}
			export class SipException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				static class: java.lang.Class<android.net.sip.SipException>;
			}
			export class SipErrorCode extends java.lang.Object {
				static NO_ERROR: number;
				static SOCKET_ERROR: number;
				static SERVER_ERROR: number;
				static TRANSACTION_TERMINTED: number;
				static CLIENT_ERROR: number;
				static TIME_OUT: number;
				static INVALID_REMOTE_URI: number;
				static PEER_NOT_REACHABLE: number;
				static INVALID_CREDENTIALS: number;
				static IN_PROGRESS: number;
				static DATA_CONNECTION_LOST: number;
				static CROSS_DOMAIN_AUTHENTICATION: number;
				static SERVER_UNREACHABLE: number;
				static class: java.lang.Class<android.net.sip.SipErrorCode>;
				static toString(arg1: number): string;
				toString(): string;
			}
		}
		export module http {
			export class X509TrustManagerExtensions extends java.lang.Object {
				constructor(arg1: javax.net.ssl.IX509TrustManager);
				static class: java.lang.Class<android.net.http.X509TrustManagerExtensions>;
				checkServerTrusted(arg1: native.Array<java.security.cert.X509Certificate>, arg2: java.lang.String, arg3: java.lang.String): java.util.IList<java.security.cert.X509Certificate>;
				checkServerTrusted(arg1: native.Array<java.security.cert.X509Certificate>, arg2: string, arg3: string): java.util.IList<java.security.cert.X509Certificate>;
			}
			export class AndroidHttpClient extends java.lang.Object implements org.apache.http.client.IHttpClient {
				static DEFAULT_SYNC_MIN_GZIP_BYTES: native.Long;
				static class: java.lang.Class<android.net.http.AndroidHttpClient>;
				static parseDate(arg1: java.lang.String): any;
				static parseDate(arg1: string): any;
				enableCurlLogging(arg1: java.lang.String, arg2: number): void;
				enableCurlLogging(arg1: string, arg2: number): void;
				static getUngzippedContent(arg1: org.apache.http.IHttpEntity): java.io.InputStream;
				static getCompressedEntity(arg1: native.Array<native.Byte>, arg2: android.content.ContentResolver): org.apache.http.entity.AbstractHttpEntity;
				disableCurlLogging(): void;
				getConnectionManager(): org.apache.http.conn.IClientConnectionManager;
				static getMinGzipSize(arg1: android.content.ContentResolver): any;
				static modifyRequestToAcceptGzipResponse(arg1: org.apache.http.IHttpRequest): void;
				static newInstance(arg1: java.lang.String): android.net.http.AndroidHttpClient;
				static newInstance(arg1: string): android.net.http.AndroidHttpClient;
				static newInstance(arg1: java.lang.String, arg2: android.content.Context): android.net.http.AndroidHttpClient;
				static newInstance(arg1: string, arg2: android.content.Context): android.net.http.AndroidHttpClient;
				close(): void;
				execute<T>(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.client.IResponseHandler<any>, arg4: org.apache.http.protocol.IHttpContext): T;
				execute<T>(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.client.IResponseHandler<any>): T;
				execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest): org.apache.http.IHttpResponse;
				execute(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
				execute(arg1: org.apache.http.client.methods.IHttpUriRequest): org.apache.http.IHttpResponse;
				execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
				execute<T>(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.client.IResponseHandler<any>): T;
				execute<T>(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.client.IResponseHandler<any>, arg3: org.apache.http.protocol.IHttpContext): T;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export class SslCertificate extends java.lang.Object {
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.util.Date, arg4: java.util.Date);
				constructor(arg1: string, arg2: string, arg3: java.util.Date, arg4: java.util.Date);
				constructor(arg1: java.security.cert.X509Certificate);
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String);
				constructor(arg1: string, arg2: string, arg3: string, arg4: string);
				static class: java.lang.Class<android.net.http.SslCertificate>;
				DName: { new (arg2: java.lang.String): android.net.http.SslCertificate.DName; new (arg2: string): android.net.http.SslCertificate.DName };
				static saveState(arg1: android.net.http.SslCertificate): android.os.Bundle;
				static restoreState(arg1: android.os.Bundle): android.net.http.SslCertificate;
				getIssuedBy(): android.net.http.SslCertificate.DName;
				getIssuedTo(): android.net.http.SslCertificate.DName;
				getValidNotAfterDate(): java.util.Date;
				getValidNotAfter(): string;
				getValidNotBeforeDate(): java.util.Date;
				getValidNotBefore(): string;
				toString(): string;
			}
			export module SslCertificate {
				export class DName extends java.lang.Object {
					static class: java.lang.Class<android.net.http.SslCertificate.DName>;
					getDName(): string;
					getUName(): string;
					getOName(): string;
					getCName(): string;
				}
			}
			export class SslError extends java.lang.Object {
				constructor(arg1: number, arg2: android.net.http.SslCertificate);
				constructor(arg1: number, arg2: java.security.cert.X509Certificate);
				constructor(arg1: number, arg2: java.security.cert.X509Certificate, arg3: java.lang.String);
				constructor(arg1: number, arg2: java.security.cert.X509Certificate, arg3: string);
				constructor(arg1: number, arg2: android.net.http.SslCertificate, arg3: java.lang.String);
				constructor(arg1: number, arg2: android.net.http.SslCertificate, arg3: string);
				static SSL_NOTYETVALID: number;
				static SSL_EXPIRED: number;
				static SSL_IDMISMATCH: number;
				static SSL_UNTRUSTED: number;
				static SSL_DATE_INVALID: number;
				static SSL_INVALID: number;
				static SSL_MAX_ERROR: number;
				static class: java.lang.Class<android.net.http.SslError>;
				addError(arg1: number): boolean;
				getUrl(): string;
				getPrimaryError(): number;
				toString(): string;
				getCertificate(): android.net.http.SslCertificate;
				hasError(arg1: number): boolean;
			}
			export class HttpResponseCache extends java.net.ResponseCache implements java.io.ICloseable {
				static class: java.lang.Class<android.net.http.HttpResponseCache>;
				static getInstalled(): android.net.http.HttpResponseCache;
				getHitCount(): number;
				getRequestCount(): number;
				getNetworkCount(): number;
				get(arg1: java.net.URI, arg2: java.lang.String, arg3: java.util.IMap<string, java.util.IList<string>>): java.net.CacheResponse;
				get(arg1: java.net.URI, arg2: string, arg3: java.util.IMap<string, java.util.IList<string>>): java.net.CacheResponse;
				size(): any;
				put(arg1: java.net.URI, arg2: java.net.URLConnection): java.net.CacheRequest;
				close(): void;
				flush(): void;
				delete(): void;
				maxSize(): any;
				static install(arg1: java.io.File, arg2: native.Long): android.net.http.HttpResponseCache;
			}
		}
		export class Uri extends java.lang.Object implements android.os.IParcelable, java.lang.IComparable<android.net.Uri> {
			static EMPTY: android.net.Uri;
			static CREATOR: android.os.Parcelable.ICreator<android.net.Uri>;
			static class: java.lang.Class<android.net.Uri>;
			static fromFile(arg1: java.io.File): android.net.Uri;
			static writeToParcel(arg1: android.os.Parcel, arg2: android.net.Uri): void;
			getEncodedSchemeSpecificPart(): string;
			getBooleanQueryParameter(arg1: java.lang.String, arg2: boolean): boolean;
			getBooleanQueryParameter(arg1: string, arg2: boolean): boolean;
			getQueryParameterNames(): java.util.ISet<string>;
			isRelative(): boolean;
			static fromParts(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): android.net.Uri;
			static fromParts(arg1: string, arg2: string, arg3: string): android.net.Uri;
			buildUpon(): android.net.Uri.Builder;
			isHierarchical(): boolean;
			getEncodedAuthority(): string;
			getEncodedPath(): string;
			getEncodedQuery(): string;
			getLastPathSegment(): string;
			getEncodedUserInfo(): string;
			getPathSegments(): java.util.IList<string>;
			getEncodedFragment(): string;
			getQueryParameter(arg1: java.lang.String): string;
			getQueryParameter(arg1: string): string;
			static withAppendedPath(arg1: android.net.Uri, arg2: java.lang.String): android.net.Uri;
			static withAppendedPath(arg1: android.net.Uri, arg2: string): android.net.Uri;
			normalizeScheme(): android.net.Uri;
			getQueryParameters(arg1: java.lang.String): java.util.IList<string>;
			getQueryParameters(arg1: string): java.util.IList<string>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: android.net.Uri): number;
			compareTo(arg1: any): number;
			static decode(arg1: java.lang.String): string;
			static decode(arg1: string): string;
			static encode(arg1: java.lang.String, arg2: java.lang.String): string;
			static encode(arg1: string, arg2: string): string;
			static encode(arg1: java.lang.String): string;
			static encode(arg1: string): string;
			isAbsolute(): boolean;
			getPath(): string;
			static parse(arg1: java.lang.String): android.net.Uri;
			static parse(arg1: string): android.net.Uri;
			getAuthority(): string;
			getFragment(): string;
			getQuery(): string;
			getScheme(): string;
			isOpaque(): boolean;
			getHost(): string;
			getPort(): number;
			getUserInfo(): string;
			getSchemeSpecificPart(): string;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
		}
		export module Uri {
			export class Builder extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.net.Uri.Builder>;
				opaquePart(arg1: java.lang.String): android.net.Uri.Builder;
				opaquePart(arg1: string): android.net.Uri.Builder;
				encodedPath(arg1: java.lang.String): android.net.Uri.Builder;
				encodedPath(arg1: string): android.net.Uri.Builder;
				clearQuery(): android.net.Uri.Builder;
				encodedQuery(arg1: java.lang.String): android.net.Uri.Builder;
				encodedQuery(arg1: string): android.net.Uri.Builder;
				encodedOpaquePart(arg1: java.lang.String): android.net.Uri.Builder;
				encodedOpaquePart(arg1: string): android.net.Uri.Builder;
				encodedAuthority(arg1: java.lang.String): android.net.Uri.Builder;
				encodedAuthority(arg1: string): android.net.Uri.Builder;
				appendEncodedPath(arg1: java.lang.String): android.net.Uri.Builder;
				appendEncodedPath(arg1: string): android.net.Uri.Builder;
				appendQueryParameter(arg1: java.lang.String, arg2: java.lang.String): android.net.Uri.Builder;
				appendQueryParameter(arg1: string, arg2: string): android.net.Uri.Builder;
				encodedFragment(arg1: java.lang.String): android.net.Uri.Builder;
				encodedFragment(arg1: string): android.net.Uri.Builder;
				toString(): string;
				path(arg1: java.lang.String): android.net.Uri.Builder;
				path(arg1: string): android.net.Uri.Builder;
				authority(arg1: java.lang.String): android.net.Uri.Builder;
				authority(arg1: string): android.net.Uri.Builder;
				query(arg1: java.lang.String): android.net.Uri.Builder;
				query(arg1: string): android.net.Uri.Builder;
				appendPath(arg1: java.lang.String): android.net.Uri.Builder;
				appendPath(arg1: string): android.net.Uri.Builder;
				build(): android.net.Uri;
				fragment(arg1: java.lang.String): android.net.Uri.Builder;
				fragment(arg1: string): android.net.Uri.Builder;
				scheme(arg1: java.lang.String): android.net.Uri.Builder;
				scheme(arg1: string): android.net.Uri.Builder;
			}
		}
		export class SSLCertificateSocketFactory extends javax.net.ssl.SSLSocketFactory {
			constructor(arg1: number);
			static class: java.lang.Class<android.net.SSLCertificateSocketFactory>;
			getSupportedCipherSuites(): native.Array<java.lang.String>;
			getDefaultCipherSuites(): native.Array<java.lang.String>;
			getNpnSelectedProtocol(arg1: java.net.Socket): native.Array<native.Byte>;
			static getInsecure(arg1: number, arg2: android.net.SSLSessionCache): javax.net.ssl.SSLSocketFactory;
			setHostname(arg1: java.net.Socket, arg2: java.lang.String): void;
			setHostname(arg1: java.net.Socket, arg2: string): void;
			createSocket(arg1: java.lang.String, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
			createSocket(arg1: string, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
			createSocket(arg1: java.net.Socket, arg2: java.lang.String, arg3: number, arg4: boolean): java.net.Socket;
			createSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: boolean): java.net.Socket;
			createSocket(): java.net.Socket;
			createSocket(arg1: java.net.InetAddress, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
			createSocket(arg1: java.net.InetAddress, arg2: number): java.net.Socket;
			createSocket(arg1: java.lang.String, arg2: number): java.net.Socket;
			createSocket(arg1: string, arg2: number): java.net.Socket;
			setTrustManagers(arg1: native.Array<javax.net.ssl.ITrustManager>): void;
			setKeyManagers(arg1: native.Array<javax.net.ssl.IKeyManager>): void;
			static getHttpSocketFactory(arg1: number, arg2: android.net.SSLSessionCache): org.apache.http.conn.ssl.SSLSocketFactory;
			setNpnProtocols(arg1: native.Array<native.Array<native.Byte>>): void;
			setUseSessionTickets(arg1: java.net.Socket, arg2: boolean): void;
			static getDefault(arg1: number, arg2: android.net.SSLSessionCache): javax.net.ssl.SSLSocketFactory;
			static getDefault(arg1: number): javax.net.SocketFactory;
			static getDefault(): javax.net.SocketFactory;
		}
		export class MailTo extends java.lang.Object {
			static MAILTO_SCHEME: java.lang.String;
			static class: java.lang.Class<android.net.MailTo>;
			getBody(): string;
			getSubject(): string;
			getTo(): string;
			getCc(): string;
			static isMailTo(arg1: java.lang.String): boolean;
			static isMailTo(arg1: string): boolean;
			toString(): string;
			static parse(arg1: java.lang.String): android.net.MailTo;
			static parse(arg1: string): android.net.MailTo;
			getHeaders(): java.util.IMap<string, string>;
		}
		export class SSLSessionCache extends java.lang.Object {
			constructor(arg1: java.io.File);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.net.SSLSessionCache>;
		}
	}
	export module appwidget {
		export class AppWidgetProvider extends android.content.BroadcastReceiver {
			constructor();
			static class: java.lang.Class<android.appwidget.AppWidgetProvider>;
			onReceive(arg1: android.content.Context, arg2: android.content.Intent): void;
			onUpdate(arg1: android.content.Context, arg2: android.appwidget.AppWidgetManager, arg3: native.Array<number>): void;
			onDeleted(arg1: android.content.Context, arg2: native.Array<number>): void;
			onAppWidgetOptionsChanged(arg1: android.content.Context, arg2: android.appwidget.AppWidgetManager, arg3: number, arg4: android.os.Bundle): void;
			onEnabled(arg1: android.content.Context): void;
			onDisabled(arg1: android.content.Context): void;
		}
		export class AppWidgetManager extends java.lang.Object {
			static ACTION_APPWIDGET_PICK: java.lang.String;
			static ACTION_APPWIDGET_BIND: java.lang.String;
			static ACTION_APPWIDGET_CONFIGURE: java.lang.String;
			static EXTRA_APPWIDGET_ID: java.lang.String;
			static OPTION_APPWIDGET_MIN_WIDTH: java.lang.String;
			static OPTION_APPWIDGET_MIN_HEIGHT: java.lang.String;
			static OPTION_APPWIDGET_MAX_WIDTH: java.lang.String;
			static OPTION_APPWIDGET_MAX_HEIGHT: java.lang.String;
			static OPTION_APPWIDGET_HOST_CATEGORY: java.lang.String;
			static EXTRA_APPWIDGET_OPTIONS: java.lang.String;
			static EXTRA_APPWIDGET_IDS: java.lang.String;
			static EXTRA_APPWIDGET_PROVIDER: java.lang.String;
			static EXTRA_CUSTOM_INFO: java.lang.String;
			static EXTRA_CUSTOM_EXTRAS: java.lang.String;
			static INVALID_APPWIDGET_ID: number;
			static ACTION_APPWIDGET_UPDATE: java.lang.String;
			static ACTION_APPWIDGET_OPTIONS_CHANGED: java.lang.String;
			static ACTION_APPWIDGET_DELETED: java.lang.String;
			static ACTION_APPWIDGET_DISABLED: java.lang.String;
			static ACTION_APPWIDGET_ENABLED: java.lang.String;
			static META_DATA_APPWIDGET_PROVIDER: java.lang.String;
			static class: java.lang.Class<android.appwidget.AppWidgetManager>;
			notifyAppWidgetViewDataChanged(arg1: number, arg2: number): void;
			notifyAppWidgetViewDataChanged(arg1: native.Array<number>, arg2: number): void;
			partiallyUpdateAppWidget(arg1: native.Array<number>, arg2: android.widget.RemoteViews): void;
			partiallyUpdateAppWidget(arg1: number, arg2: android.widget.RemoteViews): void;
			bindAppWidgetIdIfAllowed(arg1: number, arg2: android.content.ComponentName): boolean;
			bindAppWidgetIdIfAllowed(arg1: number, arg2: android.content.ComponentName, arg3: android.os.Bundle): boolean;
			updateAppWidgetOptions(arg1: number, arg2: android.os.Bundle): void;
			getAppWidgetOptions(arg1: number): android.os.Bundle;
			getInstalledProviders(): java.util.IList<android.appwidget.AppWidgetProviderInfo>;
			getAppWidgetInfo(arg1: number): android.appwidget.AppWidgetProviderInfo;
			getAppWidgetIds(arg1: android.content.ComponentName): native.Array<number>;
			updateAppWidget(arg1: native.Array<number>, arg2: android.widget.RemoteViews): void;
			updateAppWidget(arg1: number, arg2: android.widget.RemoteViews): void;
			updateAppWidget(arg1: android.content.ComponentName, arg2: android.widget.RemoteViews): void;
			static getInstance(arg1: android.content.Context): android.appwidget.AppWidgetManager;
		}
		export class AppWidgetHostView extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: number, arg3: number);
			static class: java.lang.Class<android.appwidget.AppWidgetHostView>;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.FrameLayout.LayoutParams;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setAppWidget(arg1: number, arg2: android.appwidget.AppWidgetProviderInfo): void;
			static getDefaultPaddingForWidget(arg1: android.content.Context, arg2: android.content.ComponentName, arg3: android.graphics.Rect): android.graphics.Rect;
			updateAppWidgetOptions(arg1: android.os.Bundle): void;
			getAppWidgetInfo(): android.appwidget.AppWidgetProviderInfo;
			updateAppWidgetSize(arg1: android.os.Bundle, arg2: number, arg3: number, arg4: number, arg5: number): void;
			updateAppWidget(arg1: android.widget.RemoteViews): void;
			getAppWidgetId(): number;
		}
		export class AppWidgetHost extends java.lang.Object {
			constructor(arg1: android.content.Context, arg2: number);
			static class: java.lang.Class<android.appwidget.AppWidgetHost>;
			createView(arg1: android.content.Context, arg2: number, arg3: android.appwidget.AppWidgetProviderInfo): android.appwidget.AppWidgetHostView;
			deleteHost(): void;
			allocateAppWidgetId(): number;
			deleteAppWidgetId(arg1: number): void;
			static deleteAllHosts(): void;
			startListening(): void;
			stopListening(): void;
		}
		export class AppWidgetProviderInfo extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: android.os.Parcel);
			static RESIZE_NONE: number;
			static RESIZE_HORIZONTAL: number;
			static RESIZE_VERTICAL: number;
			static RESIZE_BOTH: number;
			static WIDGET_CATEGORY_HOME_SCREEN: number;
			static WIDGET_CATEGORY_KEYGUARD: number;
			provider: android.content.ComponentName;
			minWidth: number;
			minHeight: number;
			minResizeWidth: number;
			minResizeHeight: number;
			updatePeriodMillis: number;
			initialLayout: number;
			initialKeyguardLayout: number;
			configure: android.content.ComponentName;
			label: java.lang.String;
			icon: number;
			autoAdvanceViewId: number;
			previewImage: number;
			resizeMode: number;
			widgetCategory: number;
			static CREATOR: android.os.Parcelable.ICreator<android.appwidget.AppWidgetProviderInfo>;
			static class: java.lang.Class<android.appwidget.AppWidgetProviderInfo>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			clone(): android.appwidget.AppWidgetProviderInfo;
			toString(): string;
		}
	}
	export module annotation {
		export interface ITargetApi extends java.lang.annotation.IAnnotation {
			value(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class TargetApi implements java.lang.annotation.IAnnotation, android.annotation.ITargetApi {
			constructor(implementation: android.annotation.ITargetApi);
			value(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export interface ISuppressLint extends java.lang.annotation.IAnnotation {
			value(): native.Array<java.lang.String>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class SuppressLint implements java.lang.annotation.IAnnotation, android.annotation.ISuppressLint {
			constructor(implementation: android.annotation.ISuppressLint);
			value(): native.Array<java.lang.String>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
	}
	export class Manifest extends java.lang.Object {
		constructor();
		static class: java.lang.Class<android.Manifest>;
	}
	export module Manifest {
		export class permission extends java.lang.Object {
			constructor();
			static ACCESS_CHECKIN_PROPERTIES: java.lang.String;
			static ACCESS_COARSE_LOCATION: java.lang.String;
			static ACCESS_FINE_LOCATION: java.lang.String;
			static ACCESS_LOCATION_EXTRA_COMMANDS: java.lang.String;
			static ACCESS_MOCK_LOCATION: java.lang.String;
			static ACCESS_NETWORK_STATE: java.lang.String;
			static ACCESS_SURFACE_FLINGER: java.lang.String;
			static ACCESS_WIFI_STATE: java.lang.String;
			static ACCOUNT_MANAGER: java.lang.String;
			static ADD_VOICEMAIL: java.lang.String;
			static AUTHENTICATE_ACCOUNTS: java.lang.String;
			static BATTERY_STATS: java.lang.String;
			static BIND_ACCESSIBILITY_SERVICE: java.lang.String;
			static BIND_APPWIDGET: java.lang.String;
			static BIND_DEVICE_ADMIN: java.lang.String;
			static BIND_INPUT_METHOD: java.lang.String;
			static BIND_REMOTEVIEWS: java.lang.String;
			static BIND_TEXT_SERVICE: java.lang.String;
			static BIND_VPN_SERVICE: java.lang.String;
			static BIND_WALLPAPER: java.lang.String;
			static BLUETOOTH: java.lang.String;
			static BLUETOOTH_ADMIN: java.lang.String;
			static BRICK: java.lang.String;
			static BROADCAST_PACKAGE_REMOVED: java.lang.String;
			static BROADCAST_SMS: java.lang.String;
			static BROADCAST_STICKY: java.lang.String;
			static BROADCAST_WAP_PUSH: java.lang.String;
			static CALL_PHONE: java.lang.String;
			static CALL_PRIVILEGED: java.lang.String;
			static CAMERA: java.lang.String;
			static CHANGE_COMPONENT_ENABLED_STATE: java.lang.String;
			static CHANGE_CONFIGURATION: java.lang.String;
			static CHANGE_NETWORK_STATE: java.lang.String;
			static CHANGE_WIFI_MULTICAST_STATE: java.lang.String;
			static CHANGE_WIFI_STATE: java.lang.String;
			static CLEAR_APP_CACHE: java.lang.String;
			static CLEAR_APP_USER_DATA: java.lang.String;
			static CONTROL_LOCATION_UPDATES: java.lang.String;
			static DELETE_CACHE_FILES: java.lang.String;
			static DELETE_PACKAGES: java.lang.String;
			static DEVICE_POWER: java.lang.String;
			static DIAGNOSTIC: java.lang.String;
			static DISABLE_KEYGUARD: java.lang.String;
			static DUMP: java.lang.String;
			static EXPAND_STATUS_BAR: java.lang.String;
			static FACTORY_TEST: java.lang.String;
			static FLASHLIGHT: java.lang.String;
			static FORCE_BACK: java.lang.String;
			static GET_ACCOUNTS: java.lang.String;
			static GET_PACKAGE_SIZE: java.lang.String;
			static GET_TASKS: java.lang.String;
			static GLOBAL_SEARCH: java.lang.String;
			static HARDWARE_TEST: java.lang.String;
			static INJECT_EVENTS: java.lang.String;
			static INSTALL_LOCATION_PROVIDER: java.lang.String;
			static INSTALL_PACKAGES: java.lang.String;
			static INTERNAL_SYSTEM_WINDOW: java.lang.String;
			static INTERNET: java.lang.String;
			static KILL_BACKGROUND_PROCESSES: java.lang.String;
			static MANAGE_ACCOUNTS: java.lang.String;
			static MANAGE_APP_TOKENS: java.lang.String;
			static MASTER_CLEAR: java.lang.String;
			static MODIFY_AUDIO_SETTINGS: java.lang.String;
			static MODIFY_PHONE_STATE: java.lang.String;
			static MOUNT_FORMAT_FILESYSTEMS: java.lang.String;
			static MOUNT_UNMOUNT_FILESYSTEMS: java.lang.String;
			static NFC: java.lang.String;
			static PERSISTENT_ACTIVITY: java.lang.String;
			static PROCESS_OUTGOING_CALLS: java.lang.String;
			static READ_CALENDAR: java.lang.String;
			static READ_CALL_LOG: java.lang.String;
			static READ_CONTACTS: java.lang.String;
			static READ_EXTERNAL_STORAGE: java.lang.String;
			static READ_FRAME_BUFFER: java.lang.String;
			static READ_HISTORY_BOOKMARKS: java.lang.String;
			static READ_INPUT_STATE: java.lang.String;
			static READ_LOGS: java.lang.String;
			static READ_PHONE_STATE: java.lang.String;
			static READ_PROFILE: java.lang.String;
			static READ_SMS: java.lang.String;
			static READ_SOCIAL_STREAM: java.lang.String;
			static READ_SYNC_SETTINGS: java.lang.String;
			static READ_SYNC_STATS: java.lang.String;
			static READ_USER_DICTIONARY: java.lang.String;
			static REBOOT: java.lang.String;
			static RECEIVE_BOOT_COMPLETED: java.lang.String;
			static RECEIVE_MMS: java.lang.String;
			static RECEIVE_SMS: java.lang.String;
			static RECEIVE_WAP_PUSH: java.lang.String;
			static RECORD_AUDIO: java.lang.String;
			static REORDER_TASKS: java.lang.String;
			static RESTART_PACKAGES: java.lang.String;
			static SEND_SMS: java.lang.String;
			static SET_ACTIVITY_WATCHER: java.lang.String;
			static SET_ALARM: java.lang.String;
			static SET_ALWAYS_FINISH: java.lang.String;
			static SET_ANIMATION_SCALE: java.lang.String;
			static SET_DEBUG_APP: java.lang.String;
			static SET_ORIENTATION: java.lang.String;
			static SET_POINTER_SPEED: java.lang.String;
			static SET_PREFERRED_APPLICATIONS: java.lang.String;
			static SET_PROCESS_LIMIT: java.lang.String;
			static SET_TIME: java.lang.String;
			static SET_TIME_ZONE: java.lang.String;
			static SET_WALLPAPER: java.lang.String;
			static SET_WALLPAPER_HINTS: java.lang.String;
			static SIGNAL_PERSISTENT_PROCESSES: java.lang.String;
			static STATUS_BAR: java.lang.String;
			static SUBSCRIBED_FEEDS_READ: java.lang.String;
			static SUBSCRIBED_FEEDS_WRITE: java.lang.String;
			static SYSTEM_ALERT_WINDOW: java.lang.String;
			static UPDATE_DEVICE_STATS: java.lang.String;
			static USE_CREDENTIALS: java.lang.String;
			static USE_SIP: java.lang.String;
			static VIBRATE: java.lang.String;
			static WAKE_LOCK: java.lang.String;
			static WRITE_APN_SETTINGS: java.lang.String;
			static WRITE_CALENDAR: java.lang.String;
			static WRITE_CALL_LOG: java.lang.String;
			static WRITE_CONTACTS: java.lang.String;
			static WRITE_EXTERNAL_STORAGE: java.lang.String;
			static WRITE_GSERVICES: java.lang.String;
			static WRITE_HISTORY_BOOKMARKS: java.lang.String;
			static WRITE_PROFILE: java.lang.String;
			static WRITE_SECURE_SETTINGS: java.lang.String;
			static WRITE_SETTINGS: java.lang.String;
			static WRITE_SMS: java.lang.String;
			static WRITE_SOCIAL_STREAM: java.lang.String;
			static WRITE_SYNC_SETTINGS: java.lang.String;
			static WRITE_USER_DICTIONARY: java.lang.String;
			static class: java.lang.Class<android.Manifest.permission>;
		}
		export class permission_group extends java.lang.Object {
			constructor();
			static ACCOUNTS: java.lang.String;
			static AFFECTS_BATTERY: java.lang.String;
			static APP_INFO: java.lang.String;
			static AUDIO_SETTINGS: java.lang.String;
			static BLUETOOTH_NETWORK: java.lang.String;
			static BOOKMARKS: java.lang.String;
			static CALENDAR: java.lang.String;
			static CAMERA: java.lang.String;
			static COST_MONEY: java.lang.String;
			static DEVELOPMENT_TOOLS: java.lang.String;
			static DEVICE_ALARMS: java.lang.String;
			static DISPLAY: java.lang.String;
			static HARDWARE_CONTROLS: java.lang.String;
			static LOCATION: java.lang.String;
			static MESSAGES: java.lang.String;
			static MICROPHONE: java.lang.String;
			static NETWORK: java.lang.String;
			static PERSONAL_INFO: java.lang.String;
			static PHONE_CALLS: java.lang.String;
			static SCREENLOCK: java.lang.String;
			static SOCIAL_INFO: java.lang.String;
			static STATUS_BAR: java.lang.String;
			static STORAGE: java.lang.String;
			static SYNC_SETTINGS: java.lang.String;
			static SYSTEM_CLOCK: java.lang.String;
			static SYSTEM_TOOLS: java.lang.String;
			static USER_DICTIONARY: java.lang.String;
			static VOICEMAIL: java.lang.String;
			static WALLPAPER: java.lang.String;
			static WRITE_USER_DICTIONARY: java.lang.String;
			static class: java.lang.Class<android.Manifest.permission_group>;
		}
	}
	export module opengl {
		export class ETC1 extends java.lang.Object {
			constructor();
			static ENCODED_BLOCK_SIZE: number;
			static DECODED_BLOCK_SIZE: number;
			static ETC_PKM_HEADER_SIZE: number;
			static ETC1_RGB8_OES: number;
			static class: java.lang.Class<android.opengl.ETC1>;
			static getEncodedDataSize(arg1: number, arg2: number): number;
			static decodeImage(arg1: java.nio.Buffer, arg2: java.nio.Buffer, arg3: number, arg4: number, arg5: number, arg6: number): void;
			static decodeBlock(arg1: java.nio.Buffer, arg2: java.nio.Buffer): void;
			static encodeImage(arg1: java.nio.Buffer, arg2: number, arg3: number, arg4: number, arg5: number, arg6: java.nio.Buffer): void;
			static encodeBlock(arg1: java.nio.Buffer, arg2: number, arg3: java.nio.Buffer): void;
			static formatHeader(arg1: java.nio.Buffer, arg2: number, arg3: number): void;
			static getHeight(arg1: java.nio.Buffer): number;
			static getWidth(arg1: java.nio.Buffer): number;
			static isValid(arg1: java.nio.Buffer): boolean;
		}
		export class GLUtils extends java.lang.Object {
			static class: java.lang.Class<android.opengl.GLUtils>;
			static texSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: android.graphics.Bitmap): void;
			static texSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: android.graphics.Bitmap, arg6: number, arg7: number): void;
			static texImage2D(arg1: number, arg2: number, arg3: number, arg4: android.graphics.Bitmap, arg5: number): void;
			static texImage2D(arg1: number, arg2: number, arg3: android.graphics.Bitmap, arg4: number): void;
			static texImage2D(arg1: number, arg2: number, arg3: number, arg4: android.graphics.Bitmap, arg5: number, arg6: number): void;
			static getEGLErrorString(arg1: number): string;
			static getInternalFormat(arg1: android.graphics.Bitmap): number;
			static getType(arg1: android.graphics.Bitmap): number;
		}
		export class ETC1Util extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.opengl.ETC1Util>;
			static writeTexture(arg1: android.opengl.ETC1Util.ETC1Texture, arg2: java.io.OutputStream): void;
			static loadTexture(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.opengl.ETC1Util.ETC1Texture): void;
			static loadTexture(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: java.io.InputStream): void;
			static createTexture(arg1: java.io.InputStream): android.opengl.ETC1Util.ETC1Texture;
			static compressTexture(arg1: java.nio.Buffer, arg2: number, arg3: number, arg4: number, arg5: number): android.opengl.ETC1Util.ETC1Texture;
			static isETC1Supported(): boolean;
		}
		export module ETC1Util {
			export class ETC1Texture extends java.lang.Object {
				constructor(arg1: number, arg2: number, arg3: java.nio.ByteBuffer);
				static class: java.lang.Class<android.opengl.ETC1Util.ETC1Texture>;
				getHeight(): number;
				getWidth(): number;
				getData(): java.nio.ByteBuffer;
			}
		}
		export class GLES11Ext extends java.lang.Object {
			constructor();
			static GL_BLEND_EQUATION_RGB_OES: number;
			static GL_BLEND_EQUATION_ALPHA_OES: number;
			static GL_BLEND_DST_RGB_OES: number;
			static GL_BLEND_SRC_RGB_OES: number;
			static GL_BLEND_DST_ALPHA_OES: number;
			static GL_BLEND_SRC_ALPHA_OES: number;
			static GL_BLEND_EQUATION_OES: number;
			static GL_FUNC_ADD_OES: number;
			static GL_FUNC_SUBTRACT_OES: number;
			static GL_FUNC_REVERSE_SUBTRACT_OES: number;
			static GL_ETC1_RGB8_OES: number;
			static GL_DEPTH_COMPONENT24_OES: number;
			static GL_DEPTH_COMPONENT32_OES: number;
			static GL_TEXTURE_CROP_RECT_OES: number;
			static GL_FIXED_OES: number;
			static GL_NONE_OES: number;
			static GL_FRAMEBUFFER_OES: number;
			static GL_RENDERBUFFER_OES: number;
			static GL_RGBA4_OES: number;
			static GL_RGB5_A1_OES: number;
			static GL_RGB565_OES: number;
			static GL_DEPTH_COMPONENT16_OES: number;
			static GL_RENDERBUFFER_WIDTH_OES: number;
			static GL_RENDERBUFFER_HEIGHT_OES: number;
			static GL_RENDERBUFFER_INTERNAL_FORMAT_OES: number;
			static GL_RENDERBUFFER_RED_SIZE_OES: number;
			static GL_RENDERBUFFER_GREEN_SIZE_OES: number;
			static GL_RENDERBUFFER_BLUE_SIZE_OES: number;
			static GL_RENDERBUFFER_ALPHA_SIZE_OES: number;
			static GL_RENDERBUFFER_DEPTH_SIZE_OES: number;
			static GL_RENDERBUFFER_STENCIL_SIZE_OES: number;
			static GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES: number;
			static GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES: number;
			static GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES: number;
			static GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES: number;
			static GL_COLOR_ATTACHMENT0_OES: number;
			static GL_DEPTH_ATTACHMENT_OES: number;
			static GL_STENCIL_ATTACHMENT_OES: number;
			static GL_FRAMEBUFFER_COMPLETE_OES: number;
			static GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES: number;
			static GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES: number;
			static GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES: number;
			static GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES: number;
			static GL_FRAMEBUFFER_UNSUPPORTED_OES: number;
			static GL_FRAMEBUFFER_BINDING_OES: number;
			static GL_RENDERBUFFER_BINDING_OES: number;
			static GL_MAX_RENDERBUFFER_SIZE_OES: number;
			static GL_INVALID_FRAMEBUFFER_OPERATION_OES: number;
			static GL_WRITE_ONLY_OES: number;
			static GL_BUFFER_ACCESS_OES: number;
			static GL_BUFFER_MAPPED_OES: number;
			static GL_BUFFER_MAP_POINTER_OES: number;
			static GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES: number;
			static GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES: number;
			static GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES: number;
			static GL_MAX_VERTEX_UNITS_OES: number;
			static GL_MAX_PALETTE_MATRICES_OES: number;
			static GL_MATRIX_PALETTE_OES: number;
			static GL_MATRIX_INDEX_ARRAY_OES: number;
			static GL_WEIGHT_ARRAY_OES: number;
			static GL_CURRENT_PALETTE_MATRIX_OES: number;
			static GL_MATRIX_INDEX_ARRAY_SIZE_OES: number;
			static GL_MATRIX_INDEX_ARRAY_TYPE_OES: number;
			static GL_MATRIX_INDEX_ARRAY_STRIDE_OES: number;
			static GL_MATRIX_INDEX_ARRAY_POINTER_OES: number;
			static GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES: number;
			static GL_WEIGHT_ARRAY_SIZE_OES: number;
			static GL_WEIGHT_ARRAY_TYPE_OES: number;
			static GL_WEIGHT_ARRAY_STRIDE_OES: number;
			static GL_WEIGHT_ARRAY_POINTER_OES: number;
			static GL_WEIGHT_ARRAY_BUFFER_BINDING_OES: number;
			static GL_DEPTH_STENCIL_OES: number;
			static GL_UNSIGNED_INT_24_8_OES: number;
			static GL_DEPTH24_STENCIL8_OES: number;
			static GL_RGB8_OES: number;
			static GL_RGBA8_OES: number;
			static GL_STENCIL_INDEX1_OES: number;
			static GL_STENCIL_INDEX4_OES: number;
			static GL_STENCIL_INDEX8_OES: number;
			static GL_INCR_WRAP_OES: number;
			static GL_DECR_WRAP_OES: number;
			static GL_NORMAL_MAP_OES: number;
			static GL_REFLECTION_MAP_OES: number;
			static GL_TEXTURE_CUBE_MAP_OES: number;
			static GL_TEXTURE_BINDING_CUBE_MAP_OES: number;
			static GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES: number;
			static GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES: number;
			static GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES: number;
			static GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES: number;
			static GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES: number;
			static GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES: number;
			static GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES: number;
			static GL_TEXTURE_GEN_MODE_OES: number;
			static GL_TEXTURE_GEN_STR_OES: number;
			static GL_MIRRORED_REPEAT_OES: number;
			static GL_3DC_X_AMD: number;
			static GL_3DC_XY_AMD: number;
			static GL_ATC_RGB_AMD: number;
			static GL_ATC_RGBA_EXPLICIT_ALPHA_AMD: number;
			static GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD: number;
			static GL_TEXTURE_MAX_ANISOTROPY_EXT: number;
			static GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;
			static GL_BGRA: number;
			static GL_TEXTURE_EXTERNAL_OES: number;
			static GL_SAMPLER_EXTERNAL_OES: number;
			static GL_TEXTURE_BINDING_EXTERNAL_OES: number;
			static GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES: number;
			static class: java.lang.Class<android.opengl.GLES11Ext>;
			static glDrawTexsvOES(arg1: native.Array<native.Short>, arg2: number): void;
			static glDrawTexsvOES(arg1: java.nio.ShortBuffer): void;
			static glDrawTexxvOES(arg1: native.Array<number>, arg2: number): void;
			static glDrawTexxvOES(arg1: java.nio.IntBuffer): void;
			static glBlendEquationOES(arg1: number): void;
			static glDrawTexfvOES(arg1: java.nio.FloatBuffer): void;
			static glDrawTexfvOES(arg1: native.Array<native.Float>, arg2: number): void;
			static glAlphaFuncxOES(arg1: number, arg2: number): void;
			static glClearColorxOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glDrawTexivOES(arg1: java.nio.IntBuffer): void;
			static glDrawTexivOES(arg1: native.Array<number>, arg2: number): void;
			static glGetRenderbufferParameterivOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetRenderbufferParameterivOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glLoadPaletteFromModelViewMatrixOES(): void;
			static glGetFramebufferAttachmentParameterivOES(arg1: number, arg2: number, arg3: number, arg4: native.Array<number>, arg5: number): void;
			static glGetFramebufferAttachmentParameterivOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.IntBuffer): void;
			static glEGLImageTargetRenderbufferStorageOES(arg1: number, arg2: java.nio.Buffer): void;
			static glBlendEquationSeparateOES(arg1: number, arg2: number): void;
			static glEGLImageTargetTexture2DOES(arg1: number, arg2: java.nio.Buffer): void;
			static glGetTexParameterxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetTexParameterxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glBlendFuncSeparateOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glRenderbufferStorageOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glCurrentPaletteMatrixOES(arg1: number): void;
			static glDeleteRenderbuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glDeleteRenderbuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glFramebufferTexture2DOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			static glMatrixIndexPointerOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glDeleteFramebuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDeleteFramebuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glFramebufferRenderbufferOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glCheckFramebufferStatusOES(arg1: number): number;
			static glNormal3xOES(arg1: number, arg2: number, arg3: number): void;
			static glRotatexOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glScalexOES(arg1: number, arg2: number, arg3: number): void;
			static glFrustumfOES(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			static glDrawTexiOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			static glTexEnvxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glTexEnvxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glTexGenfOES(arg1: number, arg2: number, arg3: native.Float): void;
			static glDrawTexfOES(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static glOrthofOES(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			static glFrustumxOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
			static glTexGenfvOES(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glTexGenfvOES(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glDrawTexxOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			static glTexEnvxOES(arg1: number, arg2: number, arg3: number): void;
			static glLightxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glLightxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glOrthoxOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
			static glFogxOES(arg1: number, arg2: number): void;
			static glColor4xOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glDrawTexsOES(arg1: native.Short, arg2: native.Short, arg3: native.Short, arg4: native.Short, arg5: native.Short): void;
			static glFogxvOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glFogxvOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glLightxOES(arg1: number, arg2: number, arg3: number): void;
			static glTexGenxOES(arg1: number, arg2: number, arg3: number): void;
			static glTexGenxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glTexGenxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glTexGenivOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glTexGenivOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glTexGeniOES(arg1: number, arg2: number, arg3: number): void;
			static glBindFramebufferOES(arg1: number, arg2: number): void;
			static glLoadMatrixxOES(arg1: native.Array<number>, arg2: number): void;
			static glLoadMatrixxOES(arg1: java.nio.IntBuffer): void;
			static glMultMatrixxOES(arg1: java.nio.IntBuffer): void;
			static glMultMatrixxOES(arg1: native.Array<number>, arg2: number): void;
			static glGetMaterialxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetMaterialxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glLightModelxvOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glLightModelxvOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glPolygonOffsetxOES(arg1: number, arg2: number): void;
			static glMultiTexCoord4xOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			static glPointSizexOES(arg1: number): void;
			static glTexParameterxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glTexParameterxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetLightxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetLightxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glLineWidthxOES(arg1: number): void;
			static glGetTexEnvxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetTexEnvxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glMaterialxOES(arg1: number, arg2: number, arg3: number): void;
			static glPointParameterxOES(arg1: number, arg2: number): void;
			static glTexParameterxOES(arg1: number, arg2: number, arg3: number): void;
			static glLightModelxOES(arg1: number, arg2: number): void;
			static glClearDepthxOES(arg1: number): void;
			static glBindRenderbufferOES(arg1: number, arg2: number): void;
			static glGenRenderbuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGenRenderbuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glClipPlanexOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glClipPlanexOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDepthRangexOES(arg1: number, arg2: number): void;
			static glGetFixedvOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGetFixedvOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glMaterialxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glMaterialxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGenFramebuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGenFramebuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGenerateMipmapOES(arg1: number): void;
			static glTranslatexOES(arg1: number, arg2: number, arg3: number): void;
			static glPointParameterxvOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glPointParameterxvOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glIsFramebufferOES(arg1: number): boolean;
			static glGetClipPlanexOES(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetClipPlanexOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glSampleCoveragexOES(arg1: number, arg2: boolean): void;
			static glIsRenderbufferOES(arg1: number): boolean;
			static glGetTexGenivOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetTexGenivOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetTexGenfvOES(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glGetTexGenfvOES(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glGetClipPlanefOES(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glGetClipPlanefOES(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glClearDepthfOES(arg1: native.Float): void;
			static glDepthRangefOES(arg1: native.Float, arg2: native.Float): void;
			static glClipPlanefOES(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glClipPlanefOES(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glGetTexGenxvOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetTexGenxvOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glWeightPointerOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
		}
		export class GLU extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.opengl.GLU>;
			static gluProject(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Array<native.Float>, arg5: number, arg6: native.Array<native.Float>, arg7: number, arg8: native.Array<number>, arg9: number, arg10: native.Array<native.Float>, arg11: number): number;
			static gluUnProject(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Array<native.Float>, arg5: number, arg6: native.Array<native.Float>, arg7: number, arg8: native.Array<number>, arg9: number, arg10: native.Array<native.Float>, arg11: number): number;
			static gluOrtho2D(arg1: javax.microedition.khronos.opengles.IGL10, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static gluLookAt(arg1: javax.microedition.khronos.opengles.IGL10, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float, arg7: native.Float, arg8: native.Float, arg9: native.Float, arg10: native.Float): void;
			static gluPerspective(arg1: javax.microedition.khronos.opengles.IGL10, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static gluErrorString(arg1: number): string;
		}
		export class Matrix extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.opengl.Matrix>;
			static setRotateEulerM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static multiplyMV(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: native.Array<native.Float>, arg6: number): void;
			static orthoM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float, arg7: native.Float, arg8: native.Float): void;
			static transposeM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static multiplyMM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: native.Array<native.Float>, arg6: number): void;
			static invertM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number): boolean;
			static frustumM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float, arg7: native.Float, arg8: native.Float): void;
			static perspectiveM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			static setRotateM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			static scaleM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: native.Float, arg6: native.Float, arg7: native.Float): void;
			static scaleM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static rotateM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: native.Float, arg6: native.Float, arg7: native.Float, arg8: native.Float): void;
			static rotateM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			static translateM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: native.Float, arg6: native.Float, arg7: native.Float): void;
			static translateM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static setLookAtM(arg1: native.Array<native.Float>, arg2: number, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float, arg7: native.Float, arg8: native.Float, arg9: native.Float, arg10: native.Float, arg11: native.Float): void;
			static setIdentityM(arg1: native.Array<native.Float>, arg2: number): void;
			static length(arg1: native.Float, arg2: native.Float, arg3: native.Float): number;
		}
		export class EGLObjectHandle extends java.lang.Object {
			static class: java.lang.Class<android.opengl.EGLObjectHandle>;
			getHandle(): number;
			hashCode(): number;
		}
		export class GLDebugHelper extends java.lang.Object {
			constructor();
			static CONFIG_CHECK_GL_ERROR: number;
			static CONFIG_CHECK_THREAD: number;
			static CONFIG_LOG_ARGUMENT_NAMES: number;
			static ERROR_WRONG_THREAD: number;
			static class: java.lang.Class<android.opengl.GLDebugHelper>;
			static wrap(arg1: javax.microedition.khronos.opengles.IGL, arg2: number, arg3: java.io.Writer): javax.microedition.khronos.opengles.IGL;
			static wrap(arg1: javax.microedition.khronos.egl.IEGL, arg2: number, arg3: java.io.Writer): javax.microedition.khronos.egl.IEGL;
		}
		export class GLES10Ext extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.opengl.GLES10Ext>;
			static glQueryMatrixxOES(arg1: native.Array<number>, arg2: number, arg3: native.Array<number>, arg4: number): number;
			static glQueryMatrixxOES(arg1: java.nio.IntBuffer, arg2: java.nio.IntBuffer): number;
		}
		export class GLSurfaceView extends android.view.SurfaceView implements android.view.SurfaceHolder.ICallback {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static RENDERMODE_WHEN_DIRTY: number;
			static RENDERMODE_CONTINUOUSLY: number;
			static DEBUG_CHECK_GL_ERROR: number;
			static DEBUG_LOG_GL_CALLS: number;
			static class: java.lang.Class<android.opengl.GLSurfaceView>;
			DebugFlags: number;
			PreserveEGLContextOnPause: boolean;
			RenderMode: number;
			setEGLContextFactory(arg1: android.opengl.GLSurfaceView.IEGLContextFactory): void;
			setEGLConfigChooser(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
			setEGLConfigChooser(arg1: android.opengl.GLSurfaceView.IEGLConfigChooser): void;
			setEGLConfigChooser(arg1: boolean): void;
			surfaceCreated(arg1: android.view.ISurfaceHolder): void;
			surfaceChanged(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number, arg4: number): void;
			surfaceDestroyed(arg1: android.view.ISurfaceHolder): void;
			setEGLContextClientVersion(arg1: number): void;
			getPreserveEGLContextOnPause(): boolean;
			setPreserveEGLContextOnPause(arg1: boolean): void;
			setEGLWindowSurfaceFactory(arg1: android.opengl.GLSurfaceView.IEGLWindowSurfaceFactory): void;
			getDebugFlags(): number;
			setDebugFlags(arg1: number): void;
			setGLWrapper(arg1: android.opengl.GLSurfaceView.IGLWrapper): void;
			getRenderMode(): number;
			onResume(): void;
			onPause(): void;
			queueEvent(arg1: java.lang.IRunnable): void;
			requestRender(): void;
			setRenderMode(arg1: number): void;
			setRenderer(arg1: android.opengl.GLSurfaceView.IRenderer): void;
		}
		export module GLSurfaceView {
			export class Renderer implements android.opengl.GLSurfaceView.IRenderer {
				constructor(implementation: android.opengl.GLSurfaceView.IRenderer);
				onDrawFrame(arg1: javax.microedition.khronos.opengles.IGL10): void;
				onSurfaceCreated(arg1: javax.microedition.khronos.opengles.IGL10, arg2: javax.microedition.khronos.egl.EGLConfig): void;
				onSurfaceChanged(arg1: javax.microedition.khronos.opengles.IGL10, arg2: number, arg3: number): void;
			}
			export class EGLContextFactory implements android.opengl.GLSurfaceView.IEGLContextFactory {
				constructor(implementation: android.opengl.GLSurfaceView.IEGLContextFactory);
				destroyContext(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay, arg3: javax.microedition.khronos.egl.EGLContext): void;
				createContext(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay, arg3: javax.microedition.khronos.egl.EGLConfig): javax.microedition.khronos.egl.EGLContext;
			}
			export class EGLConfigChooser implements android.opengl.GLSurfaceView.IEGLConfigChooser {
				constructor(implementation: android.opengl.GLSurfaceView.IEGLConfigChooser);
				chooseConfig(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay): javax.microedition.khronos.egl.EGLConfig;
			}
			export class GLWrapper implements android.opengl.GLSurfaceView.IGLWrapper {
				constructor(implementation: android.opengl.GLSurfaceView.IGLWrapper);
				wrap(arg1: javax.microedition.khronos.opengles.IGL): javax.microedition.khronos.opengles.IGL;
			}
			export class EGLWindowSurfaceFactory implements android.opengl.GLSurfaceView.IEGLWindowSurfaceFactory {
				constructor(implementation: android.opengl.GLSurfaceView.IEGLWindowSurfaceFactory);
				destroySurface(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay, arg3: javax.microedition.khronos.egl.EGLSurface): void;
				createWindowSurface(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay, arg3: javax.microedition.khronos.egl.EGLConfig, arg4: any): javax.microedition.khronos.egl.EGLSurface;
			}
			export interface IRenderer {
				onDrawFrame(arg1: javax.microedition.khronos.opengles.IGL10): void;
				onSurfaceCreated(arg1: javax.microedition.khronos.opengles.IGL10, arg2: javax.microedition.khronos.egl.EGLConfig): void;
				onSurfaceChanged(arg1: javax.microedition.khronos.opengles.IGL10, arg2: number, arg3: number): void;
			}
			export interface IGLWrapper {
				wrap(arg1: javax.microedition.khronos.opengles.IGL): javax.microedition.khronos.opengles.IGL;
			}
			export interface IEGLContextFactory {
				destroyContext(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay, arg3: javax.microedition.khronos.egl.EGLContext): void;
				createContext(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay, arg3: javax.microedition.khronos.egl.EGLConfig): javax.microedition.khronos.egl.EGLContext;
			}
			export interface IEGLConfigChooser {
				chooseConfig(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay): javax.microedition.khronos.egl.EGLConfig;
			}
			export interface IEGLWindowSurfaceFactory {
				destroySurface(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay, arg3: javax.microedition.khronos.egl.EGLSurface): void;
				createWindowSurface(arg1: javax.microedition.khronos.egl.IEGL10, arg2: javax.microedition.khronos.egl.EGLDisplay, arg3: javax.microedition.khronos.egl.EGLConfig, arg4: any): javax.microedition.khronos.egl.EGLSurface;
			}
		}
		export class GLES20 extends java.lang.Object {
			constructor();
			static GL_ACTIVE_TEXTURE: number;
			static GL_DEPTH_BUFFER_BIT: number;
			static GL_STENCIL_BUFFER_BIT: number;
			static GL_COLOR_BUFFER_BIT: number;
			static GL_FALSE: number;
			static GL_TRUE: number;
			static GL_POINTS: number;
			static GL_LINES: number;
			static GL_LINE_LOOP: number;
			static GL_LINE_STRIP: number;
			static GL_TRIANGLES: number;
			static GL_TRIANGLE_STRIP: number;
			static GL_TRIANGLE_FAN: number;
			static GL_ZERO: number;
			static GL_ONE: number;
			static GL_SRC_COLOR: number;
			static GL_ONE_MINUS_SRC_COLOR: number;
			static GL_SRC_ALPHA: number;
			static GL_ONE_MINUS_SRC_ALPHA: number;
			static GL_DST_ALPHA: number;
			static GL_ONE_MINUS_DST_ALPHA: number;
			static GL_DST_COLOR: number;
			static GL_ONE_MINUS_DST_COLOR: number;
			static GL_SRC_ALPHA_SATURATE: number;
			static GL_FUNC_ADD: number;
			static GL_BLEND_EQUATION: number;
			static GL_BLEND_EQUATION_RGB: number;
			static GL_BLEND_EQUATION_ALPHA: number;
			static GL_FUNC_SUBTRACT: number;
			static GL_FUNC_REVERSE_SUBTRACT: number;
			static GL_BLEND_DST_RGB: number;
			static GL_BLEND_SRC_RGB: number;
			static GL_BLEND_DST_ALPHA: number;
			static GL_BLEND_SRC_ALPHA: number;
			static GL_CONSTANT_COLOR: number;
			static GL_ONE_MINUS_CONSTANT_COLOR: number;
			static GL_CONSTANT_ALPHA: number;
			static GL_ONE_MINUS_CONSTANT_ALPHA: number;
			static GL_BLEND_COLOR: number;
			static GL_ARRAY_BUFFER: number;
			static GL_ELEMENT_ARRAY_BUFFER: number;
			static GL_ARRAY_BUFFER_BINDING: number;
			static GL_ELEMENT_ARRAY_BUFFER_BINDING: number;
			static GL_STREAM_DRAW: number;
			static GL_STATIC_DRAW: number;
			static GL_DYNAMIC_DRAW: number;
			static GL_BUFFER_SIZE: number;
			static GL_BUFFER_USAGE: number;
			static GL_CURRENT_VERTEX_ATTRIB: number;
			static GL_FRONT: number;
			static GL_BACK: number;
			static GL_FRONT_AND_BACK: number;
			static GL_TEXTURE_2D: number;
			static GL_CULL_FACE: number;
			static GL_BLEND: number;
			static GL_DITHER: number;
			static GL_STENCIL_TEST: number;
			static GL_DEPTH_TEST: number;
			static GL_SCISSOR_TEST: number;
			static GL_POLYGON_OFFSET_FILL: number;
			static GL_SAMPLE_ALPHA_TO_COVERAGE: number;
			static GL_SAMPLE_COVERAGE: number;
			static GL_NO_ERROR: number;
			static GL_INVALID_ENUM: number;
			static GL_INVALID_VALUE: number;
			static GL_INVALID_OPERATION: number;
			static GL_OUT_OF_MEMORY: number;
			static GL_CW: number;
			static GL_CCW: number;
			static GL_LINE_WIDTH: number;
			static GL_ALIASED_POINT_SIZE_RANGE: number;
			static GL_ALIASED_LINE_WIDTH_RANGE: number;
			static GL_CULL_FACE_MODE: number;
			static GL_FRONT_FACE: number;
			static GL_DEPTH_RANGE: number;
			static GL_DEPTH_WRITEMASK: number;
			static GL_DEPTH_CLEAR_VALUE: number;
			static GL_DEPTH_FUNC: number;
			static GL_STENCIL_CLEAR_VALUE: number;
			static GL_STENCIL_FUNC: number;
			static GL_STENCIL_FAIL: number;
			static GL_STENCIL_PASS_DEPTH_FAIL: number;
			static GL_STENCIL_PASS_DEPTH_PASS: number;
			static GL_STENCIL_REF: number;
			static GL_STENCIL_VALUE_MASK: number;
			static GL_STENCIL_WRITEMASK: number;
			static GL_STENCIL_BACK_FUNC: number;
			static GL_STENCIL_BACK_FAIL: number;
			static GL_STENCIL_BACK_PASS_DEPTH_FAIL: number;
			static GL_STENCIL_BACK_PASS_DEPTH_PASS: number;
			static GL_STENCIL_BACK_REF: number;
			static GL_STENCIL_BACK_VALUE_MASK: number;
			static GL_STENCIL_BACK_WRITEMASK: number;
			static GL_VIEWPORT: number;
			static GL_SCISSOR_BOX: number;
			static GL_COLOR_CLEAR_VALUE: number;
			static GL_COLOR_WRITEMASK: number;
			static GL_UNPACK_ALIGNMENT: number;
			static GL_PACK_ALIGNMENT: number;
			static GL_MAX_TEXTURE_SIZE: number;
			static GL_MAX_VIEWPORT_DIMS: number;
			static GL_SUBPIXEL_BITS: number;
			static GL_RED_BITS: number;
			static GL_GREEN_BITS: number;
			static GL_BLUE_BITS: number;
			static GL_ALPHA_BITS: number;
			static GL_DEPTH_BITS: number;
			static GL_STENCIL_BITS: number;
			static GL_POLYGON_OFFSET_UNITS: number;
			static GL_POLYGON_OFFSET_FACTOR: number;
			static GL_TEXTURE_BINDING_2D: number;
			static GL_SAMPLE_BUFFERS: number;
			static GL_SAMPLES: number;
			static GL_SAMPLE_COVERAGE_VALUE: number;
			static GL_SAMPLE_COVERAGE_INVERT: number;
			static GL_NUM_COMPRESSED_TEXTURE_FORMATS: number;
			static GL_COMPRESSED_TEXTURE_FORMATS: number;
			static GL_DONT_CARE: number;
			static GL_FASTEST: number;
			static GL_NICEST: number;
			static GL_GENERATE_MIPMAP_HINT: number;
			static GL_BYTE: number;
			static GL_UNSIGNED_BYTE: number;
			static GL_SHORT: number;
			static GL_UNSIGNED_SHORT: number;
			static GL_INT: number;
			static GL_UNSIGNED_INT: number;
			static GL_FLOAT: number;
			static GL_FIXED: number;
			static GL_DEPTH_COMPONENT: number;
			static GL_ALPHA: number;
			static GL_RGB: number;
			static GL_RGBA: number;
			static GL_LUMINANCE: number;
			static GL_LUMINANCE_ALPHA: number;
			static GL_UNSIGNED_SHORT_4_4_4_4: number;
			static GL_UNSIGNED_SHORT_5_5_5_1: number;
			static GL_UNSIGNED_SHORT_5_6_5: number;
			static GL_FRAGMENT_SHADER: number;
			static GL_VERTEX_SHADER: number;
			static GL_MAX_VERTEX_ATTRIBS: number;
			static GL_MAX_VERTEX_UNIFORM_VECTORS: number;
			static GL_MAX_VARYING_VECTORS: number;
			static GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;
			static GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;
			static GL_MAX_TEXTURE_IMAGE_UNITS: number;
			static GL_MAX_FRAGMENT_UNIFORM_VECTORS: number;
			static GL_SHADER_TYPE: number;
			static GL_DELETE_STATUS: number;
			static GL_LINK_STATUS: number;
			static GL_VALIDATE_STATUS: number;
			static GL_ATTACHED_SHADERS: number;
			static GL_ACTIVE_UNIFORMS: number;
			static GL_ACTIVE_UNIFORM_MAX_LENGTH: number;
			static GL_ACTIVE_ATTRIBUTES: number;
			static GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: number;
			static GL_SHADING_LANGUAGE_VERSION: number;
			static GL_CURRENT_PROGRAM: number;
			static GL_NEVER: number;
			static GL_LESS: number;
			static GL_EQUAL: number;
			static GL_LEQUAL: number;
			static GL_GREATER: number;
			static GL_NOTEQUAL: number;
			static GL_GEQUAL: number;
			static GL_ALWAYS: number;
			static GL_KEEP: number;
			static GL_REPLACE: number;
			static GL_INCR: number;
			static GL_DECR: number;
			static GL_INVERT: number;
			static GL_INCR_WRAP: number;
			static GL_DECR_WRAP: number;
			static GL_VENDOR: number;
			static GL_RENDERER: number;
			static GL_VERSION: number;
			static GL_EXTENSIONS: number;
			static GL_NEAREST: number;
			static GL_LINEAR: number;
			static GL_NEAREST_MIPMAP_NEAREST: number;
			static GL_LINEAR_MIPMAP_NEAREST: number;
			static GL_NEAREST_MIPMAP_LINEAR: number;
			static GL_LINEAR_MIPMAP_LINEAR: number;
			static GL_TEXTURE_MAG_FILTER: number;
			static GL_TEXTURE_MIN_FILTER: number;
			static GL_TEXTURE_WRAP_S: number;
			static GL_TEXTURE_WRAP_T: number;
			static GL_TEXTURE: number;
			static GL_TEXTURE_CUBE_MAP: number;
			static GL_TEXTURE_BINDING_CUBE_MAP: number;
			static GL_TEXTURE_CUBE_MAP_POSITIVE_X: number;
			static GL_TEXTURE_CUBE_MAP_NEGATIVE_X: number;
			static GL_TEXTURE_CUBE_MAP_POSITIVE_Y: number;
			static GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: number;
			static GL_TEXTURE_CUBE_MAP_POSITIVE_Z: number;
			static GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: number;
			static GL_MAX_CUBE_MAP_TEXTURE_SIZE: number;
			static GL_TEXTURE0: number;
			static GL_TEXTURE1: number;
			static GL_TEXTURE2: number;
			static GL_TEXTURE3: number;
			static GL_TEXTURE4: number;
			static GL_TEXTURE5: number;
			static GL_TEXTURE6: number;
			static GL_TEXTURE7: number;
			static GL_TEXTURE8: number;
			static GL_TEXTURE9: number;
			static GL_TEXTURE10: number;
			static GL_TEXTURE11: number;
			static GL_TEXTURE12: number;
			static GL_TEXTURE13: number;
			static GL_TEXTURE14: number;
			static GL_TEXTURE15: number;
			static GL_TEXTURE16: number;
			static GL_TEXTURE17: number;
			static GL_TEXTURE18: number;
			static GL_TEXTURE19: number;
			static GL_TEXTURE20: number;
			static GL_TEXTURE21: number;
			static GL_TEXTURE22: number;
			static GL_TEXTURE23: number;
			static GL_TEXTURE24: number;
			static GL_TEXTURE25: number;
			static GL_TEXTURE26: number;
			static GL_TEXTURE27: number;
			static GL_TEXTURE28: number;
			static GL_TEXTURE29: number;
			static GL_TEXTURE30: number;
			static GL_TEXTURE31: number;
			static GL_REPEAT: number;
			static GL_CLAMP_TO_EDGE: number;
			static GL_MIRRORED_REPEAT: number;
			static GL_FLOAT_VEC2: number;
			static GL_FLOAT_VEC3: number;
			static GL_FLOAT_VEC4: number;
			static GL_INT_VEC2: number;
			static GL_INT_VEC3: number;
			static GL_INT_VEC4: number;
			static GL_BOOL: number;
			static GL_BOOL_VEC2: number;
			static GL_BOOL_VEC3: number;
			static GL_BOOL_VEC4: number;
			static GL_FLOAT_MAT2: number;
			static GL_FLOAT_MAT3: number;
			static GL_FLOAT_MAT4: number;
			static GL_SAMPLER_2D: number;
			static GL_SAMPLER_CUBE: number;
			static GL_VERTEX_ATTRIB_ARRAY_ENABLED: number;
			static GL_VERTEX_ATTRIB_ARRAY_SIZE: number;
			static GL_VERTEX_ATTRIB_ARRAY_STRIDE: number;
			static GL_VERTEX_ATTRIB_ARRAY_TYPE: number;
			static GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: number;
			static GL_VERTEX_ATTRIB_ARRAY_POINTER: number;
			static GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;
			static GL_IMPLEMENTATION_COLOR_READ_TYPE: number;
			static GL_IMPLEMENTATION_COLOR_READ_FORMAT: number;
			static GL_COMPILE_STATUS: number;
			static GL_INFO_LOG_LENGTH: number;
			static GL_SHADER_SOURCE_LENGTH: number;
			static GL_SHADER_COMPILER: number;
			static GL_SHADER_BINARY_FORMATS: number;
			static GL_NUM_SHADER_BINARY_FORMATS: number;
			static GL_LOW_FLOAT: number;
			static GL_MEDIUM_FLOAT: number;
			static GL_HIGH_FLOAT: number;
			static GL_LOW_INT: number;
			static GL_MEDIUM_INT: number;
			static GL_HIGH_INT: number;
			static GL_FRAMEBUFFER: number;
			static GL_RENDERBUFFER: number;
			static GL_RGBA4: number;
			static GL_RGB5_A1: number;
			static GL_RGB565: number;
			static GL_DEPTH_COMPONENT16: number;
			static GL_STENCIL_INDEX: number;
			static GL_STENCIL_INDEX8: number;
			static GL_RENDERBUFFER_WIDTH: number;
			static GL_RENDERBUFFER_HEIGHT: number;
			static GL_RENDERBUFFER_INTERNAL_FORMAT: number;
			static GL_RENDERBUFFER_RED_SIZE: number;
			static GL_RENDERBUFFER_GREEN_SIZE: number;
			static GL_RENDERBUFFER_BLUE_SIZE: number;
			static GL_RENDERBUFFER_ALPHA_SIZE: number;
			static GL_RENDERBUFFER_DEPTH_SIZE: number;
			static GL_RENDERBUFFER_STENCIL_SIZE: number;
			static GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;
			static GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;
			static GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;
			static GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;
			static GL_COLOR_ATTACHMENT0: number;
			static GL_DEPTH_ATTACHMENT: number;
			static GL_STENCIL_ATTACHMENT: number;
			static GL_NONE: number;
			static GL_FRAMEBUFFER_COMPLETE: number;
			static GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;
			static GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;
			static GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;
			static GL_FRAMEBUFFER_UNSUPPORTED: number;
			static GL_FRAMEBUFFER_BINDING: number;
			static GL_RENDERBUFFER_BINDING: number;
			static GL_MAX_RENDERBUFFER_SIZE: number;
			static GL_INVALID_FRAMEBUFFER_OPERATION: number;
			static class: java.lang.Class<android.opengl.GLES20>;
			static glFramebufferRenderbuffer(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glCheckFramebufferStatus(arg1: number): number;
			static glEnableVertexAttribArray(arg1: number): void;
			static glCompressedTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
			static glGetRenderbufferParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetRenderbufferParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glReleaseShaderCompiler(): void;
			static glFramebufferTexture2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			static glGetShaderPrecisionFormat(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number, arg5: native.Array<number>, arg6: number): void;
			static glGetShaderPrecisionFormat(arg1: number, arg2: number, arg3: java.nio.IntBuffer, arg4: java.nio.IntBuffer): void;
			static glCompressedTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.nio.Buffer): void;
			static glDisableVertexAttribArray(arg1: number): void;
			static glBlendEquationSeparate(arg1: number, arg2: number): void;
			static glGetBufferParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetBufferParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glUniform2f(arg1: number, arg2: native.Float, arg3: native.Float): void;
			static glStencilFunc(arg1: number, arg2: number, arg3: number): void;
			static glReadPixels(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: java.nio.Buffer): void;
			static glUniform1f(arg1: number, arg2: native.Float): void;
			static glUniform1i(arg1: number, arg2: number): void;
			static glTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
			static glUniform2iv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glUniform2iv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glUniform3f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static glLinkProgram(arg1: number): void;
			static glUniform2i(arg1: number, arg2: number, arg3: number): void;
			static glStencilOp(arg1: number, arg2: number, arg3: number): void;
			static glUniform2fv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glUniform2fv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glUniform1fv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glUniform1fv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glUniform3fv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glUniform3fv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glHint(arg1: number, arg2: number): void;
			static glIsShader(arg1: number): boolean;
			static glUniform3i(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glUniform3iv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glUniform3iv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glLineWidth(arg1: native.Float): void;
			static glScissor(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glUniform4f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static glIsProgram(arg1: number): boolean;
			static glUniform4fv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glUniform4fv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glUniform1iv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glUniform1iv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glIsEnabled(arg1: number): boolean;
			static glPixelStorei(arg1: number, arg2: number): void;
			static glIsTexture(arg1: number): boolean;
			static glIsBuffer(arg1: number): boolean;
			static glStencilMask(arg1: number): void;
			static glViewport(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glUseProgram(arg1: number): void;
			static glUniform4i(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			static glUniform4iv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glUniform4iv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glBindBuffer(arg1: number, arg2: number): void;
			static glColorMask(arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean): void;
			static glBlendFunc(arg1: number, arg2: number): void;
			static glEnable(arg1: number): void;
			static glBindTexture(arg1: number, arg2: number): void;
			static glClearColor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static glClearDepthf(arg1: native.Float): void;
			static glDepthMask(arg1: boolean): void;
			static glGetBooleanv(arg1: number, arg2: native.Array<boolean>, arg3: number): void;
			static glGetBooleanv(arg1: number, arg2: java.nio.IntBuffer): void;
			static glCullFace(arg1: number): void;
			static glDepthFunc(arg1: number): void;
			static glFrontFace(arg1: number): void;
			static glGenTextures(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGenTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glBlendColor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static glBufferData(arg1: number, arg2: number, arg3: java.nio.Buffer, arg4: number): void;
			static glClear(arg1: number): void;
			static glDepthRangef(arg1: native.Float, arg2: native.Float): void;
			static glFinish(): void;
			static glGetError(): number;
			static glGenBuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGenBuffers(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetIntegerv(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetIntegerv(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGetShaderiv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetShaderiv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glDisable(arg1: number): void;
			static glGetFloatv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glGetFloatv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glGetString(arg1: number): string;
			static glFlush(): void;
			static glDrawArrays(arg1: number, arg2: number, arg3: number): void;
			static glDetachShader(arg1: number, arg2: number): void;
			static glDrawElements(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glDrawElements(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glGenerateMipmap(arg1: number): void;
			static glActiveTexture(arg1: number): void;
			static glGenFramebuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGenFramebuffers(arg1: number, arg2: java.nio.IntBuffer): void;
			static glBindAttribLocation(arg1: number, arg2: number, arg3: java.lang.String): void;
			static glBindAttribLocation(arg1: number, arg2: number, arg3: string): void;
			static glBlendEquation(arg1: number): void;
			static glBindFramebuffer(arg1: number, arg2: number): void;
			static glBlendFuncSeparate(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glClearStencil(arg1: number): void;
			static glCompileShader(arg1: number): void;
			static glBufferSubData(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glCopyTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
			static glCopyTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
			static glCreateProgram(): number;
			static glDeleteFramebuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDeleteFramebuffers(arg1: number, arg2: java.nio.IntBuffer): void;
			static glDeleteProgram(arg1: number): void;
			static glCreateShader(arg1: number): number;
			static glBindRenderbuffer(arg1: number, arg2: number): void;
			static glDeleteRenderbuffers(arg1: number, arg2: java.nio.IntBuffer): void;
			static glDeleteRenderbuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDeleteShader(arg1: number): void;
			static glAttachShader(arg1: number, arg2: number): void;
			static glDeleteTextures(arg1: number, arg2: java.nio.IntBuffer): void;
			static glDeleteTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDeleteBuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDeleteBuffers(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetAttribLocation(arg1: number, arg2: java.lang.String): number;
			static glGetAttribLocation(arg1: number, arg2: string): number;
			static glTexParameterfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glTexParameteri(arg1: number, arg2: number, arg3: number): void;
			static glTexParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glTexParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
			static glGetProgramiv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetProgramiv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glSampleCoverage(arg1: native.Float, arg2: boolean): void;
			static glGenRenderbuffers(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGenRenderbuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glStencilFuncSeparate(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glGetShaderInfoLog(arg1: number): string;
			static glGetShaderSource(arg1: number): string;
			static glGetShaderSource(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number, arg5: native.Array<native.Byte>, arg6: number): void;
			static glGetShaderSource(arg1: number, arg2: number, arg3: java.nio.IntBuffer, arg4: native.Byte): void;
			static glGetTexParameterfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glGetTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glGetUniformiv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetUniformiv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetActiveUniform(arg1: number, arg2: number, arg3: number, arg4: java.nio.IntBuffer, arg5: java.nio.IntBuffer, arg6: java.nio.IntBuffer, arg7: native.Byte): void;
			static glGetActiveUniform(arg1: number, arg2: number, arg3: number, arg4: native.Array<number>, arg5: number, arg6: native.Array<number>, arg7: number, arg8: native.Array<number>, arg9: number, arg10: native.Array<native.Byte>, arg11: number): void;
			static glGetActiveUniform(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number, arg5: native.Array<number>, arg6: number): string;
			static glGetActiveUniform(arg1: number, arg2: number, arg3: java.nio.IntBuffer, arg4: java.nio.IntBuffer): string;
			static glPolygonOffset(arg1: native.Float, arg2: native.Float): void;
			static glShaderBinary(arg1: number, arg2: native.Array<number>, arg3: number, arg4: number, arg5: java.nio.Buffer, arg6: number): void;
			static glShaderBinary(arg1: number, arg2: java.nio.IntBuffer, arg3: number, arg4: java.nio.Buffer, arg5: number): void;
			static glGetVertexAttribfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glGetVertexAttribfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glRenderbufferStorage(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glTexParameterf(arg1: number, arg2: number, arg3: native.Float): void;
			static glGetVertexAttribiv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetVertexAttribiv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glIsFramebuffer(arg1: number): boolean;
			static glShaderSource(arg1: number, arg2: java.lang.String): void;
			static glShaderSource(arg1: number, arg2: string): void;
			static glStencilMaskSeparate(arg1: number, arg2: number): void;
			static glGetUniformLocation(arg1: number, arg2: java.lang.String): number;
			static glGetUniformLocation(arg1: number, arg2: string): number;
			static glGetTexParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetTexParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetActiveAttrib(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number, arg5: native.Array<number>, arg6: number): string;
			static glGetActiveAttrib(arg1: number, arg2: number, arg3: java.nio.IntBuffer, arg4: java.nio.IntBuffer): string;
			static glGetActiveAttrib(arg1: number, arg2: number, arg3: number, arg4: native.Array<number>, arg5: number, arg6: native.Array<number>, arg7: number, arg8: native.Array<number>, arg9: number, arg10: native.Array<native.Byte>, arg11: number): void;
			static glGetActiveAttrib(arg1: number, arg2: number, arg3: number, arg4: java.nio.IntBuffer, arg5: java.nio.IntBuffer, arg6: java.nio.IntBuffer, arg7: native.Byte): void;
			static glGetUniformfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glGetUniformfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glGetProgramInfoLog(arg1: number): string;
			static glIsRenderbuffer(arg1: number): boolean;
			static glGetAttachedShaders(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number, arg5: native.Array<number>, arg6: number): void;
			static glGetAttachedShaders(arg1: number, arg2: number, arg3: java.nio.IntBuffer, arg4: java.nio.IntBuffer): void;
			static glStencilOpSeparate(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glVertexAttrib3f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static glVertexAttrib1fv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glVertexAttrib1fv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glVertexAttrib4fv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glVertexAttrib4fv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glValidateProgram(arg1: number): void;
			static glVertexAttribPointer(arg1: number, arg2: number, arg3: number, arg4: boolean, arg5: number, arg6: number): void;
			static glVertexAttribPointer(arg1: number, arg2: number, arg3: number, arg4: boolean, arg5: number, arg6: java.nio.Buffer): void;
			static glVertexAttrib1f(arg1: number, arg2: native.Float): void;
			static glVertexAttrib3fv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glVertexAttrib3fv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glUniformMatrix4fv(arg1: number, arg2: number, arg3: boolean, arg4: java.nio.FloatBuffer): void;
			static glUniformMatrix4fv(arg1: number, arg2: number, arg3: boolean, arg4: native.Array<native.Float>, arg5: number): void;
			static glVertexAttrib2fv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glVertexAttrib2fv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glVertexAttrib4f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static glUniformMatrix2fv(arg1: number, arg2: number, arg3: boolean, arg4: java.nio.FloatBuffer): void;
			static glUniformMatrix2fv(arg1: number, arg2: number, arg3: boolean, arg4: native.Array<native.Float>, arg5: number): void;
			static glVertexAttrib2f(arg1: number, arg2: native.Float, arg3: native.Float): void;
			static glUniformMatrix3fv(arg1: number, arg2: number, arg3: boolean, arg4: java.nio.FloatBuffer): void;
			static glUniformMatrix3fv(arg1: number, arg2: number, arg3: boolean, arg4: native.Array<native.Float>, arg5: number): void;
			static glGetFramebufferAttachmentParameteriv(arg1: number, arg2: number, arg3: number, arg4: java.nio.IntBuffer): void;
			static glGetFramebufferAttachmentParameteriv(arg1: number, arg2: number, arg3: number, arg4: native.Array<number>, arg5: number): void;
		}
		export class Visibility extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.opengl.Visibility>;
			static frustumCullSpheres(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: number, arg6: native.Array<number>, arg7: number, arg8: number): number;
			static computeBoundingSphere(arg1: native.Array<native.Float>, arg2: number, arg3: number, arg4: native.Array<native.Float>, arg5: number): void;
			static visibilityTest(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: native.Array<string>, arg6: number, arg7: number): number;
		}
		export class EGLDisplay extends android.opengl.EGLObjectHandle {
			static class: java.lang.Class<android.opengl.EGLDisplay>;
			equals(arg1: any): boolean;
		}
		export class EGLContext extends android.opengl.EGLObjectHandle {
			static class: java.lang.Class<android.opengl.EGLContext>;
			equals(arg1: any): boolean;
		}
		export class GLES10 extends java.lang.Object {
			constructor();
			static GL_ADD: number;
			static GL_ALIASED_LINE_WIDTH_RANGE: number;
			static GL_ALIASED_POINT_SIZE_RANGE: number;
			static GL_ALPHA: number;
			static GL_ALPHA_BITS: number;
			static GL_ALPHA_TEST: number;
			static GL_ALWAYS: number;
			static GL_AMBIENT: number;
			static GL_AMBIENT_AND_DIFFUSE: number;
			static GL_AND: number;
			static GL_AND_INVERTED: number;
			static GL_AND_REVERSE: number;
			static GL_BACK: number;
			static GL_BLEND: number;
			static GL_BLUE_BITS: number;
			static GL_BYTE: number;
			static GL_CCW: number;
			static GL_CLAMP_TO_EDGE: number;
			static GL_CLEAR: number;
			static GL_COLOR_ARRAY: number;
			static GL_COLOR_BUFFER_BIT: number;
			static GL_COLOR_LOGIC_OP: number;
			static GL_COLOR_MATERIAL: number;
			static GL_COMPRESSED_TEXTURE_FORMATS: number;
			static GL_CONSTANT_ATTENUATION: number;
			static GL_COPY: number;
			static GL_COPY_INVERTED: number;
			static GL_CULL_FACE: number;
			static GL_CW: number;
			static GL_DECAL: number;
			static GL_DECR: number;
			static GL_DEPTH_BITS: number;
			static GL_DEPTH_BUFFER_BIT: number;
			static GL_DEPTH_TEST: number;
			static GL_DIFFUSE: number;
			static GL_DITHER: number;
			static GL_DONT_CARE: number;
			static GL_DST_ALPHA: number;
			static GL_DST_COLOR: number;
			static GL_EMISSION: number;
			static GL_EQUAL: number;
			static GL_EQUIV: number;
			static GL_EXP: number;
			static GL_EXP2: number;
			static GL_EXTENSIONS: number;
			static GL_FALSE: number;
			static GL_FASTEST: number;
			static GL_FIXED: number;
			static GL_FLAT: number;
			static GL_FLOAT: number;
			static GL_FOG: number;
			static GL_FOG_COLOR: number;
			static GL_FOG_DENSITY: number;
			static GL_FOG_END: number;
			static GL_FOG_HINT: number;
			static GL_FOG_MODE: number;
			static GL_FOG_START: number;
			static GL_FRONT: number;
			static GL_FRONT_AND_BACK: number;
			static GL_GEQUAL: number;
			static GL_GREATER: number;
			static GL_GREEN_BITS: number;
			static GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES: number;
			static GL_IMPLEMENTATION_COLOR_READ_TYPE_OES: number;
			static GL_INCR: number;
			static GL_INVALID_ENUM: number;
			static GL_INVALID_OPERATION: number;
			static GL_INVALID_VALUE: number;
			static GL_INVERT: number;
			static GL_KEEP: number;
			static GL_LEQUAL: number;
			static GL_LESS: number;
			static GL_LIGHT_MODEL_AMBIENT: number;
			static GL_LIGHT_MODEL_TWO_SIDE: number;
			static GL_LIGHT0: number;
			static GL_LIGHT1: number;
			static GL_LIGHT2: number;
			static GL_LIGHT3: number;
			static GL_LIGHT4: number;
			static GL_LIGHT5: number;
			static GL_LIGHT6: number;
			static GL_LIGHT7: number;
			static GL_LIGHTING: number;
			static GL_LINE_LOOP: number;
			static GL_LINE_SMOOTH: number;
			static GL_LINE_SMOOTH_HINT: number;
			static GL_LINE_STRIP: number;
			static GL_LINEAR: number;
			static GL_LINEAR_ATTENUATION: number;
			static GL_LINEAR_MIPMAP_LINEAR: number;
			static GL_LINEAR_MIPMAP_NEAREST: number;
			static GL_LINES: number;
			static GL_LUMINANCE: number;
			static GL_LUMINANCE_ALPHA: number;
			static GL_MAX_ELEMENTS_INDICES: number;
			static GL_MAX_ELEMENTS_VERTICES: number;
			static GL_MAX_LIGHTS: number;
			static GL_MAX_MODELVIEW_STACK_DEPTH: number;
			static GL_MAX_PROJECTION_STACK_DEPTH: number;
			static GL_MAX_TEXTURE_SIZE: number;
			static GL_MAX_TEXTURE_STACK_DEPTH: number;
			static GL_MAX_TEXTURE_UNITS: number;
			static GL_MAX_VIEWPORT_DIMS: number;
			static GL_MODELVIEW: number;
			static GL_MODULATE: number;
			static GL_MULTISAMPLE: number;
			static GL_NAND: number;
			static GL_NEAREST: number;
			static GL_NEAREST_MIPMAP_LINEAR: number;
			static GL_NEAREST_MIPMAP_NEAREST: number;
			static GL_NEVER: number;
			static GL_NICEST: number;
			static GL_NO_ERROR: number;
			static GL_NOOP: number;
			static GL_NOR: number;
			static GL_NORMAL_ARRAY: number;
			static GL_NORMALIZE: number;
			static GL_NOTEQUAL: number;
			static GL_NUM_COMPRESSED_TEXTURE_FORMATS: number;
			static GL_ONE: number;
			static GL_ONE_MINUS_DST_ALPHA: number;
			static GL_ONE_MINUS_DST_COLOR: number;
			static GL_ONE_MINUS_SRC_ALPHA: number;
			static GL_ONE_MINUS_SRC_COLOR: number;
			static GL_OR: number;
			static GL_OR_INVERTED: number;
			static GL_OR_REVERSE: number;
			static GL_OUT_OF_MEMORY: number;
			static GL_PACK_ALIGNMENT: number;
			static GL_PALETTE4_R5_G6_B5_OES: number;
			static GL_PALETTE4_RGB5_A1_OES: number;
			static GL_PALETTE4_RGB8_OES: number;
			static GL_PALETTE4_RGBA4_OES: number;
			static GL_PALETTE4_RGBA8_OES: number;
			static GL_PALETTE8_R5_G6_B5_OES: number;
			static GL_PALETTE8_RGB5_A1_OES: number;
			static GL_PALETTE8_RGB8_OES: number;
			static GL_PALETTE8_RGBA4_OES: number;
			static GL_PALETTE8_RGBA8_OES: number;
			static GL_PERSPECTIVE_CORRECTION_HINT: number;
			static GL_POINT_SMOOTH: number;
			static GL_POINT_SMOOTH_HINT: number;
			static GL_POINTS: number;
			static GL_POINT_FADE_THRESHOLD_SIZE: number;
			static GL_POINT_SIZE: number;
			static GL_POLYGON_OFFSET_FILL: number;
			static GL_POLYGON_SMOOTH_HINT: number;
			static GL_POSITION: number;
			static GL_PROJECTION: number;
			static GL_QUADRATIC_ATTENUATION: number;
			static GL_RED_BITS: number;
			static GL_RENDERER: number;
			static GL_REPEAT: number;
			static GL_REPLACE: number;
			static GL_RESCALE_NORMAL: number;
			static GL_RGB: number;
			static GL_RGBA: number;
			static GL_SAMPLE_ALPHA_TO_COVERAGE: number;
			static GL_SAMPLE_ALPHA_TO_ONE: number;
			static GL_SAMPLE_COVERAGE: number;
			static GL_SCISSOR_TEST: number;
			static GL_SET: number;
			static GL_SHININESS: number;
			static GL_SHORT: number;
			static GL_SMOOTH: number;
			static GL_SMOOTH_LINE_WIDTH_RANGE: number;
			static GL_SMOOTH_POINT_SIZE_RANGE: number;
			static GL_SPECULAR: number;
			static GL_SPOT_CUTOFF: number;
			static GL_SPOT_DIRECTION: number;
			static GL_SPOT_EXPONENT: number;
			static GL_SRC_ALPHA: number;
			static GL_SRC_ALPHA_SATURATE: number;
			static GL_SRC_COLOR: number;
			static GL_STACK_OVERFLOW: number;
			static GL_STACK_UNDERFLOW: number;
			static GL_STENCIL_BITS: number;
			static GL_STENCIL_BUFFER_BIT: number;
			static GL_STENCIL_TEST: number;
			static GL_SUBPIXEL_BITS: number;
			static GL_TEXTURE: number;
			static GL_TEXTURE_2D: number;
			static GL_TEXTURE_COORD_ARRAY: number;
			static GL_TEXTURE_ENV: number;
			static GL_TEXTURE_ENV_COLOR: number;
			static GL_TEXTURE_ENV_MODE: number;
			static GL_TEXTURE_MAG_FILTER: number;
			static GL_TEXTURE_MIN_FILTER: number;
			static GL_TEXTURE_WRAP_S: number;
			static GL_TEXTURE_WRAP_T: number;
			static GL_TEXTURE0: number;
			static GL_TEXTURE1: number;
			static GL_TEXTURE2: number;
			static GL_TEXTURE3: number;
			static GL_TEXTURE4: number;
			static GL_TEXTURE5: number;
			static GL_TEXTURE6: number;
			static GL_TEXTURE7: number;
			static GL_TEXTURE8: number;
			static GL_TEXTURE9: number;
			static GL_TEXTURE10: number;
			static GL_TEXTURE11: number;
			static GL_TEXTURE12: number;
			static GL_TEXTURE13: number;
			static GL_TEXTURE14: number;
			static GL_TEXTURE15: number;
			static GL_TEXTURE16: number;
			static GL_TEXTURE17: number;
			static GL_TEXTURE18: number;
			static GL_TEXTURE19: number;
			static GL_TEXTURE20: number;
			static GL_TEXTURE21: number;
			static GL_TEXTURE22: number;
			static GL_TEXTURE23: number;
			static GL_TEXTURE24: number;
			static GL_TEXTURE25: number;
			static GL_TEXTURE26: number;
			static GL_TEXTURE27: number;
			static GL_TEXTURE28: number;
			static GL_TEXTURE29: number;
			static GL_TEXTURE30: number;
			static GL_TEXTURE31: number;
			static GL_TRIANGLE_FAN: number;
			static GL_TRIANGLE_STRIP: number;
			static GL_TRIANGLES: number;
			static GL_TRUE: number;
			static GL_UNPACK_ALIGNMENT: number;
			static GL_UNSIGNED_BYTE: number;
			static GL_UNSIGNED_SHORT: number;
			static GL_UNSIGNED_SHORT_4_4_4_4: number;
			static GL_UNSIGNED_SHORT_5_5_5_1: number;
			static GL_UNSIGNED_SHORT_5_6_5: number;
			static GL_VENDOR: number;
			static GL_VERSION: number;
			static GL_VERTEX_ARRAY: number;
			static GL_XOR: number;
			static GL_ZERO: number;
			static class: java.lang.Class<android.opengl.GLES10>;
			static glCompressedTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
			static glCompressedTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.nio.Buffer): void;
			static glStencilFunc(arg1: number, arg2: number, arg3: number): void;
			static glReadPixels(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: java.nio.Buffer): void;
			static glTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
			static glStencilOp(arg1: number, arg2: number, arg3: number): void;
			static glHint(arg1: number, arg2: number): void;
			static glLineWidth(arg1: native.Float): void;
			static glScissor(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glPixelStorei(arg1: number, arg2: number): void;
			static glStencilMask(arg1: number): void;
			static glViewport(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glColor4f(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static glAlphaFunc(arg1: number, arg2: native.Float): void;
			static glClearColorx(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glAlphaFuncx(arg1: number, arg2: number): void;
			static glClearDepthx(arg1: number): void;
			static glLoadMatrixx(arg1: native.Array<number>, arg2: number): void;
			static glLoadMatrixx(arg1: java.nio.IntBuffer): void;
			static glLogicOp(arg1: number): void;
			static glFrustumx(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
			static glLightModelx(arg1: number, arg2: number): void;
			static glDepthRangex(arg1: number, arg2: number): void;
			static glFogfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glFogfv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glMaterialfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glMaterialfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glLineWidthx(arg1: number): void;
			static glMaterialxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glMaterialxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glMultMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
			static glMultMatrixf(arg1: java.nio.FloatBuffer): void;
			static glMultMatrixx(arg1: native.Array<number>, arg2: number): void;
			static glMultMatrixx(arg1: java.nio.IntBuffer): void;
			static glFrustumf(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			static glLightx(arg1: number, arg2: number, arg3: number): void;
			static glLightModelf(arg1: number, arg2: native.Float): void;
			static glMaterialx(arg1: number, arg2: number, arg3: number): void;
			static glNormal3f(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			static glFogf(arg1: number, arg2: native.Float): void;
			static glNormal3x(arg1: number, arg2: number, arg3: number): void;
			static glOrthof(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			static glOrthox(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
			static glMaterialf(arg1: number, arg2: number, arg3: native.Float): void;
			static glFogxv(arg1: number, arg2: java.nio.IntBuffer): void;
			static glFogxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glLightfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glLightfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glPointSize(arg1: native.Float): void;
			static glPointSizex(arg1: number): void;
			static glPopMatrix(): void;
			static glMatrixMode(arg1: number): void;
			static glFogx(arg1: number, arg2: number): void;
			static glColor4x(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glLightf(arg1: number, arg2: number, arg3: native.Float): void;
			static glLightxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glLightxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glLoadMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
			static glLoadMatrixf(arg1: java.nio.FloatBuffer): void;
			static glTexEnvfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glTexEnvfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glTexEnvf(arg1: number, arg2: number, arg3: native.Float): void;
			static glTranslatef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			static glScalex(arg1: number, arg2: number, arg3: number): void;
			static glShadeModel(arg1: number): void;
			static glRotatex(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glTranslatex(arg1: number, arg2: number, arg3: number): void;
			static glRotatef(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static glPushMatrix(): void;
			static glTexEnvx(arg1: number, arg2: number, arg3: number): void;
			static glScalef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			static glColorMask(arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean): void;
			static glBlendFunc(arg1: number, arg2: number): void;
			static glEnable(arg1: number): void;
			static glBindTexture(arg1: number, arg2: number): void;
			static glClearColor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static glClearDepthf(arg1: native.Float): void;
			static glDepthMask(arg1: boolean): void;
			static glCullFace(arg1: number): void;
			static glDepthFunc(arg1: number): void;
			static glFrontFace(arg1: number): void;
			static glGenTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGenTextures(arg1: number, arg2: java.nio.IntBuffer): void;
			static glClear(arg1: number): void;
			static glDepthRangef(arg1: native.Float, arg2: native.Float): void;
			static glFinish(): void;
			static glGetError(): number;
			static glGetIntegerv(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetIntegerv(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDisable(arg1: number): void;
			static glGetString(arg1: number): string;
			static glFlush(): void;
			static glDrawArrays(arg1: number, arg2: number, arg3: number): void;
			static glTexParameterx(arg1: number, arg2: number, arg3: number): void;
			static glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glLoadIdentity(): void;
			static glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glSampleCoveragex(arg1: number, arg2: boolean): void;
			static glMultiTexCoord4x(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			static glMultiTexCoord4f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
			static glPolygonOffsetx(arg1: number, arg2: number): void;
			static glNormalPointer(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
			static glDrawElements(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glActiveTexture(arg1: number): void;
			static glClearStencil(arg1: number): void;
			static glCopyTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
			static glCopyTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
			static glDeleteTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDeleteTextures(arg1: number, arg2: java.nio.IntBuffer): void;
			static glTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
			static glSampleCoverage(arg1: native.Float, arg2: boolean): void;
			static glPolygonOffset(arg1: native.Float, arg2: native.Float): void;
			static glTexParameterf(arg1: number, arg2: number, arg3: native.Float): void;
			static glClientActiveTexture(arg1: number): void;
			static glColorPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glDisableClientState(arg1: number): void;
			static glEnableClientState(arg1: number): void;
			static glLightModelfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glLightModelfv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glLightModelxv(arg1: number, arg2: java.nio.IntBuffer): void;
			static glLightModelxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
		}
		export class EGL14 extends java.lang.Object {
			constructor();
			static EGL_DEFAULT_DISPLAY: number;
			static EGL_NO_CONTEXT: android.opengl.EGLContext;
			static EGL_NO_DISPLAY: android.opengl.EGLDisplay;
			static EGL_NO_SURFACE: android.opengl.EGLSurface;
			static EGL_FALSE: number;
			static EGL_TRUE: number;
			static EGL_SUCCESS: number;
			static EGL_NOT_INITIALIZED: number;
			static EGL_BAD_ACCESS: number;
			static EGL_BAD_ALLOC: number;
			static EGL_BAD_ATTRIBUTE: number;
			static EGL_BAD_CONFIG: number;
			static EGL_BAD_CONTEXT: number;
			static EGL_BAD_CURRENT_SURFACE: number;
			static EGL_BAD_DISPLAY: number;
			static EGL_BAD_MATCH: number;
			static EGL_BAD_NATIVE_PIXMAP: number;
			static EGL_BAD_NATIVE_WINDOW: number;
			static EGL_BAD_PARAMETER: number;
			static EGL_BAD_SURFACE: number;
			static EGL_CONTEXT_LOST: number;
			static EGL_BUFFER_SIZE: number;
			static EGL_ALPHA_SIZE: number;
			static EGL_BLUE_SIZE: number;
			static EGL_GREEN_SIZE: number;
			static EGL_RED_SIZE: number;
			static EGL_DEPTH_SIZE: number;
			static EGL_STENCIL_SIZE: number;
			static EGL_CONFIG_CAVEAT: number;
			static EGL_CONFIG_ID: number;
			static EGL_LEVEL: number;
			static EGL_MAX_PBUFFER_HEIGHT: number;
			static EGL_MAX_PBUFFER_PIXELS: number;
			static EGL_MAX_PBUFFER_WIDTH: number;
			static EGL_NATIVE_RENDERABLE: number;
			static EGL_NATIVE_VISUAL_ID: number;
			static EGL_NATIVE_VISUAL_TYPE: number;
			static EGL_SAMPLES: number;
			static EGL_SAMPLE_BUFFERS: number;
			static EGL_SURFACE_TYPE: number;
			static EGL_TRANSPARENT_TYPE: number;
			static EGL_TRANSPARENT_BLUE_VALUE: number;
			static EGL_TRANSPARENT_GREEN_VALUE: number;
			static EGL_TRANSPARENT_RED_VALUE: number;
			static EGL_NONE: number;
			static EGL_BIND_TO_TEXTURE_RGB: number;
			static EGL_BIND_TO_TEXTURE_RGBA: number;
			static EGL_MIN_SWAP_INTERVAL: number;
			static EGL_MAX_SWAP_INTERVAL: number;
			static EGL_LUMINANCE_SIZE: number;
			static EGL_ALPHA_MASK_SIZE: number;
			static EGL_COLOR_BUFFER_TYPE: number;
			static EGL_RENDERABLE_TYPE: number;
			static EGL_MATCH_NATIVE_PIXMAP: number;
			static EGL_CONFORMANT: number;
			static EGL_SLOW_CONFIG: number;
			static EGL_NON_CONFORMANT_CONFIG: number;
			static EGL_TRANSPARENT_RGB: number;
			static EGL_RGB_BUFFER: number;
			static EGL_LUMINANCE_BUFFER: number;
			static EGL_NO_TEXTURE: number;
			static EGL_TEXTURE_RGB: number;
			static EGL_TEXTURE_RGBA: number;
			static EGL_TEXTURE_2D: number;
			static EGL_PBUFFER_BIT: number;
			static EGL_PIXMAP_BIT: number;
			static EGL_WINDOW_BIT: number;
			static EGL_VG_COLORSPACE_LINEAR_BIT: number;
			static EGL_VG_ALPHA_FORMAT_PRE_BIT: number;
			static EGL_MULTISAMPLE_RESOLVE_BOX_BIT: number;
			static EGL_SWAP_BEHAVIOR_PRESERVED_BIT: number;
			static EGL_OPENGL_ES_BIT: number;
			static EGL_OPENVG_BIT: number;
			static EGL_OPENGL_ES2_BIT: number;
			static EGL_OPENGL_BIT: number;
			static EGL_VENDOR: number;
			static EGL_VERSION: number;
			static EGL_EXTENSIONS: number;
			static EGL_CLIENT_APIS: number;
			static EGL_HEIGHT: number;
			static EGL_WIDTH: number;
			static EGL_LARGEST_PBUFFER: number;
			static EGL_TEXTURE_FORMAT: number;
			static EGL_TEXTURE_TARGET: number;
			static EGL_MIPMAP_TEXTURE: number;
			static EGL_MIPMAP_LEVEL: number;
			static EGL_RENDER_BUFFER: number;
			static EGL_VG_COLORSPACE: number;
			static EGL_VG_ALPHA_FORMAT: number;
			static EGL_HORIZONTAL_RESOLUTION: number;
			static EGL_VERTICAL_RESOLUTION: number;
			static EGL_PIXEL_ASPECT_RATIO: number;
			static EGL_SWAP_BEHAVIOR: number;
			static EGL_MULTISAMPLE_RESOLVE: number;
			static EGL_BACK_BUFFER: number;
			static EGL_SINGLE_BUFFER: number;
			static EGL_VG_COLORSPACE_sRGB: number;
			static EGL_VG_COLORSPACE_LINEAR: number;
			static EGL_VG_ALPHA_FORMAT_NONPRE: number;
			static EGL_VG_ALPHA_FORMAT_PRE: number;
			static EGL_DISPLAY_SCALING: number;
			static EGL_BUFFER_PRESERVED: number;
			static EGL_BUFFER_DESTROYED: number;
			static EGL_OPENVG_IMAGE: number;
			static EGL_CONTEXT_CLIENT_TYPE: number;
			static EGL_CONTEXT_CLIENT_VERSION: number;
			static EGL_MULTISAMPLE_RESOLVE_DEFAULT: number;
			static EGL_MULTISAMPLE_RESOLVE_BOX: number;
			static EGL_OPENGL_ES_API: number;
			static EGL_OPENVG_API: number;
			static EGL_OPENGL_API: number;
			static EGL_DRAW: number;
			static EGL_READ: number;
			static EGL_CORE_NATIVE_ENGINE: number;
			static class: java.lang.Class<android.opengl.EGL14>;
			static eglQueryContext(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLContext, arg3: number, arg4: native.Array<number>, arg5: number): boolean;
			static eglSwapBuffers(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLSurface): boolean;
			static eglBindTexImage(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLSurface, arg3: number): boolean;
			static eglDestroySurface(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLSurface): boolean;
			static eglSurfaceAttrib(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLSurface, arg3: number, arg4: number): boolean;
			static eglReleaseTexImage(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLSurface, arg3: number): boolean;
			static eglReleaseThread(): boolean;
			static eglSwapInterval(arg1: android.opengl.EGLDisplay, arg2: number): boolean;
			static eglQuerySurface(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLSurface, arg3: number, arg4: native.Array<number>, arg5: number): boolean;
			static eglCreateContext(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLConfig, arg3: android.opengl.EGLContext, arg4: native.Array<number>, arg5: number): android.opengl.EGLContext;
			static eglQueryString(arg1: android.opengl.EGLDisplay, arg2: number): string;
			static eglDestroyContext(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLContext): boolean;
			static eglChooseConfig(arg1: android.opengl.EGLDisplay, arg2: native.Array<number>, arg3: number, arg4: native.Array<android.opengl.EGLConfig>, arg5: number, arg6: number, arg7: native.Array<number>, arg8: number): boolean;
			static eglGetConfigAttrib(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLConfig, arg3: number, arg4: native.Array<number>, arg5: number): boolean;
			static eglMakeCurrent(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLSurface, arg3: android.opengl.EGLSurface, arg4: android.opengl.EGLContext): boolean;
			static eglGetCurrentContext(): android.opengl.EGLContext;
			static eglGetCurrentSurface(arg1: number): android.opengl.EGLSurface;
			static eglGetCurrentDisplay(): android.opengl.EGLDisplay;
			static eglCopyBuffers(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLSurface, arg3: number): boolean;
			static eglCreatePbufferFromClientBuffer(arg1: android.opengl.EGLDisplay, arg2: number, arg3: number, arg4: android.opengl.EGLConfig, arg5: native.Array<number>, arg6: number): android.opengl.EGLSurface;
			static eglCreatePbufferSurface(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLConfig, arg3: native.Array<number>, arg4: number): android.opengl.EGLSurface;
			static eglCreateWindowSurface(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLConfig, arg3: any, arg4: native.Array<number>, arg5: number): android.opengl.EGLSurface;
			static eglCreatePixmapSurface(arg1: android.opengl.EGLDisplay, arg2: android.opengl.EGLConfig, arg3: number, arg4: native.Array<number>, arg5: number): android.opengl.EGLSurface;
			static eglInitialize(arg1: android.opengl.EGLDisplay, arg2: native.Array<number>, arg3: number, arg4: native.Array<number>, arg5: number): boolean;
			static eglWaitClient(): boolean;
			static eglGetDisplay(arg1: number): android.opengl.EGLDisplay;
			static eglGetError(): number;
			static eglWaitNative(arg1: number): boolean;
			static eglQueryAPI(): number;
			static eglGetConfigs(arg1: android.opengl.EGLDisplay, arg2: native.Array<android.opengl.EGLConfig>, arg3: number, arg4: number, arg5: native.Array<number>, arg6: number): boolean;
			static eglTerminate(arg1: android.opengl.EGLDisplay): boolean;
			static eglBindAPI(arg1: number): boolean;
			static eglWaitGL(): boolean;
		}
		export class EGLSurface extends android.opengl.EGLObjectHandle {
			static class: java.lang.Class<android.opengl.EGLSurface>;
			equals(arg1: any): boolean;
		}
		export class EGLConfig extends android.opengl.EGLObjectHandle {
			static class: java.lang.Class<android.opengl.EGLConfig>;
			equals(arg1: any): boolean;
		}
		export class GLES11 extends android.opengl.GLES10 {
			constructor();
			static GL_ACTIVE_TEXTURE: number;
			static GL_ADD_SIGNED: number;
			static GL_ALPHA_SCALE: number;
			static GL_ALPHA_TEST_FUNC: number;
			static GL_ALPHA_TEST_REF: number;
			static GL_ARRAY_BUFFER: number;
			static GL_ARRAY_BUFFER_BINDING: number;
			static GL_BLEND_DST: number;
			static GL_BLEND_SRC: number;
			static GL_BUFFER_ACCESS: number;
			static GL_BUFFER_SIZE: number;
			static GL_BUFFER_USAGE: number;
			static GL_CLIENT_ACTIVE_TEXTURE: number;
			static GL_CLIP_PLANE0: number;
			static GL_CLIP_PLANE1: number;
			static GL_CLIP_PLANE2: number;
			static GL_CLIP_PLANE3: number;
			static GL_CLIP_PLANE4: number;
			static GL_CLIP_PLANE5: number;
			static GL_COLOR_ARRAY_BUFFER_BINDING: number;
			static GL_COLOR_ARRAY_POINTER: number;
			static GL_COLOR_ARRAY_SIZE: number;
			static GL_COLOR_ARRAY_STRIDE: number;
			static GL_COLOR_ARRAY_TYPE: number;
			static GL_COLOR_CLEAR_VALUE: number;
			static GL_COLOR_WRITEMASK: number;
			static GL_COMBINE: number;
			static GL_COMBINE_ALPHA: number;
			static GL_COMBINE_RGB: number;
			static GL_CONSTANT: number;
			static GL_COORD_REPLACE_OES: number;
			static GL_CULL_FACE_MODE: number;
			static GL_CURRENT_COLOR: number;
			static GL_CURRENT_NORMAL: number;
			static GL_CURRENT_TEXTURE_COORDS: number;
			static GL_DEPTH_CLEAR_VALUE: number;
			static GL_DEPTH_FUNC: number;
			static GL_DEPTH_RANGE: number;
			static GL_DEPTH_WRITEMASK: number;
			static GL_DOT3_RGB: number;
			static GL_DOT3_RGBA: number;
			static GL_DYNAMIC_DRAW: number;
			static GL_ELEMENT_ARRAY_BUFFER: number;
			static GL_ELEMENT_ARRAY_BUFFER_BINDING: number;
			static GL_FRONT_FACE: number;
			static GL_GENERATE_MIPMAP: number;
			static GL_GENERATE_MIPMAP_HINT: number;
			static GL_INTERPOLATE: number;
			static GL_LINE_WIDTH: number;
			static GL_LOGIC_OP_MODE: number;
			static GL_MATRIX_MODE: number;
			static GL_MAX_CLIP_PLANES: number;
			static GL_MODELVIEW_MATRIX: number;
			static GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES: number;
			static GL_MODELVIEW_STACK_DEPTH: number;
			static GL_NORMAL_ARRAY_BUFFER_BINDING: number;
			static GL_NORMAL_ARRAY_POINTER: number;
			static GL_NORMAL_ARRAY_STRIDE: number;
			static GL_NORMAL_ARRAY_TYPE: number;
			static GL_OPERAND0_ALPHA: number;
			static GL_OPERAND0_RGB: number;
			static GL_OPERAND1_ALPHA: number;
			static GL_OPERAND1_RGB: number;
			static GL_OPERAND2_ALPHA: number;
			static GL_OPERAND2_RGB: number;
			static GL_POINT_DISTANCE_ATTENUATION: number;
			static GL_POINT_FADE_THRESHOLD_SIZE: number;
			static GL_POINT_SIZE: number;
			static GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES: number;
			static GL_POINT_SIZE_ARRAY_OES: number;
			static GL_POINT_SIZE_ARRAY_POINTER_OES: number;
			static GL_POINT_SIZE_ARRAY_STRIDE_OES: number;
			static GL_POINT_SIZE_ARRAY_TYPE_OES: number;
			static GL_POINT_SIZE_MAX: number;
			static GL_POINT_SIZE_MIN: number;
			static GL_POINT_SPRITE_OES: number;
			static GL_POLYGON_OFFSET_FACTOR: number;
			static GL_POLYGON_OFFSET_UNITS: number;
			static GL_PREVIOUS: number;
			static GL_PRIMARY_COLOR: number;
			static GL_PROJECTION_MATRIX: number;
			static GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES: number;
			static GL_PROJECTION_STACK_DEPTH: number;
			static GL_RGB_SCALE: number;
			static GL_SAMPLE_BUFFERS: number;
			static GL_SAMPLE_COVERAGE_INVERT: number;
			static GL_SAMPLE_COVERAGE_VALUE: number;
			static GL_SAMPLES: number;
			static GL_SCISSOR_BOX: number;
			static GL_SHADE_MODEL: number;
			static GL_SRC0_ALPHA: number;
			static GL_SRC0_RGB: number;
			static GL_SRC1_ALPHA: number;
			static GL_SRC1_RGB: number;
			static GL_SRC2_ALPHA: number;
			static GL_SRC2_RGB: number;
			static GL_STATIC_DRAW: number;
			static GL_STENCIL_CLEAR_VALUE: number;
			static GL_STENCIL_FAIL: number;
			static GL_STENCIL_FUNC: number;
			static GL_STENCIL_PASS_DEPTH_FAIL: number;
			static GL_STENCIL_PASS_DEPTH_PASS: number;
			static GL_STENCIL_REF: number;
			static GL_STENCIL_VALUE_MASK: number;
			static GL_STENCIL_WRITEMASK: number;
			static GL_SUBTRACT: number;
			static GL_TEXTURE_BINDING_2D: number;
			static GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING: number;
			static GL_TEXTURE_COORD_ARRAY_POINTER: number;
			static GL_TEXTURE_COORD_ARRAY_SIZE: number;
			static GL_TEXTURE_COORD_ARRAY_STRIDE: number;
			static GL_TEXTURE_COORD_ARRAY_TYPE: number;
			static GL_TEXTURE_MATRIX: number;
			static GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES: number;
			static GL_TEXTURE_STACK_DEPTH: number;
			static GL_VERTEX_ARRAY_BUFFER_BINDING: number;
			static GL_VERTEX_ARRAY_POINTER: number;
			static GL_VERTEX_ARRAY_SIZE: number;
			static GL_VERTEX_ARRAY_STRIDE: number;
			static GL_VERTEX_ARRAY_TYPE: number;
			static GL_VIEWPORT: number;
			static GL_WRITE_ONLY: number;
			static class: java.lang.Class<android.opengl.GLES11>;
			static glGetBufferParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetBufferParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glIsEnabled(arg1: number): boolean;
			static glIsTexture(arg1: number): boolean;
			static glIsBuffer(arg1: number): boolean;
			static glGetFixedv(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGetFixedv(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetLightxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetLightxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glColor4ub(arg1: native.Byte, arg2: native.Byte, arg3: native.Byte, arg4: native.Byte): void;
			static glClipPlanef(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glClipPlanef(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glTexEnviv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glTexEnviv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glTexEnvi(arg1: number, arg2: number, arg3: number): void;
			static glGetLightfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glGetLightfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glGetTexEnvfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glGetTexEnvfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glClipPlanex(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glClipPlanex(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetTexEnviv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetTexEnviv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glBindBuffer(arg1: number, arg2: number): void;
			static glGetBooleanv(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetBooleanv(arg1: number, arg2: native.Array<boolean>, arg3: number): void;
			static glBufferData(arg1: number, arg2: number, arg3: java.nio.Buffer, arg4: number): void;
			static glGenBuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGenBuffers(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetFloatv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glGetFloatv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glNormalPointer(arg1: number, arg2: number, arg3: number): void;
			static glGetClipPlanef(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glGetClipPlanef(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glGetClipPlanex(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glGetClipPlanex(arg1: number, arg2: java.nio.IntBuffer): void;
			static glGetMaterialfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glGetMaterialfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glGetMaterialxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetMaterialxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glGetTexParameterxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetTexParameterxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glPointParameterf(arg1: number, arg2: native.Float): void;
			static glPointParameterfv(arg1: number, arg2: java.nio.FloatBuffer): void;
			static glPointParameterfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
			static glPointParameterx(arg1: number, arg2: number): void;
			static glTexParameterxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glTexParameterxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glPointParameterxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glPointParameterxv(arg1: number, arg2: java.nio.IntBuffer): void;
			static glPointSizePointerOES(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
			static glDrawElements(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glBufferSubData(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glDeleteBuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
			static glDeleteBuffers(arg1: number, arg2: java.nio.IntBuffer): void;
			static glTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glTexParameterfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glTexParameteri(arg1: number, arg2: number, arg3: number): void;
			static glTexParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glTexParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
			static glGetTexParameterfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
			static glGetTexParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
			static glGetTexParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
			static glColorPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
			static glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glNormalPointer(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
			static glDrawElements(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
			static glColorPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
		}
		export class GLException extends java.lang.RuntimeException {
			constructor(arg1: number);
			constructor(arg1: number, arg2: java.lang.String);
			constructor(arg1: number, arg2: string);
			static class: java.lang.Class<android.opengl.GLException>;
		}
	}
	export module drm {
		export class DrmStore extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.drm.DrmStore>;
		}
		export module DrmStore {
			export class Action extends java.lang.Object {
				constructor();
				static DEFAULT: number;
				static PLAY: number;
				static RINGTONE: number;
				static TRANSFER: number;
				static OUTPUT: number;
				static PREVIEW: number;
				static EXECUTE: number;
				static DISPLAY: number;
				static class: java.lang.Class<android.drm.DrmStore.Action>;
			}
			export class RightsStatus extends java.lang.Object {
				constructor();
				static RIGHTS_VALID: number;
				static RIGHTS_INVALID: number;
				static RIGHTS_EXPIRED: number;
				static RIGHTS_NOT_ACQUIRED: number;
				static class: java.lang.Class<android.drm.DrmStore.RightsStatus>;
			}
			export class Playback extends java.lang.Object {
				constructor();
				static START: number;
				static STOP: number;
				static PAUSE: number;
				static RESUME: number;
				static class: java.lang.Class<android.drm.DrmStore.Playback>;
			}
			export class DrmObjectType extends java.lang.Object {
				constructor();
				static UNKNOWN: number;
				static CONTENT: number;
				static RIGHTS_OBJECT: number;
				static TRIGGER_OBJECT: number;
				static class: java.lang.Class<android.drm.DrmStore.DrmObjectType>;
			}
			export class ConstraintsColumns implements android.drm.DrmStore.IConstraintsColumns {
				constructor(implementation: android.drm.DrmStore.IConstraintsColumns);
				static MAX_REPEAT_COUNT: java.lang.String;
				static REMAINING_REPEAT_COUNT: java.lang.String;
				static LICENSE_START_TIME: java.lang.String;
				static LICENSE_EXPIRY_TIME: java.lang.String;
				static LICENSE_AVAILABLE_TIME: java.lang.String;
				static EXTENDED_METADATA: java.lang.String;
			}
			export interface IConstraintsColumns {
			}
			export module IConstraintsColumns {
				var MAX_REPEAT_COUNT: java.lang.String;
				var REMAINING_REPEAT_COUNT: java.lang.String;
				var LICENSE_START_TIME: java.lang.String;
				var LICENSE_EXPIRY_TIME: java.lang.String;
				var LICENSE_AVAILABLE_TIME: java.lang.String;
				var EXTENDED_METADATA: java.lang.String;
			}
		}
		export class DrmInfoEvent extends android.drm.DrmEvent {
			constructor(arg1: number, arg2: number, arg3: java.lang.String);
			constructor(arg1: number, arg2: number, arg3: string);
			constructor(arg1: number, arg2: number, arg3: java.lang.String, arg4: java.util.HashMap<string, any>);
			constructor(arg1: number, arg2: number, arg3: string, arg4: java.util.HashMap<string, any>);
			static TYPE_ALREADY_REGISTERED_BY_ANOTHER_ACCOUNT: number;
			static TYPE_REMOVE_RIGHTS: number;
			static TYPE_RIGHTS_INSTALLED: number;
			static TYPE_WAIT_FOR_RIGHTS: number;
			static TYPE_ACCOUNT_ALREADY_REGISTERED: number;
			static TYPE_RIGHTS_REMOVED: number;
			static class: java.lang.Class<android.drm.DrmInfoEvent>;
		}
		export class ProcessedData extends java.lang.Object {
			static class: java.lang.Class<android.drm.ProcessedData>;
			getAccountId(): string;
			getSubscriptionId(): string;
			getData(): native.Array<native.Byte>;
		}
		export class DrmRights extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: android.drm.ProcessedData, arg2: java.lang.String);
			constructor(arg1: android.drm.ProcessedData, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string, arg4: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string);
			constructor(arg1: java.io.File, arg2: java.lang.String);
			constructor(arg1: java.io.File, arg2: string);
			static class: java.lang.Class<android.drm.DrmRights>;
			getAccountId(): string;
			getSubscriptionId(): string;
			getData(): native.Array<native.Byte>;
			getMimeType(): string;
		}
		export class DrmInfo extends java.lang.Object {
			constructor(arg1: number, arg2: native.Array<native.Byte>, arg3: java.lang.String);
			constructor(arg1: number, arg2: native.Array<native.Byte>, arg3: string);
			constructor(arg1: number, arg2: java.lang.String, arg3: java.lang.String);
			constructor(arg1: number, arg2: string, arg3: string);
			static class: java.lang.Class<android.drm.DrmInfo>;
			getInfoType(): number;
			get(arg1: java.lang.String): any;
			get(arg1: string): any;
			iterator(): java.util.IIterator<any>;
			put(arg1: java.lang.String, arg2: any): void;
			put(arg1: string, arg2: any): void;
			getData(): native.Array<native.Byte>;
			keyIterator(): java.util.IIterator<string>;
			getMimeType(): string;
		}
		export class DrmInfoStatus extends java.lang.Object {
			constructor(arg1: number, arg2: number, arg3: android.drm.ProcessedData, arg4: java.lang.String);
			constructor(arg1: number, arg2: number, arg3: android.drm.ProcessedData, arg4: string);
			static STATUS_OK: number;
			static STATUS_ERROR: number;
			statusCode: number;
			infoType: number;
			mimeType: java.lang.String;
			data: android.drm.ProcessedData;
			static class: java.lang.Class<android.drm.DrmInfoStatus>;
		}
		export class DrmErrorEvent extends android.drm.DrmEvent {
			constructor(arg1: number, arg2: number, arg3: java.lang.String);
			constructor(arg1: number, arg2: number, arg3: string);
			constructor(arg1: number, arg2: number, arg3: java.lang.String, arg4: java.util.HashMap<string, any>);
			constructor(arg1: number, arg2: number, arg3: string, arg4: java.util.HashMap<string, any>);
			static TYPE_RIGHTS_NOT_INSTALLED: number;
			static TYPE_RIGHTS_RENEWAL_NOT_ALLOWED: number;
			static TYPE_NOT_SUPPORTED: number;
			static TYPE_OUT_OF_MEMORY: number;
			static TYPE_NO_INTERNET_CONNECTION: number;
			static TYPE_PROCESS_DRM_INFO_FAILED: number;
			static TYPE_REMOVE_ALL_RIGHTS_FAILED: number;
			static TYPE_ACQUIRE_DRM_INFO_FAILED: number;
			static class: java.lang.Class<android.drm.DrmErrorEvent>;
		}
		export class DrmEvent extends java.lang.Object {
			static TYPE_ALL_RIGHTS_REMOVED: number;
			static TYPE_DRM_INFO_PROCESSED: number;
			static DRM_INFO_STATUS_OBJECT: java.lang.String;
			static DRM_INFO_OBJECT: java.lang.String;
			static class: java.lang.Class<android.drm.DrmEvent>;
			getUniqueId(): number;
			getMessage(): string;
			getType(): number;
			getAttribute(arg1: java.lang.String): any;
			getAttribute(arg1: string): any;
		}
		export class DrmInfoRequest extends java.lang.Object {
			constructor(arg1: number, arg2: java.lang.String);
			constructor(arg1: number, arg2: string);
			static TYPE_REGISTRATION_INFO: number;
			static TYPE_UNREGISTRATION_INFO: number;
			static TYPE_RIGHTS_ACQUISITION_INFO: number;
			static TYPE_RIGHTS_ACQUISITION_PROGRESS_INFO: number;
			static ACCOUNT_ID: java.lang.String;
			static SUBSCRIPTION_ID: java.lang.String;
			static class: java.lang.Class<android.drm.DrmInfoRequest>;
			getInfoType(): number;
			get(arg1: java.lang.String): any;
			get(arg1: string): any;
			iterator(): java.util.IIterator<any>;
			put(arg1: java.lang.String, arg2: any): void;
			put(arg1: string, arg2: any): void;
			keyIterator(): java.util.IIterator<string>;
			getMimeType(): string;
		}
		export class DrmSupportInfo extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.drm.DrmSupportInfo>;
			Description: string;
			addFileSuffix(arg1: java.lang.String): void;
			addFileSuffix(arg1: string): void;
			addMimeType(arg1: java.lang.String): void;
			addMimeType(arg1: string): void;
			getDescriprition(): string;
			getMimeTypeIterator(): java.util.IIterator<string>;
			getFileSuffixIterator(): java.util.IIterator<string>;
			hashCode(): number;
			equals(arg1: any): boolean;
			getDescription(): string;
			setDescription(arg1: java.lang.String): void;
			setDescription(arg1: string): void;
		}
		export class DrmManagerClient extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static ERROR_NONE: number;
			static ERROR_UNKNOWN: number;
			static class: java.lang.Class<android.drm.DrmManagerClient>;
			setOnErrorListener(arg1: android.drm.DrmManagerClient.IOnErrorListener): void;
			setOnInfoListener(arg1: android.drm.DrmManagerClient.IOnInfoListener): void;
			getAvailableDrmEngines(): native.Array<java.lang.String>;
			acquireRights(arg1: android.drm.DrmInfoRequest): number;
			canHandle(arg1: java.lang.String, arg2: java.lang.String): boolean;
			canHandle(arg1: string, arg2: string): boolean;
			canHandle(arg1: android.net.Uri, arg2: java.lang.String): boolean;
			canHandle(arg1: android.net.Uri, arg2: string): boolean;
			removeRights(arg1: java.lang.String): number;
			removeRights(arg1: string): number;
			removeRights(arg1: android.net.Uri): number;
			getMetadata(arg1: android.net.Uri): android.content.ContentValues;
			getMetadata(arg1: java.lang.String): android.content.ContentValues;
			getMetadata(arg1: string): android.content.ContentValues;
			saveRights(arg1: android.drm.DrmRights, arg2: java.lang.String, arg3: java.lang.String): number;
			saveRights(arg1: android.drm.DrmRights, arg2: string, arg3: string): number;
			setOnEventListener(arg1: android.drm.DrmManagerClient.IOnEventListener): void;
			processDrmInfo(arg1: android.drm.DrmInfo): number;
			removeAllRights(): number;
			getOriginalMimeType(arg1: java.lang.String): string;
			getOriginalMimeType(arg1: string): string;
			getOriginalMimeType(arg1: android.net.Uri): string;
			closeConvertSession(arg1: number): android.drm.DrmConvertedStatus;
			acquireDrmInfo(arg1: android.drm.DrmInfoRequest): android.drm.DrmInfo;
			checkRightsStatus(arg1: java.lang.String, arg2: number): number;
			checkRightsStatus(arg1: string, arg2: number): number;
			checkRightsStatus(arg1: android.net.Uri): number;
			checkRightsStatus(arg1: java.lang.String): number;
			checkRightsStatus(arg1: string): number;
			checkRightsStatus(arg1: android.net.Uri, arg2: number): number;
			getDrmObjectType(arg1: java.lang.String, arg2: java.lang.String): number;
			getDrmObjectType(arg1: string, arg2: string): number;
			getDrmObjectType(arg1: android.net.Uri, arg2: java.lang.String): number;
			getDrmObjectType(arg1: android.net.Uri, arg2: string): number;
			openConvertSession(arg1: java.lang.String): number;
			openConvertSession(arg1: string): number;
			release(): void;
			getConstraints(arg1: android.net.Uri, arg2: number): android.content.ContentValues;
			getConstraints(arg1: java.lang.String, arg2: number): android.content.ContentValues;
			getConstraints(arg1: string, arg2: number): android.content.ContentValues;
			convertData(arg1: number, arg2: native.Array<native.Byte>): android.drm.DrmConvertedStatus;
		}
		export module DrmManagerClient {
			export interface IOnInfoListener {
				onInfo(arg1: android.drm.DrmManagerClient, arg2: android.drm.DrmInfoEvent): void;
			}
			export interface IOnEventListener {
				onEvent(arg1: android.drm.DrmManagerClient, arg2: android.drm.DrmEvent): void;
			}
			export class OnErrorListener implements android.drm.DrmManagerClient.IOnErrorListener {
				constructor(implementation: android.drm.DrmManagerClient.IOnErrorListener);
				onError(arg1: android.drm.DrmManagerClient, arg2: android.drm.DrmErrorEvent): void;
			}
			export class OnInfoListener implements android.drm.DrmManagerClient.IOnInfoListener {
				constructor(implementation: android.drm.DrmManagerClient.IOnInfoListener);
				onInfo(arg1: android.drm.DrmManagerClient, arg2: android.drm.DrmInfoEvent): void;
			}
			export class OnEventListener implements android.drm.DrmManagerClient.IOnEventListener {
				constructor(implementation: android.drm.DrmManagerClient.IOnEventListener);
				onEvent(arg1: android.drm.DrmManagerClient, arg2: android.drm.DrmEvent): void;
			}
			export interface IOnErrorListener {
				onError(arg1: android.drm.DrmManagerClient, arg2: android.drm.DrmErrorEvent): void;
			}
		}
		export class DrmUtils extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.drm.DrmUtils>;
			static getExtendedMetadataParser(arg1: native.Array<native.Byte>): android.drm.DrmUtils.ExtendedMetadataParser;
		}
		export module DrmUtils {
			export class ExtendedMetadataParser extends java.lang.Object {
				static class: java.lang.Class<android.drm.DrmUtils.ExtendedMetadataParser>;
				get(arg1: java.lang.String): string;
				get(arg1: string): string;
				iterator(): java.util.IIterator<string>;
				keyIterator(): java.util.IIterator<string>;
			}
		}
		export class DrmConvertedStatus extends java.lang.Object {
			constructor(arg1: number, arg2: native.Array<native.Byte>, arg3: number);
			static STATUS_OK: number;
			static STATUS_INPUTDATA_ERROR: number;
			static STATUS_ERROR: number;
			statusCode: number;
			convertedData: native.Array<native.Byte>;
			offset: number;
			static class: java.lang.Class<android.drm.DrmConvertedStatus>;
		}
	}
	export class R extends java.lang.Object {
		constructor();
		static class: java.lang.Class<android.R>;
	}
	export module R {
		export class raw extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.R.raw>;
		}
		export class anim extends java.lang.Object {
			constructor();
			static accelerate_decelerate_interpolator: number;
			static accelerate_interpolator: number;
			static anticipate_interpolator: number;
			static anticipate_overshoot_interpolator: number;
			static bounce_interpolator: number;
			static cycle_interpolator: number;
			static decelerate_interpolator: number;
			static fade_in: number;
			static fade_out: number;
			static linear_interpolator: number;
			static overshoot_interpolator: number;
			static slide_in_left: number;
			static slide_out_right: number;
			static class: java.lang.Class<android.R.anim>;
		}
		export class fraction extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.R.fraction>;
		}
		export class plurals extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.R.plurals>;
		}
		export class integer extends java.lang.Object {
			constructor();
			static config_longAnimTime: number;
			static config_mediumAnimTime: number;
			static config_shortAnimTime: number;
			static status_bar_notification_info_maxnum: number;
			static class: java.lang.Class<android.R.integer>;
		}
		export class menu extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.R.menu>;
		}
		export class drawable extends java.lang.Object {
			constructor();
			static alert_dark_frame: number;
			static alert_light_frame: number;
			static arrow_down_float: number;
			static arrow_up_float: number;
			static bottom_bar: number;
			static btn_default: number;
			static btn_default_small: number;
			static btn_dialog: number;
			static btn_dropdown: number;
			static btn_minus: number;
			static btn_plus: number;
			static btn_radio: number;
			static btn_star: number;
			static btn_star_big_off: number;
			static btn_star_big_on: number;
			static button_onoff_indicator_off: number;
			static button_onoff_indicator_on: number;
			static checkbox_off_background: number;
			static checkbox_on_background: number;
			static dark_header: number;
			static dialog_frame: number;
			static dialog_holo_dark_frame: number;
			static dialog_holo_light_frame: number;
			static divider_horizontal_bright: number;
			static divider_horizontal_dark: number;
			static divider_horizontal_dim_dark: number;
			static divider_horizontal_textfield: number;
			static edit_text: number;
			static editbox_background: number;
			static editbox_background_normal: number;
			static editbox_dropdown_dark_frame: number;
			static editbox_dropdown_light_frame: number;
			static gallery_thumb: number;
			static ic_btn_speak_now: number;
			static ic_delete: number;
			static ic_dialog_alert: number;
			static ic_dialog_dialer: number;
			static ic_dialog_email: number;
			static ic_dialog_info: number;
			static ic_dialog_map: number;
			static ic_input_add: number;
			static ic_input_delete: number;
			static ic_input_get: number;
			static ic_lock_idle_alarm: number;
			static ic_lock_idle_charging: number;
			static ic_lock_idle_lock: number;
			static ic_lock_idle_low_battery: number;
			static ic_lock_lock: number;
			static ic_lock_power_off: number;
			static ic_lock_silent_mode: number;
			static ic_lock_silent_mode_off: number;
			static ic_media_ff: number;
			static ic_media_next: number;
			static ic_media_pause: number;
			static ic_media_play: number;
			static ic_media_previous: number;
			static ic_media_rew: number;
			static ic_menu_add: number;
			static ic_menu_agenda: number;
			static ic_menu_always_landscape_portrait: number;
			static ic_menu_call: number;
			static ic_menu_camera: number;
			static ic_menu_close_clear_cancel: number;
			static ic_menu_compass: number;
			static ic_menu_crop: number;
			static ic_menu_day: number;
			static ic_menu_delete: number;
			static ic_menu_directions: number;
			static ic_menu_edit: number;
			static ic_menu_gallery: number;
			static ic_menu_help: number;
			static ic_menu_info_details: number;
			static ic_menu_manage: number;
			static ic_menu_mapmode: number;
			static ic_menu_month: number;
			static ic_menu_more: number;
			static ic_menu_my_calendar: number;
			static ic_menu_mylocation: number;
			static ic_menu_myplaces: number;
			static ic_menu_preferences: number;
			static ic_menu_recent_history: number;
			static ic_menu_report_image: number;
			static ic_menu_revert: number;
			static ic_menu_rotate: number;
			static ic_menu_save: number;
			static ic_menu_search: number;
			static ic_menu_send: number;
			static ic_menu_set_as: number;
			static ic_menu_share: number;
			static ic_menu_slideshow: number;
			static ic_menu_sort_alphabetically: number;
			static ic_menu_sort_by_size: number;
			static ic_menu_today: number;
			static ic_menu_upload: number;
			static ic_menu_upload_you_tube: number;
			static ic_menu_view: number;
			static ic_menu_week: number;
			static ic_menu_zoom: number;
			static ic_notification_clear_all: number;
			static ic_notification_overlay: number;
			static ic_partial_secure: number;
			static ic_popup_disk_full: number;
			static ic_popup_reminder: number;
			static ic_popup_sync: number;
			static ic_search_category_default: number;
			static ic_secure: number;
			static list_selector_background: number;
			static menu_frame: number;
			static menu_full_frame: number;
			static menuitem_background: number;
			static picture_frame: number;
			static presence_audio_away: number;
			static presence_audio_busy: number;
			static presence_audio_online: number;
			static presence_away: number;
			static presence_busy: number;
			static presence_invisible: number;
			static presence_offline: number;
			static presence_online: number;
			static presence_video_away: number;
			static presence_video_busy: number;
			static presence_video_online: number;
			static progress_horizontal: number;
			static progress_indeterminate_horizontal: number;
			static radiobutton_off_background: number;
			static radiobutton_on_background: number;
			static screen_background_dark: number;
			static screen_background_dark_transparent: number;
			static screen_background_light: number;
			static screen_background_light_transparent: number;
			static spinner_background: number;
			static spinner_dropdown_background: number;
			static star_big_off: number;
			static star_big_on: number;
			static star_off: number;
			static star_on: number;
			static stat_notify_call_mute: number;
			static stat_notify_chat: number;
			static stat_notify_error: number;
			static stat_notify_missed_call: number;
			static stat_notify_more: number;
			static stat_notify_sdcard: number;
			static stat_notify_sdcard_prepare: number;
			static stat_notify_sdcard_usb: number;
			static stat_notify_sync: number;
			static stat_notify_sync_noanim: number;
			static stat_notify_voicemail: number;
			static stat_sys_data_bluetooth: number;
			static stat_sys_download: number;
			static stat_sys_download_done: number;
			static stat_sys_headset: number;
			static stat_sys_phone_call: number;
			static stat_sys_phone_call_forward: number;
			static stat_sys_phone_call_on_hold: number;
			static stat_sys_speakerphone: number;
			static stat_sys_upload: number;
			static stat_sys_upload_done: number;
			static stat_sys_vp_phone_call: number;
			static stat_sys_vp_phone_call_on_hold: number;
			static stat_sys_warning: number;
			static status_bar_item_app_background: number;
			static status_bar_item_background: number;
			static sym_action_call: number;
			static sym_action_chat: number;
			static sym_action_email: number;
			static sym_call_incoming: number;
			static sym_call_missed: number;
			static sym_call_outgoing: number;
			static sym_contact_card: number;
			static sym_def_app_icon: number;
			static title_bar: number;
			static title_bar_tall: number;
			static toast_frame: number;
			static zoom_plate: number;
			static class: java.lang.Class<android.R.drawable>;
		}
		export class xml extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.R.xml>;
		}
		export class attr extends java.lang.Object {
			constructor();
			static absListViewStyle: number;
			static accessibilityEventTypes: number;
			static accessibilityFeedbackType: number;
			static accessibilityFlags: number;
			static accountPreferences: number;
			static accountType: number;
			static action: number;
			static actionBarDivider: number;
			static actionBarItemBackground: number;
			static actionBarSize: number;
			static actionBarSplitStyle: number;
			static actionBarStyle: number;
			static actionBarTabBarStyle: number;
			static actionBarTabStyle: number;
			static actionBarTabTextStyle: number;
			static actionBarWidgetTheme: number;
			static actionButtonStyle: number;
			static actionDropDownStyle: number;
			static actionLayout: number;
			static actionMenuTextAppearance: number;
			static actionMenuTextColor: number;
			static actionModeBackground: number;
			static actionModeCloseButtonStyle: number;
			static actionModeCloseDrawable: number;
			static actionModeCopyDrawable: number;
			static actionModeCutDrawable: number;
			static actionModePasteDrawable: number;
			static actionModeSelectAllDrawable: number;
			static actionModeSplitBackground: number;
			static actionModeStyle: number;
			static actionOverflowButtonStyle: number;
			static actionProviderClass: number;
			static actionViewClass: number;
			static activatedBackgroundIndicator: number;
			static activityCloseEnterAnimation: number;
			static activityCloseExitAnimation: number;
			static activityOpenEnterAnimation: number;
			static activityOpenExitAnimation: number;
			static addStatesFromChildren: number;
			static adjustViewBounds: number;
			static alertDialogIcon: number;
			static alertDialogStyle: number;
			static alertDialogTheme: number;
			static alignmentMode: number;
			static allContactsName: number;
			static allowBackup: number;
			static allowClearUserData: number;
			static allowParallelSyncs: number;
			static allowSingleTap: number;
			static allowTaskReparenting: number;
			static alpha: number;
			static alphabeticShortcut: number;
			static alwaysDrawnWithCache: number;
			static alwaysRetainTaskState: number;
			static angle: number;
			static animateFirstView: number;
			static animateLayoutChanges: number;
			static animateOnClick: number;
			static animation: number;
			static animationCache: number;
			static animationDuration: number;
			static animationOrder: number;
			static animationResolution: number;
			static antialias: number;
			static anyDensity: number;
			static apiKey: number;
			static author: number;
			static authorities: number;
			static autoAdvanceViewId: number;
			static autoCompleteTextViewStyle: number;
			static autoLink: number;
			static autoStart: number;
			static autoText: number;
			static autoUrlDetect: number;
			static background: number;
			static backgroundDimAmount: number;
			static backgroundDimEnabled: number;
			static backgroundSplit: number;
			static backgroundStacked: number;
			static backupAgent: number;
			static baseline: number;
			static baselineAlignBottom: number;
			static baselineAligned: number;
			static baselineAlignedChildIndex: number;
			static borderlessButtonStyle: number;
			static bottom: number;
			static bottomBright: number;
			static bottomDark: number;
			static bottomLeftRadius: number;
			static bottomMedium: number;
			static bottomOffset: number;
			static bottomRightRadius: number;
			static breadCrumbShortTitle: number;
			static breadCrumbTitle: number;
			static bufferType: number;
			static button: number;
			static buttonBarButtonStyle: number;
			static buttonBarStyle: number;
			static buttonStyle: number;
			static buttonStyleInset: number;
			static buttonStyleSmall: number;
			static buttonStyleToggle: number;
			static cacheColorHint: number;
			static calendarViewShown: number;
			static calendarViewStyle: number;
			static canRetrieveWindowContent: number;
			static candidatesTextStyleSpans: number;
			static capitalize: number;
			static centerBright: number;
			static centerColor: number;
			static centerDark: number;
			static centerMedium: number;
			static centerX: number;
			static centerY: number;
			static checkBoxPreferenceStyle: number;
			static checkMark: number;
			static checkable: number;
			static checkableBehavior: number;
			static checkboxStyle: number;
			static checked: number;
			static checkedButton: number;
			static checkedTextViewStyle: number;
			static childDivider: number;
			static childIndicator: number;
			static childIndicatorLeft: number;
			static childIndicatorRight: number;
			static choiceMode: number;
			static clearTaskOnLaunch: number;
			static clickable: number;
			static clipChildren: number;
			static clipOrientation: number;
			static clipToPadding: number;
			static codes: number;
			static collapseColumns: number;
			static color: number;
			static colorActivatedHighlight: number;
			static colorBackground: number;
			static colorBackgroundCacheHint: number;
			static colorFocusedHighlight: number;
			static colorForeground: number;
			static colorForegroundInverse: number;
			static colorLongPressedHighlight: number;
			static colorMultiSelectHighlight: number;
			static colorPressedHighlight: number;
			static columnCount: number;
			static columnDelay: number;
			static columnOrderPreserved: number;
			static columnWidth: number;
			static compatibleWidthLimitDp: number;
			static completionHint: number;
			static completionHintView: number;
			static completionThreshold: number;
			static configChanges: number;
			static configure: number;
			static constantSize: number;
			static content: number;
			static contentAuthority: number;
			static contentDescription: number;
			static cropToPadding: number;
			static cursorVisible: number;
			static customNavigationLayout: number;
			static customTokens: number;
			static cycles: number;
			static dashGap: number;
			static dashWidth: number;
			static data: number;
			static datePickerStyle: number;
			static dateTextAppearance: number;
			static debuggable: number;
			static defaultValue: number;
			static delay: number;
			static dependency: number;
			static descendantFocusability: number;
			static description: number;
			static detachWallpaper: number;
			static detailColumn: number;
			static detailSocialSummary: number;
			static detailsElementBackground: number;
			static dial: number;
			static dialogIcon: number;
			static dialogLayout: number;
			static dialogMessage: number;
			static dialogPreferenceStyle: number;
			static dialogTheme: number;
			static dialogTitle: number;
			static digits: number;
			static direction: number;
			static directionDescriptions: number;
			static directionPriority: number;
			static disableDependentsState: number;
			static disabledAlpha: number;
			static displayOptions: number;
			static dither: number;
			static divider: number;
			static dividerHeight: number;
			static dividerHorizontal: number;
			static dividerPadding: number;
			static dividerVertical: number;
			static drawSelectorOnTop: number;
			static drawable: number;
			static drawableBottom: number;
			static drawableEnd: number;
			static drawableLeft: number;
			static drawablePadding: number;
			static drawableRight: number;
			static drawableStart: number;
			static drawableTop: number;
			static drawingCacheQuality: number;
			static dropDownAnchor: number;
			static dropDownHeight: number;
			static dropDownHintAppearance: number;
			static dropDownHorizontalOffset: number;
			static dropDownItemStyle: number;
			static dropDownListViewStyle: number;
			static dropDownSelector: number;
			static dropDownSpinnerStyle: number;
			static dropDownVerticalOffset: number;
			static dropDownWidth: number;
			static duplicateParentState: number;
			static duration: number;
			static editTextBackground: number;
			static editTextColor: number;
			static editTextPreferenceStyle: number;
			static editTextStyle: number;
			static editable: number;
			static editorExtras: number;
			static ellipsize: number;
			static ems: number;
			static enabled: number;
			static endColor: number;
			static endYear: number;
			static enterFadeDuration: number;
			static entries: number;
			static entryValues: number;
			static eventsInterceptionEnabled: number;
			static excludeFromRecents: number;
			static exitFadeDuration: number;
			static expandableListPreferredChildIndicatorLeft: number;
			static expandableListPreferredChildIndicatorRight: number;
			static expandableListPreferredChildPaddingLeft: number;
			static expandableListPreferredItemIndicatorLeft: number;
			static expandableListPreferredItemIndicatorRight: number;
			static expandableListPreferredItemPaddingLeft: number;
			static expandableListViewStyle: number;
			static expandableListViewWhiteStyle: number;
			static exported: number;
			static extraTension: number;
			static factor: number;
			static fadeDuration: number;
			static fadeEnabled: number;
			static fadeOffset: number;
			static fadeScrollbars: number;
			static fadingEdge: number;
			static fadingEdgeLength: number;
			static fastScrollAlwaysVisible: number;
			static fastScrollEnabled: number;
			static fastScrollOverlayPosition: number;
			static fastScrollPreviewBackgroundLeft: number;
			static fastScrollPreviewBackgroundRight: number;
			static fastScrollTextColor: number;
			static fastScrollThumbDrawable: number;
			static fastScrollTrackDrawable: number;
			static fillAfter: number;
			static fillBefore: number;
			static fillEnabled: number;
			static fillViewport: number;
			static filter: number;
			static filterTouchesWhenObscured: number;
			static finishOnCloseSystemDialogs: number;
			static finishOnTaskLaunch: number;
			static firstDayOfWeek: number;
			static fitsSystemWindows: number;
			static flipInterval: number;
			static focusable: number;
			static focusableInTouchMode: number;
			static focusedMonthDateColor: number;
			static fontFamily: number;
			static footerDividersEnabled: number;
			static foreground: number;
			static foregroundGravity: number;
			static format: number;
			static format12Hour: number;
			static format24Hour: number;
			static fragment: number;
			static fragmentCloseEnterAnimation: number;
			static fragmentCloseExitAnimation: number;
			static fragmentFadeEnterAnimation: number;
			static fragmentFadeExitAnimation: number;
			static fragmentOpenEnterAnimation: number;
			static fragmentOpenExitAnimation: number;
			static freezesText: number;
			static fromAlpha: number;
			static fromDegrees: number;
			static fromXDelta: number;
			static fromXScale: number;
			static fromYDelta: number;
			static fromYScale: number;
			static fullBright: number;
			static fullDark: number;
			static functionalTest: number;
			static galleryItemBackground: number;
			static galleryStyle: number;
			static gestureColor: number;
			static gestureStrokeAngleThreshold: number;
			static gestureStrokeLengthThreshold: number;
			static gestureStrokeSquarenessThreshold: number;
			static gestureStrokeType: number;
			static gestureStrokeWidth: number;
			static glEsVersion: number;
			static gradientRadius: number;
			static grantUriPermissions: number;
			static gravity: number;
			static gridViewStyle: number;
			static groupIndicator: number;
			static hand_hour: number;
			static hand_minute: number;
			static handle: number;
			static handleProfiling: number;
			static hapticFeedbackEnabled: number;
			static hardwareAccelerated: number;
			static hasCode: number;
			static headerBackground: number;
			static headerDividersEnabled: number;
			static height: number;
			static hint: number;
			static homeAsUpIndicator: number;
			static homeLayout: number;
			static horizontalDivider: number;
			static horizontalGap: number;
			static horizontalScrollViewStyle: number;
			static horizontalSpacing: number;
			static host: number;
			static icon: number;
			static iconPreview: number;
			static iconifiedByDefault: number;
			static id: number;
			static ignoreGravity: number;
			static imageButtonStyle: number;
			static imageWellStyle: number;
			static imeActionId: number;
			static imeActionLabel: number;
			static imeExtractEnterAnimation: number;
			static imeExtractExitAnimation: number;
			static imeFullscreenBackground: number;
			static imeOptions: number;
			static imeSubtypeExtraValue: number;
			static imeSubtypeLocale: number;
			static imeSubtypeMode: number;
			static immersive: number;
			static importantForAccessibility: number;
			static inAnimation: number;
			static includeFontPadding: number;
			static includeInGlobalSearch: number;
			static indeterminate: number;
			static indeterminateBehavior: number;
			static indeterminateDrawable: number;
			static indeterminateDuration: number;
			static indeterminateOnly: number;
			static indeterminateProgressStyle: number;
			static indicatorLeft: number;
			static indicatorRight: number;
			static inflatedId: number;
			static initOrder: number;
			static initialKeyguardLayout: number;
			static initialLayout: number;
			static innerRadius: number;
			static innerRadiusRatio: number;
			static inputMethod: number;
			static inputType: number;
			static insetBottom: number;
			static insetLeft: number;
			static insetRight: number;
			static insetTop: number;
			static installLocation: number;
			static interpolator: number;
			static isAlwaysSyncable: number;
			static isAuxiliary: number;
			static isDefault: number;
			static isIndicator: number;
			static isModifier: number;
			static isRepeatable: number;
			static isScrollContainer: number;
			static isSticky: number;
			static isolatedProcess: number;
			static itemBackground: number;
			static itemIconDisabledAlpha: number;
			static itemPadding: number;
			static itemTextAppearance: number;
			static keepScreenOn: number;
			static key: number;
			static keyBackground: number;
			static keyEdgeFlags: number;
			static keyHeight: number;
			static keyIcon: number;
			static keyLabel: number;
			static keyOutputText: number;
			static keyPreviewHeight: number;
			static keyPreviewLayout: number;
			static keyPreviewOffset: number;
			static keyTextColor: number;
			static keyTextSize: number;
			static keyWidth: number;
			static keyboardLayout: number;
			static keyboardMode: number;
			static keycode: number;
			static killAfterRestore: number;
			static label: number;
			static labelFor: number;
			static labelTextSize: number;
			static largeHeap: number;
			static largeScreens: number;
			static largestWidthLimitDp: number;
			static launchMode: number;
			static layerType: number;
			static layout: number;
			static layoutAnimation: number;
			static layoutDirection: number;
			static layout_above: number;
			static layout_alignBaseline: number;
			static layout_alignBottom: number;
			static layout_alignEnd: number;
			static layout_alignLeft: number;
			static layout_alignParentBottom: number;
			static layout_alignParentEnd: number;
			static layout_alignParentLeft: number;
			static layout_alignParentRight: number;
			static layout_alignParentStart: number;
			static layout_alignParentTop: number;
			static layout_alignRight: number;
			static layout_alignStart: number;
			static layout_alignTop: number;
			static layout_alignWithParentIfMissing: number;
			static layout_below: number;
			static layout_centerHorizontal: number;
			static layout_centerInParent: number;
			static layout_centerVertical: number;
			static layout_column: number;
			static layout_columnSpan: number;
			static layout_gravity: number;
			static layout_height: number;
			static layout_margin: number;
			static layout_marginBottom: number;
			static layout_marginEnd: number;
			static layout_marginLeft: number;
			static layout_marginRight: number;
			static layout_marginStart: number;
			static layout_marginTop: number;
			static layout_row: number;
			static layout_rowSpan: number;
			static layout_scale: number;
			static layout_span: number;
			static layout_toEndOf: number;
			static layout_toLeftOf: number;
			static layout_toRightOf: number;
			static layout_toStartOf: number;
			static layout_weight: number;
			static layout_width: number;
			static layout_x: number;
			static layout_y: number;
			static left: number;
			static lineSpacingExtra: number;
			static lineSpacingMultiplier: number;
			static lines: number;
			static linksClickable: number;
			static listChoiceBackgroundIndicator: number;
			static listChoiceIndicatorMultiple: number;
			static listChoiceIndicatorSingle: number;
			static listDivider: number;
			static listDividerAlertDialog: number;
			static listPopupWindowStyle: number;
			static listPreferredItemHeight: number;
			static listPreferredItemHeightLarge: number;
			static listPreferredItemHeightSmall: number;
			static listPreferredItemPaddingEnd: number;
			static listPreferredItemPaddingLeft: number;
			static listPreferredItemPaddingRight: number;
			static listPreferredItemPaddingStart: number;
			static listSelector: number;
			static listSeparatorTextViewStyle: number;
			static listViewStyle: number;
			static listViewWhiteStyle: number;
			static logo: number;
			static longClickable: number;
			static loopViews: number;
			static manageSpaceActivity: number;
			static mapViewStyle: number;
			static marqueeRepeatLimit: number;
			static max: number;
			static maxDate: number;
			static maxEms: number;
			static maxHeight: number;
			static maxItemsPerRow: number;
			static maxLength: number;
			static maxLevel: number;
			static maxLines: number;
			static maxRows: number;
			static maxSdkVersion: number;
			static maxWidth: number;
			static measureAllChildren: number;
			static measureWithLargestChild: number;
			static mediaRouteButtonStyle: number;
			static mediaRouteTypes: number;
			static menuCategory: number;
			static mimeType: number;
			static minDate: number;
			static minEms: number;
			static minHeight: number;
			static minLevel: number;
			static minLines: number;
			static minResizeHeight: number;
			static minResizeWidth: number;
			static minSdkVersion: number;
			static minWidth: number;
			static mode: number;
			static moreIcon: number;
			static multiprocess: number;
			static name: number;
			static navigationMode: number;
			static negativeButtonText: number;
			static nextFocusDown: number;
			static nextFocusForward: number;
			static nextFocusLeft: number;
			static nextFocusRight: number;
			static nextFocusUp: number;
			static noHistory: number;
			static normalScreens: number;
			static notificationTimeout: number;
			static numColumns: number;
			static numStars: number;
			static numeric: number;
			static numericShortcut: number;
			static onClick: number;
			static oneshot: number;
			static opacity: number;
			static order: number;
			static orderInCategory: number;
			static ordering: number;
			static orderingFromXml: number;
			static orientation: number;
			static outAnimation: number;
			static overScrollFooter: number;
			static overScrollHeader: number;
			static overScrollMode: number;
			static overridesImplicitlyEnabledSubtype: number;
			static packageNames: number;
			static padding: number;
			static paddingBottom: number;
			static paddingEnd: number;
			static paddingLeft: number;
			static paddingRight: number;
			static paddingStart: number;
			static paddingTop: number;
			static panelBackground: number;
			static panelColorBackground: number;
			static panelColorForeground: number;
			static panelFullBackground: number;
			static panelTextAppearance: number;
			static parentActivityName: number;
			static password: number;
			static path: number;
			static pathPattern: number;
			static pathPrefix: number;
			static permission: number;
			static permissionFlags: number;
			static permissionGroup: number;
			static permissionGroupFlags: number;
			static persistent: number;
			static persistentDrawingCache: number;
			static phoneNumber: number;
			static pivotX: number;
			static pivotY: number;
			static popupAnimationStyle: number;
			static popupBackground: number;
			static popupCharacters: number;
			static popupKeyboard: number;
			static popupLayout: number;
			static popupMenuStyle: number;
			static popupWindowStyle: number;
			static port: number;
			static positiveButtonText: number;
			static preferenceCategoryStyle: number;
			static preferenceInformationStyle: number;
			static preferenceLayoutChild: number;
			static preferenceScreenStyle: number;
			static preferenceStyle: number;
			static presentationTheme: number;
			static previewImage: number;
			static priority: number;
			static privateImeOptions: number;
			static process: number;
			static progress: number;
			static progressBarPadding: number;
			static progressBarStyle: number;
			static progressBarStyleHorizontal: number;
			static progressBarStyleInverse: number;
			static progressBarStyleLarge: number;
			static progressBarStyleLargeInverse: number;
			static progressBarStyleSmall: number;
			static progressBarStyleSmallInverse: number;
			static progressBarStyleSmallTitle: number;
			static progressDrawable: number;
			static prompt: number;
			static propertyName: number;
			static protectionLevel: number;
			static publicKey: number;
			static queryActionMsg: number;
			static queryAfterZeroResults: number;
			static queryHint: number;
			static quickContactBadgeStyleSmallWindowLarge: number;
			static quickContactBadgeStyleSmallWindowMedium: number;
			static quickContactBadgeStyleSmallWindowSmall: number;
			static quickContactBadgeStyleWindowLarge: number;
			static quickContactBadgeStyleWindowMedium: number;
			static quickContactBadgeStyleWindowSmall: number;
			static radioButtonStyle: number;
			static radius: number;
			static rating: number;
			static ratingBarStyle: number;
			static ratingBarStyleIndicator: number;
			static ratingBarStyleSmall: number;
			static readPermission: number;
			static repeatCount: number;
			static repeatMode: number;
			static reqFiveWayNav: number;
			static reqHardKeyboard: number;
			static reqKeyboardType: number;
			static reqNavigation: number;
			static reqTouchScreen: number;
			static required: number;
			static requiresFadingEdge: number;
			static requiresSmallestWidthDp: number;
			static resizeMode: number;
			static resizeable: number;
			static resource: number;
			static restoreAnyVersion: number;
			static restoreNeedsApplication: number;
			static right: number;
			static ringtonePreferenceStyle: number;
			static ringtoneType: number;
			static rotation: number;
			static rotationX: number;
			static rotationY: number;
			static rowCount: number;
			static rowDelay: number;
			static rowEdgeFlags: number;
			static rowHeight: number;
			static rowOrderPreserved: number;
			static saveEnabled: number;
			static scaleGravity: number;
			static scaleHeight: number;
			static scaleType: number;
			static scaleWidth: number;
			static scaleX: number;
			static scaleY: number;
			static scheme: number;
			static screenDensity: number;
			static screenOrientation: number;
			static screenSize: number;
			static scrollHorizontally: number;
			static scrollViewStyle: number;
			static scrollX: number;
			static scrollY: number;
			static scrollbarAlwaysDrawHorizontalTrack: number;
			static scrollbarAlwaysDrawVerticalTrack: number;
			static scrollbarDefaultDelayBeforeFade: number;
			static scrollbarFadeDuration: number;
			static scrollbarSize: number;
			static scrollbarStyle: number;
			static scrollbarThumbHorizontal: number;
			static scrollbarThumbVertical: number;
			static scrollbarTrackHorizontal: number;
			static scrollbarTrackVertical: number;
			static scrollbars: number;
			static scrollingCache: number;
			static searchButtonText: number;
			static searchMode: number;
			static searchSettingsDescription: number;
			static searchSuggestAuthority: number;
			static searchSuggestIntentAction: number;
			static searchSuggestIntentData: number;
			static searchSuggestPath: number;
			static searchSuggestSelection: number;
			static searchSuggestThreshold: number;
			static secondaryProgress: number;
			static seekBarStyle: number;
			static segmentedButtonStyle: number;
			static selectAllOnFocus: number;
			static selectable: number;
			static selectableItemBackground: number;
			static selectedDateVerticalBar: number;
			static selectedWeekBackgroundColor: number;
			static settingsActivity: number;
			static shadowColor: number;
			static shadowDx: number;
			static shadowDy: number;
			static shadowRadius: number;
			static shape: number;
			static shareInterpolator: number;
			static sharedUserId: number;
			static sharedUserLabel: number;
			static shouldDisableView: number;
			static showAsAction: number;
			static showDefault: number;
			static showDividers: number;
			static showOnLockScreen: number;
			static showSilent: number;
			static showWeekNumber: number;
			static shownWeekCount: number;
			static shrinkColumns: number;
			static singleLine: number;
			static singleUser: number;
			static smallIcon: number;
			static smallScreens: number;
			static smoothScrollbar: number;
			static soundEffectsEnabled: number;
			static spacing: number;
			static spinnerDropDownItemStyle: number;
			static spinnerItemStyle: number;
			static spinnerMode: number;
			static spinnerStyle: number;
			static spinnersShown: number;
			static splitMotionEvents: number;
			static src: number;
			static stackFromBottom: number;
			static starStyle: number;
			static startColor: number;
			static startOffset: number;
			static startYear: number;
			static stateNotNeeded: number;
			static state_above_anchor: number;
			static state_accelerated: number;
			static state_activated: number;
			static state_active: number;
			static state_checkable: number;
			static state_checked: number;
			static state_drag_can_accept: number;
			static state_drag_hovered: number;
			static state_empty: number;
			static state_enabled: number;
			static state_expanded: number;
			static state_first: number;
			static state_focused: number;
			static state_hovered: number;
			static state_last: number;
			static state_long_pressable: number;
			static state_middle: number;
			static state_multiline: number;
			static state_pressed: number;
			static state_selected: number;
			static state_single: number;
			static state_window_focused: number;
			static staticWallpaperPreview: number;
			static stepSize: number;
			static stopWithTask: number;
			static streamType: number;
			static stretchColumns: number;
			static stretchMode: number;
			static subtitle: number;
			static subtitleTextStyle: number;
			static subtypeExtraValue: number;
			static subtypeId: number;
			static subtypeLocale: number;
			static suggestActionMsg: number;
			static suggestActionMsgColumn: number;
			static summary: number;
			static summaryColumn: number;
			static summaryOff: number;
			static summaryOn: number;
			static supportsRtl: number;
			static supportsUploading: number;
			static switchMinWidth: number;
			static switchPadding: number;
			static switchPreferenceStyle: number;
			static switchTextAppearance: number;
			static switchTextOff: number;
			static switchTextOn: number;
			static syncable: number;
			static tabStripEnabled: number;
			static tabStripLeft: number;
			static tabStripRight: number;
			static tabWidgetStyle: number;
			static tag: number;
			static targetActivity: number;
			static targetClass: number;
			static targetDescriptions: number;
			static targetPackage: number;
			static targetSdkVersion: number;
			static taskAffinity: number;
			static taskCloseEnterAnimation: number;
			static taskCloseExitAnimation: number;
			static taskOpenEnterAnimation: number;
			static taskOpenExitAnimation: number;
			static taskToBackEnterAnimation: number;
			static taskToBackExitAnimation: number;
			static taskToFrontEnterAnimation: number;
			static taskToFrontExitAnimation: number;
			static tension: number;
			static testOnly: number;
			static text: number;
			static textAlignment: number;
			static textAllCaps: number;
			static textAppearance: number;
			static textAppearanceButton: number;
			static textAppearanceInverse: number;
			static textAppearanceLarge: number;
			static textAppearanceLargeInverse: number;
			static textAppearanceLargePopupMenu: number;
			static textAppearanceListItem: number;
			static textAppearanceListItemSmall: number;
			static textAppearanceMedium: number;
			static textAppearanceMediumInverse: number;
			static textAppearanceSearchResultSubtitle: number;
			static textAppearanceSearchResultTitle: number;
			static textAppearanceSmall: number;
			static textAppearanceSmallInverse: number;
			static textAppearanceSmallPopupMenu: number;
			static textCheckMark: number;
			static textCheckMarkInverse: number;
			static textColor: number;
			static textColorAlertDialogListItem: number;
			static textColorHighlight: number;
			static textColorHighlightInverse: number;
			static textColorHint: number;
			static textColorHintInverse: number;
			static textColorLink: number;
			static textColorLinkInverse: number;
			static textColorPrimary: number;
			static textColorPrimaryDisableOnly: number;
			static textColorPrimaryInverse: number;
			static textColorPrimaryInverseDisableOnly: number;
			static textColorPrimaryInverseNoDisable: number;
			static textColorPrimaryNoDisable: number;
			static textColorSecondary: number;
			static textColorSecondaryInverse: number;
			static textColorSecondaryInverseNoDisable: number;
			static textColorSecondaryNoDisable: number;
			static textColorTertiary: number;
			static textColorTertiaryInverse: number;
			static textCursorDrawable: number;
			static textDirection: number;
			static textEditNoPasteWindowLayout: number;
			static textEditPasteWindowLayout: number;
			static textEditSideNoPasteWindowLayout: number;
			static textEditSidePasteWindowLayout: number;
			static textEditSuggestionItemLayout: number;
			static textFilterEnabled: number;
			static textIsSelectable: number;
			static textOff: number;
			static textOn: number;
			static textScaleX: number;
			static textSelectHandle: number;
			static textSelectHandleLeft: number;
			static textSelectHandleRight: number;
			static textSelectHandleWindowStyle: number;
			static textSize: number;
			static textStyle: number;
			static textSuggestionsWindowStyle: number;
			static textViewStyle: number;
			static theme: number;
			static thickness: number;
			static thicknessRatio: number;
			static thumb: number;
			static thumbOffset: number;
			static thumbTextPadding: number;
			static thumbnail: number;
			static tileMode: number;
			static timeZone: number;
			static tint: number;
			static title: number;
			static titleCondensed: number;
			static titleTextStyle: number;
			static toAlpha: number;
			static toDegrees: number;
			static toXDelta: number;
			static toXScale: number;
			static toYDelta: number;
			static toYScale: number;
			static top: number;
			static topBright: number;
			static topDark: number;
			static topLeftRadius: number;
			static topOffset: number;
			static topRightRadius: number;
			static track: number;
			static transcriptMode: number;
			static transformPivotX: number;
			static transformPivotY: number;
			static translationX: number;
			static translationY: number;
			static type: number;
			static typeface: number;
			static uiOptions: number;
			static uncertainGestureColor: number;
			static unfocusedMonthDateColor: number;
			static unselectedAlpha: number;
			static updatePeriodMillis: number;
			static useDefaultMargins: number;
			static useIntrinsicSizeAsMinimum: number;
			static useLevel: number;
			static userVisible: number;
			static value: number;
			static valueFrom: number;
			static valueTo: number;
			static valueType: number;
			static variablePadding: number;
			static versionCode: number;
			static versionName: number;
			static verticalCorrection: number;
			static verticalDivider: number;
			static verticalGap: number;
			static verticalScrollbarPosition: number;
			static verticalSpacing: number;
			static visibility: number;
			static visible: number;
			static vmSafeMode: number;
			static voiceLanguage: number;
			static voiceLanguageModel: number;
			static voiceMaxResults: number;
			static voicePromptText: number;
			static voiceSearchMode: number;
			static wallpaperCloseEnterAnimation: number;
			static wallpaperCloseExitAnimation: number;
			static wallpaperIntraCloseEnterAnimation: number;
			static wallpaperIntraCloseExitAnimation: number;
			static wallpaperIntraOpenEnterAnimation: number;
			static wallpaperIntraOpenExitAnimation: number;
			static wallpaperOpenEnterAnimation: number;
			static wallpaperOpenExitAnimation: number;
			static webTextViewStyle: number;
			static webViewStyle: number;
			static weekDayTextAppearance: number;
			static weekNumberColor: number;
			static weekSeparatorLineColor: number;
			static weightSum: number;
			static widgetCategory: number;
			static widgetLayout: number;
			static width: number;
			static windowActionBar: number;
			static windowActionBarOverlay: number;
			static windowActionModeOverlay: number;
			static windowAnimationStyle: number;
			static windowBackground: number;
			static windowCloseOnTouchOutside: number;
			static windowContentOverlay: number;
			static windowDisablePreview: number;
			static windowEnableSplitTouch: number;
			static windowEnterAnimation: number;
			static windowExitAnimation: number;
			static windowFrame: number;
			static windowFullscreen: number;
			static windowHideAnimation: number;
			static windowIsFloating: number;
			static windowIsTranslucent: number;
			static windowMinWidthMajor: number;
			static windowMinWidthMinor: number;
			static windowNoDisplay: number;
			static windowNoTitle: number;
			static windowShowAnimation: number;
			static windowShowWallpaper: number;
			static windowSoftInputMode: number;
			static windowTitleBackgroundStyle: number;
			static windowTitleSize: number;
			static windowTitleStyle: number;
			static writePermission: number;
			static x: number;
			static xlargeScreens: number;
			static y: number;
			static yesNoPreferenceStyle: number;
			static zAdjustment: number;
			static class: java.lang.Class<android.R.attr>;
		}
		export class interpolator extends java.lang.Object {
			constructor();
			static accelerate_cubic: number;
			static accelerate_decelerate: number;
			static accelerate_quad: number;
			static accelerate_quint: number;
			static anticipate: number;
			static anticipate_overshoot: number;
			static bounce: number;
			static cycle: number;
			static decelerate_cubic: number;
			static decelerate_quad: number;
			static decelerate_quint: number;
			static linear: number;
			static overshoot: number;
			static class: java.lang.Class<android.R.interpolator>;
		}
		export class dimen extends java.lang.Object {
			constructor();
			static app_icon_size: number;
			static dialog_min_width_major: number;
			static dialog_min_width_minor: number;
			static notification_large_icon_height: number;
			static notification_large_icon_width: number;
			static thumbnail_height: number;
			static thumbnail_width: number;
			static class: java.lang.Class<android.R.dimen>;
		}
		export class mipmap extends java.lang.Object {
			constructor();
			static sym_def_app_icon: number;
			static class: java.lang.Class<android.R.mipmap>;
		}
		export class id extends java.lang.Object {
			constructor();
			static addToDictionary: number;
			static background: number;
			static button1: number;
			static button2: number;
			static button3: number;
			static candidatesArea: number;
			static checkbox: number;
			static closeButton: number;
			static content: number;
			static copy: number;
			static copyUrl: number;
			static custom: number;
			static cut: number;
			static edit: number;
			static empty: number;
			static extractArea: number;
			static hint: number;
			static home: number;
			static icon: number;
			static icon1: number;
			static icon2: number;
			static input: number;
			static inputArea: number;
			static inputExtractEditText: number;
			static keyboardView: number;
			static list: number;
			static message: number;
			static paste: number;
			static primary: number;
			static progress: number;
			static secondaryProgress: number;
			static selectAll: number;
			static selectTextMode: number;
			static selectedIcon: number;
			static startSelectingText: number;
			static stopSelectingText: number;
			static summary: number;
			static switchInputMethod: number;
			static tabcontent: number;
			static tabhost: number;
			static tabs: number;
			static text1: number;
			static text2: number;
			static title: number;
			static toggle: number;
			static widget_frame: number;
			static class: java.lang.Class<android.R.id>;
		}
		export class animator extends java.lang.Object {
			constructor();
			static fade_in: number;
			static fade_out: number;
			static class: java.lang.Class<android.R.animator>;
		}
		export class style extends java.lang.Object {
			constructor();
			static Animation: number;
			static Animation_Activity: number;
			static Animation_Dialog: number;
			static Animation_InputMethod: number;
			static Animation_Toast: number;
			static Animation_Translucent: number;
			static DeviceDefault_ButtonBar: number;
			static DeviceDefault_ButtonBar_AlertDialog: number;
			static DeviceDefault_Light_ButtonBar: number;
			static DeviceDefault_Light_ButtonBar_AlertDialog: number;
			static DeviceDefault_Light_SegmentedButton: number;
			static DeviceDefault_SegmentedButton: number;
			static Holo_ButtonBar: number;
			static Holo_ButtonBar_AlertDialog: number;
			static Holo_Light_ButtonBar: number;
			static Holo_Light_ButtonBar_AlertDialog: number;
			static Holo_Light_SegmentedButton: number;
			static Holo_SegmentedButton: number;
			static MediaButton: number;
			static MediaButton_Ffwd: number;
			static MediaButton_Next: number;
			static MediaButton_Pause: number;
			static MediaButton_Play: number;
			static MediaButton_Previous: number;
			static MediaButton_Rew: number;
			static TextAppearance: number;
			static TextAppearance_DeviceDefault: number;
			static TextAppearance_DeviceDefault_DialogWindowTitle: number;
			static TextAppearance_DeviceDefault_Inverse: number;
			static TextAppearance_DeviceDefault_Large: number;
			static TextAppearance_DeviceDefault_Large_Inverse: number;
			static TextAppearance_DeviceDefault_Medium: number;
			static TextAppearance_DeviceDefault_Medium_Inverse: number;
			static TextAppearance_DeviceDefault_SearchResult_Subtitle: number;
			static TextAppearance_DeviceDefault_SearchResult_Title: number;
			static TextAppearance_DeviceDefault_Small: number;
			static TextAppearance_DeviceDefault_Small_Inverse: number;
			static TextAppearance_DeviceDefault_Widget: number;
			static TextAppearance_DeviceDefault_Widget_ActionBar_Menu: number;
			static TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle: number;
			static TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse: number;
			static TextAppearance_DeviceDefault_Widget_ActionBar_Title: number;
			static TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse: number;
			static TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle: number;
			static TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse: number;
			static TextAppearance_DeviceDefault_Widget_ActionMode_Title: number;
			static TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse: number;
			static TextAppearance_DeviceDefault_Widget_Button: number;
			static TextAppearance_DeviceDefault_Widget_DropDownHint: number;
			static TextAppearance_DeviceDefault_Widget_DropDownItem: number;
			static TextAppearance_DeviceDefault_Widget_EditText: number;
			static TextAppearance_DeviceDefault_Widget_IconMenu_Item: number;
			static TextAppearance_DeviceDefault_Widget_PopupMenu: number;
			static TextAppearance_DeviceDefault_Widget_PopupMenu_Large: number;
			static TextAppearance_DeviceDefault_Widget_PopupMenu_Small: number;
			static TextAppearance_DeviceDefault_Widget_TabWidget: number;
			static TextAppearance_DeviceDefault_Widget_TextView: number;
			static TextAppearance_DeviceDefault_Widget_TextView_PopupMenu: number;
			static TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem: number;
			static TextAppearance_DeviceDefault_WindowTitle: number;
			static TextAppearance_DialogWindowTitle: number;
			static TextAppearance_Holo: number;
			static TextAppearance_Holo_DialogWindowTitle: number;
			static TextAppearance_Holo_Inverse: number;
			static TextAppearance_Holo_Large: number;
			static TextAppearance_Holo_Large_Inverse: number;
			static TextAppearance_Holo_Medium: number;
			static TextAppearance_Holo_Medium_Inverse: number;
			static TextAppearance_Holo_SearchResult_Subtitle: number;
			static TextAppearance_Holo_SearchResult_Title: number;
			static TextAppearance_Holo_Small: number;
			static TextAppearance_Holo_Small_Inverse: number;
			static TextAppearance_Holo_Widget: number;
			static TextAppearance_Holo_Widget_ActionBar_Menu: number;
			static TextAppearance_Holo_Widget_ActionBar_Subtitle: number;
			static TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse: number;
			static TextAppearance_Holo_Widget_ActionBar_Title: number;
			static TextAppearance_Holo_Widget_ActionBar_Title_Inverse: number;
			static TextAppearance_Holo_Widget_ActionMode_Subtitle: number;
			static TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse: number;
			static TextAppearance_Holo_Widget_ActionMode_Title: number;
			static TextAppearance_Holo_Widget_ActionMode_Title_Inverse: number;
			static TextAppearance_Holo_Widget_Button: number;
			static TextAppearance_Holo_Widget_DropDownHint: number;
			static TextAppearance_Holo_Widget_DropDownItem: number;
			static TextAppearance_Holo_Widget_EditText: number;
			static TextAppearance_Holo_Widget_IconMenu_Item: number;
			static TextAppearance_Holo_Widget_PopupMenu: number;
			static TextAppearance_Holo_Widget_PopupMenu_Large: number;
			static TextAppearance_Holo_Widget_PopupMenu_Small: number;
			static TextAppearance_Holo_Widget_TabWidget: number;
			static TextAppearance_Holo_Widget_TextView: number;
			static TextAppearance_Holo_Widget_TextView_PopupMenu: number;
			static TextAppearance_Holo_Widget_TextView_SpinnerItem: number;
			static TextAppearance_Holo_WindowTitle: number;
			static TextAppearance_Inverse: number;
			static TextAppearance_Large: number;
			static TextAppearance_Large_Inverse: number;
			static TextAppearance_Medium: number;
			static TextAppearance_Medium_Inverse: number;
			static TextAppearance_Small: number;
			static TextAppearance_Small_Inverse: number;
			static TextAppearance_StatusBar_EventContent: number;
			static TextAppearance_StatusBar_EventContent_Title: number;
			static TextAppearance_StatusBar_Icon: number;
			static TextAppearance_StatusBar_Title: number;
			static TextAppearance_SuggestionHighlight: number;
			static TextAppearance_Theme: number;
			static TextAppearance_Theme_Dialog: number;
			static TextAppearance_Widget: number;
			static TextAppearance_Widget_Button: number;
			static TextAppearance_Widget_DropDownHint: number;
			static TextAppearance_Widget_DropDownItem: number;
			static TextAppearance_Widget_EditText: number;
			static TextAppearance_Widget_IconMenu_Item: number;
			static TextAppearance_Widget_PopupMenu_Large: number;
			static TextAppearance_Widget_PopupMenu_Small: number;
			static TextAppearance_Widget_TabWidget: number;
			static TextAppearance_Widget_TextView: number;
			static TextAppearance_Widget_TextView_PopupMenu: number;
			static TextAppearance_Widget_TextView_SpinnerItem: number;
			static TextAppearance_WindowTitle: number;
			static Theme: number;
			static Theme_Black: number;
			static Theme_Black_NoTitleBar: number;
			static Theme_Black_NoTitleBar_Fullscreen: number;
			static Theme_DeviceDefault: number;
			static Theme_DeviceDefault_Dialog: number;
			static Theme_DeviceDefault_Dialog_MinWidth: number;
			static Theme_DeviceDefault_Dialog_NoActionBar: number;
			static Theme_DeviceDefault_Dialog_NoActionBar_MinWidth: number;
			static Theme_DeviceDefault_DialogWhenLarge: number;
			static Theme_DeviceDefault_DialogWhenLarge_NoActionBar: number;
			static Theme_DeviceDefault_InputMethod: number;
			static Theme_DeviceDefault_Light: number;
			static Theme_DeviceDefault_Light_DarkActionBar: number;
			static Theme_DeviceDefault_Light_Dialog: number;
			static Theme_DeviceDefault_Light_Dialog_MinWidth: number;
			static Theme_DeviceDefault_Light_Dialog_NoActionBar: number;
			static Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth: number;
			static Theme_DeviceDefault_Light_DialogWhenLarge: number;
			static Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar: number;
			static Theme_DeviceDefault_Light_NoActionBar: number;
			static Theme_DeviceDefault_Light_NoActionBar_Fullscreen: number;
			static Theme_DeviceDefault_Light_Panel: number;
			static Theme_DeviceDefault_NoActionBar: number;
			static Theme_DeviceDefault_NoActionBar_Fullscreen: number;
			static Theme_DeviceDefault_Panel: number;
			static Theme_DeviceDefault_Wallpaper: number;
			static Theme_DeviceDefault_Wallpaper_NoTitleBar: number;
			static Theme_Dialog: number;
			static Theme_Holo: number;
			static Theme_Holo_Dialog: number;
			static Theme_Holo_Dialog_MinWidth: number;
			static Theme_Holo_Dialog_NoActionBar: number;
			static Theme_Holo_Dialog_NoActionBar_MinWidth: number;
			static Theme_Holo_DialogWhenLarge: number;
			static Theme_Holo_DialogWhenLarge_NoActionBar: number;
			static Theme_Holo_InputMethod: number;
			static Theme_Holo_Light: number;
			static Theme_Holo_Light_DarkActionBar: number;
			static Theme_Holo_Light_Dialog: number;
			static Theme_Holo_Light_Dialog_MinWidth: number;
			static Theme_Holo_Light_Dialog_NoActionBar: number;
			static Theme_Holo_Light_Dialog_NoActionBar_MinWidth: number;
			static Theme_Holo_Light_DialogWhenLarge: number;
			static Theme_Holo_Light_DialogWhenLarge_NoActionBar: number;
			static Theme_Holo_Light_NoActionBar: number;
			static Theme_Holo_Light_NoActionBar_Fullscreen: number;
			static Theme_Holo_Light_Panel: number;
			static Theme_Holo_NoActionBar: number;
			static Theme_Holo_NoActionBar_Fullscreen: number;
			static Theme_Holo_Panel: number;
			static Theme_Holo_Wallpaper: number;
			static Theme_Holo_Wallpaper_NoTitleBar: number;
			static Theme_InputMethod: number;
			static Theme_Light: number;
			static Theme_Light_NoTitleBar: number;
			static Theme_Light_NoTitleBar_Fullscreen: number;
			static Theme_Light_Panel: number;
			static Theme_Light_WallpaperSettings: number;
			static Theme_NoDisplay: number;
			static Theme_NoTitleBar: number;
			static Theme_NoTitleBar_Fullscreen: number;
			static Theme_NoTitleBar_OverlayActionModes: number;
			static Theme_Panel: number;
			static Theme_Translucent: number;
			static Theme_Translucent_NoTitleBar: number;
			static Theme_Translucent_NoTitleBar_Fullscreen: number;
			static Theme_Wallpaper: number;
			static Theme_Wallpaper_NoTitleBar: number;
			static Theme_Wallpaper_NoTitleBar_Fullscreen: number;
			static Theme_WallpaperSettings: number;
			static Theme_WithActionBar: number;
			static Widget: number;
			static Widget_AbsListView: number;
			static Widget_ActionBar: number;
			static Widget_ActionBar_TabBar: number;
			static Widget_ActionBar_TabText: number;
			static Widget_ActionBar_TabView: number;
			static Widget_ActionButton: number;
			static Widget_ActionButton_CloseMode: number;
			static Widget_ActionButton_Overflow: number;
			static Widget_AutoCompleteTextView: number;
			static Widget_Button: number;
			static Widget_Button_Inset: number;
			static Widget_Button_Small: number;
			static Widget_Button_Toggle: number;
			static Widget_CalendarView: number;
			static Widget_CompoundButton: number;
			static Widget_CompoundButton_CheckBox: number;
			static Widget_CompoundButton_RadioButton: number;
			static Widget_CompoundButton_Star: number;
			static Widget_DatePicker: number;
			static Widget_DeviceDefault: number;
			static Widget_DeviceDefault_ActionBar: number;
			static Widget_DeviceDefault_ActionBar_Solid: number;
			static Widget_DeviceDefault_ActionBar_TabBar: number;
			static Widget_DeviceDefault_ActionBar_TabText: number;
			static Widget_DeviceDefault_ActionBar_TabView: number;
			static Widget_DeviceDefault_ActionButton: number;
			static Widget_DeviceDefault_ActionButton_CloseMode: number;
			static Widget_DeviceDefault_ActionButton_Overflow: number;
			static Widget_DeviceDefault_ActionButton_TextButton: number;
			static Widget_DeviceDefault_ActionMode: number;
			static Widget_DeviceDefault_AutoCompleteTextView: number;
			static Widget_DeviceDefault_Button: number;
			static Widget_DeviceDefault_Button_Borderless: number;
			static Widget_DeviceDefault_Button_Borderless_Small: number;
			static Widget_DeviceDefault_Button_Inset: number;
			static Widget_DeviceDefault_Button_Small: number;
			static Widget_DeviceDefault_Button_Toggle: number;
			static Widget_DeviceDefault_CalendarView: number;
			static Widget_DeviceDefault_CheckedTextView: number;
			static Widget_DeviceDefault_CompoundButton_CheckBox: number;
			static Widget_DeviceDefault_CompoundButton_RadioButton: number;
			static Widget_DeviceDefault_CompoundButton_Star: number;
			static Widget_DeviceDefault_DatePicker: number;
			static Widget_DeviceDefault_DropDownItem: number;
			static Widget_DeviceDefault_DropDownItem_Spinner: number;
			static Widget_DeviceDefault_EditText: number;
			static Widget_DeviceDefault_ExpandableListView: number;
			static Widget_DeviceDefault_GridView: number;
			static Widget_DeviceDefault_HorizontalScrollView: number;
			static Widget_DeviceDefault_ImageButton: number;
			static Widget_DeviceDefault_Light: number;
			static Widget_DeviceDefault_Light_ActionBar: number;
			static Widget_DeviceDefault_Light_ActionBar_Solid: number;
			static Widget_DeviceDefault_Light_ActionBar_Solid_Inverse: number;
			static Widget_DeviceDefault_Light_ActionBar_TabBar: number;
			static Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse: number;
			static Widget_DeviceDefault_Light_ActionBar_TabText: number;
			static Widget_DeviceDefault_Light_ActionBar_TabText_Inverse: number;
			static Widget_DeviceDefault_Light_ActionBar_TabView: number;
			static Widget_DeviceDefault_Light_ActionBar_TabView_Inverse: number;
			static Widget_DeviceDefault_Light_ActionButton: number;
			static Widget_DeviceDefault_Light_ActionButton_CloseMode: number;
			static Widget_DeviceDefault_Light_ActionButton_Overflow: number;
			static Widget_DeviceDefault_Light_ActionMode: number;
			static Widget_DeviceDefault_Light_ActionMode_Inverse: number;
			static Widget_DeviceDefault_Light_AutoCompleteTextView: number;
			static Widget_DeviceDefault_Light_Button: number;
			static Widget_DeviceDefault_Light_Button_Borderless_Small: number;
			static Widget_DeviceDefault_Light_Button_Inset: number;
			static Widget_DeviceDefault_Light_Button_Small: number;
			static Widget_DeviceDefault_Light_Button_Toggle: number;
			static Widget_DeviceDefault_Light_CalendarView: number;
			static Widget_DeviceDefault_Light_CheckedTextView: number;
			static Widget_DeviceDefault_Light_CompoundButton_CheckBox: number;
			static Widget_DeviceDefault_Light_CompoundButton_RadioButton: number;
			static Widget_DeviceDefault_Light_CompoundButton_Star: number;
			static Widget_DeviceDefault_Light_DropDownItem: number;
			static Widget_DeviceDefault_Light_DropDownItem_Spinner: number;
			static Widget_DeviceDefault_Light_EditText: number;
			static Widget_DeviceDefault_Light_ExpandableListView: number;
			static Widget_DeviceDefault_Light_GridView: number;
			static Widget_DeviceDefault_Light_HorizontalScrollView: number;
			static Widget_DeviceDefault_Light_ImageButton: number;
			static Widget_DeviceDefault_Light_ListPopupWindow: number;
			static Widget_DeviceDefault_Light_ListView: number;
			static Widget_DeviceDefault_Light_ListView_DropDown: number;
			static Widget_DeviceDefault_Light_MediaRouteButton: number;
			static Widget_DeviceDefault_Light_PopupMenu: number;
			static Widget_DeviceDefault_Light_PopupWindow: number;
			static Widget_DeviceDefault_Light_ProgressBar: number;
			static Widget_DeviceDefault_Light_ProgressBar_Horizontal: number;
			static Widget_DeviceDefault_Light_ProgressBar_Inverse: number;
			static Widget_DeviceDefault_Light_ProgressBar_Large: number;
			static Widget_DeviceDefault_Light_ProgressBar_Large_Inverse: number;
			static Widget_DeviceDefault_Light_ProgressBar_Small: number;
			static Widget_DeviceDefault_Light_ProgressBar_Small_Inverse: number;
			static Widget_DeviceDefault_Light_ProgressBar_Small_Title: number;
			static Widget_DeviceDefault_Light_RatingBar: number;
			static Widget_DeviceDefault_Light_RatingBar_Indicator: number;
			static Widget_DeviceDefault_Light_RatingBar_Small: number;
			static Widget_DeviceDefault_Light_ScrollView: number;
			static Widget_DeviceDefault_Light_SeekBar: number;
			static Widget_DeviceDefault_Light_Spinner: number;
			static Widget_DeviceDefault_Light_Tab: number;
			static Widget_DeviceDefault_Light_TabWidget: number;
			static Widget_DeviceDefault_Light_TextView: number;
			static Widget_DeviceDefault_Light_TextView_SpinnerItem: number;
			static Widget_DeviceDefault_Light_WebTextView: number;
			static Widget_DeviceDefault_Light_WebView: number;
			static Widget_DeviceDefault_ListPopupWindow: number;
			static Widget_DeviceDefault_ListView: number;
			static Widget_DeviceDefault_ListView_DropDown: number;
			static Widget_DeviceDefault_MediaRouteButton: number;
			static Widget_DeviceDefault_PopupMenu: number;
			static Widget_DeviceDefault_PopupWindow: number;
			static Widget_DeviceDefault_ProgressBar: number;
			static Widget_DeviceDefault_ProgressBar_Horizontal: number;
			static Widget_DeviceDefault_ProgressBar_Large: number;
			static Widget_DeviceDefault_ProgressBar_Small: number;
			static Widget_DeviceDefault_ProgressBar_Small_Title: number;
			static Widget_DeviceDefault_RatingBar: number;
			static Widget_DeviceDefault_RatingBar_Indicator: number;
			static Widget_DeviceDefault_RatingBar_Small: number;
			static Widget_DeviceDefault_ScrollView: number;
			static Widget_DeviceDefault_SeekBar: number;
			static Widget_DeviceDefault_Spinner: number;
			static Widget_DeviceDefault_Tab: number;
			static Widget_DeviceDefault_TabWidget: number;
			static Widget_DeviceDefault_TextView: number;
			static Widget_DeviceDefault_TextView_SpinnerItem: number;
			static Widget_DeviceDefault_WebTextView: number;
			static Widget_DeviceDefault_WebView: number;
			static Widget_DropDownItem: number;
			static Widget_DropDownItem_Spinner: number;
			static Widget_EditText: number;
			static Widget_ExpandableListView: number;
			static Widget_FragmentBreadCrumbs: number;
			static Widget_Gallery: number;
			static Widget_GridView: number;
			static Widget_Holo: number;
			static Widget_Holo_ActionBar: number;
			static Widget_Holo_ActionBar_Solid: number;
			static Widget_Holo_ActionBar_TabBar: number;
			static Widget_Holo_ActionBar_TabText: number;
			static Widget_Holo_ActionBar_TabView: number;
			static Widget_Holo_ActionButton: number;
			static Widget_Holo_ActionButton_CloseMode: number;
			static Widget_Holo_ActionButton_Overflow: number;
			static Widget_Holo_ActionButton_TextButton: number;
			static Widget_Holo_ActionMode: number;
			static Widget_Holo_AutoCompleteTextView: number;
			static Widget_Holo_Button: number;
			static Widget_Holo_Button_Borderless: number;
			static Widget_Holo_Button_Borderless_Small: number;
			static Widget_Holo_Button_Inset: number;
			static Widget_Holo_Button_Small: number;
			static Widget_Holo_Button_Toggle: number;
			static Widget_Holo_CalendarView: number;
			static Widget_Holo_CheckedTextView: number;
			static Widget_Holo_CompoundButton_CheckBox: number;
			static Widget_Holo_CompoundButton_RadioButton: number;
			static Widget_Holo_CompoundButton_Star: number;
			static Widget_Holo_DatePicker: number;
			static Widget_Holo_DropDownItem: number;
			static Widget_Holo_DropDownItem_Spinner: number;
			static Widget_Holo_EditText: number;
			static Widget_Holo_ExpandableListView: number;
			static Widget_Holo_GridView: number;
			static Widget_Holo_HorizontalScrollView: number;
			static Widget_Holo_ImageButton: number;
			static Widget_Holo_Light: number;
			static Widget_Holo_Light_ActionBar: number;
			static Widget_Holo_Light_ActionBar_Solid: number;
			static Widget_Holo_Light_ActionBar_Solid_Inverse: number;
			static Widget_Holo_Light_ActionBar_TabBar: number;
			static Widget_Holo_Light_ActionBar_TabBar_Inverse: number;
			static Widget_Holo_Light_ActionBar_TabText: number;
			static Widget_Holo_Light_ActionBar_TabText_Inverse: number;
			static Widget_Holo_Light_ActionBar_TabView: number;
			static Widget_Holo_Light_ActionBar_TabView_Inverse: number;
			static Widget_Holo_Light_ActionButton: number;
			static Widget_Holo_Light_ActionButton_CloseMode: number;
			static Widget_Holo_Light_ActionButton_Overflow: number;
			static Widget_Holo_Light_ActionMode: number;
			static Widget_Holo_Light_ActionMode_Inverse: number;
			static Widget_Holo_Light_AutoCompleteTextView: number;
			static Widget_Holo_Light_Button: number;
			static Widget_Holo_Light_Button_Borderless_Small: number;
			static Widget_Holo_Light_Button_Inset: number;
			static Widget_Holo_Light_Button_Small: number;
			static Widget_Holo_Light_Button_Toggle: number;
			static Widget_Holo_Light_CalendarView: number;
			static Widget_Holo_Light_CheckedTextView: number;
			static Widget_Holo_Light_CompoundButton_CheckBox: number;
			static Widget_Holo_Light_CompoundButton_RadioButton: number;
			static Widget_Holo_Light_CompoundButton_Star: number;
			static Widget_Holo_Light_DropDownItem: number;
			static Widget_Holo_Light_DropDownItem_Spinner: number;
			static Widget_Holo_Light_EditText: number;
			static Widget_Holo_Light_ExpandableListView: number;
			static Widget_Holo_Light_GridView: number;
			static Widget_Holo_Light_HorizontalScrollView: number;
			static Widget_Holo_Light_ImageButton: number;
			static Widget_Holo_Light_ListPopupWindow: number;
			static Widget_Holo_Light_ListView: number;
			static Widget_Holo_Light_ListView_DropDown: number;
			static Widget_Holo_Light_MediaRouteButton: number;
			static Widget_Holo_Light_PopupMenu: number;
			static Widget_Holo_Light_PopupWindow: number;
			static Widget_Holo_Light_ProgressBar: number;
			static Widget_Holo_Light_ProgressBar_Horizontal: number;
			static Widget_Holo_Light_ProgressBar_Inverse: number;
			static Widget_Holo_Light_ProgressBar_Large: number;
			static Widget_Holo_Light_ProgressBar_Large_Inverse: number;
			static Widget_Holo_Light_ProgressBar_Small: number;
			static Widget_Holo_Light_ProgressBar_Small_Inverse: number;
			static Widget_Holo_Light_ProgressBar_Small_Title: number;
			static Widget_Holo_Light_RatingBar: number;
			static Widget_Holo_Light_RatingBar_Indicator: number;
			static Widget_Holo_Light_RatingBar_Small: number;
			static Widget_Holo_Light_ScrollView: number;
			static Widget_Holo_Light_SeekBar: number;
			static Widget_Holo_Light_Spinner: number;
			static Widget_Holo_Light_Tab: number;
			static Widget_Holo_Light_TabWidget: number;
			static Widget_Holo_Light_TextView: number;
			static Widget_Holo_Light_TextView_SpinnerItem: number;
			static Widget_Holo_Light_WebTextView: number;
			static Widget_Holo_Light_WebView: number;
			static Widget_Holo_ListPopupWindow: number;
			static Widget_Holo_ListView: number;
			static Widget_Holo_ListView_DropDown: number;
			static Widget_Holo_MediaRouteButton: number;
			static Widget_Holo_PopupMenu: number;
			static Widget_Holo_PopupWindow: number;
			static Widget_Holo_ProgressBar: number;
			static Widget_Holo_ProgressBar_Horizontal: number;
			static Widget_Holo_ProgressBar_Large: number;
			static Widget_Holo_ProgressBar_Small: number;
			static Widget_Holo_ProgressBar_Small_Title: number;
			static Widget_Holo_RatingBar: number;
			static Widget_Holo_RatingBar_Indicator: number;
			static Widget_Holo_RatingBar_Small: number;
			static Widget_Holo_ScrollView: number;
			static Widget_Holo_SeekBar: number;
			static Widget_Holo_Spinner: number;
			static Widget_Holo_Tab: number;
			static Widget_Holo_TabWidget: number;
			static Widget_Holo_TextView: number;
			static Widget_Holo_TextView_SpinnerItem: number;
			static Widget_Holo_WebTextView: number;
			static Widget_Holo_WebView: number;
			static Widget_ImageButton: number;
			static Widget_ImageWell: number;
			static Widget_KeyboardView: number;
			static Widget_ListPopupWindow: number;
			static Widget_ListView: number;
			static Widget_ListView_DropDown: number;
			static Widget_ListView_Menu: number;
			static Widget_ListView_White: number;
			static Widget_PopupMenu: number;
			static Widget_PopupWindow: number;
			static Widget_ProgressBar: number;
			static Widget_ProgressBar_Horizontal: number;
			static Widget_ProgressBar_Inverse: number;
			static Widget_ProgressBar_Large: number;
			static Widget_ProgressBar_Large_Inverse: number;
			static Widget_ProgressBar_Small: number;
			static Widget_ProgressBar_Small_Inverse: number;
			static Widget_RatingBar: number;
			static Widget_ScrollView: number;
			static Widget_SeekBar: number;
			static Widget_Spinner: number;
			static Widget_Spinner_DropDown: number;
			static Widget_TabWidget: number;
			static Widget_TextView: number;
			static Widget_TextView_PopupMenu: number;
			static Widget_TextView_SpinnerItem: number;
			static Widget_WebView: number;
			static class: java.lang.Class<android.R.style>;
		}
		export class color extends java.lang.Object {
			constructor();
			static background_dark: number;
			static background_light: number;
			static black: number;
			static darker_gray: number;
			static holo_blue_bright: number;
			static holo_blue_dark: number;
			static holo_blue_light: number;
			static holo_green_dark: number;
			static holo_green_light: number;
			static holo_orange_dark: number;
			static holo_orange_light: number;
			static holo_purple: number;
			static holo_red_dark: number;
			static holo_red_light: number;
			static primary_text_dark: number;
			static primary_text_dark_nodisable: number;
			static primary_text_light: number;
			static primary_text_light_nodisable: number;
			static secondary_text_dark: number;
			static secondary_text_dark_nodisable: number;
			static secondary_text_light: number;
			static secondary_text_light_nodisable: number;
			static tab_indicator_text: number;
			static tertiary_text_dark: number;
			static tertiary_text_light: number;
			static transparent: number;
			static white: number;
			static widget_edittext_dark: number;
			static class: java.lang.Class<android.R.color>;
		}
		export class layout extends java.lang.Object {
			constructor();
			static activity_list_item: number;
			static browser_link_context_header: number;
			static expandable_list_content: number;
			static list_content: number;
			static preference_category: number;
			static select_dialog_item: number;
			static select_dialog_multichoice: number;
			static select_dialog_singlechoice: number;
			static simple_dropdown_item_1line: number;
			static simple_expandable_list_item_1: number;
			static simple_expandable_list_item_2: number;
			static simple_gallery_item: number;
			static simple_list_item_1: number;
			static simple_list_item_2: number;
			static simple_list_item_activated_1: number;
			static simple_list_item_activated_2: number;
			static simple_list_item_checked: number;
			static simple_list_item_multiple_choice: number;
			static simple_list_item_single_choice: number;
			static simple_selectable_list_item: number;
			static simple_spinner_dropdown_item: number;
			static simple_spinner_item: number;
			static test_list_item: number;
			static two_line_list_item: number;
			static class: java.lang.Class<android.R.layout>;
		}
		export class bool extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.R.bool>;
		}
		export class array extends java.lang.Object {
			constructor();
			static emailAddressTypes: number;
			static imProtocols: number;
			static organizationTypes: number;
			static phoneTypes: number;
			static postalAddressTypes: number;
			static class: java.lang.Class<android.R.array>;
		}
	}
	export module graphics {
		export class ComposeShader extends android.graphics.Shader {
			constructor(arg1: android.graphics.Shader, arg2: android.graphics.Shader, arg3: android.graphics.Xfermode);
			constructor(arg1: android.graphics.Shader, arg2: android.graphics.Shader, arg3: android.graphics.PorterDuff.Mode);
			static class: java.lang.Class<android.graphics.ComposeShader>;
		}
		export class PorterDuffColorFilter extends android.graphics.ColorFilter {
			constructor(arg1: number, arg2: android.graphics.PorterDuff.Mode);
			static class: java.lang.Class<android.graphics.PorterDuffColorFilter>;
		}
		export module drawable {
			export class PaintDrawable extends android.graphics.drawable.ShapeDrawable {
				constructor(arg1: number);
				constructor();
				static class: java.lang.Class<android.graphics.drawable.PaintDrawable>;
				setCornerRadius(arg1: native.Float): void;
				setCornerRadii(arg1: native.Array<native.Float>): void;
			}
			export class Animatable implements android.graphics.drawable.IAnimatable {
				constructor(implementation: android.graphics.drawable.IAnimatable);
				start(): void;
				stop(): void;
				isRunning(): boolean;
			}
			export class ClipDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.ICallback {
				constructor(arg1: android.graphics.drawable.Drawable, arg2: number, arg3: number);
				static HORIZONTAL: number;
				static VERTICAL: number;
				static class: java.lang.Class<android.graphics.drawable.ClipDrawable>;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
				invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
				scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
				getChangingConfigurations(): number;
				isStateful(): boolean;
				getIntrinsicWidth(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				getPadding(arg1: android.graphics.Rect): boolean;
				getOpacity(): number;
				setVisible(arg1: boolean, arg2: boolean): boolean;
				draw(arg1: android.graphics.Canvas): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export class PictureDrawable extends android.graphics.drawable.Drawable {
				constructor(arg1: android.graphics.Picture);
				static class: java.lang.Class<android.graphics.drawable.PictureDrawable>;
				Picture: android.graphics.Picture;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				setDither(arg1: boolean): void;
				setFilterBitmap(arg1: boolean): void;
				getIntrinsicWidth(): number;
				getIntrinsicHeight(): number;
				setPicture(arg1: android.graphics.Picture): void;
				getPicture(): android.graphics.Picture;
				getOpacity(): number;
				draw(arg1: android.graphics.Canvas): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export class ColorDrawable extends android.graphics.drawable.Drawable {
				constructor();
				constructor(arg1: number);
				static class: java.lang.Class<android.graphics.drawable.ColorDrawable>;
				Alpha: number;
				Color: number;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				getChangingConfigurations(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				mutate(): android.graphics.drawable.Drawable;
				getAlpha(): number;
				getOpacity(): number;
				setColor(arg1: number): void;
				getColor(): number;
				draw(arg1: android.graphics.Canvas): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export class InsetDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.ICallback {
				constructor(arg1: android.graphics.drawable.Drawable, arg2: number, arg3: number, arg4: number, arg5: number);
				constructor(arg1: android.graphics.drawable.Drawable, arg2: number);
				static class: java.lang.Class<android.graphics.drawable.InsetDrawable>;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
				invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
				scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
				getChangingConfigurations(): number;
				isStateful(): boolean;
				getIntrinsicWidth(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				mutate(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				getOpacity(): number;
				setVisible(arg1: boolean, arg2: boolean): boolean;
				draw(arg1: android.graphics.Canvas): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export class DrawableContainer extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.ICallback {
				constructor();
				static class: java.lang.Class<android.graphics.drawable.DrawableContainer>;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
				getMinimumWidth(): number;
				getMinimumHeight(): number;
				invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
				scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
				getChangingConfigurations(): number;
				setDither(arg1: boolean): void;
				isStateful(): boolean;
				setEnterFadeDuration(arg1: number): void;
				getIntrinsicWidth(): number;
				setExitFadeDuration(arg1: number): void;
				selectDrawable(arg1: number): boolean;
				jumpToCurrentState(): void;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				mutate(): android.graphics.drawable.Drawable;
				getCurrent(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				getOpacity(): number;
				setVisible(arg1: boolean, arg2: boolean): boolean;
				draw(arg1: android.graphics.Canvas): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export module DrawableContainer {
				export class DrawableContainerState extends android.graphics.drawable.Drawable.ConstantState {
					static class: java.lang.Class<android.graphics.drawable.DrawableContainer.DrawableContainerState>;
					EnterFadeDuration: number;
					ExitFadeDuration: number;
					addChild(arg1: android.graphics.drawable.Drawable): number;
					getChangingConfigurations(): number;
					isStateful(): boolean;
					setEnterFadeDuration(arg1: number): void;
					setExitFadeDuration(arg1: number): void;
					isConstantSize(): boolean;
					getExitFadeDuration(): number;
					getConstantPadding(): android.graphics.Rect;
					setConstantSize(arg1: boolean): void;
					getConstantHeight(): number;
					getConstantWidth(): number;
					setVariablePadding(arg1: boolean): void;
					getEnterFadeDuration(): number;
					canConstantState(): boolean;
					getConstantMinimumWidth(): number;
					getConstantMinimumHeight(): number;
					growArray(arg1: number, arg2: number): void;
					getOpacity(): number;
					getChildCount(): number;
					getChildren(): native.Array<android.graphics.drawable.Drawable>;
				}
			}
			export class GradientDrawable extends android.graphics.drawable.Drawable {
				constructor(arg1: android.graphics.drawable.GradientDrawable.Orientation, arg2: native.Array<number>);
				constructor();
				static RECTANGLE: number;
				static OVAL: number;
				static LINE: number;
				static RING: number;
				static LINEAR_GRADIENT: number;
				static RADIAL_GRADIENT: number;
				static SWEEP_GRADIENT: number;
				static class: java.lang.Class<android.graphics.drawable.GradientDrawable>;
				Orientation: android.graphics.drawable.GradientDrawable.Orientation;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				getChangingConfigurations(): number;
				setDither(arg1: boolean): void;
				setCornerRadius(arg1: native.Float): void;
				setCornerRadii(arg1: native.Array<native.Float>): void;
				getIntrinsicWidth(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				setGradientRadius(arg1: native.Float): void;
				setGradientType(arg1: number): void;
				setGradientCenter(arg1: native.Float, arg2: native.Float): void;
				mutate(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				setColors(arg1: native.Array<number>): void;
				setUseLevel(arg1: boolean): void;
				setSize(arg1: number, arg2: number): void;
				getOpacity(): number;
				setShape(arg1: number): void;
				getOrientation(): android.graphics.drawable.GradientDrawable.Orientation;
				setColor(arg1: number): void;
				draw(arg1: android.graphics.Canvas): void;
				setStroke(arg1: number, arg2: number, arg3: native.Float, arg4: native.Float): void;
				setStroke(arg1: number, arg2: number): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setOrientation(arg1: android.graphics.drawable.GradientDrawable.Orientation): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export module GradientDrawable {
				export enum Orientation {
					BL_TR,
					BOTTOM_TOP,
					BR_TL,
					LEFT_RIGHT,
					RIGHT_LEFT,
					TL_BR,
					TOP_BOTTOM,
					TR_BL
				}
				export module Orientation {
					export function valueOf(arg1: java.lang.String): android.graphics.drawable.GradientDrawable.Orientation;
					export function valueOf(arg1: string): android.graphics.drawable.GradientDrawable.Orientation;
					export function values(): native.Array<android.graphics.drawable.GradientDrawable.Orientation>;
				}
			}
			export class LevelListDrawable extends android.graphics.drawable.DrawableContainer {
				constructor();
				static class: java.lang.Class<android.graphics.drawable.LevelListDrawable>;
				mutate(): android.graphics.drawable.Drawable;
				addLevel(arg1: number, arg2: number, arg3: android.graphics.drawable.Drawable): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
			}
			export class ShapeDrawable extends android.graphics.drawable.Drawable {
				constructor();
				constructor(arg1: android.graphics.drawable.shapes.Shape);
				static class: java.lang.Class<android.graphics.drawable.ShapeDrawable>;
				ShaderFactory: android.graphics.drawable.ShapeDrawable.ShaderFactory;
				IntrinsicWidth: number;
				Shape: android.graphics.drawable.shapes.Shape;
				IntrinsicHeight: number;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setPadding(arg1: number, arg2: number, arg3: number, arg4: number): void;
				setPadding(arg1: android.graphics.Rect): void;
				setAlpha(arg1: number): void;
				getChangingConfigurations(): number;
				setDither(arg1: boolean): void;
				setIntrinsicHeight(arg1: number): void;
				getIntrinsicWidth(): number;
				setIntrinsicWidth(arg1: number): void;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				setShaderFactory(arg1: android.graphics.drawable.ShapeDrawable.ShaderFactory): void;
				getIntrinsicHeight(): number;
				getShaderFactory(): android.graphics.drawable.ShapeDrawable.ShaderFactory;
				mutate(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				getOpacity(): number;
				getShape(): android.graphics.drawable.shapes.Shape;
				setShape(arg1: android.graphics.drawable.shapes.Shape): void;
				draw(arg1: android.graphics.Canvas): void;
				getPaint(): android.graphics.Paint;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export module ShapeDrawable {
				export class ShaderFactory extends java.lang.Object {
					constructor();
					static class: java.lang.Class<android.graphics.drawable.ShapeDrawable.ShaderFactory>;
					resize(arg1: number, arg2: number): android.graphics.Shader;
				}
			}
			export class NinePatchDrawable extends android.graphics.drawable.Drawable {
				constructor(arg1: android.graphics.Bitmap, arg2: native.Array<native.Byte>, arg3: android.graphics.Rect, arg4: java.lang.String);
				constructor(arg1: android.graphics.Bitmap, arg2: native.Array<native.Byte>, arg3: android.graphics.Rect, arg4: string);
				constructor(arg1: android.content.res.Resources, arg2: android.graphics.Bitmap, arg3: native.Array<native.Byte>, arg4: android.graphics.Rect, arg5: java.lang.String);
				constructor(arg1: android.content.res.Resources, arg2: android.graphics.Bitmap, arg3: native.Array<native.Byte>, arg4: android.graphics.Rect, arg5: string);
				constructor(arg1: android.graphics.NinePatch);
				constructor(arg1: android.content.res.Resources, arg2: android.graphics.NinePatch);
				static class: java.lang.Class<android.graphics.drawable.NinePatchDrawable>;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				getMinimumWidth(): number;
				getMinimumHeight(): number;
				getChangingConfigurations(): number;
				setDither(arg1: boolean): void;
				setFilterBitmap(arg1: boolean): void;
				getIntrinsicWidth(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				getTransparentRegion(): android.graphics.Region;
				setTargetDensity(arg1: android.graphics.Canvas): void;
				setTargetDensity(arg1: android.util.DisplayMetrics): void;
				setTargetDensity(arg1: number): void;
				mutate(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				getOpacity(): number;
				draw(arg1: android.graphics.Canvas): void;
				getPaint(): android.graphics.Paint;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export class LayerDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.ICallback {
				constructor(arg1: native.Array<android.graphics.drawable.Drawable>);
				static class: java.lang.Class<android.graphics.drawable.LayerDrawable>;
				Opacity: number;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				setId(arg1: number, arg2: number): void;
				unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
				invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
				scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
				getDrawable(arg1: number): android.graphics.drawable.Drawable;
				getChangingConfigurations(): number;
				setDither(arg1: boolean): void;
				isStateful(): boolean;
				getIntrinsicWidth(): number;
				getNumberOfLayers(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				findDrawableByLayerId(arg1: number): android.graphics.drawable.Drawable;
				setDrawableByLayerId(arg1: number, arg2: android.graphics.drawable.Drawable): boolean;
				mutate(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				setLayerInset(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
				getId(arg1: number): number;
				getOpacity(): number;
				setOpacity(arg1: number): void;
				setVisible(arg1: boolean, arg2: boolean): boolean;
				draw(arg1: android.graphics.Canvas): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export module shapes {
				export class Shape extends java.lang.Object implements java.lang.ICloneable {
					constructor();
					static class: java.lang.Class<android.graphics.drawable.shapes.Shape>;
					clone(): android.graphics.drawable.shapes.Shape;
					resize(arg1: native.Float, arg2: native.Float): void;
					getHeight(): number;
					getWidth(): number;
					hasAlpha(): boolean;
					draw(arg1: android.graphics.Canvas, arg2: android.graphics.Paint): void;
				}
				export class ArcShape extends android.graphics.drawable.shapes.RectShape {
					constructor(arg1: native.Float, arg2: native.Float);
					static class: java.lang.Class<android.graphics.drawable.shapes.ArcShape>;
					draw(arg1: android.graphics.Canvas, arg2: android.graphics.Paint): void;
				}
				export class PathShape extends android.graphics.drawable.shapes.Shape {
					constructor(arg1: android.graphics.Path, arg2: native.Float, arg3: native.Float);
					static class: java.lang.Class<android.graphics.drawable.shapes.PathShape>;
					clone(): android.graphics.drawable.shapes.PathShape;
					draw(arg1: android.graphics.Canvas, arg2: android.graphics.Paint): void;
				}
				export class OvalShape extends android.graphics.drawable.shapes.RectShape {
					constructor();
					static class: java.lang.Class<android.graphics.drawable.shapes.OvalShape>;
					draw(arg1: android.graphics.Canvas, arg2: android.graphics.Paint): void;
				}
				export class RectShape extends android.graphics.drawable.shapes.Shape {
					constructor();
					static class: java.lang.Class<android.graphics.drawable.shapes.RectShape>;
					clone(): android.graphics.drawable.shapes.RectShape;
					draw(arg1: android.graphics.Canvas, arg2: android.graphics.Paint): void;
				}
				export class RoundRectShape extends android.graphics.drawable.shapes.RectShape {
					constructor(arg1: native.Array<native.Float>, arg2: android.graphics.RectF, arg3: native.Array<native.Float>);
					static class: java.lang.Class<android.graphics.drawable.shapes.RoundRectShape>;
					clone(): android.graphics.drawable.shapes.RoundRectShape;
					draw(arg1: android.graphics.Canvas, arg2: android.graphics.Paint): void;
				}
			}
			export class AnimationDrawable extends android.graphics.drawable.DrawableContainer implements java.lang.IRunnable, android.graphics.drawable.IAnimatable {
				constructor();
				static class: java.lang.Class<android.graphics.drawable.AnimationDrawable>;
				getDuration(arg1: number): number;
				unscheduleSelf(arg1: java.lang.IRunnable): void;
				getNumberOfFrames(): number;
				mutate(): android.graphics.drawable.Drawable;
				setOneShot(arg1: boolean): void;
				addFrame(arg1: android.graphics.drawable.Drawable, arg2: number): void;
				isOneShot(): boolean;
				start(): void;
				run(): void;
				stop(): void;
				setVisible(arg1: boolean, arg2: boolean): boolean;
				getFrame(arg1: number): android.graphics.drawable.Drawable;
				isRunning(): boolean;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
			}
			export class TransitionDrawable extends android.graphics.drawable.LayerDrawable implements android.graphics.drawable.Drawable.ICallback {
				constructor(arg1: native.Array<android.graphics.drawable.Drawable>);
				static class: java.lang.Class<android.graphics.drawable.TransitionDrawable>;
				startTransition(arg1: number): void;
				reverseTransition(arg1: number): void;
				resetTransition(): void;
				setCrossFadeEnabled(arg1: boolean): void;
				isCrossFadeEnabled(): boolean;
				draw(arg1: android.graphics.Canvas): void;
				unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
				invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
				scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
			}
			export class StateListDrawable extends android.graphics.drawable.DrawableContainer {
				constructor();
				static class: java.lang.Class<android.graphics.drawable.StateListDrawable>;
				isStateful(): boolean;
				mutate(): android.graphics.drawable.Drawable;
				addState(arg1: native.Array<number>, arg2: android.graphics.drawable.Drawable): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
			}
			export class Drawable extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.graphics.drawable.Drawable>;
				Bounds: android.graphics.Rect;
				State: native.Array<number>;
				ChangingConfigurations: number;
				Callback: android.graphics.drawable.Drawable.ICallback;
				Level: number;
				clearColorFilter(): void;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
				setAlpha(arg1: number): void;
				getMinimumWidth(): number;
				getMinimumHeight(): number;
				setCallback(arg1: android.graphics.drawable.Drawable.ICallback): void;
				getCallback(): android.graphics.drawable.Drawable.ICallback;
				getChangingConfigurations(): number;
				setDither(arg1: boolean): void;
				setFilterBitmap(arg1: boolean): void;
				isStateful(): boolean;
				static createFromXml(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser): android.graphics.drawable.Drawable;
				static createFromStream(arg1: java.io.InputStream, arg2: java.lang.String): android.graphics.drawable.Drawable;
				static createFromStream(arg1: java.io.InputStream, arg2: string): android.graphics.drawable.Drawable;
				static createFromXmlInner(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): android.graphics.drawable.Drawable;
				getIntrinsicWidth(): number;
				jumpToCurrentState(): void;
				static createFromPath(arg1: java.lang.String): android.graphics.drawable.Drawable;
				static createFromPath(arg1: string): android.graphics.drawable.Drawable;
				static resolveOpacity(arg1: number, arg2: number): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				unscheduleSelf(arg1: java.lang.IRunnable): void;
				getIntrinsicHeight(): number;
				getTransparentRegion(): android.graphics.Region;
				invalidateSelf(): void;
				static createFromResourceStream(arg1: android.content.res.Resources, arg2: android.util.TypedValue, arg3: java.io.InputStream, arg4: java.lang.String, arg5: android.graphics.BitmapFactory.Options): android.graphics.drawable.Drawable;
				static createFromResourceStream(arg1: android.content.res.Resources, arg2: android.util.TypedValue, arg3: java.io.InputStream, arg4: string, arg5: android.graphics.BitmapFactory.Options): android.graphics.drawable.Drawable;
				static createFromResourceStream(arg1: android.content.res.Resources, arg2: android.util.TypedValue, arg3: java.io.InputStream, arg4: java.lang.String): android.graphics.drawable.Drawable;
				static createFromResourceStream(arg1: android.content.res.Resources, arg2: android.util.TypedValue, arg3: java.io.InputStream, arg4: string): android.graphics.drawable.Drawable;
				setChangingConfigurations(arg1: number): void;
				mutate(): android.graphics.drawable.Drawable;
				getCurrent(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				copyBounds(): android.graphics.Rect;
				copyBounds(arg1: android.graphics.Rect): void;
				scheduleSelf(arg1: java.lang.IRunnable, arg2: native.Long): void;
				getState(): native.Array<number>;
				setState(arg1: native.Array<number>): boolean;
				getOpacity(): number;
				getBounds(): android.graphics.Rect;
				isVisible(): boolean;
				setBounds(arg1: android.graphics.Rect): void;
				setBounds(arg1: number, arg2: number, arg3: number, arg4: number): void;
				setVisible(arg1: boolean, arg2: boolean): boolean;
				getLevel(): number;
				setLevel(arg1: number): boolean;
				draw(arg1: android.graphics.Canvas): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
			}
			export module Drawable {
				export interface ICallback {
					unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
					invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
					scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
				}
				export class ConstantState extends java.lang.Object {
					constructor();
					static class: java.lang.Class<android.graphics.drawable.Drawable.ConstantState>;
					getChangingConfigurations(): number;
					newDrawable(arg1: android.content.res.Resources): android.graphics.drawable.Drawable;
					newDrawable(): android.graphics.drawable.Drawable;
				}
				export class Callback implements android.graphics.drawable.Drawable.ICallback {
					constructor(implementation: android.graphics.drawable.Drawable.ICallback);
					unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
					invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
					scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
				}
			}
			export interface IAnimatable {
				start(): void;
				stop(): void;
				isRunning(): boolean;
			}
			export class ScaleDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.ICallback {
				constructor(arg1: android.graphics.drawable.Drawable, arg2: number, arg3: native.Float, arg4: native.Float);
				static class: java.lang.Class<android.graphics.drawable.ScaleDrawable>;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
				invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
				scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
				getDrawable(): android.graphics.drawable.Drawable;
				getChangingConfigurations(): number;
				isStateful(): boolean;
				getIntrinsicWidth(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				mutate(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				getOpacity(): number;
				setVisible(arg1: boolean, arg2: boolean): boolean;
				draw(arg1: android.graphics.Canvas): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export class BitmapDrawable extends android.graphics.drawable.Drawable {
				constructor(arg1: android.content.res.Resources, arg2: android.graphics.Bitmap);
				constructor(arg1: android.graphics.Bitmap);
				constructor();
				constructor(arg1: android.content.res.Resources);
				constructor(arg1: android.content.res.Resources, arg2: java.io.InputStream);
				constructor(arg1: android.content.res.Resources, arg2: java.lang.String);
				constructor(arg1: android.content.res.Resources, arg2: string);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.io.InputStream);
				static class: java.lang.Class<android.graphics.drawable.BitmapDrawable>;
				Gravity: number;
				TileModeY: android.graphics.Shader.TileMode;
				TileModeX: android.graphics.Shader.TileMode;
				setGravity(arg1: number): void;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				getGravity(): number;
				getBitmap(): android.graphics.Bitmap;
				getChangingConfigurations(): number;
				setAntiAlias(arg1: boolean): void;
				setDither(arg1: boolean): void;
				setFilterBitmap(arg1: boolean): void;
				getIntrinsicWidth(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				setTargetDensity(arg1: number): void;
				setTargetDensity(arg1: android.graphics.Canvas): void;
				setTargetDensity(arg1: android.util.DisplayMetrics): void;
				mutate(): android.graphics.drawable.Drawable;
				getTileModeY(): android.graphics.Shader.TileMode;
				setTileModeX(arg1: android.graphics.Shader.TileMode): void;
				setTileModeY(arg1: android.graphics.Shader.TileMode): void;
				getTileModeX(): android.graphics.Shader.TileMode;
				setTileModeXY(arg1: android.graphics.Shader.TileMode, arg2: android.graphics.Shader.TileMode): void;
				getOpacity(): number;
				draw(arg1: android.graphics.Canvas): void;
				getPaint(): android.graphics.Paint;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
			export class RotateDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.ICallback {
				constructor();
				static class: java.lang.Class<android.graphics.drawable.RotateDrawable>;
				setColorFilter(arg1: android.graphics.ColorFilter): void;
				setAlpha(arg1: number): void;
				unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
				invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
				scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
				getDrawable(): android.graphics.drawable.Drawable;
				getChangingConfigurations(): number;
				isStateful(): boolean;
				getIntrinsicWidth(): number;
				getConstantState(): android.graphics.drawable.Drawable.ConstantState;
				getIntrinsicHeight(): number;
				mutate(): android.graphics.drawable.Drawable;
				getPadding(arg1: android.graphics.Rect): boolean;
				getOpacity(): number;
				setVisible(arg1: boolean, arg2: boolean): boolean;
				draw(arg1: android.graphics.Canvas): void;
				inflate(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): void;
				setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			}
		}
		export class Matrix extends java.lang.Object {
			constructor(arg1: android.graphics.Matrix);
			constructor();
			static MSCALE_X: number;
			static MSKEW_X: number;
			static MTRANS_X: number;
			static MSKEW_Y: number;
			static MSCALE_Y: number;
			static MTRANS_Y: number;
			static MPERSP_0: number;
			static MPERSP_1: number;
			static MPERSP_2: number;
			static class: java.lang.Class<android.graphics.Matrix>;
			setScale(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			setScale(arg1: native.Float, arg2: native.Float): void;
			toShortString(): string;
			setPolyToPoly(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: number): boolean;
			setTranslate(arg1: native.Float, arg2: native.Float): void;
			setRotate(arg1: native.Float): void;
			setRotate(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			setSinCos(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			setSinCos(arg1: native.Float, arg2: native.Float): void;
			preRotate(arg1: native.Float, arg2: native.Float, arg3: native.Float): boolean;
			preRotate(arg1: native.Float): boolean;
			postConcat(arg1: android.graphics.Matrix): boolean;
			rectStaysRect(): boolean;
			setConcat(arg1: android.graphics.Matrix, arg2: android.graphics.Matrix): boolean;
			preSkew(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): boolean;
			preSkew(arg1: native.Float, arg2: native.Float): boolean;
			postSkew(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): boolean;
			postSkew(arg1: native.Float, arg2: native.Float): boolean;
			setSkew(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			setSkew(arg1: native.Float, arg2: native.Float): void;
			preConcat(arg1: android.graphics.Matrix): boolean;
			postTranslate(arg1: native.Float, arg2: native.Float): boolean;
			postScale(arg1: native.Float, arg2: native.Float): boolean;
			postScale(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): boolean;
			postRotate(arg1: native.Float, arg2: native.Float, arg3: native.Float): boolean;
			postRotate(arg1: native.Float): boolean;
			preTranslate(arg1: native.Float, arg2: native.Float): boolean;
			setRectToRect(arg1: android.graphics.RectF, arg2: android.graphics.RectF, arg3: android.graphics.Matrix.ScaleToFit): boolean;
			preScale(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): boolean;
			preScale(arg1: native.Float, arg2: native.Float): boolean;
			mapRadius(arg1: native.Float): number;
			mapPoints(arg1: native.Array<native.Float>, arg2: native.Array<native.Float>): void;
			mapPoints(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: number): void;
			mapPoints(arg1: native.Array<native.Float>): void;
			mapVectors(arg1: native.Array<native.Float>, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: number): void;
			mapVectors(arg1: native.Array<native.Float>, arg2: native.Array<native.Float>): void;
			mapVectors(arg1: native.Array<native.Float>): void;
			mapRect(arg1: android.graphics.RectF): boolean;
			mapRect(arg1: android.graphics.RectF, arg2: android.graphics.RectF): boolean;
			equals(arg1: any): boolean;
			toString(): string;
			set(arg1: android.graphics.Matrix): void;
			reset(): void;
			getValues(arg1: native.Array<native.Float>): void;
			invert(arg1: android.graphics.Matrix): boolean;
			isIdentity(): boolean;
			setValues(arg1: native.Array<native.Float>): void;
		}
		export module Matrix {
			export enum ScaleToFit {
				CENTER,
				END,
				FILL,
				START
			}
			export module ScaleToFit {
				export function valueOf(arg1: java.lang.String): android.graphics.Matrix.ScaleToFit;
				export function valueOf(arg1: string): android.graphics.Matrix.ScaleToFit;
				export function values(): native.Array<android.graphics.Matrix.ScaleToFit>;
			}
		}
		export class Rasterizer extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.Rasterizer>;
		}
		export class DashPathEffect extends android.graphics.PathEffect {
			constructor(arg1: native.Array<native.Float>, arg2: native.Float);
			static class: java.lang.Class<android.graphics.DashPathEffect>;
		}
		export class PixelXorXfermode extends android.graphics.Xfermode {
			constructor(arg1: number);
			static class: java.lang.Class<android.graphics.PixelXorXfermode>;
		}
		export class PathEffect extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.PathEffect>;
		}
		export class Path extends java.lang.Object {
			constructor(arg1: android.graphics.Path);
			constructor();
			static class: java.lang.Class<android.graphics.Path>;
			FillType: android.graphics.Path.FillType;
			toggleInverseFillType(): void;
			isInverseFillType(): boolean;
			isRect(arg1: android.graphics.RectF): boolean;
			getFillType(): android.graphics.Path.FillType;
			setFillType(arg1: android.graphics.Path.FillType): void;
			computeBounds(arg1: android.graphics.RectF, arg2: boolean): void;
			addArc(arg1: android.graphics.RectF, arg2: native.Float, arg3: native.Float): void;
			addRect(arg1: android.graphics.RectF, arg2: android.graphics.Path.Direction): void;
			addRect(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: android.graphics.Path.Direction): void;
			setLastPoint(arg1: native.Float, arg2: native.Float): void;
			incReserve(arg1: number): void;
			addCircle(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: android.graphics.Path.Direction): void;
			rQuadTo(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			cubicTo(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			rMoveTo(arg1: native.Float, arg2: native.Float): void;
			addOval(arg1: android.graphics.RectF, arg2: android.graphics.Path.Direction): void;
			rCubicTo(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			rLineTo(arg1: native.Float, arg2: native.Float): void;
			addRoundRect(arg1: android.graphics.RectF, arg2: native.Array<native.Float>, arg3: android.graphics.Path.Direction): void;
			addRoundRect(arg1: android.graphics.RectF, arg2: native.Float, arg3: native.Float, arg4: android.graphics.Path.Direction): void;
			addPath(arg1: android.graphics.Path, arg2: android.graphics.Matrix): void;
			addPath(arg1: android.graphics.Path): void;
			addPath(arg1: android.graphics.Path, arg2: native.Float, arg3: native.Float): void;
			arcTo(arg1: android.graphics.RectF, arg2: native.Float, arg3: native.Float, arg4: boolean): void;
			arcTo(arg1: android.graphics.RectF, arg2: native.Float, arg3: native.Float): void;
			isEmpty(): boolean;
			transform(arg1: android.graphics.Matrix, arg2: android.graphics.Path): void;
			transform(arg1: android.graphics.Matrix): void;
			close(): void;
			set(arg1: android.graphics.Path): void;
			reset(): void;
			rewind(): void;
			offset(arg1: native.Float, arg2: native.Float): void;
			offset(arg1: native.Float, arg2: native.Float, arg3: android.graphics.Path): void;
			lineTo(arg1: native.Float, arg2: native.Float): void;
			moveTo(arg1: native.Float, arg2: native.Float): void;
			quadTo(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
		}
		export module Path {
			export enum FillType {
				EVEN_ODD,
				INVERSE_EVEN_ODD,
				INVERSE_WINDING,
				WINDING
			}
			export module FillType {
				export function valueOf(arg1: java.lang.String): android.graphics.Path.FillType;
				export function valueOf(arg1: string): android.graphics.Path.FillType;
				export function values(): native.Array<android.graphics.Path.FillType>;
			}
			export enum Direction {
				CCW,
				CW
			}
			export module Direction {
				export function valueOf(arg1: java.lang.String): android.graphics.Path.Direction;
				export function valueOf(arg1: string): android.graphics.Path.Direction;
				export function values(): native.Array<android.graphics.Path.Direction>;
			}
		}
		export class EmbossMaskFilter extends android.graphics.MaskFilter {
			constructor(arg1: native.Array<native.Float>, arg2: native.Float, arg3: native.Float, arg4: native.Float);
			static class: java.lang.Class<android.graphics.EmbossMaskFilter>;
		}
		export class BitmapShader extends android.graphics.Shader {
			constructor(arg1: android.graphics.Bitmap, arg2: android.graphics.Shader.TileMode, arg3: android.graphics.Shader.TileMode);
			static class: java.lang.Class<android.graphics.BitmapShader>;
		}
		export class LinearGradient extends android.graphics.Shader {
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Array<number>, arg6: native.Array<native.Float>, arg7: android.graphics.Shader.TileMode);
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: number, arg6: number, arg7: android.graphics.Shader.TileMode);
			static class: java.lang.Class<android.graphics.LinearGradient>;
		}
		export class YuvImage extends java.lang.Object {
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: number, arg5: native.Array<number>);
			static class: java.lang.Class<android.graphics.YuvImage>;
			compressToJpeg(arg1: android.graphics.Rect, arg2: number, arg3: java.io.OutputStream): boolean;
			getYuvFormat(): number;
			getYuvData(): native.Array<native.Byte>;
			getStrides(): native.Array<number>;
			getHeight(): number;
			getWidth(): number;
		}
		export class SurfaceTexture extends java.lang.Object {
			constructor(arg1: number);
			static class: java.lang.Class<android.graphics.SurfaceTexture>;
			setDefaultBufferSize(arg1: number, arg2: number): void;
			detachFromGLContext(): void;
			attachToGLContext(arg1: number): void;
			updateTexImage(): void;
			getTransformMatrix(arg1: native.Array<native.Float>): void;
			setOnFrameAvailableListener(arg1: android.graphics.SurfaceTexture.IOnFrameAvailableListener): void;
			release(): void;
			getTimestamp(): any;
		}
		export module SurfaceTexture {
			export class OnFrameAvailableListener implements android.graphics.SurfaceTexture.IOnFrameAvailableListener {
				constructor(implementation: android.graphics.SurfaceTexture.IOnFrameAvailableListener);
				onFrameAvailable(arg1: android.graphics.SurfaceTexture): void;
			}
			export interface IOnFrameAvailableListener {
				onFrameAvailable(arg1: android.graphics.SurfaceTexture): void;
			}
			export class OutOfResourcesException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.graphics.SurfaceTexture.OutOfResourcesException>;
			}
		}
		export class Xfermode extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.Xfermode>;
		}
		export class Point extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: android.graphics.Point);
			constructor(arg1: number, arg2: number);
			x: number;
			y: number;
			static CREATOR: android.os.Parcelable.ICreator<android.graphics.Point>;
			static class: java.lang.Class<android.graphics.Point>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			readFromParcel(arg1: android.os.Parcel): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			equals(arg1: number, arg2: number): boolean;
			toString(): string;
			set(arg1: number, arg2: number): void;
			offset(arg1: number, arg2: number): void;
			negate(): void;
		}
		export class ColorMatrix extends java.lang.Object {
			constructor(arg1: android.graphics.ColorMatrix);
			constructor(arg1: native.Array<native.Float>);
			constructor();
			static class: java.lang.Class<android.graphics.ColorMatrix>;
			setScale(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			setRotate(arg1: number, arg2: native.Float): void;
			postConcat(arg1: android.graphics.ColorMatrix): void;
			setConcat(arg1: android.graphics.ColorMatrix, arg2: android.graphics.ColorMatrix): void;
			preConcat(arg1: android.graphics.ColorMatrix): void;
			setRGB2YUV(): void;
			setSaturation(arg1: native.Float): void;
			setYUV2RGB(): void;
			getArray(): native.Array<native.Float>;
			set(arg1: android.graphics.ColorMatrix): void;
			set(arg1: native.Array<native.Float>): void;
			reset(): void;
		}
		export class Bitmap extends java.lang.Object implements android.os.IParcelable {
			static DENSITY_NONE: number;
			static CREATOR: android.os.Parcelable.ICreator<android.graphics.Bitmap>;
			static class: java.lang.Class<android.graphics.Bitmap>;
			Density: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			recycle(): void;
			getGenerationId(): number;
			copyPixelsToBuffer(arg1: java.nio.Buffer): void;
			copyPixelsFromBuffer(arg1: java.nio.Buffer): void;
			getNinePatchChunk(): native.Array<native.Byte>;
			static createScaledBitmap(arg1: android.graphics.Bitmap, arg2: number, arg3: number, arg4: boolean): android.graphics.Bitmap;
			getScaledWidth(arg1: android.graphics.Canvas): number;
			getScaledWidth(arg1: android.util.DisplayMetrics): number;
			getScaledWidth(arg1: number): number;
			getScaledHeight(arg1: android.graphics.Canvas): number;
			getScaledHeight(arg1: android.util.DisplayMetrics): number;
			getScaledHeight(arg1: number): number;
			isPremultiplied(): boolean;
			setDensity(arg1: number): void;
			getDensity(): number;
			getRowBytes(): number;
			getByteCount(): number;
			hasMipMap(): boolean;
			static createBitmap(arg1: android.util.DisplayMetrics, arg2: native.Array<number>, arg3: number, arg4: number, arg5: number, arg6: number, arg7: android.graphics.Bitmap.Config): android.graphics.Bitmap;
			static createBitmap(arg1: android.graphics.Bitmap, arg2: number, arg3: number, arg4: number, arg5: number): android.graphics.Bitmap;
			static createBitmap(arg1: android.util.DisplayMetrics, arg2: number, arg3: number, arg4: android.graphics.Bitmap.Config): android.graphics.Bitmap;
			static createBitmap(arg1: number, arg2: number, arg3: android.graphics.Bitmap.Config): android.graphics.Bitmap;
			static createBitmap(arg1: android.graphics.Bitmap, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Matrix, arg7: boolean): android.graphics.Bitmap;
			static createBitmap(arg1: native.Array<number>, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Bitmap.Config): android.graphics.Bitmap;
			static createBitmap(arg1: android.graphics.Bitmap): android.graphics.Bitmap;
			static createBitmap(arg1: android.util.DisplayMetrics, arg2: native.Array<number>, arg3: number, arg4: number, arg5: android.graphics.Bitmap.Config): android.graphics.Bitmap;
			static createBitmap(arg1: native.Array<number>, arg2: number, arg3: number, arg4: android.graphics.Bitmap.Config): android.graphics.Bitmap;
			isRecycled(): boolean;
			compress(arg1: android.graphics.Bitmap.CompressFormat, arg2: number, arg3: java.io.OutputStream): boolean;
			extractAlpha(arg1: android.graphics.Paint, arg2: native.Array<number>): android.graphics.Bitmap;
			extractAlpha(): android.graphics.Bitmap;
			setHasMipMap(arg1: boolean): void;
			sameAs(arg1: android.graphics.Bitmap): boolean;
			prepareToDraw(): void;
			eraseColor(arg1: number): void;
			isMutable(): boolean;
			setHasAlpha(arg1: boolean): void;
			copy(arg1: android.graphics.Bitmap.Config, arg2: boolean): android.graphics.Bitmap;
			getHeight(): number;
			getWidth(): number;
			hasAlpha(): boolean;
			getPixel(arg1: number, arg2: number): number;
			setPixel(arg1: number, arg2: number, arg3: number): void;
			getConfig(): android.graphics.Bitmap.Config;
			setPixels(arg1: native.Array<number>, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
			getPixels(arg1: native.Array<number>, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
		}
		export module Bitmap {
			export enum Config {
				ALPHA_8,
				ARGB_4444,
				ARGB_8888,
				RGB_565
			}
			export module Config {
				export function valueOf(arg1: java.lang.String): android.graphics.Bitmap.Config;
				export function valueOf(arg1: string): android.graphics.Bitmap.Config;
				export function values(): native.Array<android.graphics.Bitmap.Config>;
			}
			export enum CompressFormat {
				JPEG,
				PNG,
				WEBP
			}
			export module CompressFormat {
				export function valueOf(arg1: java.lang.String): android.graphics.Bitmap.CompressFormat;
				export function valueOf(arg1: string): android.graphics.Bitmap.CompressFormat;
				export function values(): native.Array<android.graphics.Bitmap.CompressFormat>;
			}
		}
		export class Camera extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.Camera>;
			rotateX(arg1: native.Float): void;
			getLocationZ(): number;
			applyToCanvas(arg1: android.graphics.Canvas): void;
			rotateZ(arg1: native.Float): void;
			dotWithNormal(arg1: native.Float, arg2: native.Float, arg3: native.Float): number;
			rotateY(arg1: native.Float): void;
			getLocationX(): number;
			getLocationY(): number;
			save(): void;
			rotate(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			setLocation(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			translate(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			getMatrix(arg1: android.graphics.Matrix): void;
			restore(): void;
		}
		export class LayerRasterizer extends android.graphics.Rasterizer {
			constructor();
			static class: java.lang.Class<android.graphics.LayerRasterizer>;
			addLayer(arg1: android.graphics.Paint, arg2: native.Float, arg3: native.Float): void;
			addLayer(arg1: android.graphics.Paint): void;
		}
		export class NinePatch extends java.lang.Object {
			constructor(arg1: android.graphics.Bitmap, arg2: native.Array<native.Byte>, arg3: java.lang.String);
			constructor(arg1: android.graphics.Bitmap, arg2: native.Array<native.Byte>, arg3: string);
			static class: java.lang.Class<android.graphics.NinePatch>;
			getTransparentRegion(arg1: android.graphics.Rect): android.graphics.Region;
			static isNinePatchChunk(arg1: native.Array<native.Byte>): boolean;
			getDensity(): number;
			getHeight(): number;
			getWidth(): number;
			hasAlpha(): boolean;
			draw(arg1: android.graphics.Canvas, arg2: android.graphics.RectF): void;
			draw(arg1: android.graphics.Canvas, arg2: android.graphics.Rect): void;
			draw(arg1: android.graphics.Canvas, arg2: android.graphics.Rect, arg3: android.graphics.Paint): void;
			setPaint(arg1: android.graphics.Paint): void;
		}
		export class PointF extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: android.graphics.Point);
			constructor(arg1: native.Float, arg2: native.Float);
			x: native.Float;
			y: native.Float;
			static CREATOR: android.os.Parcelable.ICreator<android.graphics.PointF>;
			static class: java.lang.Class<android.graphics.PointF>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			readFromParcel(arg1: android.os.Parcel): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			equals(arg1: native.Float, arg2: native.Float): boolean;
			toString(): string;
			static length(arg1: native.Float, arg2: native.Float): number;
			length(): number;
			set(arg1: native.Float, arg2: native.Float): void;
			set(arg1: android.graphics.PointF): void;
			offset(arg1: native.Float, arg2: native.Float): void;
			negate(): void;
		}
		export class DiscretePathEffect extends android.graphics.PathEffect {
			constructor(arg1: native.Float, arg2: native.Float);
			static class: java.lang.Class<android.graphics.DiscretePathEffect>;
		}
		export class PathDashPathEffect extends android.graphics.PathEffect {
			constructor(arg1: android.graphics.Path, arg2: native.Float, arg3: native.Float, arg4: android.graphics.PathDashPathEffect.Style);
			static class: java.lang.Class<android.graphics.PathDashPathEffect>;
		}
		export module PathDashPathEffect {
			export enum Style {
				MORPH,
				ROTATE,
				TRANSLATE
			}
			export module Style {
				export function valueOf(arg1: java.lang.String): android.graphics.PathDashPathEffect.Style;
				export function valueOf(arg1: string): android.graphics.PathDashPathEffect.Style;
				export function values(): native.Array<android.graphics.PathDashPathEffect.Style>;
			}
		}
		export class Color extends java.lang.Object {
			constructor();
			static BLACK: number;
			static DKGRAY: number;
			static GRAY: number;
			static LTGRAY: number;
			static WHITE: number;
			static RED: number;
			static GREEN: number;
			static BLUE: number;
			static YELLOW: number;
			static CYAN: number;
			static MAGENTA: number;
			static TRANSPARENT: number;
			static class: java.lang.Class<android.graphics.Color>;
			static argb(arg1: number, arg2: number, arg3: number, arg4: number): number;
			static parseColor(arg1: java.lang.String): number;
			static parseColor(arg1: string): number;
			static RGBToHSV(arg1: number, arg2: number, arg3: number, arg4: native.Array<native.Float>): void;
			static HSVToColor(arg1: native.Array<native.Float>): number;
			static HSVToColor(arg1: number, arg2: native.Array<native.Float>): number;
			static colorToHSV(arg1: number, arg2: native.Array<native.Float>): void;
			static alpha(arg1: number): number;
			static blue(arg1: number): number;
			static green(arg1: number): number;
			static red(arg1: number): number;
			static rgb(arg1: number, arg2: number, arg3: number): number;
		}
		export class BitmapFactory extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.BitmapFactory>;
			static decodeByteArray(arg1: native.Array<native.Byte>, arg2: number, arg3: number): android.graphics.Bitmap;
			static decodeByteArray(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
			static decodeResourceStream(arg1: android.content.res.Resources, arg2: android.util.TypedValue, arg3: java.io.InputStream, arg4: android.graphics.Rect, arg5: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
			static decodeFileDescriptor(arg1: java.io.FileDescriptor): android.graphics.Bitmap;
			static decodeFileDescriptor(arg1: java.io.FileDescriptor, arg2: android.graphics.Rect, arg3: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
			static decodeResource(arg1: android.content.res.Resources, arg2: number): android.graphics.Bitmap;
			static decodeResource(arg1: android.content.res.Resources, arg2: number, arg3: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
			static decodeStream(arg1: java.io.InputStream, arg2: android.graphics.Rect, arg3: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
			static decodeStream(arg1: java.io.InputStream): android.graphics.Bitmap;
			static decodeFile(arg1: java.lang.String): android.graphics.Bitmap;
			static decodeFile(arg1: string): android.graphics.Bitmap;
			static decodeFile(arg1: java.lang.String, arg2: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
			static decodeFile(arg1: string, arg2: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
		}
		export module BitmapFactory {
			export class Options extends java.lang.Object {
				constructor();
				inBitmap: android.graphics.Bitmap;
				inMutable: boolean;
				inJustDecodeBounds: boolean;
				inSampleSize: number;
				inPreferredConfig: android.graphics.Bitmap.Config;
				inDither: boolean;
				inDensity: number;
				inTargetDensity: number;
				inScreenDensity: number;
				inScaled: boolean;
				inPurgeable: boolean;
				inInputShareable: boolean;
				inPreferQualityOverSpeed: boolean;
				outWidth: number;
				outHeight: number;
				outMimeType: java.lang.String;
				inTempStorage: native.Array<native.Byte>;
				mCancel: boolean;
				static class: java.lang.Class<android.graphics.BitmapFactory.Options>;
				requestCancelDecode(): void;
			}
		}
		export class Rect extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.graphics.Rect);
			constructor(arg1: number, arg2: number, arg3: number, arg4: number);
			constructor();
			left: number;
			top: number;
			right: number;
			bottom: number;
			static CREATOR: android.os.Parcelable.ICreator<android.graphics.Rect>;
			static class: java.lang.Class<android.graphics.Rect>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			centerY(): number;
			centerX(): number;
			readFromParcel(arg1: android.os.Parcel): void;
			toShortString(): string;
			flattenToString(): string;
			static unflattenFromString(arg1: java.lang.String): android.graphics.Rect;
			static unflattenFromString(arg1: string): android.graphics.Rect;
			offsetTo(arg1: number, arg2: number): void;
			setEmpty(): void;
			setIntersect(arg1: android.graphics.Rect, arg2: android.graphics.Rect): boolean;
			exactCenterY(): number;
			exactCenterX(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			contains(arg1: android.graphics.Rect): boolean;
			contains(arg1: number, arg2: number): boolean;
			contains(arg1: number, arg2: number, arg3: number, arg4: number): boolean;
			isEmpty(): boolean;
			set(arg1: number, arg2: number, arg3: number, arg4: number): void;
			set(arg1: android.graphics.Rect): void;
			offset(arg1: number, arg2: number): void;
			sort(): void;
			static intersects(arg1: android.graphics.Rect, arg2: android.graphics.Rect): boolean;
			intersects(arg1: number, arg2: number, arg3: number, arg4: number): boolean;
			height(): number;
			width(): number;
			intersect(arg1: android.graphics.Rect): boolean;
			intersect(arg1: number, arg2: number, arg3: number, arg4: number): boolean;
			union(arg1: number, arg2: number): void;
			union(arg1: android.graphics.Rect): void;
			union(arg1: number, arg2: number, arg3: number, arg4: number): void;
			inset(arg1: number, arg2: number): void;
		}
		export class DrawFilter extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.DrawFilter>;
		}
		export class Paint extends java.lang.Object {
			constructor(arg1: android.graphics.Paint);
			constructor(arg1: number);
			constructor();
			static ANTI_ALIAS_FLAG: number;
			static FILTER_BITMAP_FLAG: number;
			static DITHER_FLAG: number;
			static UNDERLINE_TEXT_FLAG: number;
			static STRIKE_THRU_TEXT_FLAG: number;
			static FAKE_BOLD_TEXT_FLAG: number;
			static LINEAR_TEXT_FLAG: number;
			static SUBPIXEL_TEXT_FLAG: number;
			static DEV_KERN_TEXT_FLAG: number;
			static HINTING_OFF: number;
			static HINTING_ON: number;
			static class: java.lang.Class<android.graphics.Paint>;
			StrokeJoin: android.graphics.Paint.Join;
			Alpha: number;
			Style: android.graphics.Paint.Style;
			ColorFilter: android.graphics.ColorFilter;
			Rasterizer: android.graphics.Rasterizer;
			PathEffect: android.graphics.PathEffect;
			Shader: android.graphics.Shader;
			Xfermode: android.graphics.Xfermode;
			StrokeCap: android.graphics.Paint.Cap;
			MaskFilter: android.graphics.MaskFilter;
			TextAlign: android.graphics.Paint.Align;
			Color: number;
			Typeface: android.graphics.Typeface;
			TextLocale: java.util.Locale;
			Hinting: number;
			Flags: number;
			getTextLocale(): java.util.Locale;
			setColorFilter(arg1: android.graphics.ColorFilter): android.graphics.ColorFilter;
			getColorFilter(): android.graphics.ColorFilter;
			setTypeface(arg1: android.graphics.Typeface): android.graphics.Typeface;
			setAlpha(arg1: number): void;
			setShadowLayer(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: number): void;
			setTextSize(arg1: native.Float): void;
			getTextSize(): number;
			getTextScaleX(): number;
			getTypeface(): android.graphics.Typeface;
			setTextLocale(arg1: java.util.Locale): void;
			setTextScaleX(arg1: native.Float): void;
			setFlags(arg1: number): void;
			setShader(arg1: android.graphics.Shader): android.graphics.Shader;
			getHinting(): number;
			setHinting(arg1: number): void;
			measureText(arg1: native.Array<string>, arg2: number, arg3: number): number;
			measureText(arg1: java.lang.String, arg2: number, arg3: number): number;
			measureText(arg1: string, arg2: number, arg3: number): number;
			measureText(arg1: java.lang.String): number;
			measureText(arg1: string): number;
			measureText(arg1: java.lang.ICharSequence, arg2: number, arg3: number): number;
			setStrokeJoin(arg1: android.graphics.Paint.Join): void;
			getFillPath(arg1: android.graphics.Path, arg2: android.graphics.Path): boolean;
			getXfermode(): android.graphics.Xfermode;
			getMaskFilter(): android.graphics.MaskFilter;
			getStrokeCap(): android.graphics.Paint.Cap;
			setRasterizer(arg1: android.graphics.Rasterizer): android.graphics.Rasterizer;
			setAntiAlias(arg1: boolean): void;
			setDither(arg1: boolean): void;
			setLinearText(arg1: boolean): void;
			isLinearText(): boolean;
			setARGB(arg1: number, arg2: number, arg3: number, arg4: number): void;
			setStrokeCap(arg1: android.graphics.Paint.Cap): void;
			getShader(): android.graphics.Shader;
			setXfermode(arg1: android.graphics.Xfermode): android.graphics.Xfermode;
			setMaskFilter(arg1: android.graphics.MaskFilter): android.graphics.MaskFilter;
			getStrokeJoin(): android.graphics.Paint.Join;
			getRasterizer(): android.graphics.Rasterizer;
			setPathEffect(arg1: android.graphics.PathEffect): android.graphics.PathEffect;
			isAntiAlias(): boolean;
			setTextAlign(arg1: android.graphics.Paint.Align): void;
			getTextSkewX(): number;
			setTextSkewX(arg1: native.Float): void;
			getPathEffect(): android.graphics.PathEffect;
			isDither(): boolean;
			getTextAlign(): android.graphics.Paint.Align;
			getTextBounds(arg1: java.lang.String, arg2: number, arg3: number, arg4: android.graphics.Rect): void;
			getTextBounds(arg1: string, arg2: number, arg3: number, arg4: android.graphics.Rect): void;
			getTextBounds(arg1: native.Array<string>, arg2: number, arg3: number, arg4: android.graphics.Rect): void;
			breakText(arg1: java.lang.String, arg2: boolean, arg3: native.Float, arg4: native.Array<native.Float>): number;
			breakText(arg1: string, arg2: boolean, arg3: native.Float, arg4: native.Array<native.Float>): number;
			breakText(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: boolean, arg5: native.Float, arg6: native.Array<native.Float>): number;
			breakText(arg1: string, arg2: number, arg3: number, arg4: boolean, arg5: native.Float, arg6: native.Array<native.Float>): number;
			breakText(arg1: native.Array<string>, arg2: number, arg3: number, arg4: native.Float, arg5: native.Array<native.Float>): number;
			getTextWidths(arg1: java.lang.String, arg2: native.Array<native.Float>): number;
			getTextWidths(arg1: string, arg2: native.Array<native.Float>): number;
			getTextWidths(arg1: native.Array<string>, arg2: number, arg3: number, arg4: native.Array<native.Float>): number;
			getTextWidths(arg1: java.lang.String, arg2: number, arg3: number, arg4: native.Array<native.Float>): number;
			getTextWidths(arg1: string, arg2: number, arg3: number, arg4: native.Array<native.Float>): number;
			getTextWidths(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: native.Array<native.Float>): number;
			getTextPath(arg1: native.Array<string>, arg2: number, arg3: number, arg4: native.Float, arg5: native.Float, arg6: android.graphics.Path): void;
			getTextPath(arg1: java.lang.String, arg2: number, arg3: number, arg4: native.Float, arg5: native.Float, arg6: android.graphics.Path): void;
			getTextPath(arg1: string, arg2: number, arg3: number, arg4: native.Float, arg5: native.Float, arg6: android.graphics.Path): void;
			isStrikeThruText(): boolean;
			setStrikeThruText(arg1: boolean): void;
			getFontMetricsInt(): android.graphics.Paint.FontMetricsInt;
			getFontMetricsInt(arg1: android.graphics.Paint.FontMetricsInt): number;
			setSubpixelText(arg1: boolean): void;
			isFakeBoldText(): boolean;
			clearShadowLayer(): void;
			getStrokeMiter(): number;
			getFontSpacing(): number;
			isFilterBitmap(): boolean;
			setFakeBoldText(arg1: boolean): void;
			isSubpixelText(): boolean;
			setFilterBitmap(arg1: boolean): void;
			setStrokeMiter(arg1: native.Float): void;
			isUnderlineText(): boolean;
			setUnderlineText(arg1: boolean): void;
			getStrokeWidth(): number;
			setStrokeWidth(arg1: native.Float): void;
			set(arg1: android.graphics.Paint): void;
			reset(): void;
			getAlpha(): number;
			setColor(arg1: number): void;
			getFontMetrics(): android.graphics.Paint.FontMetrics;
			getFontMetrics(arg1: android.graphics.Paint.FontMetrics): number;
			getStyle(): android.graphics.Paint.Style;
			getColor(): number;
			setStyle(arg1: android.graphics.Paint.Style): void;
			getFlags(): number;
			ascent(): number;
			descent(): number;
		}
		export module Paint {
			export class FontMetricsInt extends java.lang.Object {
				constructor();
				top: number;
				ascent: number;
				descent: number;
				bottom: number;
				leading: number;
				static class: java.lang.Class<android.graphics.Paint.FontMetricsInt>;
				toString(): string;
			}
			export enum Cap {
				BUTT,
				ROUND,
				SQUARE
			}
			export module Cap {
				export function valueOf(arg1: java.lang.String): android.graphics.Paint.Cap;
				export function valueOf(arg1: string): android.graphics.Paint.Cap;
				export function values(): native.Array<android.graphics.Paint.Cap>;
			}
			export enum Style {
				FILL,
				FILL_AND_STROKE,
				STROKE
			}
			export module Style {
				export function valueOf(arg1: java.lang.String): android.graphics.Paint.Style;
				export function valueOf(arg1: string): android.graphics.Paint.Style;
				export function values(): native.Array<android.graphics.Paint.Style>;
			}
			export class FontMetrics extends java.lang.Object {
				constructor();
				top: native.Float;
				ascent: native.Float;
				descent: native.Float;
				bottom: native.Float;
				leading: native.Float;
				static class: java.lang.Class<android.graphics.Paint.FontMetrics>;
			}
			export enum Join {
				BEVEL,
				MITER,
				ROUND
			}
			export module Join {
				export function valueOf(arg1: java.lang.String): android.graphics.Paint.Join;
				export function valueOf(arg1: string): android.graphics.Paint.Join;
				export function values(): native.Array<android.graphics.Paint.Join>;
			}
			export enum Align {
				CENTER,
				LEFT,
				RIGHT
			}
			export module Align {
				export function valueOf(arg1: java.lang.String): android.graphics.Paint.Align;
				export function valueOf(arg1: string): android.graphics.Paint.Align;
				export function values(): native.Array<android.graphics.Paint.Align>;
			}
		}
		export class PathMeasure extends java.lang.Object {
			constructor();
			constructor(arg1: android.graphics.Path, arg2: boolean);
			static POSITION_MATRIX_FLAG: number;
			static TANGENT_MATRIX_FLAG: number;
			static class: java.lang.Class<android.graphics.PathMeasure>;
			setPath(arg1: android.graphics.Path, arg2: boolean): void;
			getPosTan(arg1: native.Float, arg2: native.Array<native.Float>, arg3: native.Array<native.Float>): boolean;
			nextContour(): boolean;
			getLength(): number;
			getMatrix(arg1: native.Float, arg2: android.graphics.Matrix, arg3: number): boolean;
			isClosed(): boolean;
			getSegment(arg1: native.Float, arg2: native.Float, arg3: android.graphics.Path, arg4: boolean): boolean;
		}
		export class SweepGradient extends android.graphics.Shader {
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Array<number>, arg4: native.Array<native.Float>);
			constructor(arg1: native.Float, arg2: native.Float, arg3: number, arg4: number);
			static class: java.lang.Class<android.graphics.SweepGradient>;
		}
		export class ColorMatrixColorFilter extends android.graphics.ColorFilter {
			constructor(arg1: android.graphics.ColorMatrix);
			constructor(arg1: native.Array<native.Float>);
			static class: java.lang.Class<android.graphics.ColorMatrixColorFilter>;
		}
		export class ComposePathEffect extends android.graphics.PathEffect {
			constructor(arg1: android.graphics.PathEffect, arg2: android.graphics.PathEffect);
			static class: java.lang.Class<android.graphics.ComposePathEffect>;
		}
		export class RegionIterator extends java.lang.Object {
			constructor(arg1: android.graphics.Region);
			static class: java.lang.Class<android.graphics.RegionIterator>;
			next(arg1: android.graphics.Rect): boolean;
		}
		export class ColorFilter extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.ColorFilter>;
		}
		export class RectF extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: android.graphics.RectF);
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float);
			constructor(arg1: android.graphics.Rect);
			left: native.Float;
			top: native.Float;
			right: native.Float;
			bottom: native.Float;
			static CREATOR: android.os.Parcelable.ICreator<android.graphics.RectF>;
			static class: java.lang.Class<android.graphics.RectF>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			centerY(): number;
			centerX(): number;
			readFromParcel(arg1: android.os.Parcel): void;
			toShortString(): string;
			roundOut(arg1: android.graphics.Rect): void;
			offsetTo(arg1: native.Float, arg2: native.Float): void;
			setEmpty(): void;
			setIntersect(arg1: android.graphics.RectF, arg2: android.graphics.RectF): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			contains(arg1: native.Float, arg2: native.Float): boolean;
			contains(arg1: android.graphics.RectF): boolean;
			contains(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): boolean;
			isEmpty(): boolean;
			set(arg1: android.graphics.Rect): void;
			set(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			set(arg1: android.graphics.RectF): void;
			offset(arg1: native.Float, arg2: native.Float): void;
			sort(): void;
			round(arg1: android.graphics.Rect): void;
			static intersects(arg1: android.graphics.RectF, arg2: android.graphics.RectF): boolean;
			intersects(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): boolean;
			height(): number;
			width(): number;
			intersect(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): boolean;
			intersect(arg1: android.graphics.RectF): boolean;
			union(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			union(arg1: android.graphics.RectF): void;
			union(arg1: native.Float, arg2: native.Float): void;
			inset(arg1: native.Float, arg2: native.Float): void;
		}
		export class PorterDuff extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.PorterDuff>;
		}
		export module PorterDuff {
			export enum Mode {
				ADD,
				CLEAR,
				DARKEN,
				DST,
				DST_ATOP,
				DST_IN,
				DST_OUT,
				DST_OVER,
				LIGHTEN,
				MULTIPLY,
				OVERLAY,
				SCREEN,
				SRC,
				SRC_ATOP,
				SRC_IN,
				SRC_OUT,
				SRC_OVER,
				XOR
			}
			export module Mode {
				export function valueOf(arg1: java.lang.String): android.graphics.PorterDuff.Mode;
				export function valueOf(arg1: string): android.graphics.PorterDuff.Mode;
				export function values(): native.Array<android.graphics.PorterDuff.Mode>;
			}
		}
		export class Region extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: number, arg2: number, arg3: number, arg4: number);
			constructor(arg1: android.graphics.Region);
			constructor(arg1: android.graphics.Rect);
			static CREATOR: android.os.Parcelable.ICreator<android.graphics.Region>;
			static class: java.lang.Class<android.graphics.Region>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			setPath(arg1: android.graphics.Path, arg2: android.graphics.Region): boolean;
			isComplex(): boolean;
			getBoundaryPath(): android.graphics.Path;
			getBoundaryPath(arg1: android.graphics.Path): boolean;
			setEmpty(): void;
			quickReject(arg1: number, arg2: number, arg3: number, arg4: number): boolean;
			quickReject(arg1: android.graphics.Region): boolean;
			quickReject(arg1: android.graphics.Rect): boolean;
			isRect(): boolean;
			quickContains(arg1: android.graphics.Rect): boolean;
			quickContains(arg1: number, arg2: number, arg3: number, arg4: number): boolean;
			op(arg1: android.graphics.Region, arg2: android.graphics.Region, arg3: android.graphics.Region.Op): boolean;
			op(arg1: android.graphics.Rect, arg2: android.graphics.Region, arg3: android.graphics.Region.Op): boolean;
			op(arg1: android.graphics.Region, arg2: android.graphics.Region.Op): boolean;
			op(arg1: number, arg2: number, arg3: number, arg4: number, arg5: android.graphics.Region.Op): boolean;
			op(arg1: android.graphics.Rect, arg2: android.graphics.Region.Op): boolean;
			equals(arg1: any): boolean;
			toString(): string;
			contains(arg1: number, arg2: number): boolean;
			isEmpty(): boolean;
			set(arg1: android.graphics.Rect): boolean;
			set(arg1: number, arg2: number, arg3: number, arg4: number): boolean;
			set(arg1: android.graphics.Region): boolean;
			getBounds(): android.graphics.Rect;
			getBounds(arg1: android.graphics.Rect): boolean;
			translate(arg1: number, arg2: number, arg3: android.graphics.Region): void;
			translate(arg1: number, arg2: number): void;
			union(arg1: android.graphics.Rect): boolean;
		}
		export module Region {
			export enum Op {
				DIFFERENCE,
				INTERSECT,
				REPLACE,
				REVERSE_DIFFERENCE,
				UNION,
				XOR
			}
			export module Op {
				export function valueOf(arg1: java.lang.String): android.graphics.Region.Op;
				export function valueOf(arg1: string): android.graphics.Region.Op;
				export function values(): native.Array<android.graphics.Region.Op>;
			}
		}
		export class Movie extends java.lang.Object {
			static class: java.lang.Class<android.graphics.Movie>;
			duration(): number;
			static decodeByteArray(arg1: native.Array<native.Byte>, arg2: number, arg3: number): android.graphics.Movie;
			static decodeStream(arg1: java.io.InputStream): android.graphics.Movie;
			static decodeFile(arg1: java.lang.String): android.graphics.Movie;
			static decodeFile(arg1: string): android.graphics.Movie;
			isOpaque(): boolean;
			height(): number;
			width(): number;
			setTime(arg1: number): boolean;
			draw(arg1: android.graphics.Canvas, arg2: native.Float, arg3: native.Float): void;
			draw(arg1: android.graphics.Canvas, arg2: native.Float, arg3: native.Float, arg4: android.graphics.Paint): void;
		}
		export class Shader extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.Shader>;
			getLocalMatrix(arg1: android.graphics.Matrix): boolean;
			setLocalMatrix(arg1: android.graphics.Matrix): void;
		}
		export module Shader {
			export enum TileMode {
				CLAMP,
				MIRROR,
				REPEAT
			}
			export module TileMode {
				export function valueOf(arg1: java.lang.String): android.graphics.Shader.TileMode;
				export function valueOf(arg1: string): android.graphics.Shader.TileMode;
				export function values(): native.Array<android.graphics.Shader.TileMode>;
			}
		}
		export class Interpolator extends java.lang.Object {
			constructor(arg1: number);
			constructor(arg1: number, arg2: number);
			static class: java.lang.Class<android.graphics.Interpolator>;
			setRepeatMirror(arg1: native.Float, arg2: boolean): void;
			getKeyFrameCount(): number;
			setKeyFrame(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: native.Array<native.Float>): void;
			setKeyFrame(arg1: number, arg2: number, arg3: native.Array<native.Float>): void;
			timeToValues(arg1: native.Array<native.Float>): android.graphics.Interpolator.Result;
			timeToValues(arg1: number, arg2: native.Array<native.Float>): android.graphics.Interpolator.Result;
			getValueCount(): number;
			reset(arg1: number, arg2: number): void;
			reset(arg1: number): void;
		}
		export module Interpolator {
			export enum Result {
				FREEZE_END,
				FREEZE_START,
				NORMAL
			}
			export module Result {
				export function valueOf(arg1: java.lang.String): android.graphics.Interpolator.Result;
				export function valueOf(arg1: string): android.graphics.Interpolator.Result;
				export function values(): native.Array<android.graphics.Interpolator.Result>;
			}
		}
		export class RadialGradient extends android.graphics.Shader {
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Array<number>, arg5: native.Array<native.Float>, arg6: android.graphics.Shader.TileMode);
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: number, arg5: number, arg6: android.graphics.Shader.TileMode);
			static class: java.lang.Class<android.graphics.RadialGradient>;
		}
		export class Picture extends java.lang.Object {
			constructor(arg1: android.graphics.Picture);
			constructor();
			static class: java.lang.Class<android.graphics.Picture>;
			beginRecording(arg1: number, arg2: number): android.graphics.Canvas;
			static createFromStream(arg1: java.io.InputStream): android.graphics.Picture;
			endRecording(): void;
			writeToStream(arg1: java.io.OutputStream): void;
			getHeight(): number;
			getWidth(): number;
			draw(arg1: android.graphics.Canvas): void;
		}
		export class ImageFormat extends java.lang.Object {
			constructor();
			static UNKNOWN: number;
			static RGB_565: number;
			static YV12: number;
			static NV16: number;
			static NV21: number;
			static YUY2: number;
			static JPEG: number;
			static class: java.lang.Class<android.graphics.ImageFormat>;
			static getBitsPerPixel(arg1: number): number;
		}
		export class LightingColorFilter extends android.graphics.ColorFilter {
			constructor(arg1: number, arg2: number);
			static class: java.lang.Class<android.graphics.LightingColorFilter>;
		}
		export class MaskFilter extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.graphics.MaskFilter>;
		}
		export class PaintFlagsDrawFilter extends android.graphics.DrawFilter {
			constructor(arg1: number, arg2: number);
			static class: java.lang.Class<android.graphics.PaintFlagsDrawFilter>;
		}
		export class SumPathEffect extends android.graphics.PathEffect {
			constructor(arg1: android.graphics.PathEffect, arg2: android.graphics.PathEffect);
			static class: java.lang.Class<android.graphics.SumPathEffect>;
		}
		export class BlurMaskFilter extends android.graphics.MaskFilter {
			constructor(arg1: native.Float, arg2: android.graphics.BlurMaskFilter.Blur);
			static class: java.lang.Class<android.graphics.BlurMaskFilter>;
		}
		export module BlurMaskFilter {
			export enum Blur {
				INNER,
				NORMAL,
				OUTER,
				SOLID
			}
			export module Blur {
				export function valueOf(arg1: java.lang.String): android.graphics.BlurMaskFilter.Blur;
				export function valueOf(arg1: string): android.graphics.BlurMaskFilter.Blur;
				export function values(): native.Array<android.graphics.BlurMaskFilter.Blur>;
			}
		}
		export class PorterDuffXfermode extends android.graphics.Xfermode {
			constructor(arg1: android.graphics.PorterDuff.Mode);
			static class: java.lang.Class<android.graphics.PorterDuffXfermode>;
		}
		export class Typeface extends java.lang.Object {
			static DEFAULT: android.graphics.Typeface;
			static DEFAULT_BOLD: android.graphics.Typeface;
			static SANS_SERIF: android.graphics.Typeface;
			static SERIF: android.graphics.Typeface;
			static MONOSPACE: android.graphics.Typeface;
			static NORMAL: number;
			static BOLD: number;
			static ITALIC: number;
			static BOLD_ITALIC: number;
			static class: java.lang.Class<android.graphics.Typeface>;
			static createFromAsset(arg1: android.content.res.AssetManager, arg2: java.lang.String): android.graphics.Typeface;
			static createFromAsset(arg1: android.content.res.AssetManager, arg2: string): android.graphics.Typeface;
			static createFromFile(arg1: java.io.File): android.graphics.Typeface;
			static createFromFile(arg1: java.lang.String): android.graphics.Typeface;
			static createFromFile(arg1: string): android.graphics.Typeface;
			static defaultFromStyle(arg1: number): android.graphics.Typeface;
			hashCode(): number;
			equals(arg1: any): boolean;
			static create(arg1: android.graphics.Typeface, arg2: number): android.graphics.Typeface;
			static create(arg1: java.lang.String, arg2: number): android.graphics.Typeface;
			static create(arg1: string, arg2: number): android.graphics.Typeface;
			getStyle(): number;
			isBold(): boolean;
			isItalic(): boolean;
		}
		export class BitmapRegionDecoder extends java.lang.Object {
			static class: java.lang.Class<android.graphics.BitmapRegionDecoder>;
			recycle(): void;
			isRecycled(): boolean;
			decodeRegion(arg1: android.graphics.Rect, arg2: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
			static newInstance(arg1: java.lang.String, arg2: boolean): android.graphics.BitmapRegionDecoder;
			static newInstance(arg1: string, arg2: boolean): android.graphics.BitmapRegionDecoder;
			static newInstance(arg1: java.io.FileDescriptor, arg2: boolean): android.graphics.BitmapRegionDecoder;
			static newInstance(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: boolean): android.graphics.BitmapRegionDecoder;
			static newInstance(arg1: java.io.InputStream, arg2: boolean): android.graphics.BitmapRegionDecoder;
			getHeight(): number;
			getWidth(): number;
		}
		export class PixelFormat extends java.lang.Object {
			constructor();
			static UNKNOWN: number;
			static TRANSLUCENT: number;
			static TRANSPARENT: number;
			static OPAQUE: number;
			static RGBA_8888: number;
			static RGBX_8888: number;
			static RGB_888: number;
			static RGB_565: number;
			static RGBA_5551: number;
			static RGBA_4444: number;
			static A_8: number;
			static L_8: number;
			static LA_88: number;
			static RGB_332: number;
			static YCbCr_422_SP: number;
			static YCbCr_420_SP: number;
			static YCbCr_422_I: number;
			static JPEG: number;
			bytesPerPixel: number;
			bitsPerPixel: number;
			static class: java.lang.Class<android.graphics.PixelFormat>;
			static formatHasAlpha(arg1: number): boolean;
			static getPixelFormatInfo(arg1: number, arg2: android.graphics.PixelFormat): void;
		}
		export class AvoidXfermode extends android.graphics.Xfermode {
			constructor(arg1: number, arg2: number, arg3: android.graphics.AvoidXfermode.Mode);
			static class: java.lang.Class<android.graphics.AvoidXfermode>;
		}
		export module AvoidXfermode {
			export enum Mode {
				AVOID,
				TARGET
			}
			export module Mode {
				export function valueOf(arg1: java.lang.String): android.graphics.AvoidXfermode.Mode;
				export function valueOf(arg1: string): android.graphics.AvoidXfermode.Mode;
				export function values(): native.Array<android.graphics.AvoidXfermode.Mode>;
			}
		}
		export class CornerPathEffect extends android.graphics.PathEffect {
			constructor(arg1: native.Float);
			static class: java.lang.Class<android.graphics.CornerPathEffect>;
		}
		export class Canvas extends java.lang.Object {
			constructor();
			constructor(arg1: android.graphics.Bitmap);
			static MATRIX_SAVE_FLAG: number;
			static CLIP_SAVE_FLAG: number;
			static HAS_ALPHA_LAYER_SAVE_FLAG: number;
			static FULL_COLOR_LAYER_SAVE_FLAG: number;
			static CLIP_TO_LAYER_SAVE_FLAG: number;
			static ALL_SAVE_FLAG: number;
			static class: java.lang.Class<android.graphics.Canvas>;
			DrawFilter: android.graphics.DrawFilter;
			Density: number;
			Matrix: android.graphics.Matrix;
			skew(arg1: native.Float, arg2: native.Float): void;
			setBitmap(arg1: android.graphics.Bitmap): void;
			isHardwareAccelerated(): boolean;
			drawBitmapMesh(arg1: android.graphics.Bitmap, arg2: number, arg3: number, arg4: native.Array<native.Float>, arg5: number, arg6: native.Array<number>, arg7: number, arg8: android.graphics.Paint): void;
			getMaximumBitmapWidth(): number;
			saveLayerAlpha(arg1: android.graphics.RectF, arg2: number, arg3: number): number;
			saveLayerAlpha(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: number, arg6: number): number;
			restoreToCount(arg1: number): void;
			drawTextOnPath(arg1: native.Array<string>, arg2: number, arg3: number, arg4: android.graphics.Path, arg5: native.Float, arg6: native.Float, arg7: android.graphics.Paint): void;
			drawTextOnPath(arg1: java.lang.String, arg2: android.graphics.Path, arg3: native.Float, arg4: native.Float, arg5: android.graphics.Paint): void;
			drawTextOnPath(arg1: string, arg2: android.graphics.Path, arg3: native.Float, arg4: native.Float, arg5: android.graphics.Paint): void;
			getMaximumBitmapHeight(): number;
			setDensity(arg1: number): void;
			getDensity(): number;
			quickReject(arg1: android.graphics.RectF, arg2: android.graphics.Canvas.EdgeType): boolean;
			quickReject(arg1: android.graphics.Path, arg2: android.graphics.Canvas.EdgeType): boolean;
			quickReject(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: android.graphics.Canvas.EdgeType): boolean;
			getSaveCount(): number;
			getDrawFilter(): android.graphics.DrawFilter;
			setMatrix(arg1: android.graphics.Matrix): void;
			clipPath(arg1: android.graphics.Path): boolean;
			clipPath(arg1: android.graphics.Path, arg2: android.graphics.Region.Op): boolean;
			setDrawFilter(arg1: android.graphics.DrawFilter): void;
			drawRGB(arg1: number, arg2: number, arg3: number): void;
			drawARGB(arg1: number, arg2: number, arg3: number, arg4: number): void;
			drawColor(arg1: number): void;
			drawColor(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			drawPaint(arg1: android.graphics.Paint): void;
			drawPoints(arg1: native.Array<native.Float>, arg2: android.graphics.Paint): void;
			drawPoints(arg1: native.Array<native.Float>, arg2: number, arg3: number, arg4: android.graphics.Paint): void;
			drawPoint(arg1: native.Float, arg2: native.Float, arg3: android.graphics.Paint): void;
			drawLines(arg1: native.Array<native.Float>, arg2: android.graphics.Paint): void;
			drawLines(arg1: native.Array<native.Float>, arg2: number, arg3: number, arg4: android.graphics.Paint): void;
			drawCircle(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: android.graphics.Paint): void;
			saveLayer(arg1: android.graphics.RectF, arg2: android.graphics.Paint, arg3: number): number;
			saveLayer(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: android.graphics.Paint, arg6: number): number;
			drawText(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: native.Float, arg5: native.Float, arg6: android.graphics.Paint): void;
			drawText(arg1: string, arg2: number, arg3: number, arg4: native.Float, arg5: native.Float, arg6: android.graphics.Paint): void;
			drawText(arg1: java.lang.String, arg2: native.Float, arg3: native.Float, arg4: android.graphics.Paint): void;
			drawText(arg1: string, arg2: native.Float, arg3: native.Float, arg4: android.graphics.Paint): void;
			drawText(arg1: java.lang.String, arg2: number, arg3: number, arg4: native.Float, arg5: native.Float, arg6: android.graphics.Paint): void;
			drawText(arg1: native.Array<string>, arg2: number, arg3: number, arg4: native.Float, arg5: native.Float, arg6: android.graphics.Paint): void;
			drawBitmap(arg1: native.Array<number>, arg2: number, arg3: number, arg4: native.Float, arg5: native.Float, arg6: number, arg7: number, arg8: boolean, arg9: android.graphics.Paint): void;
			drawBitmap(arg1: android.graphics.Bitmap, arg2: android.graphics.Rect, arg3: android.graphics.Rect, arg4: android.graphics.Paint): void;
			drawBitmap(arg1: android.graphics.Bitmap, arg2: android.graphics.Matrix, arg3: android.graphics.Paint): void;
			drawBitmap(arg1: android.graphics.Bitmap, arg2: android.graphics.Rect, arg3: android.graphics.RectF, arg4: android.graphics.Paint): void;
			drawBitmap(arg1: native.Array<number>, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean, arg9: android.graphics.Paint): void;
			drawBitmap(arg1: android.graphics.Bitmap, arg2: native.Float, arg3: native.Float, arg4: android.graphics.Paint): void;
			drawPath(arg1: android.graphics.Path, arg2: android.graphics.Paint): void;
			drawPicture(arg1: android.graphics.Picture): void;
			drawPicture(arg1: android.graphics.Picture, arg2: android.graphics.RectF): void;
			drawPicture(arg1: android.graphics.Picture, arg2: android.graphics.Rect): void;
			drawPosText(arg1: java.lang.String, arg2: native.Array<native.Float>, arg3: android.graphics.Paint): void;
			drawPosText(arg1: string, arg2: native.Array<native.Float>, arg3: android.graphics.Paint): void;
			drawPosText(arg1: native.Array<string>, arg2: number, arg3: number, arg4: native.Array<native.Float>, arg5: android.graphics.Paint): void;
			drawVertices(arg1: android.graphics.Canvas.VertexMode, arg2: number, arg3: native.Array<native.Float>, arg4: number, arg5: native.Array<native.Float>, arg6: number, arg7: native.Array<number>, arg8: number, arg9: native.Array<native.Short>, arg10: number, arg11: number, arg12: android.graphics.Paint): void;
			concat(arg1: android.graphics.Matrix): void;
			save(): number;
			save(arg1: number): number;
			rotate(arg1: native.Float): void;
			rotate(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			isOpaque(): boolean;
			scale(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			scale(arg1: native.Float, arg2: native.Float): void;
			getHeight(): number;
			getWidth(): number;
			translate(arg1: native.Float, arg2: native.Float): void;
			clipRect(arg1: android.graphics.RectF): boolean;
			clipRect(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: android.graphics.Region.Op): boolean;
			clipRect(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): boolean;
			clipRect(arg1: number, arg2: number, arg3: number, arg4: number): boolean;
			clipRect(arg1: android.graphics.Rect): boolean;
			clipRect(arg1: android.graphics.RectF, arg2: android.graphics.Region.Op): boolean;
			clipRect(arg1: android.graphics.Rect, arg2: android.graphics.Region.Op): boolean;
			getMatrix(arg1: android.graphics.Matrix): void;
			getMatrix(): android.graphics.Matrix;
			drawArc(arg1: android.graphics.RectF, arg2: native.Float, arg3: native.Float, arg4: boolean, arg5: android.graphics.Paint): void;
			drawLine(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: android.graphics.Paint): void;
			drawOval(arg1: android.graphics.RectF, arg2: android.graphics.Paint): void;
			drawRect(arg1: android.graphics.RectF, arg2: android.graphics.Paint): void;
			drawRect(arg1: android.graphics.Rect, arg2: android.graphics.Paint): void;
			drawRect(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: android.graphics.Paint): void;
			drawRoundRect(arg1: android.graphics.RectF, arg2: native.Float, arg3: native.Float, arg4: android.graphics.Paint): void;
			clipRegion(arg1: android.graphics.Region): boolean;
			clipRegion(arg1: android.graphics.Region, arg2: android.graphics.Region.Op): boolean;
			getClipBounds(arg1: android.graphics.Rect): boolean;
			getClipBounds(): android.graphics.Rect;
			restore(): void;
		}
		export module Canvas {
			export enum VertexMode {
				TRIANGLES,
				TRIANGLE_FAN,
				TRIANGLE_STRIP
			}
			export module VertexMode {
				export function valueOf(arg1: java.lang.String): android.graphics.Canvas.VertexMode;
				export function valueOf(arg1: string): android.graphics.Canvas.VertexMode;
				export function values(): native.Array<android.graphics.Canvas.VertexMode>;
			}
			export enum EdgeType {
				AA,
				BW
			}
			export module EdgeType {
				export function valueOf(arg1: java.lang.String): android.graphics.Canvas.EdgeType;
				export function valueOf(arg1: string): android.graphics.Canvas.EdgeType;
				export function values(): native.Array<android.graphics.Canvas.EdgeType>;
			}
		}
	}
	export module accessibilityservice {
		export class AccessibilityService extends android.app.Service {
			constructor();
			static GESTURE_SWIPE_UP: number;
			static GESTURE_SWIPE_DOWN: number;
			static GESTURE_SWIPE_LEFT: number;
			static GESTURE_SWIPE_RIGHT: number;
			static GESTURE_SWIPE_LEFT_AND_RIGHT: number;
			static GESTURE_SWIPE_RIGHT_AND_LEFT: number;
			static GESTURE_SWIPE_UP_AND_DOWN: number;
			static GESTURE_SWIPE_DOWN_AND_UP: number;
			static GESTURE_SWIPE_LEFT_AND_UP: number;
			static GESTURE_SWIPE_LEFT_AND_DOWN: number;
			static GESTURE_SWIPE_RIGHT_AND_UP: number;
			static GESTURE_SWIPE_RIGHT_AND_DOWN: number;
			static GESTURE_SWIPE_UP_AND_LEFT: number;
			static GESTURE_SWIPE_UP_AND_RIGHT: number;
			static GESTURE_SWIPE_DOWN_AND_LEFT: number;
			static GESTURE_SWIPE_DOWN_AND_RIGHT: number;
			static SERVICE_INTERFACE: java.lang.String;
			static SERVICE_META_DATA: java.lang.String;
			static GLOBAL_ACTION_BACK: number;
			static GLOBAL_ACTION_HOME: number;
			static GLOBAL_ACTION_RECENTS: number;
			static GLOBAL_ACTION_NOTIFICATIONS: number;
			static GLOBAL_ACTION_QUICK_SETTINGS: number;
			static class: java.lang.Class<android.accessibilityservice.AccessibilityService>;
			ServiceInfo: android.accessibilityservice.AccessibilityServiceInfo;
			onInterrupt(): void;
			setServiceInfo(arg1: android.accessibilityservice.AccessibilityServiceInfo): void;
			getRootInActiveWindow(): android.view.accessibility.AccessibilityNodeInfo;
			onAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			performGlobalAction(arg1: number): boolean;
			getServiceInfo(): android.accessibilityservice.AccessibilityServiceInfo;
			onBind(arg1: android.content.Intent): android.os.IIBinder;
		}
		export class AccessibilityServiceInfo extends java.lang.Object implements android.os.IParcelable {
			constructor();
			static FEEDBACK_SPOKEN: number;
			static FEEDBACK_HAPTIC: number;
			static FEEDBACK_AUDIBLE: number;
			static FEEDBACK_VISUAL: number;
			static FEEDBACK_GENERIC: number;
			static FEEDBACK_BRAILLE: number;
			static FEEDBACK_ALL_MASK: number;
			static DEFAULT: number;
			static FLAG_INCLUDE_NOT_IMPORTANT_VIEWS: number;
			static FLAG_REQUEST_TOUCH_EXPLORATION_MODE: number;
			eventTypes: number;
			packageNames: native.Array<java.lang.String>;
			feedbackType: number;
			notificationTimeout: native.Long;
			flags: number;
			static CREATOR: android.os.Parcelable.ICreator<android.accessibilityservice.AccessibilityServiceInfo>;
			static class: java.lang.Class<android.accessibilityservice.AccessibilityServiceInfo>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			static flagToString(arg1: number): string;
			getResolveInfo(): android.content.pm.ResolveInfo;
			loadDescription(arg1: android.content.pm.PackageManager): string;
			describeContents(): number;
			static feedbackTypeToString(arg1: number): string;
			getCanRetrieveWindowContent(): boolean;
			getSettingsActivityName(): string;
			toString(): string;
			getId(): string;
			getDescription(): string;
		}
	}
	export module widget {
		export interface IAdapter {
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			isEmpty(): boolean;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export module IAdapter {
			var IGNORE_ITEM_VIEW_TYPE: number;
			var NO_SELECTION: number;
		}
		export class AdapterViewFlipper extends android.widget.AdapterViewAnimator {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.AdapterViewFlipper>;
			FlipInterval: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setFlipInterval(arg1: number): void;
			getFlipInterval(): number;
			showNext(): void;
			showPrevious(): void;
			setAdapter(arg1: android.widget.IAdapter): void;
			setAutoStart(arg1: boolean): void;
			isAutoStart(): boolean;
			startFlipping(): void;
			stopFlipping(): void;
			isFlipping(): boolean;
			fyiWillBeAdvancedByHostKThx(): void;
		}
		export class Switch extends android.widget.CompoundButton {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.Switch>;
			TextOn: java.lang.ICharSequence;
			TrackDrawable: android.graphics.drawable.Drawable;
			ThumbTextPadding: number;
			ThumbDrawable: android.graphics.drawable.Drawable;
			SwitchPadding: number;
			SwitchMinWidth: number;
			TextOff: java.lang.ICharSequence;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onMeasure(arg1: number, arg2: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			jumpDrawablesToCurrentState(): void;
			getCompoundPaddingLeft(): number;
			getCompoundPaddingRight(): number;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			setChecked(arg1: boolean): void;
			getTextOn(): java.lang.ICharSequence;
			getTextOff(): java.lang.ICharSequence;
			setTextOff(arg1: java.lang.ICharSequence): void;
			setTextOff(arg1: string): void;
			setTextOn(arg1: java.lang.ICharSequence): void;
			setTextOn(arg1: string): void;
			setSwitchTextAppearance(arg1: android.content.Context, arg2: number): void;
			getThumbTextPadding(): number;
			setSwitchTypeface(arg1: android.graphics.Typeface): void;
			setSwitchTypeface(arg1: android.graphics.Typeface, arg2: number): void;
			setTrackResource(arg1: number): void;
			setSwitchPadding(arg1: number): void;
			getSwitchPadding(): number;
			setTrackDrawable(arg1: android.graphics.drawable.Drawable): void;
			getTrackDrawable(): android.graphics.drawable.Drawable;
			setThumbDrawable(arg1: android.graphics.drawable.Drawable): void;
			getThumbDrawable(): android.graphics.drawable.Drawable;
			setSwitchMinWidth(arg1: number): void;
			getSwitchMinWidth(): number;
			setThumbTextPadding(arg1: number): void;
			setThumbResource(arg1: number): void;
		}
		export class ZoomButtonsController extends java.lang.Object implements android.view.View.IOnTouchListener {
			constructor(arg1: android.view.View);
			static class: java.lang.Class<android.widget.ZoomButtonsController>;
			setZoomInEnabled(arg1: boolean): void;
			setAutoDismissed(arg1: boolean): void;
			setOnZoomListener(arg1: android.widget.ZoomButtonsController.IOnZoomListener): void;
			setZoomOutEnabled(arg1: boolean): void;
			isAutoDismissed(): boolean;
			getZoomControls(): android.view.View;
			setZoomSpeed(arg1: native.Long): void;
			onTouch(arg1: android.view.View, arg2: android.view.MotionEvent): boolean;
			getContainer(): android.view.ViewGroup;
			isVisible(): boolean;
			setVisible(arg1: boolean): void;
			setFocusable(arg1: boolean): void;
		}
		export module ZoomButtonsController {
			export class OnZoomListener implements android.widget.ZoomButtonsController.IOnZoomListener {
				constructor(implementation: android.widget.ZoomButtonsController.IOnZoomListener);
				onVisibilityChanged(arg1: boolean): void;
				onZoom(arg1: boolean): void;
			}
			export interface IOnZoomListener {
				onVisibilityChanged(arg1: boolean): void;
				onZoom(arg1: boolean): void;
			}
		}
		export class ResourceCursorTreeAdapter extends android.widget.CursorTreeAdapter {
			constructor(arg1: android.content.Context, arg2: android.database.ICursor, arg3: number, arg4: number, arg5: number, arg6: number);
			constructor(arg1: android.content.Context, arg2: android.database.ICursor, arg3: number, arg4: number);
			constructor(arg1: android.content.Context, arg2: android.database.ICursor, arg3: number, arg4: number, arg5: number);
			static class: java.lang.Class<android.widget.ResourceCursorTreeAdapter>;
			newChildView(arg1: android.content.Context, arg2: android.database.ICursor, arg3: boolean, arg4: android.view.ViewGroup): android.view.View;
			newGroupView(arg1: android.content.Context, arg2: android.database.ICursor, arg3: boolean, arg4: android.view.ViewGroup): android.view.View;
		}
		export class CalendarView extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.CalendarView>;
			FirstDayOfWeek: number;
			ShownWeekCount: number;
			WeekDayTextAppearance: number;
			DateTextAppearance: number;
			WeekNumberColor: number;
			UnfocusedMonthDateColor: number;
			SelectedWeekBackgroundColor: number;
			SelectedDateVerticalBar: android.graphics.drawable.Drawable;
			ShowWeekNumber: boolean;
			FocusedMonthDateColor: number;
			WeekSeparatorLineColor: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setSelectedWeekBackgroundColor(arg1: number): void;
			getSelectedWeekBackgroundColor(): number;
			getMinDate(): any;
			setMinDate(arg1: native.Long): void;
			getMaxDate(): any;
			setMaxDate(arg1: native.Long): void;
			setUnfocusedMonthDateColor(arg1: number): void;
			getUnfocusedMonthDateColor(): number;
			getWeekSeparatorLineColor(): number;
			setSelectedDateVerticalBar(arg1: android.graphics.drawable.Drawable): void;
			setSelectedDateVerticalBar(arg1: number): void;
			getSelectedDateVerticalBar(): android.graphics.drawable.Drawable;
			setWeekSeparatorLineColor(arg1: number): void;
			getFocusedMonthDateColor(): number;
			setFocusedMonthDateColor(arg1: number): void;
			setWeekDayTextAppearance(arg1: number): void;
			getWeekDayTextAppearance(): number;
			setOnDateChangeListener(arg1: android.widget.CalendarView.IOnDateChangeListener): void;
			setShownWeekCount(arg1: number): void;
			getShowWeekNumber(): boolean;
			setShowWeekNumber(arg1: boolean): void;
			getShownWeekCount(): number;
			getDateTextAppearance(): number;
			setDateTextAppearance(arg1: number): void;
			setWeekNumberColor(arg1: number): void;
			getWeekNumberColor(): number;
			getDate(): any;
			isEnabled(): boolean;
			setEnabled(arg1: boolean): void;
			setDate(arg1: native.Long): void;
			setDate(arg1: native.Long, arg2: boolean, arg3: boolean): void;
			getFirstDayOfWeek(): number;
			setFirstDayOfWeek(arg1: number): void;
		}
		export module CalendarView {
			export class OnDateChangeListener implements android.widget.CalendarView.IOnDateChangeListener {
				constructor(implementation: android.widget.CalendarView.IOnDateChangeListener);
				onSelectedDayChange(arg1: android.widget.CalendarView, arg2: number, arg3: number, arg4: number): void;
			}
			export interface IOnDateChangeListener {
				onSelectedDayChange(arg1: android.widget.CalendarView, arg2: number, arg3: number, arg4: number): void;
			}
		}
		export class DatePicker extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.DatePicker>;
			SpinnersShown: boolean;
			CalendarViewShown: boolean;
			updateDate(arg1: number, arg2: number, arg3: number): void;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			getCalendarView(): android.widget.CalendarView;
			setCalendarViewShown(arg1: boolean): void;
			getSpinnersShown(): boolean;
			setSpinnersShown(arg1: boolean): void;
			getCalendarViewShown(): boolean;
			onPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			getMinDate(): any;
			setMinDate(arg1: native.Long): void;
			getMaxDate(): any;
			setMaxDate(arg1: native.Long): void;
			init(arg1: number, arg2: number, arg3: number, arg4: android.widget.DatePicker.IOnDateChangedListener): void;
			isEnabled(): boolean;
			setEnabled(arg1: boolean): void;
			getMonth(): number;
			getYear(): number;
			getDayOfMonth(): number;
		}
		export module DatePicker {
			export class OnDateChangedListener implements android.widget.DatePicker.IOnDateChangedListener {
				constructor(implementation: android.widget.DatePicker.IOnDateChangedListener);
				onDateChanged(arg1: android.widget.DatePicker, arg2: number, arg3: number, arg4: number): void;
			}
			export interface IOnDateChangedListener {
				onDateChanged(arg1: android.widget.DatePicker, arg2: number, arg3: number, arg4: number): void;
			}
		}
		export class AdapterViewAnimator extends android.widget.AdapterView<android.widget.IAdapter> implements android.widget.IAdvanceable {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.AdapterViewAnimator>;
			InAnimation: android.animation.ObjectAnimator;
			OutAnimation: android.animation.ObjectAnimator;
			DisplayedChild: number;
			Adapter: android.widget.IAdapter;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			showNext(): void;
			showPrevious(): void;
			onRemoteAdapterConnected(): boolean;
			onRemoteAdapterDisconnected(): void;
			deferNotifyDataSetChanged(): void;
			getCurrentView(): android.view.View;
			setDisplayedChild(arg1: number): void;
			setRemoteViewsAdapter(arg1: android.content.Intent): void;
			onSaveInstanceState(): android.os.IParcelable;
			onRestoreInstanceState(arg1: android.os.IParcelable): void;
			getAdapter(): android.widget.IAdapter;
			setAdapter(arg1: android.widget.IAdapter): void;
			setSelection(arg1: number): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			getSelectedView(): android.view.View;
			advance(): void;
			fyiWillBeAdvancedByHostKThx(): void;
			setOutAnimation(arg1: android.content.Context, arg2: number): void;
			setOutAnimation(arg1: android.animation.ObjectAnimator): void;
			getInAnimation(): android.animation.ObjectAnimator;
			getOutAnimation(): android.animation.ObjectAnimator;
			setAnimateFirstView(arg1: boolean): void;
			setInAnimation(arg1: android.animation.ObjectAnimator): void;
			setInAnimation(arg1: android.content.Context, arg2: number): void;
			getDisplayedChild(): number;
			getBaseline(): number;
		}
		export class GridLayout extends android.view.ViewGroup {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static HORIZONTAL: number;
			static VERTICAL: number;
			static UNDEFINED: number;
			static ALIGN_BOUNDS: number;
			static ALIGN_MARGINS: number;
			static TOP: android.widget.GridLayout.Alignment;
			static BOTTOM: android.widget.GridLayout.Alignment;
			static START: android.widget.GridLayout.Alignment;
			static END: android.widget.GridLayout.Alignment;
			static LEFT: android.widget.GridLayout.Alignment;
			static RIGHT: android.widget.GridLayout.Alignment;
			static CENTER: android.widget.GridLayout.Alignment;
			static BASELINE: android.widget.GridLayout.Alignment;
			static FILL: android.widget.GridLayout.Alignment;
			static class: java.lang.Class<android.widget.GridLayout>;
			AlignmentMode: number;
			Orientation: number;
			RowCount: number;
			UseDefaultMargins: boolean;
			ColumnCount: number;
			static spec(arg1: number, arg2: number): android.widget.GridLayout.Spec;
			static spec(arg1: number): android.widget.GridLayout.Spec;
			static spec(arg1: number, arg2: number, arg3: android.widget.GridLayout.Alignment): android.widget.GridLayout.Spec;
			static spec(arg1: number, arg2: android.widget.GridLayout.Alignment): android.widget.GridLayout.Spec;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			requestLayout(): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.GridLayout.LayoutParams;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			isColumnOrderPreserved(): boolean;
			setColumnOrderPreserved(arg1: boolean): void;
			setAlignmentMode(arg1: number): void;
			getUseDefaultMargins(): boolean;
			setRowOrderPreserved(arg1: boolean): void;
			getAlignmentMode(): number;
			isRowOrderPreserved(): boolean;
			setUseDefaultMargins(arg1: boolean): void;
			getOrientation(): number;
			getColumnCount(): number;
			setOrientation(arg1: number): void;
			getRowCount(): number;
			setColumnCount(arg1: number): void;
			setRowCount(arg1: number): void;
		}
		export module GridLayout {
			export class Spec extends java.lang.Object {
				static class: java.lang.Class<android.widget.GridLayout.Spec>;
				hashCode(): number;
				equals(arg1: any): boolean;
			}
			export class Alignment extends java.lang.Object {
				static class: java.lang.Class<android.widget.GridLayout.Alignment>;
			}
			export class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
				constructor(arg1: android.widget.GridLayout.LayoutParams);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: android.widget.GridLayout.Spec, arg2: android.widget.GridLayout.Spec);
				constructor();
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: android.view.ViewGroup.MarginLayoutParams);
				rowSpec: android.widget.GridLayout.Spec;
				columnSpec: android.widget.GridLayout.Spec;
				static class: java.lang.Class<android.widget.GridLayout.LayoutParams>;
				setGravity(arg1: number): void;
				hashCode(): number;
				equals(arg1: any): boolean;
			}
		}
		export class Toast extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static LENGTH_SHORT: number;
			static LENGTH_LONG: number;
			static class: java.lang.Class<android.widget.Toast>;
			View: android.view.View;
			Duration: number;
			setGravity(arg1: number, arg2: number, arg3: number): void;
			getHorizontalMargin(): number;
			getVerticalMargin(): number;
			getDuration(): number;
			getGravity(): number;
			static makeText(arg1: android.content.Context, arg2: number, arg3: number): android.widget.Toast;
			static makeText(arg1: android.content.Context, arg2: java.lang.ICharSequence, arg3: number): android.widget.Toast;
			static makeText(arg1: android.content.Context, arg2: string, arg3: number): android.widget.Toast;
			setDuration(arg1: number): void;
			getYOffset(): number;
			getXOffset(): number;
			show(): void;
			setText(arg1: number): void;
			setText(arg1: java.lang.ICharSequence): void;
			setText(arg1: string): void;
			getView(): android.view.View;
			cancel(): void;
			setMargin(arg1: native.Float, arg2: native.Float): void;
			setView(arg1: android.view.View): void;
		}
		export interface IFilterQueryProvider {
			runQuery(arg1: string): android.database.ICursor;
		}
		export class AlphabetIndexer extends android.database.DataSetObserver implements android.widget.ISectionIndexer {
			constructor(arg1: android.database.ICursor, arg2: number, arg3: java.lang.ICharSequence);
			constructor(arg1: android.database.ICursor, arg2: number, arg3: string);
			static class: java.lang.Class<android.widget.AlphabetIndexer>;
			getSections(): native.Array<any>;
			onInvalidated(): void;
			onChanged(): void;
			getSectionForPosition(arg1: number): number;
			getPositionForSection(arg1: number): number;
			setCursor(arg1: android.database.ICursor): void;
		}
		export class SearchView extends android.widget.LinearLayout implements android.view.ICollapsibleActionView {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.SearchView>;
			MaxWidth: number;
			InputType: number;
			QueryHint: java.lang.ICharSequence;
			SuggestionsAdapter: android.widget.CursorAdapter;
			ImeOptions: number;
			setOnQueryTextFocusChangeListener(arg1: android.view.View.IOnFocusChangeListener): void;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			getImeOptions(): number;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			setQueryHint(arg1: java.lang.ICharSequence): void;
			setQueryHint(arg1: string): void;
			getQueryHint(): java.lang.ICharSequence;
			isIconified(): boolean;
			getInputType(): number;
			setInputType(arg1: number): void;
			setQuery(arg1: java.lang.ICharSequence, arg2: boolean): void;
			setQuery(arg1: string, arg2: boolean): void;
			setIconified(arg1: boolean): void;
			setImeOptions(arg1: number): void;
			setOnQueryTextListener(arg1: android.widget.SearchView.IOnQueryTextListener): void;
			setOnSuggestionListener(arg1: android.widget.SearchView.IOnSuggestionListener): void;
			setSearchableInfo(arg1: android.app.SearchableInfo): void;
			setOnCloseListener(arg1: android.widget.SearchView.IOnCloseListener): void;
			isIconfiedByDefault(): boolean;
			getSuggestionsAdapter(): android.widget.CursorAdapter;
			setIconifiedByDefault(arg1: boolean): void;
			setSuggestionsAdapter(arg1: android.widget.CursorAdapter): void;
			onWindowFocusChanged(arg1: boolean): void;
			isSubmitButtonEnabled(): boolean;
			onActionViewCollapsed(): void;
			onActionViewExpanded(): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			isQueryRefinementEnabled(): boolean;
			setOnSearchClickListener(arg1: android.view.View.IOnClickListener): void;
			setQueryRefinementEnabled(arg1: boolean): void;
			onRtlPropertiesChanged(arg1: number): void;
			setSubmitButtonEnabled(arg1: boolean): void;
			getQuery(): java.lang.ICharSequence;
			getMaxWidth(): number;
			setMaxWidth(arg1: number): void;
		}
		export module SearchView {
			export class OnSuggestionListener implements android.widget.SearchView.IOnSuggestionListener {
				constructor(implementation: android.widget.SearchView.IOnSuggestionListener);
				onSuggestionClick(arg1: number): boolean;
				onSuggestionSelect(arg1: number): boolean;
			}
			export interface IOnQueryTextListener {
				onQueryTextChange(arg1: string): boolean;
				onQueryTextSubmit(arg1: string): boolean;
			}
			export interface IOnCloseListener {
				onClose(): boolean;
			}
			export interface IOnSuggestionListener {
				onSuggestionClick(arg1: number): boolean;
				onSuggestionSelect(arg1: number): boolean;
			}
			export class OnQueryTextListener implements android.widget.SearchView.IOnQueryTextListener {
				constructor(implementation: android.widget.SearchView.IOnQueryTextListener);
				onQueryTextChange(arg1: java.lang.String): boolean;
				onQueryTextChange(arg1: string): boolean;
				onQueryTextSubmit(arg1: java.lang.String): boolean;
				onQueryTextSubmit(arg1: string): boolean;
			}
			export class OnCloseListener implements android.widget.SearchView.IOnCloseListener {
				constructor(implementation: android.widget.SearchView.IOnCloseListener);
				onClose(): boolean;
			}
		}
		export class ArrayAdapter<T> extends android.widget.BaseAdapter implements android.widget.IFilterable {
			constructor(arg1: android.content.Context, arg2: number);
			constructor(arg1: android.content.Context, arg2: number, arg3: number, arg4: java.util.IList<T>);
			constructor(arg1: android.content.Context, arg2: number, arg3: number, arg4: native.Array<T>);
			constructor(arg1: android.content.Context, arg2: number, arg3: native.Array<T>);
			constructor(arg1: android.content.Context, arg2: number, arg3: java.util.IList<T>);
			constructor(arg1: android.content.Context, arg2: number, arg3: number);
			static class: java.lang.Class<android.widget.ArrayAdapter<any>>;
			setDropDownViewResource(arg1: number): void;
			notifyDataSetChanged(): void;
			getDropDownView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getItemId(arg1: number): any;
			setNotifyOnChange(arg1: boolean): void;
			static createFromResource(arg1: android.content.Context, arg2: number, arg3: number): android.widget.ArrayAdapter<java.lang.ICharSequence>;
			add(arg1: T): void;
			addAll(arg1: java.util.ICollection<any>): void;
			addAll(arg1: native.Array<T>): void;
			remove(arg1: T): void;
			getContext(): android.content.Context;
			clear(): void;
			insert(arg1: T, arg2: number): void;
			sort(arg1: java.util.IComparator<any>): void;
			getFilter(): android.widget.Filter;
			getItem(arg1: number): T;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getPosition(arg1: T): number;
			getCount(): number;
		}
		export class TabHost extends android.widget.FrameLayout implements android.view.ViewTreeObserver.IOnTouchModeChangeListener {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.TabHost>;
			CurrentTab: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			dispatchWindowFocusChanged(arg1: boolean): void;
			setOnTabChangedListener(arg1: android.widget.TabHost.IOnTabChangeListener): void;
			sendAccessibilityEvent(arg1: number): void;
			getCurrentTabTag(): string;
			getCurrentView(): android.view.View;
			getTabContentView(): android.widget.FrameLayout;
			setCurrentTabByTag(arg1: java.lang.String): void;
			setCurrentTabByTag(arg1: string): void;
			getCurrentTabView(): android.view.View;
			onTouchModeChanged(arg1: boolean): void;
			getTabWidget(): android.widget.TabWidget;
			getCurrentTab(): number;
			clearAllTabs(): void;
			setCurrentTab(arg1: number): void;
			newTabSpec(arg1: java.lang.String): android.widget.TabHost.TabSpec;
			newTabSpec(arg1: string): android.widget.TabHost.TabSpec;
			setup(): void;
			setup(arg1: android.app.LocalActivityManager): void;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			addTab(arg1: android.widget.TabHost.TabSpec): void;
		}
		export module TabHost {
			export interface ITabContentFactory {
				createTabContent(arg1: string): android.view.View;
			}
			export class TabSpec extends java.lang.Object {
				static class: java.lang.Class<android.widget.TabHost.TabSpec>;
				setContent(arg1: android.content.Intent): android.widget.TabHost.TabSpec;
				setContent(arg1: android.widget.TabHost.ITabContentFactory): android.widget.TabHost.TabSpec;
				setContent(arg1: number): android.widget.TabHost.TabSpec;
				setIndicator(arg1: android.view.View): android.widget.TabHost.TabSpec;
				setIndicator(arg1: java.lang.ICharSequence, arg2: android.graphics.drawable.Drawable): android.widget.TabHost.TabSpec;
				setIndicator(arg1: string, arg2: android.graphics.drawable.Drawable): android.widget.TabHost.TabSpec;
				setIndicator(arg1: java.lang.ICharSequence): android.widget.TabHost.TabSpec;
				setIndicator(arg1: string): android.widget.TabHost.TabSpec;
				getTag(): string;
			}
			export class OnTabChangeListener implements android.widget.TabHost.IOnTabChangeListener {
				constructor(implementation: android.widget.TabHost.IOnTabChangeListener);
				onTabChanged(arg1: java.lang.String): void;
				onTabChanged(arg1: string): void;
			}
			export class TabContentFactory implements android.widget.TabHost.ITabContentFactory {
				constructor(implementation: android.widget.TabHost.ITabContentFactory);
				createTabContent(arg1: java.lang.String): android.view.View;
				createTabContent(arg1: string): android.view.View;
			}
			export interface IOnTabChangeListener {
				onTabChanged(arg1: string): void;
			}
		}
		export class ViewSwitcher extends android.widget.ViewAnimator {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.ViewSwitcher>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			getNextView(): android.view.View;
			reset(): void;
			setFactory(arg1: android.widget.ViewSwitcher.IViewFactory): void;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
			addView(arg1: android.view.View, arg2: number): void;
			addView(arg1: android.view.View): void;
		}
		export module ViewSwitcher {
			export class ViewFactory implements android.widget.ViewSwitcher.IViewFactory {
				constructor(implementation: android.widget.ViewSwitcher.IViewFactory);
				makeView(): android.view.View;
			}
			export interface IViewFactory {
				makeView(): android.view.View;
			}
		}
		export interface IFilterable {
			getFilter(): android.widget.Filter;
		}
		export class DialerFilter extends android.widget.RelativeLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static DIGITS_AND_LETTERS: number;
			static DIGITS_AND_LETTERS_NO_DIGITS: number;
			static DIGITS_AND_LETTERS_NO_LETTERS: number;
			static DIGITS_ONLY: number;
			static LETTERS_ONLY: number;
			static class: java.lang.Class<android.widget.DialerFilter>;
			Mode: number;
			getMode(): number;
			setMode(arg1: number): void;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			setLettersWatcher(arg1: android.text.ITextWatcher): void;
			removeFilterWatcher(arg1: android.text.ITextWatcher): void;
			isQwertyKeyboard(): boolean;
			setFilterWatcher(arg1: android.text.ITextWatcher): void;
			setDigitsWatcher(arg1: android.text.ITextWatcher): void;
			getFilterText(): java.lang.ICharSequence;
			getLetters(): java.lang.ICharSequence;
			getDigits(): java.lang.ICharSequence;
			clearText(): void;
			append(arg1: java.lang.String): void;
			append(arg1: string): void;
		}
		export class EdgeEffect extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.EdgeEffect>;
			isFinished(): boolean;
			onAbsorb(arg1: number): void;
			onRelease(): void;
			onPull(arg1: native.Float): void;
			setSize(arg1: number, arg2: number): void;
			finish(): void;
			draw(arg1: android.graphics.Canvas): boolean;
		}
		export interface IWrapperListAdapter extends android.widget.IListAdapter {
			getWrappedAdapter(): android.widget.IListAdapter;
			areAllItemsEnabled(): boolean;
			isEnabled(arg1: number): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			isEmpty(): boolean;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class ZoomButton extends android.widget.ImageButton implements android.view.View.IOnLongClickListener {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.ZoomButton>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			dispatchUnhandledMove(arg1: android.view.View, arg2: number): boolean;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			setZoomSpeed(arg1: native.Long): void;
			onLongClick(arg1: android.view.View): boolean;
			setEnabled(arg1: boolean): void;
		}
		export class TextView extends android.view.View implements android.view.ViewTreeObserver.IOnPreDrawListener {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.TextView>;
			PaintFlags: number;
			FreezesText: boolean;
			MaxWidth: number;
			MinLines: number;
			TransformationMethod: android.text.method.ITransformationMethod;
			Hint: java.lang.ICharSequence;
			LinksClickable: boolean;
			Gravity: number;
			HighlightColor: number;
			KeyListener: android.text.method.IKeyListener;
			CustomSelectionActionModeCallback: android.view.ActionMode.ICallback;
			AutoLinkMask: number;
			TextLocale: java.util.Locale;
			MaxLines: number;
			Ellipsize: android.text.TextUtils.TruncateAt;
			ImeOptions: number;
			MinWidth: number;
			MaxEms: number;
			MaxHeight: number;
			IncludeFontPadding: boolean;
			PrivateImeOptions: string;
			CompoundDrawablePadding: number;
			MinEms: number;
			InputType: number;
			MarqueeRepeatLimit: number;
			MinHeight: number;
			Error: java.lang.ICharSequence;
			Filters: native.Array<android.text.IInputFilter>;
			Text: java.lang.ICharSequence;
			Typeface: android.graphics.Typeface;
			MovementMethod: android.text.method.IMovementMethod;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			getTextLocale(): java.util.Locale;
			onKeyPreIme(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyShortcut(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			getImeOptions(): number;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			getInputType(): number;
			setInputType(arg1: number): void;
			setImeOptions(arg1: number): void;
			setGravity(arg1: number): void;
			onWindowFocusChanged(arg1: boolean): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onRtlPropertiesChanged(arg1: number): void;
			performLongClick(): boolean;
			findViewsWithText(arg1: java.util.ArrayList<android.view.View>, arg2: java.lang.ICharSequence, arg3: number): void;
			findViewsWithText(arg1: java.util.ArrayList<android.view.View>, arg2: string, arg3: number): void;
			onPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			sendAccessibilityEvent(arg1: number): void;
			jumpDrawablesToCurrentState(): void;
			setCompoundDrawablesWithIntrinsicBounds(arg1: number, arg2: number, arg3: number, arg4: number): void;
			setCompoundDrawablesWithIntrinsicBounds(arg1: android.graphics.drawable.Drawable, arg2: android.graphics.drawable.Drawable, arg3: android.graphics.drawable.Drawable, arg4: android.graphics.drawable.Drawable): void;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			cancelLongPress(): void;
			getFocusedRect(arg1: android.graphics.Rect): void;
			onCheckIsTextEditor(): boolean;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			onScreenStateChanged(arg1: number): void;
			onSaveInstanceState(): android.os.IParcelable;
			getCompoundPaddingLeft(): number;
			getCompoundDrawablesRelative(): native.Array<android.graphics.drawable.Drawable>;
			setCompoundDrawablePadding(arg1: number): void;
			getExtendedPaddingBottom(): number;
			getCompoundDrawablePadding(): number;
			getCompoundPaddingRight(): number;
			setCompoundDrawablesRelative(arg1: android.graphics.drawable.Drawable, arg2: android.graphics.drawable.Drawable, arg3: android.graphics.drawable.Drawable, arg4: android.graphics.drawable.Drawable): void;
			getCompoundPaddingStart(): number;
			setTransformationMethod(arg1: android.text.method.ITransformationMethod): void;
			getCurrentHintTextColor(): number;
			setHorizontallyScrolling(arg1: boolean): void;
			getCompoundPaddingBottom(): number;
			getLineSpacingMultiplier(): number;
			setOnEditorActionListener(arg1: android.widget.TextView.IOnEditorActionListener): void;
			getTransformationMethod(): android.text.method.ITransformationMethod;
			removeTextChangedListener(arg1: android.text.ITextWatcher): void;
			addTextChangedListener(arg1: android.text.ITextWatcher): void;
			moveCursorToVisibleOffset(): boolean;
			onStartTemporaryDetach(): void;
			onFinishTemporaryDetach(): void;
			onCreateInputConnection(arg1: android.view.inputmethod.EditorInfo): android.view.inputmethod.IInputConnection;
			hasOverlappingRendering(): boolean;
			onRestoreInstanceState(arg1: android.os.IParcelable): void;
			setPadding(arg1: number, arg2: number, arg3: number, arg4: number): void;
			computeScroll(): void;
			onDragEvent(arg1: android.view.DragEvent): boolean;
			setEllipsize(arg1: android.text.TextUtils.TruncateAt): void;
			setTypeface(arg1: android.graphics.Typeface): void;
			setTypeface(arg1: android.graphics.Typeface, arg2: number): void;
			getLineHeight(): number;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			onCommitCompletion(arg1: android.view.inputmethod.CompletionInfo): void;
			getTotalPaddingLeft(): number;
			setHighlightColor(arg1: number): void;
			getEditableText(): android.text.IEditable;
			getTotalPaddingStart(): number;
			getTotalPaddingTop(): number;
			getCompoundPaddingTop(): number;
			setAutoLinkMask(arg1: number): void;
			setCompoundDrawables(arg1: android.graphics.drawable.Drawable, arg2: android.graphics.drawable.Drawable, arg3: android.graphics.drawable.Drawable, arg4: android.graphics.drawable.Drawable): void;
			getCurrentTextColor(): number;
			getLinksClickable(): boolean;
			setHintTextColor(arg1: android.content.res.ColorStateList): void;
			setHintTextColor(arg1: number): void;
			getLinkTextColors(): android.content.res.ColorStateList;
			getExtendedPaddingTop(): number;
			getTotalPaddingEnd(): number;
			getAutoLinkMask(): number;
			getShadowRadius(): number;
			getHintTextColors(): android.content.res.ColorStateList;
			getTotalPaddingBottom(): number;
			getCompoundDrawables(): native.Array<android.graphics.drawable.Drawable>;
			setTextAppearance(arg1: android.content.Context, arg2: number): void;
			setShadowLayer(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: number): void;
			getMovementMethod(): android.text.method.IMovementMethod;
			setLinkTextColor(arg1: number): void;
			setLinkTextColor(arg1: android.content.res.ColorStateList): void;
			getTotalPaddingRight(): number;
			setMovementMethod(arg1: android.text.method.IMovementMethod): void;
			getCompoundPaddingEnd(): number;
			setLinksClickable(arg1: boolean): void;
			setKeyListener(arg1: android.text.method.IKeyListener): void;
			getIncludeFontPadding(): boolean;
			setFreezesText(arg1: boolean): void;
			setCursorVisible(arg1: boolean): void;
			setExtractedText(arg1: android.view.inputmethod.ExtractedText): void;
			onEditorAction(arg1: number): void;
			setInputExtras(arg1: number): void;
			beginBatchEdit(): void;
			setImeActionLabel(arg1: java.lang.ICharSequence, arg2: number): void;
			setImeActionLabel(arg1: string, arg2: number): void;
			getLineSpacingExtra(): number;
			onBeginBatchEdit(): void;
			onEndBatchEdit(): void;
			getImeActionLabel(): java.lang.ICharSequence;
			setTextIsSelectable(arg1: boolean): void;
			onPrivateIMECommand(arg1: java.lang.String, arg2: android.os.Bundle): boolean;
			onPrivateIMECommand(arg1: string, arg2: android.os.Bundle): boolean;
			setIncludeFontPadding(arg1: boolean): void;
			setEditableFactory(arg1: android.text.Editable.Factory): void;
			setMarqueeRepeatLimit(arg1: number): void;
			onCommitCorrection(arg1: android.view.inputmethod.CorrectionInfo): void;
			getMarqueeRepeatLimit(): number;
			setSelectAllOnFocus(arg1: boolean): void;
			isCursorVisible(): boolean;
			setRawInputType(arg1: number): void;
			isTextSelectable(): boolean;
			getFreezesText(): boolean;
			setSpannableFactory(arg1: android.text.Spannable.Factory): void;
			getInputExtras(arg1: boolean): android.os.Bundle;
			getImeActionId(): number;
			bringPointIntoView(arg1: number): boolean;
			setPrivateImeOptions(arg1: java.lang.String): void;
			setPrivateImeOptions(arg1: string): void;
			getPrivateImeOptions(): string;
			setTextKeepState(arg1: java.lang.ICharSequence): void;
			setTextKeepState(arg1: string): void;
			setTextKeepState(arg1: java.lang.ICharSequence, arg2: android.widget.TextView.BufferType): void;
			setTextKeepState(arg1: string, arg2: android.widget.TextView.BufferType): void;
			onTextContextMenuItem(arg1: number): boolean;
			getOffsetForPosition(arg1: native.Float, arg2: native.Float): number;
			isInputMethodTarget(): boolean;
			didTouchFocusSelect(): boolean;
			clearComposingText(): void;
			isSuggestionsEnabled(): boolean;
			invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
			setPaddingRelative(arg1: number, arg2: number, arg3: number, arg4: number): void;
			getCustomSelectionActionModeCallback(): android.view.ActionMode.ICallback;
			setCustomSelectionActionModeCallback(arg1: android.view.ActionMode.ICallback): void;
			setCompoundDrawablesRelativeWithIntrinsicBounds(arg1: android.graphics.drawable.Drawable, arg2: android.graphics.drawable.Drawable, arg3: android.graphics.drawable.Drawable, arg4: android.graphics.drawable.Drawable): void;
			setCompoundDrawablesRelativeWithIntrinsicBounds(arg1: number, arg2: number, arg3: number, arg4: number): void;
			getPaintFlags(): number;
			setTextSize(arg1: number, arg2: native.Float): void;
			setTextSize(arg1: native.Float): void;
			setMinLines(arg1: number): void;
			getMaxLines(): number;
			getTextSize(): number;
			setTextColor(arg1: number): void;
			setTextColor(arg1: android.content.res.ColorStateList): void;
			getUrls(): native.Array<android.text.style.URLSpan>;
			setMaxHeight(arg1: number): void;
			getTextScaleX(): number;
			setHeight(arg1: number): void;
			setMinHeight(arg1: number): void;
			setMinEms(arg1: number): void;
			getTypeface(): android.graphics.Typeface;
			setTextLocale(arg1: java.util.Locale): void;
			setMaxLines(arg1: number): void;
			setTextScaleX(arg1: native.Float): void;
			setPaintFlags(arg1: number): void;
			getMinHeight(): number;
			getMinLines(): number;
			getMaxHeight(): number;
			static getTextColors(arg1: android.content.Context, arg2: android.content.res.TypedArray): android.content.res.ColorStateList;
			getTextColors(): android.content.res.ColorStateList;
			getGravity(): number;
			getShadowDx(): number;
			getShadowDy(): number;
			setLines(arg1: number): void;
			extractText(arg1: android.view.inputmethod.ExtractedTextRequest, arg2: android.view.inputmethod.ExtractedText): boolean;
			setMaxEms(arg1: number): void;
			hasSelection(): boolean;
			getHint(): java.lang.ICharSequence;
			endBatchEdit(): void;
			setSingleLine(arg1: boolean): void;
			setSingleLine(): void;
			getLineBounds(arg1: number, arg2: android.graphics.Rect): number;
			getError(): java.lang.ICharSequence;
			getEllipsize(): android.text.TextUtils.TruncateAt;
			setFilters(arg1: native.Array<android.text.IInputFilter>): void;
			setHint(arg1: java.lang.ICharSequence): void;
			setHint(arg1: string): void;
			setHint(arg1: number): void;
			setEms(arg1: number): void;
			setAllCaps(arg1: boolean): void;
			getFilters(): native.Array<android.text.IInputFilter>;
			getMinEms(): number;
			getMaxEms(): number;
			onPreDraw(): boolean;
			static getTextColor(arg1: android.content.Context, arg2: android.content.res.TypedArray, arg3: number): number;
			setScroller(arg1: android.widget.Scroller): void;
			append(arg1: java.lang.ICharSequence): void;
			append(arg1: string): void;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): void;
			append(arg1: string, arg2: number, arg3: number): void;
			length(): number;
			debug(arg1: number): void;
			setError(arg1: java.lang.ICharSequence): void;
			setError(arg1: string): void;
			setError(arg1: java.lang.ICharSequence, arg2: android.graphics.drawable.Drawable): void;
			setError(arg1: string, arg2: android.graphics.drawable.Drawable): void;
			getLayout(): android.text.Layout;
			getBaseline(): number;
			setEnabled(arg1: boolean): void;
			getText(): java.lang.ICharSequence;
			setText(arg1: java.lang.ICharSequence): void;
			setText(arg1: string): void;
			setText(arg1: number, arg2: android.widget.TextView.BufferType): void;
			setText(arg1: number): void;
			setText(arg1: native.Array<string>, arg2: number, arg3: number): void;
			setText(arg1: java.lang.ICharSequence, arg2: android.widget.TextView.BufferType): void;
			setText(arg1: string, arg2: android.widget.TextView.BufferType): void;
			setWidth(arg1: number): void;
			getPaint(): android.text.TextPaint;
			getSelectionEnd(): number;
			getSelectionStart(): number;
			setSelected(arg1: boolean): void;
			setLineSpacing(arg1: native.Float, arg2: native.Float): void;
			getKeyListener(): android.text.method.IKeyListener;
			getLineCount(): number;
			getHighlightColor(): number;
			getShadowColor(): number;
			getMaxWidth(): number;
			getMinWidth(): number;
			setMaxWidth(arg1: number): void;
			setMinWidth(arg1: number): void;
		}
		export module TextView {
			export class OnEditorActionListener implements android.widget.TextView.IOnEditorActionListener {
				constructor(implementation: android.widget.TextView.IOnEditorActionListener);
				onEditorAction(arg1: android.widget.TextView, arg2: number, arg3: android.view.KeyEvent): boolean;
			}
			export class SavedState extends android.view.View.BaseSavedState {
				static CREATOR: android.os.Parcelable.ICreator<android.widget.TextView.SavedState>;
				static class: java.lang.Class<android.widget.TextView.SavedState>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				toString(): string;
			}
			export interface IOnEditorActionListener {
				onEditorAction(arg1: android.widget.TextView, arg2: number, arg3: android.view.KeyEvent): boolean;
			}
			export enum BufferType {
				EDITABLE,
				NORMAL,
				SPANNABLE
			}
			export module BufferType {
				export function valueOf(arg1: java.lang.String): android.widget.TextView.BufferType;
				export function valueOf(arg1: string): android.widget.TextView.BufferType;
				export function values(): native.Array<android.widget.TextView.BufferType>;
			}
		}
		export class ShareActionProvider extends android.view.ActionProvider {
			constructor(arg1: android.content.Context);
			static DEFAULT_SHARE_HISTORY_FILE_NAME: java.lang.String;
			static class: java.lang.Class<android.widget.ShareActionProvider>;
			onPrepareSubMenu(arg1: android.view.ISubMenu): void;
			onCreateActionView(): android.view.View;
			setShareIntent(arg1: android.content.Intent): void;
			hasSubMenu(): boolean;
			setShareHistoryFileName(arg1: java.lang.String): void;
			setShareHistoryFileName(arg1: string): void;
			setOnShareTargetSelectedListener(arg1: android.widget.ShareActionProvider.IOnShareTargetSelectedListener): void;
			onCreateActionView(arg1: android.view.IMenuItem): android.view.View;
		}
		export module ShareActionProvider {
			export class OnShareTargetSelectedListener implements android.widget.ShareActionProvider.IOnShareTargetSelectedListener {
				constructor(implementation: android.widget.ShareActionProvider.IOnShareTargetSelectedListener);
				onShareTargetSelected(arg1: android.widget.ShareActionProvider, arg2: android.content.Intent): boolean;
			}
			export interface IOnShareTargetSelectedListener {
				onShareTargetSelected(arg1: android.widget.ShareActionProvider, arg2: android.content.Intent): boolean;
			}
		}
		export class Filter extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.widget.Filter>;
			convertResultToString(arg1: any): java.lang.ICharSequence;
			filter(arg1: java.lang.ICharSequence): void;
			filter(arg1: string): void;
			filter(arg1: java.lang.ICharSequence, arg2: android.widget.Filter.IFilterListener): void;
			filter(arg1: string, arg2: android.widget.Filter.IFilterListener): void;
		}
		export module Filter {
			export class FilterListener implements android.widget.Filter.IFilterListener {
				constructor(implementation: android.widget.Filter.IFilterListener);
				onFilterComplete(arg1: number): void;
			}
			export class FilterResults extends java.lang.Object {
				constructor();
				values: any;
				count: number;
				static class: java.lang.Class<android.widget.Filter.FilterResults>;
			}
			export interface IFilterListener {
				onFilterComplete(arg1: number): void;
			}
		}
		export interface IAdvanceable {
			advance(): void;
			fyiWillBeAdvancedByHostKThx(): void;
		}
		export class AbsListView extends android.widget.AdapterView<android.widget.IListAdapter> implements android.text.ITextWatcher, android.view.ViewTreeObserver.IOnGlobalLayoutListener, android.widget.Filter.IFilterListener, android.view.ViewTreeObserver.IOnTouchModeChangeListener {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static TRANSCRIPT_MODE_DISABLED: number;
			static TRANSCRIPT_MODE_NORMAL: number;
			static TRANSCRIPT_MODE_ALWAYS_SCROLL: number;
			static CHOICE_MODE_NONE: number;
			static CHOICE_MODE_SINGLE: number;
			static CHOICE_MODE_MULTIPLE: number;
			static CHOICE_MODE_MULTIPLE_MODAL: number;
			static class: java.lang.Class<android.widget.AbsListView>;
			CacheColorHint: number;
			ChoiceMode: number;
			TranscriptMode: number;
			Selector: android.graphics.drawable.Drawable;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			requestLayout(): void;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			addTouchables(arg1: java.util.ArrayList<android.view.View>): void;
			onWindowFocusChanged(arg1: boolean): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.AbsListView.LayoutParams;
			requestDisallowInterceptTouchEvent(arg1: boolean): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			showContextMenuForChild(arg1: android.view.View): boolean;
			getSelector(): android.graphics.drawable.Drawable;
			getTextFilter(): java.lang.ICharSequence;
			setSelector(arg1: number): void;
			setSelector(arg1: android.graphics.drawable.Drawable): void;
			hasTextFilter(): boolean;
			setFriction(arg1: native.Float): void;
			reclaimViews(arg1: java.util.IList<android.view.View>): void;
			pointToRowId(arg1: number, arg2: number): any;
			setFilterText(arg1: java.lang.String): void;
			setFilterText(arg1: string): void;
			isItemChecked(arg1: number): boolean;
			clearChoices(): void;
			getChoiceMode(): number;
			setChoiceMode(arg1: number): void;
			isSmoothScrollbarEnabled(): boolean;
			getCheckedItemPosition(): number;
			setMultiChoiceModeListener(arg1: android.widget.AbsListView.IMultiChoiceModeListener): void;
			setFastScrollAlwaysVisible(arg1: boolean): void;
			setSmoothScrollbarEnabled(arg1: boolean): void;
			isScrollingCacheEnabled(): boolean;
			setScrollingCacheEnabled(arg1: boolean): void;
			getCheckedItemPositions(): android.util.SparseBooleanArray;
			isFastScrollAlwaysVisible(): boolean;
			onRemoteAdapterConnected(): boolean;
			smoothScrollToPositionFromTop(arg1: number, arg2: number): void;
			smoothScrollToPositionFromTop(arg1: number, arg2: number, arg3: number): void;
			onRemoteAdapterDisconnected(): void;
			deferNotifyDataSetChanged(): void;
			smoothScrollToPosition(arg1: number, arg2: number): void;
			smoothScrollToPosition(arg1: number): void;
			onInterceptTouchEvent(arg1: android.view.MotionEvent): boolean;
			setVerticalScrollbarPosition(arg1: number): void;
			getVerticalScrollbarWidth(): number;
			sendAccessibilityEvent(arg1: number): void;
			jumpDrawablesToCurrentState(): void;
			isFastScrollEnabled(): boolean;
			setTextFilterEnabled(arg1: boolean): void;
			getListPaddingBottom(): number;
			getListPaddingLeft(): number;
			setStackFromBottom(arg1: boolean): void;
			setDrawSelectorOnTop(arg1: boolean): void;
			setScrollIndicators(arg1: android.view.View, arg2: android.view.View): void;
			pointToPosition(arg1: number, arg2: number): number;
			onTouchModeChanged(arg1: boolean): void;
			isTextFilterEnabled(): boolean;
			isStackFromBottom(): boolean;
			getListPaddingRight(): number;
			getListPaddingTop(): number;
			setOnScrollListener(arg1: android.widget.AbsListView.IOnScrollListener): void;
			setVelocityScale(arg1: native.Float): void;
			invalidateViews(): void;
			getCheckedItemCount(): number;
			getCheckedItemIds(): native.Array<native.Long>;
			setItemChecked(arg1: number, arg2: boolean): void;
			setFastScrollEnabled(arg1: boolean): void;
			getTranscriptMode(): number;
			setRecyclerListener(arg1: android.widget.AbsListView.IRecyclerListener): void;
			setCacheColorHint(arg1: number): void;
			setRemoteViewsAdapter(arg1: android.content.Intent): void;
			setTranscriptMode(arg1: number): void;
			getCacheColorHint(): number;
			beforeTextChanged(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number): void;
			beforeTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
			onGlobalLayout(): void;
			clearTextFilter(): void;
			afterTextChanged(arg1: android.text.IEditable): void;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			getFocusedRect(arg1: android.graphics.Rect): void;
			onSaveInstanceState(): android.os.IParcelable;
			checkInputConnectionProxy(arg1: android.view.View): boolean;
			performAccessibilityAction(arg1: number, arg2: android.os.Bundle): boolean;
			onCreateInputConnection(arg1: android.view.inputmethod.EditorInfo): android.view.inputmethod.IInputConnection;
			onRestoreInstanceState(arg1: android.os.IParcelable): void;
			getSolidColor(): number;
			setAdapter(arg1: android.widget.IAdapter): void;
			setAdapter(arg1: android.widget.IListAdapter): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			setOverScrollMode(arg1: number): void;
			onFilterComplete(arg1: number): void;
			smoothScrollBy(arg1: number, arg2: number): void;
			performItemClick(arg1: android.view.View, arg2: number, arg3: native.Long): boolean;
			getSelectedView(): android.view.View;
			verifyDrawable(arg1: android.graphics.drawable.Drawable): boolean;
			onTextChanged(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number): void;
			onTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
			draw(arg1: android.graphics.Canvas): void;
		}
		export module AbsListView {
			export class OnScrollListener implements android.widget.AbsListView.IOnScrollListener {
				constructor(implementation: android.widget.AbsListView.IOnScrollListener);
				static SCROLL_STATE_IDLE: number;
				static SCROLL_STATE_TOUCH_SCROLL: number;
				static SCROLL_STATE_FLING: number;
				onScroll(arg1: android.widget.AbsListView, arg2: number, arg3: number, arg4: number): void;
				onScrollStateChanged(arg1: android.widget.AbsListView, arg2: number): void;
			}
			export interface IMultiChoiceModeListener extends android.view.ActionMode.ICallback {
				onItemCheckedStateChanged(arg1: android.view.ActionMode, arg2: number, arg3: native.Long, arg4: boolean): void;
				onDestroyActionMode(arg1: android.view.ActionMode): void;
				onCreateActionMode(arg1: android.view.ActionMode, arg2: android.view.IMenu): boolean;
				onActionItemClicked(arg1: android.view.ActionMode, arg2: android.view.IMenuItem): boolean;
				onPrepareActionMode(arg1: android.view.ActionMode, arg2: android.view.IMenu): boolean;
			}
			export interface IRecyclerListener {
				onMovedToScrapHeap(arg1: android.view.View): void;
			}
			export interface ISelectionBoundsAdjuster {
				adjustListItemSelectionBounds(arg1: android.graphics.Rect): void;
			}
			export class SelectionBoundsAdjuster implements android.widget.AbsListView.ISelectionBoundsAdjuster {
				constructor(implementation: android.widget.AbsListView.ISelectionBoundsAdjuster);
				adjustListItemSelectionBounds(arg1: android.graphics.Rect): void;
			}
			export class RecyclerListener implements android.widget.AbsListView.IRecyclerListener {
				constructor(implementation: android.widget.AbsListView.IRecyclerListener);
				onMovedToScrapHeap(arg1: android.view.View): void;
			}
			export class LayoutParams extends android.view.ViewGroup.LayoutParams {
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: number, arg2: number, arg3: number);
				constructor(arg1: number, arg2: number);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				static class: java.lang.Class<android.widget.AbsListView.LayoutParams>;
			}
			export class MultiChoiceModeListener implements android.view.ActionMode.ICallback, android.widget.AbsListView.IMultiChoiceModeListener {
				constructor(implementation: android.widget.AbsListView.IMultiChoiceModeListener);
				onItemCheckedStateChanged(arg1: android.view.ActionMode, arg2: number, arg3: native.Long, arg4: boolean): void;
				onDestroyActionMode(arg1: android.view.ActionMode): void;
				onCreateActionMode(arg1: android.view.ActionMode, arg2: android.view.IMenu): boolean;
				onActionItemClicked(arg1: android.view.ActionMode, arg2: android.view.IMenuItem): boolean;
				onPrepareActionMode(arg1: android.view.ActionMode, arg2: android.view.IMenu): boolean;
			}
			export interface IOnScrollListener {
				onScroll(arg1: android.widget.AbsListView, arg2: number, arg3: number, arg4: number): void;
				onScrollStateChanged(arg1: android.widget.AbsListView, arg2: number): void;
			}
			export module IOnScrollListener {
				var SCROLL_STATE_IDLE: number;
				var SCROLL_STATE_TOUCH_SCROLL: number;
				var SCROLL_STATE_FLING: number;
			}
		}
		export class TableLayout extends android.widget.LinearLayout {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.TableLayout>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			requestLayout(): void;
			addView(arg1: android.view.View): void;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.TableLayout.LayoutParams;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setOnHierarchyChangeListener(arg1: android.view.ViewGroup.IOnHierarchyChangeListener): void;
			setShrinkAllColumns(arg1: boolean): void;
			setColumnStretchable(arg1: number, arg2: boolean): void;
			isColumnStretchable(arg1: number): boolean;
			isShrinkAllColumns(): boolean;
			isStretchAllColumns(): boolean;
			setColumnShrinkable(arg1: number, arg2: boolean): void;
			setColumnCollapsed(arg1: number, arg2: boolean): void;
			isColumnCollapsed(arg1: number): boolean;
			isColumnShrinkable(arg1: number): boolean;
			setStretchAllColumns(arg1: boolean): void;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
		}
		export module TableLayout {
			export class LayoutParams extends android.widget.LinearLayout.LayoutParams {
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: android.view.ViewGroup.MarginLayoutParams);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor();
				constructor(arg1: number, arg2: number, arg3: native.Float);
				constructor(arg1: number, arg2: number);
				static class: java.lang.Class<android.widget.TableLayout.LayoutParams>;
			}
		}
		export class AdapterView<T extends android.widget.IAdapter> extends android.view.ViewGroup {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static ITEM_VIEW_TYPE_IGNORE: number;
			static ITEM_VIEW_TYPE_HEADER_OR_FOOTER: number;
			static INVALID_POSITION: number;
			static INVALID_ROW_ID: native.Long;
			static class: java.lang.Class<android.widget.AdapterView<any>>;
			OnItemLongClickListener: android.widget.AdapterView.IOnItemLongClickListener;
			EmptyView: android.view.View;
			OnItemSelectedListener: android.widget.AdapterView.IOnItemSelectedListener;
			OnItemClickListener: android.widget.AdapterView.IOnItemClickListener;
			Adapter: T;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number): void;
			addView(arg1: android.view.View): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			removeView(arg1: android.view.View): void;
			removeViewAt(arg1: number): void;
			dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
			onRequestSendAccessibilityEvent(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): boolean;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setOnClickListener(arg1: android.view.View.IOnClickListener): void;
			removeAllViews(): void;
			getSelectedItemPosition(): number;
			getFirstVisiblePosition(): number;
			getLastVisiblePosition(): number;
			getOnItemLongClickListener(): android.widget.AdapterView.IOnItemLongClickListener;
			setOnItemLongClickListener(arg1: android.widget.AdapterView.IOnItemLongClickListener): void;
			setFocusableInTouchMode(arg1: boolean): void;
			setOnItemClickListener(arg1: android.widget.AdapterView.IOnItemClickListener): void;
			setOnItemSelectedListener(arg1: android.widget.AdapterView.IOnItemSelectedListener): void;
			getOnItemClickListener(): android.widget.AdapterView.IOnItemClickListener;
			getOnItemSelectedListener(): android.widget.AdapterView.IOnItemSelectedListener;
			getAdapter(): T;
			setAdapter(arg1: T): void;
			setSelection(arg1: number): void;
			getPositionForView(arg1: android.view.View): number;
			performItemClick(arg1: android.view.View, arg2: number, arg3: native.Long): boolean;
			getSelectedView(): android.view.View;
			getItemAtPosition(arg1: number): any;
			getSelectedItemId(): any;
			getItemIdAtPosition(arg1: number): any;
			setEmptyView(arg1: android.view.View): void;
			getEmptyView(): android.view.View;
			setFocusable(arg1: boolean): void;
			getSelectedItem(): any;
			getCount(): number;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
		}
		export module AdapterView {
			export class AdapterContextMenuInfo extends java.lang.Object implements android.view.ContextMenu.IContextMenuInfo {
				constructor(arg1: android.view.View, arg2: number, arg3: native.Long);
				targetView: android.view.View;
				position: number;
				id: native.Long;
				static class: java.lang.Class<android.widget.AdapterView.AdapterContextMenuInfo>;
			}
			export class OnItemSelectedListener implements android.widget.AdapterView.IOnItemSelectedListener {
				constructor(implementation: android.widget.AdapterView.IOnItemSelectedListener);
				onItemSelected(arg1: android.widget.AdapterView<any>, arg2: android.view.View, arg3: number, arg4: native.Long): void;
				onNothingSelected(arg1: android.widget.AdapterView<any>): void;
			}
			export class OnItemLongClickListener implements android.widget.AdapterView.IOnItemLongClickListener {
				constructor(implementation: android.widget.AdapterView.IOnItemLongClickListener);
				onItemLongClick(arg1: android.widget.AdapterView<any>, arg2: android.view.View, arg3: number, arg4: native.Long): boolean;
			}
			export interface IOnItemSelectedListener {
				onItemSelected(arg1: android.widget.AdapterView<any>, arg2: android.view.View, arg3: number, arg4: native.Long): void;
				onNothingSelected(arg1: android.widget.AdapterView<any>): void;
			}
			export class OnItemClickListener implements android.widget.AdapterView.IOnItemClickListener {
				constructor(implementation: android.widget.AdapterView.IOnItemClickListener);
				onItemClick(arg1: android.widget.AdapterView<any>, arg2: android.view.View, arg3: number, arg4: native.Long): void;
			}
			export interface IOnItemClickListener {
				onItemClick(arg1: android.widget.AdapterView<any>, arg2: android.view.View, arg3: number, arg4: native.Long): void;
			}
			export interface IOnItemLongClickListener {
				onItemLongClick(arg1: android.widget.AdapterView<any>, arg2: android.view.View, arg3: number, arg4: native.Long): boolean;
			}
		}
		export class BaseExpandableListAdapter extends java.lang.Object implements android.widget.IExpandableListAdapter, android.widget.IHeterogeneousExpandableList {
			constructor();
			static class: java.lang.Class<android.widget.BaseExpandableListAdapter>;
			getChildType(arg1: number, arg2: number): number;
			getGroupType(arg1: number): number;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			notifyDataSetInvalidated(): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			onGroupCollapsed(arg1: number): void;
			onGroupExpanded(arg1: number): void;
			getCombinedChildId(arg1: native.Long, arg2: native.Long): any;
			getCombinedGroupId(arg1: native.Long): any;
			getChildTypeCount(): number;
			getGroupTypeCount(): number;
			notifyDataSetChanged(): void;
			areAllItemsEnabled(): boolean;
			isEmpty(): boolean;
			getChildId(arg1: number, arg2: number): any;
			getGroupCount(): number;
			getChildView(arg1: number, arg2: number, arg3: boolean, arg4: android.view.View, arg5: android.view.ViewGroup): android.view.View;
			getGroupView(arg1: number, arg2: boolean, arg3: android.view.View, arg4: android.view.ViewGroup): android.view.View;
			getGroupId(arg1: number): any;
			getChildrenCount(arg1: number): number;
			isChildSelectable(arg1: number, arg2: number): boolean;
			hasStableIds(): boolean;
			getChild(arg1: number, arg2: number): any;
			getGroup(arg1: number): any;
		}
		export class Advanceable implements android.widget.IAdvanceable {
			constructor(implementation: android.widget.IAdvanceable);
			advance(): void;
			fyiWillBeAdvancedByHostKThx(): void;
		}
		export class ProgressBar extends android.view.View {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.ProgressBar>;
			ProgressDrawable: android.graphics.drawable.Drawable;
			IndeterminateDrawable: android.graphics.drawable.Drawable;
			Max: number;
			SecondaryProgress: number;
			Interpolator: android.view.animation.IInterpolator;
			Progress: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			setVisibility(arg1: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setMax(arg1: number): void;
			setProgress(arg1: number): void;
			getMax(): number;
			getIndeterminateDrawable(): android.graphics.drawable.Drawable;
			setIndeterminateDrawable(arg1: android.graphics.drawable.Drawable): void;
			incrementSecondaryProgressBy(arg1: number): void;
			jumpDrawablesToCurrentState(): void;
			setProgressDrawable(arg1: android.graphics.drawable.Drawable): void;
			getProgressDrawable(): android.graphics.drawable.Drawable;
			setSecondaryProgress(arg1: number): void;
			getSecondaryProgress(): number;
			incrementProgressBy(arg1: number): void;
			setInterpolator(arg1: android.view.animation.IInterpolator): void;
			setInterpolator(arg1: android.content.Context, arg2: number): void;
			getInterpolator(): android.view.animation.IInterpolator;
			onSaveInstanceState(): android.os.IParcelable;
			postInvalidate(): void;
			onRestoreInstanceState(arg1: android.os.IParcelable): void;
			invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
			getProgress(): number;
			isIndeterminate(): boolean;
			setIndeterminate(arg1: boolean): void;
			postInvalidate(arg1: number, arg2: number, arg3: number, arg4: number): void;
		}
		export class Adapter implements android.widget.IAdapter {
			constructor(implementation: android.widget.IAdapter);
			static IGNORE_ITEM_VIEW_TYPE: number;
			static NO_SELECTION: number;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			isEmpty(): boolean;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class SimpleCursorTreeAdapter extends android.widget.ResourceCursorTreeAdapter {
			constructor(arg1: android.content.Context, arg2: android.database.ICursor, arg3: number, arg4: number, arg5: native.Array<java.lang.String>, arg6: native.Array<number>, arg7: number, arg8: number, arg9: native.Array<java.lang.String>, arg10: native.Array<number>);
			constructor(arg1: android.content.Context, arg2: android.database.ICursor, arg3: number, arg4: native.Array<java.lang.String>, arg5: native.Array<number>, arg6: number, arg7: native.Array<java.lang.String>, arg8: native.Array<number>);
			constructor(arg1: android.content.Context, arg2: android.database.ICursor, arg3: number, arg4: number, arg5: native.Array<java.lang.String>, arg6: native.Array<number>, arg7: number, arg8: native.Array<java.lang.String>, arg9: native.Array<number>);
			static class: java.lang.Class<android.widget.SimpleCursorTreeAdapter>;
			ViewBinder: android.widget.SimpleCursorTreeAdapter.IViewBinder;
			setViewBinder(arg1: android.widget.SimpleCursorTreeAdapter.IViewBinder): void;
			getViewBinder(): android.widget.SimpleCursorTreeAdapter.IViewBinder;
			setViewText(arg1: android.widget.TextView, arg2: java.lang.String): void;
			setViewText(arg1: android.widget.TextView, arg2: string): void;
		}
		export module SimpleCursorTreeAdapter {
			export class ViewBinder implements android.widget.SimpleCursorTreeAdapter.IViewBinder {
				constructor(implementation: android.widget.SimpleCursorTreeAdapter.IViewBinder);
				setViewValue(arg1: android.view.View, arg2: android.database.ICursor, arg3: number): boolean;
			}
			export interface IViewBinder {
				setViewValue(arg1: android.view.View, arg2: android.database.ICursor, arg3: number): boolean;
			}
		}
		export class CursorTreeAdapter extends android.widget.BaseExpandableListAdapter implements android.widget.IFilterable {
			constructor(arg1: android.database.ICursor, arg2: android.content.Context, arg3: boolean);
			constructor(arg1: android.database.ICursor, arg2: android.content.Context);
			static class: java.lang.Class<android.widget.CursorTreeAdapter>;
			FilterQueryProvider: android.widget.IFilterQueryProvider;
			getChildId(arg1: number, arg2: number): any;
			getGroupCount(): number;
			getChildView(arg1: number, arg2: number, arg3: boolean, arg4: android.view.View, arg5: android.view.ViewGroup): android.view.View;
			getGroupView(arg1: number, arg2: boolean, arg3: android.view.View, arg4: android.view.ViewGroup): android.view.View;
			getGroupId(arg1: number): any;
			notifyDataSetInvalidated(): void;
			setFilterQueryProvider(arg1: android.widget.IFilterQueryProvider): void;
			getFilterQueryProvider(): android.widget.IFilterQueryProvider;
			runQueryOnBackgroundThread(arg1: java.lang.ICharSequence): android.database.ICursor;
			runQueryOnBackgroundThread(arg1: string): android.database.ICursor;
			getChildrenCount(arg1: number): number;
			isChildSelectable(arg1: number, arg2: number): boolean;
			onGroupCollapsed(arg1: number): void;
			setChildrenCursor(arg1: number, arg2: android.database.ICursor): void;
			setGroupCursor(arg1: android.database.ICursor): void;
			notifyDataSetChanged(): void;
			notifyDataSetChanged(arg1: boolean): void;
			convertToString(arg1: android.database.ICursor): string;
			changeCursor(arg1: android.database.ICursor): void;
			hasStableIds(): boolean;
			getCursor(): android.database.ICursor;
			getFilter(): android.widget.Filter;
			getChild(arg1: number, arg2: number): android.database.ICursor;
			getGroup(arg1: number): android.database.ICursor;
		}
		export class RemoteViewsService extends android.app.Service {
			constructor();
			static class: java.lang.Class<android.widget.RemoteViewsService>;
			onBind(arg1: android.content.Intent): android.os.IIBinder;
			onGetViewFactory(arg1: android.content.Intent): android.widget.RemoteViewsService.IRemoteViewsFactory;
		}
		export module RemoteViewsService {
			export class RemoteViewsFactory implements android.widget.RemoteViewsService.IRemoteViewsFactory {
				constructor(implementation: android.widget.RemoteViewsService.IRemoteViewsFactory);
				onDestroy(): void;
				onCreate(): void;
				getViewTypeCount(): number;
				hasStableIds(): boolean;
				getItemId(arg1: number): any;
				getViewAt(arg1: number): android.widget.RemoteViews;
				onDataSetChanged(): void;
				getLoadingView(): android.widget.RemoteViews;
				getCount(): number;
			}
			export interface IRemoteViewsFactory {
				onDestroy(): void;
				onCreate(): void;
				getViewTypeCount(): number;
				hasStableIds(): boolean;
				getItemId(arg1: number): any;
				getViewAt(arg1: number): android.widget.RemoteViews;
				onDataSetChanged(): void;
				getLoadingView(): android.widget.RemoteViews;
				getCount(): number;
			}
		}
		export class TabWidget extends android.widget.LinearLayout implements android.view.View.IOnFocusChangeListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.TabWidget>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			dispatchDraw(arg1: android.graphics.Canvas): void;
			addView(arg1: android.view.View): void;
			sendAccessibilityEventUnchecked(arg1: android.view.accessibility.AccessibilityEvent): void;
			dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
			setDividerDrawable(arg1: android.graphics.drawable.Drawable): void;
			setDividerDrawable(arg1: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			getChildTabViewAt(arg1: number): android.view.View;
			focusCurrentTab(arg1: number): void;
			isStripEnabled(): boolean;
			setRightStripDrawable(arg1: number): void;
			setRightStripDrawable(arg1: android.graphics.drawable.Drawable): void;
			setLeftStripDrawable(arg1: number): void;
			setLeftStripDrawable(arg1: android.graphics.drawable.Drawable): void;
			setStripEnabled(arg1: boolean): void;
			removeAllViews(): void;
			childDrawableStateChanged(arg1: android.view.View): void;
			onFocusChange(arg1: android.view.View, arg2: boolean): void;
			setCurrentTab(arg1: number): void;
			setEnabled(arg1: boolean): void;
			getTabCount(): number;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number): void;
		}
		export class MultiAutoCompleteTextView extends android.widget.AutoCompleteTextView {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.MultiAutoCompleteTextView>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			enoughToFilter(): boolean;
			performValidation(): void;
			setTokenizer(arg1: android.widget.MultiAutoCompleteTextView.ITokenizer): void;
		}
		export module MultiAutoCompleteTextView {
			export class Tokenizer implements android.widget.MultiAutoCompleteTextView.ITokenizer {
				constructor(implementation: android.widget.MultiAutoCompleteTextView.ITokenizer);
				findTokenEnd(arg1: java.lang.ICharSequence, arg2: number): number;
				findTokenEnd(arg1: string, arg2: number): number;
				terminateToken(arg1: java.lang.ICharSequence): java.lang.ICharSequence;
				terminateToken(arg1: string): java.lang.ICharSequence;
				findTokenStart(arg1: java.lang.ICharSequence, arg2: number): number;
				findTokenStart(arg1: string, arg2: number): number;
			}
			export class CommaTokenizer extends java.lang.Object implements android.widget.MultiAutoCompleteTextView.ITokenizer {
				constructor();
				static class: java.lang.Class<android.widget.MultiAutoCompleteTextView.CommaTokenizer>;
				findTokenEnd(arg1: java.lang.ICharSequence, arg2: number): number;
				findTokenEnd(arg1: string, arg2: number): number;
				terminateToken(arg1: java.lang.ICharSequence): java.lang.ICharSequence;
				terminateToken(arg1: string): java.lang.ICharSequence;
				findTokenStart(arg1: java.lang.ICharSequence, arg2: number): number;
				findTokenStart(arg1: string, arg2: number): number;
			}
			export interface ITokenizer {
				findTokenEnd(arg1: string, arg2: number): number;
				terminateToken(arg1: string): java.lang.ICharSequence;
				findTokenStart(arg1: string, arg2: number): number;
			}
		}
		export class ListPopupWindow extends java.lang.Object {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number, arg4: number);
			static POSITION_PROMPT_ABOVE: number;
			static POSITION_PROMPT_BELOW: number;
			static MATCH_PARENT: number;
			static WRAP_CONTENT: number;
			static INPUT_METHOD_FROM_FOCUSABLE: number;
			static INPUT_METHOD_NEEDED: number;
			static INPUT_METHOD_NOT_NEEDED: number;
			static class: java.lang.Class<android.widget.ListPopupWindow>;
			VerticalOffset: number;
			AnimationStyle: number;
			InputMethodMode: number;
			HorizontalOffset: number;
			PromptPosition: number;
			AnchorView: android.view.View;
			Width: number;
			Height: number;
			SoftInputMode: number;
			onKeyPreIme(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			getVerticalOffset(): number;
			setPromptPosition(arg1: number): void;
			getPromptPosition(): number;
			setListSelector(arg1: android.graphics.drawable.Drawable): void;
			setVerticalOffset(arg1: number): void;
			setHorizontalOffset(arg1: number): void;
			getHorizontalOffset(): number;
			setContentWidth(arg1: number): void;
			setAnchorView(arg1: android.view.View): void;
			getSelectedItemPosition(): number;
			setOnItemClickListener(arg1: android.widget.AdapterView.IOnItemClickListener): void;
			setOnItemSelectedListener(arg1: android.widget.AdapterView.IOnItemSelectedListener): void;
			setAdapter(arg1: android.widget.IListAdapter): void;
			setSelection(arg1: number): void;
			setOnDismissListener(arg1: android.widget.PopupWindow.IOnDismissListener): void;
			clearListSelection(): void;
			performItemClick(arg1: number): boolean;
			getSelectedView(): android.view.View;
			getSelectedItemId(): any;
			setBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			setHeight(arg1: number): void;
			dismiss(): void;
			getListView(): android.widget.ListView;
			getAnchorView(): android.view.View;
			setPromptView(arg1: android.view.View): void;
			postShow(): void;
			isInputMethodNotNeeded(): boolean;
			setAnimationStyle(arg1: number): void;
			getAnimationStyle(): number;
			getInputMethodMode(): number;
			setInputMethodMode(arg1: number): void;
			getSoftInputMode(): number;
			setSoftInputMode(arg1: number): void;
			getBackground(): android.graphics.drawable.Drawable;
			getHeight(): number;
			getWidth(): number;
			isShowing(): boolean;
			show(): void;
			setWidth(arg1: number): void;
			isModal(): boolean;
			setModal(arg1: boolean): void;
			getSelectedItem(): any;
		}
		export class PopupWindow extends java.lang.Object {
			constructor(arg1: android.view.View);
			constructor(arg1: number, arg2: number);
			constructor(arg1: android.view.View, arg2: number, arg3: number);
			constructor(arg1: android.view.View, arg2: number, arg3: number, arg4: boolean);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number, arg4: number);
			constructor();
			constructor(arg1: android.content.Context);
			static INPUT_METHOD_FROM_FOCUSABLE: number;
			static INPUT_METHOD_NEEDED: number;
			static INPUT_METHOD_NOT_NEEDED: number;
			static class: java.lang.Class<android.widget.PopupWindow>;
			AnimationStyle: number;
			InputMethodMode: number;
			Height: number;
			ContentView: android.view.View;
			Width: number;
			SoftInputMode: number;
			setOnDismissListener(arg1: android.widget.PopupWindow.IOnDismissListener): void;
			setBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			setHeight(arg1: number): void;
			dismiss(): void;
			setTouchable(arg1: boolean): void;
			isAboveAnchor(): boolean;
			isTouchable(): boolean;
			setAnimationStyle(arg1: number): void;
			getContentView(): android.view.View;
			setIgnoreCheekPress(): void;
			setTouchInterceptor(arg1: android.view.View.IOnTouchListener): void;
			getAnimationStyle(): number;
			setContentView(arg1: android.view.View): void;
			getInputMethodMode(): number;
			setInputMethodMode(arg1: number): void;
			getSoftInputMode(): number;
			isClippingEnabled(): boolean;
			setClippingEnabled(arg1: boolean): void;
			isSplitTouchEnabled(): boolean;
			showAsDropDown(arg1: android.view.View): void;
			showAsDropDown(arg1: android.view.View, arg2: number, arg3: number): void;
			getMaxAvailableHeight(arg1: android.view.View): number;
			getMaxAvailableHeight(arg1: android.view.View, arg2: number): number;
			setSplitTouchEnabled(arg1: boolean): void;
			showAtLocation(arg1: android.view.View, arg2: number, arg3: number, arg4: number): void;
			isOutsideTouchable(): boolean;
			setWindowLayoutMode(arg1: number, arg2: number): void;
			setSoftInputMode(arg1: number): void;
			setOutsideTouchable(arg1: boolean): void;
			getBackground(): android.graphics.drawable.Drawable;
			getHeight(): number;
			getWidth(): number;
			isShowing(): boolean;
			isFocusable(): boolean;
			update(arg1: number, arg2: number, arg3: number, arg4: number): void;
			update(arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): void;
			update(arg1: android.view.View, arg2: number, arg3: number): void;
			update(arg1: android.view.View, arg2: number, arg3: number, arg4: number, arg5: number): void;
			update(arg1: number, arg2: number): void;
			update(): void;
			setFocusable(arg1: boolean): void;
			setWidth(arg1: number): void;
		}
		export module PopupWindow {
			export class OnDismissListener implements android.widget.PopupWindow.IOnDismissListener {
				constructor(implementation: android.widget.PopupWindow.IOnDismissListener);
				onDismiss(): void;
			}
			export interface IOnDismissListener {
				onDismiss(): void;
			}
		}
		export class SlidingDrawer extends android.view.ViewGroup {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static ORIENTATION_HORIZONTAL: number;
			static ORIENTATION_VERTICAL: number;
			static class: java.lang.Class<android.widget.SlidingDrawer>;
			getHandle(): android.view.View;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onInterceptTouchEvent(arg1: android.view.MotionEvent): boolean;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			isOpened(): boolean;
			animateOpen(): void;
			animateClose(): void;
			isMoving(): boolean;
			animateToggle(): void;
			setOnDrawerScrollListener(arg1: android.widget.SlidingDrawer.IOnDrawerScrollListener): void;
			setOnDrawerOpenListener(arg1: android.widget.SlidingDrawer.IOnDrawerOpenListener): void;
			setOnDrawerCloseListener(arg1: android.widget.SlidingDrawer.IOnDrawerCloseListener): void;
			lock(): void;
			close(): void;
			open(): void;
			unlock(): void;
			getContent(): android.view.View;
			toggle(): void;
		}
		export module SlidingDrawer {
			export class OnDrawerScrollListener implements android.widget.SlidingDrawer.IOnDrawerScrollListener {
				constructor(implementation: android.widget.SlidingDrawer.IOnDrawerScrollListener);
				onScrollEnded(): void;
				onScrollStarted(): void;
			}
			export interface IOnDrawerScrollListener {
				onScrollEnded(): void;
				onScrollStarted(): void;
			}
			export class OnDrawerCloseListener implements android.widget.SlidingDrawer.IOnDrawerCloseListener {
				constructor(implementation: android.widget.SlidingDrawer.IOnDrawerCloseListener);
				onDrawerClosed(): void;
			}
			export interface IOnDrawerCloseListener {
				onDrawerClosed(): void;
			}
			export interface IOnDrawerOpenListener {
				onDrawerOpened(): void;
			}
			export class OnDrawerOpenListener implements android.widget.SlidingDrawer.IOnDrawerOpenListener {
				constructor(implementation: android.widget.SlidingDrawer.IOnDrawerOpenListener);
				onDrawerOpened(): void;
			}
		}
		export class ExpandableListAdapter implements android.widget.IExpandableListAdapter {
			constructor(implementation: android.widget.IExpandableListAdapter);
			getChildId(arg1: number, arg2: number): any;
			getGroupCount(): number;
			getChildView(arg1: number, arg2: number, arg3: boolean, arg4: android.view.View, arg5: android.view.ViewGroup): android.view.View;
			getGroupView(arg1: number, arg2: boolean, arg3: android.view.View, arg4: android.view.ViewGroup): android.view.View;
			getGroupId(arg1: number): any;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getChildrenCount(arg1: number): number;
			isChildSelectable(arg1: number, arg2: number): boolean;
			onGroupCollapsed(arg1: number): void;
			onGroupExpanded(arg1: number): void;
			getCombinedChildId(arg1: native.Long, arg2: native.Long): any;
			getCombinedGroupId(arg1: native.Long): any;
			areAllItemsEnabled(): boolean;
			hasStableIds(): boolean;
			isEmpty(): boolean;
			getChild(arg1: number, arg2: number): any;
			getGroup(arg1: number): any;
		}
		export interface ISectionIndexer {
			getSections(): native.Array<any>;
			getSectionForPosition(arg1: number): number;
			getPositionForSection(arg1: number): number;
		}
		export class Chronometer extends android.widget.TextView {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.Chronometer>;
			OnChronometerTickListener: android.widget.Chronometer.IOnChronometerTickListener;
			Format: string;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			getBase(): any;
			getOnChronometerTickListener(): android.widget.Chronometer.IOnChronometerTickListener;
			setOnChronometerTickListener(arg1: android.widget.Chronometer.IOnChronometerTickListener): void;
			start(): void;
			stop(): void;
			getFormat(): string;
			setFormat(arg1: java.lang.String): void;
			setFormat(arg1: string): void;
			setBase(arg1: native.Long): void;
		}
		export module Chronometer {
			export class OnChronometerTickListener implements android.widget.Chronometer.IOnChronometerTickListener {
				constructor(implementation: android.widget.Chronometer.IOnChronometerTickListener);
				onChronometerTick(arg1: android.widget.Chronometer): void;
			}
			export interface IOnChronometerTickListener {
				onChronometerTick(arg1: android.widget.Chronometer): void;
			}
		}
		export class AutoCompleteTextView extends android.widget.EditText implements android.widget.Filter.IFilterListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.AutoCompleteTextView>;
			DropDownAnchor: number;
			DropDownVerticalOffset: number;
			DropDownWidth: number;
			CompletionHint: java.lang.ICharSequence;
			OnItemSelectedListener: android.widget.AdapterView.IOnItemSelectedListener;
			Threshold: number;
			Validator: android.widget.AutoCompleteTextView.IValidator;
			ListSelection: number;
			DropDownHeight: number;
			OnItemClickListener: android.widget.AdapterView.IOnItemClickListener;
			DropDownHorizontalOffset: number;
			onKeyPreIme(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			onWindowFocusChanged(arg1: boolean): void;
			setOnClickListener(arg1: android.view.View.IOnClickListener): void;
			setDropDownVerticalOffset(arg1: number): void;
			setDropDownHorizontalOffset(arg1: number): void;
			setDropDownBackgroundResource(arg1: number): void;
			getDropDownHorizontalOffset(): number;
			setOnItemClickListener(arg1: android.widget.AdapterView.IOnItemClickListener): void;
			getDropDownVerticalOffset(): number;
			setDropDownBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			setOnItemSelectedListener(arg1: android.widget.AdapterView.IOnItemSelectedListener): void;
			getOnItemClickListener(): android.widget.AdapterView.IOnItemClickListener;
			isPerformingCompletion(): boolean;
			getOnItemSelectedListener(): android.widget.AdapterView.IOnItemSelectedListener;
			getItemSelectedListener(): android.widget.AdapterView.IOnItemSelectedListener;
			getAdapter(): android.widget.IListAdapter;
			showDropDown(): void;
			getValidator(): android.widget.AutoCompleteTextView.IValidator;
			setAdapter<T>(arg1: T): void;
			getThreshold(): number;
			setValidator(arg1: android.widget.AutoCompleteTextView.IValidator): void;
			setDropDownAnchor(arg1: number): void;
			getDropDownWidth(): number;
			setDropDownHeight(arg1: number): void;
			setOnDismissListener(arg1: android.widget.AutoCompleteTextView.IOnDismissListener): void;
			enoughToFilter(): boolean;
			isPopupShowing(): boolean;
			getCompletionHint(): java.lang.ICharSequence;
			clearListSelection(): void;
			setDropDownWidth(arg1: number): void;
			getItemClickListener(): android.widget.AdapterView.IOnItemClickListener;
			getListSelection(): number;
			getDropDownHeight(): number;
			setCompletionHint(arg1: java.lang.ICharSequence): void;
			setCompletionHint(arg1: string): void;
			getDropDownBackground(): android.graphics.drawable.Drawable;
			onCommitCompletion(arg1: android.view.inputmethod.CompletionInfo): void;
			onFilterComplete(arg1: number): void;
			dismissDropDown(): void;
			performValidation(): void;
			getDropDownAnchor(): number;
			performCompletion(): void;
			setThreshold(arg1: number): void;
			setText(arg1: java.lang.ICharSequence, arg2: boolean): void;
			setText(arg1: string, arg2: boolean): void;
			setListSelection(arg1: number): void;
			setText(arg1: java.lang.ICharSequence, arg2: android.widget.TextView.BufferType): void;
			setText(arg1: string, arg2: android.widget.TextView.BufferType): void;
			setText(arg1: java.lang.ICharSequence): void;
			setText(arg1: string): void;
			setText(arg1: number, arg2: android.widget.TextView.BufferType): void;
			setText(arg1: number): void;
			setText(arg1: native.Array<string>, arg2: number, arg3: number): void;
		}
		export module AutoCompleteTextView {
			export class Validator implements android.widget.AutoCompleteTextView.IValidator {
				constructor(implementation: android.widget.AutoCompleteTextView.IValidator);
				fixText(arg1: java.lang.ICharSequence): java.lang.ICharSequence;
				fixText(arg1: string): java.lang.ICharSequence;
				isValid(arg1: java.lang.ICharSequence): boolean;
				isValid(arg1: string): boolean;
			}
			export interface IValidator {
				fixText(arg1: string): java.lang.ICharSequence;
				isValid(arg1: string): boolean;
			}
			export class OnDismissListener implements android.widget.AutoCompleteTextView.IOnDismissListener {
				constructor(implementation: android.widget.AutoCompleteTextView.IOnDismissListener);
				onDismiss(): void;
			}
			export interface IOnDismissListener {
				onDismiss(): void;
			}
		}
		export class PopupMenu extends java.lang.Object {
			constructor(arg1: android.content.Context, arg2: android.view.View);
			static class: java.lang.Class<android.widget.PopupMenu>;
			setOnMenuItemClickListener(arg1: android.widget.PopupMenu.IOnMenuItemClickListener): void;
			setOnDismissListener(arg1: android.widget.PopupMenu.IOnDismissListener): void;
			getMenuInflater(): android.view.MenuInflater;
			dismiss(): void;
			show(): void;
			inflate(arg1: number): void;
			getMenu(): android.view.IMenu;
		}
		export module PopupMenu {
			export class OnMenuItemClickListener implements android.widget.PopupMenu.IOnMenuItemClickListener {
				constructor(implementation: android.widget.PopupMenu.IOnMenuItemClickListener);
				onMenuItemClick(arg1: android.view.IMenuItem): boolean;
			}
			export interface IOnMenuItemClickListener {
				onMenuItemClick(arg1: android.view.IMenuItem): boolean;
			}
			export class OnDismissListener implements android.widget.PopupMenu.IOnDismissListener {
				constructor(implementation: android.widget.PopupMenu.IOnDismissListener);
				onDismiss(arg1: android.widget.PopupMenu): void;
			}
			export interface IOnDismissListener {
				onDismiss(arg1: android.widget.PopupMenu): void;
			}
		}
		export class ZoomControls extends android.widget.LinearLayout {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.ZoomControls>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setOnZoomOutClickListener(arg1: android.view.View.IOnClickListener): void;
			setOnZoomInClickListener(arg1: android.view.View.IOnClickListener): void;
			setIsZoomOutEnabled(arg1: boolean): void;
			setIsZoomInEnabled(arg1: boolean): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			setZoomSpeed(arg1: native.Long): void;
			hide(): void;
			show(): void;
			hasFocus(): boolean;
		}
		export class StackView extends android.widget.AdapterViewAnimator {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.StackView>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			showNext(): void;
			showPrevious(): void;
			onInterceptTouchEvent(arg1: android.view.MotionEvent): boolean;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			performAccessibilityAction(arg1: number, arg2: android.os.Bundle): boolean;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			advance(): void;
		}
		export class LinearLayout extends android.view.ViewGroup {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static HORIZONTAL: number;
			static VERTICAL: number;
			static SHOW_DIVIDER_NONE: number;
			static SHOW_DIVIDER_BEGINNING: number;
			static SHOW_DIVIDER_MIDDLE: number;
			static SHOW_DIVIDER_END: number;
			static class: java.lang.Class<android.widget.LinearLayout>;
			BaselineAlignedChildIndex: number;
			Orientation: number;
			DividerPadding: number;
			DividerDrawable: android.graphics.drawable.Drawable;
			ShowDividers: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			setWeightSum(arg1: native.Float): void;
			getWeightSum(): number;
			setGravity(arg1: number): void;
			setShowDividers(arg1: number): void;
			getShowDividers(): number;
			getDividerDrawable(): android.graphics.drawable.Drawable;
			isBaselineAligned(): boolean;
			setVerticalGravity(arg1: number): void;
			setDividerDrawable(arg1: android.graphics.drawable.Drawable): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.LinearLayout.LayoutParams;
			getDividerPadding(): number;
			setHorizontalGravity(arg1: number): void;
			setDividerPadding(arg1: number): void;
			setBaselineAligned(arg1: boolean): void;
			isMeasureWithLargestChildEnabled(): boolean;
			setMeasureWithLargestChildEnabled(arg1: boolean): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			getBaselineAlignedChildIndex(): number;
			setBaselineAlignedChildIndex(arg1: number): void;
			shouldDelayChildPressedState(): boolean;
			getOrientation(): number;
			getBaseline(): number;
			setOrientation(arg1: number): void;
		}
		export module LinearLayout {
			export class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
				constructor(arg1: android.view.ViewGroup.MarginLayoutParams);
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: number, arg2: number, arg3: native.Float);
				constructor(arg1: number, arg2: number);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				weight: native.Float;
				gravity: number;
				static class: java.lang.Class<android.widget.LinearLayout.LayoutParams>;
				debug(arg1: java.lang.String): string;
				debug(arg1: string): string;
			}
		}
		export interface ISpinnerAdapter extends android.widget.IAdapter {
			getDropDownView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			isEmpty(): boolean;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class FilterQueryProvider implements android.widget.IFilterQueryProvider {
			constructor(implementation: android.widget.IFilterQueryProvider);
			runQuery(arg1: java.lang.ICharSequence): android.database.ICursor;
			runQuery(arg1: string): android.database.ICursor;
		}
		export class SimpleExpandableListAdapter extends android.widget.BaseExpandableListAdapter {
			constructor(arg1: android.content.Context, arg2: java.util.IList<any>, arg3: number, arg4: number, arg5: native.Array<java.lang.String>, arg6: native.Array<number>, arg7: java.util.IList<any>, arg8: number, arg9: native.Array<java.lang.String>, arg10: native.Array<number>);
			constructor(arg1: android.content.Context, arg2: java.util.IList<any>, arg3: number, arg4: native.Array<java.lang.String>, arg5: native.Array<number>, arg6: java.util.IList<any>, arg7: number, arg8: native.Array<java.lang.String>, arg9: native.Array<number>);
			constructor(arg1: android.content.Context, arg2: java.util.IList<any>, arg3: number, arg4: number, arg5: native.Array<java.lang.String>, arg6: native.Array<number>, arg7: java.util.IList<any>, arg8: number, arg9: number, arg10: native.Array<java.lang.String>, arg11: native.Array<number>);
			static class: java.lang.Class<android.widget.SimpleExpandableListAdapter>;
			getChildId(arg1: number, arg2: number): any;
			getGroupCount(): number;
			getChildView(arg1: number, arg2: number, arg3: boolean, arg4: android.view.View, arg5: android.view.ViewGroup): android.view.View;
			newChildView(arg1: boolean, arg2: android.view.ViewGroup): android.view.View;
			getGroupView(arg1: number, arg2: boolean, arg3: android.view.View, arg4: android.view.ViewGroup): android.view.View;
			newGroupView(arg1: boolean, arg2: android.view.ViewGroup): android.view.View;
			getGroupId(arg1: number): any;
			getChildrenCount(arg1: number): number;
			isChildSelectable(arg1: number, arg2: number): boolean;
			hasStableIds(): boolean;
			getChild(arg1: number, arg2: number): any;
			getGroup(arg1: number): any;
		}
		export class ViewAnimator extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.ViewAnimator>;
			InAnimation: android.view.animation.Animation;
			AnimateFirstView: boolean;
			OutAnimation: android.view.animation.Animation;
			DisplayedChild: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			removeViews(arg1: number, arg2: number): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			removeView(arg1: android.view.View): void;
			removeViewAt(arg1: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			showNext(): void;
			showPrevious(): void;
			removeViewInLayout(arg1: android.view.View): void;
			removeAllViews(): void;
			removeViewsInLayout(arg1: number, arg2: number): void;
			getCurrentView(): android.view.View;
			setDisplayedChild(arg1: number): void;
			getAnimateFirstView(): boolean;
			setOutAnimation(arg1: android.content.Context, arg2: number): void;
			setOutAnimation(arg1: android.view.animation.Animation): void;
			getInAnimation(): android.view.animation.Animation;
			getOutAnimation(): android.view.animation.Animation;
			setAnimateFirstView(arg1: boolean): void;
			setInAnimation(arg1: android.content.Context, arg2: number): void;
			setInAnimation(arg1: android.view.animation.Animation): void;
			getDisplayedChild(): number;
			getBaseline(): number;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
			addView(arg1: android.view.View, arg2: number): void;
			addView(arg1: android.view.View): void;
		}
		export class RatingBar extends android.widget.AbsSeekBar {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.RatingBar>;
			NumStars: number;
			OnRatingBarChangeListener: android.widget.RatingBar.IOnRatingBarChangeListener;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setMax(arg1: number): void;
			getRating(): number;
			isIndicator(): boolean;
			setNumStars(arg1: number): void;
			setRating(arg1: native.Float): void;
			getNumStars(): number;
			getStepSize(): number;
			setStepSize(arg1: native.Float): void;
			setOnRatingBarChangeListener(arg1: android.widget.RatingBar.IOnRatingBarChangeListener): void;
			getOnRatingBarChangeListener(): android.widget.RatingBar.IOnRatingBarChangeListener;
			setIsIndicator(arg1: boolean): void;
		}
		export module RatingBar {
			export interface IOnRatingBarChangeListener {
				onRatingChanged(arg1: android.widget.RatingBar, arg2: native.Float, arg3: boolean): void;
			}
			export class OnRatingBarChangeListener implements android.widget.RatingBar.IOnRatingBarChangeListener {
				constructor(implementation: android.widget.RatingBar.IOnRatingBarChangeListener);
				onRatingChanged(arg1: android.widget.RatingBar, arg2: native.Float, arg3: boolean): void;
			}
		}
		export class HeterogeneousExpandableList implements android.widget.IHeterogeneousExpandableList {
			constructor(implementation: android.widget.IHeterogeneousExpandableList);
			getChildType(arg1: number, arg2: number): number;
			getGroupType(arg1: number): number;
			getChildTypeCount(): number;
			getGroupTypeCount(): number;
		}
		export class WrapperListAdapter implements android.widget.IListAdapter, android.widget.IWrapperListAdapter {
			constructor(implementation: android.widget.IWrapperListAdapter);
			getWrappedAdapter(): android.widget.IListAdapter;
			areAllItemsEnabled(): boolean;
			isEnabled(arg1: number): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			isEmpty(): boolean;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class AbsSeekBar extends android.widget.ProgressBar {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.AbsSeekBar>;
			Thumb: android.graphics.drawable.Drawable;
			ThumbOffset: number;
			KeyProgressIncrement: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onRtlPropertiesChanged(arg1: number): void;
			setMax(arg1: number): void;
			setThumb(arg1: android.graphics.drawable.Drawable): void;
			getThumb(): android.graphics.drawable.Drawable;
			setKeyProgressIncrement(arg1: number): void;
			getKeyProgressIncrement(): number;
			jumpDrawablesToCurrentState(): void;
			getThumbOffset(): number;
			setThumbOffset(arg1: number): void;
			performAccessibilityAction(arg1: number, arg2: android.os.Bundle): boolean;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
		}
		export class CursorAdapter extends android.widget.BaseAdapter implements android.widget.IFilterable {
			constructor(arg1: android.content.Context, arg2: android.database.ICursor, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.database.ICursor, arg3: boolean);
			constructor(arg1: android.content.Context, arg2: android.database.ICursor);
			static FLAG_AUTO_REQUERY: number;
			static FLAG_REGISTER_CONTENT_OBSERVER: number;
			static class: java.lang.Class<android.widget.CursorAdapter>;
			FilterQueryProvider: android.widget.IFilterQueryProvider;
			setFilterQueryProvider(arg1: android.widget.IFilterQueryProvider): void;
			getFilterQueryProvider(): android.widget.IFilterQueryProvider;
			runQueryOnBackgroundThread(arg1: java.lang.ICharSequence): android.database.ICursor;
			runQueryOnBackgroundThread(arg1: string): android.database.ICursor;
			convertToString(arg1: android.database.ICursor): java.lang.ICharSequence;
			newDropDownView(arg1: android.content.Context, arg2: android.database.ICursor, arg3: android.view.ViewGroup): android.view.View;
			getDropDownView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			changeCursor(arg1: android.database.ICursor): void;
			hasStableIds(): boolean;
			bindView(arg1: android.view.View, arg2: android.content.Context, arg3: android.database.ICursor): void;
			getItemId(arg1: number): any;
			newView(arg1: android.content.Context, arg2: android.database.ICursor, arg3: android.view.ViewGroup): android.view.View;
			getCursor(): android.database.ICursor;
			getFilter(): android.widget.Filter;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			swapCursor(arg1: android.database.ICursor): android.database.ICursor;
			getCount(): number;
		}
		export class ResourceCursorAdapter extends android.widget.CursorAdapter {
			constructor(arg1: android.content.Context, arg2: number, arg3: android.database.ICursor, arg4: number);
			constructor(arg1: android.content.Context, arg2: number, arg3: android.database.ICursor, arg4: boolean);
			constructor(arg1: android.content.Context, arg2: number, arg3: android.database.ICursor);
			static class: java.lang.Class<android.widget.ResourceCursorAdapter>;
			setDropDownViewResource(arg1: number): void;
			setViewResource(arg1: number): void;
			newDropDownView(arg1: android.content.Context, arg2: android.database.ICursor, arg3: android.view.ViewGroup): android.view.View;
			newView(arg1: android.content.Context, arg2: android.database.ICursor, arg3: android.view.ViewGroup): android.view.View;
		}
		export class Spinner extends android.widget.AbsSpinner implements android.content.DialogInterface.IOnClickListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number, arg4: number);
			static MODE_DIALOG: number;
			static MODE_DROPDOWN: number;
			static class: java.lang.Class<android.widget.Spinner>;
			Prompt: java.lang.ICharSequence;
			Gravity: number;
			DropDownVerticalOffset: number;
			DropDownWidth: number;
			DropDownHorizontalOffset: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			performClick(): boolean;
			setGravity(arg1: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setDropDownVerticalOffset(arg1: number): void;
			setDropDownHorizontalOffset(arg1: number): void;
			getDropDownHorizontalOffset(): number;
			setOnItemClickListener(arg1: android.widget.AdapterView.IOnItemClickListener): void;
			getDropDownVerticalOffset(): number;
			setAdapter(arg1: android.widget.ISpinnerAdapter): void;
			setAdapter(arg1: android.widget.IAdapter): void;
			getDropDownWidth(): number;
			setDropDownWidth(arg1: number): void;
			getGravity(): number;
			onClick(arg1: android.content.IDialogInterface, arg2: number): void;
			getPrompt(): java.lang.ICharSequence;
			setPrompt(arg1: java.lang.ICharSequence): void;
			setPrompt(arg1: string): void;
			setPromptId(arg1: number): void;
			setPopupBackgroundResource(arg1: number): void;
			setPopupBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			getPopupBackground(): android.graphics.drawable.Drawable;
			getBaseline(): number;
			setEnabled(arg1: boolean): void;
		}
		export class ImageSwitcher extends android.widget.ViewSwitcher {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.ImageSwitcher>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setImageResource(arg1: number): void;
			setImageDrawable(arg1: android.graphics.drawable.Drawable): void;
			setImageURI(arg1: android.net.Uri): void;
		}
		export interface ICheckable {
			isChecked(): boolean;
			setChecked(arg1: boolean): void;
			toggle(): void;
		}
		export interface IExpandableListAdapter {
			getChildId(arg1: number, arg2: number): any;
			getGroupCount(): number;
			getChildView(arg1: number, arg2: number, arg3: boolean, arg4: android.view.View, arg5: android.view.ViewGroup): android.view.View;
			getGroupView(arg1: number, arg2: boolean, arg3: android.view.View, arg4: android.view.ViewGroup): android.view.View;
			getGroupId(arg1: number): any;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getChildrenCount(arg1: number): number;
			isChildSelectable(arg1: number, arg2: number): boolean;
			onGroupCollapsed(arg1: number): void;
			onGroupExpanded(arg1: number): void;
			getCombinedChildId(arg1: native.Long, arg2: native.Long): any;
			getCombinedGroupId(arg1: native.Long): any;
			areAllItemsEnabled(): boolean;
			hasStableIds(): boolean;
			isEmpty(): boolean;
			getChild(arg1: number, arg2: number): any;
			getGroup(arg1: number): any;
		}
		export class HeaderViewListAdapter extends java.lang.Object implements android.widget.IWrapperListAdapter, android.widget.IFilterable {
			constructor(arg1: java.util.ArrayList<android.widget.ListView.FixedViewInfo>, arg2: java.util.ArrayList<android.widget.ListView.FixedViewInfo>, arg3: android.widget.IListAdapter);
			static class: java.lang.Class<android.widget.HeaderViewListAdapter>;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			areAllItemsEnabled(): boolean;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			removeHeader(arg1: android.view.View): boolean;
			removeFooter(arg1: android.view.View): boolean;
			getFootersCount(): number;
			getHeadersCount(): number;
			getWrappedAdapter(): android.widget.IListAdapter;
			isEmpty(): boolean;
			isEnabled(arg1: number): boolean;
			getFilter(): android.widget.Filter;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class Filterable implements android.widget.IFilterable {
			constructor(implementation: android.widget.IFilterable);
			getFilter(): android.widget.Filter;
		}
		export class TextClock extends android.widget.TextView {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static DEFAULT_FORMAT_12_HOUR: java.lang.ICharSequence;
			static DEFAULT_FORMAT_24_HOUR: java.lang.ICharSequence;
			static class: java.lang.Class<android.widget.TextClock>;
			Format24Hour: java.lang.ICharSequence;
			Format12Hour: java.lang.ICharSequence;
			TimeZone: string;
			getFormat24Hour(): java.lang.ICharSequence;
			setFormat24Hour(arg1: java.lang.ICharSequence): void;
			setFormat24Hour(arg1: string): void;
			getFormat12Hour(): java.lang.ICharSequence;
			is24HourModeEnabled(): boolean;
			setFormat12Hour(arg1: java.lang.ICharSequence): void;
			setFormat12Hour(arg1: string): void;
			getTimeZone(): string;
			setTimeZone(arg1: java.lang.String): void;
			setTimeZone(arg1: string): void;
		}
		export class Button extends android.widget.TextView {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.Button>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
		}
		export class RemoteViews extends java.lang.Object implements android.os.IParcelable, android.view.LayoutInflater.IFilter {
			constructor(arg1: android.os.Parcel);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			constructor(arg1: android.widget.RemoteViews, arg2: android.widget.RemoteViews);
			static CREATOR: android.os.Parcelable.ICreator<android.widget.RemoteViews>;
			static class: java.lang.Class<android.widget.RemoteViews>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			addView(arg1: number, arg2: android.widget.RemoteViews): void;
			setBundle(arg1: number, arg2: java.lang.String, arg3: android.os.Bundle): void;
			setBundle(arg1: number, arg2: string, arg3: android.os.Bundle): void;
			setIntent(arg1: number, arg2: java.lang.String, arg3: android.content.Intent): void;
			setIntent(arg1: number, arg2: string, arg3: android.content.Intent): void;
			getLayoutId(): number;
			showNext(arg1: number): void;
			reapply(arg1: android.content.Context, arg2: android.view.View): void;
			onLoadClass(arg1: java.lang.Class<any>): boolean;
			showPrevious(arg1: number): void;
			setUri(arg1: number, arg2: java.lang.String, arg3: android.net.Uri): void;
			setUri(arg1: number, arg2: string, arg3: android.net.Uri): void;
			setBitmap(arg1: number, arg2: java.lang.String, arg3: android.graphics.Bitmap): void;
			setBitmap(arg1: number, arg2: string, arg3: android.graphics.Bitmap): void;
			setTextViewCompoundDrawables(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			setOnClickPendingIntent(arg1: number, arg2: android.app.PendingIntent): void;
			setOnClickFillInIntent(arg1: number, arg2: android.content.Intent): void;
			setPendingIntentTemplate(arg1: number, arg2: android.app.PendingIntent): void;
			setRelativeScrollPosition(arg1: number, arg2: number): void;
			removeAllViews(arg1: number): void;
			setTextViewTextSize(arg1: number, arg2: number, arg3: native.Float): void;
			setScrollPosition(arg1: number, arg2: number): void;
			setImageViewUri(arg1: number, arg2: android.net.Uri): void;
			setImageViewBitmap(arg1: number, arg2: android.graphics.Bitmap): void;
			setChronometer(arg1: number, arg2: native.Long, arg3: java.lang.String, arg4: boolean): void;
			setChronometer(arg1: number, arg2: native.Long, arg3: string, arg4: boolean): void;
			setViewPadding(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			setDisplayedChild(arg1: number, arg2: number): void;
			setViewVisibility(arg1: number, arg2: number): void;
			setImageViewResource(arg1: number, arg2: number): void;
			setProgressBar(arg1: number, arg2: number, arg3: number, arg4: boolean): void;
			setTextViewText(arg1: number, arg2: java.lang.ICharSequence): void;
			setTextViewText(arg1: number, arg2: string): void;
			setRemoteAdapter(arg1: number, arg2: number, arg3: android.content.Intent): void;
			setRemoteAdapter(arg1: number, arg2: android.content.Intent): void;
			setCharSequence(arg1: number, arg2: java.lang.String, arg3: java.lang.ICharSequence): void;
			setCharSequence(arg1: number, arg2: string, arg3: string): void;
			setContentDescription(arg1: number, arg2: java.lang.ICharSequence): void;
			setContentDescription(arg1: number, arg2: string): void;
			apply(arg1: android.content.Context, arg2: android.view.ViewGroup): android.view.View;
			setTextViewCompoundDrawablesRelative(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			setTextColor(arg1: number, arg2: number): void;
			setEmptyView(arg1: number, arg2: number): void;
			clone(): android.widget.RemoteViews;
			getPackage(): string;
			setBoolean(arg1: number, arg2: java.lang.String, arg3: boolean): void;
			setBoolean(arg1: number, arg2: string, arg3: boolean): void;
			setByte(arg1: number, arg2: java.lang.String, arg3: native.Byte): void;
			setByte(arg1: number, arg2: string, arg3: native.Byte): void;
			setChar(arg1: number, arg2: java.lang.String, arg3: string): void;
			setChar(arg1: number, arg2: string, arg3: string): void;
			setDouble(arg1: number, arg2: java.lang.String, arg3: native.Double): void;
			setDouble(arg1: number, arg2: string, arg3: number): void;
			setFloat(arg1: number, arg2: java.lang.String, arg3: native.Float): void;
			setFloat(arg1: number, arg2: string, arg3: native.Float): void;
			setInt(arg1: number, arg2: java.lang.String, arg3: number): void;
			setInt(arg1: number, arg2: string, arg3: number): void;
			setLong(arg1: number, arg2: java.lang.String, arg3: native.Long): void;
			setLong(arg1: number, arg2: string, arg3: native.Long): void;
			setShort(arg1: number, arg2: java.lang.String, arg3: native.Short): void;
			setShort(arg1: number, arg2: string, arg3: native.Short): void;
			setLabelFor(arg1: number, arg2: number): void;
			setString(arg1: number, arg2: java.lang.String, arg3: java.lang.String): void;
			setString(arg1: number, arg2: string, arg3: string): void;
		}
		export module RemoteViews {
			export class RemoteView implements java.lang.annotation.IAnnotation, android.widget.RemoteViews.IRemoteView {
				constructor(implementation: android.widget.RemoteViews.IRemoteView);
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class ActionException extends java.lang.RuntimeException {
				constructor(arg1: java.lang.Exception);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.widget.RemoteViews.ActionException>;
			}
			export interface IRemoteView extends java.lang.annotation.IAnnotation {
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
		}
		export class BaseAdapter extends java.lang.Object implements android.widget.IListAdapter, android.widget.ISpinnerAdapter {
			constructor();
			static class: java.lang.Class<android.widget.BaseAdapter>;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			notifyDataSetInvalidated(): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			notifyDataSetChanged(): void;
			areAllItemsEnabled(): boolean;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			getDropDownView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			hasStableIds(): boolean;
			isEmpty(): boolean;
			isEnabled(arg1: number): boolean;
			getItemId(arg1: number): any;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class RadioGroup extends android.widget.LinearLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.RadioGroup>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.RadioGroup.LayoutParams;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setOnHierarchyChangeListener(arg1: android.view.ViewGroup.IOnHierarchyChangeListener): void;
			setOnCheckedChangeListener(arg1: android.widget.RadioGroup.IOnCheckedChangeListener): void;
			clearCheck(): void;
			getCheckedRadioButtonId(): number;
			check(arg1: number): void;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
			addView(arg1: android.view.View, arg2: number): void;
			addView(arg1: android.view.View): void;
		}
		export module RadioGroup {
			export class OnCheckedChangeListener implements android.widget.RadioGroup.IOnCheckedChangeListener {
				constructor(implementation: android.widget.RadioGroup.IOnCheckedChangeListener);
				onCheckedChanged(arg1: android.widget.RadioGroup, arg2: number): void;
			}
			export interface IOnCheckedChangeListener {
				onCheckedChanged(arg1: android.widget.RadioGroup, arg2: number): void;
			}
			export class LayoutParams extends android.widget.LinearLayout.LayoutParams {
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: android.view.ViewGroup.MarginLayoutParams);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: number, arg2: number, arg3: native.Float);
				constructor(arg1: number, arg2: number);
				static class: java.lang.Class<android.widget.RadioGroup.LayoutParams>;
			}
		}
		export class ToggleButton extends android.widget.CompoundButton {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.ToggleButton>;
			TextOn: java.lang.ICharSequence;
			TextOff: java.lang.ICharSequence;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			setChecked(arg1: boolean): void;
			getTextOn(): java.lang.ICharSequence;
			getTextOff(): java.lang.ICharSequence;
			setTextOff(arg1: java.lang.ICharSequence): void;
			setTextOff(arg1: string): void;
			setTextOn(arg1: java.lang.ICharSequence): void;
			setTextOn(arg1: string): void;
		}
		export interface IHeterogeneousExpandableList {
			getChildType(arg1: number, arg2: number): number;
			getGroupType(arg1: number): number;
			getChildTypeCount(): number;
			getGroupTypeCount(): number;
		}
		export class AbsSpinner extends android.widget.AdapterView<android.widget.ISpinnerAdapter> {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.AbsSpinner>;
			Adapter: android.widget.ISpinnerAdapter;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			requestLayout(): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			pointToPosition(arg1: number, arg2: number): number;
			onSaveInstanceState(): android.os.IParcelable;
			onRestoreInstanceState(arg1: android.os.IParcelable): void;
			getAdapter(): android.widget.ISpinnerAdapter;
			setAdapter(arg1: android.widget.ISpinnerAdapter): void;
			setAdapter(arg1: android.widget.IAdapter): void;
			setSelection(arg1: number, arg2: boolean): void;
			setSelection(arg1: number): void;
			getSelectedView(): android.view.View;
			getCount(): number;
		}
		export class Space extends android.view.View {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.Space>;
			draw(arg1: android.graphics.Canvas): void;
		}
		export class ScrollView extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.ScrollView>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			requestLayout(): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number): void;
			addView(arg1: android.view.View): void;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			requestChildFocus(arg1: android.view.View, arg2: android.view.View): void;
			requestDisallowInterceptTouchEvent(arg1: boolean): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			shouldDelayChildPressedState(): boolean;
			requestChildRectangleOnScreen(arg1: android.view.View, arg2: android.graphics.Rect, arg3: boolean): boolean;
			setSmoothScrollingEnabled(arg1: boolean): void;
			onInterceptTouchEvent(arg1: android.view.MotionEvent): boolean;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			isSmoothScrollingEnabled(): boolean;
			performAccessibilityAction(arg1: number, arg2: android.os.Bundle): boolean;
			scrollTo(arg1: number, arg2: number): void;
			computeScroll(): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			fling(arg1: number): void;
			setOverScrollMode(arg1: number): void;
			isFillViewport(): boolean;
			smoothScrollBy(arg1: number, arg2: number): void;
			getMaxScrollAmount(): number;
			setFillViewport(arg1: boolean): void;
			executeKeyEvent(arg1: android.view.KeyEvent): boolean;
			smoothScrollTo(arg1: number, arg2: number): void;
			pageScroll(arg1: number): boolean;
			arrowScroll(arg1: number): boolean;
			fullScroll(arg1: number): boolean;
			draw(arg1: android.graphics.Canvas): void;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
		}
		export class Checkable implements android.widget.ICheckable {
			constructor(implementation: android.widget.ICheckable);
			isChecked(): boolean;
			setChecked(arg1: boolean): void;
			toggle(): void;
		}
		export class CheckedTextView extends android.widget.TextView implements android.widget.ICheckable {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.CheckedTextView>;
			CheckMarkDrawable: android.graphics.drawable.Drawable;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onRtlPropertiesChanged(arg1: number): void;
			isChecked(): boolean;
			setChecked(arg1: boolean): void;
			setCheckMarkDrawable(arg1: number): void;
			setCheckMarkDrawable(arg1: android.graphics.drawable.Drawable): void;
			getCheckMarkDrawable(): android.graphics.drawable.Drawable;
			toggle(): void;
		}
		export class Scroller extends java.lang.Object {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.view.animation.IInterpolator);
			constructor(arg1: android.content.Context, arg2: android.view.animation.IInterpolator, arg3: boolean);
			static class: java.lang.Class<android.widget.Scroller>;
			FinalY: number;
			FinalX: number;
			setFriction(arg1: native.Float): void;
			forceFinished(arg1: boolean): void;
			getCurrX(): number;
			getDuration(): number;
			getCurrY(): number;
			isFinished(): boolean;
			getStartX(): number;
			getFinalX(): number;
			getFinalY(): number;
			startScroll(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			startScroll(arg1: number, arg2: number, arg3: number, arg4: number): void;
			getStartY(): number;
			timePassed(): number;
			computeScrollOffset(): boolean;
			getCurrVelocity(): number;
			abortAnimation(): void;
			extendDuration(arg1: number): void;
			fling(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
			setFinalY(arg1: number): void;
			setFinalX(arg1: number): void;
		}
		export class ListAdapter implements android.widget.IAdapter, android.widget.IListAdapter {
			constructor(implementation: android.widget.IListAdapter);
			areAllItemsEnabled(): boolean;
			isEnabled(arg1: number): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			isEmpty(): boolean;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class TextSwitcher extends android.widget.ViewSwitcher {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.TextSwitcher>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setCurrentText(arg1: java.lang.ICharSequence): void;
			setCurrentText(arg1: string): void;
			setText(arg1: java.lang.ICharSequence): void;
			setText(arg1: string): void;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
			addView(arg1: android.view.View, arg2: number): void;
			addView(arg1: android.view.View): void;
		}
		export class OverScroller extends java.lang.Object {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.view.animation.IInterpolator);
			constructor(arg1: android.content.Context, arg2: android.view.animation.IInterpolator, arg3: native.Float, arg4: native.Float, arg5: boolean);
			constructor(arg1: android.content.Context, arg2: android.view.animation.IInterpolator, arg3: native.Float, arg4: native.Float);
			static class: java.lang.Class<android.widget.OverScroller>;
			setFriction(arg1: native.Float): void;
			forceFinished(arg1: boolean): void;
			getCurrX(): number;
			getCurrY(): number;
			isFinished(): boolean;
			getStartX(): number;
			getFinalX(): number;
			getFinalY(): number;
			startScroll(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			startScroll(arg1: number, arg2: number, arg3: number, arg4: number): void;
			getStartY(): number;
			computeScrollOffset(): boolean;
			getCurrVelocity(): number;
			abortAnimation(): void;
			fling(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number): void;
			fling(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
			springBack(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): boolean;
			notifyVerticalEdgeReached(arg1: number, arg2: number, arg3: number): void;
			notifyHorizontalEdgeReached(arg1: number, arg2: number, arg3: number): void;
			isOverScrolled(): boolean;
		}
		export class ViewFlipper extends android.widget.ViewAnimator {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.ViewFlipper>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setFlipInterval(arg1: number): void;
			setAutoStart(arg1: boolean): void;
			isAutoStart(): boolean;
			startFlipping(): void;
			stopFlipping(): void;
			isFlipping(): boolean;
		}
		export class SimpleCursorAdapter extends android.widget.ResourceCursorAdapter {
			constructor(arg1: android.content.Context, arg2: number, arg3: android.database.ICursor, arg4: native.Array<java.lang.String>, arg5: native.Array<number>);
			constructor(arg1: android.content.Context, arg2: number, arg3: android.database.ICursor, arg4: native.Array<java.lang.String>, arg5: native.Array<number>, arg6: number);
			static class: java.lang.Class<android.widget.SimpleCursorAdapter>;
			CursorToStringConverter: android.widget.SimpleCursorAdapter.ICursorToStringConverter;
			StringConversionColumn: number;
			ViewBinder: android.widget.SimpleCursorAdapter.IViewBinder;
			getStringConversionColumn(): number;
			setStringConversionColumn(arg1: number): void;
			getCursorToStringConverter(): android.widget.SimpleCursorAdapter.ICursorToStringConverter;
			setCursorToStringConverter(arg1: android.widget.SimpleCursorAdapter.ICursorToStringConverter): void;
			changeCursorAndColumns(arg1: android.database.ICursor, arg2: native.Array<java.lang.String>, arg3: native.Array<number>): void;
			convertToString(arg1: android.database.ICursor): java.lang.ICharSequence;
			setViewBinder(arg1: android.widget.SimpleCursorAdapter.IViewBinder): void;
			getViewBinder(): android.widget.SimpleCursorAdapter.IViewBinder;
			bindView(arg1: android.view.View, arg2: android.content.Context, arg3: android.database.ICursor): void;
			setViewText(arg1: android.widget.TextView, arg2: java.lang.String): void;
			setViewText(arg1: android.widget.TextView, arg2: string): void;
			setViewImage(arg1: android.widget.ImageView, arg2: java.lang.String): void;
			setViewImage(arg1: android.widget.ImageView, arg2: string): void;
			swapCursor(arg1: android.database.ICursor): android.database.ICursor;
		}
		export module SimpleCursorAdapter {
			export class CursorToStringConverter implements android.widget.SimpleCursorAdapter.ICursorToStringConverter {
				constructor(implementation: android.widget.SimpleCursorAdapter.ICursorToStringConverter);
				convertToString(arg1: android.database.ICursor): java.lang.ICharSequence;
			}
			export interface ICursorToStringConverter {
				convertToString(arg1: android.database.ICursor): java.lang.ICharSequence;
			}
			export class ViewBinder implements android.widget.SimpleCursorAdapter.IViewBinder {
				constructor(implementation: android.widget.SimpleCursorAdapter.IViewBinder);
				setViewValue(arg1: android.view.View, arg2: android.database.ICursor, arg3: number): boolean;
			}
			export interface IViewBinder {
				setViewValue(arg1: android.view.View, arg2: android.database.ICursor, arg3: number): boolean;
			}
		}
		export interface IListAdapter extends android.widget.IAdapter {
			areAllItemsEnabled(): boolean;
			isEnabled(arg1: number): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			isEmpty(): boolean;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class ImageView extends android.view.View {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.ImageView>;
			MaxWidth: number;
			CropToPadding: boolean;
			ImageMatrix: android.graphics.Matrix;
			ScaleType: android.widget.ImageView.ScaleType;
			ColorFilter: android.graphics.ColorFilter;
			ImageAlpha: number;
			BaselineAlignBottom: boolean;
			MaxHeight: number;
			Baseline: number;
			AdjustViewBounds: boolean;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			setVisibility(arg1: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			getImageAlpha(): number;
			setBaseline(arg1: number): void;
			setImageAlpha(arg1: number): void;
			setBaselineAlignBottom(arg1: boolean): void;
			getBaselineAlignBottom(): boolean;
			onCreateDrawableState(arg1: number): native.Array<number>;
			onPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			jumpDrawablesToCurrentState(): void;
			getAdjustViewBounds(): boolean;
			clearColorFilter(): void;
			setImageResource(arg1: number): void;
			setImageDrawable(arg1: android.graphics.drawable.Drawable): void;
			setAdjustViewBounds(arg1: boolean): void;
			getCropToPadding(): boolean;
			setImageMatrix(arg1: android.graphics.Matrix): void;
			setImageBitmap(arg1: android.graphics.Bitmap): void;
			setCropToPadding(arg1: boolean): void;
			setColorFilter(arg1: android.graphics.ColorFilter): void;
			setColorFilter(arg1: number, arg2: android.graphics.PorterDuff.Mode): void;
			setColorFilter(arg1: number): void;
			getImageMatrix(): android.graphics.Matrix;
			getColorFilter(): android.graphics.ColorFilter;
			hasOverlappingRendering(): boolean;
			setAlpha(arg1: number): void;
			invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
			setMaxHeight(arg1: number): void;
			getMaxHeight(): number;
			setImageState(arg1: native.Array<number>, arg2: boolean): void;
			setImageLevel(arg1: number): void;
			setScaleType(arg1: android.widget.ImageView.ScaleType): void;
			getScaleType(): android.widget.ImageView.ScaleType;
			setImageURI(arg1: android.net.Uri): void;
			getDrawable(): android.graphics.drawable.Drawable;
			getBaseline(): number;
			setSelected(arg1: boolean): void;
			getMaxWidth(): number;
			setMaxWidth(arg1: number): void;
			setAlpha(arg1: native.Float): void;
		}
		export module ImageView {
			export enum ScaleType {
				CENTER,
				CENTER_CROP,
				CENTER_INSIDE,
				FIT_CENTER,
				FIT_END,
				FIT_START,
				FIT_XY,
				MATRIX
			}
			export module ScaleType {
				export function valueOf(arg1: java.lang.String): android.widget.ImageView.ScaleType;
				export function valueOf(arg1: string): android.widget.ImageView.ScaleType;
				export function values(): native.Array<android.widget.ImageView.ScaleType>;
			}
		}
		export class QuickContactBadge extends android.widget.ImageView implements android.view.View.IOnClickListener {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.QuickContactBadge>;
			setMode(arg1: number): void;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onClick(arg1: android.view.View): void;
			assignContactFromEmail(arg1: java.lang.String, arg2: boolean): void;
			assignContactFromEmail(arg1: string, arg2: boolean): void;
			assignContactFromPhone(arg1: java.lang.String, arg2: boolean): void;
			assignContactFromPhone(arg1: string, arg2: boolean): void;
			assignContactUri(arg1: android.net.Uri): void;
			setImageToDefault(): void;
			setExcludeMimes(arg1: native.Array<java.lang.String>): void;
		}
		export class AnalogClock extends android.view.View {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.AnalogClock>;
		}
		export class DigitalClock extends android.widget.TextView {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.DigitalClock>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
		}
		export class SpinnerAdapter implements android.widget.IAdapter, android.widget.ISpinnerAdapter {
			constructor(implementation: android.widget.ISpinnerAdapter);
			getDropDownView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getItemViewType(arg1: number): number;
			getViewTypeCount(): number;
			hasStableIds(): boolean;
			getItemId(arg1: number): any;
			isEmpty(): boolean;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export class VideoView extends android.view.SurfaceView implements android.widget.MediaController.IMediaPlayerControl {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.VideoView>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setOnPreparedListener(arg1: android.media.MediaPlayer.IOnPreparedListener): void;
			setMediaController(arg1: android.widget.MediaController): void;
			setOnErrorListener(arg1: android.media.MediaPlayer.IOnErrorListener): void;
			setOnInfoListener(arg1: android.media.MediaPlayer.IOnInfoListener): void;
			resolveAdjustedSize(arg1: number, arg2: number): number;
			canPause(): boolean;
			isPlaying(): boolean;
			getDuration(): number;
			seekTo(arg1: number): void;
			getBufferPercentage(): number;
			canSeekBackward(): boolean;
			canSeekForward(): boolean;
			getCurrentPosition(): number;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			pause(): void;
			setVideoURI(arg1: android.net.Uri): void;
			stopPlayback(): void;
			setVideoPath(arg1: java.lang.String): void;
			setVideoPath(arg1: string): void;
			setOnCompletionListener(arg1: android.media.MediaPlayer.IOnCompletionListener): void;
			start(): void;
			resume(): void;
			suspend(): void;
		}
		export class ListView extends android.widget.AbsListView {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.ListView>;
			FixedViewInfo: { new (): android.widget.ListView.FixedViewInfo };
			Divider: android.graphics.drawable.Drawable;
			DividerHeight: number;
			OverscrollFooter: android.graphics.drawable.Drawable;
			ItemsCanFocus: boolean;
			OverscrollHeader: android.graphics.drawable.Drawable;
			Adapter: android.widget.IListAdapter;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			requestChildRectangleOnScreen(arg1: android.view.View, arg2: android.graphics.Rect, arg3: boolean): boolean;
			addHeaderView(arg1: android.view.View): void;
			addHeaderView(arg1: android.view.View, arg2: any, arg3: boolean): void;
			addFooterView(arg1: android.view.View): void;
			addFooterView(arg1: android.view.View, arg2: any, arg3: boolean): void;
			setDivider(arg1: android.graphics.drawable.Drawable): void;
			smoothScrollToPosition(arg1: number): void;
			setFooterDividersEnabled(arg1: boolean): void;
			setSelectionAfterHeaderView(): void;
			setHeaderDividersEnabled(arg1: boolean): void;
			setOverscrollFooter(arg1: android.graphics.drawable.Drawable): void;
			getOverscrollHeader(): android.graphics.drawable.Drawable;
			setSelectionFromTop(arg1: number, arg2: number): void;
			setItemsCanFocus(arg1: boolean): void;
			setOverscrollHeader(arg1: android.graphics.drawable.Drawable): void;
			getCheckItemIds(): native.Array<native.Long>;
			getItemsCanFocus(): boolean;
			removeHeaderView(arg1: android.view.View): boolean;
			smoothScrollByOffset(arg1: number): void;
			getDividerHeight(): number;
			removeFooterView(arg1: android.view.View): boolean;
			setDividerHeight(arg1: number): void;
			getOverscrollFooter(): android.graphics.drawable.Drawable;
			getFooterViewsCount(): number;
			setCacheColorHint(arg1: number): void;
			setRemoteViewsAdapter(arg1: android.content.Intent): void;
			getHeaderViewsCount(): number;
			getAdapter(): android.widget.IListAdapter;
			setAdapter(arg1: android.widget.IListAdapter): void;
			setAdapter(arg1: android.widget.IAdapter): void;
			setSelection(arg1: number): void;
			getMaxScrollAmount(): number;
			isOpaque(): boolean;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			getDivider(): android.graphics.drawable.Drawable;
			smoothScrollToPosition(arg1: number, arg2: number): void;
		}
		export module ListView {
			export class FixedViewInfo extends java.lang.Object {
				view: android.view.View;
				data: any;
				isSelectable: boolean;
				static class: java.lang.Class<android.widget.ListView.FixedViewInfo>;
			}
		}
		export class TableRow extends android.widget.LinearLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.TableRow>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.TableRow.LayoutParams;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setOnHierarchyChangeListener(arg1: android.view.ViewGroup.IOnHierarchyChangeListener): void;
			getVirtualChildCount(): number;
			getVirtualChildAt(arg1: number): android.view.View;
		}
		export module TableRow {
			export class LayoutParams extends android.widget.LinearLayout.LayoutParams {
				constructor(arg1: number);
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: android.view.ViewGroup.MarginLayoutParams);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor();
				constructor(arg1: number, arg2: number, arg3: native.Float);
				constructor(arg1: number, arg2: number);
				column: number;
				span: number;
				static class: java.lang.Class<android.widget.TableRow.LayoutParams>;
			}
		}
		export class SeekBar extends android.widget.AbsSeekBar {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.SeekBar>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setOnSeekBarChangeListener(arg1: android.widget.SeekBar.IOnSeekBarChangeListener): void;
		}
		export module SeekBar {
			export class OnSeekBarChangeListener implements android.widget.SeekBar.IOnSeekBarChangeListener {
				constructor(implementation: android.widget.SeekBar.IOnSeekBarChangeListener);
				onProgressChanged(arg1: android.widget.SeekBar, arg2: number, arg3: boolean): void;
				onStartTrackingTouch(arg1: android.widget.SeekBar): void;
				onStopTrackingTouch(arg1: android.widget.SeekBar): void;
			}
			export interface IOnSeekBarChangeListener {
				onProgressChanged(arg1: android.widget.SeekBar, arg2: number, arg3: boolean): void;
				onStartTrackingTouch(arg1: android.widget.SeekBar): void;
				onStopTrackingTouch(arg1: android.widget.SeekBar): void;
			}
		}
		export class NumberPicker extends android.widget.LinearLayout {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.NumberPicker>;
			Value: number;
			MinValue: number;
			DisplayedValues: native.Array<java.lang.String>;
			MaxValue: number;
			WrapSelectorWheel: boolean;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			dispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
			setMaxValue(arg1: number): void;
			setMinValue(arg1: number): void;
			setOnLongPressUpdateInterval(arg1: native.Long): void;
			setOnValueChangedListener(arg1: android.widget.NumberPicker.IOnValueChangeListener): void;
			dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
			onInterceptTouchEvent(arg1: android.view.MotionEvent): boolean;
			getAccessibilityNodeProvider(): android.view.accessibility.AccessibilityNodeProvider;
			getWrapSelectorWheel(): boolean;
			setWrapSelectorWheel(arg1: boolean): void;
			getDisplayedValues(): native.Array<java.lang.String>;
			setDisplayedValues(arg1: native.Array<java.lang.String>): void;
			setOnScrollListener(arg1: android.widget.NumberPicker.IOnScrollListener): void;
			scrollBy(arg1: number, arg2: number): void;
			getSolidColor(): number;
			computeScroll(): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			getValue(): number;
			setValue(arg1: number): void;
			setEnabled(arg1: boolean): void;
			setFormatter(arg1: android.widget.NumberPicker.IFormatter): void;
			getMaxValue(): number;
			getMinValue(): number;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
		}
		export module NumberPicker {
			export interface IFormatter {
				format(arg1: number): string;
			}
			export class OnScrollListener implements android.widget.NumberPicker.IOnScrollListener {
				constructor(implementation: android.widget.NumberPicker.IOnScrollListener);
				static SCROLL_STATE_IDLE: number;
				static SCROLL_STATE_TOUCH_SCROLL: number;
				static SCROLL_STATE_FLING: number;
				onScrollStateChange(arg1: android.widget.NumberPicker, arg2: number): void;
			}
			export class Formatter implements android.widget.NumberPicker.IFormatter {
				constructor(implementation: android.widget.NumberPicker.IFormatter);
				format(arg1: number): string;
			}
			export class OnValueChangeListener implements android.widget.NumberPicker.IOnValueChangeListener {
				constructor(implementation: android.widget.NumberPicker.IOnValueChangeListener);
				onValueChange(arg1: android.widget.NumberPicker, arg2: number, arg3: number): void;
			}
			export interface IOnValueChangeListener {
				onValueChange(arg1: android.widget.NumberPicker, arg2: number, arg3: number): void;
			}
			export interface IOnScrollListener {
				onScrollStateChange(arg1: android.widget.NumberPicker, arg2: number): void;
			}
			export module IOnScrollListener {
				var SCROLL_STATE_IDLE: number;
				var SCROLL_STATE_TOUCH_SCROLL: number;
				var SCROLL_STATE_FLING: number;
			}
		}
		export class TwoLineListItem extends android.widget.RelativeLayout {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.TwoLineListItem>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			getText1(): android.widget.TextView;
			getText2(): android.widget.TextView;
		}
		export class FrameLayout extends android.view.ViewGroup {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.FrameLayout>;
			Foreground: android.graphics.drawable.Drawable;
			MeasureAllChildren: boolean;
			ForegroundGravity: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.FrameLayout.LayoutParams;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			shouldDelayChildPressedState(): boolean;
			gatherTransparentRegion(arg1: android.graphics.Region): boolean;
			jumpDrawablesToCurrentState(): void;
			getForegroundGravity(): number;
			setForegroundGravity(arg1: number): void;
			setMeasureAllChildren(arg1: boolean): void;
			getMeasureAllChildren(): boolean;
			getConsiderGoneChildrenWhenMeasuring(): boolean;
			getForeground(): android.graphics.drawable.Drawable;
			setForeground(arg1: android.graphics.drawable.Drawable): void;
			draw(arg1: android.graphics.Canvas): void;
		}
		export module FrameLayout {
			export class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
				constructor(arg1: android.view.ViewGroup.MarginLayoutParams);
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: number, arg2: number, arg3: number);
				constructor(arg1: number, arg2: number);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				gravity: number;
				static class: java.lang.Class<android.widget.FrameLayout.LayoutParams>;
			}
		}
		export class ImageButton extends android.widget.ImageView {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.ImageButton>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
		}
		export class RelativeLayout extends android.view.ViewGroup {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static TRUE: number;
			static LEFT_OF: number;
			static RIGHT_OF: number;
			static ABOVE: number;
			static BELOW: number;
			static ALIGN_BASELINE: number;
			static ALIGN_LEFT: number;
			static ALIGN_TOP: number;
			static ALIGN_RIGHT: number;
			static ALIGN_BOTTOM: number;
			static ALIGN_PARENT_LEFT: number;
			static ALIGN_PARENT_TOP: number;
			static ALIGN_PARENT_RIGHT: number;
			static ALIGN_PARENT_BOTTOM: number;
			static CENTER_IN_PARENT: number;
			static CENTER_HORIZONTAL: number;
			static CENTER_VERTICAL: number;
			static START_OF: number;
			static END_OF: number;
			static ALIGN_START: number;
			static ALIGN_END: number;
			static ALIGN_PARENT_START: number;
			static ALIGN_PARENT_END: number;
			static class: java.lang.Class<android.widget.RelativeLayout>;
			Gravity: number;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			requestLayout(): void;
			setGravity(arg1: number): void;
			dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
			setVerticalGravity(arg1: number): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.widget.RelativeLayout.LayoutParams;
			setHorizontalGravity(arg1: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			shouldDelayChildPressedState(): boolean;
			getGravity(): number;
			setIgnoreGravity(arg1: number): void;
			getBaseline(): number;
		}
		export module RelativeLayout {
			export class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: number, arg2: number);
				constructor(arg1: android.view.ViewGroup.MarginLayoutParams);
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				alignWithParent: boolean;
				static class: java.lang.Class<android.widget.RelativeLayout.LayoutParams>;
				resolveLayoutDirection(arg1: number): void;
				addRule(arg1: number, arg2: number): void;
				addRule(arg1: number): void;
				removeRule(arg1: number): void;
				debug(arg1: java.lang.String): string;
				debug(arg1: string): string;
				getRules(): native.Array<number>;
			}
		}
		export class CheckBox extends android.widget.CompoundButton {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.CheckBox>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
		}
		export class Gallery extends android.widget.AbsSpinner implements android.view.GestureDetector.IOnGestureListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.Gallery>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			setGravity(arg1: number): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.view.ViewGroup.LayoutParams;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			showContextMenuForChild(arg1: android.view.View): boolean;
			onScroll(arg1: android.view.MotionEvent, arg2: android.view.MotionEvent, arg3: native.Float, arg4: native.Float): boolean;
			showContextMenu(): boolean;
			dispatchSetSelected(arg1: boolean): void;
			performAccessibilityAction(arg1: number, arg2: android.os.Bundle): boolean;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			onShowPress(arg1: android.view.MotionEvent): void;
			onSingleTapUp(arg1: android.view.MotionEvent): boolean;
			onLongPress(arg1: android.view.MotionEvent): void;
			setSpacing(arg1: number): void;
			onDown(arg1: android.view.MotionEvent): boolean;
			onFling(arg1: android.view.MotionEvent, arg2: android.view.MotionEvent, arg3: native.Float, arg4: native.Float): boolean;
			setCallbackDuringFling(arg1: boolean): void;
			setUnselectedAlpha(arg1: native.Float): void;
			setAnimationDuration(arg1: number): void;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
		}
		export module Gallery {
			export class LayoutParams extends android.view.ViewGroup.LayoutParams {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: number, arg2: number);
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				static class: java.lang.Class<android.widget.Gallery.LayoutParams>;
			}
		}
		export class SectionIndexer implements android.widget.ISectionIndexer {
			constructor(implementation: android.widget.ISectionIndexer);
			getSections(): native.Array<any>;
			getSectionForPosition(arg1: number): number;
			getPositionForSection(arg1: number): number;
		}
		export class MediaController extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: boolean);
			static class: java.lang.Class<android.widget.MediaController>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setAnchorView(arg1: android.view.View): void;
			setMediaPlayer(arg1: android.widget.MediaController.IMediaPlayerControl): void;
			setPrevNextListeners(arg1: android.view.View.IOnClickListener, arg2: android.view.View.IOnClickListener): void;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			onFinishInflate(): void;
			hide(): void;
			isShowing(): boolean;
			show(arg1: number): void;
			show(): void;
			setEnabled(arg1: boolean): void;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
		}
		export module MediaController {
			export interface IMediaPlayerControl {
				canPause(): boolean;
				isPlaying(): boolean;
				getDuration(): number;
				seekTo(arg1: number): void;
				getBufferPercentage(): number;
				canSeekBackward(): boolean;
				canSeekForward(): boolean;
				getCurrentPosition(): number;
				pause(): void;
				start(): void;
			}
			export class MediaPlayerControl implements android.widget.MediaController.IMediaPlayerControl {
				constructor(implementation: android.widget.MediaController.IMediaPlayerControl);
				canPause(): boolean;
				isPlaying(): boolean;
				getDuration(): number;
				seekTo(arg1: number): void;
				getBufferPercentage(): number;
				canSeekBackward(): boolean;
				canSeekForward(): boolean;
				getCurrentPosition(): number;
				pause(): void;
				start(): void;
			}
		}
		export class RadioButton extends android.widget.CompoundButton {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.widget.RadioButton>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			toggle(): void;
		}
		export class EditText extends android.widget.TextView {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.widget.EditText>;
			Text: android.text.IEditable;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setEllipsize(arg1: android.text.TextUtils.TruncateAt): void;
			setSelection(arg1: number): void;
			setSelection(arg1: number, arg2: number): void;
			getText(): android.text.IEditable;
			setText(arg1: java.lang.ICharSequence, arg2: android.widget.TextView.BufferType): void;
			setText(arg1: string, arg2: android.widget.TextView.BufferType): void;
			selectAll(): void;
			extendSelection(arg1: number): void;
			setText(arg1: java.lang.ICharSequence): void;
			setText(arg1: string): void;
			setText(arg1: number, arg2: android.widget.TextView.BufferType): void;
			setText(arg1: number): void;
			setText(arg1: native.Array<string>, arg2: number, arg3: number): void;
		}
		export class TimePicker extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.TimePicker>;
			CurrentMinute: java.lang.Integer;
			CurrentHour: java.lang.Integer;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			is24HourView(): boolean;
			setOnTimeChangedListener(arg1: android.widget.TimePicker.IOnTimeChangedListener): void;
			setIs24HourView(arg1: java.lang.Boolean): void;
			setIs24HourView(arg1: boolean): void;
			getCurrentMinute(): java.lang.Integer;
			setCurrentHour(arg1: java.lang.Integer): void;
			setCurrentMinute(arg1: java.lang.Integer): void;
			getCurrentHour(): java.lang.Integer;
			isEnabled(): boolean;
			getBaseline(): number;
			setEnabled(arg1: boolean): void;
		}
		export module TimePicker {
			export class OnTimeChangedListener implements android.widget.TimePicker.IOnTimeChangedListener {
				constructor(implementation: android.widget.TimePicker.IOnTimeChangedListener);
				onTimeChanged(arg1: android.widget.TimePicker, arg2: number, arg3: number): void;
			}
			export interface IOnTimeChangedListener {
				onTimeChanged(arg1: android.widget.TimePicker, arg2: number, arg3: number): void;
			}
		}
		export class ExpandableListView extends android.widget.ListView {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static PACKED_POSITION_TYPE_GROUP: number;
			static PACKED_POSITION_TYPE_CHILD: number;
			static PACKED_POSITION_TYPE_NULL: number;
			static PACKED_POSITION_VALUE_NULL: native.Long;
			static CHILD_INDICATOR_INHERIT: number;
			static class: java.lang.Class<android.widget.ExpandableListView>;
			Adapter: android.widget.IListAdapter;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			onSaveInstanceState(): android.os.IParcelable;
			setOnItemClickListener(arg1: android.widget.AdapterView.IOnItemClickListener): void;
			onRestoreInstanceState(arg1: android.os.IParcelable): void;
			getAdapter(): android.widget.IListAdapter;
			setAdapter(arg1: android.widget.IAdapter): void;
			setAdapter(arg1: android.widget.IListAdapter): void;
			setAdapter(arg1: android.widget.IExpandableListAdapter): void;
			performItemClick(arg1: android.view.View, arg2: number, arg3: native.Long): boolean;
			collapseGroup(arg1: number): boolean;
			expandGroup(arg1: number): boolean;
			expandGroup(arg1: number, arg2: boolean): boolean;
			getSelectedId(): any;
			getExpandableListPosition(arg1: number): any;
			setOnGroupClickListener(arg1: android.widget.ExpandableListView.IOnGroupClickListener): void;
			static getPackedPositionForChild(arg1: number, arg2: number): any;
			static getPackedPositionChild(arg1: native.Long): number;
			static getPackedPositionGroup(arg1: native.Long): number;
			setOnChildClickListener(arg1: android.widget.ExpandableListView.IOnChildClickListener): void;
			getExpandableListAdapter(): android.widget.IExpandableListAdapter;
			setOnGroupExpandListener(arg1: android.widget.ExpandableListView.IOnGroupExpandListener): void;
			static getPackedPositionForGroup(arg1: number): any;
			setOnGroupCollapseListener(arg1: android.widget.ExpandableListView.IOnGroupCollapseListener): void;
			setChildIndicatorBounds(arg1: number, arg2: number): void;
			setChildDivider(arg1: android.graphics.drawable.Drawable): void;
			getFlatListPosition(arg1: native.Long): number;
			getSelectedPosition(): any;
			setSelectedChild(arg1: number, arg2: number, arg3: boolean): boolean;
			static getPackedPositionType(arg1: native.Long): number;
			isGroupExpanded(arg1: number): boolean;
			setIndicatorBounds(arg1: number, arg2: number): void;
			setChildIndicator(arg1: android.graphics.drawable.Drawable): void;
			setGroupIndicator(arg1: android.graphics.drawable.Drawable): void;
			setSelectedGroup(arg1: number): void;
		}
		export module ExpandableListView {
			export class OnChildClickListener implements android.widget.ExpandableListView.IOnChildClickListener {
				constructor(implementation: android.widget.ExpandableListView.IOnChildClickListener);
				onChildClick(arg1: android.widget.ExpandableListView, arg2: android.view.View, arg3: number, arg4: number, arg5: native.Long): boolean;
			}
			export class OnGroupClickListener implements android.widget.ExpandableListView.IOnGroupClickListener {
				constructor(implementation: android.widget.ExpandableListView.IOnGroupClickListener);
				onGroupClick(arg1: android.widget.ExpandableListView, arg2: android.view.View, arg3: number, arg4: native.Long): boolean;
			}
			export class OnGroupCollapseListener implements android.widget.ExpandableListView.IOnGroupCollapseListener {
				constructor(implementation: android.widget.ExpandableListView.IOnGroupCollapseListener);
				onGroupCollapse(arg1: number): void;
			}
			export class OnGroupExpandListener implements android.widget.ExpandableListView.IOnGroupExpandListener {
				constructor(implementation: android.widget.ExpandableListView.IOnGroupExpandListener);
				onGroupExpand(arg1: number): void;
			}
			export interface IOnGroupClickListener {
				onGroupClick(arg1: android.widget.ExpandableListView, arg2: android.view.View, arg3: number, arg4: native.Long): boolean;
			}
			export interface IOnChildClickListener {
				onChildClick(arg1: android.widget.ExpandableListView, arg2: android.view.View, arg3: number, arg4: number, arg5: native.Long): boolean;
			}
			export class ExpandableListContextMenuInfo extends java.lang.Object implements android.view.ContextMenu.IContextMenuInfo {
				constructor(arg1: android.view.View, arg2: native.Long, arg3: native.Long);
				targetView: android.view.View;
				packedPosition: native.Long;
				id: native.Long;
				static class: java.lang.Class<android.widget.ExpandableListView.ExpandableListContextMenuInfo>;
			}
			export interface IOnGroupExpandListener {
				onGroupExpand(arg1: number): void;
			}
			export interface IOnGroupCollapseListener {
				onGroupCollapse(arg1: number): void;
			}
		}
		export class GridView extends android.widget.AbsListView {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static NO_STRETCH: number;
			static STRETCH_SPACING: number;
			static STRETCH_COLUMN_WIDTH: number;
			static STRETCH_SPACING_UNIFORM: number;
			static AUTO_FIT: number;
			static class: java.lang.Class<android.widget.GridView>;
			StretchMode: number;
			VerticalSpacing: number;
			Gravity: number;
			ColumnWidth: number;
			HorizontalSpacing: number;
			NumColumns: number;
			Adapter: android.widget.IListAdapter;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			setGravity(arg1: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			smoothScrollToPosition(arg1: number): void;
			smoothScrollByOffset(arg1: number): void;
			setRemoteViewsAdapter(arg1: android.content.Intent): void;
			getAdapter(): android.widget.IListAdapter;
			setAdapter(arg1: android.widget.IListAdapter): void;
			setAdapter(arg1: android.widget.IAdapter): void;
			setSelection(arg1: number): void;
			getGravity(): number;
			setNumColumns(arg1: number): void;
			getNumColumns(): number;
			getRequestedColumnWidth(): number;
			getRequestedHorizontalSpacing(): number;
			setVerticalSpacing(arg1: number): void;
			setHorizontalSpacing(arg1: number): void;
			getHorizontalSpacing(): number;
			setStretchMode(arg1: number): void;
			getVerticalSpacing(): number;
			getStretchMode(): number;
			setColumnWidth(arg1: number): void;
			getColumnWidth(): number;
			smoothScrollToPosition(arg1: number, arg2: number): void;
		}
		export class SimpleAdapter extends android.widget.BaseAdapter implements android.widget.IFilterable {
			constructor(arg1: android.content.Context, arg2: java.util.IList<any>, arg3: number, arg4: native.Array<java.lang.String>, arg5: native.Array<number>);
			static class: java.lang.Class<android.widget.SimpleAdapter>;
			ViewBinder: android.widget.SimpleAdapter.IViewBinder;
			setDropDownViewResource(arg1: number): void;
			getDropDownView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			setViewBinder(arg1: android.widget.SimpleAdapter.IViewBinder): void;
			getViewBinder(): android.widget.SimpleAdapter.IViewBinder;
			getItemId(arg1: number): any;
			setViewText(arg1: android.widget.TextView, arg2: java.lang.String): void;
			setViewText(arg1: android.widget.TextView, arg2: string): void;
			setViewImage(arg1: android.widget.ImageView, arg2: java.lang.String): void;
			setViewImage(arg1: android.widget.ImageView, arg2: string): void;
			setViewImage(arg1: android.widget.ImageView, arg2: number): void;
			getFilter(): android.widget.Filter;
			getItem(arg1: number): any;
			getView(arg1: number, arg2: android.view.View, arg3: android.view.ViewGroup): android.view.View;
			getCount(): number;
		}
		export module SimpleAdapter {
			export class ViewBinder implements android.widget.SimpleAdapter.IViewBinder {
				constructor(implementation: android.widget.SimpleAdapter.IViewBinder);
				setViewValue(arg1: android.view.View, arg2: any, arg3: java.lang.String): boolean;
				setViewValue(arg1: android.view.View, arg2: any, arg3: string): boolean;
			}
			export interface IViewBinder {
				setViewValue(arg1: android.view.View, arg2: any, arg3: string): boolean;
			}
		}
		export class CompoundButton extends android.widget.Button implements android.widget.ICheckable {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.CompoundButton>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			performClick(): boolean;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			setOnCheckedChangeListener(arg1: android.widget.CompoundButton.IOnCheckedChangeListener): void;
			jumpDrawablesToCurrentState(): void;
			onSaveInstanceState(): android.os.IParcelable;
			getCompoundPaddingLeft(): number;
			getCompoundPaddingRight(): number;
			onRestoreInstanceState(arg1: android.os.IParcelable): void;
			setButtonDrawable(arg1: number): void;
			setButtonDrawable(arg1: android.graphics.drawable.Drawable): void;
			isChecked(): boolean;
			setChecked(arg1: boolean): void;
			toggle(): void;
		}
		export module CompoundButton {
			export class OnCheckedChangeListener implements android.widget.CompoundButton.IOnCheckedChangeListener {
				constructor(implementation: android.widget.CompoundButton.IOnCheckedChangeListener);
				onCheckedChanged(arg1: android.widget.CompoundButton, arg2: boolean): void;
			}
			export interface IOnCheckedChangeListener {
				onCheckedChanged(arg1: android.widget.CompoundButton, arg2: boolean): void;
			}
		}
		export class HorizontalScrollView extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.widget.HorizontalScrollView>;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			requestLayout(): void;
			addView(arg1: android.view.View, arg2: number): void;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View): void;
			requestChildFocus(arg1: android.view.View, arg2: android.view.View): void;
			requestDisallowInterceptTouchEvent(arg1: boolean): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			shouldDelayChildPressedState(): boolean;
			requestChildRectangleOnScreen(arg1: android.view.View, arg2: android.graphics.Rect, arg3: boolean): boolean;
			setSmoothScrollingEnabled(arg1: boolean): void;
			onInterceptTouchEvent(arg1: android.view.MotionEvent): boolean;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			isSmoothScrollingEnabled(): boolean;
			performAccessibilityAction(arg1: number, arg2: android.os.Bundle): boolean;
			scrollTo(arg1: number, arg2: number): void;
			computeScroll(): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			fling(arg1: number): void;
			setOverScrollMode(arg1: number): void;
			isFillViewport(): boolean;
			smoothScrollBy(arg1: number, arg2: number): void;
			getMaxScrollAmount(): number;
			setFillViewport(arg1: boolean): void;
			executeKeyEvent(arg1: android.view.KeyEvent): boolean;
			smoothScrollTo(arg1: number, arg2: number): void;
			pageScroll(arg1: number): boolean;
			arrowScroll(arg1: number): boolean;
			fullScroll(arg1: number): boolean;
			draw(arg1: android.graphics.Canvas): void;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
		}
	}
	export module telephony {
		export class CellLocation extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.telephony.CellLocation>;
			static getEmpty(): android.telephony.CellLocation;
			static requestLocationUpdate(): void;
		}
		export module cdma {
			export class CdmaCellLocation extends android.telephony.CellLocation {
				constructor(arg1: android.os.Bundle);
				constructor();
				static class: java.lang.Class<android.telephony.cdma.CdmaCellLocation>;
				getBaseStationLongitude(): number;
				static convertQuartSecToDecDegrees(arg1: number): any;
				getBaseStationLatitude(): number;
				getNetworkId(): number;
				setStateInvalid(): void;
				fillInNotifierBundle(arg1: android.os.Bundle): void;
				setCellLocationData(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
				setCellLocationData(arg1: number, arg2: number, arg3: number): void;
				getBaseStationId(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getSystemId(): number;
			}
		}
		export class PhoneNumberUtils extends java.lang.Object {
			constructor();
			static PAUSE: string;
			static WAIT: string;
			static WILD: string;
			static TOA_International: number;
			static TOA_Unknown: number;
			static FORMAT_UNKNOWN: number;
			static FORMAT_NANP: number;
			static FORMAT_JAPAN: number;
			static class: java.lang.Class<android.telephony.PhoneNumberUtils>;
			static networkPortionToCalledPartyBCD(arg1: java.lang.String): native.Array<native.Byte>;
			static networkPortionToCalledPartyBCD(arg1: string): native.Array<native.Byte>;
			static calledPartyBCDFragmentToString(arg1: native.Array<native.Byte>, arg2: number, arg3: number): string;
			static convertKeypadLettersToDigits(arg1: java.lang.String): string;
			static convertKeypadLettersToDigits(arg1: string): string;
			static calledPartyBCDToString(arg1: native.Array<native.Byte>, arg2: number, arg3: number): string;
			static stringFromStringAndTOA(arg1: java.lang.String, arg2: number): string;
			static stringFromStringAndTOA(arg1: string, arg2: number): string;
			static extractPostDialPortion(arg1: java.lang.String): string;
			static extractPostDialPortion(arg1: string): string;
			static isWellFormedSmsAddress(arg1: java.lang.String): boolean;
			static isWellFormedSmsAddress(arg1: string): boolean;
			static numberToCalledPartyBCD(arg1: java.lang.String): native.Array<native.Byte>;
			static numberToCalledPartyBCD(arg1: string): native.Array<native.Byte>;
			static getFormatTypeForLocale(arg1: java.util.Locale): number;
			static networkPortionToCalledPartyBCDWithLength(arg1: java.lang.String): native.Array<native.Byte>;
			static networkPortionToCalledPartyBCDWithLength(arg1: string): native.Array<native.Byte>;
			static isISODigit(arg1: string): boolean;
			static formatNumber(arg1: java.lang.String): string;
			static formatNumber(arg1: string): string;
			static formatNumber(arg1: android.text.IEditable, arg2: number): void;
			static isDialable(arg1: string): boolean;
			static toaFromString(arg1: java.lang.String): number;
			static toaFromString(arg1: string): number;
			static is12Key(arg1: string): boolean;
			static isNonSeparator(arg1: string): boolean;
			static isGlobalPhoneNumber(arg1: java.lang.String): boolean;
			static isGlobalPhoneNumber(arg1: string): boolean;
			static isStartsPostDial(arg1: string): boolean;
			static getStrippedReversed(arg1: java.lang.String): string;
			static getStrippedReversed(arg1: string): string;
			static formatNanpNumber(arg1: android.text.IEditable): void;
			static isReallyDialable(arg1: string): boolean;
			static getNumberFromIntent(arg1: android.content.Intent, arg2: android.content.Context): string;
			static extractNetworkPortion(arg1: java.lang.String): string;
			static extractNetworkPortion(arg1: string): string;
			static stripSeparators(arg1: java.lang.String): string;
			static stripSeparators(arg1: string): string;
			static toCallerIDMinMatch(arg1: java.lang.String): string;
			static toCallerIDMinMatch(arg1: string): string;
			static formatJapaneseNumber(arg1: android.text.IEditable): void;
			static isEmergencyNumber(arg1: java.lang.String): boolean;
			static isEmergencyNumber(arg1: string): boolean;
			static compare(arg1: java.lang.String, arg2: java.lang.String): boolean;
			static compare(arg1: string, arg2: string): boolean;
			static compare(arg1: android.content.Context, arg2: java.lang.String, arg3: java.lang.String): boolean;
			static compare(arg1: android.content.Context, arg2: string, arg3: string): boolean;
		}
		export class CellIdentityCdma extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellIdentityCdma>;
			static class: java.lang.Class<android.telephony.CellIdentityCdma>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getLatitude(): number;
			getNetworkId(): number;
			getLongitude(): number;
			getBasestationId(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getSystemId(): number;
		}
		export class CellInfoCdma extends android.telephony.CellInfo implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellInfoCdma>;
			static class: java.lang.Class<android.telephony.CellInfoCdma>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getCellIdentity(): android.telephony.CellIdentityCdma;
			getCellSignalStrength(): android.telephony.CellSignalStrengthCdma;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class NeighboringCellInfo extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: number, arg2: number);
			constructor(arg1: number, arg2: java.lang.String, arg3: number);
			constructor(arg1: number, arg2: string, arg3: number);
			constructor();
			constructor(arg1: android.os.Parcel);
			static UNKNOWN_RSSI: number;
			static UNKNOWN_CID: number;
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.NeighboringCellInfo>;
			static class: java.lang.Class<android.telephony.NeighboringCellInfo>;
			Cid: number;
			Rssi: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getNetworkType(): number;
			getLac(): number;
			setCid(arg1: number): void;
			setRssi(arg1: number): void;
			getPsc(): number;
			getCid(): number;
			getRssi(): number;
			toString(): string;
		}
		export class SignalStrength extends java.lang.Object implements android.os.IParcelable {
			static class: java.lang.Class<android.telephony.SignalStrength>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			isGsm(): boolean;
			getCdmaDbm(): number;
			getEvdoDbm(): number;
			getEvdoEcio(): number;
			getEvdoSnr(): number;
			getCdmaEcio(): number;
			getGsmBitErrorRate(): number;
			getGsmSignalStrength(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export module gsm {
			export class SmsManager extends java.lang.Object {
				static STATUS_ON_SIM_FREE: number;
				static STATUS_ON_SIM_READ: number;
				static STATUS_ON_SIM_UNREAD: number;
				static STATUS_ON_SIM_SENT: number;
				static STATUS_ON_SIM_UNSENT: number;
				static RESULT_ERROR_GENERIC_FAILURE: number;
				static RESULT_ERROR_RADIO_OFF: number;
				static RESULT_ERROR_NULL_PDU: number;
				static RESULT_ERROR_NO_SERVICE: number;
				static class: java.lang.Class<android.telephony.gsm.SmsManager>;
				sendMultipartTextMessage(arg1: java.lang.String, arg2: java.lang.String, arg3: java.util.ArrayList<string>, arg4: java.util.ArrayList<android.app.PendingIntent>, arg5: java.util.ArrayList<android.app.PendingIntent>): void;
				sendMultipartTextMessage(arg1: string, arg2: string, arg3: java.util.ArrayList<string>, arg4: java.util.ArrayList<android.app.PendingIntent>, arg5: java.util.ArrayList<android.app.PendingIntent>): void;
				divideMessage(arg1: java.lang.String): java.util.ArrayList<string>;
				divideMessage(arg1: string): java.util.ArrayList<string>;
				sendTextMessage(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: android.app.PendingIntent, arg5: android.app.PendingIntent): void;
				sendTextMessage(arg1: string, arg2: string, arg3: string, arg4: android.app.PendingIntent, arg5: android.app.PendingIntent): void;
				sendDataMessage(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Short, arg4: native.Array<native.Byte>, arg5: android.app.PendingIntent, arg6: android.app.PendingIntent): void;
				sendDataMessage(arg1: string, arg2: string, arg3: native.Short, arg4: native.Array<native.Byte>, arg5: android.app.PendingIntent, arg6: android.app.PendingIntent): void;
				static getDefault(): android.telephony.gsm.SmsManager;
			}
			export class GsmCellLocation extends android.telephony.CellLocation {
				constructor();
				constructor(arg1: android.os.Bundle);
				static class: java.lang.Class<android.telephony.gsm.GsmCellLocation>;
				getLac(): number;
				getPsc(): number;
				getCid(): number;
				setLacAndCid(arg1: number, arg2: number): void;
				setStateInvalid(): void;
				fillInNotifierBundle(arg1: android.os.Bundle): void;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
			}
			export class SmsMessage extends java.lang.Object {
				constructor();
				static ENCODING_UNKNOWN: number;
				static ENCODING_7BIT: number;
				static ENCODING_8BIT: number;
				static ENCODING_16BIT: number;
				static MAX_USER_DATA_BYTES: number;
				static MAX_USER_DATA_SEPTETS: number;
				static MAX_USER_DATA_SEPTETS_WITH_HEADER: number;
				static class: java.lang.Class<android.telephony.gsm.SmsMessage>;
				getServiceCenterAddress(): string;
				static getTPLayerLengthForPDU(arg1: java.lang.String): number;
				static getTPLayerLengthForPDU(arg1: string): number;
				getDisplayOriginatingAddress(): string;
				isEmail(): boolean;
				isReplace(): boolean;
				getPdu(): native.Array<native.Byte>;
				getIndexOnSim(): number;
				getEmailFrom(): string;
				static getSubmitPdu(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Short, arg4: native.Array<native.Byte>, arg5: boolean): android.telephony.gsm.SmsMessage.SubmitPdu;
				static getSubmitPdu(arg1: string, arg2: string, arg3: native.Short, arg4: native.Array<native.Byte>, arg5: boolean): android.telephony.gsm.SmsMessage.SubmitPdu;
				static getSubmitPdu(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean): android.telephony.gsm.SmsMessage.SubmitPdu;
				static getSubmitPdu(arg1: string, arg2: string, arg3: string, arg4: boolean): android.telephony.gsm.SmsMessage.SubmitPdu;
				static createFromPdu(arg1: native.Array<native.Byte>): android.telephony.gsm.SmsMessage;
				getEmailBody(): string;
				isReplyPathPresent(): boolean;
				isMwiDontStore(): boolean;
				getMessageBody(): string;
				isMWISetMessage(): boolean;
				getMessageClass(): android.telephony.gsm.SmsMessage.MessageClass;
				getOriginatingAddress(): string;
				getTimestampMillis(): any;
				getStatusOnSim(): number;
				getDisplayMessageBody(): string;
				getProtocolIdentifier(): number;
				static calculateLength(arg1: java.lang.String, arg2: boolean): native.Array<number>;
				static calculateLength(arg1: string, arg2: boolean): native.Array<number>;
				static calculateLength(arg1: java.lang.ICharSequence, arg2: boolean): native.Array<number>;
				isMWIClearMessage(): boolean;
				getPseudoSubject(): string;
				isCphsMwiMessage(): boolean;
				isStatusReportMessage(): boolean;
				getStatus(): number;
				getUserData(): native.Array<native.Byte>;
			}
			export module SmsMessage {
				export enum MessageClass {
					CLASS_0,
					CLASS_1,
					CLASS_2,
					CLASS_3,
					UNKNOWN
				}
				export module MessageClass {
					export function valueOf(arg1: java.lang.String): android.telephony.gsm.SmsMessage.MessageClass;
					export function valueOf(arg1: string): android.telephony.gsm.SmsMessage.MessageClass;
					export function values(): native.Array<android.telephony.gsm.SmsMessage.MessageClass>;
				}
				export class SubmitPdu extends java.lang.Object {
					constructor();
					encodedScAddress: native.Array<native.Byte>;
					encodedMessage: native.Array<native.Byte>;
					static class: java.lang.Class<android.telephony.gsm.SmsMessage.SubmitPdu>;
					toString(): string;
				}
			}
		}
		export class PhoneStateListener extends java.lang.Object {
			constructor();
			static LISTEN_NONE: number;
			static LISTEN_SERVICE_STATE: number;
			static LISTEN_SIGNAL_STRENGTH: number;
			static LISTEN_MESSAGE_WAITING_INDICATOR: number;
			static LISTEN_CALL_FORWARDING_INDICATOR: number;
			static LISTEN_CELL_LOCATION: number;
			static LISTEN_CALL_STATE: number;
			static LISTEN_DATA_CONNECTION_STATE: number;
			static LISTEN_DATA_ACTIVITY: number;
			static LISTEN_SIGNAL_STRENGTHS: number;
			static LISTEN_CELL_INFO: number;
			static class: java.lang.Class<android.telephony.PhoneStateListener>;
			onServiceStateChanged(arg1: android.telephony.ServiceState): void;
			onCellLocationChanged(arg1: android.telephony.CellLocation): void;
			onCallForwardingIndicatorChanged(arg1: boolean): void;
			onMessageWaitingIndicatorChanged(arg1: boolean): void;
			onSignalStrengthsChanged(arg1: android.telephony.SignalStrength): void;
			onSignalStrengthChanged(arg1: number): void;
			onDataConnectionStateChanged(arg1: number): void;
			onDataConnectionStateChanged(arg1: number, arg2: number): void;
			onCallStateChanged(arg1: number, arg2: java.lang.String): void;
			onCallStateChanged(arg1: number, arg2: string): void;
			onCellInfoChanged(arg1: java.util.IList<android.telephony.CellInfo>): void;
			onDataActivity(arg1: number): void;
		}
		export class CellInfo extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellInfo>;
			static class: java.lang.Class<android.telephony.CellInfo>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			isRegistered(): boolean;
			getTimeStamp(): any;
		}
		export class CellSignalStrengthLte extends android.telephony.CellSignalStrength implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellSignalStrengthLte>;
			static class: java.lang.Class<android.telephony.CellSignalStrengthLte>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getAsuLevel(): number;
			getDbm(): number;
			getTimingAdvance(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getLevel(): number;
		}
		export class CellIdentityGsm extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellIdentityGsm>;
			static class: java.lang.Class<android.telephony.CellIdentityGsm>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getLac(): number;
			getMcc(): number;
			getPsc(): number;
			getCid(): number;
			getMnc(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class CellSignalStrength extends java.lang.Object {
			static class: java.lang.Class<android.telephony.CellSignalStrength>;
			getAsuLevel(): number;
			getDbm(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			getLevel(): number;
		}
		export class SmsManager extends java.lang.Object {
			static STATUS_ON_ICC_FREE: number;
			static STATUS_ON_ICC_READ: number;
			static STATUS_ON_ICC_UNREAD: number;
			static STATUS_ON_ICC_SENT: number;
			static STATUS_ON_ICC_UNSENT: number;
			static RESULT_ERROR_GENERIC_FAILURE: number;
			static RESULT_ERROR_RADIO_OFF: number;
			static RESULT_ERROR_NULL_PDU: number;
			static RESULT_ERROR_NO_SERVICE: number;
			static class: java.lang.Class<android.telephony.SmsManager>;
			sendMultipartTextMessage(arg1: java.lang.String, arg2: java.lang.String, arg3: java.util.ArrayList<string>, arg4: java.util.ArrayList<android.app.PendingIntent>, arg5: java.util.ArrayList<android.app.PendingIntent>): void;
			sendMultipartTextMessage(arg1: string, arg2: string, arg3: java.util.ArrayList<string>, arg4: java.util.ArrayList<android.app.PendingIntent>, arg5: java.util.ArrayList<android.app.PendingIntent>): void;
			divideMessage(arg1: java.lang.String): java.util.ArrayList<string>;
			divideMessage(arg1: string): java.util.ArrayList<string>;
			sendTextMessage(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: android.app.PendingIntent, arg5: android.app.PendingIntent): void;
			sendTextMessage(arg1: string, arg2: string, arg3: string, arg4: android.app.PendingIntent, arg5: android.app.PendingIntent): void;
			sendDataMessage(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Short, arg4: native.Array<native.Byte>, arg5: android.app.PendingIntent, arg6: android.app.PendingIntent): void;
			sendDataMessage(arg1: string, arg2: string, arg3: native.Short, arg4: native.Array<native.Byte>, arg5: android.app.PendingIntent, arg6: android.app.PendingIntent): void;
			static getDefault(): android.telephony.SmsManager;
		}
		export class CellInfoLte extends android.telephony.CellInfo implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellInfoLte>;
			static class: java.lang.Class<android.telephony.CellInfoLte>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getCellIdentity(): android.telephony.CellIdentityLte;
			getCellSignalStrength(): android.telephony.CellSignalStrengthLte;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class CellIdentityLte extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellIdentityLte>;
			static class: java.lang.Class<android.telephony.CellIdentityLte>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getCi(): number;
			getMcc(): number;
			getMnc(): number;
			getPci(): number;
			getTac(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class CellSignalStrengthGsm extends android.telephony.CellSignalStrength implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellSignalStrengthGsm>;
			static class: java.lang.Class<android.telephony.CellSignalStrengthGsm>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getAsuLevel(): number;
			getDbm(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getLevel(): number;
		}
		export class CellInfoGsm extends android.telephony.CellInfo implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellInfoGsm>;
			static class: java.lang.Class<android.telephony.CellInfoGsm>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getCellIdentity(): android.telephony.CellIdentityGsm;
			getCellSignalStrength(): android.telephony.CellSignalStrengthGsm;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class SmsMessage extends java.lang.Object {
			static ENCODING_UNKNOWN: number;
			static ENCODING_7BIT: number;
			static ENCODING_8BIT: number;
			static ENCODING_16BIT: number;
			static MAX_USER_DATA_BYTES: number;
			static MAX_USER_DATA_BYTES_WITH_HEADER: number;
			static MAX_USER_DATA_SEPTETS: number;
			static MAX_USER_DATA_SEPTETS_WITH_HEADER: number;
			static class: java.lang.Class<android.telephony.SmsMessage>;
			getServiceCenterAddress(): string;
			static getTPLayerLengthForPDU(arg1: java.lang.String): number;
			static getTPLayerLengthForPDU(arg1: string): number;
			getDisplayOriginatingAddress(): string;
			isEmail(): boolean;
			isReplace(): boolean;
			getPdu(): native.Array<native.Byte>;
			getIndexOnSim(): number;
			getEmailFrom(): string;
			static getSubmitPdu(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean): android.telephony.SmsMessage.SubmitPdu;
			static getSubmitPdu(arg1: string, arg2: string, arg3: string, arg4: boolean): android.telephony.SmsMessage.SubmitPdu;
			static getSubmitPdu(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Short, arg4: native.Array<native.Byte>, arg5: boolean): android.telephony.SmsMessage.SubmitPdu;
			static getSubmitPdu(arg1: string, arg2: string, arg3: native.Short, arg4: native.Array<native.Byte>, arg5: boolean): android.telephony.SmsMessage.SubmitPdu;
			static createFromPdu(arg1: native.Array<native.Byte>): android.telephony.SmsMessage;
			getEmailBody(): string;
			getIndexOnIcc(): number;
			isReplyPathPresent(): boolean;
			isMwiDontStore(): boolean;
			getMessageBody(): string;
			isMWISetMessage(): boolean;
			getMessageClass(): android.telephony.SmsMessage.MessageClass;
			getOriginatingAddress(): string;
			getTimestampMillis(): any;
			getStatusOnSim(): number;
			getDisplayMessageBody(): string;
			getProtocolIdentifier(): number;
			static calculateLength(arg1: java.lang.String, arg2: boolean): native.Array<number>;
			static calculateLength(arg1: string, arg2: boolean): native.Array<number>;
			static calculateLength(arg1: java.lang.ICharSequence, arg2: boolean): native.Array<number>;
			isMWIClearMessage(): boolean;
			getPseudoSubject(): string;
			isCphsMwiMessage(): boolean;
			isStatusReportMessage(): boolean;
			getStatusOnIcc(): number;
			getStatus(): number;
			getUserData(): native.Array<native.Byte>;
		}
		export module SmsMessage {
			export enum MessageClass {
				CLASS_0,
				CLASS_1,
				CLASS_2,
				CLASS_3,
				UNKNOWN
			}
			export module MessageClass {
				export function valueOf(arg1: java.lang.String): android.telephony.SmsMessage.MessageClass;
				export function valueOf(arg1: string): android.telephony.SmsMessage.MessageClass;
				export function values(): native.Array<android.telephony.SmsMessage.MessageClass>;
			}
			export class SubmitPdu extends java.lang.Object {
				encodedScAddress: native.Array<native.Byte>;
				encodedMessage: native.Array<native.Byte>;
				static class: java.lang.Class<android.telephony.SmsMessage.SubmitPdu>;
				toString(): string;
			}
		}
		export class ServiceState extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.telephony.ServiceState);
			constructor(arg1: android.os.Parcel);
			constructor();
			static STATE_IN_SERVICE: number;
			static STATE_OUT_OF_SERVICE: number;
			static STATE_EMERGENCY_ONLY: number;
			static STATE_POWER_OFF: number;
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.ServiceState>;
			static class: java.lang.Class<android.telephony.ServiceState>;
			Roaming: boolean;
			State: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			setStateOff(): void;
			setRoaming(arg1: boolean): void;
			getRoaming(): boolean;
			getIsManualSelection(): boolean;
			getOperatorAlphaShort(): string;
			setStateOutOfService(): void;
			setOperatorName(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
			setOperatorName(arg1: string, arg2: string, arg3: string): void;
			getOperatorNumeric(): string;
			setIsManualSelection(arg1: boolean): void;
			getOperatorAlphaLong(): string;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getState(): number;
			setState(arg1: number): void;
		}
		export class TelephonyManager extends java.lang.Object {
			static ACTION_PHONE_STATE_CHANGED: java.lang.String;
			static EXTRA_STATE: java.lang.String;
			static EXTRA_STATE_IDLE: java.lang.String;
			static EXTRA_STATE_RINGING: java.lang.String;
			static EXTRA_STATE_OFFHOOK: java.lang.String;
			static EXTRA_INCOMING_NUMBER: java.lang.String;
			static PHONE_TYPE_NONE: number;
			static PHONE_TYPE_GSM: number;
			static PHONE_TYPE_CDMA: number;
			static PHONE_TYPE_SIP: number;
			static NETWORK_TYPE_UNKNOWN: number;
			static NETWORK_TYPE_GPRS: number;
			static NETWORK_TYPE_EDGE: number;
			static NETWORK_TYPE_UMTS: number;
			static NETWORK_TYPE_CDMA: number;
			static NETWORK_TYPE_EVDO_0: number;
			static NETWORK_TYPE_EVDO_A: number;
			static NETWORK_TYPE_1xRTT: number;
			static NETWORK_TYPE_HSDPA: number;
			static NETWORK_TYPE_HSUPA: number;
			static NETWORK_TYPE_HSPA: number;
			static NETWORK_TYPE_IDEN: number;
			static NETWORK_TYPE_EVDO_B: number;
			static NETWORK_TYPE_LTE: number;
			static NETWORK_TYPE_EHRPD: number;
			static NETWORK_TYPE_HSPAP: number;
			static SIM_STATE_UNKNOWN: number;
			static SIM_STATE_ABSENT: number;
			static SIM_STATE_PIN_REQUIRED: number;
			static SIM_STATE_PUK_REQUIRED: number;
			static SIM_STATE_NETWORK_LOCKED: number;
			static SIM_STATE_READY: number;
			static CALL_STATE_IDLE: number;
			static CALL_STATE_RINGING: number;
			static CALL_STATE_OFFHOOK: number;
			static DATA_ACTIVITY_NONE: number;
			static DATA_ACTIVITY_IN: number;
			static DATA_ACTIVITY_OUT: number;
			static DATA_ACTIVITY_INOUT: number;
			static DATA_ACTIVITY_DORMANT: number;
			static DATA_DISCONNECTED: number;
			static DATA_CONNECTING: number;
			static DATA_CONNECTED: number;
			static DATA_SUSPENDED: number;
			static class: java.lang.Class<android.telephony.TelephonyManager>;
			getDeviceId(): string;
			getNetworkType(): number;
			getNeighboringCellInfo(): java.util.IList<android.telephony.NeighboringCellInfo>;
			getNetworkOperatorName(): string;
			getDeviceSoftwareVersion(): string;
			getDataState(): number;
			getCallState(): number;
			getSimState(): number;
			hasIccCard(): boolean;
			getPhoneType(): number;
			getNetworkOperator(): string;
			getCellLocation(): android.telephony.CellLocation;
			getSimCountryIso(): string;
			getLine1Number(): string;
			getAllCellInfo(): java.util.IList<android.telephony.CellInfo>;
			getNetworkCountryIso(): string;
			getSubscriberId(): string;
			getSimOperator(): string;
			getSimSerialNumber(): string;
			getVoiceMailAlphaTag(): string;
			getDataActivity(): number;
			getSimOperatorName(): string;
			isNetworkRoaming(): boolean;
			getVoiceMailNumber(): string;
			listen(arg1: android.telephony.PhoneStateListener, arg2: number): void;
		}
		export class PhoneNumberFormattingTextWatcher extends java.lang.Object implements android.text.ITextWatcher {
			constructor();
			static class: java.lang.Class<android.telephony.PhoneNumberFormattingTextWatcher>;
			beforeTextChanged(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number): void;
			beforeTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
			afterTextChanged(arg1: android.text.IEditable): void;
			onTextChanged(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number): void;
			onTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
		}
		export class CellSignalStrengthCdma extends android.telephony.CellSignalStrength implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.telephony.CellSignalStrengthCdma>;
			static class: java.lang.Class<android.telephony.CellSignalStrengthCdma>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getAsuLevel(): number;
			getDbm(): number;
			getCdmaLevel(): number;
			getCdmaDbm(): number;
			getEvdoDbm(): number;
			getEvdoLevel(): number;
			getEvdoEcio(): number;
			getEvdoSnr(): number;
			getCdmaEcio(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getLevel(): number;
		}
	}
	export module app {
		export class FragmentTransaction extends java.lang.Object {
			constructor();
			static TRANSIT_ENTER_MASK: number;
			static TRANSIT_EXIT_MASK: number;
			static TRANSIT_UNSET: number;
			static TRANSIT_NONE: number;
			static TRANSIT_FRAGMENT_OPEN: number;
			static TRANSIT_FRAGMENT_CLOSE: number;
			static TRANSIT_FRAGMENT_FADE: number;
			static class: java.lang.Class<android.app.FragmentTransaction>;
			isAddToBackStackAllowed(): boolean;
			disallowAddToBackStack(): android.app.FragmentTransaction;
			setBreadCrumbShortTitle(arg1: number): android.app.FragmentTransaction;
			setBreadCrumbShortTitle(arg1: java.lang.ICharSequence): android.app.FragmentTransaction;
			setBreadCrumbShortTitle(arg1: string): android.app.FragmentTransaction;
			commitAllowingStateLoss(): number;
			setTransition(arg1: number): android.app.FragmentTransaction;
			setCustomAnimations(arg1: number, arg2: number, arg3: number, arg4: number): android.app.FragmentTransaction;
			setCustomAnimations(arg1: number, arg2: number): android.app.FragmentTransaction;
			addToBackStack(arg1: java.lang.String): android.app.FragmentTransaction;
			addToBackStack(arg1: string): android.app.FragmentTransaction;
			setBreadCrumbTitle(arg1: number): android.app.FragmentTransaction;
			setBreadCrumbTitle(arg1: java.lang.ICharSequence): android.app.FragmentTransaction;
			setBreadCrumbTitle(arg1: string): android.app.FragmentTransaction;
			setTransitionStyle(arg1: number): android.app.FragmentTransaction;
			add(arg1: number, arg2: android.app.Fragment, arg3: java.lang.String): android.app.FragmentTransaction;
			add(arg1: number, arg2: android.app.Fragment, arg3: string): android.app.FragmentTransaction;
			add(arg1: android.app.Fragment, arg2: java.lang.String): android.app.FragmentTransaction;
			add(arg1: android.app.Fragment, arg2: string): android.app.FragmentTransaction;
			add(arg1: number, arg2: android.app.Fragment): android.app.FragmentTransaction;
			isEmpty(): boolean;
			replace(arg1: number, arg2: android.app.Fragment): android.app.FragmentTransaction;
			replace(arg1: number, arg2: android.app.Fragment, arg3: java.lang.String): android.app.FragmentTransaction;
			replace(arg1: number, arg2: android.app.Fragment, arg3: string): android.app.FragmentTransaction;
			remove(arg1: android.app.Fragment): android.app.FragmentTransaction;
			hide(arg1: android.app.Fragment): android.app.FragmentTransaction;
			show(arg1: android.app.Fragment): android.app.FragmentTransaction;
			attach(arg1: android.app.Fragment): android.app.FragmentTransaction;
			detach(arg1: android.app.Fragment): android.app.FragmentTransaction;
			commit(): number;
		}
		export class ExpandableListActivity extends android.app.Activity implements android.view.View.IOnCreateContextMenuListener, android.widget.ExpandableListView.IOnChildClickListener, android.widget.ExpandableListView.IOnGroupCollapseListener, android.widget.ExpandableListView.IOnGroupExpandListener {
			constructor();
			static class: java.lang.Class<android.app.ExpandableListActivity>;
			onCreateContextMenu(arg1: android.view.IContextMenu, arg2: android.view.View, arg3: android.view.ContextMenu.IContextMenuInfo): void;
			onContentChanged(): void;
			onGroupExpand(arg1: number): void;
			onChildClick(arg1: android.widget.ExpandableListView, arg2: android.view.View, arg3: number, arg4: number, arg5: native.Long): boolean;
			getSelectedId(): any;
			getExpandableListAdapter(): android.widget.IExpandableListAdapter;
			getSelectedPosition(): any;
			setSelectedChild(arg1: number, arg2: number, arg3: boolean): boolean;
			onGroupCollapse(arg1: number): void;
			setSelectedGroup(arg1: number): void;
			setListAdapter(arg1: android.widget.IExpandableListAdapter): void;
			getExpandableListView(): android.widget.ExpandableListView;
		}
		export class WallpaperManager extends java.lang.Object {
			static ACTION_LIVE_WALLPAPER_CHOOSER: java.lang.String;
			static ACTION_CHANGE_LIVE_WALLPAPER: java.lang.String;
			static EXTRA_LIVE_WALLPAPER_COMPONENT: java.lang.String;
			static WALLPAPER_PREVIEW_META_DATA: java.lang.String;
			static COMMAND_TAP: java.lang.String;
			static COMMAND_SECONDARY_TAP: java.lang.String;
			static COMMAND_DROP: java.lang.String;
			static class: java.lang.Class<android.app.WallpaperManager>;
			setBitmap(arg1: android.graphics.Bitmap): void;
			getDrawable(): android.graphics.drawable.Drawable;
			getDesiredMinimumWidth(): number;
			getDesiredMinimumHeight(): number;
			suggestDesiredDimensions(arg1: number, arg2: number): void;
			setWallpaperOffsetSteps(arg1: native.Float, arg2: native.Float): void;
			setResource(arg1: number): void;
			peekDrawable(): android.graphics.drawable.Drawable;
			getWallpaperInfo(): android.app.WallpaperInfo;
			clearWallpaperOffsets(arg1: android.os.IIBinder): void;
			hasResourceWallpaper(arg1: number): boolean;
			sendWallpaperCommand(arg1: android.os.IIBinder, arg2: java.lang.String, arg3: number, arg4: number, arg5: number, arg6: android.os.Bundle): void;
			sendWallpaperCommand(arg1: android.os.IIBinder, arg2: string, arg3: number, arg4: number, arg5: number, arg6: android.os.Bundle): void;
			forgetLoadedWallpaper(): void;
			setWallpaperOffsets(arg1: android.os.IIBinder, arg2: native.Float, arg3: native.Float): void;
			peekFastDrawable(): android.graphics.drawable.Drawable;
			getFastDrawable(): android.graphics.drawable.Drawable;
			static getInstance(arg1: android.content.Context): android.app.WallpaperManager;
			clear(): void;
			setStream(arg1: java.io.InputStream): void;
		}
		export class Service extends android.content.ContextWrapper implements android.content.IComponentCallbacks2 {
			constructor();
			static START_CONTINUATION_MASK: number;
			static START_STICKY_COMPATIBILITY: number;
			static START_STICKY: number;
			static START_NOT_STICKY: number;
			static START_REDELIVER_INTENT: number;
			static START_FLAG_REDELIVERY: number;
			static START_FLAG_RETRY: number;
			static class: java.lang.Class<android.app.Service>;
			onStartCommand(arg1: android.content.Intent, arg2: number, arg3: number): number;
			stopSelfResult(arg1: number): boolean;
			startForeground(arg1: number, arg2: android.app.Notification): void;
			getApplication(): android.app.Application;
			stopForeground(arg1: boolean): void;
			stopSelf(): void;
			stopSelf(arg1: number): void;
			onBind(arg1: android.content.Intent): android.os.IIBinder;
			onDestroy(): void;
			onTrimMemory(arg1: number): void;
			onUnbind(arg1: android.content.Intent): boolean;
			onTaskRemoved(arg1: android.content.Intent): void;
			onLowMemory(): void;
			onRebind(arg1: android.content.Intent): void;
			onStart(arg1: android.content.Intent, arg2: number): void;
			onCreate(): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
		}
		export class ListActivity extends android.app.Activity {
			constructor();
			static class: java.lang.Class<android.app.ListActivity>;
			ListAdapter: android.widget.IListAdapter;
			getSelectedItemPosition(): number;
			setSelection(arg1: number): void;
			getSelectedItemId(): any;
			onContentChanged(): void;
			getListView(): android.widget.ListView;
			getListAdapter(): android.widget.IListAdapter;
			setListAdapter(arg1: android.widget.IListAdapter): void;
		}
		export class Instrumentation extends java.lang.Object {
			constructor();
			static REPORT_KEY_IDENTIFIER: java.lang.String;
			static REPORT_KEY_STREAMRESULT: java.lang.String;
			static class: java.lang.Class<android.app.Instrumentation>;
			onDestroy(): void;
			onStart(): void;
			onCreate(arg1: android.os.Bundle): void;
			callActivityOnSaveInstanceState(arg1: android.app.Activity, arg2: android.os.Bundle): void;
			setAutomaticPerformanceSnapshots(): void;
			callActivityOnRestoreInstanceState(arg1: android.app.Activity, arg2: android.os.Bundle): void;
			stopProfiling(): void;
			isProfiling(): boolean;
			removeMonitor(arg1: android.app.Instrumentation.ActivityMonitor): void;
			sendKeySync(arg1: android.view.KeyEvent): void;
			newActivity(arg1: java.lang.ClassLoader, arg2: java.lang.String, arg3: android.content.Intent): android.app.Activity;
			newActivity(arg1: java.lang.ClassLoader, arg2: string, arg3: android.content.Intent): android.app.Activity;
			newActivity(arg1: java.lang.Class<any>, arg2: android.content.Context, arg3: android.os.IIBinder, arg4: android.app.Application, arg5: android.content.Intent, arg6: android.content.pm.ActivityInfo, arg7: java.lang.ICharSequence, arg8: android.app.Activity, arg9: java.lang.String, arg10: any): android.app.Activity;
			newActivity(arg1: java.lang.Class<any>, arg2: android.content.Context, arg3: android.os.IIBinder, arg4: android.app.Application, arg5: android.content.Intent, arg6: android.content.pm.ActivityInfo, arg7: string, arg8: android.app.Activity, arg9: string, arg10: any): android.app.Activity;
			sendStatus(arg1: number, arg2: android.os.Bundle): void;
			addMonitor(arg1: android.app.Instrumentation.ActivityMonitor): void;
			addMonitor(arg1: android.content.IntentFilter, arg2: android.app.Instrumentation.ActivityResult, arg3: boolean): android.app.Instrumentation.ActivityMonitor;
			addMonitor(arg1: java.lang.String, arg2: android.app.Instrumentation.ActivityResult, arg3: boolean): android.app.Instrumentation.ActivityMonitor;
			addMonitor(arg1: string, arg2: android.app.Instrumentation.ActivityResult, arg3: boolean): android.app.Instrumentation.ActivityMonitor;
			onException(arg1: any, arg2: java.lang.Throwable): boolean;
			runOnMainSync(arg1: java.lang.IRunnable): void;
			invokeContextMenuAction(arg1: android.app.Activity, arg2: number, arg3: number): boolean;
			callApplicationOnCreate(arg1: android.app.Application): void;
			sendTrackballEventSync(arg1: android.view.MotionEvent): void;
			callActivityOnPostCreate(arg1: android.app.Activity, arg2: android.os.Bundle): void;
			callActivityOnUserLeaving(arg1: android.app.Activity): void;
			callActivityOnNewIntent(arg1: android.app.Activity, arg2: android.content.Intent): void;
			startPerformanceSnapshot(): void;
			endPerformanceSnapshot(): void;
			waitForMonitorWithTimeout(arg1: android.app.Instrumentation.ActivityMonitor, arg2: native.Long): android.app.Activity;
			setInTouchMode(arg1: boolean): void;
			waitForIdleSync(): void;
			checkMonitorHit(arg1: android.app.Instrumentation.ActivityMonitor, arg2: number): boolean;
			startProfiling(): void;
			waitForMonitor(arg1: android.app.Instrumentation.ActivityMonitor): android.app.Activity;
			invokeMenuActionSync(arg1: android.app.Activity, arg2: number, arg3: number): boolean;
			startActivitySync(arg1: android.content.Intent): android.app.Activity;
			getComponentName(): android.content.ComponentName;
			getTargetContext(): android.content.Context;
			callActivityOnPause(arg1: android.app.Activity): void;
			callActivityOnStop(arg1: android.app.Activity): void;
			callActivityOnRestart(arg1: android.app.Activity): void;
			getAllocCounts(): android.os.Bundle;
			getBinderCounts(): android.os.Bundle;
			callActivityOnStart(arg1: android.app.Activity): void;
			startAllocCounting(): void;
			sendKeyDownUpSync(arg1: number): void;
			static newApplication(arg1: java.lang.Class<any>, arg2: android.content.Context): android.app.Application;
			newApplication(arg1: java.lang.ClassLoader, arg2: java.lang.String, arg3: android.content.Context): android.app.Application;
			newApplication(arg1: java.lang.ClassLoader, arg2: string, arg3: android.content.Context): android.app.Application;
			callActivityOnDestroy(arg1: android.app.Activity): void;
			callActivityOnResume(arg1: android.app.Activity): void;
			callActivityOnCreate(arg1: android.app.Activity, arg2: android.os.Bundle): void;
			sendPointerSync(arg1: android.view.MotionEvent): void;
			stopAllocCounting(): void;
			sendStringSync(arg1: java.lang.String): void;
			sendStringSync(arg1: string): void;
			sendCharacterSync(arg1: number): void;
			getContext(): android.content.Context;
			start(): void;
			waitForIdle(arg1: java.lang.IRunnable): void;
			finish(arg1: number, arg2: android.os.Bundle): void;
		}
		export module Instrumentation {
			export class ActivityMonitor extends java.lang.Object {
				constructor(arg1: java.lang.String, arg2: android.app.Instrumentation.ActivityResult, arg3: boolean);
				constructor(arg1: string, arg2: android.app.Instrumentation.ActivityResult, arg3: boolean);
				constructor(arg1: android.content.IntentFilter, arg2: android.app.Instrumentation.ActivityResult, arg3: boolean);
				static class: java.lang.Class<android.app.Instrumentation.ActivityMonitor>;
				getResult(): android.app.Instrumentation.ActivityResult;
				waitForActivityWithTimeout(arg1: native.Long): android.app.Activity;
				getHits(): number;
				waitForActivity(): android.app.Activity;
				getLastActivity(): android.app.Activity;
				getFilter(): android.content.IntentFilter;
				isBlocking(): boolean;
			}
			export class ActivityResult extends java.lang.Object {
				constructor(arg1: number, arg2: android.content.Intent);
				static class: java.lang.Class<android.app.Instrumentation.ActivityResult>;
				getResultData(): android.content.Intent;
				getResultCode(): number;
			}
		}
		export class LauncherActivity extends android.app.ListActivity {
			constructor();
			static class: java.lang.Class<android.app.LauncherActivity>;
			IconResizer: { new (): android.app.LauncherActivity.IconResizer };
			makeListItems(): java.util.IList<android.app.LauncherActivity.ListItem>;
			setTitle(arg1: java.lang.ICharSequence): void;
			setTitle(arg1: string): void;
			setTitle(arg1: number): void;
		}
		export module LauncherActivity {
			export class IconResizer extends java.lang.Object {
				static class: java.lang.Class<android.app.LauncherActivity.IconResizer>;
				createIconThumbnail(arg1: android.graphics.drawable.Drawable): android.graphics.drawable.Drawable;
			}
			export class ListItem extends java.lang.Object {
				constructor();
				resolveInfo: android.content.pm.ResolveInfo;
				label: java.lang.ICharSequence;
				icon: android.graphics.drawable.Drawable;
				packageName: java.lang.String;
				className: java.lang.String;
				extras: android.os.Bundle;
				static class: java.lang.Class<android.app.LauncherActivity.ListItem>;
			}
		}
		export class DatePickerDialog extends android.app.AlertDialog implements android.content.DialogInterface.IOnClickListener, android.widget.DatePicker.IOnDateChangedListener {
			constructor(arg1: android.content.Context, arg2: number, arg3: android.app.DatePickerDialog.IOnDateSetListener, arg4: number, arg5: number, arg6: number);
			constructor(arg1: android.content.Context, arg2: android.app.DatePickerDialog.IOnDateSetListener, arg3: number, arg4: number, arg5: number);
			static class: java.lang.Class<android.app.DatePickerDialog>;
			updateDate(arg1: number, arg2: number, arg3: number): void;
			onSaveInstanceState(): android.os.Bundle;
			onRestoreInstanceState(arg1: android.os.Bundle): void;
			onDateChanged(arg1: android.widget.DatePicker, arg2: number, arg3: number, arg4: number): void;
			onClick(arg1: android.content.IDialogInterface, arg2: number): void;
			getDatePicker(): android.widget.DatePicker;
		}
		export module DatePickerDialog {
			export interface IOnDateSetListener {
				onDateSet(arg1: android.widget.DatePicker, arg2: number, arg3: number, arg4: number): void;
			}
			export class OnDateSetListener implements android.app.DatePickerDialog.IOnDateSetListener {
				constructor(implementation: android.app.DatePickerDialog.IOnDateSetListener);
				onDateSet(arg1: android.widget.DatePicker, arg2: number, arg3: number, arg4: number): void;
			}
		}
		export class DialogFragment extends android.app.Fragment implements android.content.DialogInterface.IOnCancelListener, android.content.DialogInterface.IOnDismissListener {
			constructor();
			static STYLE_NORMAL: number;
			static STYLE_NO_TITLE: number;
			static STYLE_NO_FRAME: number;
			static STYLE_NO_INPUT: number;
			static class: java.lang.Class<android.app.DialogFragment>;
			ShowsDialog: boolean;
			onStart(): void;
			onCreate(arg1: android.os.Bundle): void;
			onSaveInstanceState(arg1: android.os.Bundle): void;
			dismiss(): void;
			onDismiss(arg1: android.content.IDialogInterface): void;
			onDestroyView(): void;
			onStop(): void;
			onDetach(): void;
			onAttach(arg1: android.app.Activity): void;
			onActivityCreated(arg1: android.os.Bundle): void;
			getDialog(): android.app.Dialog;
			onCancel(arg1: android.content.IDialogInterface): void;
			onCreateDialog(arg1: android.os.Bundle): android.app.Dialog;
			setCancelable(arg1: boolean): void;
			dismissAllowingStateLoss(): void;
			setShowsDialog(arg1: boolean): void;
			getShowsDialog(): boolean;
			isCancelable(): boolean;
			show(arg1: android.app.FragmentManager, arg2: java.lang.String): void;
			show(arg1: android.app.FragmentManager, arg2: string): void;
			show(arg1: android.app.FragmentTransaction, arg2: java.lang.String): number;
			show(arg1: android.app.FragmentTransaction, arg2: string): number;
			setStyle(arg1: number, arg2: number): void;
			dump(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dump(arg1: string, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			getTheme(): number;
		}
		export class IntentService extends android.app.Service {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.app.IntentService>;
			onStartCommand(arg1: android.content.Intent, arg2: number, arg3: number): number;
			onBind(arg1: android.content.Intent): android.os.IIBinder;
			onDestroy(): void;
			onStart(arg1: android.content.Intent, arg2: number): void;
			onCreate(): void;
			setIntentRedelivery(arg1: boolean): void;
		}
		export class MediaRouteButton extends android.view.View {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.app.MediaRouteButton>;
			RouteTypes: number;
			setVisibility(arg1: number): void;
			performClick(): boolean;
			onDetachedFromWindow(): void;
			performLongClick(): boolean;
			jumpDrawablesToCurrentState(): void;
			onAttachedToWindow(): void;
			showDialog(): void;
			setRouteTypes(arg1: number): void;
			getRouteTypes(): number;
			setExtendedSettingsClickListener(arg1: android.view.View.IOnClickListener): void;
		}
		export class ActivityManager extends java.lang.Object {
			static RECENT_WITH_EXCLUDED: number;
			static RECENT_IGNORE_UNAVAILABLE: number;
			static MOVE_TASK_WITH_HOME: number;
			static MOVE_TASK_NO_USER_ACTION: number;
			static class: java.lang.Class<android.app.ActivityManager>;
			getMemoryInfo(arg1: android.app.ActivityManager.MemoryInfo): void;
			static isRunningInTestHarness(): boolean;
			getProcessesInErrorState(): java.util.IList<android.app.ActivityManager.ProcessErrorStateInfo>;
			getLauncherLargeIconSize(): number;
			killBackgroundProcesses(arg1: java.lang.String): void;
			killBackgroundProcesses(arg1: string): void;
			getDeviceConfigurationInfo(): android.content.pm.ConfigurationInfo;
			getRunningAppProcesses(): java.util.IList<android.app.ActivityManager.RunningAppProcessInfo>;
			getRunningServiceControlPanel(arg1: android.content.ComponentName): android.app.PendingIntent;
			getLauncherLargeIconDensity(): number;
			getRecentTasks(arg1: number, arg2: number): java.util.IList<android.app.ActivityManager.RecentTaskInfo>;
			getRunningTasks(arg1: number): java.util.IList<android.app.ActivityManager.RunningTaskInfo>;
			getMemoryClass(): number;
			getLargeMemoryClass(): number;
			static getMyMemoryState(arg1: android.app.ActivityManager.RunningAppProcessInfo): void;
			getRunningServices(arg1: number): java.util.IList<android.app.ActivityManager.RunningServiceInfo>;
			getProcessMemoryInfo(arg1: native.Array<number>): native.Array<android.os.Debug.MemoryInfo>;
			moveTaskToFront(arg1: number, arg2: number): void;
			moveTaskToFront(arg1: number, arg2: number, arg3: android.os.Bundle): void;
			restartPackage(arg1: java.lang.String): void;
			restartPackage(arg1: string): void;
			static isUserAMonkey(): boolean;
		}
		export module ActivityManager {
			export class RunningServiceInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				service: android.content.ComponentName;
				pid: number;
				uid: number;
				process: java.lang.String;
				foreground: boolean;
				activeSince: native.Long;
				started: boolean;
				clientCount: number;
				crashCount: number;
				lastActivityTime: native.Long;
				restarting: native.Long;
				static FLAG_STARTED: number;
				static FLAG_FOREGROUND: number;
				static FLAG_SYSTEM_PROCESS: number;
				static FLAG_PERSISTENT_PROCESS: number;
				flags: number;
				clientPackage: java.lang.String;
				clientLabel: number;
				static CREATOR: android.os.Parcelable.ICreator<android.app.ActivityManager.RunningServiceInfo>;
				static class: java.lang.Class<android.app.ActivityManager.RunningServiceInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				readFromParcel(arg1: android.os.Parcel): void;
			}
			export class RecentTaskInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				id: number;
				persistentId: number;
				baseIntent: android.content.Intent;
				origActivity: android.content.ComponentName;
				description: java.lang.ICharSequence;
				static CREATOR: android.os.Parcelable.ICreator<android.app.ActivityManager.RecentTaskInfo>;
				static class: java.lang.Class<android.app.ActivityManager.RecentTaskInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				readFromParcel(arg1: android.os.Parcel): void;
			}
			export class ProcessErrorStateInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				static NO_ERROR: number;
				static CRASHED: number;
				static NOT_RESPONDING: number;
				condition: number;
				processName: java.lang.String;
				pid: number;
				uid: number;
				tag: java.lang.String;
				shortMsg: java.lang.String;
				longMsg: java.lang.String;
				stackTrace: java.lang.String;
				crashData: native.Array<native.Byte>;
				static CREATOR: android.os.Parcelable.ICreator<android.app.ActivityManager.ProcessErrorStateInfo>;
				static class: java.lang.Class<android.app.ActivityManager.ProcessErrorStateInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				readFromParcel(arg1: android.os.Parcel): void;
			}
			export class MemoryInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				availMem: native.Long;
				totalMem: native.Long;
				threshold: native.Long;
				lowMemory: boolean;
				static CREATOR: android.os.Parcelable.ICreator<android.app.ActivityManager.MemoryInfo>;
				static class: java.lang.Class<android.app.ActivityManager.MemoryInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				readFromParcel(arg1: android.os.Parcel): void;
			}
			export class RunningTaskInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				id: number;
				baseActivity: android.content.ComponentName;
				topActivity: android.content.ComponentName;
				thumbnail: android.graphics.Bitmap;
				description: java.lang.ICharSequence;
				numActivities: number;
				numRunning: number;
				static CREATOR: android.os.Parcelable.ICreator<android.app.ActivityManager.RunningTaskInfo>;
				static class: java.lang.Class<android.app.ActivityManager.RunningTaskInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				readFromParcel(arg1: android.os.Parcel): void;
			}
			export class RunningAppProcessInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				constructor(arg1: java.lang.String, arg2: number, arg3: native.Array<java.lang.String>);
				constructor(arg1: string, arg2: number, arg3: native.Array<java.lang.String>);
				processName: java.lang.String;
				pid: number;
				uid: number;
				pkgList: native.Array<java.lang.String>;
				lastTrimLevel: number;
				static IMPORTANCE_FOREGROUND: number;
				static IMPORTANCE_VISIBLE: number;
				static IMPORTANCE_PERCEPTIBLE: number;
				static IMPORTANCE_SERVICE: number;
				static IMPORTANCE_BACKGROUND: number;
				static IMPORTANCE_EMPTY: number;
				importance: number;
				lru: number;
				static REASON_UNKNOWN: number;
				static REASON_PROVIDER_IN_USE: number;
				static REASON_SERVICE_IN_USE: number;
				importanceReasonCode: number;
				importanceReasonPid: number;
				importanceReasonComponent: android.content.ComponentName;
				static CREATOR: android.os.Parcelable.ICreator<android.app.ActivityManager.RunningAppProcessInfo>;
				static class: java.lang.Class<android.app.ActivityManager.RunningAppProcessInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				readFromParcel(arg1: android.os.Parcel): void;
			}
		}
		export class ActivityGroup extends android.app.Activity {
			constructor(arg1: boolean);
			constructor();
			static class: java.lang.Class<android.app.ActivityGroup>;
			getLocalActivityManager(): android.app.LocalActivityManager;
			getCurrentActivity(): android.app.Activity;
		}
		export class AlertDialog extends android.app.Dialog implements android.content.IDialogInterface {
			static THEME_TRADITIONAL: number;
			static THEME_HOLO_DARK: number;
			static THEME_HOLO_LIGHT: number;
			static THEME_DEVICE_DEFAULT_DARK: number;
			static THEME_DEVICE_DEFAULT_LIGHT: number;
			static class: java.lang.Class<android.app.AlertDialog>;
			setMessage(arg1: java.lang.ICharSequence): void;
			setMessage(arg1: string): void;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			getListView(): android.widget.ListView;
			setInverseBackgroundForced(arg1: boolean): void;
			setCustomTitle(arg1: android.view.View): void;
			setIconAttribute(arg1: number): void;
			setButton2(arg1: java.lang.ICharSequence, arg2: android.os.Message): void;
			setButton2(arg1: string, arg2: android.os.Message): void;
			setButton2(arg1: java.lang.ICharSequence, arg2: android.content.DialogInterface.IOnClickListener): void;
			setButton2(arg1: string, arg2: android.content.DialogInterface.IOnClickListener): void;
			setButton3(arg1: java.lang.ICharSequence, arg2: android.content.DialogInterface.IOnClickListener): void;
			setButton3(arg1: string, arg2: android.content.DialogInterface.IOnClickListener): void;
			setButton3(arg1: java.lang.ICharSequence, arg2: android.os.Message): void;
			setButton3(arg1: string, arg2: android.os.Message): void;
			setButton(arg1: java.lang.ICharSequence, arg2: android.content.DialogInterface.IOnClickListener): void;
			setButton(arg1: string, arg2: android.content.DialogInterface.IOnClickListener): void;
			setButton(arg1: number, arg2: java.lang.ICharSequence, arg3: android.os.Message): void;
			setButton(arg1: number, arg2: string, arg3: android.os.Message): void;
			setButton(arg1: number, arg2: java.lang.ICharSequence, arg3: android.content.DialogInterface.IOnClickListener): void;
			setButton(arg1: number, arg2: string, arg3: android.content.DialogInterface.IOnClickListener): void;
			setButton(arg1: java.lang.ICharSequence, arg2: android.os.Message): void;
			setButton(arg1: string, arg2: android.os.Message): void;
			setTitle(arg1: java.lang.ICharSequence): void;
			setTitle(arg1: string): void;
			getButton(arg1: number): android.widget.Button;
			setIcon(arg1: android.graphics.drawable.Drawable): void;
			setIcon(arg1: number): void;
			setView(arg1: android.view.View, arg2: number, arg3: number, arg4: number, arg5: number): void;
			setView(arg1: android.view.View): void;
			dismiss(): void;
			cancel(): void;
			setTitle(arg1: number): void;
		}
		export module AlertDialog {
			export class Builder extends java.lang.Object {
				constructor(arg1: android.content.Context, arg2: number);
				constructor(arg1: android.content.Context);
				static class: java.lang.Class<android.app.AlertDialog.Builder>;
				setMessage(arg1: number): android.app.AlertDialog.Builder;
				setMessage(arg1: java.lang.ICharSequence): android.app.AlertDialog.Builder;
				setMessage(arg1: string): android.app.AlertDialog.Builder;
				setOnKeyListener(arg1: android.content.DialogInterface.IOnKeyListener): android.app.AlertDialog.Builder;
				setOnItemSelectedListener(arg1: android.widget.AdapterView.IOnItemSelectedListener): android.app.AlertDialog.Builder;
				setAdapter(arg1: android.widget.IListAdapter, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setOnDismissListener(arg1: android.content.DialogInterface.IOnDismissListener): android.app.AlertDialog.Builder;
				setOnCancelListener(arg1: android.content.DialogInterface.IOnCancelListener): android.app.AlertDialog.Builder;
				setCancelable(arg1: boolean): android.app.AlertDialog.Builder;
				setInverseBackgroundForced(arg1: boolean): android.app.AlertDialog.Builder;
				setSingleChoiceItems(arg1: number, arg2: number, arg3: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setSingleChoiceItems(arg1: android.widget.IListAdapter, arg2: number, arg3: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setSingleChoiceItems(arg1: android.database.ICursor, arg2: number, arg3: java.lang.String, arg4: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setSingleChoiceItems(arg1: android.database.ICursor, arg2: number, arg3: string, arg4: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setSingleChoiceItems(arg1: native.Array<java.lang.ICharSequence>, arg2: number, arg3: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setCustomTitle(arg1: android.view.View): android.app.AlertDialog.Builder;
				setIconAttribute(arg1: number): android.app.AlertDialog.Builder;
				setNeutralButton(arg1: number, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setNeutralButton(arg1: java.lang.ICharSequence, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setNeutralButton(arg1: string, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setNegativeButton(arg1: number, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setNegativeButton(arg1: java.lang.ICharSequence, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setNegativeButton(arg1: string, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setMultiChoiceItems(arg1: native.Array<java.lang.ICharSequence>, arg2: native.Array<boolean>, arg3: android.content.DialogInterface.IOnMultiChoiceClickListener): android.app.AlertDialog.Builder;
				setMultiChoiceItems(arg1: number, arg2: native.Array<boolean>, arg3: android.content.DialogInterface.IOnMultiChoiceClickListener): android.app.AlertDialog.Builder;
				setMultiChoiceItems(arg1: android.database.ICursor, arg2: java.lang.String, arg3: java.lang.String, arg4: android.content.DialogInterface.IOnMultiChoiceClickListener): android.app.AlertDialog.Builder;
				setMultiChoiceItems(arg1: android.database.ICursor, arg2: string, arg3: string, arg4: android.content.DialogInterface.IOnMultiChoiceClickListener): android.app.AlertDialog.Builder;
				setPositiveButton(arg1: number, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setPositiveButton(arg1: java.lang.ICharSequence, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setPositiveButton(arg1: string, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setItems(arg1: native.Array<java.lang.ICharSequence>, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				setItems(arg1: number, arg2: android.content.DialogInterface.IOnClickListener): android.app.AlertDialog.Builder;
				getContext(): android.content.Context;
				create(): android.app.AlertDialog;
				setCursor(arg1: android.database.ICursor, arg2: android.content.DialogInterface.IOnClickListener, arg3: java.lang.String): android.app.AlertDialog.Builder;
				setCursor(arg1: android.database.ICursor, arg2: android.content.DialogInterface.IOnClickListener, arg3: string): android.app.AlertDialog.Builder;
				setTitle(arg1: number): android.app.AlertDialog.Builder;
				setTitle(arg1: java.lang.ICharSequence): android.app.AlertDialog.Builder;
				setTitle(arg1: string): android.app.AlertDialog.Builder;
				show(): android.app.AlertDialog;
				setIcon(arg1: android.graphics.drawable.Drawable): android.app.AlertDialog.Builder;
				setIcon(arg1: number): android.app.AlertDialog.Builder;
				setView(arg1: android.view.View): android.app.AlertDialog.Builder;
			}
		}
		export class ActionBar extends java.lang.Object {
			constructor();
			static NAVIGATION_MODE_STANDARD: number;
			static NAVIGATION_MODE_LIST: number;
			static NAVIGATION_MODE_TABS: number;
			static DISPLAY_USE_LOGO: number;
			static DISPLAY_SHOW_HOME: number;
			static DISPLAY_HOME_AS_UP: number;
			static DISPLAY_SHOW_TITLE: number;
			static DISPLAY_SHOW_CUSTOM: number;
			static class: java.lang.Class<android.app.ActionBar>;
			Subtitle: java.lang.ICharSequence;
			Title: java.lang.ICharSequence;
			NavigationMode: number;
			CustomView: android.view.View;
			DisplayOptions: number;
			setBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			getSubtitle(): java.lang.ICharSequence;
			setSubtitle(arg1: java.lang.ICharSequence): void;
			setSubtitle(arg1: string): void;
			setSubtitle(arg1: number): void;
			setCustomView(arg1: android.view.View): void;
			setCustomView(arg1: number): void;
			setCustomView(arg1: android.view.View, arg2: android.app.ActionBar.LayoutParams): void;
			getCustomView(): android.view.View;
			removeOnMenuVisibilityListener(arg1: android.app.ActionBar.IOnMenuVisibilityListener): void;
			setDisplayShowCustomEnabled(arg1: boolean): void;
			addOnMenuVisibilityListener(arg1: android.app.ActionBar.IOnMenuVisibilityListener): void;
			setDisplayHomeAsUpEnabled(arg1: boolean): void;
			setListNavigationCallbacks(arg1: android.widget.ISpinnerAdapter, arg2: android.app.ActionBar.IOnNavigationListener): void;
			setSelectedNavigationItem(arg1: number): void;
			getNavigationItemCount(): number;
			setDisplayUseLogoEnabled(arg1: boolean): void;
			setStackedBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			getSelectedNavigationIndex(): number;
			setDisplayShowHomeEnabled(arg1: boolean): void;
			setDisplayShowTitleEnabled(arg1: boolean): void;
			setSplitBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			getNavigationMode(): number;
			setHomeButtonEnabled(arg1: boolean): void;
			getDisplayOptions(): number;
			setNavigationMode(arg1: number): void;
			setDisplayOptions(arg1: number): void;
			setDisplayOptions(arg1: number, arg2: number): void;
			getSelectedTab(): android.app.ActionBar.Tab;
			getThemedContext(): android.content.Context;
			selectTab(arg1: android.app.ActionBar.Tab): void;
			setLogo(arg1: android.graphics.drawable.Drawable): void;
			setLogo(arg1: number): void;
			newTab(): android.app.ActionBar.Tab;
			removeTab(arg1: android.app.ActionBar.Tab): void;
			getTabAt(arg1: number): android.app.ActionBar.Tab;
			removeAllTabs(): void;
			getTitle(): java.lang.ICharSequence;
			setTitle(arg1: java.lang.ICharSequence): void;
			setTitle(arg1: string): void;
			setTitle(arg1: number): void;
			getHeight(): number;
			hide(): void;
			isShowing(): boolean;
			show(): void;
			setIcon(arg1: android.graphics.drawable.Drawable): void;
			setIcon(arg1: number): void;
			addTab(arg1: android.app.ActionBar.Tab, arg2: number, arg3: boolean): void;
			addTab(arg1: android.app.ActionBar.Tab, arg2: boolean): void;
			addTab(arg1: android.app.ActionBar.Tab, arg2: number): void;
			addTab(arg1: android.app.ActionBar.Tab): void;
			getTabCount(): number;
			removeTabAt(arg1: number): void;
		}
		export module ActionBar {
			export class OnMenuVisibilityListener implements android.app.ActionBar.IOnMenuVisibilityListener {
				constructor(implementation: android.app.ActionBar.IOnMenuVisibilityListener);
				onMenuVisibilityChanged(arg1: boolean): void;
			}
			export interface IOnMenuVisibilityListener {
				onMenuVisibilityChanged(arg1: boolean): void;
			}
			export interface ITabListener {
				onTabReselected(arg1: android.app.ActionBar.Tab, arg2: android.app.FragmentTransaction): void;
				onTabUnselected(arg1: android.app.ActionBar.Tab, arg2: android.app.FragmentTransaction): void;
				onTabSelected(arg1: android.app.ActionBar.Tab, arg2: android.app.FragmentTransaction): void;
			}
			export class TabListener implements android.app.ActionBar.ITabListener {
				constructor(implementation: android.app.ActionBar.ITabListener);
				onTabReselected(arg1: android.app.ActionBar.Tab, arg2: android.app.FragmentTransaction): void;
				onTabUnselected(arg1: android.app.ActionBar.Tab, arg2: android.app.FragmentTransaction): void;
				onTabSelected(arg1: android.app.ActionBar.Tab, arg2: android.app.FragmentTransaction): void;
			}
			export class OnNavigationListener implements android.app.ActionBar.IOnNavigationListener {
				constructor(implementation: android.app.ActionBar.IOnNavigationListener);
				onNavigationItemSelected(arg1: number, arg2: native.Long): boolean;
			}
			export class Tab extends java.lang.Object {
				constructor();
				static INVALID_POSITION: number;
				static class: java.lang.Class<android.app.ActionBar.Tab>;
				Text: java.lang.ICharSequence;
				CustomView: android.view.View;
				Tag: any;
				ContentDescription: java.lang.ICharSequence;
				Icon: android.graphics.drawable.Drawable;
				getContentDescription(): java.lang.ICharSequence;
				setContentDescription(arg1: number): android.app.ActionBar.Tab;
				setContentDescription(arg1: java.lang.ICharSequence): android.app.ActionBar.Tab;
				setContentDescription(arg1: string): android.app.ActionBar.Tab;
				setTag(arg1: any): android.app.ActionBar.Tab;
				setCustomView(arg1: number): android.app.ActionBar.Tab;
				setCustomView(arg1: android.view.View): android.app.ActionBar.Tab;
				getCustomView(): android.view.View;
				setTabListener(arg1: android.app.ActionBar.ITabListener): android.app.ActionBar.Tab;
				getText(): java.lang.ICharSequence;
				setText(arg1: java.lang.ICharSequence): android.app.ActionBar.Tab;
				setText(arg1: string): android.app.ActionBar.Tab;
				setText(arg1: number): android.app.ActionBar.Tab;
				getIcon(): android.graphics.drawable.Drawable;
				setIcon(arg1: number): android.app.ActionBar.Tab;
				setIcon(arg1: android.graphics.drawable.Drawable): android.app.ActionBar.Tab;
				select(): void;
				getPosition(): number;
				getTag(): any;
			}
			export class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: android.app.ActionBar.LayoutParams);
				constructor(arg1: number);
				constructor(arg1: number, arg2: number, arg3: number);
				constructor(arg1: number, arg2: number);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				gravity: number;
				static class: java.lang.Class<android.app.ActionBar.LayoutParams>;
			}
			export interface IOnNavigationListener {
				onNavigationItemSelected(arg1: number, arg2: native.Long): boolean;
			}
		}
		export class SearchManager extends java.lang.Object implements android.content.DialogInterface.IOnDismissListener, android.content.DialogInterface.IOnCancelListener {
			static MENU_KEY: string;
			static MENU_KEYCODE: number;
			static QUERY: java.lang.String;
			static USER_QUERY: java.lang.String;
			static APP_DATA: java.lang.String;
			static ACTION_KEY: java.lang.String;
			static EXTRA_DATA_KEY: java.lang.String;
			static EXTRA_SELECT_QUERY: java.lang.String;
			static EXTRA_NEW_SEARCH: java.lang.String;
			static EXTRA_WEB_SEARCH_PENDINGINTENT: java.lang.String;
			static CURSOR_EXTRA_KEY_IN_PROGRESS: java.lang.String;
			static ACTION_MSG: java.lang.String;
			static FLAG_QUERY_REFINEMENT: number;
			static SUGGEST_URI_PATH_QUERY: java.lang.String;
			static SUGGEST_MIME_TYPE: java.lang.String;
			static SUGGEST_URI_PATH_SHORTCUT: java.lang.String;
			static SHORTCUT_MIME_TYPE: java.lang.String;
			static SUGGEST_COLUMN_FORMAT: java.lang.String;
			static SUGGEST_COLUMN_TEXT_1: java.lang.String;
			static SUGGEST_COLUMN_TEXT_2: java.lang.String;
			static SUGGEST_COLUMN_TEXT_2_URL: java.lang.String;
			static SUGGEST_COLUMN_ICON_1: java.lang.String;
			static SUGGEST_COLUMN_ICON_2: java.lang.String;
			static SUGGEST_COLUMN_INTENT_ACTION: java.lang.String;
			static SUGGEST_COLUMN_INTENT_DATA: java.lang.String;
			static SUGGEST_COLUMN_INTENT_EXTRA_DATA: java.lang.String;
			static SUGGEST_COLUMN_INTENT_DATA_ID: java.lang.String;
			static SUGGEST_COLUMN_QUERY: java.lang.String;
			static SUGGEST_COLUMN_SHORTCUT_ID: java.lang.String;
			static SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING: java.lang.String;
			static SUGGEST_COLUMN_FLAGS: java.lang.String;
			static SUGGEST_COLUMN_LAST_ACCESS_HINT: java.lang.String;
			static SUGGEST_NEVER_MAKE_SHORTCUT: java.lang.String;
			static SUGGEST_PARAMETER_LIMIT: java.lang.String;
			static INTENT_ACTION_GLOBAL_SEARCH: java.lang.String;
			static INTENT_ACTION_SEARCH_SETTINGS: java.lang.String;
			static INTENT_ACTION_WEB_SEARCH_SETTINGS: java.lang.String;
			static INTENT_ACTION_SEARCHABLES_CHANGED: java.lang.String;
			static INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED: java.lang.String;
			static INTENT_ACTION_SEARCH_SETTINGS_CHANGED: java.lang.String;
			static class: java.lang.Class<android.app.SearchManager>;
			setOnDismissListener(arg1: android.app.SearchManager.IOnDismissListener): void;
			onDismiss(arg1: android.content.IDialogInterface): void;
			startSearch(arg1: java.lang.String, arg2: boolean, arg3: android.content.ComponentName, arg4: android.os.Bundle, arg5: boolean): void;
			startSearch(arg1: string, arg2: boolean, arg3: android.content.ComponentName, arg4: android.os.Bundle, arg5: boolean): void;
			triggerSearch(arg1: java.lang.String, arg2: android.content.ComponentName, arg3: android.os.Bundle): void;
			triggerSearch(arg1: string, arg2: android.content.ComponentName, arg3: android.os.Bundle): void;
			onCancel(arg1: android.content.IDialogInterface): void;
			setOnCancelListener(arg1: android.app.SearchManager.IOnCancelListener): void;
			getSearchablesInGlobalSearch(): java.util.IList<android.app.SearchableInfo>;
			getGlobalSearchActivity(): android.content.ComponentName;
			stopSearch(): void;
			getSearchableInfo(arg1: android.content.ComponentName): android.app.SearchableInfo;
		}
		export module SearchManager {
			export class OnCancelListener implements android.app.SearchManager.IOnCancelListener {
				constructor(implementation: android.app.SearchManager.IOnCancelListener);
				onCancel(): void;
			}
			export interface IOnCancelListener {
				onCancel(): void;
			}
			export class OnDismissListener implements android.app.SearchManager.IOnDismissListener {
				constructor(implementation: android.app.SearchManager.IOnDismissListener);
				onDismiss(): void;
			}
			export interface IOnDismissListener {
				onDismiss(): void;
			}
		}
		export class AlarmManager extends java.lang.Object {
			static RTC_WAKEUP: number;
			static RTC: number;
			static ELAPSED_REALTIME_WAKEUP: number;
			static ELAPSED_REALTIME: number;
			static INTERVAL_FIFTEEN_MINUTES: native.Long;
			static INTERVAL_HALF_HOUR: native.Long;
			static INTERVAL_HOUR: native.Long;
			static INTERVAL_HALF_DAY: native.Long;
			static INTERVAL_DAY: native.Long;
			static class: java.lang.Class<android.app.AlarmManager>;
			setRepeating(arg1: number, arg2: native.Long, arg3: native.Long, arg4: android.app.PendingIntent): void;
			setInexactRepeating(arg1: number, arg2: native.Long, arg3: native.Long, arg4: android.app.PendingIntent): void;
			set(arg1: number, arg2: native.Long, arg3: android.app.PendingIntent): void;
			setTimeZone(arg1: java.lang.String): void;
			setTimeZone(arg1: string): void;
			setTime(arg1: native.Long): void;
			cancel(arg1: android.app.PendingIntent): void;
		}
		export class LocalActivityManager extends java.lang.Object {
			constructor(arg1: android.app.Activity, arg2: boolean);
			static class: java.lang.Class<android.app.LocalActivityManager>;
			startActivity(arg1: java.lang.String, arg2: android.content.Intent): android.view.Window;
			startActivity(arg1: string, arg2: android.content.Intent): android.view.Window;
			getActivity(arg1: java.lang.String): android.app.Activity;
			getActivity(arg1: string): android.app.Activity;
			getCurrentActivity(): android.app.Activity;
			dispatchResume(): void;
			dispatchCreate(arg1: android.os.Bundle): void;
			dispatchDestroy(arg1: boolean): void;
			destroyActivity(arg1: java.lang.String, arg2: boolean): android.view.Window;
			destroyActivity(arg1: string, arg2: boolean): android.view.Window;
			removeAllActivities(): void;
			saveInstanceState(): android.os.Bundle;
			dispatchStop(): void;
			dispatchPause(arg1: boolean): void;
			getCurrentId(): string;
		}
		export module backup {
			export class BackupDataInput extends java.lang.Object {
				static class: java.lang.Class<android.app.backup.BackupDataInput>;
				getDataSize(): number;
				readEntityData(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				skipEntityData(): void;
				readNextHeader(): boolean;
				getKey(): string;
			}
			export class BackupAgentHelper extends android.app.backup.BackupAgent {
				constructor();
				static class: java.lang.Class<android.app.backup.BackupAgentHelper>;
				addHelper(arg1: java.lang.String, arg2: android.app.backup.IBackupHelper): void;
				addHelper(arg1: string, arg2: android.app.backup.IBackupHelper): void;
				onBackup(arg1: android.os.ParcelFileDescriptor, arg2: android.app.backup.BackupDataOutput, arg3: android.os.ParcelFileDescriptor): void;
				onRestore(arg1: android.app.backup.BackupDataInput, arg2: number, arg3: android.os.ParcelFileDescriptor): void;
			}
			export interface IBackupHelper {
				writeNewStateDescription(arg1: android.os.ParcelFileDescriptor): void;
				performBackup(arg1: android.os.ParcelFileDescriptor, arg2: android.app.backup.BackupDataOutput, arg3: android.os.ParcelFileDescriptor): void;
				restoreEntity(arg1: android.app.backup.BackupDataInputStream): void;
			}
			export class BackupAgent extends android.content.ContextWrapper {
				constructor();
				static TYPE_FILE: number;
				static TYPE_DIRECTORY: number;
				static class: java.lang.Class<android.app.backup.BackupAgent>;
				onDestroy(): void;
				onCreate(): void;
				onBackup(arg1: android.os.ParcelFileDescriptor, arg2: android.app.backup.BackupDataOutput, arg3: android.os.ParcelFileDescriptor): void;
				onRestoreFile(arg1: android.os.ParcelFileDescriptor, arg2: native.Long, arg3: java.io.File, arg4: number, arg5: native.Long, arg6: native.Long): void;
				onRestore(arg1: android.app.backup.BackupDataInput, arg2: number, arg3: android.os.ParcelFileDescriptor): void;
				onFullBackup(arg1: android.app.backup.FullBackupDataOutput): void;
				fullBackupFile(arg1: java.io.File, arg2: android.app.backup.FullBackupDataOutput): void;
			}
			export class BackupDataOutput extends java.lang.Object {
				static class: java.lang.Class<android.app.backup.BackupDataOutput>;
				writeEntityData(arg1: native.Array<native.Byte>, arg2: number): number;
				writeEntityHeader(arg1: java.lang.String, arg2: number): number;
				writeEntityHeader(arg1: string, arg2: number): number;
			}
			export class BackupHelper implements android.app.backup.IBackupHelper {
				constructor(implementation: android.app.backup.IBackupHelper);
				writeNewStateDescription(arg1: android.os.ParcelFileDescriptor): void;
				performBackup(arg1: android.os.ParcelFileDescriptor, arg2: android.app.backup.BackupDataOutput, arg3: android.os.ParcelFileDescriptor): void;
				restoreEntity(arg1: android.app.backup.BackupDataInputStream): void;
			}
			export class FileBackupHelper extends android.app.backup.FileBackupHelperBase implements android.app.backup.IBackupHelper {
				constructor(arg1: android.content.Context, arg2: native.Array<java.lang.String>);
				static class: java.lang.Class<android.app.backup.FileBackupHelper>;
				writeNewStateDescription(arg1: android.os.ParcelFileDescriptor): void;
				performBackup(arg1: android.os.ParcelFileDescriptor, arg2: android.app.backup.BackupDataOutput, arg3: android.os.ParcelFileDescriptor): void;
				restoreEntity(arg1: android.app.backup.BackupDataInputStream): void;
			}
			export class SharedPreferencesBackupHelper extends android.app.backup.FileBackupHelperBase implements android.app.backup.IBackupHelper {
				constructor(arg1: android.content.Context, arg2: native.Array<java.lang.String>);
				static class: java.lang.Class<android.app.backup.SharedPreferencesBackupHelper>;
				writeNewStateDescription(arg1: android.os.ParcelFileDescriptor): void;
				performBackup(arg1: android.os.ParcelFileDescriptor, arg2: android.app.backup.BackupDataOutput, arg3: android.os.ParcelFileDescriptor): void;
				restoreEntity(arg1: android.app.backup.BackupDataInputStream): void;
			}
			export class FileBackupHelperBase extends java.lang.Object {
				static class: java.lang.Class<android.app.backup.FileBackupHelperBase>;
				writeNewStateDescription(arg1: android.os.ParcelFileDescriptor): void;
			}
			export class BackupDataInputStream extends java.io.InputStream {
				static class: java.lang.Class<android.app.backup.BackupDataInputStream>;
				size(): number;
				getKey(): string;
				read(arg1: native.Array<native.Byte>): number;
				read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				read(): number;
			}
			export class FullBackupDataOutput extends java.lang.Object {
				static class: java.lang.Class<android.app.backup.FullBackupDataOutput>;
			}
			export class RestoreObserver extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.app.backup.RestoreObserver>;
				onUpdate(arg1: number, arg2: java.lang.String): void;
				onUpdate(arg1: number, arg2: string): void;
				restoreFinished(arg1: number): void;
				restoreStarting(arg1: number): void;
			}
			export class BackupManager extends java.lang.Object {
				constructor(arg1: android.content.Context);
				static class: java.lang.Class<android.app.backup.BackupManager>;
				static dataChanged(arg1: java.lang.String): void;
				static dataChanged(arg1: string): void;
				dataChanged(): void;
				requestRestore(arg1: android.app.backup.RestoreObserver): number;
			}
		}
		export class ActivityOptions extends java.lang.Object {
			static class: java.lang.Class<android.app.ActivityOptions>;
			static makeThumbnailScaleUpAnimation(arg1: android.view.View, arg2: android.graphics.Bitmap, arg3: number, arg4: number): android.app.ActivityOptions;
			static makeCustomAnimation(arg1: android.content.Context, arg2: number, arg3: number): android.app.ActivityOptions;
			static makeScaleUpAnimation(arg1: android.view.View, arg2: number, arg3: number, arg4: number, arg5: number): android.app.ActivityOptions;
			toBundle(): android.os.Bundle;
			update(arg1: android.app.ActivityOptions): void;
		}
		export class DownloadManager extends java.lang.Object {
			static COLUMN_ID: java.lang.String;
			static COLUMN_TITLE: java.lang.String;
			static COLUMN_DESCRIPTION: java.lang.String;
			static COLUMN_URI: java.lang.String;
			static COLUMN_MEDIA_TYPE: java.lang.String;
			static COLUMN_TOTAL_SIZE_BYTES: java.lang.String;
			static COLUMN_LOCAL_URI: java.lang.String;
			static COLUMN_LOCAL_FILENAME: java.lang.String;
			static COLUMN_STATUS: java.lang.String;
			static COLUMN_REASON: java.lang.String;
			static COLUMN_BYTES_DOWNLOADED_SO_FAR: java.lang.String;
			static COLUMN_LAST_MODIFIED_TIMESTAMP: java.lang.String;
			static COLUMN_MEDIAPROVIDER_URI: java.lang.String;
			static STATUS_PENDING: number;
			static STATUS_RUNNING: number;
			static STATUS_PAUSED: number;
			static STATUS_SUCCESSFUL: number;
			static STATUS_FAILED: number;
			static ERROR_UNKNOWN: number;
			static ERROR_FILE_ERROR: number;
			static ERROR_UNHANDLED_HTTP_CODE: number;
			static ERROR_HTTP_DATA_ERROR: number;
			static ERROR_TOO_MANY_REDIRECTS: number;
			static ERROR_INSUFFICIENT_SPACE: number;
			static ERROR_DEVICE_NOT_FOUND: number;
			static ERROR_CANNOT_RESUME: number;
			static ERROR_FILE_ALREADY_EXISTS: number;
			static PAUSED_WAITING_TO_RETRY: number;
			static PAUSED_WAITING_FOR_NETWORK: number;
			static PAUSED_QUEUED_FOR_WIFI: number;
			static PAUSED_UNKNOWN: number;
			static ACTION_DOWNLOAD_COMPLETE: java.lang.String;
			static ACTION_NOTIFICATION_CLICKED: java.lang.String;
			static ACTION_VIEW_DOWNLOADS: java.lang.String;
			static INTENT_EXTRAS_SORT_BY_SIZE: java.lang.String;
			static EXTRA_DOWNLOAD_ID: java.lang.String;
			static EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS: java.lang.String;
			static class: java.lang.Class<android.app.DownloadManager>;
			getUriForDownloadedFile(arg1: native.Long): android.net.Uri;
			getMimeTypeForDownloadedFile(arg1: native.Long): string;
			openDownloadedFile(arg1: native.Long): android.os.ParcelFileDescriptor;
			addCompletedDownload(arg1: java.lang.String, arg2: java.lang.String, arg3: boolean, arg4: java.lang.String, arg5: java.lang.String, arg6: native.Long, arg7: boolean): any;
			addCompletedDownload(arg1: string, arg2: string, arg3: boolean, arg4: string, arg5: string, arg6: native.Long, arg7: boolean): any;
			static getMaxBytesOverMobile(arg1: android.content.Context): java.lang.Long;
			static getRecommendedMaxBytesOverMobile(arg1: android.content.Context): java.lang.Long;
			remove(arg1: native.Array<native.Long>): number;
			enqueue(arg1: android.app.DownloadManager.Request): any;
			query(arg1: android.app.DownloadManager.Query): android.database.ICursor;
		}
		export module DownloadManager {
			export class Query extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.app.DownloadManager.Query>;
				setFilterByStatus(arg1: number): android.app.DownloadManager.Query;
				setFilterById(arg1: native.Array<native.Long>): android.app.DownloadManager.Query;
			}
			export class Request extends java.lang.Object {
				constructor(arg1: android.net.Uri);
				static NETWORK_MOBILE: number;
				static NETWORK_WIFI: number;
				static VISIBILITY_VISIBLE: number;
				static VISIBILITY_VISIBLE_NOTIFY_COMPLETED: number;
				static VISIBILITY_HIDDEN: number;
				static VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION: number;
				static class: java.lang.Class<android.app.DownloadManager.Request>;
				setMimeType(arg1: java.lang.String): android.app.DownloadManager.Request;
				setMimeType(arg1: string): android.app.DownloadManager.Request;
				setNotificationVisibility(arg1: number): android.app.DownloadManager.Request;
				allowScanningByMediaScanner(): void;
				setVisibleInDownloadsUi(arg1: boolean): android.app.DownloadManager.Request;
				setShowRunningNotification(arg1: boolean): android.app.DownloadManager.Request;
				setAllowedNetworkTypes(arg1: number): android.app.DownloadManager.Request;
				setDestinationInExternalFilesDir(arg1: android.content.Context, arg2: java.lang.String, arg3: java.lang.String): android.app.DownloadManager.Request;
				setDestinationInExternalFilesDir(arg1: android.content.Context, arg2: string, arg3: string): android.app.DownloadManager.Request;
				setDestinationInExternalPublicDir(arg1: java.lang.String, arg2: java.lang.String): android.app.DownloadManager.Request;
				setDestinationInExternalPublicDir(arg1: string, arg2: string): android.app.DownloadManager.Request;
				setDestinationUri(arg1: android.net.Uri): android.app.DownloadManager.Request;
				setAllowedOverRoaming(arg1: boolean): android.app.DownloadManager.Request;
				addRequestHeader(arg1: java.lang.String, arg2: java.lang.String): android.app.DownloadManager.Request;
				addRequestHeader(arg1: string, arg2: string): android.app.DownloadManager.Request;
				setAllowedOverMetered(arg1: boolean): android.app.DownloadManager.Request;
				setTitle(arg1: java.lang.ICharSequence): android.app.DownloadManager.Request;
				setTitle(arg1: string): android.app.DownloadManager.Request;
				setDescription(arg1: java.lang.ICharSequence): android.app.DownloadManager.Request;
				setDescription(arg1: string): android.app.DownloadManager.Request;
			}
		}
		export class NotificationManager extends java.lang.Object {
			static class: java.lang.Class<android.app.NotificationManager>;
			cancelAll(): void;
			notify(arg1: java.lang.String, arg2: number, arg3: android.app.Notification): void;
			notify(arg1: string, arg2: number, arg3: android.app.Notification): void;
			notify(arg1: number, arg2: android.app.Notification): void;
			cancel(arg1: number): void;
			cancel(arg1: java.lang.String, arg2: number): void;
			cancel(arg1: string, arg2: number): void;
			notify(): void;
		}
		export class PendingIntent extends java.lang.Object implements android.os.IParcelable {
			static FLAG_ONE_SHOT: number;
			static FLAG_NO_CREATE: number;
			static FLAG_CANCEL_CURRENT: number;
			static FLAG_UPDATE_CURRENT: number;
			static CREATOR: android.os.Parcelable.ICreator<android.app.PendingIntent>;
			static class: java.lang.Class<android.app.PendingIntent>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			static getActivity(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: number, arg5: android.os.Bundle): android.app.PendingIntent;
			static getActivity(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: number): android.app.PendingIntent;
			getCreatorPackage(): string;
			getTargetPackage(): string;
			getIntentSender(): android.content.IntentSender;
			getCreatorUserHandle(): android.os.UserHandle;
			static getActivities(arg1: android.content.Context, arg2: number, arg3: native.Array<android.content.Intent>, arg4: number): android.app.PendingIntent;
			static getActivities(arg1: android.content.Context, arg2: number, arg3: native.Array<android.content.Intent>, arg4: number, arg5: android.os.Bundle): android.app.PendingIntent;
			getCreatorUid(): number;
			static writePendingIntentOrNullToParcel(arg1: android.app.PendingIntent, arg2: android.os.Parcel): void;
			static readPendingIntentOrNullFromParcel(arg1: android.os.Parcel): android.app.PendingIntent;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			cancel(): void;
			static getService(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: number): android.app.PendingIntent;
			static getBroadcast(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: number): android.app.PendingIntent;
			send(): void;
			send(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: android.app.PendingIntent.IOnFinished, arg5: android.os.Handler): void;
			send(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: android.app.PendingIntent.IOnFinished, arg5: android.os.Handler, arg6: java.lang.String): void;
			send(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: android.app.PendingIntent.IOnFinished, arg5: android.os.Handler, arg6: string): void;
			send(arg1: number, arg2: android.app.PendingIntent.IOnFinished, arg3: android.os.Handler): void;
			send(arg1: android.content.Context, arg2: number, arg3: android.content.Intent): void;
			send(arg1: number): void;
		}
		export module PendingIntent {
			export class OnFinished implements android.app.PendingIntent.IOnFinished {
				constructor(implementation: android.app.PendingIntent.IOnFinished);
				onSendFinished(arg1: android.app.PendingIntent, arg2: android.content.Intent, arg3: number, arg4: java.lang.String, arg5: android.os.Bundle): void;
				onSendFinished(arg1: android.app.PendingIntent, arg2: android.content.Intent, arg3: number, arg4: string, arg5: android.os.Bundle): void;
			}
			export interface IOnFinished {
				onSendFinished(arg1: android.app.PendingIntent, arg2: android.content.Intent, arg3: number, arg4: string, arg5: android.os.Bundle): void;
			}
			export class CanceledException extends android.util.AndroidException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.Exception);
				static class: java.lang.Class<android.app.PendingIntent.CanceledException>;
			}
		}
		export class FragmentManager extends java.lang.Object {
			constructor();
			static POP_BACK_STACK_INCLUSIVE: number;
			static class: java.lang.Class<android.app.FragmentManager>;
			invalidateOptionsMenu(): void;
			beginTransaction(): android.app.FragmentTransaction;
			removeOnBackStackChangedListener(arg1: android.app.FragmentManager.IOnBackStackChangedListener): void;
			saveFragmentInstanceState(arg1: android.app.Fragment): android.app.Fragment.SavedState;
			executePendingTransactions(): boolean;
			getBackStackEntryCount(): number;
			addOnBackStackChangedListener(arg1: android.app.FragmentManager.IOnBackStackChangedListener): void;
			popBackStackImmediate(arg1: number, arg2: number): boolean;
			popBackStackImmediate(arg1: java.lang.String, arg2: number): boolean;
			popBackStackImmediate(arg1: string, arg2: number): boolean;
			popBackStackImmediate(): boolean;
			findFragmentByTag(arg1: java.lang.String): android.app.Fragment;
			findFragmentByTag(arg1: string): android.app.Fragment;
			getBackStackEntryAt(arg1: number): android.app.FragmentManager.IBackStackEntry;
			static enableDebugLogging(arg1: boolean): void;
			findFragmentById(arg1: number): android.app.Fragment;
			popBackStack(): void;
			popBackStack(arg1: java.lang.String, arg2: number): void;
			popBackStack(arg1: string, arg2: number): void;
			popBackStack(arg1: number, arg2: number): void;
			putFragment(arg1: android.os.Bundle, arg2: java.lang.String, arg3: android.app.Fragment): void;
			putFragment(arg1: android.os.Bundle, arg2: string, arg3: android.app.Fragment): void;
			isDestroyed(): boolean;
			getFragment(arg1: android.os.Bundle, arg2: java.lang.String): android.app.Fragment;
			getFragment(arg1: android.os.Bundle, arg2: string): android.app.Fragment;
			dump(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dump(arg1: string, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
		}
		export module FragmentManager {
			export class OnBackStackChangedListener implements android.app.FragmentManager.IOnBackStackChangedListener {
				constructor(implementation: android.app.FragmentManager.IOnBackStackChangedListener);
				onBackStackChanged(): void;
			}
			export class BackStackEntry implements android.app.FragmentManager.IBackStackEntry {
				constructor(implementation: android.app.FragmentManager.IBackStackEntry);
				getBreadCrumbShortTitle(): java.lang.ICharSequence;
				getBreadCrumbTitle(): java.lang.ICharSequence;
				getBreadCrumbShortTitleRes(): number;
				getBreadCrumbTitleRes(): number;
				getName(): string;
				getId(): number;
			}
			export interface IOnBackStackChangedListener {
				onBackStackChanged(): void;
			}
			export interface IBackStackEntry {
				getBreadCrumbShortTitle(): java.lang.ICharSequence;
				getBreadCrumbTitle(): java.lang.ICharSequence;
				getBreadCrumbShortTitleRes(): number;
				getBreadCrumbTitleRes(): number;
				getName(): string;
				getId(): number;
			}
		}
		export class AliasActivity extends android.app.Activity {
			constructor();
			static class: java.lang.Class<android.app.AliasActivity>;
		}
		export class TaskStackBuilder extends java.lang.Object {
			static class: java.lang.Class<android.app.TaskStackBuilder>;
			startActivities(): void;
			startActivities(arg1: android.os.Bundle): void;
			addNextIntentWithParentStack(arg1: android.content.Intent): android.app.TaskStackBuilder;
			getIntents(): native.Array<android.content.Intent>;
			editIntentAt(arg1: number): android.content.Intent;
			addNextIntent(arg1: android.content.Intent): android.app.TaskStackBuilder;
			addParentStack(arg1: android.app.Activity): android.app.TaskStackBuilder;
			addParentStack(arg1: java.lang.Class<any>): android.app.TaskStackBuilder;
			addParentStack(arg1: android.content.ComponentName): android.app.TaskStackBuilder;
			getIntentCount(): number;
			getPendingIntent(arg1: number, arg2: number, arg3: android.os.Bundle): android.app.PendingIntent;
			getPendingIntent(arg1: number, arg2: number): android.app.PendingIntent;
			static create(arg1: android.content.Context): android.app.TaskStackBuilder;
		}
		export class LoaderManager extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.app.LoaderManager>;
			static enableDebugLogging(arg1: boolean): void;
			initLoader<D>(arg1: number, arg2: android.os.Bundle, arg3: android.app.LoaderManager.ILoaderCallbacks<D>): android.content.Loader<D>;
			restartLoader<D>(arg1: number, arg2: android.os.Bundle, arg3: android.app.LoaderManager.ILoaderCallbacks<D>): android.content.Loader<D>;
			destroyLoader(arg1: number): void;
			getLoader<D>(arg1: number): android.content.Loader<D>;
			dump(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dump(arg1: string, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
		}
		export module LoaderManager {
			export class LoaderCallbacks<D> implements android.app.LoaderManager.ILoaderCallbacks<D> {
				constructor(implementation: android.app.LoaderManager.ILoaderCallbacks<D>);
				onCreateLoader(arg1: number, arg2: android.os.Bundle): android.content.Loader<D>;
				onLoadFinished(arg1: android.content.Loader<D>, arg2: D): void;
				onLoaderReset(arg1: android.content.Loader<D>): void;
			}
			export interface ILoaderCallbacks<D> {
				onCreateLoader(arg1: number, arg2: android.os.Bundle): android.content.Loader<D>;
				onLoadFinished(arg1: android.content.Loader<D>, arg2: D): void;
				onLoaderReset(arg1: android.content.Loader<D>): void;
			}
		}
		export class ListFragment extends android.app.Fragment {
			constructor();
			static class: java.lang.Class<android.app.ListFragment>;
			ListAdapter: android.widget.IListAdapter;
			getSelectedItemPosition(): number;
			setSelection(arg1: number): void;
			getSelectedItemId(): any;
			getListView(): android.widget.ListView;
			onCreateView(arg1: android.view.LayoutInflater, arg2: android.view.ViewGroup, arg3: android.os.Bundle): android.view.View;
			onViewCreated(arg1: android.view.View, arg2: android.os.Bundle): void;
			onDestroyView(): void;
			getListAdapter(): android.widget.IListAdapter;
			onListItemClick(arg1: android.widget.ListView, arg2: android.view.View, arg3: number, arg4: native.Long): void;
			setListAdapter(arg1: android.widget.IListAdapter): void;
			setListShownNoAnimation(arg1: boolean): void;
			setListShown(arg1: boolean): void;
			setEmptyText(arg1: java.lang.ICharSequence): void;
			setEmptyText(arg1: string): void;
		}
		export class ProgressDialog extends android.app.AlertDialog {
			constructor(arg1: android.content.Context, arg2: number);
			constructor(arg1: android.content.Context);
			static STYLE_SPINNER: number;
			static STYLE_HORIZONTAL: number;
			static class: java.lang.Class<android.app.ProgressDialog>;
			Max: number;
			SecondaryProgress: number;
			Progress: number;
			setMessage(arg1: java.lang.ICharSequence): void;
			setMessage(arg1: string): void;
			onStart(): void;
			setMax(arg1: number): void;
			setProgress(arg1: number): void;
			getMax(): number;
			setIndeterminateDrawable(arg1: android.graphics.drawable.Drawable): void;
			incrementSecondaryProgressBy(arg1: number): void;
			setProgressDrawable(arg1: android.graphics.drawable.Drawable): void;
			setSecondaryProgress(arg1: number): void;
			getSecondaryProgress(): number;
			incrementProgressBy(arg1: number): void;
			setProgressNumberFormat(arg1: java.lang.String): void;
			setProgressNumberFormat(arg1: string): void;
			setProgressPercentFormat(arg1: java.text.NumberFormat): void;
			setProgressStyle(arg1: number): void;
			static show(arg1: android.content.Context, arg2: java.lang.ICharSequence, arg3: java.lang.ICharSequence, arg4: boolean, arg5: boolean, arg6: android.content.DialogInterface.IOnCancelListener): android.app.ProgressDialog;
			static show(arg1: android.content.Context, arg2: string, arg3: string, arg4: boolean, arg5: boolean, arg6: android.content.DialogInterface.IOnCancelListener): android.app.ProgressDialog;
			static show(arg1: android.content.Context, arg2: java.lang.ICharSequence, arg3: java.lang.ICharSequence): android.app.ProgressDialog;
			static show(arg1: android.content.Context, arg2: string, arg3: string): android.app.ProgressDialog;
			static show(arg1: android.content.Context, arg2: java.lang.ICharSequence, arg3: java.lang.ICharSequence, arg4: boolean): android.app.ProgressDialog;
			static show(arg1: android.content.Context, arg2: string, arg3: string, arg4: boolean): android.app.ProgressDialog;
			static show(arg1: android.content.Context, arg2: java.lang.ICharSequence, arg3: java.lang.ICharSequence, arg4: boolean, arg5: boolean): android.app.ProgressDialog;
			static show(arg1: android.content.Context, arg2: string, arg3: string, arg4: boolean, arg5: boolean): android.app.ProgressDialog;
			getProgress(): number;
			isIndeterminate(): boolean;
			setIndeterminate(arg1: boolean): void;
			show(): void;
		}
		export class Dialog extends java.lang.Object implements android.content.IDialogInterface, android.view.Window.ICallback, android.view.KeyEvent.ICallback, android.view.View.IOnCreateContextMenuListener {
			constructor(arg1: android.content.Context, arg2: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.app.Dialog>;
			VolumeControlStream: number;
			OwnerActivity: android.app.Activity;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyShortcut(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
			onDetachedFromWindow(): void;
			onWindowFocusChanged(arg1: boolean): void;
			dispatchKeyShortcutEvent(arg1: android.view.KeyEvent): boolean;
			dispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
			setOnKeyListener(arg1: android.content.DialogInterface.IOnKeyListener): void;
			dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
			onCreateContextMenu(arg1: android.view.IContextMenu, arg2: android.view.View, arg3: android.view.ContextMenu.IContextMenuInfo): void;
			onKeyLongPress(arg1: number, arg2: android.view.KeyEvent): boolean;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			onSaveInstanceState(): android.os.Bundle;
			onAttachedToWindow(): void;
			dispatchGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			onRestoreInstanceState(arg1: android.os.Bundle): void;
			findViewById(arg1: number): android.view.View;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			setOnDismissListener(arg1: android.content.DialogInterface.IOnDismissListener): void;
			onContentChanged(): void;
			dismiss(): void;
			setContentView(arg1: android.view.View): void;
			setContentView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			setContentView(arg1: number): void;
			getLayoutInflater(): android.view.LayoutInflater;
			setFeatureDrawableUri(arg1: number, arg2: android.net.Uri): void;
			setFeatureDrawable(arg1: number, arg2: android.graphics.drawable.Drawable): void;
			addContentView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			getCurrentFocus(): android.view.View;
			onContextItemSelected(arg1: android.view.IMenuItem): boolean;
			onCreateOptionsMenu(arg1: android.view.IMenu): boolean;
			onPrepareOptionsMenu(arg1: android.view.IMenu): boolean;
			onOptionsItemSelected(arg1: android.view.IMenuItem): boolean;
			onOptionsMenuClosed(arg1: android.view.IMenu): void;
			unregisterForContextMenu(arg1: android.view.View): void;
			registerForContextMenu(arg1: android.view.View): void;
			onMenuOpened(arg1: number, arg2: android.view.IMenu): boolean;
			onPanelClosed(arg1: number, arg2: android.view.IMenu): void;
			takeKeyEvents(arg1: boolean): void;
			getVolumeControlStream(): number;
			setVolumeControlStream(arg1: number): void;
			setFeatureDrawableResource(arg1: number, arg2: number): void;
			setFeatureDrawableAlpha(arg1: number, arg2: number): void;
			onWindowAttributesChanged(arg1: android.view.WindowManager.LayoutParams): void;
			onWindowStartingActionMode(arg1: android.view.ActionMode.ICallback): android.view.ActionMode;
			onPreparePanel(arg1: number, arg2: android.view.View, arg3: android.view.IMenu): boolean;
			onMenuItemSelected(arg1: number, arg2: android.view.IMenuItem): boolean;
			onSearchRequested(): boolean;
			onActionModeStarted(arg1: android.view.ActionMode): void;
			onCreatePanelView(arg1: number): android.view.View;
			onActionModeFinished(arg1: android.view.ActionMode): void;
			onCreatePanelMenu(arg1: number, arg2: android.view.IMenu): boolean;
			onBackPressed(): void;
			getActionBar(): android.app.ActionBar;
			requestWindowFeature(arg1: number): boolean;
			openOptionsMenu(): void;
			openContextMenu(arg1: android.view.View): void;
			closeOptionsMenu(): void;
			invalidateOptionsMenu(): void;
			onContextMenuClosed(arg1: android.view.IMenu): void;
			setOnCancelListener(arg1: android.content.DialogInterface.IOnCancelListener): void;
			setCanceledOnTouchOutside(arg1: boolean): void;
			setCancelable(arg1: boolean): void;
			setOwnerActivity(arg1: android.app.Activity): void;
			getOwnerActivity(): android.app.Activity;
			setDismissMessage(arg1: android.os.Message): void;
			setOnShowListener(arg1: android.content.DialogInterface.IOnShowListener): void;
			setCancelMessage(arg1: android.os.Message): void;
			getContext(): android.content.Context;
			setTitle(arg1: java.lang.ICharSequence): void;
			setTitle(arg1: string): void;
			setTitle(arg1: number): void;
			hide(): void;
			isShowing(): boolean;
			show(): void;
			getWindow(): android.view.Window;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			cancel(): void;
		}
		export class SearchableInfo extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.app.SearchableInfo>;
			static class: java.lang.Class<android.app.SearchableInfo>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getImeOptions(): number;
			getInputType(): number;
			queryAfterZeroResults(): boolean;
			autoUrlDetect(): boolean;
			shouldRewriteQueryFromData(): boolean;
			shouldRewriteQueryFromText(): boolean;
			getSettingsDescriptionId(): number;
			getSuggestIntentAction(): string;
			getVoiceLanguageModeId(): number;
			shouldIncludeInGlobalSearch(): boolean;
			getVoiceSearchLaunchWebSearch(): boolean;
			getSuggestThreshold(): number;
			getVoiceSearchEnabled(): boolean;
			getVoicePromptTextId(): number;
			getVoiceLanguageId(): number;
			getVoiceMaxResults(): number;
			getSuggestPackage(): string;
			getSuggestAuthority(): string;
			getSearchActivity(): android.content.ComponentName;
			getSuggestPath(): string;
			getSuggestSelection(): string;
			getSuggestIntentData(): string;
			getHintId(): number;
			getVoiceSearchLaunchRecognizer(): boolean;
		}
		export class Notification extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: number, arg2: java.lang.ICharSequence, arg3: native.Long);
			constructor(arg1: number, arg2: string, arg3: native.Long);
			constructor(arg1: android.os.Parcel);
			static DEFAULT_ALL: number;
			static DEFAULT_SOUND: number;
			static DEFAULT_VIBRATE: number;
			static DEFAULT_LIGHTS: number;
			when: native.Long;
			icon: number;
			iconLevel: number;
			number: number;
			contentIntent: android.app.PendingIntent;
			deleteIntent: android.app.PendingIntent;
			fullScreenIntent: android.app.PendingIntent;
			tickerText: java.lang.ICharSequence;
			tickerView: android.widget.RemoteViews;
			contentView: android.widget.RemoteViews;
			bigContentView: android.widget.RemoteViews;
			largeIcon: android.graphics.Bitmap;
			sound: android.net.Uri;
			static STREAM_DEFAULT: number;
			audioStreamType: number;
			vibrate: native.Array<native.Long>;
			ledARGB: number;
			ledOnMS: number;
			ledOffMS: number;
			defaults: number;
			static FLAG_SHOW_LIGHTS: number;
			static FLAG_ONGOING_EVENT: number;
			static FLAG_INSISTENT: number;
			static FLAG_ONLY_ALERT_ONCE: number;
			static FLAG_AUTO_CANCEL: number;
			static FLAG_NO_CLEAR: number;
			static FLAG_FOREGROUND_SERVICE: number;
			static FLAG_HIGH_PRIORITY: number;
			flags: number;
			static PRIORITY_DEFAULT: number;
			static PRIORITY_LOW: number;
			static PRIORITY_MIN: number;
			static PRIORITY_HIGH: number;
			static PRIORITY_MAX: number;
			priority: number;
			static CREATOR: android.os.Parcelable.ICreator<android.app.Notification>;
			static class: java.lang.Class<android.app.Notification>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			setLatestEventInfo(arg1: android.content.Context, arg2: java.lang.ICharSequence, arg3: java.lang.ICharSequence, arg4: android.app.PendingIntent): void;
			setLatestEventInfo(arg1: android.content.Context, arg2: string, arg3: string, arg4: android.app.PendingIntent): void;
			clone(): android.app.Notification;
			toString(): string;
		}
		export module Notification {
			export class BigTextStyle extends android.app.Notification.Style {
				constructor();
				constructor(arg1: android.app.Notification.Builder);
				static class: java.lang.Class<android.app.Notification.BigTextStyle>;
				setBigContentTitle(arg1: java.lang.ICharSequence): android.app.Notification.BigTextStyle;
				setBigContentTitle(arg1: string): android.app.Notification.BigTextStyle;
				setSummaryText(arg1: java.lang.ICharSequence): android.app.Notification.BigTextStyle;
				setSummaryText(arg1: string): android.app.Notification.BigTextStyle;
				bigText(arg1: java.lang.ICharSequence): android.app.Notification.BigTextStyle;
				bigText(arg1: string): android.app.Notification.BigTextStyle;
				build(): android.app.Notification;
			}
			export class Style extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.app.Notification.Style>;
				setBuilder(arg1: android.app.Notification.Builder): void;
				build(): android.app.Notification;
			}
			export class Builder extends java.lang.Object {
				constructor(arg1: android.content.Context);
				static class: java.lang.Class<android.app.Notification.Builder>;
				setProgress(arg1: number, arg2: number, arg3: boolean): android.app.Notification.Builder;
				setContent(arg1: android.widget.RemoteViews): android.app.Notification.Builder;
				addAction(arg1: number, arg2: java.lang.ICharSequence, arg3: android.app.PendingIntent): android.app.Notification.Builder;
				addAction(arg1: number, arg2: string, arg3: android.app.PendingIntent): android.app.Notification.Builder;
				setWhen(arg1: native.Long): android.app.Notification.Builder;
				setShowWhen(arg1: boolean): android.app.Notification.Builder;
				setLights(arg1: number, arg2: number, arg3: number): android.app.Notification.Builder;
				setOngoing(arg1: boolean): android.app.Notification.Builder;
				setTicker(arg1: java.lang.ICharSequence, arg2: android.widget.RemoteViews): android.app.Notification.Builder;
				setTicker(arg1: string, arg2: android.widget.RemoteViews): android.app.Notification.Builder;
				setTicker(arg1: java.lang.ICharSequence): android.app.Notification.Builder;
				setTicker(arg1: string): android.app.Notification.Builder;
				setLargeIcon(arg1: android.graphics.Bitmap): android.app.Notification.Builder;
				setAutoCancel(arg1: boolean): android.app.Notification.Builder;
				setSound(arg1: android.net.Uri, arg2: number): android.app.Notification.Builder;
				setSound(arg1: android.net.Uri): android.app.Notification.Builder;
				setSmallIcon(arg1: number, arg2: number): android.app.Notification.Builder;
				setSmallIcon(arg1: number): android.app.Notification.Builder;
				setVibrate(arg1: native.Array<native.Long>): android.app.Notification.Builder;
				setNumber(arg1: number): android.app.Notification.Builder;
				setSubText(arg1: java.lang.ICharSequence): android.app.Notification.Builder;
				setSubText(arg1: string): android.app.Notification.Builder;
				setDefaults(arg1: number): android.app.Notification.Builder;
				setContentTitle(arg1: java.lang.ICharSequence): android.app.Notification.Builder;
				setContentTitle(arg1: string): android.app.Notification.Builder;
				setUsesChronometer(arg1: boolean): android.app.Notification.Builder;
				setContentText(arg1: java.lang.ICharSequence): android.app.Notification.Builder;
				setContentText(arg1: string): android.app.Notification.Builder;
				setContentInfo(arg1: java.lang.ICharSequence): android.app.Notification.Builder;
				setContentInfo(arg1: string): android.app.Notification.Builder;
				setDeleteIntent(arg1: android.app.PendingIntent): android.app.Notification.Builder;
				setContentIntent(arg1: android.app.PendingIntent): android.app.Notification.Builder;
				setFullScreenIntent(arg1: android.app.PendingIntent, arg2: boolean): android.app.Notification.Builder;
				setOnlyAlertOnce(arg1: boolean): android.app.Notification.Builder;
				getNotification(): android.app.Notification;
				setPriority(arg1: number): android.app.Notification.Builder;
				setStyle(arg1: android.app.Notification.Style): android.app.Notification.Builder;
				build(): android.app.Notification;
			}
			export class InboxStyle extends android.app.Notification.Style {
				constructor();
				constructor(arg1: android.app.Notification.Builder);
				static class: java.lang.Class<android.app.Notification.InboxStyle>;
				setBigContentTitle(arg1: java.lang.ICharSequence): android.app.Notification.InboxStyle;
				setBigContentTitle(arg1: string): android.app.Notification.InboxStyle;
				setSummaryText(arg1: java.lang.ICharSequence): android.app.Notification.InboxStyle;
				setSummaryText(arg1: string): android.app.Notification.InboxStyle;
				addLine(arg1: java.lang.ICharSequence): android.app.Notification.InboxStyle;
				addLine(arg1: string): android.app.Notification.InboxStyle;
				build(): android.app.Notification;
			}
			export class BigPictureStyle extends android.app.Notification.Style {
				constructor();
				constructor(arg1: android.app.Notification.Builder);
				static class: java.lang.Class<android.app.Notification.BigPictureStyle>;
				setBigContentTitle(arg1: java.lang.ICharSequence): android.app.Notification.BigPictureStyle;
				setBigContentTitle(arg1: string): android.app.Notification.BigPictureStyle;
				setSummaryText(arg1: java.lang.ICharSequence): android.app.Notification.BigPictureStyle;
				setSummaryText(arg1: string): android.app.Notification.BigPictureStyle;
				bigLargeIcon(arg1: android.graphics.Bitmap): android.app.Notification.BigPictureStyle;
				bigPicture(arg1: android.graphics.Bitmap): android.app.Notification.BigPictureStyle;
				build(): android.app.Notification;
			}
		}
		export class KeyguardManager extends java.lang.Object {
			static class: java.lang.Class<android.app.KeyguardManager>;
			inKeyguardRestrictedInputMode(): boolean;
			newKeyguardLock(arg1: java.lang.String): android.app.KeyguardManager.KeyguardLock;
			newKeyguardLock(arg1: string): android.app.KeyguardManager.KeyguardLock;
			exitKeyguardSecurely(arg1: android.app.KeyguardManager.IOnKeyguardExitResult): void;
			isKeyguardLocked(): boolean;
			isKeyguardSecure(): boolean;
		}
		export module KeyguardManager {
			export class KeyguardLock extends java.lang.Object {
				static class: java.lang.Class<android.app.KeyguardManager.KeyguardLock>;
				disableKeyguard(): void;
				reenableKeyguard(): void;
			}
			export class OnKeyguardExitResult implements android.app.KeyguardManager.IOnKeyguardExitResult {
				constructor(implementation: android.app.KeyguardManager.IOnKeyguardExitResult);
				onKeyguardExitResult(arg1: boolean): void;
			}
			export interface IOnKeyguardExitResult {
				onKeyguardExitResult(arg1: boolean): void;
			}
		}
		export class WallpaperInfo extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.content.Context, arg2: android.content.pm.ResolveInfo);
			static CREATOR: android.os.Parcelable.ICreator<android.app.WallpaperInfo>;
			static class: java.lang.Class<android.app.WallpaperInfo>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			loadDescription(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
			describeContents(): number;
			getServiceInfo(): android.content.pm.ServiceInfo;
			loadLabel(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
			loadIcon(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
			getSettingsActivity(): string;
			getServiceName(): string;
			loadAuthor(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
			loadThumbnail(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
			toString(): string;
			getPackageName(): string;
			getComponent(): android.content.ComponentName;
			dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
			dump(arg1: android.util.IPrinter, arg2: string): void;
		}
		export class MediaRouteActionProvider extends android.view.ActionProvider {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.app.MediaRouteActionProvider>;
			onCreateActionView(arg1: android.view.IMenuItem): android.view.View;
			onCreateActionView(): android.view.View;
			onPerformDefaultAction(): boolean;
			overridesItemVisibility(): boolean;
			setRouteTypes(arg1: number): void;
			setExtendedSettingsClickListener(arg1: android.view.View.IOnClickListener): void;
			isVisible(): boolean;
		}
		export class ApplicationErrorReport extends java.lang.Object implements android.os.IParcelable {
			constructor();
			static TYPE_NONE: number;
			static TYPE_CRASH: number;
			static TYPE_ANR: number;
			static TYPE_BATTERY: number;
			static TYPE_RUNNING_SERVICE: number;
			type: number;
			packageName: java.lang.String;
			installerPackageName: java.lang.String;
			processName: java.lang.String;
			time: native.Long;
			systemApp: boolean;
			crashInfo: android.app.ApplicationErrorReport.CrashInfo;
			anrInfo: android.app.ApplicationErrorReport.AnrInfo;
			batteryInfo: android.app.ApplicationErrorReport.BatteryInfo;
			runningServiceInfo: android.app.ApplicationErrorReport.RunningServiceInfo;
			static CREATOR: android.os.Parcelable.ICreator<android.app.ApplicationErrorReport>;
			static class: java.lang.Class<android.app.ApplicationErrorReport>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			readFromParcel(arg1: android.os.Parcel): void;
			static getErrorReportReceiver(arg1: android.content.Context, arg2: java.lang.String, arg3: number): android.content.ComponentName;
			static getErrorReportReceiver(arg1: android.content.Context, arg2: string, arg3: number): android.content.ComponentName;
			dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
			dump(arg1: android.util.IPrinter, arg2: string): void;
		}
		export module ApplicationErrorReport {
			export class RunningServiceInfo extends java.lang.Object {
				constructor();
				constructor(arg1: android.os.Parcel);
				durationMillis: native.Long;
				serviceDetails: java.lang.String;
				static class: java.lang.Class<android.app.ApplicationErrorReport.RunningServiceInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
			export class BatteryInfo extends java.lang.Object {
				constructor();
				constructor(arg1: android.os.Parcel);
				usagePercent: number;
				durationMicros: native.Long;
				usageDetails: java.lang.String;
				checkinDetails: java.lang.String;
				static class: java.lang.Class<android.app.ApplicationErrorReport.BatteryInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
			export class AnrInfo extends java.lang.Object {
				constructor();
				constructor(arg1: android.os.Parcel);
				activity: java.lang.String;
				cause: java.lang.String;
				info: java.lang.String;
				static class: java.lang.Class<android.app.ApplicationErrorReport.AnrInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
			export class CrashInfo extends java.lang.Object {
				constructor(arg1: android.os.Parcel);
				constructor(arg1: java.lang.Throwable);
				constructor();
				exceptionClassName: java.lang.String;
				exceptionMessage: java.lang.String;
				throwFileName: java.lang.String;
				throwClassName: java.lang.String;
				throwMethodName: java.lang.String;
				throwLineNumber: number;
				stackTrace: java.lang.String;
				static class: java.lang.Class<android.app.ApplicationErrorReport.CrashInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
		}
		export class Activity extends android.view.ContextThemeWrapper implements android.view.LayoutInflater.IFactory2, android.view.Window.ICallback, android.view.KeyEvent.ICallback, android.view.View.IOnCreateContextMenuListener, android.content.IComponentCallbacks2 {
			constructor();
			static RESULT_CANCELED: number;
			static RESULT_OK: number;
			static RESULT_FIRST_USER: number;
			static DEFAULT_KEYS_DISABLE: number;
			static DEFAULT_KEYS_DIALER: number;
			static DEFAULT_KEYS_SHORTCUT: number;
			static DEFAULT_KEYS_SEARCH_LOCAL: number;
			static DEFAULT_KEYS_SEARCH_GLOBAL: number;
			static class: java.lang.Class<android.app.Activity>;
			Intent: android.content.Intent;
			VolumeControlStream: number;
			TitleColor: number;
			RequestedOrientation: number;
			Title: java.lang.ICharSequence;
			setResult(arg1: number): void;
			setResult(arg1: number, arg2: android.content.Intent): void;
			startIntentSender(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: number, arg5: number, arg6: android.os.Bundle): void;
			startIntentSender(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: number, arg5: number): void;
			getSystemService(arg1: java.lang.String): any;
			getSystemService(arg1: string): any;
			startActivities(arg1: native.Array<android.content.Intent>, arg2: android.os.Bundle): void;
			startActivities(arg1: native.Array<android.content.Intent>): void;
			getApplication(): android.app.Application;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyShortcut(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
			onTrimMemory(arg1: number): void;
			onLowMemory(): void;
			startActivity(arg1: android.content.Intent): void;
			startActivity(arg1: android.content.Intent, arg2: android.os.Bundle): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
			onDetachedFromWindow(): void;
			onWindowFocusChanged(arg1: boolean): void;
			hasWindowFocus(): boolean;
			getPreferences(arg1: number): android.content.ISharedPreferences;
			dispatchKeyShortcutEvent(arg1: android.view.KeyEvent): boolean;
			dispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
			setProgress(arg1: number): void;
			setIntent(arg1: android.content.Intent): void;
			startActionMode(arg1: android.view.ActionMode.ICallback): android.view.ActionMode;
			dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
			setSecondaryProgress(arg1: number): void;
			onCreateContextMenu(arg1: android.view.IContextMenu, arg2: android.view.View, arg3: android.view.ContextMenu.IContextMenuInfo): void;
			onKeyLongPress(arg1: number, arg2: android.view.KeyEvent): boolean;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			onAttachedToWindow(): void;
			dispatchGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			findViewById(arg1: number): android.view.View;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			getMenuInflater(): android.view.MenuInflater;
			onContentChanged(): void;
			setContentView(arg1: android.view.View): void;
			setContentView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			setContentView(arg1: number): void;
			getRequestedOrientation(): number;
			getComponentName(): android.content.ComponentName;
			getIntent(): android.content.Intent;
			onCreateView(arg1: android.view.View, arg2: java.lang.String, arg3: android.content.Context, arg4: android.util.IAttributeSet): android.view.View;
			onCreateView(arg1: android.view.View, arg2: string, arg3: android.content.Context, arg4: android.util.IAttributeSet): android.view.View;
			onCreateView(arg1: java.lang.String, arg2: android.content.Context, arg3: android.util.IAttributeSet): android.view.View;
			onCreateView(arg1: string, arg2: android.content.Context, arg3: android.util.IAttributeSet): android.view.View;
			getLayoutInflater(): android.view.LayoutInflater;
			setFeatureDrawableUri(arg1: number, arg2: android.net.Uri): void;
			setFeatureDrawable(arg1: number, arg2: android.graphics.drawable.Drawable): void;
			getWindowManager(): android.view.IWindowManager;
			addContentView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			getCurrentFocus(): android.view.View;
			getLoaderManager(): android.app.LoaderManager;
			onContextItemSelected(arg1: android.view.IMenuItem): boolean;
			getFragmentManager(): android.app.FragmentManager;
			onCreateOptionsMenu(arg1: android.view.IMenu): boolean;
			onPrepareOptionsMenu(arg1: android.view.IMenu): boolean;
			onOptionsItemSelected(arg1: android.view.IMenuItem): boolean;
			onOptionsMenuClosed(arg1: android.view.IMenu): void;
			startActivityForResult(arg1: android.content.Intent, arg2: number): void;
			startActivityForResult(arg1: android.content.Intent, arg2: number, arg3: android.os.Bundle): void;
			unregisterForContextMenu(arg1: android.view.View): void;
			registerForContextMenu(arg1: android.view.View): void;
			onMenuOpened(arg1: number, arg2: android.view.IMenu): boolean;
			onPanelClosed(arg1: number, arg2: android.view.IMenu): void;
			takeKeyEvents(arg1: boolean): void;
			getVolumeControlStream(): number;
			setVolumeControlStream(arg1: number): void;
			setFeatureDrawableResource(arg1: number, arg2: number): void;
			setFeatureDrawableAlpha(arg1: number, arg2: number): void;
			onWindowAttributesChanged(arg1: android.view.WindowManager.LayoutParams): void;
			onWindowStartingActionMode(arg1: android.view.ActionMode.ICallback): android.view.ActionMode;
			onPreparePanel(arg1: number, arg2: android.view.View, arg3: android.view.IMenu): boolean;
			onMenuItemSelected(arg1: number, arg2: android.view.IMenuItem): boolean;
			onSearchRequested(): boolean;
			onActionModeStarted(arg1: android.view.ActionMode): void;
			onCreatePanelView(arg1: number): android.view.View;
			onActionModeFinished(arg1: android.view.ActionMode): void;
			onCreatePanelMenu(arg1: number, arg2: android.view.IMenu): boolean;
			getLastNonConfigurationInstance(): any;
			setProgressBarIndeterminateVisibility(arg1: boolean): void;
			onRetainNonConfigurationInstance(): any;
			finishActivityFromChild(arg1: android.app.Activity, arg2: number): void;
			setProgressBarIndeterminate(arg1: boolean): void;
			startActivityFromChild(arg1: android.app.Activity, arg2: android.content.Intent, arg3: number, arg4: android.os.Bundle): void;
			startActivityFromChild(arg1: android.app.Activity, arg2: android.content.Intent, arg3: number): void;
			startIntentSenderForResult(arg1: android.content.IntentSender, arg2: number, arg3: android.content.Intent, arg4: number, arg5: number, arg6: number): void;
			startIntentSenderForResult(arg1: android.content.IntentSender, arg2: number, arg3: android.content.Intent, arg4: number, arg5: number, arg6: number, arg7: android.os.Bundle): void;
			startActivityFromFragment(arg1: android.app.Fragment, arg2: android.content.Intent, arg3: number): void;
			startActivityFromFragment(arg1: android.app.Fragment, arg2: android.content.Intent, arg3: number, arg4: android.os.Bundle): void;
			getParentActivityIntent(): android.content.Intent;
			setProgressBarVisibility(arg1: boolean): void;
			isChangingConfigurations(): boolean;
			startNextMatchingActivity(arg1: android.content.Intent): boolean;
			startNextMatchingActivity(arg1: android.content.Intent, arg2: android.os.Bundle): boolean;
			overridePendingTransition(arg1: number, arg2: number): void;
			startIntentSenderFromChild(arg1: android.app.Activity, arg2: android.content.IntentSender, arg3: number, arg4: android.content.Intent, arg5: number, arg6: number, arg7: number, arg8: android.os.Bundle): void;
			startIntentSenderFromChild(arg1: android.app.Activity, arg2: android.content.IntentSender, arg3: number, arg4: android.content.Intent, arg5: number, arg6: number, arg7: number): void;
			setRequestedOrientation(arg1: number): void;
			getChangingConfigurations(): number;
			setFinishOnTouchOutside(arg1: boolean): void;
			onCreateNavigateUpTaskStack(arg1: android.app.TaskStackBuilder): void;
			onPrepareNavigateUpTaskStack(arg1: android.app.TaskStackBuilder): void;
			managedQuery(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String): android.database.ICursor;
			managedQuery(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string): android.database.ICursor;
			removeDialog(arg1: number): void;
			dismissDialog(arg1: number): void;
			startSearch(arg1: java.lang.String, arg2: boolean, arg3: android.os.Bundle, arg4: boolean): void;
			startSearch(arg1: string, arg2: boolean, arg3: android.os.Bundle, arg4: boolean): void;
			isChild(): boolean;
			onBackPressed(): void;
			getActionBar(): android.app.ActionBar;
			onNavigateUp(): boolean;
			showDialog(arg1: number, arg2: android.os.Bundle): boolean;
			showDialog(arg1: number): void;
			isFinishing(): boolean;
			runOnUiThread(arg1: java.lang.IRunnable): void;
			navigateUpTo(arg1: android.content.Intent): boolean;
			triggerSearch(arg1: java.lang.String, arg2: android.os.Bundle): void;
			triggerSearch(arg1: string, arg2: android.os.Bundle): void;
			recreate(): void;
			getTaskId(): number;
			isTaskRoot(): boolean;
			finishActivity(arg1: number): void;
			createPendingResult(arg1: number, arg2: android.content.Intent, arg3: number): android.app.PendingIntent;
			moveTaskToBack(arg1: boolean): boolean;
			onNavigateUpFromChild(arg1: android.app.Activity): boolean;
			getLocalClassName(): string;
			closeContextMenu(): void;
			onCreateDescription(): java.lang.ICharSequence;
			stopManagingCursor(arg1: android.database.ICursor): void;
			requestWindowFeature(arg1: number): boolean;
			onAttachFragment(arg1: android.app.Fragment): void;
			openOptionsMenu(): void;
			setDefaultKeyMode(arg1: number): void;
			openContextMenu(arg1: android.view.View): void;
			closeOptionsMenu(): void;
			startManagingCursor(arg1: android.database.ICursor): void;
			invalidateOptionsMenu(): void;
			onContextMenuClosed(arg1: android.view.IMenu): void;
			onUserInteraction(): void;
			startActivityIfNeeded(arg1: android.content.Intent, arg2: number): boolean;
			startActivityIfNeeded(arg1: android.content.Intent, arg2: number, arg3: android.os.Bundle): boolean;
			getCallingPackage(): string;
			getCallingActivity(): android.content.ComponentName;
			finishAffinity(): void;
			finishFromChild(arg1: android.app.Activity): void;
			onCreateThumbnail(arg1: android.graphics.Bitmap, arg2: android.graphics.Canvas): boolean;
			navigateUpToFromChild(arg1: android.app.Activity, arg2: android.content.Intent): boolean;
			shouldUpRecreateTask(arg1: android.content.Intent): boolean;
			getParent(): android.app.Activity;
			isDestroyed(): boolean;
			getTitle(): java.lang.ICharSequence;
			setTitle(arg1: java.lang.ICharSequence): void;
			setTitle(arg1: string): void;
			setTitle(arg1: number): void;
			setVisible(arg1: boolean): void;
			finish(): void;
			getWindow(): android.view.Window;
			dump(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dump(arg1: string, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			getTitleColor(): number;
			setTitleColor(arg1: number): void;
		}
		export class FragmentBreadCrumbs extends android.view.ViewGroup implements android.app.FragmentManager.IOnBackStackChangedListener {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.app.FragmentBreadCrumbs>;
			setActivity(arg1: android.app.Activity): void;
			setParentTitle(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence, arg3: android.view.View.IOnClickListener): void;
			setParentTitle(arg1: string, arg2: string, arg3: android.view.View.IOnClickListener): void;
			setOnBreadCrumbClickListener(arg1: android.app.FragmentBreadCrumbs.IOnBreadCrumbClickListener): void;
			onBackStackChanged(): void;
			setMaxVisible(arg1: number): void;
			setTitle(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence): void;
			setTitle(arg1: string, arg2: string): void;
		}
		export module FragmentBreadCrumbs {
			export class OnBreadCrumbClickListener implements android.app.FragmentBreadCrumbs.IOnBreadCrumbClickListener {
				constructor(implementation: android.app.FragmentBreadCrumbs.IOnBreadCrumbClickListener);
				onBreadCrumbClick(arg1: android.app.FragmentManager.IBackStackEntry, arg2: number): boolean;
			}
			export interface IOnBreadCrumbClickListener {
				onBreadCrumbClick(arg1: android.app.FragmentManager.IBackStackEntry, arg2: number): boolean;
			}
		}
		export class TimePickerDialog extends android.app.AlertDialog implements android.content.DialogInterface.IOnClickListener, android.widget.TimePicker.IOnTimeChangedListener {
			constructor(arg1: android.content.Context, arg2: number, arg3: android.app.TimePickerDialog.IOnTimeSetListener, arg4: number, arg5: number, arg6: boolean);
			constructor(arg1: android.content.Context, arg2: android.app.TimePickerDialog.IOnTimeSetListener, arg3: number, arg4: number, arg5: boolean);
			static class: java.lang.Class<android.app.TimePickerDialog>;
			onSaveInstanceState(): android.os.Bundle;
			onRestoreInstanceState(arg1: android.os.Bundle): void;
			onTimeChanged(arg1: android.widget.TimePicker, arg2: number, arg3: number): void;
			onClick(arg1: android.content.IDialogInterface, arg2: number): void;
			updateTime(arg1: number, arg2: number): void;
		}
		export module TimePickerDialog {
			export interface IOnTimeSetListener {
				onTimeSet(arg1: android.widget.TimePicker, arg2: number, arg3: number): void;
			}
			export class OnTimeSetListener implements android.app.TimePickerDialog.IOnTimeSetListener {
				constructor(implementation: android.app.TimePickerDialog.IOnTimeSetListener);
				onTimeSet(arg1: android.widget.TimePicker, arg2: number, arg3: number): void;
			}
		}
		export class NativeActivity extends android.app.Activity implements android.view.SurfaceHolder.ICallback2, android.view.InputQueue.ICallback, android.view.ViewTreeObserver.IOnGlobalLayoutListener {
			constructor();
			static META_DATA_LIB_NAME: java.lang.String;
			static META_DATA_FUNC_NAME: java.lang.String;
			static class: java.lang.Class<android.app.NativeActivity>;
			onLowMemory(): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
			onWindowFocusChanged(arg1: boolean): void;
			onGlobalLayout(): void;
			surfaceCreated(arg1: android.view.ISurfaceHolder): void;
			surfaceChanged(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number, arg4: number): void;
			surfaceDestroyed(arg1: android.view.ISurfaceHolder): void;
			onInputQueueDestroyed(arg1: android.view.InputQueue): void;
			onInputQueueCreated(arg1: android.view.InputQueue): void;
			surfaceRedrawNeeded(arg1: android.view.ISurfaceHolder): void;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
		}
		export module admin {
			export class DevicePolicyManager extends java.lang.Object {
				static ACTION_ADD_DEVICE_ADMIN: java.lang.String;
				static EXTRA_DEVICE_ADMIN: java.lang.String;
				static EXTRA_ADD_EXPLANATION: java.lang.String;
				static ACTION_SET_NEW_PASSWORD: java.lang.String;
				static PASSWORD_QUALITY_UNSPECIFIED: number;
				static PASSWORD_QUALITY_BIOMETRIC_WEAK: number;
				static PASSWORD_QUALITY_SOMETHING: number;
				static PASSWORD_QUALITY_NUMERIC: number;
				static PASSWORD_QUALITY_ALPHABETIC: number;
				static PASSWORD_QUALITY_ALPHANUMERIC: number;
				static PASSWORD_QUALITY_COMPLEX: number;
				static RESET_PASSWORD_REQUIRE_ENTRY: number;
				static WIPE_EXTERNAL_STORAGE: number;
				static ENCRYPTION_STATUS_UNSUPPORTED: number;
				static ENCRYPTION_STATUS_INACTIVE: number;
				static ENCRYPTION_STATUS_ACTIVATING: number;
				static ENCRYPTION_STATUS_ACTIVE: number;
				static ACTION_START_ENCRYPTION: java.lang.String;
				static KEYGUARD_DISABLE_FEATURES_NONE: number;
				static KEYGUARD_DISABLE_WIDGETS_ALL: number;
				static KEYGUARD_DISABLE_SECURE_CAMERA: number;
				static KEYGUARD_DISABLE_FEATURES_ALL: number;
				static class: java.lang.Class<android.app.admin.DevicePolicyManager>;
				setPasswordMinimumLength(arg1: android.content.ComponentName, arg2: number): void;
				getPasswordMinimumLength(arg1: android.content.ComponentName): number;
				getPasswordHistoryLength(arg1: android.content.ComponentName): number;
				getPasswordMinimumLowerCase(arg1: android.content.ComponentName): number;
				getPasswordMinimumNonLetter(arg1: android.content.ComponentName): number;
				isActivePasswordSufficient(): boolean;
				getPasswordExpirationTimeout(arg1: android.content.ComponentName): any;
				setPasswordMinimumLowerCase(arg1: android.content.ComponentName, arg2: number): void;
				getPasswordMaximumLength(arg1: number): number;
				setPasswordMinimumUpperCase(arg1: android.content.ComponentName, arg2: number): void;
				setPasswordMinimumLetters(arg1: android.content.ComponentName, arg2: number): void;
				getPasswordMinimumUpperCase(arg1: android.content.ComponentName): number;
				setPasswordMinimumNonLetter(arg1: android.content.ComponentName, arg2: number): void;
				setPasswordHistoryLength(arg1: android.content.ComponentName, arg2: number): void;
				getPasswordMinimumNumeric(arg1: android.content.ComponentName): number;
				getStorageEncryptionStatus(): number;
				getPasswordMinimumLetters(arg1: android.content.ComponentName): number;
				setKeyguardDisabledFeatures(arg1: android.content.ComponentName, arg2: number): void;
				getKeyguardDisabledFeatures(arg1: android.content.ComponentName): number;
				setPasswordExpirationTimeout(arg1: android.content.ComponentName, arg2: native.Long): void;
				setPasswordMinimumNumeric(arg1: android.content.ComponentName, arg2: number): void;
				setPasswordMinimumSymbols(arg1: android.content.ComponentName, arg2: number): void;
				getPasswordMinimumSymbols(arg1: android.content.ComponentName): number;
				setMaximumTimeToLock(arg1: android.content.ComponentName, arg2: native.Long): void;
				setStorageEncryption(arg1: android.content.ComponentName, arg2: boolean): number;
				hasGrantedPolicy(arg1: android.content.ComponentName, arg2: number): boolean;
				getPasswordQuality(arg1: android.content.ComponentName): number;
				removeActiveAdmin(arg1: android.content.ComponentName): void;
				getActiveAdmins(): java.util.IList<android.content.ComponentName>;
				getPasswordExpiration(arg1: android.content.ComponentName): any;
				getCameraDisabled(arg1: android.content.ComponentName): boolean;
				setCameraDisabled(arg1: android.content.ComponentName, arg2: boolean): void;
				getStorageEncryption(arg1: android.content.ComponentName): boolean;
				getMaximumTimeToLock(arg1: android.content.ComponentName): any;
				setPasswordQuality(arg1: android.content.ComponentName, arg2: number): void;
				isAdminActive(arg1: android.content.ComponentName): boolean;
				resetPassword(arg1: java.lang.String, arg2: number): boolean;
				resetPassword(arg1: string, arg2: number): boolean;
				lockNow(): void;
				wipeData(arg1: number): void;
				getMaximumFailedPasswordsForWipe(arg1: android.content.ComponentName): number;
				getCurrentFailedPasswordAttempts(): number;
				setMaximumFailedPasswordsForWipe(arg1: android.content.ComponentName, arg2: number): void;
			}
			export class DeviceAdminInfo extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: android.content.Context, arg2: android.content.pm.ResolveInfo);
				static USES_POLICY_LIMIT_PASSWORD: number;
				static USES_POLICY_WATCH_LOGIN: number;
				static USES_POLICY_RESET_PASSWORD: number;
				static USES_POLICY_FORCE_LOCK: number;
				static USES_POLICY_WIPE_DATA: number;
				static USES_POLICY_EXPIRE_PASSWORD: number;
				static USES_ENCRYPTED_STORAGE: number;
				static USES_POLICY_DISABLE_CAMERA: number;
				static USES_POLICY_DISABLE_KEYGUARD_FEATURES: number;
				static CREATOR: android.os.Parcelable.ICreator<android.app.admin.DeviceAdminInfo>;
				static class: java.lang.Class<android.app.admin.DeviceAdminInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				loadDescription(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				describeContents(): number;
				getActivityInfo(): android.content.pm.ActivityInfo;
				loadLabel(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				loadIcon(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
				getReceiverName(): string;
				getTagForPolicy(arg1: number): string;
				usesPolicy(arg1: number): boolean;
				toString(): string;
				getPackageName(): string;
				getComponent(): android.content.ComponentName;
				isVisible(): boolean;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
			export class DeviceAdminReceiver extends android.content.BroadcastReceiver {
				constructor();
				static ACTION_DEVICE_ADMIN_ENABLED: java.lang.String;
				static ACTION_DEVICE_ADMIN_DISABLE_REQUESTED: java.lang.String;
				static EXTRA_DISABLE_WARNING: java.lang.String;
				static ACTION_DEVICE_ADMIN_DISABLED: java.lang.String;
				static ACTION_PASSWORD_CHANGED: java.lang.String;
				static ACTION_PASSWORD_FAILED: java.lang.String;
				static ACTION_PASSWORD_SUCCEEDED: java.lang.String;
				static ACTION_PASSWORD_EXPIRING: java.lang.String;
				static DEVICE_ADMIN_META_DATA: java.lang.String;
				static class: java.lang.Class<android.app.admin.DeviceAdminReceiver>;
				onReceive(arg1: android.content.Context, arg2: android.content.Intent): void;
				onEnabled(arg1: android.content.Context, arg2: android.content.Intent): void;
				onDisabled(arg1: android.content.Context, arg2: android.content.Intent): void;
				onPasswordExpiring(arg1: android.content.Context, arg2: android.content.Intent): void;
				onPasswordSucceeded(arg1: android.content.Context, arg2: android.content.Intent): void;
				onPasswordChanged(arg1: android.content.Context, arg2: android.content.Intent): void;
				onDisableRequested(arg1: android.content.Context, arg2: android.content.Intent): java.lang.ICharSequence;
				onPasswordFailed(arg1: android.content.Context, arg2: android.content.Intent): void;
				getWho(arg1: android.content.Context): android.content.ComponentName;
				getManager(arg1: android.content.Context): android.app.admin.DevicePolicyManager;
			}
		}
		export class Presentation extends android.app.Dialog {
			constructor(arg1: android.content.Context, arg2: android.view.Display);
			constructor(arg1: android.content.Context, arg2: android.view.Display, arg3: number);
			static class: java.lang.Class<android.app.Presentation>;
			getDisplay(): android.view.Display;
			onDisplayRemoved(): void;
			onDisplayChanged(): void;
			getResources(): android.content.res.Resources;
			show(): void;
		}
		export class UiModeManager extends java.lang.Object {
			static ACTION_ENTER_CAR_MODE: java.lang.String;
			static ACTION_EXIT_CAR_MODE: java.lang.String;
			static ACTION_ENTER_DESK_MODE: java.lang.String;
			static ACTION_EXIT_DESK_MODE: java.lang.String;
			static MODE_NIGHT_AUTO: number;
			static MODE_NIGHT_NO: number;
			static MODE_NIGHT_YES: number;
			static ENABLE_CAR_MODE_GO_CAR_HOME: number;
			static DISABLE_CAR_MODE_GO_HOME: number;
			static class: java.lang.Class<android.app.UiModeManager>;
			NightMode: number;
			disableCarMode(arg1: number): void;
			getCurrentModeType(): number;
			setNightMode(arg1: number): void;
			getNightMode(): number;
			enableCarMode(arg1: number): void;
		}
		export class Application extends android.content.ContextWrapper implements android.content.IComponentCallbacks2 {
			constructor();
			static class: java.lang.Class<android.app.Application>;
			onTrimMemory(arg1: number): void;
			onLowMemory(): void;
			onCreate(): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
			registerComponentCallbacks(arg1: android.content.IComponentCallbacks): void;
			unregisterComponentCallbacks(arg1: android.content.IComponentCallbacks): void;
			onTerminate(): void;
			registerActivityLifecycleCallbacks(arg1: android.app.Application.IActivityLifecycleCallbacks): void;
			unregisterActivityLifecycleCallbacks(arg1: android.app.Application.IActivityLifecycleCallbacks): void;
		}
		export module Application {
			export class ActivityLifecycleCallbacks implements android.app.Application.IActivityLifecycleCallbacks {
				constructor(implementation: android.app.Application.IActivityLifecycleCallbacks);
				onActivityCreated(arg1: android.app.Activity, arg2: android.os.Bundle): void;
				onActivitySaveInstanceState(arg1: android.app.Activity, arg2: android.os.Bundle): void;
				onActivityStarted(arg1: android.app.Activity): void;
				onActivityResumed(arg1: android.app.Activity): void;
				onActivityStopped(arg1: android.app.Activity): void;
				onActivityDestroyed(arg1: android.app.Activity): void;
				onActivityPaused(arg1: android.app.Activity): void;
			}
			export interface IActivityLifecycleCallbacks {
				onActivityCreated(arg1: android.app.Activity, arg2: android.os.Bundle): void;
				onActivitySaveInstanceState(arg1: android.app.Activity, arg2: android.os.Bundle): void;
				onActivityStarted(arg1: android.app.Activity): void;
				onActivityResumed(arg1: android.app.Activity): void;
				onActivityStopped(arg1: android.app.Activity): void;
				onActivityDestroyed(arg1: android.app.Activity): void;
				onActivityPaused(arg1: android.app.Activity): void;
			}
		}
		export class TabActivity extends android.app.ActivityGroup {
			constructor();
			static class: java.lang.Class<android.app.TabActivity>;
			onContentChanged(): void;
			getTabWidget(): android.widget.TabWidget;
			getTabHost(): android.widget.TabHost;
			setDefaultTab(arg1: java.lang.String): void;
			setDefaultTab(arg1: string): void;
			setDefaultTab(arg1: number): void;
		}
		export class Fragment extends java.lang.Object implements android.content.IComponentCallbacks2, android.view.View.IOnCreateContextMenuListener {
			constructor();
			static class: java.lang.Class<android.app.Fragment>;
			Arguments: android.os.Bundle;
			RetainInstance: boolean;
			UserVisibleHint: boolean;
			onDestroy(): void;
			onTrimMemory(arg1: number): void;
			onLowMemory(): void;
			onStart(): void;
			onCreate(arg1: android.os.Bundle): void;
			startActivity(arg1: android.content.Intent, arg2: android.os.Bundle): void;
			startActivity(arg1: android.content.Intent): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
			onCreateContextMenu(arg1: android.view.IContextMenu, arg2: android.view.View, arg3: android.view.ContextMenu.IContextMenuInfo): void;
			onSaveInstanceState(arg1: android.os.Bundle): void;
			getActivity(): android.app.Activity;
			onResume(): void;
			onPause(): void;
			onCreateView(arg1: android.view.LayoutInflater, arg2: android.view.ViewGroup, arg3: android.os.Bundle): android.view.View;
			isInLayout(): boolean;
			getArguments(): android.os.Bundle;
			setArguments(arg1: android.os.Bundle): void;
			onViewCreated(arg1: android.view.View, arg2: android.os.Bundle): void;
			onDestroyView(): void;
			isRemoving(): boolean;
			isAdded(): boolean;
			isDetached(): boolean;
			onStop(): void;
			isResumed(): boolean;
			onDetach(): void;
			onAttach(arg1: android.app.Activity): void;
			onInflate(arg1: android.app.Activity, arg2: android.util.IAttributeSet, arg3: android.os.Bundle): void;
			onInflate(arg1: android.util.IAttributeSet, arg2: android.os.Bundle): void;
			setUserVisibleHint(arg1: boolean): void;
			getTargetFragment(): android.app.Fragment;
			getUserVisibleHint(): boolean;
			getLoaderManager(): android.app.LoaderManager;
			onCreateAnimator(arg1: number, arg2: boolean, arg3: number): android.animation.Animator;
			onContextItemSelected(arg1: android.view.IMenuItem): boolean;
			onViewStateRestored(arg1: android.os.Bundle): void;
			getFragmentManager(): android.app.FragmentManager;
			getTargetRequestCode(): number;
			onCreateOptionsMenu(arg1: android.view.IMenu, arg2: android.view.MenuInflater): void;
			getParentFragment(): android.app.Fragment;
			setInitialSavedState(arg1: android.app.Fragment.SavedState): void;
			setTargetFragment(arg1: android.app.Fragment, arg2: number): void;
			onActivityResult(arg1: number, arg2: number, arg3: android.content.Intent): void;
			onActivityCreated(arg1: android.os.Bundle): void;
			onHiddenChanged(arg1: boolean): void;
			onPrepareOptionsMenu(arg1: android.view.IMenu): void;
			onOptionsItemSelected(arg1: android.view.IMenuItem): boolean;
			getRetainInstance(): boolean;
			onDestroyOptionsMenu(): void;
			onOptionsMenuClosed(arg1: android.view.IMenu): void;
			setHasOptionsMenu(arg1: boolean): void;
			setRetainInstance(arg1: boolean): void;
			setMenuVisibility(arg1: boolean): void;
			getChildFragmentManager(): android.app.FragmentManager;
			startActivityForResult(arg1: android.content.Intent, arg2: number, arg3: android.os.Bundle): void;
			startActivityForResult(arg1: android.content.Intent, arg2: number): void;
			unregisterForContextMenu(arg1: android.view.View): void;
			registerForContextMenu(arg1: android.view.View): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getResources(): android.content.res.Resources;
			getId(): number;
			isHidden(): boolean;
			getString(arg1: number): string;
			getString(arg1: number, arg2: native.Array<any>): string;
			isVisible(): boolean;
			getText(arg1: number): java.lang.ICharSequence;
			static instantiate(arg1: android.content.Context, arg2: java.lang.String): android.app.Fragment;
			static instantiate(arg1: android.content.Context, arg2: string): android.app.Fragment;
			static instantiate(arg1: android.content.Context, arg2: java.lang.String, arg3: android.os.Bundle): android.app.Fragment;
			static instantiate(arg1: android.content.Context, arg2: string, arg3: android.os.Bundle): android.app.Fragment;
			dump(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dump(arg1: string, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			getView(): android.view.View;
			getTag(): string;
		}
		export module Fragment {
			export class SavedState extends java.lang.Object implements android.os.IParcelable {
				static CREATOR: android.os.Parcelable.IClassLoaderCreator<android.app.Fragment.SavedState>;
				static class: java.lang.Class<android.app.Fragment.SavedState>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
			}
			export class InstantiationException extends android.util.AndroidRuntimeException {
				constructor(arg1: java.lang.String, arg2: java.lang.Exception);
				constructor(arg1: string, arg2: java.lang.Exception);
				static class: java.lang.Class<android.app.Fragment.InstantiationException>;
			}
		}
	}
	export module os {
		export class PatternMatcher extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			constructor(arg1: android.os.Parcel);
			static PATTERN_LITERAL: number;
			static PATTERN_PREFIX: number;
			static PATTERN_SIMPLE_GLOB: number;
			static CREATOR: android.os.Parcelable.ICreator<android.os.PatternMatcher>;
			static class: java.lang.Class<android.os.PatternMatcher>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			toString(): string;
			getType(): number;
			getPath(): string;
			match(arg1: java.lang.String): boolean;
			match(arg1: string): boolean;
		}
		export class TokenWatcher extends java.lang.Object {
			constructor(arg1: android.os.Handler, arg2: java.lang.String);
			constructor(arg1: android.os.Handler, arg2: string);
			static class: java.lang.Class<android.os.TokenWatcher>;
			acquired(): void;
			isAcquired(): boolean;
			cleanup(arg1: android.os.IIBinder, arg2: boolean): void;
			release(arg1: android.os.IIBinder): void;
			acquire(arg1: android.os.IIBinder, arg2: java.lang.String): void;
			acquire(arg1: android.os.IIBinder, arg2: string): void;
			dump(): void;
			dump(arg1: java.io.PrintWriter): void;
			released(): void;
		}
		export class CountDownTimer extends java.lang.Object {
			constructor(arg1: native.Long, arg2: native.Long);
			static class: java.lang.Class<android.os.CountDownTimer>;
			onTick(arg1: native.Long): void;
			onFinish(): void;
			start(): android.os.CountDownTimer;
			cancel(): void;
		}
		export class Build extends java.lang.Object {
			constructor();
			static UNKNOWN: java.lang.String;
			static ID: java.lang.String;
			static DISPLAY: java.lang.String;
			static PRODUCT: java.lang.String;
			static DEVICE: java.lang.String;
			static BOARD: java.lang.String;
			static CPU_ABI: java.lang.String;
			static CPU_ABI2: java.lang.String;
			static MANUFACTURER: java.lang.String;
			static BRAND: java.lang.String;
			static MODEL: java.lang.String;
			static BOOTLOADER: java.lang.String;
			static RADIO: java.lang.String;
			static HARDWARE: java.lang.String;
			static SERIAL: java.lang.String;
			static TYPE: java.lang.String;
			static TAGS: java.lang.String;
			static FINGERPRINT: java.lang.String;
			static TIME: native.Long;
			static USER: java.lang.String;
			static HOST: java.lang.String;
			static class: java.lang.Class<android.os.Build>;
			static getRadioVersion(): string;
		}
		export module Build {
			export class VERSION extends java.lang.Object {
				constructor();
				static INCREMENTAL: java.lang.String;
				static RELEASE: java.lang.String;
				static SDK: java.lang.String;
				static SDK_INT: number;
				static CODENAME: java.lang.String;
				static class: java.lang.Class<android.os.Build.VERSION>;
			}
			export class VERSION_CODES extends java.lang.Object {
				constructor();
				static CUR_DEVELOPMENT: number;
				static BASE: number;
				static BASE_1_1: number;
				static CUPCAKE: number;
				static DONUT: number;
				static ECLAIR: number;
				static ECLAIR_0_1: number;
				static ECLAIR_MR1: number;
				static FROYO: number;
				static GINGERBREAD: number;
				static GINGERBREAD_MR1: number;
				static HONEYCOMB: number;
				static HONEYCOMB_MR1: number;
				static HONEYCOMB_MR2: number;
				static ICE_CREAM_SANDWICH: number;
				static ICE_CREAM_SANDWICH_MR1: number;
				static JELLY_BEAN: number;
				static JELLY_BEAN_MR1: number;
				static class: java.lang.Class<android.os.Build.VERSION_CODES>;
			}
		}
		export interface IIInterface {
			asBinder(): android.os.IIBinder;
		}
		export class Process extends java.lang.Object {
			constructor();
			static SYSTEM_UID: number;
			static PHONE_UID: number;
			static FIRST_APPLICATION_UID: number;
			static LAST_APPLICATION_UID: number;
			static BLUETOOTH_GID: number;
			static THREAD_PRIORITY_DEFAULT: number;
			static THREAD_PRIORITY_LOWEST: number;
			static THREAD_PRIORITY_BACKGROUND: number;
			static THREAD_PRIORITY_FOREGROUND: number;
			static THREAD_PRIORITY_DISPLAY: number;
			static THREAD_PRIORITY_URGENT_DISPLAY: number;
			static THREAD_PRIORITY_AUDIO: number;
			static THREAD_PRIORITY_URGENT_AUDIO: number;
			static THREAD_PRIORITY_MORE_FAVORABLE: number;
			static THREAD_PRIORITY_LESS_FAVORABLE: number;
			static SIGNAL_QUIT: number;
			static SIGNAL_KILL: number;
			static SIGNAL_USR1: number;
			static class: java.lang.Class<android.os.Process>;
			static myPid(): number;
			static getGidForName(arg1: java.lang.String): number;
			static getGidForName(arg1: string): number;
			static sendSignal(arg1: number, arg2: number): void;
			static getUidForName(arg1: java.lang.String): number;
			static getUidForName(arg1: string): number;
			static killProcess(arg1: number): void;
			static myUserHandle(): android.os.UserHandle;
			static getThreadPriority(arg1: number): number;
			static getElapsedCpuTime(): any;
			static supportsProcesses(): boolean;
			static setThreadPriority(arg1: number, arg2: number): void;
			static setThreadPriority(arg1: number): void;
			static myUid(): number;
			static myTid(): number;
		}
		export class WorkSource extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: android.os.WorkSource);
			static CREATOR: android.os.Parcelable.ICreator<android.os.WorkSource>;
			static class: java.lang.Class<android.os.WorkSource>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			diff(arg1: android.os.WorkSource): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			add(arg1: android.os.WorkSource): boolean;
			remove(arg1: android.os.WorkSource): boolean;
			clear(): void;
			set(arg1: android.os.WorkSource): void;
		}
		export class SystemClock extends java.lang.Object {
			static class: java.lang.Class<android.os.SystemClock>;
			static uptimeMillis(): any;
			static setCurrentTimeMillis(arg1: native.Long): boolean;
			static elapsedRealtimeNanos(): any;
			static elapsedRealtime(): any;
			static currentThreadTimeMillis(): any;
			static sleep(arg1: native.Long): void;
		}
		export class ResultReceiver extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.os.Handler);
			static CREATOR: android.os.Parcelable.ICreator<android.os.ResultReceiver>;
			static class: java.lang.Class<android.os.ResultReceiver>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			send(arg1: number, arg2: android.os.Bundle): void;
		}
		export class BatteryManager extends java.lang.Object {
			constructor();
			static EXTRA_STATUS: java.lang.String;
			static EXTRA_HEALTH: java.lang.String;
			static EXTRA_PRESENT: java.lang.String;
			static EXTRA_LEVEL: java.lang.String;
			static EXTRA_SCALE: java.lang.String;
			static EXTRA_ICON_SMALL: java.lang.String;
			static EXTRA_PLUGGED: java.lang.String;
			static EXTRA_VOLTAGE: java.lang.String;
			static EXTRA_TEMPERATURE: java.lang.String;
			static EXTRA_TECHNOLOGY: java.lang.String;
			static BATTERY_STATUS_UNKNOWN: number;
			static BATTERY_STATUS_CHARGING: number;
			static BATTERY_STATUS_DISCHARGING: number;
			static BATTERY_STATUS_NOT_CHARGING: number;
			static BATTERY_STATUS_FULL: number;
			static BATTERY_HEALTH_UNKNOWN: number;
			static BATTERY_HEALTH_GOOD: number;
			static BATTERY_HEALTH_OVERHEAT: number;
			static BATTERY_HEALTH_DEAD: number;
			static BATTERY_HEALTH_OVER_VOLTAGE: number;
			static BATTERY_HEALTH_UNSPECIFIED_FAILURE: number;
			static BATTERY_HEALTH_COLD: number;
			static BATTERY_PLUGGED_AC: number;
			static BATTERY_PLUGGED_USB: number;
			static BATTERY_PLUGGED_WIRELESS: number;
			static class: java.lang.Class<android.os.BatteryManager>;
		}
		export class RemoteException extends android.util.AndroidException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.os.RemoteException>;
		}
		export class Vibrator extends java.lang.Object {
			static class: java.lang.Class<android.os.Vibrator>;
			vibrate(arg1: native.Long): void;
			vibrate(arg1: native.Array<native.Long>, arg2: number): void;
			hasVibrator(): boolean;
			cancel(): void;
		}
		export class Parcelable implements android.os.IParcelable {
			constructor(implementation: android.os.IParcelable);
			static PARCELABLE_WRITE_RETURN_VALUE: number;
			static CONTENTS_FILE_DESCRIPTOR: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
		}
		export module Parcelable {
			export interface IClassLoaderCreator<T> extends android.os.Parcelable.ICreator<T> {
				createFromParcel(arg1: android.os.Parcel, arg2: java.lang.ClassLoader): T;
				createFromParcel(arg1: android.os.Parcel): T;
				newArray(arg1: number): native.Array<T>;
			}
			export class Creator<T> implements android.os.Parcelable.ICreator<T> {
				constructor(implementation: android.os.Parcelable.ICreator<T>);
				createFromParcel(arg1: android.os.Parcel): T;
				newArray(arg1: number): native.Array<T>;
			}
			export class ClassLoaderCreator<T> implements android.os.Parcelable.ICreator<T>, android.os.Parcelable.IClassLoaderCreator<T> {
				constructor(implementation: android.os.Parcelable.IClassLoaderCreator<T>);
				createFromParcel(arg1: android.os.Parcel, arg2: java.lang.ClassLoader): T;
				createFromParcel(arg1: android.os.Parcel): T;
				newArray(arg1: number): native.Array<T>;
			}
			export interface ICreator<T> {
				createFromParcel(arg1: android.os.Parcel): T;
				newArray(arg1: number): native.Array<T>;
			}
		}
		export class ParcelFileDescriptor extends java.lang.Object implements android.os.IParcelable, java.io.ICloseable {
			constructor(arg1: android.os.ParcelFileDescriptor);
			static MODE_WORLD_READABLE: number;
			static MODE_WORLD_WRITEABLE: number;
			static MODE_READ_ONLY: number;
			static MODE_WRITE_ONLY: number;
			static MODE_READ_WRITE: number;
			static MODE_CREATE: number;
			static MODE_TRUNCATE: number;
			static MODE_APPEND: number;
			static CREATOR: android.os.Parcelable.ICreator<android.os.ParcelFileDescriptor>;
			static class: java.lang.Class<android.os.ParcelFileDescriptor>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getFd(): number;
			static fromSocket(arg1: java.net.Socket): android.os.ParcelFileDescriptor;
			detachFd(): number;
			getStatSize(): any;
			static adoptFd(arg1: number): android.os.ParcelFileDescriptor;
			static fromFd(arg1: number): android.os.ParcelFileDescriptor;
			static createPipe(): native.Array<android.os.ParcelFileDescriptor>;
			static fromDatagramSocket(arg1: java.net.DatagramSocket): android.os.ParcelFileDescriptor;
			toString(): string;
			close(): void;
			static open(arg1: java.io.File, arg2: number): android.os.ParcelFileDescriptor;
			getFileDescriptor(): java.io.FileDescriptor;
			dup(): android.os.ParcelFileDescriptor;
			static dup(arg1: java.io.FileDescriptor): android.os.ParcelFileDescriptor;
		}
		export module ParcelFileDescriptor {
			export class AutoCloseInputStream extends java.io.FileInputStream {
				constructor(arg1: android.os.ParcelFileDescriptor);
				static class: java.lang.Class<android.os.ParcelFileDescriptor.AutoCloseInputStream>;
				close(): void;
			}
			export class AutoCloseOutputStream extends java.io.FileOutputStream {
				constructor(arg1: android.os.ParcelFileDescriptor);
				static class: java.lang.Class<android.os.ParcelFileDescriptor.AutoCloseOutputStream>;
				close(): void;
			}
		}
		export class StatFs extends java.lang.Object {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.os.StatFs>;
			getBlockCount(): number;
			restat(arg1: java.lang.String): void;
			restat(arg1: string): void;
			getBlockSize(): number;
			getFreeBlocks(): number;
			getAvailableBlocks(): number;
		}
		export class Bundle extends java.lang.Object implements android.os.IParcelable, java.lang.ICloneable {
			constructor();
			constructor(arg1: number);
			constructor(arg1: java.lang.ClassLoader);
			constructor(arg1: android.os.Bundle);
			static EMPTY: android.os.Bundle;
			static CREATOR: android.os.Parcelable.ICreator<android.os.Bundle>;
			static class: java.lang.Class<android.os.Bundle>;
			ClassLoader: java.lang.ClassLoader;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			getByteArray(arg1: java.lang.String): native.Array<native.Byte>;
			getByteArray(arg1: string): native.Array<native.Byte>;
			putByteArray(arg1: java.lang.String, arg2: native.Array<native.Byte>): void;
			putByteArray(arg1: string, arg2: native.Array<native.Byte>): void;
			describeContents(): number;
			getIntArray(arg1: java.lang.String): native.Array<number>;
			getIntArray(arg1: string): native.Array<number>;
			readFromParcel(arg1: android.os.Parcel): void;
			putShortArray(arg1: java.lang.String, arg2: native.Array<native.Short>): void;
			putShortArray(arg1: string, arg2: native.Array<native.Short>): void;
			putString(arg1: java.lang.String, arg2: java.lang.String): void;
			putString(arg1: string, arg2: string): void;
			putCharArray(arg1: java.lang.String, arg2: native.Array<string>): void;
			putCharArray(arg1: string, arg2: native.Array<string>): void;
			putParcelable(arg1: java.lang.String, arg2: android.os.IParcelable): void;
			putParcelable(arg1: string, arg2: android.os.IParcelable): void;
			putIntArray(arg1: java.lang.String, arg2: native.Array<number>): void;
			putIntArray(arg1: string, arg2: native.Array<number>): void;
			getParcelable<T extends android.os.IParcelable>(arg1: java.lang.String): T;
			getParcelable<T extends android.os.IParcelable>(arg1: string): T;
			putBundle(arg1: java.lang.String, arg2: android.os.Bundle): void;
			putBundle(arg1: string, arg2: android.os.Bundle): void;
			getCharArray(arg1: java.lang.String): native.Array<string>;
			getCharArray(arg1: string): native.Array<string>;
			putFloatArray(arg1: java.lang.String, arg2: native.Array<native.Float>): void;
			putFloatArray(arg1: string, arg2: native.Array<native.Float>): void;
			putLongArray(arg1: java.lang.String, arg2: native.Array<native.Long>): void;
			putLongArray(arg1: string, arg2: native.Array<native.Long>): void;
			getLongArray(arg1: java.lang.String): native.Array<native.Long>;
			getLongArray(arg1: string): native.Array<native.Long>;
			getFloatArray(arg1: java.lang.String): native.Array<native.Float>;
			getFloatArray(arg1: string): native.Array<native.Float>;
			hasFileDescriptors(): boolean;
			putParcelableArray(arg1: java.lang.String, arg2: native.Array<android.os.IParcelable>): void;
			putParcelableArray(arg1: string, arg2: native.Array<android.os.IParcelable>): void;
			putCharSequence(arg1: java.lang.String, arg2: java.lang.ICharSequence): void;
			putCharSequence(arg1: string, arg2: string): void;
			putIntegerArrayList(arg1: java.lang.String, arg2: java.util.ArrayList<java.lang.Integer>): void;
			putIntegerArrayList(arg1: string, arg2: java.util.ArrayList<java.lang.Integer>): void;
			putStringArrayList(arg1: java.lang.String, arg2: java.util.ArrayList<string>): void;
			putStringArrayList(arg1: string, arg2: java.util.ArrayList<string>): void;
			putSerializable(arg1: java.lang.String, arg2: java.io.ISerializable): void;
			putSerializable(arg1: string, arg2: string): void;
			putBooleanArray(arg1: java.lang.String, arg2: native.Array<boolean>): void;
			putBooleanArray(arg1: string, arg2: native.Array<boolean>): void;
			putDoubleArray(arg1: java.lang.String, arg2: native.Array<native.Double>): void;
			putDoubleArray(arg1: string, arg2: native.Array<native.Double>): void;
			setClassLoader(arg1: java.lang.ClassLoader): void;
			putStringArray(arg1: java.lang.String, arg2: native.Array<java.lang.String>): void;
			putStringArray(arg1: string, arg2: native.Array<java.lang.String>): void;
			getCharSequence(arg1: java.lang.String, arg2: java.lang.ICharSequence): java.lang.ICharSequence;
			getCharSequence(arg1: string, arg2: string): java.lang.ICharSequence;
			getCharSequence(arg1: java.lang.String): java.lang.ICharSequence;
			getCharSequence(arg1: string): java.lang.ICharSequence;
			getSerializable(arg1: java.lang.String): java.io.ISerializable;
			getSerializable(arg1: string): java.io.ISerializable;
			getStringArrayList(arg1: java.lang.String): java.util.ArrayList<string>;
			getStringArrayList(arg1: string): java.util.ArrayList<string>;
			getIntegerArrayList(arg1: java.lang.String): java.util.ArrayList<java.lang.Integer>;
			getIntegerArrayList(arg1: string): java.util.ArrayList<java.lang.Integer>;
			getDoubleArray(arg1: java.lang.String): native.Array<native.Double>;
			getDoubleArray(arg1: string): native.Array<native.Double>;
			getCharSequenceArray(arg1: java.lang.String): native.Array<java.lang.ICharSequence>;
			getCharSequenceArray(arg1: string): native.Array<java.lang.ICharSequence>;
			getParcelableArray(arg1: java.lang.String): native.Array<android.os.IParcelable>;
			getParcelableArray(arg1: string): native.Array<android.os.IParcelable>;
			putCharSequenceArray(arg1: java.lang.String, arg2: native.Array<java.lang.ICharSequence>): void;
			putCharSequenceArray(arg1: string, arg2: native.Array<java.lang.ICharSequence>): void;
			getBooleanArray(arg1: java.lang.String): native.Array<boolean>;
			getBooleanArray(arg1: string): native.Array<boolean>;
			getParcelableArrayList<T extends android.os.IParcelable>(arg1: java.lang.String): java.util.ArrayList<T>;
			getParcelableArrayList<T extends android.os.IParcelable>(arg1: string): java.util.ArrayList<T>;
			getSparseParcelableArray<T extends android.os.IParcelable>(arg1: java.lang.String): android.util.SparseArray<T>;
			getSparseParcelableArray<T extends android.os.IParcelable>(arg1: string): android.util.SparseArray<T>;
			getCharSequenceArrayList(arg1: java.lang.String): java.util.ArrayList<java.lang.ICharSequence>;
			getCharSequenceArrayList(arg1: string): java.util.ArrayList<java.lang.ICharSequence>;
			putSparseParcelableArray(arg1: java.lang.String, arg2: android.util.SparseArray<any>): void;
			putSparseParcelableArray(arg1: string, arg2: android.util.SparseArray<any>): void;
			putCharSequenceArrayList(arg1: java.lang.String, arg2: java.util.ArrayList<java.lang.ICharSequence>): void;
			putCharSequenceArrayList(arg1: string, arg2: java.util.ArrayList<java.lang.ICharSequence>): void;
			putParcelableArrayList(arg1: java.lang.String, arg2: java.util.ArrayList<any>): void;
			putParcelableArrayList(arg1: string, arg2: java.util.ArrayList<any>): void;
			clone(): any;
			toString(): string;
			get(arg1: java.lang.String): any;
			get(arg1: string): any;
			isEmpty(): boolean;
			size(): number;
			getClassLoader(): java.lang.ClassLoader;
			putAll(arg1: android.os.Bundle): void;
			remove(arg1: java.lang.String): void;
			remove(arg1: string): void;
			clear(): void;
			keySet(): java.util.ISet<string>;
			containsKey(arg1: java.lang.String): boolean;
			containsKey(arg1: string): boolean;
			getBoolean(arg1: java.lang.String): boolean;
			getBoolean(arg1: string): boolean;
			getBoolean(arg1: java.lang.String, arg2: boolean): boolean;
			getBoolean(arg1: string, arg2: boolean): boolean;
			getByte(arg1: java.lang.String): number;
			getByte(arg1: string): number;
			getByte(arg1: java.lang.String, arg2: native.Byte): java.lang.Byte;
			getByte(arg1: string, arg2: native.Byte): java.lang.Byte;
			getChar(arg1: java.lang.String): string;
			getChar(arg1: string): string;
			getChar(arg1: java.lang.String, arg2: string): string;
			getChar(arg1: string, arg2: string): string;
			getDouble(arg1: java.lang.String): any;
			getDouble(arg1: string): any;
			getDouble(arg1: java.lang.String, arg2: native.Double): any;
			getDouble(arg1: string, arg2: number): any;
			getFloat(arg1: java.lang.String, arg2: native.Float): number;
			getFloat(arg1: string, arg2: native.Float): number;
			getFloat(arg1: java.lang.String): number;
			getFloat(arg1: string): number;
			getInt(arg1: java.lang.String, arg2: number): number;
			getInt(arg1: string, arg2: number): number;
			getInt(arg1: java.lang.String): number;
			getInt(arg1: string): number;
			getLong(arg1: java.lang.String, arg2: native.Long): any;
			getLong(arg1: string, arg2: native.Long): any;
			getLong(arg1: java.lang.String): any;
			getLong(arg1: string): any;
			getShort(arg1: java.lang.String, arg2: native.Short): number;
			getShort(arg1: string, arg2: native.Short): number;
			getShort(arg1: java.lang.String): number;
			getShort(arg1: string): number;
			getBundle(arg1: java.lang.String): android.os.Bundle;
			getBundle(arg1: string): android.os.Bundle;
			putBoolean(arg1: java.lang.String, arg2: boolean): void;
			putBoolean(arg1: string, arg2: boolean): void;
			putByte(arg1: java.lang.String, arg2: native.Byte): void;
			putByte(arg1: string, arg2: native.Byte): void;
			putChar(arg1: java.lang.String, arg2: string): void;
			putChar(arg1: string, arg2: string): void;
			putDouble(arg1: java.lang.String, arg2: native.Double): void;
			putDouble(arg1: string, arg2: number): void;
			putFloat(arg1: java.lang.String, arg2: native.Float): void;
			putFloat(arg1: string, arg2: native.Float): void;
			putInt(arg1: java.lang.String, arg2: number): void;
			putInt(arg1: string, arg2: number): void;
			putLong(arg1: java.lang.String, arg2: native.Long): void;
			putLong(arg1: string, arg2: native.Long): void;
			putShort(arg1: java.lang.String, arg2: native.Short): void;
			putShort(arg1: string, arg2: native.Short): void;
			getString(arg1: java.lang.String, arg2: java.lang.String): string;
			getString(arg1: string, arg2: string): string;
			getString(arg1: java.lang.String): string;
			getString(arg1: string): string;
			getStringArray(arg1: java.lang.String): native.Array<java.lang.String>;
			getStringArray(arg1: string): native.Array<java.lang.String>;
			getShortArray(arg1: java.lang.String): native.Array<native.Short>;
			getShortArray(arg1: string): native.Array<native.Short>;
		}
		export class TransactionTooLargeException extends android.os.RemoteException {
			constructor();
			static class: java.lang.Class<android.os.TransactionTooLargeException>;
		}
		export class AsyncTask<Params, Progress, Result> extends java.lang.Object {
			constructor();
			static THREAD_POOL_EXECUTOR: java.util.concurrent.IExecutor;
			static SERIAL_EXECUTOR: java.util.concurrent.IExecutor;
			static class: java.lang.Class<android.os.AsyncTask<any, any, any>>;
			isCancelled(): boolean;
			executeOnExecutor(arg1: java.util.concurrent.IExecutor, arg2: native.Array<Params>): android.os.AsyncTask<Params, Progress, Result>;
			get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): Result;
			get(): Result;
			static execute(arg1: java.lang.IRunnable): void;
			execute(arg1: native.Array<Params>): android.os.AsyncTask<Params, Progress, Result>;
			cancel(arg1: boolean): boolean;
			getStatus(): android.os.AsyncTask.Status;
		}
		export module AsyncTask {
			export enum Status {
				FINISHED,
				PENDING,
				RUNNING
			}
			export module Status {
				export function valueOf(arg1: java.lang.String): android.os.AsyncTask.Status;
				export function valueOf(arg1: string): android.os.AsyncTask.Status;
				export function values(): native.Array<android.os.AsyncTask.Status>;
			}
		}
		export class RemoteCallbackList<E extends android.os.IIInterface> extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.os.RemoteCallbackList<any>>;
			kill(): void;
			finishBroadcast(): void;
			getBroadcastCookie(arg1: number): any;
			onCallbackDied(arg1: E): void;
			onCallbackDied(arg1: E, arg2: any): void;
			getBroadcastItem(arg1: number): E;
			beginBroadcast(): number;
			getRegisteredCallbackCount(): number;
			register(arg1: E): boolean;
			register(arg1: E, arg2: any): boolean;
			unregister(arg1: E): boolean;
		}
		export class Binder extends java.lang.Object implements android.os.IIBinder {
			constructor();
			static class: java.lang.Class<android.os.Binder>;
			pingBinder(): boolean;
			isBinderAlive(): boolean;
			dumpAsync(arg1: java.io.FileDescriptor, arg2: native.Array<java.lang.String>): void;
			transact(arg1: number, arg2: android.os.Parcel, arg3: android.os.Parcel, arg4: number): boolean;
			unlinkToDeath(arg1: android.os.IBinder.IDeathRecipient, arg2: number): boolean;
			linkToDeath(arg1: android.os.IBinder.IDeathRecipient, arg2: number): void;
			static getCallingPid(): number;
			static getCallingUid(): number;
			queryLocalInterface(arg1: java.lang.String): android.os.IIInterface;
			queryLocalInterface(arg1: string): android.os.IIInterface;
			static joinThreadPool(): void;
			static clearCallingIdentity(): any;
			static flushPendingCommands(): void;
			attachInterface(arg1: android.os.IIInterface, arg2: java.lang.String): void;
			attachInterface(arg1: android.os.IIInterface, arg2: string): void;
			static getCallingUserHandle(): android.os.UserHandle;
			getInterfaceDescriptor(): string;
			static restoreCallingIdentity(arg1: native.Long): void;
			dump(arg1: java.io.FileDescriptor, arg2: native.Array<java.lang.String>): void;
		}
		export class Messenger extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.os.Handler);
			constructor(arg1: android.os.IIBinder);
			static CREATOR: android.os.Parcelable.ICreator<android.os.Messenger>;
			static class: java.lang.Class<android.os.Messenger>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getBinder(): android.os.IIBinder;
			static writeMessengerOrNullToParcel(arg1: android.os.Messenger, arg2: android.os.Parcel): void;
			static readMessengerOrNullFromParcel(arg1: android.os.Parcel): android.os.Messenger;
			hashCode(): number;
			equals(arg1: any): boolean;
			send(arg1: android.os.Message): void;
		}
		export class Environment extends java.lang.Object {
			constructor();
			static DIRECTORY_MUSIC: java.lang.String;
			static DIRECTORY_PODCASTS: java.lang.String;
			static DIRECTORY_RINGTONES: java.lang.String;
			static DIRECTORY_ALARMS: java.lang.String;
			static DIRECTORY_NOTIFICATIONS: java.lang.String;
			static DIRECTORY_PICTURES: java.lang.String;
			static DIRECTORY_MOVIES: java.lang.String;
			static DIRECTORY_DOWNLOADS: java.lang.String;
			static DIRECTORY_DCIM: java.lang.String;
			static MEDIA_REMOVED: java.lang.String;
			static MEDIA_UNMOUNTED: java.lang.String;
			static MEDIA_CHECKING: java.lang.String;
			static MEDIA_NOFS: java.lang.String;
			static MEDIA_MOUNTED: java.lang.String;
			static MEDIA_MOUNTED_READ_ONLY: java.lang.String;
			static MEDIA_SHARED: java.lang.String;
			static MEDIA_BAD_REMOVAL: java.lang.String;
			static MEDIA_UNMOUNTABLE: java.lang.String;
			static class: java.lang.Class<android.os.Environment>;
			static getExternalStoragePublicDirectory(arg1: java.lang.String): java.io.File;
			static getExternalStoragePublicDirectory(arg1: string): java.io.File;
			static getDataDirectory(): java.io.File;
			static getRootDirectory(): java.io.File;
			static getDownloadCacheDirectory(): java.io.File;
			static getExternalStorageDirectory(): java.io.File;
			static isExternalStorageEmulated(): boolean;
			static isExternalStorageRemovable(): boolean;
			static getExternalStorageState(): string;
		}
		export class IInterface implements android.os.IIInterface {
			constructor(implementation: android.os.IIInterface);
			asBinder(): android.os.IIBinder;
		}
		export class HandlerThread extends java.lang.Thread {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			static class: java.lang.Class<android.os.HandlerThread>;
			getThreadId(): number;
			getLooper(): android.os.Looper;
			run(): void;
			quit(): boolean;
		}
		export class UserHandle extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.os.Parcel);
			static CREATOR: android.os.Parcelable.ICreator<android.os.UserHandle>;
			static class: java.lang.Class<android.os.UserHandle>;
			static writeToParcel(arg1: android.os.UserHandle, arg2: android.os.Parcel): void;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			static readFromParcel(arg1: android.os.Parcel): android.os.UserHandle;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class StrictMode extends java.lang.Object {
			static class: java.lang.Class<android.os.StrictMode>;
			static setVmPolicy(arg1: android.os.StrictMode.VmPolicy): void;
			static getVmPolicy(): android.os.StrictMode.VmPolicy;
			static noteSlowCall(arg1: java.lang.String): void;
			static noteSlowCall(arg1: string): void;
			static allowThreadDiskReads(): android.os.StrictMode.ThreadPolicy;
			static allowThreadDiskWrites(): android.os.StrictMode.ThreadPolicy;
			static getThreadPolicy(): android.os.StrictMode.ThreadPolicy;
			static enableDefaults(): void;
			static setThreadPolicy(arg1: android.os.StrictMode.ThreadPolicy): void;
		}
		export module StrictMode {
			export class VmPolicy extends java.lang.Object {
				static LAX: android.os.StrictMode.VmPolicy;
				static class: java.lang.Class<android.os.StrictMode.VmPolicy>;
				toString(): string;
			}
			export module VmPolicy {
				export class Builder extends java.lang.Object {
					constructor();
					constructor(arg1: android.os.StrictMode.VmPolicy);
					static class: java.lang.Class<android.os.StrictMode.VmPolicy.Builder>;
					detectLeakedRegistrationObjects(): android.os.StrictMode.VmPolicy.Builder;
					penaltyDeath(): android.os.StrictMode.VmPolicy.Builder;
					penaltyLog(): android.os.StrictMode.VmPolicy.Builder;
					detectAll(): android.os.StrictMode.VmPolicy.Builder;
					setClassInstanceLimit(arg1: java.lang.Class<any>, arg2: number): android.os.StrictMode.VmPolicy.Builder;
					detectActivityLeaks(): android.os.StrictMode.VmPolicy.Builder;
					penaltyDropBox(): android.os.StrictMode.VmPolicy.Builder;
					detectLeakedClosableObjects(): android.os.StrictMode.VmPolicy.Builder;
					detectLeakedSqlLiteObjects(): android.os.StrictMode.VmPolicy.Builder;
					build(): android.os.StrictMode.VmPolicy;
				}
			}
			export class ThreadPolicy extends java.lang.Object {
				static LAX: android.os.StrictMode.ThreadPolicy;
				static class: java.lang.Class<android.os.StrictMode.ThreadPolicy>;
				toString(): string;
			}
			export module ThreadPolicy {
				export class Builder extends java.lang.Object {
					constructor();
					constructor(arg1: android.os.StrictMode.ThreadPolicy);
					static class: java.lang.Class<android.os.StrictMode.ThreadPolicy.Builder>;
					penaltyDeath(): android.os.StrictMode.ThreadPolicy.Builder;
					penaltyLog(): android.os.StrictMode.ThreadPolicy.Builder;
					detectAll(): android.os.StrictMode.ThreadPolicy.Builder;
					detectNetwork(): android.os.StrictMode.ThreadPolicy.Builder;
					penaltyDialog(): android.os.StrictMode.ThreadPolicy.Builder;
					permitNetwork(): android.os.StrictMode.ThreadPolicy.Builder;
					permitAll(): android.os.StrictMode.ThreadPolicy.Builder;
					penaltyDropBox(): android.os.StrictMode.ThreadPolicy.Builder;
					detectDiskReads(): android.os.StrictMode.ThreadPolicy.Builder;
					permitDiskReads(): android.os.StrictMode.ThreadPolicy.Builder;
					detectCustomSlowCalls(): android.os.StrictMode.ThreadPolicy.Builder;
					detectDiskWrites(): android.os.StrictMode.ThreadPolicy.Builder;
					permitCustomSlowCalls(): android.os.StrictMode.ThreadPolicy.Builder;
					penaltyDeathOnNetwork(): android.os.StrictMode.ThreadPolicy.Builder;
					penaltyFlashScreen(): android.os.StrictMode.ThreadPolicy.Builder;
					permitDiskWrites(): android.os.StrictMode.ThreadPolicy.Builder;
					build(): android.os.StrictMode.ThreadPolicy;
				}
			}
		}
		export class Looper extends java.lang.Object {
			static class: java.lang.Class<android.os.Looper>;
			static getMainLooper(): android.os.Looper;
			static myLooper(): android.os.Looper;
			getThread(): java.lang.Thread;
			static myQueue(): android.os.MessageQueue;
			static prepareMainLooper(): void;
			setMessageLogging(arg1: android.util.IPrinter): void;
			toString(): string;
			static prepare(): void;
			dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
			dump(arg1: android.util.IPrinter, arg2: string): void;
			static loop(): void;
			quit(): void;
		}
		export class FileObserver extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static ACCESS: number;
			static MODIFY: number;
			static ATTRIB: number;
			static CLOSE_WRITE: number;
			static CLOSE_NOWRITE: number;
			static OPEN: number;
			static MOVED_FROM: number;
			static MOVED_TO: number;
			static CREATE: number;
			static DELETE: number;
			static DELETE_SELF: number;
			static MOVE_SELF: number;
			static ALL_EVENTS: number;
			static class: java.lang.Class<android.os.FileObserver>;
			startWatching(): void;
			stopWatching(): void;
			onEvent(arg1: number, arg2: java.lang.String): void;
			onEvent(arg1: number, arg2: string): void;
		}
		export class ConditionVariable extends java.lang.Object {
			constructor();
			constructor(arg1: boolean);
			static class: java.lang.Class<android.os.ConditionVariable>;
			close(): void;
			open(): void;
			block(): void;
			block(arg1: native.Long): boolean;
		}
		export class CancellationSignal extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.os.CancellationSignal>;
			isCanceled(): boolean;
			setOnCancelListener(arg1: android.os.CancellationSignal.IOnCancelListener): void;
			throwIfCanceled(): void;
			cancel(): void;
		}
		export module CancellationSignal {
			export class OnCancelListener implements android.os.CancellationSignal.IOnCancelListener {
				constructor(implementation: android.os.CancellationSignal.IOnCancelListener);
				onCancel(): void;
			}
			export interface IOnCancelListener {
				onCancel(): void;
			}
		}
		export class DropBoxManager extends java.lang.Object {
			static IS_EMPTY: number;
			static IS_TEXT: number;
			static IS_GZIPPED: number;
			static ACTION_DROPBOX_ENTRY_ADDED: java.lang.String;
			static EXTRA_TAG: java.lang.String;
			static EXTRA_TIME: java.lang.String;
			static class: java.lang.Class<android.os.DropBoxManager>;
			addText(arg1: java.lang.String, arg2: java.lang.String): void;
			addText(arg1: string, arg2: string): void;
			addFile(arg1: java.lang.String, arg2: java.io.File, arg3: number): void;
			addFile(arg1: string, arg2: java.io.File, arg3: number): void;
			addData(arg1: java.lang.String, arg2: native.Array<native.Byte>, arg3: number): void;
			addData(arg1: string, arg2: native.Array<native.Byte>, arg3: number): void;
			isTagEnabled(arg1: java.lang.String): boolean;
			isTagEnabled(arg1: string): boolean;
			getNextEntry(arg1: java.lang.String, arg2: native.Long): android.os.DropBoxManager.Entry;
			getNextEntry(arg1: string, arg2: native.Long): android.os.DropBoxManager.Entry;
		}
		export module DropBoxManager {
			export class Entry extends java.lang.Object implements android.os.IParcelable, java.io.ICloseable {
				constructor(arg1: java.lang.String, arg2: native.Long);
				constructor(arg1: string, arg2: native.Long);
				constructor(arg1: java.lang.String, arg2: native.Long, arg3: java.io.File, arg4: number);
				constructor(arg1: string, arg2: native.Long, arg3: java.io.File, arg4: number);
				constructor(arg1: java.lang.String, arg2: native.Long, arg3: android.os.ParcelFileDescriptor, arg4: number);
				constructor(arg1: string, arg2: native.Long, arg3: android.os.ParcelFileDescriptor, arg4: number);
				constructor(arg1: java.lang.String, arg2: native.Long, arg3: java.lang.String);
				constructor(arg1: string, arg2: native.Long, arg3: string);
				constructor(arg1: java.lang.String, arg2: native.Long, arg3: native.Array<native.Byte>, arg4: number);
				constructor(arg1: string, arg2: native.Long, arg3: native.Array<native.Byte>, arg4: number);
				static CREATOR: android.os.Parcelable.ICreator<android.os.DropBoxManager.Entry>;
				static class: java.lang.Class<android.os.DropBoxManager.Entry>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getTimeMillis(): any;
				close(): void;
				getInputStream(): java.io.InputStream;
				getText(arg1: number): string;
				getFlags(): number;
				getTag(): string;
			}
		}
		export class BadParcelableException extends android.util.AndroidRuntimeException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.Exception);
			static class: java.lang.Class<android.os.BadParcelableException>;
		}
		export class PowerManager extends java.lang.Object {
			static PARTIAL_WAKE_LOCK: number;
			static SCREEN_DIM_WAKE_LOCK: number;
			static SCREEN_BRIGHT_WAKE_LOCK: number;
			static FULL_WAKE_LOCK: number;
			static ACQUIRE_CAUSES_WAKEUP: number;
			static ON_AFTER_RELEASE: number;
			static class: java.lang.Class<android.os.PowerManager>;
			newWakeLock(arg1: number, arg2: java.lang.String): android.os.PowerManager.WakeLock;
			newWakeLock(arg1: number, arg2: string): android.os.PowerManager.WakeLock;
			userActivity(arg1: native.Long, arg2: boolean): void;
			goToSleep(arg1: native.Long): void;
			wakeUp(arg1: native.Long): void;
			isScreenOn(): boolean;
			reboot(arg1: java.lang.String): void;
			reboot(arg1: string): void;
		}
		export module PowerManager {
			export class WakeLock extends java.lang.Object {
				static class: java.lang.Class<android.os.PowerManager.WakeLock>;
				isHeld(): boolean;
				setWorkSource(arg1: android.os.WorkSource): void;
				setReferenceCounted(arg1: boolean): void;
				toString(): string;
				release(): void;
				acquire(): void;
				acquire(arg1: native.Long): void;
			}
		}
		export class ParcelFormatException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.os.ParcelFormatException>;
		}
		export interface IIBinder {
			pingBinder(): boolean;
			isBinderAlive(): boolean;
			dumpAsync(arg1: java.io.FileDescriptor, arg2: native.Array<java.lang.String>): void;
			transact(arg1: number, arg2: android.os.Parcel, arg3: android.os.Parcel, arg4: number): boolean;
			unlinkToDeath(arg1: android.os.IBinder.IDeathRecipient, arg2: number): boolean;
			linkToDeath(arg1: android.os.IBinder.IDeathRecipient, arg2: number): void;
			queryLocalInterface(arg1: string): android.os.IIInterface;
			getInterfaceDescriptor(): string;
			dump(arg1: java.io.FileDescriptor, arg2: native.Array<java.lang.String>): void;
		}
		export module IIBinder {
			var FIRST_CALL_TRANSACTION: number;
			var LAST_CALL_TRANSACTION: number;
			var PING_TRANSACTION: number;
			var DUMP_TRANSACTION: number;
			var INTERFACE_TRANSACTION: number;
			var TWEET_TRANSACTION: number;
			var LIKE_TRANSACTION: number;
			var FLAG_ONEWAY: number;
		}
		export class DeadObjectException extends android.os.RemoteException {
			constructor();
			static class: java.lang.Class<android.os.DeadObjectException>;
		}
		export interface IParcelable {
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
		}
		export module IParcelable {
			var PARCELABLE_WRITE_RETURN_VALUE: number;
			var CONTENTS_FILE_DESCRIPTOR: number;
		}
		export class UserManager extends java.lang.Object {
			static class: java.lang.Class<android.os.UserManager>;
			isUserAGoat(): boolean;
			isUserRunning(arg1: android.os.UserHandle): boolean;
			getUserCount(): number;
			getSerialNumberForUser(arg1: android.os.UserHandle): any;
			isUserRunningOrStopping(arg1: android.os.UserHandle): boolean;
			getUserForSerialNumber(arg1: native.Long): android.os.UserHandle;
			getUserName(): string;
		}
		export class Message extends java.lang.Object implements android.os.IParcelable {
			constructor();
			what: number;
			arg1: number;
			arg2: number;
			obj: any;
			replyTo: android.os.Messenger;
			static CREATOR: android.os.Parcelable.ICreator<android.os.Message>;
			static class: java.lang.Class<android.os.Message>;
			Data: android.os.Bundle;
			Target: android.os.Handler;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			static obtain(arg1: android.os.Handler, arg2: number): android.os.Message;
			static obtain(arg1: android.os.Handler, arg2: number, arg3: any): android.os.Message;
			static obtain(arg1: android.os.Handler, arg2: number, arg3: number, arg4: number): android.os.Message;
			static obtain(arg1: android.os.Handler, arg2: number, arg3: number, arg4: number, arg5: any): android.os.Message;
			static obtain(arg1: android.os.Message): android.os.Message;
			static obtain(): android.os.Message;
			static obtain(arg1: android.os.Handler): android.os.Message;
			static obtain(arg1: android.os.Handler, arg2: java.lang.IRunnable): android.os.Message;
			recycle(): void;
			copyFrom(arg1: android.os.Message): void;
			getCallback(): java.lang.IRunnable;
			sendToTarget(): void;
			toString(): string;
			getTarget(): android.os.Handler;
			setTarget(arg1: android.os.Handler): void;
			getWhen(): any;
			getData(): android.os.Bundle;
			setData(arg1: android.os.Bundle): void;
			peekData(): android.os.Bundle;
		}
		export class IBinder implements android.os.IIBinder {
			constructor(implementation: android.os.IIBinder);
			static FIRST_CALL_TRANSACTION: number;
			static LAST_CALL_TRANSACTION: number;
			static PING_TRANSACTION: number;
			static DUMP_TRANSACTION: number;
			static INTERFACE_TRANSACTION: number;
			static TWEET_TRANSACTION: number;
			static LIKE_TRANSACTION: number;
			static FLAG_ONEWAY: number;
			pingBinder(): boolean;
			isBinderAlive(): boolean;
			dumpAsync(arg1: java.io.FileDescriptor, arg2: native.Array<java.lang.String>): void;
			transact(arg1: number, arg2: android.os.Parcel, arg3: android.os.Parcel, arg4: number): boolean;
			unlinkToDeath(arg1: android.os.IBinder.IDeathRecipient, arg2: number): boolean;
			linkToDeath(arg1: android.os.IBinder.IDeathRecipient, arg2: number): void;
			queryLocalInterface(arg1: java.lang.String): android.os.IIInterface;
			queryLocalInterface(arg1: string): android.os.IIInterface;
			getInterfaceDescriptor(): string;
			dump(arg1: java.io.FileDescriptor, arg2: native.Array<java.lang.String>): void;
		}
		export module IBinder {
			export interface IDeathRecipient {
				binderDied(): void;
			}
			export class DeathRecipient implements android.os.IBinder.IDeathRecipient {
				constructor(implementation: android.os.IBinder.IDeathRecipient);
				binderDied(): void;
			}
		}
		export class RecoverySystem extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.os.RecoverySystem>;
			static verifyPackage(arg1: java.io.File, arg2: android.os.RecoverySystem.IProgressListener, arg3: java.io.File): void;
			static rebootWipeCache(arg1: android.content.Context): void;
			static rebootWipeUserData(arg1: android.content.Context): void;
			static installPackage(arg1: android.content.Context, arg2: java.io.File): void;
		}
		export module RecoverySystem {
			export interface IProgressListener {
				onProgress(arg1: number): void;
			}
			export class ProgressListener implements android.os.RecoverySystem.IProgressListener {
				constructor(implementation: android.os.RecoverySystem.IProgressListener);
				onProgress(arg1: number): void;
			}
		}
		export class OperationCanceledException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.os.OperationCanceledException>;
		}
		export class Debug extends java.lang.Object {
			static TRACE_COUNT_ALLOCS: number;
			static SHOW_FULL_DETAIL: number;
			static SHOW_CLASSLOADER: number;
			static SHOW_INITIALIZED: number;
			static class: java.lang.Class<android.os.Debug>;
			static startAllocCounting(): void;
			static stopAllocCounting(): void;
			static dumpHprofData(arg1: java.lang.String): void;
			static dumpHprofData(arg1: string): void;
			static getPss(): any;
			static getMemoryInfo(arg1: android.os.Debug.MemoryInfo): void;
			static dumpService(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: native.Array<java.lang.String>): boolean;
			static dumpService(arg1: string, arg2: java.io.FileDescriptor, arg3: native.Array<java.lang.String>): boolean;
			static resetGlobalFreedSize(): void;
			static resetThreadAllocCount(): void;
			static getGlobalFreedSize(): number;
			static getThreadAllocSize(): number;
			static resetGlobalAllocSize(): void;
			static waitForDebugger(): void;
			static getGlobalAllocSize(): number;
			static resetGlobalFreedCount(): void;
			static waitingForDebugger(): boolean;
			static startNativeTracing(): void;
			static isDebuggerConnected(): boolean;
			static changeDebugPort(arg1: number): void;
			static stopNativeTracing(): void;
			static startMethodTracing(arg1: java.lang.String, arg2: number): void;
			static startMethodTracing(arg1: string, arg2: number): void;
			static startMethodTracing(): void;
			static startMethodTracing(arg1: java.lang.String): void;
			static startMethodTracing(arg1: string): void;
			static startMethodTracing(arg1: java.lang.String, arg2: number, arg3: number): void;
			static startMethodTracing(arg1: string, arg2: number, arg3: number): void;
			static stopMethodTracing(): void;
			static threadCpuTimeNanos(): any;
			static getGlobalFreedCount(): number;
			static getGlobalAllocCount(): number;
			static getThreadAllocCount(): number;
			static resetGlobalAllocCount(): void;
			static resetAllCounts(): void;
			static getNativeHeapSize(): any;
			static resetThreadAllocSize(): void;
			static getLoadedClassCount(): number;
			static getNativeHeapFreeSize(): any;
			static setAllocationLimit(arg1: number): number;
			static printLoadedClasses(arg1: number): void;
			static getGlobalExternalFreedCount(): number;
			static getGlobalExternalFreedSize(): number;
			static getGlobalGcInvocationCount(): number;
			static getThreadExternalAllocCount(): number;
			static getThreadExternalAllocSize(): number;
			static enableEmulatorTraceOutput(): void;
			static getGlobalClassInitCount(): number;
			static getGlobalClassInitTime(): number;
			static getGlobalExternalAllocCount(): number;
			static getGlobalExternalAllocSize(): number;
			static getBinderLocalObjectCount(): number;
			static getThreadGcInvocationCount(): number;
			static getBinderDeathObjectCount(): number;
			static resetGlobalGcInvocationCount(): void;
			static resetGlobalExternalFreedCount(): void;
			static getBinderSentTransactions(): number;
			static getNativeHeapAllocatedSize(): any;
			static resetGlobalClassInitTime(): void;
			static resetGlobalExternalAllocCount(): void;
			static resetGlobalExternalFreedSize(): void;
			static resetThreadGcInvocationCount(): void;
			static getBinderReceivedTransactions(): number;
			static setGlobalAllocationLimit(arg1: number): number;
			static getBinderProxyObjectCount(): number;
			static resetThreadExternalAllocCount(): void;
			static resetGlobalClassInitCount(): void;
			static resetThreadExternalAllocSize(): void;
			static resetGlobalExternalAllocSize(): void;
		}
		export module Debug {
			export class MemoryInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				dalvikPss: number;
				dalvikPrivateDirty: number;
				dalvikSharedDirty: number;
				nativePss: number;
				nativePrivateDirty: number;
				nativeSharedDirty: number;
				otherPss: number;
				otherPrivateDirty: number;
				otherSharedDirty: number;
				static CREATOR: android.os.Parcelable.ICreator<android.os.Debug.MemoryInfo>;
				static class: java.lang.Class<android.os.Debug.MemoryInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				readFromParcel(arg1: android.os.Parcel): void;
				static getOtherLabel(arg1: number): string;
				getTotalPss(): number;
				getOtherPss(arg1: number): number;
				getTotalSharedDirty(): number;
				getOtherSharedDirty(arg1: number): number;
				getOtherPrivateDirty(arg1: number): number;
				getTotalPrivateDirty(): number;
			}
			export class InstructionCount extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.os.Debug.InstructionCount>;
				collect(): boolean;
				globalTotal(): number;
				resetAndStart(): boolean;
				globalMethodInvocations(): number;
			}
		}
		export class MemoryFile extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			static class: java.lang.Class<android.os.MemoryFile>;
			allowPurging(arg1: boolean): boolean;
			isPurgingAllowed(): boolean;
			length(): number;
			close(): void;
			readBytes(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: number): number;
			writeBytes(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: number): void;
			getInputStream(): java.io.InputStream;
			getOutputStream(): java.io.OutputStream;
		}
		export class MessageQueue extends java.lang.Object {
			static class: java.lang.Class<android.os.MessageQueue>;
			addIdleHandler(arg1: android.os.MessageQueue.IIdleHandler): void;
			removeIdleHandler(arg1: android.os.MessageQueue.IIdleHandler): void;
		}
		export module MessageQueue {
			export class IdleHandler implements android.os.MessageQueue.IIdleHandler {
				constructor(implementation: android.os.MessageQueue.IIdleHandler);
				queueIdle(): boolean;
			}
			export interface IIdleHandler {
				queueIdle(): boolean;
			}
		}
		export class NetworkOnMainThreadException extends java.lang.RuntimeException {
			constructor();
			static class: java.lang.Class<android.os.NetworkOnMainThreadException>;
		}
		export class ParcelUuid extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: java.util.UUID);
			static CREATOR: android.os.Parcelable.ICreator<android.os.ParcelUuid>;
			static class: java.lang.Class<android.os.ParcelUuid>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			static fromString(arg1: java.lang.String): android.os.ParcelUuid;
			static fromString(arg1: string): android.os.ParcelUuid;
			getUuid(): java.util.UUID;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class Parcel extends java.lang.Object {
			static STRING_CREATOR: android.os.Parcelable.ICreator<string>;
			static class: java.lang.Class<android.os.Parcel>;
			createByteArray(): native.Array<native.Byte>;
			static obtain(): android.os.Parcel;
			recycle(): void;
			dataAvail(): number;
			dataCapacity(): number;
			dataPosition(): number;
			setDataSize(arg1: number): void;
			readHashMap(arg1: java.lang.ClassLoader): java.util.HashMap<any, any>;
			readList(arg1: java.util.IList<any>, arg2: java.lang.ClassLoader): void;
			readByteArray(arg1: native.Array<native.Byte>): void;
			marshall(): native.Array<native.Byte>;
			appendFrom(arg1: android.os.Parcel, arg2: number, arg3: number): void;
			readBundle(): android.os.Bundle;
			readBundle(arg1: java.lang.ClassLoader): android.os.Bundle;
			readValue(arg1: java.lang.ClassLoader): any;
			writeBundle(arg1: android.os.Bundle): void;
			unmarshall(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			readArrayList(arg1: java.lang.ClassLoader): java.util.ArrayList<any>;
			readTypedList<T>(arg1: java.util.IList<T>, arg2: android.os.Parcelable.ICreator<T>): void;
			writeList(arg1: java.util.IList<any>): void;
			writeMap(arg1: java.util.IMap<any, any>): void;
			readCharArray(arg1: native.Array<string>): void;
			readMap(arg1: java.util.IMap<any, any>, arg2: java.lang.ClassLoader): void;
			writeIntArray(arg1: native.Array<number>): void;
			readException(arg1: number, arg2: java.lang.String): void;
			readException(arg1: number, arg2: string): void;
			readException(): void;
			setDataPosition(arg1: number): void;
			createLongArray(): native.Array<native.Long>;
			writeFloatArray(arg1: native.Array<native.Float>): void;
			createFloatArray(): native.Array<native.Float>;
			readFloatArray(arg1: native.Array<native.Float>): void;
			setDataCapacity(arg1: number): void;
			enforceInterface(arg1: java.lang.String): void;
			enforceInterface(arg1: string): void;
			writeStrongBinder(arg1: android.os.IIBinder): void;
			writeSparseArray(arg1: android.util.SparseArray<any>): void;
			writeInterfaceToken(arg1: java.lang.String): void;
			writeInterfaceToken(arg1: string): void;
			writeByteArray(arg1: native.Array<native.Byte>): void;
			writeByteArray(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			writeBooleanArray(arg1: native.Array<boolean>): void;
			createBooleanArray(): native.Array<boolean>;
			writeCharArray(arg1: native.Array<string>): void;
			createCharArray(): native.Array<string>;
			createIntArray(): native.Array<number>;
			readBooleanArray(arg1: native.Array<boolean>): void;
			hasFileDescriptors(): boolean;
			writeLongArray(arg1: native.Array<native.Long>): void;
			writeStrongInterface(arg1: android.os.IIInterface): void;
			writeParcelable(arg1: android.os.IParcelable, arg2: number): void;
			readParcelable<T extends android.os.IParcelable>(arg1: java.lang.ClassLoader): T;
			createDoubleArray(): native.Array<native.Double>;
			writeException(arg1: java.lang.Exception): void;
			readBinderArray(arg1: native.Array<android.os.IIBinder>): void;
			writeSerializable(arg1: java.io.ISerializable): void;
			writeSerializable(arg1: string): void;
			readStrongBinder(): android.os.IIBinder;
			readParcelableArray(arg1: java.lang.ClassLoader): native.Array<android.os.IParcelable>;
			createBinderArray(): native.Array<android.os.IIBinder>;
			readSerializable(): java.io.ISerializable;
			writeStringArray(arg1: native.Array<java.lang.String>): void;
			writeStringList(arg1: java.util.IList<string>): void;
			createStringArray(): native.Array<java.lang.String>;
			createTypedArrayList<T>(arg1: android.os.Parcelable.ICreator<T>): java.util.ArrayList<T>;
			readStringList(arg1: java.util.IList<string>): void;
			writeNoException(): void;
			readBinderList(arg1: java.util.IList<android.os.IIBinder>): void;
			createStringArrayList(): java.util.ArrayList<string>;
			createBinderArrayList(): java.util.ArrayList<android.os.IIBinder>;
			createTypedArray<T>(arg1: android.os.Parcelable.ICreator<T>): native.Array<T>;
			readSparseArray(arg1: java.lang.ClassLoader): android.util.SparseArray<any>;
			writeParcelableArray<T extends android.os.IParcelable>(arg1: native.Array<T>, arg2: number): void;
			writeDoubleArray(arg1: native.Array<native.Double>): void;
			writeTypedArray<T extends android.os.IParcelable>(arg1: native.Array<T>, arg2: number): void;
			writeBinderList(arg1: java.util.IList<android.os.IIBinder>): void;
			writeBinderArray(arg1: native.Array<android.os.IIBinder>): void;
			writeTypedList<T extends android.os.IParcelable>(arg1: java.util.IList<T>): void;
			readTypedArray<T>(arg1: native.Array<T>, arg2: android.os.Parcelable.ICreator<T>): void;
			readDoubleArray(arg1: native.Array<native.Double>): void;
			readSparseBooleanArray(): android.util.SparseBooleanArray;
			writeSparseBooleanArray(arg1: android.util.SparseBooleanArray): void;
			readInt(): number;
			writeInt(arg1: number): void;
			readByte(): number;
			readLong(): any;
			writeByte(arg1: native.Byte): void;
			writeLong(arg1: native.Long): void;
			readFloat(): number;
			writeFloat(arg1: native.Float): void;
			writeArray(arg1: native.Array<any>): void;
			writeDouble(arg1: native.Double): void;
			writeDouble(arg1: number): void;
			writeString(arg1: java.lang.String): void;
			writeString(arg1: string): void;
			readArray(arg1: java.lang.ClassLoader): native.Array<any>;
			readDouble(): any;
			readString(): string;
			readIntArray(arg1: native.Array<number>): void;
			readLongArray(arg1: native.Array<native.Long>): void;
			readStringArray(arg1: native.Array<java.lang.String>): void;
			dataSize(): number;
			writeValue(arg1: any): void;
			readFileDescriptor(): android.os.ParcelFileDescriptor;
			writeFileDescriptor(arg1: java.io.FileDescriptor): void;
		}
		export class Handler extends java.lang.Object {
			constructor(arg1: android.os.Looper, arg2: android.os.Handler.ICallback);
			constructor(arg1: android.os.Handler.ICallback);
			constructor();
			constructor(arg1: android.os.Looper);
			static class: java.lang.Class<android.os.Handler>;
			removeCallbacks(arg1: java.lang.IRunnable, arg2: any): void;
			removeCallbacks(arg1: java.lang.IRunnable): void;
			postDelayed(arg1: java.lang.IRunnable, arg2: native.Long): boolean;
			sendEmptyMessageAtTime(arg1: number, arg2: native.Long): boolean;
			sendEmptyMessageDelayed(arg1: number, arg2: native.Long): boolean;
			removeCallbacksAndMessages(arg1: any): void;
			sendMessageAtFrontOfQueue(arg1: android.os.Message): boolean;
			sendMessageDelayed(arg1: android.os.Message, arg2: native.Long): boolean;
			dispatchMessage(arg1: android.os.Message): void;
			getMessageName(arg1: android.os.Message): string;
			sendMessageAtTime(arg1: android.os.Message, arg2: native.Long): boolean;
			removeMessages(arg1: number): void;
			removeMessages(arg1: number, arg2: any): void;
			postAtFrontOfQueue(arg1: java.lang.IRunnable): boolean;
			sendEmptyMessage(arg1: number): boolean;
			obtainMessage(): android.os.Message;
			obtainMessage(arg1: number, arg2: number, arg3: number): android.os.Message;
			obtainMessage(arg1: number, arg2: any): android.os.Message;
			obtainMessage(arg1: number): android.os.Message;
			obtainMessage(arg1: number, arg2: number, arg3: number, arg4: any): android.os.Message;
			getLooper(): android.os.Looper;
			handleMessage(arg1: android.os.Message): void;
			postAtTime(arg1: java.lang.IRunnable, arg2: any, arg3: native.Long): boolean;
			postAtTime(arg1: java.lang.IRunnable, arg2: native.Long): boolean;
			hasMessages(arg1: number): boolean;
			hasMessages(arg1: number, arg2: any): boolean;
			toString(): string;
			dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
			dump(arg1: android.util.IPrinter, arg2: string): void;
			sendMessage(arg1: android.os.Message): boolean;
			post(arg1: java.lang.IRunnable): boolean;
		}
		export module Handler {
			export interface ICallback {
				handleMessage(arg1: android.os.Message): boolean;
			}
			export class Callback implements android.os.Handler.ICallback {
				constructor(implementation: android.os.Handler.ICallback);
				handleMessage(arg1: android.os.Message): boolean;
			}
		}
		export module storage {
			export class OnObbStateChangeListener extends java.lang.Object {
				constructor();
				static MOUNTED: number;
				static UNMOUNTED: number;
				static ERROR_INTERNAL: number;
				static ERROR_COULD_NOT_MOUNT: number;
				static ERROR_COULD_NOT_UNMOUNT: number;
				static ERROR_NOT_MOUNTED: number;
				static ERROR_ALREADY_MOUNTED: number;
				static ERROR_PERMISSION_DENIED: number;
				static class: java.lang.Class<android.os.storage.OnObbStateChangeListener>;
				onObbStateChange(arg1: java.lang.String, arg2: number): void;
				onObbStateChange(arg1: string, arg2: number): void;
			}
			export class StorageManager extends java.lang.Object {
				static class: java.lang.Class<android.os.storage.StorageManager>;
				unmountObb(arg1: java.lang.String, arg2: boolean, arg3: android.os.storage.OnObbStateChangeListener): boolean;
				unmountObb(arg1: string, arg2: boolean, arg3: android.os.storage.OnObbStateChangeListener): boolean;
				mountObb(arg1: java.lang.String, arg2: java.lang.String, arg3: android.os.storage.OnObbStateChangeListener): boolean;
				mountObb(arg1: string, arg2: string, arg3: android.os.storage.OnObbStateChangeListener): boolean;
				isObbMounted(arg1: java.lang.String): boolean;
				isObbMounted(arg1: string): boolean;
				getMountedObbPath(arg1: java.lang.String): string;
				getMountedObbPath(arg1: string): string;
			}
		}
	}
	export module text {
		export interface IEditable extends java.lang.ICharSequence, android.text.IGetChars, android.text.ISpannable, java.lang.IAppendable {
			setFilters(arg1: native.Array<android.text.IInputFilter>): void;
			getFilters(): native.Array<android.text.IInputFilter>;
			clearSpans(): void;
			append(arg1: string): android.text.IEditable;
			append(arg1: string, arg2: number, arg3: number): android.text.IEditable;
			replace(arg1: number, arg2: number, arg3: string, arg4: number, arg5: number): android.text.IEditable;
			replace(arg1: number, arg2: number, arg3: string): android.text.IEditable;
			clear(): void;
			delete(arg1: number, arg2: number): android.text.IEditable;
			insert(arg1: number, arg2: string): android.text.IEditable;
			insert(arg1: number, arg2: string, arg3: number, arg4: number): android.text.IEditable;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			setSpan(arg1: any, arg2: number, arg3: number, arg4: number): void;
			removeSpan(arg1: any): void;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans<T>(arg1: number, arg2: number, arg3: java.lang.Class<T>): native.Array<T>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
		}
		export class Html extends java.lang.Object {
			static class: java.lang.Class<android.text.Html>;
			static toHtml(arg1: android.text.ISpanned): string;
			static escapeHtml(arg1: java.lang.ICharSequence): string;
			static escapeHtml(arg1: string): string;
			static fromHtml(arg1: java.lang.String, arg2: android.text.Html.IImageGetter, arg3: android.text.Html.ITagHandler): android.text.ISpanned;
			static fromHtml(arg1: string, arg2: android.text.Html.IImageGetter, arg3: android.text.Html.ITagHandler): android.text.ISpanned;
			static fromHtml(arg1: java.lang.String): android.text.ISpanned;
			static fromHtml(arg1: string): android.text.ISpanned;
		}
		export module Html {
			export class TagHandler implements android.text.Html.ITagHandler {
				constructor(implementation: android.text.Html.ITagHandler);
				handleTag(arg1: boolean, arg2: java.lang.String, arg3: android.text.IEditable, arg4: org.xml.sax.IXMLReader): void;
				handleTag(arg1: boolean, arg2: string, arg3: android.text.IEditable, arg4: org.xml.sax.IXMLReader): void;
			}
			export interface ITagHandler {
				handleTag(arg1: boolean, arg2: string, arg3: android.text.IEditable, arg4: org.xml.sax.IXMLReader): void;
			}
			export class ImageGetter implements android.text.Html.IImageGetter {
				constructor(implementation: android.text.Html.IImageGetter);
				getDrawable(arg1: java.lang.String): android.graphics.drawable.Drawable;
				getDrawable(arg1: string): android.graphics.drawable.Drawable;
			}
			export interface IImageGetter {
				getDrawable(arg1: string): android.graphics.drawable.Drawable;
			}
		}
		export class StaticLayout extends android.text.Layout {
			constructor(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: boolean);
			constructor(arg1: string, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: boolean);
			constructor(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.TextPaint, arg5: number, arg6: android.text.Layout.Alignment, arg7: native.Float, arg8: native.Float, arg9: boolean, arg10: android.text.TextUtils.TruncateAt, arg11: number);
			constructor(arg1: string, arg2: number, arg3: number, arg4: android.text.TextPaint, arg5: number, arg6: android.text.Layout.Alignment, arg7: native.Float, arg8: native.Float, arg9: boolean, arg10: android.text.TextUtils.TruncateAt, arg11: number);
			constructor(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.TextPaint, arg5: number, arg6: android.text.Layout.Alignment, arg7: native.Float, arg8: native.Float, arg9: boolean);
			constructor(arg1: string, arg2: number, arg3: number, arg4: android.text.TextPaint, arg5: number, arg6: android.text.Layout.Alignment, arg7: native.Float, arg8: native.Float, arg9: boolean);
			static class: java.lang.Class<android.text.StaticLayout>;
			getEllipsizedWidth(): number;
			getLineForVertical(arg1: number): number;
			getParagraphDirection(arg1: number): number;
			getLineDirections(arg1: number): android.text.Layout.Directions;
			getEllipsisStart(arg1: number): number;
			getLineDescent(arg1: number): number;
			getEllipsisCount(arg1: number): number;
			getLineContainsTab(arg1: number): boolean;
			getBottomPadding(): number;
			getLineTop(arg1: number): number;
			getLineStart(arg1: number): number;
			getTopPadding(): number;
			getLineCount(): number;
		}
		export class AlteredCharSequence extends java.lang.Object implements java.lang.ICharSequence, android.text.IGetChars {
			static class: java.lang.Class<android.text.AlteredCharSequence>;
			toString(): string;
			charAt(arg1: number): string;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			static make(arg1: java.lang.ICharSequence, arg2: native.Array<string>, arg3: number, arg4: number): android.text.AlteredCharSequence;
			static make(arg1: string, arg2: native.Array<string>, arg3: number, arg4: number): android.text.AlteredCharSequence;
		}
		export interface ISpannable extends android.text.ISpanned {
			setSpan(arg1: any, arg2: number, arg3: number, arg4: number): void;
			removeSpan(arg1: any): void;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans<T>(arg1: number, arg2: number, arg3: java.lang.Class<T>): native.Array<T>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
		}
		export class ClipboardManager extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.text.ClipboardManager>;
			Text: java.lang.ICharSequence;
			hasText(): boolean;
			getText(): java.lang.ICharSequence;
			setText(arg1: java.lang.ICharSequence): void;
			setText(arg1: string): void;
		}
		export class DynamicLayout extends android.text.Layout {
			constructor(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: boolean);
			constructor(arg1: string, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: boolean);
			constructor(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence, arg3: android.text.TextPaint, arg4: number, arg5: android.text.Layout.Alignment, arg6: native.Float, arg7: native.Float, arg8: boolean);
			constructor(arg1: string, arg2: string, arg3: android.text.TextPaint, arg4: number, arg5: android.text.Layout.Alignment, arg6: native.Float, arg7: native.Float, arg8: boolean);
			constructor(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence, arg3: android.text.TextPaint, arg4: number, arg5: android.text.Layout.Alignment, arg6: native.Float, arg7: native.Float, arg8: boolean, arg9: android.text.TextUtils.TruncateAt, arg10: number);
			constructor(arg1: string, arg2: string, arg3: android.text.TextPaint, arg4: number, arg5: android.text.Layout.Alignment, arg6: native.Float, arg7: native.Float, arg8: boolean, arg9: android.text.TextUtils.TruncateAt, arg10: number);
			static class: java.lang.Class<android.text.DynamicLayout>;
			getEllipsizedWidth(): number;
			getParagraphDirection(arg1: number): number;
			getLineDirections(arg1: number): android.text.Layout.Directions;
			getEllipsisStart(arg1: number): number;
			getLineDescent(arg1: number): number;
			getEllipsisCount(arg1: number): number;
			getLineContainsTab(arg1: number): boolean;
			getBottomPadding(): number;
			getLineTop(arg1: number): number;
			getLineStart(arg1: number): number;
			getTopPadding(): number;
			getLineCount(): number;
		}
		export class SpannableStringInternal extends java.lang.Object {
			static class: java.lang.Class<android.text.SpannableStringInternal>;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans<T>(arg1: number, arg2: number, arg3: java.lang.Class<T>): native.Array<T>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
			toString(): string;
			charAt(arg1: number): string;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			length(): number;
		}
		export interface INoCopySpan {
		}
		export module style {
			export class WrapTogetherSpan implements android.text.style.IParagraphStyle, android.text.style.IWrapTogetherSpan {
				constructor(implementation: android.text.style.IWrapTogetherSpan);
			}
			export interface ILineBackgroundSpan extends android.text.style.IParagraphStyle {
				drawBackground(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: number): void;
			}
			export class UpdateLayout implements android.text.style.IUpdateAppearance, android.text.style.IUpdateLayout {
				constructor(implementation: android.text.style.IUpdateLayout);
			}
			export class ReplacementSpan extends android.text.style.MetricAffectingSpan {
				constructor();
				static class: java.lang.Class<android.text.style.ReplacementSpan>;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
				getSize(arg1: android.graphics.Paint, arg2: java.lang.ICharSequence, arg3: number, arg4: number, arg5: android.graphics.Paint.FontMetricsInt): number;
				getSize(arg1: android.graphics.Paint, arg2: string, arg3: number, arg4: number, arg5: android.graphics.Paint.FontMetricsInt): number;
				draw(arg1: android.graphics.Canvas, arg2: java.lang.ICharSequence, arg3: number, arg4: number, arg5: native.Float, arg6: number, arg7: number, arg8: number, arg9: android.graphics.Paint): void;
				draw(arg1: android.graphics.Canvas, arg2: string, arg3: number, arg4: number, arg5: native.Float, arg6: number, arg7: number, arg8: number, arg9: android.graphics.Paint): void;
			}
			export class ClickableSpan extends android.text.style.CharacterStyle implements android.text.style.IUpdateAppearance {
				constructor();
				static class: java.lang.Class<android.text.style.ClickableSpan>;
				onClick(arg1: android.view.View): void;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export class StyleSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: number);
				constructor(arg1: android.os.Parcel);
				static class: java.lang.Class<android.text.style.StyleSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
				getStyle(): number;
			}
			export class ScaleXSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: native.Float);
				constructor(arg1: android.os.Parcel);
				static class: java.lang.Class<android.text.style.ScaleXSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
				getScaleX(): number;
			}
			export class LeadingMarginSpan implements android.text.style.IParagraphStyle, android.text.style.ILeadingMarginSpan {
				constructor(implementation: android.text.style.ILeadingMarginSpan);
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.lang.ICharSequence, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				getLeadingMargin(arg1: boolean): number;
			}
			export module LeadingMarginSpan {
				export class Standard extends java.lang.Object implements android.text.style.ILeadingMarginSpan, android.text.IParcelableSpan {
					constructor(arg1: number, arg2: number);
					constructor(arg1: android.os.Parcel);
					constructor(arg1: number);
					static class: java.lang.Class<android.text.style.LeadingMarginSpan.Standard>;
					writeToParcel(arg1: android.os.Parcel, arg2: number): void;
					describeContents(): number;
					getSpanTypeId(): number;
					drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.lang.ICharSequence, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
					drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
					getLeadingMargin(arg1: boolean): number;
				}
				export interface ILeadingMarginSpan2 extends android.text.style.ILeadingMarginSpan, android.text.style.IWrapTogetherSpan {
					getLeadingMarginLineCount(): number;
					drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
					getLeadingMargin(arg1: boolean): number;
				}
				export class LeadingMarginSpan2 implements android.text.style.ILeadingMarginSpan, android.text.style.IWrapTogetherSpan, android.text.style.LeadingMarginSpan.ILeadingMarginSpan2 {
					constructor(implementation: android.text.style.LeadingMarginSpan.ILeadingMarginSpan2);
					getLeadingMarginLineCount(): number;
					drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
					getLeadingMargin(arg1: boolean): number;
				}
			}
			export class AlignmentSpan implements android.text.style.IParagraphStyle, android.text.style.IAlignmentSpan {
				constructor(implementation: android.text.style.IAlignmentSpan);
				getAlignment(): android.text.Layout.Alignment;
			}
			export module AlignmentSpan {
				export class Standard extends java.lang.Object implements android.text.style.IAlignmentSpan, android.text.IParcelableSpan {
					constructor(arg1: android.text.Layout.Alignment);
					constructor(arg1: android.os.Parcel);
					static class: java.lang.Class<android.text.style.AlignmentSpan.Standard>;
					writeToParcel(arg1: android.os.Parcel, arg2: number): void;
					describeContents(): number;
					getSpanTypeId(): number;
					getAlignment(): android.text.Layout.Alignment;
				}
			}
			export interface ILineHeightSpan extends android.text.style.IParagraphStyle, android.text.style.IWrapTogetherSpan {
				chooseHeight(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
			}
			export class TypefaceSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: android.os.Parcel);
				static class: java.lang.Class<android.text.style.TypefaceSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
				getFamily(): string;
			}
			export interface IUpdateLayout extends android.text.style.IUpdateAppearance {
			}
			export class LineBackgroundSpan implements android.text.style.IParagraphStyle, android.text.style.ILineBackgroundSpan {
				constructor(implementation: android.text.style.ILineBackgroundSpan);
				drawBackground(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.lang.ICharSequence, arg9: number, arg10: number, arg11: number): void;
				drawBackground(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: number): void;
			}
			export class CharacterStyle extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.text.style.CharacterStyle>;
				getUnderlying(): android.text.style.CharacterStyle;
				updateDrawState(arg1: android.text.TextPaint): void;
				static wrap(arg1: android.text.style.CharacterStyle): android.text.style.CharacterStyle;
			}
			export class ParagraphStyle implements android.text.style.IParagraphStyle {
				constructor(implementation: android.text.style.IParagraphStyle);
			}
			export class DynamicDrawableSpan extends android.text.style.ReplacementSpan {
				constructor();
				static ALIGN_BOTTOM: number;
				static ALIGN_BASELINE: number;
				static class: java.lang.Class<android.text.style.DynamicDrawableSpan>;
				getDrawable(): android.graphics.drawable.Drawable;
				getSize(arg1: android.graphics.Paint, arg2: java.lang.ICharSequence, arg3: number, arg4: number, arg5: android.graphics.Paint.FontMetricsInt): number;
				getSize(arg1: android.graphics.Paint, arg2: string, arg3: number, arg4: number, arg5: android.graphics.Paint.FontMetricsInt): number;
				draw(arg1: android.graphics.Canvas, arg2: java.lang.ICharSequence, arg3: number, arg4: number, arg5: native.Float, arg6: number, arg7: number, arg8: number, arg9: android.graphics.Paint): void;
				draw(arg1: android.graphics.Canvas, arg2: string, arg3: number, arg4: number, arg5: native.Float, arg6: number, arg7: number, arg8: number, arg9: android.graphics.Paint): void;
				getVerticalAlignment(): number;
			}
			export class LineHeightSpan implements android.text.style.IParagraphStyle, android.text.style.IWrapTogetherSpan, android.text.style.ILineHeightSpan {
				constructor(implementation: android.text.style.ILineHeightSpan);
				chooseHeight(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
				chooseHeight(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
			}
			export module LineHeightSpan {
				export interface IWithDensity extends android.text.style.ILineHeightSpan {
					chooseHeight(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt, arg7: android.text.TextPaint): void;
					chooseHeight(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
				}
				export class WithDensity implements android.text.style.ILineHeightSpan, android.text.style.LineHeightSpan.IWithDensity {
					constructor(implementation: android.text.style.LineHeightSpan.IWithDensity);
					chooseHeight(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt, arg7: android.text.TextPaint): void;
					chooseHeight(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt, arg7: android.text.TextPaint): void;
					chooseHeight(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
				}
			}
			export class UnderlineSpan extends android.text.style.CharacterStyle implements android.text.style.IUpdateAppearance, android.text.IParcelableSpan {
				constructor(arg1: android.os.Parcel);
				constructor();
				static class: java.lang.Class<android.text.style.UnderlineSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export class LocaleSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: java.util.Locale);
				constructor(arg1: android.os.Parcel);
				static class: java.lang.Class<android.text.style.LocaleSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
				getLocale(): java.util.Locale;
			}
			export interface IWrapTogetherSpan extends android.text.style.IParagraphStyle {
			}
			export class URLSpan extends android.text.style.ClickableSpan implements android.text.IParcelableSpan {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: android.os.Parcel);
				static class: java.lang.Class<android.text.style.URLSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				onClick(arg1: android.view.View): void;
				getSpanTypeId(): number;
				getURL(): string;
			}
			export class BulletSpan extends java.lang.Object implements android.text.style.ILeadingMarginSpan, android.text.IParcelableSpan {
				constructor();
				constructor(arg1: number);
				constructor(arg1: number, arg2: number);
				constructor(arg1: android.os.Parcel);
				static STANDARD_GAP_WIDTH: number;
				static class: java.lang.Class<android.text.style.BulletSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.lang.ICharSequence, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				getLeadingMargin(arg1: boolean): number;
			}
			export class SuperscriptSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: android.os.Parcel);
				constructor();
				static class: java.lang.Class<android.text.style.SuperscriptSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export class TabStopSpan implements android.text.style.IParagraphStyle, android.text.style.ITabStopSpan {
				constructor(implementation: android.text.style.ITabStopSpan);
				getTabStop(): number;
			}
			export module TabStopSpan {
				export class Standard extends java.lang.Object implements android.text.style.ITabStopSpan {
					constructor(arg1: number);
					static class: java.lang.Class<android.text.style.TabStopSpan.Standard>;
					getTabStop(): number;
				}
			}
			export class ForegroundColorSpan extends android.text.style.CharacterStyle implements android.text.style.IUpdateAppearance, android.text.IParcelableSpan {
				constructor(arg1: android.os.Parcel);
				constructor(arg1: number);
				static class: java.lang.Class<android.text.style.ForegroundColorSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				getForegroundColor(): number;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export class IconMarginSpan extends java.lang.Object implements android.text.style.ILeadingMarginSpan, android.text.style.ILineHeightSpan {
				constructor(arg1: android.graphics.Bitmap, arg2: number);
				constructor(arg1: android.graphics.Bitmap);
				static class: java.lang.Class<android.text.style.IconMarginSpan>;
				chooseHeight(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
				chooseHeight(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.lang.ICharSequence, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				getLeadingMargin(arg1: boolean): number;
			}
			export class SuggestionSpan extends android.text.style.CharacterStyle implements android.text.IParcelableSpan {
				constructor(arg1: android.content.Context, arg2: native.Array<java.lang.String>, arg3: number);
				constructor(arg1: android.os.Parcel);
				constructor(arg1: java.util.Locale, arg2: native.Array<java.lang.String>, arg3: number);
				constructor(arg1: android.content.Context, arg2: java.util.Locale, arg3: native.Array<java.lang.String>, arg4: number, arg5: java.lang.Class<any>);
				static FLAG_EASY_CORRECT: number;
				static FLAG_MISSPELLED: number;
				static FLAG_AUTO_CORRECTION: number;
				static ACTION_SUGGESTION_PICKED: java.lang.String;
				static SUGGESTION_SPAN_PICKED_AFTER: java.lang.String;
				static SUGGESTION_SPAN_PICKED_BEFORE: java.lang.String;
				static SUGGESTION_SPAN_PICKED_HASHCODE: java.lang.String;
				static SUGGESTIONS_MAX_SIZE: number;
				static CREATOR: android.os.Parcelable.ICreator<android.text.style.SuggestionSpan>;
				static class: java.lang.Class<android.text.style.SuggestionSpan>;
				Flags: number;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSuggestions(): native.Array<java.lang.String>;
				setFlags(arg1: number): void;
				getSpanTypeId(): number;
				updateDrawState(arg1: android.text.TextPaint): void;
				hashCode(): number;
				equals(arg1: any): boolean;
				getLocale(): string;
				getFlags(): number;
			}
			export class SubscriptSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: android.os.Parcel);
				constructor();
				static class: java.lang.Class<android.text.style.SubscriptSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export class DrawableMarginSpan extends java.lang.Object implements android.text.style.ILeadingMarginSpan, android.text.style.ILineHeightSpan {
				constructor(arg1: android.graphics.drawable.Drawable, arg2: number);
				constructor(arg1: android.graphics.drawable.Drawable);
				static class: java.lang.Class<android.text.style.DrawableMarginSpan>;
				chooseHeight(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
				chooseHeight(arg1: string, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint.FontMetricsInt): void;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.lang.ICharSequence, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				getLeadingMargin(arg1: boolean): number;
			}
			export class RasterizerSpan extends android.text.style.CharacterStyle implements android.text.style.IUpdateAppearance {
				constructor(arg1: android.graphics.Rasterizer);
				static class: java.lang.Class<android.text.style.RasterizerSpan>;
				getRasterizer(): android.graphics.Rasterizer;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export class ImageSpan extends android.text.style.DynamicDrawableSpan {
				constructor(arg1: android.content.Context, arg2: android.net.Uri);
				constructor(arg1: android.graphics.drawable.Drawable, arg2: java.lang.String, arg3: number);
				constructor(arg1: android.graphics.drawable.Drawable, arg2: string, arg3: number);
				constructor(arg1: android.graphics.drawable.Drawable, arg2: java.lang.String);
				constructor(arg1: android.graphics.drawable.Drawable, arg2: string);
				constructor(arg1: android.content.Context, arg2: android.net.Uri, arg3: number);
				constructor(arg1: android.content.Context, arg2: number);
				constructor(arg1: android.content.Context, arg2: number, arg3: number);
				constructor(arg1: android.graphics.Bitmap);
				constructor(arg1: android.graphics.Bitmap, arg2: number);
				constructor(arg1: android.content.Context, arg2: android.graphics.Bitmap);
				constructor(arg1: android.graphics.drawable.Drawable, arg2: number);
				constructor(arg1: android.graphics.drawable.Drawable);
				constructor(arg1: android.content.Context, arg2: android.graphics.Bitmap, arg3: number);
				static class: java.lang.Class<android.text.style.ImageSpan>;
				getDrawable(): android.graphics.drawable.Drawable;
				getSource(): string;
			}
			export interface IAlignmentSpan extends android.text.style.IParagraphStyle {
				getAlignment(): android.text.Layout.Alignment;
			}
			export class StrikethroughSpan extends android.text.style.CharacterStyle implements android.text.style.IUpdateAppearance, android.text.IParcelableSpan {
				constructor(arg1: android.os.Parcel);
				constructor();
				static class: java.lang.Class<android.text.style.StrikethroughSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export class RelativeSizeSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: android.os.Parcel);
				constructor(arg1: native.Float);
				static class: java.lang.Class<android.text.style.RelativeSizeSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				getSizeChange(): number;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export interface IUpdateAppearance {
			}
			export class UpdateAppearance implements android.text.style.IUpdateAppearance {
				constructor(implementation: android.text.style.IUpdateAppearance);
			}
			export class TextAppearanceSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: android.content.Context, arg2: number, arg3: number);
				constructor(arg1: java.lang.String, arg2: number, arg3: number, arg4: android.content.res.ColorStateList, arg5: android.content.res.ColorStateList);
				constructor(arg1: string, arg2: number, arg3: number, arg4: android.content.res.ColorStateList, arg5: android.content.res.ColorStateList);
				constructor(arg1: android.os.Parcel);
				constructor(arg1: android.content.Context, arg2: number);
				static class: java.lang.Class<android.text.style.TextAppearanceSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getTextSize(): number;
				getTextColor(): android.content.res.ColorStateList;
				getSpanTypeId(): number;
				getTextStyle(): number;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
				getLinkTextColor(): android.content.res.ColorStateList;
				getFamily(): string;
			}
			export class MetricAffectingSpan extends android.text.style.CharacterStyle implements android.text.style.IUpdateLayout {
				constructor();
				static class: java.lang.Class<android.text.style.MetricAffectingSpan>;
				getUnderlying(): android.text.style.MetricAffectingSpan;
				updateMeasureState(arg1: android.text.TextPaint): void;
			}
			export interface ITabStopSpan extends android.text.style.IParagraphStyle {
				getTabStop(): number;
			}
			export class MaskFilterSpan extends android.text.style.CharacterStyle implements android.text.style.IUpdateAppearance {
				constructor(arg1: android.graphics.MaskFilter);
				static class: java.lang.Class<android.text.style.MaskFilterSpan>;
				getMaskFilter(): android.graphics.MaskFilter;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export interface ILeadingMarginSpan extends android.text.style.IParagraphStyle {
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				getLeadingMargin(arg1: boolean): number;
			}
			export interface IParagraphStyle {
			}
			export class EasyEditSpan extends java.lang.Object implements android.text.IParcelableSpan {
				constructor();
				static class: java.lang.Class<android.text.style.EasyEditSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
			}
			export class BackgroundColorSpan extends android.text.style.CharacterStyle implements android.text.style.IUpdateAppearance, android.text.IParcelableSpan {
				constructor(arg1: android.os.Parcel);
				constructor(arg1: number);
				static class: java.lang.Class<android.text.style.BackgroundColorSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getBackgroundColor(): number;
				getSpanTypeId(): number;
				updateDrawState(arg1: android.text.TextPaint): void;
			}
			export class AbsoluteSizeSpan extends android.text.style.MetricAffectingSpan implements android.text.IParcelableSpan {
				constructor(arg1: number);
				constructor(arg1: number, arg2: boolean);
				constructor(arg1: android.os.Parcel);
				static class: java.lang.Class<android.text.style.AbsoluteSizeSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				getDip(): boolean;
				updateMeasureState(arg1: android.text.TextPaint): void;
				updateDrawState(arg1: android.text.TextPaint): void;
				getSize(): number;
			}
			export class QuoteSpan extends java.lang.Object implements android.text.style.ILeadingMarginSpan, android.text.IParcelableSpan {
				constructor();
				constructor(arg1: number);
				constructor(arg1: android.os.Parcel);
				static class: java.lang.Class<android.text.style.QuoteSpan>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSpanTypeId(): number;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.lang.ICharSequence, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				drawLeadingMargin(arg1: android.graphics.Canvas, arg2: android.graphics.Paint, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: string, arg9: number, arg10: number, arg11: boolean, arg12: android.text.Layout): void;
				getLeadingMargin(arg1: boolean): number;
				getColor(): number;
			}
		}
		export class SpanWatcher implements android.text.INoCopySpan, android.text.ISpanWatcher {
			constructor(implementation: android.text.ISpanWatcher);
			onSpanAdded(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number): void;
			onSpanRemoved(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number): void;
			onSpanChanged(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number, arg5: number, arg6: number): void;
		}
		export interface IParcelableSpan extends android.os.IParcelable {
			getSpanTypeId(): number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
		}
		export class AndroidCharacter extends java.lang.Object {
			constructor();
			static EAST_ASIAN_WIDTH_NEUTRAL: number;
			static EAST_ASIAN_WIDTH_AMBIGUOUS: number;
			static EAST_ASIAN_WIDTH_HALF_WIDTH: number;
			static EAST_ASIAN_WIDTH_FULL_WIDTH: number;
			static EAST_ASIAN_WIDTH_NARROW: number;
			static EAST_ASIAN_WIDTH_WIDE: number;
			static class: java.lang.Class<android.text.AndroidCharacter>;
			static mirror(arg1: native.Array<string>, arg2: number, arg3: number): boolean;
			static getMirror(arg1: string): string;
			static getEastAsianWidths(arg1: native.Array<string>, arg2: number, arg3: number, arg4: native.Array<native.Byte>): void;
			static getDirectionalities(arg1: native.Array<string>, arg2: native.Array<native.Byte>, arg3: number): void;
			static getEastAsianWidth(arg1: string): number;
		}
		export class BoringLayout extends android.text.Layout implements android.text.TextUtils.IEllipsizeCallback {
			constructor(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean, arg9: android.text.TextUtils.TruncateAt, arg10: number);
			constructor(arg1: string, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean, arg9: android.text.TextUtils.TruncateAt, arg10: number);
			constructor(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean);
			constructor(arg1: string, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean);
			static class: java.lang.Class<android.text.BoringLayout>;
			getEllipsizedWidth(): number;
			getParagraphDirection(arg1: number): number;
			getLineDirections(arg1: number): android.text.Layout.Directions;
			getEllipsisStart(arg1: number): number;
			getLineDescent(arg1: number): number;
			getEllipsisCount(arg1: number): number;
			getLineContainsTab(arg1: number): boolean;
			getBottomPadding(): number;
			getLineTop(arg1: number): number;
			getLineStart(arg1: number): number;
			getLineMax(arg1: number): number;
			getTopPadding(): number;
			static isBoring(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: android.text.BoringLayout.Metrics): android.text.BoringLayout.Metrics;
			static isBoring(arg1: string, arg2: android.text.TextPaint, arg3: android.text.BoringLayout.Metrics): android.text.BoringLayout.Metrics;
			static isBoring(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint): android.text.BoringLayout.Metrics;
			static isBoring(arg1: string, arg2: android.text.TextPaint): android.text.BoringLayout.Metrics;
			ellipsized(arg1: number, arg2: number): void;
			replaceOrMake(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean, arg9: android.text.TextUtils.TruncateAt, arg10: number): android.text.BoringLayout;
			replaceOrMake(arg1: string, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean, arg9: android.text.TextUtils.TruncateAt, arg10: number): android.text.BoringLayout;
			replaceOrMake(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean): android.text.BoringLayout;
			replaceOrMake(arg1: string, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean): android.text.BoringLayout;
			static make(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean, arg9: android.text.TextUtils.TruncateAt, arg10: number): android.text.BoringLayout;
			static make(arg1: string, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean, arg9: android.text.TextUtils.TruncateAt, arg10: number): android.text.BoringLayout;
			static make(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean): android.text.BoringLayout;
			static make(arg1: string, arg2: android.text.TextPaint, arg3: number, arg4: android.text.Layout.Alignment, arg5: native.Float, arg6: native.Float, arg7: android.text.BoringLayout.Metrics, arg8: boolean): android.text.BoringLayout;
			getHeight(): number;
			draw(arg1: android.graphics.Canvas, arg2: android.graphics.Path, arg3: android.graphics.Paint, arg4: number): void;
			getLineCount(): number;
			draw(arg1: android.graphics.Canvas): void;
		}
		export module BoringLayout {
			export class Metrics extends android.graphics.Paint.FontMetricsInt {
				constructor();
				width: number;
				static class: java.lang.Class<android.text.BoringLayout.Metrics>;
				toString(): string;
			}
		}
		export class LoginFilter extends java.lang.Object implements android.text.IInputFilter {
			static class: java.lang.Class<android.text.LoginFilter>;
			onStart(): void;
			onStop(): void;
			onInvalidCharacter(arg1: string): void;
			isAllowed(arg1: string): boolean;
			filter(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
			filter(arg1: string, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
		}
		export module LoginFilter {
			export class UsernameFilterGeneric extends android.text.LoginFilter {
				constructor(arg1: boolean);
				constructor();
				static class: java.lang.Class<android.text.LoginFilter.UsernameFilterGeneric>;
				isAllowed(arg1: string): boolean;
			}
			export class UsernameFilterGMail extends android.text.LoginFilter {
				constructor(arg1: boolean);
				constructor();
				static class: java.lang.Class<android.text.LoginFilter.UsernameFilterGMail>;
				isAllowed(arg1: string): boolean;
			}
			export class PasswordFilterGMail extends android.text.LoginFilter {
				constructor(arg1: boolean);
				constructor();
				static class: java.lang.Class<android.text.LoginFilter.PasswordFilterGMail>;
				isAllowed(arg1: string): boolean;
			}
		}
		export class TextUtils extends java.lang.Object {
			static CHAR_SEQUENCE_CREATOR: android.os.Parcelable.ICreator<java.lang.ICharSequence>;
			static CAP_MODE_CHARACTERS: number;
			static CAP_MODE_WORDS: number;
			static CAP_MODE_SENTENCES: number;
			static class: java.lang.Class<android.text.TextUtils>;
			static writeToParcel(arg1: java.lang.ICharSequence, arg2: android.os.Parcel, arg3: number): void;
			static writeToParcel(arg1: string, arg2: android.os.Parcel, arg3: number): void;
			static ellipsize(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: native.Float, arg4: android.text.TextUtils.TruncateAt): java.lang.ICharSequence;
			static ellipsize(arg1: string, arg2: android.text.TextPaint, arg3: native.Float, arg4: android.text.TextUtils.TruncateAt): java.lang.ICharSequence;
			static ellipsize(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: native.Float, arg4: android.text.TextUtils.TruncateAt, arg5: boolean, arg6: android.text.TextUtils.IEllipsizeCallback): java.lang.ICharSequence;
			static ellipsize(arg1: string, arg2: android.text.TextPaint, arg3: native.Float, arg4: android.text.TextUtils.TruncateAt, arg5: boolean, arg6: android.text.TextUtils.IEllipsizeCallback): java.lang.ICharSequence;
			static commaEllipsize(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint, arg3: native.Float, arg4: java.lang.String, arg5: java.lang.String): java.lang.ICharSequence;
			static commaEllipsize(arg1: string, arg2: android.text.TextPaint, arg3: native.Float, arg4: string, arg5: string): java.lang.ICharSequence;
			static getOffsetAfter(arg1: java.lang.ICharSequence, arg2: number): number;
			static getOffsetAfter(arg1: string, arg2: number): number;
			static stringOrSpannedString(arg1: java.lang.ICharSequence): java.lang.ICharSequence;
			static stringOrSpannedString(arg1: string): java.lang.ICharSequence;
			static getTrimmedLength(arg1: java.lang.ICharSequence): number;
			static getTrimmedLength(arg1: string): number;
			static expandTemplate(arg1: java.lang.ICharSequence, arg2: native.Array<java.lang.ICharSequence>): java.lang.ICharSequence;
			static expandTemplate(arg1: string, arg2: native.Array<java.lang.ICharSequence>): java.lang.ICharSequence;
			static getOffsetBefore(arg1: java.lang.ICharSequence, arg2: number): number;
			static getOffsetBefore(arg1: string, arg2: number): number;
			static getLayoutDirectionFromLocale(arg1: java.util.Locale): number;
			static isGraphic(arg1: string): boolean;
			static isGraphic(arg1: java.lang.ICharSequence): boolean;
			static getReverse(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.lang.ICharSequence;
			static getReverse(arg1: string, arg2: number, arg3: number): java.lang.ICharSequence;
			static dumpSpans(arg1: java.lang.ICharSequence, arg2: android.util.IPrinter, arg3: java.lang.String): void;
			static dumpSpans(arg1: string, arg2: android.util.IPrinter, arg3: string): void;
			static isDigitsOnly(arg1: java.lang.ICharSequence): boolean;
			static isDigitsOnly(arg1: string): boolean;
			static getCapsMode(arg1: java.lang.ICharSequence, arg2: number, arg3: number): number;
			static getCapsMode(arg1: string, arg2: number, arg3: number): number;
			static htmlEncode(arg1: java.lang.String): string;
			static htmlEncode(arg1: string): string;
			static copySpansFrom(arg1: android.text.ISpanned, arg2: number, arg3: number, arg4: java.lang.Class<any>, arg5: android.text.ISpannable, arg6: number): void;
			static equals(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence): boolean;
			static equals(arg1: string, arg2: string): boolean;
			static concat(arg1: native.Array<java.lang.ICharSequence>): java.lang.ICharSequence;
			static getChars(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: native.Array<string>, arg5: number): void;
			static getChars(arg1: string, arg2: number, arg3: number, arg4: native.Array<string>, arg5: number): void;
			static indexOf(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence, arg3: number): number;
			static indexOf(arg1: string, arg2: string, arg3: number): number;
			static indexOf(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence): number;
			static indexOf(arg1: string, arg2: string): number;
			static indexOf(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence, arg3: number, arg4: number): number;
			static indexOf(arg1: string, arg2: string, arg3: number, arg4: number): number;
			static indexOf(arg1: java.lang.ICharSequence, arg2: string, arg3: number, arg4: number): number;
			static indexOf(arg1: java.lang.ICharSequence, arg2: string, arg3: number): number;
			static indexOf(arg1: java.lang.ICharSequence, arg2: string): number;
			static isEmpty(arg1: java.lang.ICharSequence): boolean;
			static isEmpty(arg1: string): boolean;
			static lastIndexOf(arg1: java.lang.ICharSequence, arg2: string): number;
			static lastIndexOf(arg1: string, arg2: string): number;
			static lastIndexOf(arg1: java.lang.ICharSequence, arg2: string, arg3: number): number;
			static lastIndexOf(arg1: string, arg2: string, arg3: number): number;
			static lastIndexOf(arg1: java.lang.ICharSequence, arg2: string, arg3: number, arg4: number): number;
			static lastIndexOf(arg1: string, arg2: string, arg3: number, arg4: number): number;
			static regionMatches(arg1: java.lang.ICharSequence, arg2: number, arg3: java.lang.ICharSequence, arg4: number, arg5: number): boolean;
			static regionMatches(arg1: string, arg2: number, arg3: string, arg4: number, arg5: number): boolean;
			static replace(arg1: java.lang.ICharSequence, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.ICharSequence>): java.lang.ICharSequence;
			static replace(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.ICharSequence>): java.lang.ICharSequence;
			static split(arg1: java.lang.String, arg2: java.util.regex.Pattern): native.Array<java.lang.String>;
			static split(arg1: string, arg2: java.util.regex.Pattern): native.Array<java.lang.String>;
			static split(arg1: java.lang.String, arg2: java.lang.String): native.Array<java.lang.String>;
			static split(arg1: string, arg2: string): native.Array<java.lang.String>;
			static substring(arg1: java.lang.ICharSequence, arg2: number, arg3: number): string;
			static substring(arg1: string, arg2: number, arg3: number): string;
			static join(arg1: java.lang.ICharSequence, arg2: native.Array<any>): string;
			static join(arg1: string, arg2: native.Array<any>): string;
			static join(arg1: java.lang.ICharSequence, arg2: java.lang.IIterable<any>): string;
			static join(arg1: string, arg2: java.lang.IIterable<any>): string;
			equals(arg1: any): boolean;
		}
		export module TextUtils {
			export interface IStringSplitter extends java.lang.IIterable<string> {
				setString(arg1: string): void;
				iterator(): java.util.IIterator<string>;
			}
			export class EllipsizeCallback implements android.text.TextUtils.IEllipsizeCallback {
				constructor(implementation: android.text.TextUtils.IEllipsizeCallback);
				ellipsized(arg1: number, arg2: number): void;
			}
			export class SimpleStringSplitter extends java.lang.Object implements android.text.TextUtils.IStringSplitter, java.util.IIterator<string> {
				constructor(arg1: string);
				static class: java.lang.Class<android.text.TextUtils.SimpleStringSplitter>;
				hasNext(): boolean;
				iterator(): java.util.IIterator<string>;
				next(): any;
				remove(): void;
				setString(arg1: java.lang.String): void;
				setString(arg1: string): void;
			}
			export enum TruncateAt {
				END,
				MARQUEE,
				MIDDLE,
				START
			}
			export module TruncateAt {
				export function valueOf(arg1: java.lang.String): android.text.TextUtils.TruncateAt;
				export function valueOf(arg1: string): android.text.TextUtils.TruncateAt;
				export function values(): native.Array<android.text.TextUtils.TruncateAt>;
			}
			export class StringSplitter implements java.lang.IIterable<string>, android.text.TextUtils.IStringSplitter {
				constructor(implementation: android.text.TextUtils.IStringSplitter);
				setString(arg1: java.lang.String): void;
				setString(arg1: string): void;
				iterator(): java.util.IIterator<string>;
			}
			export interface IEllipsizeCallback {
				ellipsized(arg1: number, arg2: number): void;
			}
		}
		export class TextWatcher implements android.text.INoCopySpan, android.text.ITextWatcher {
			constructor(implementation: android.text.ITextWatcher);
			beforeTextChanged(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number): void;
			beforeTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
			afterTextChanged(arg1: android.text.IEditable): void;
			onTextChanged(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number): void;
			onTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
		}
		export interface IGetChars extends java.lang.ICharSequence {
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
		}
		export class SpannedString extends android.text.SpannableStringInternal implements java.lang.ICharSequence, android.text.IGetChars, android.text.ISpanned {
			constructor(arg1: java.lang.ICharSequence);
			constructor(arg1: string);
			static class: java.lang.Class<android.text.SpannedString>;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans(arg1: number, arg2: number, arg3: java.lang.Class<any>): native.Array<any>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			static valueOf(arg1: java.lang.ICharSequence): android.text.SpannedString;
			static valueOf(arg1: string): android.text.SpannedString;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
		}
		export class InputType implements android.text.IInputType {
			constructor(implementation: android.text.IInputType);
			static TYPE_MASK_CLASS: number;
			static TYPE_MASK_VARIATION: number;
			static TYPE_MASK_FLAGS: number;
			static TYPE_NULL: number;
			static TYPE_CLASS_TEXT: number;
			static TYPE_TEXT_FLAG_CAP_CHARACTERS: number;
			static TYPE_TEXT_FLAG_CAP_WORDS: number;
			static TYPE_TEXT_FLAG_CAP_SENTENCES: number;
			static TYPE_TEXT_FLAG_AUTO_CORRECT: number;
			static TYPE_TEXT_FLAG_AUTO_COMPLETE: number;
			static TYPE_TEXT_FLAG_MULTI_LINE: number;
			static TYPE_TEXT_FLAG_IME_MULTI_LINE: number;
			static TYPE_TEXT_FLAG_NO_SUGGESTIONS: number;
			static TYPE_TEXT_VARIATION_NORMAL: number;
			static TYPE_TEXT_VARIATION_URI: number;
			static TYPE_TEXT_VARIATION_EMAIL_ADDRESS: number;
			static TYPE_TEXT_VARIATION_EMAIL_SUBJECT: number;
			static TYPE_TEXT_VARIATION_SHORT_MESSAGE: number;
			static TYPE_TEXT_VARIATION_LONG_MESSAGE: number;
			static TYPE_TEXT_VARIATION_PERSON_NAME: number;
			static TYPE_TEXT_VARIATION_POSTAL_ADDRESS: number;
			static TYPE_TEXT_VARIATION_PASSWORD: number;
			static TYPE_TEXT_VARIATION_VISIBLE_PASSWORD: number;
			static TYPE_TEXT_VARIATION_WEB_EDIT_TEXT: number;
			static TYPE_TEXT_VARIATION_FILTER: number;
			static TYPE_TEXT_VARIATION_PHONETIC: number;
			static TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS: number;
			static TYPE_TEXT_VARIATION_WEB_PASSWORD: number;
			static TYPE_CLASS_NUMBER: number;
			static TYPE_NUMBER_FLAG_SIGNED: number;
			static TYPE_NUMBER_FLAG_DECIMAL: number;
			static TYPE_NUMBER_VARIATION_NORMAL: number;
			static TYPE_NUMBER_VARIATION_PASSWORD: number;
			static TYPE_CLASS_PHONE: number;
			static TYPE_CLASS_DATETIME: number;
			static TYPE_DATETIME_VARIATION_NORMAL: number;
			static TYPE_DATETIME_VARIATION_DATE: number;
			static TYPE_DATETIME_VARIATION_TIME: number;
		}
		export interface IInputType {
		}
		export module IInputType {
			var TYPE_MASK_CLASS: number;
			var TYPE_MASK_VARIATION: number;
			var TYPE_MASK_FLAGS: number;
			var TYPE_NULL: number;
			var TYPE_CLASS_TEXT: number;
			var TYPE_TEXT_FLAG_CAP_CHARACTERS: number;
			var TYPE_TEXT_FLAG_CAP_WORDS: number;
			var TYPE_TEXT_FLAG_CAP_SENTENCES: number;
			var TYPE_TEXT_FLAG_AUTO_CORRECT: number;
			var TYPE_TEXT_FLAG_AUTO_COMPLETE: number;
			var TYPE_TEXT_FLAG_MULTI_LINE: number;
			var TYPE_TEXT_FLAG_IME_MULTI_LINE: number;
			var TYPE_TEXT_FLAG_NO_SUGGESTIONS: number;
			var TYPE_TEXT_VARIATION_NORMAL: number;
			var TYPE_TEXT_VARIATION_URI: number;
			var TYPE_TEXT_VARIATION_EMAIL_ADDRESS: number;
			var TYPE_TEXT_VARIATION_EMAIL_SUBJECT: number;
			var TYPE_TEXT_VARIATION_SHORT_MESSAGE: number;
			var TYPE_TEXT_VARIATION_LONG_MESSAGE: number;
			var TYPE_TEXT_VARIATION_PERSON_NAME: number;
			var TYPE_TEXT_VARIATION_POSTAL_ADDRESS: number;
			var TYPE_TEXT_VARIATION_PASSWORD: number;
			var TYPE_TEXT_VARIATION_VISIBLE_PASSWORD: number;
			var TYPE_TEXT_VARIATION_WEB_EDIT_TEXT: number;
			var TYPE_TEXT_VARIATION_FILTER: number;
			var TYPE_TEXT_VARIATION_PHONETIC: number;
			var TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS: number;
			var TYPE_TEXT_VARIATION_WEB_PASSWORD: number;
			var TYPE_CLASS_NUMBER: number;
			var TYPE_NUMBER_FLAG_SIGNED: number;
			var TYPE_NUMBER_FLAG_DECIMAL: number;
			var TYPE_NUMBER_VARIATION_NORMAL: number;
			var TYPE_NUMBER_VARIATION_PASSWORD: number;
			var TYPE_CLASS_PHONE: number;
			var TYPE_CLASS_DATETIME: number;
			var TYPE_DATETIME_VARIATION_NORMAL: number;
			var TYPE_DATETIME_VARIATION_DATE: number;
			var TYPE_DATETIME_VARIATION_TIME: number;
		}
		export class InputFilter implements android.text.IInputFilter {
			constructor(implementation: android.text.IInputFilter);
			filter(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
			filter(arg1: string, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
		}
		export module InputFilter {
			export class LengthFilter extends java.lang.Object implements android.text.IInputFilter {
				constructor(arg1: number);
				static class: java.lang.Class<android.text.InputFilter.LengthFilter>;
				filter(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
				filter(arg1: string, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
			}
			export class AllCaps extends java.lang.Object implements android.text.IInputFilter {
				constructor();
				static class: java.lang.Class<android.text.InputFilter.AllCaps>;
				filter(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
				filter(arg1: string, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
			}
		}
		export class NoCopySpan implements android.text.INoCopySpan {
			constructor(implementation: android.text.INoCopySpan);
		}
		export module NoCopySpan {
			export class Concrete extends java.lang.Object implements android.text.INoCopySpan {
				constructor();
				static class: java.lang.Class<android.text.NoCopySpan.Concrete>;
			}
		}
		export interface ITextWatcher extends android.text.INoCopySpan {
			beforeTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
			afterTextChanged(arg1: android.text.IEditable): void;
			onTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
		}
		export class AutoText extends java.lang.Object {
			static class: java.lang.Class<android.text.AutoText>;
			static get(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.view.View): string;
			static get(arg1: string, arg2: number, arg3: number, arg4: android.view.View): string;
			static getSize(arg1: android.view.View): number;
		}
		export module format {
			export class Time extends java.lang.Object {
				constructor(arg1: android.text.format.Time);
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static TIMEZONE_UTC: java.lang.String;
				static EPOCH_JULIAN_DAY: number;
				static MONDAY_BEFORE_JULIAN_EPOCH: number;
				allDay: boolean;
				second: number;
				minute: number;
				hour: number;
				monthDay: number;
				month: number;
				year: number;
				weekDay: number;
				yearDay: number;
				isDst: number;
				gmtoff: native.Long;
				timezone: java.lang.String;
				static SECOND: number;
				static MINUTE: number;
				static HOUR: number;
				static MONTH_DAY: number;
				static MONTH: number;
				static YEAR: number;
				static WEEK_DAY: number;
				static YEAR_DAY: number;
				static WEEK_NUM: number;
				static SUNDAY: number;
				static MONDAY: number;
				static TUESDAY: number;
				static WEDNESDAY: number;
				static THURSDAY: number;
				static FRIDAY: number;
				static SATURDAY: number;
				static class: java.lang.Class<android.text.format.Time>;
				toMillis(arg1: boolean): any;
				static getWeeksSinceEpochFromJulianDay(arg1: number, arg2: number): number;
				static getJulianMondayFromWeeksSinceEpoch(arg1: number): number;
				switchTimezone(arg1: java.lang.String): void;
				switchTimezone(arg1: string): void;
				static getCurrentTimezone(): string;
				format3339(arg1: boolean): string;
				static isEpoch(arg1: android.text.format.Time): boolean;
				setJulianDay(arg1: number): any;
				format2445(): string;
				setToNow(): void;
				parse3339(arg1: java.lang.String): boolean;
				parse3339(arg1: string): boolean;
				static getJulianDay(arg1: native.Long, arg2: native.Long): number;
				toString(): string;
				static compare(arg1: android.text.format.Time, arg2: android.text.format.Time): number;
				format(arg1: java.lang.String): string;
				format(arg1: string): string;
				clear(arg1: java.lang.String): void;
				clear(arg1: string): void;
				set(arg1: native.Long): void;
				set(arg1: number, arg2: number, arg3: number): void;
				set(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
				set(arg1: android.text.format.Time): void;
				normalize(arg1: boolean): any;
				parse(arg1: java.lang.String): boolean;
				parse(arg1: string): boolean;
				after(arg1: android.text.format.Time): boolean;
				before(arg1: android.text.format.Time): boolean;
				getActualMaximum(arg1: number): number;
				getWeekNumber(): number;
			}
			export class DateFormat extends java.lang.Object {
				constructor();
				static QUOTE: string;
				static AM_PM: string;
				static CAPITAL_AM_PM: string;
				static DATE: string;
				static DAY: string;
				static HOUR: string;
				static HOUR_OF_DAY: string;
				static MINUTE: string;
				static MONTH: string;
				static STANDALONE_MONTH: string;
				static SECONDS: string;
				static TIME_ZONE: string;
				static YEAR: string;
				static class: java.lang.Class<android.text.format.DateFormat>;
				static getLongDateFormat(arg1: android.content.Context): java.text.DateFormat;
				static is24HourFormat(arg1: android.content.Context): boolean;
				static getMediumDateFormat(arg1: android.content.Context): java.text.DateFormat;
				static getDateFormatOrder(arg1: android.content.Context): native.Array<string>;
				static getDateFormat(arg1: android.content.Context): java.text.DateFormat;
				static getTimeFormat(arg1: android.content.Context): java.text.DateFormat;
				static format(arg1: java.lang.ICharSequence, arg2: java.util.Calendar): java.lang.ICharSequence;
				static format(arg1: string, arg2: java.util.Calendar): java.lang.ICharSequence;
				static format(arg1: java.lang.ICharSequence, arg2: java.util.Date): java.lang.ICharSequence;
				static format(arg1: string, arg2: java.util.Date): java.lang.ICharSequence;
				static format(arg1: java.lang.ICharSequence, arg2: native.Long): java.lang.ICharSequence;
				static format(arg1: string, arg2: native.Long): java.lang.ICharSequence;
			}
			export class Formatter extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.text.format.Formatter>;
				static formatShortFileSize(arg1: android.content.Context, arg2: native.Long): string;
				static formatFileSize(arg1: android.content.Context, arg2: native.Long): string;
				static formatIpAddress(arg1: number): string;
			}
			export class DateUtils extends java.lang.Object {
				constructor();
				static SECOND_IN_MILLIS: native.Long;
				static MINUTE_IN_MILLIS: native.Long;
				static HOUR_IN_MILLIS: native.Long;
				static DAY_IN_MILLIS: native.Long;
				static WEEK_IN_MILLIS: native.Long;
				static YEAR_IN_MILLIS: native.Long;
				static FORMAT_SHOW_TIME: number;
				static FORMAT_SHOW_WEEKDAY: number;
				static FORMAT_SHOW_YEAR: number;
				static FORMAT_NO_YEAR: number;
				static FORMAT_SHOW_DATE: number;
				static FORMAT_NO_MONTH_DAY: number;
				static FORMAT_12HOUR: number;
				static FORMAT_24HOUR: number;
				static FORMAT_CAP_AMPM: number;
				static FORMAT_NO_NOON: number;
				static FORMAT_CAP_NOON: number;
				static FORMAT_NO_MIDNIGHT: number;
				static FORMAT_CAP_MIDNIGHT: number;
				static FORMAT_UTC: number;
				static FORMAT_ABBREV_TIME: number;
				static FORMAT_ABBREV_WEEKDAY: number;
				static FORMAT_ABBREV_MONTH: number;
				static FORMAT_NUMERIC_DATE: number;
				static FORMAT_ABBREV_RELATIVE: number;
				static FORMAT_ABBREV_ALL: number;
				static FORMAT_CAP_NOON_MIDNIGHT: number;
				static FORMAT_NO_NOON_MIDNIGHT: number;
				static HOUR_MINUTE_24: java.lang.String;
				static MONTH_FORMAT: java.lang.String;
				static ABBREV_MONTH_FORMAT: java.lang.String;
				static NUMERIC_MONTH_FORMAT: java.lang.String;
				static MONTH_DAY_FORMAT: java.lang.String;
				static YEAR_FORMAT: java.lang.String;
				static YEAR_FORMAT_TWO_DIGITS: java.lang.String;
				static WEEKDAY_FORMAT: java.lang.String;
				static ABBREV_WEEKDAY_FORMAT: java.lang.String;
				static sameYearTable: native.Array<number>;
				static sameMonthTable: native.Array<number>;
				static LENGTH_LONG: number;
				static LENGTH_MEDIUM: number;
				static LENGTH_SHORT: number;
				static LENGTH_SHORTER: number;
				static LENGTH_SHORTEST: number;
				static class: java.lang.Class<android.text.format.DateUtils>;
				static getDayOfWeekString(arg1: number, arg2: number): string;
				static getMonthString(arg1: number, arg2: number): string;
				static formatElapsedTime(arg1: native.Long): string;
				static formatElapsedTime(arg1: java.lang.StringBuilder, arg2: native.Long): string;
				static formatSameDayTime(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number): java.lang.ICharSequence;
				static formatDateRange(arg1: android.content.Context, arg2: java.util.Formatter, arg3: native.Long, arg4: native.Long, arg5: number): java.util.Formatter;
				static formatDateRange(arg1: android.content.Context, arg2: native.Long, arg3: native.Long, arg4: number): string;
				static formatDateRange(arg1: android.content.Context, arg2: java.util.Formatter, arg3: native.Long, arg4: native.Long, arg5: number, arg6: java.lang.String): java.util.Formatter;
				static formatDateRange(arg1: android.content.Context, arg2: java.util.Formatter, arg3: native.Long, arg4: native.Long, arg5: number, arg6: string): java.util.Formatter;
				static formatDateTime(arg1: android.content.Context, arg2: native.Long, arg3: number): string;
				static getRelativeTimeSpanString(arg1: android.content.Context, arg2: native.Long, arg3: boolean): java.lang.ICharSequence;
				static getRelativeTimeSpanString(arg1: native.Long): java.lang.ICharSequence;
				static getRelativeTimeSpanString(arg1: native.Long, arg2: native.Long, arg3: native.Long): java.lang.ICharSequence;
				static getRelativeTimeSpanString(arg1: native.Long, arg2: native.Long, arg3: native.Long, arg4: number): java.lang.ICharSequence;
				static getRelativeTimeSpanString(arg1: android.content.Context, arg2: native.Long): java.lang.ICharSequence;
				static getRelativeDateTimeString(arg1: android.content.Context, arg2: native.Long, arg3: native.Long, arg4: native.Long, arg5: number): java.lang.ICharSequence;
				static getAMPMString(arg1: number): string;
				static isToday(arg1: native.Long): boolean;
			}
		}
		export class Spanned implements java.lang.ICharSequence, android.text.ISpanned {
			constructor(implementation: android.text.ISpanned);
			static SPAN_POINT_MARK_MASK: number;
			static SPAN_MARK_MARK: number;
			static SPAN_MARK_POINT: number;
			static SPAN_POINT_MARK: number;
			static SPAN_POINT_POINT: number;
			static SPAN_PARAGRAPH: number;
			static SPAN_INCLUSIVE_EXCLUSIVE: number;
			static SPAN_INCLUSIVE_INCLUSIVE: number;
			static SPAN_EXCLUSIVE_EXCLUSIVE: number;
			static SPAN_EXCLUSIVE_INCLUSIVE: number;
			static SPAN_COMPOSING: number;
			static SPAN_INTERMEDIATE: number;
			static SPAN_USER_SHIFT: number;
			static SPAN_USER: number;
			static SPAN_PRIORITY_SHIFT: number;
			static SPAN_PRIORITY: number;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans<T>(arg1: number, arg2: number, arg3: java.lang.Class<T>): native.Array<T>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
		}
		export interface ISpanWatcher extends android.text.INoCopySpan {
			onSpanAdded(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number): void;
			onSpanRemoved(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number): void;
			onSpanChanged(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number, arg5: number, arg6: number): void;
		}
		export class SpannableString extends android.text.SpannableStringInternal implements java.lang.ICharSequence, android.text.IGetChars, android.text.ISpannable {
			constructor(arg1: java.lang.ICharSequence);
			constructor(arg1: string);
			static class: java.lang.Class<android.text.SpannableString>;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans(arg1: number, arg2: number, arg3: java.lang.Class<any>): native.Array<any>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
			setSpan(arg1: any, arg2: number, arg3: number, arg4: number): void;
			removeSpan(arg1: any): void;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			static valueOf(arg1: java.lang.ICharSequence): android.text.SpannableString;
			static valueOf(arg1: string): android.text.SpannableString;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
		}
		export class Editable implements java.lang.ICharSequence, android.text.IGetChars, android.text.ISpannable, java.lang.IAppendable, android.text.IEditable {
			constructor(implementation: android.text.IEditable);
			Filters: native.Array<android.text.IInputFilter>;
			setFilters(arg1: native.Array<android.text.IInputFilter>): void;
			getFilters(): native.Array<android.text.IInputFilter>;
			clearSpans(): void;
			append(arg1: java.lang.ICharSequence): android.text.IEditable;
			append(arg1: string): android.text.IEditable;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): android.text.IEditable;
			append(arg1: string, arg2: number, arg3: number): android.text.IEditable;
			replace(arg1: number, arg2: number, arg3: java.lang.ICharSequence, arg4: number, arg5: number): android.text.IEditable;
			replace(arg1: number, arg2: number, arg3: string, arg4: number, arg5: number): android.text.IEditable;
			replace(arg1: number, arg2: number, arg3: java.lang.ICharSequence): android.text.IEditable;
			replace(arg1: number, arg2: number, arg3: string): android.text.IEditable;
			clear(): void;
			delete(arg1: number, arg2: number): android.text.IEditable;
			insert(arg1: number, arg2: java.lang.ICharSequence): android.text.IEditable;
			insert(arg1: number, arg2: string): android.text.IEditable;
			insert(arg1: number, arg2: java.lang.ICharSequence, arg3: number, arg4: number): android.text.IEditable;
			insert(arg1: number, arg2: string, arg3: number, arg4: number): android.text.IEditable;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			setSpan(arg1: any, arg2: number, arg3: number, arg4: number): void;
			removeSpan(arg1: any): void;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans<T>(arg1: number, arg2: number, arg3: java.lang.Class<T>): native.Array<T>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
		}
		export module Editable {
			export class Factory extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.text.Editable.Factory>;
				newEditable(arg1: java.lang.ICharSequence): android.text.IEditable;
				newEditable(arg1: string): android.text.IEditable;
				static getInstance(): android.text.Editable.Factory;
			}
		}
		export class TextPaint extends android.graphics.Paint {
			constructor(arg1: android.graphics.Paint);
			constructor(arg1: number);
			constructor();
			bgColor: number;
			baselineShift: number;
			linkColor: number;
			drawableState: native.Array<number>;
			density: native.Float;
			static class: java.lang.Class<android.text.TextPaint>;
			set(arg1: android.text.TextPaint): void;
			set(arg1: android.graphics.Paint): void;
		}
		export class Layout extends java.lang.Object {
			static DIR_LEFT_TO_RIGHT: number;
			static DIR_RIGHT_TO_LEFT: number;
			static class: java.lang.Class<android.text.Layout>;
			getLineBounds(arg1: number, arg2: android.graphics.Rect): number;
			getEllipsizedWidth(): number;
			increaseWidthTo(arg1: number): void;
			getSpacingMultiplier(): number;
			static getDesiredWidth(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.TextPaint): number;
			static getDesiredWidth(arg1: string, arg2: number, arg3: number, arg4: android.text.TextPaint): number;
			static getDesiredWidth(arg1: java.lang.ICharSequence, arg2: android.text.TextPaint): number;
			static getDesiredWidth(arg1: string, arg2: android.text.TextPaint): number;
			getLineForVertical(arg1: number): number;
			getParagraphDirection(arg1: number): number;
			getLineDirections(arg1: number): android.text.Layout.Directions;
			getParagraphRight(arg1: number): number;
			getEllipsisStart(arg1: number): number;
			getOffsetToLeftOf(arg1: number): number;
			getLineForOffset(arg1: number): number;
			getParagraphAlignment(arg1: number): android.text.Layout.Alignment;
			getLineDescent(arg1: number): number;
			getLineBaseline(arg1: number): number;
			getEllipsisCount(arg1: number): number;
			getPrimaryHorizontal(arg1: number): number;
			getLineVisibleEnd(arg1: number): number;
			getLineContainsTab(arg1: number): boolean;
			getBottomPadding(): number;
			getOffsetToRightOf(arg1: number): number;
			getParagraphLeft(arg1: number): number;
			getSecondaryHorizontal(arg1: number): number;
			getOffsetForHorizontal(arg1: number, arg2: native.Float): number;
			getLineTop(arg1: number): number;
			getLineLeft(arg1: number): number;
			getLineBottom(arg1: number): number;
			getLineStart(arg1: number): number;
			isRtlCharAt(arg1: number): boolean;
			getLineRight(arg1: number): number;
			getCursorPath(arg1: number, arg2: android.graphics.Path, arg3: java.lang.ICharSequence): void;
			getCursorPath(arg1: number, arg2: android.graphics.Path, arg3: string): void;
			getLineAscent(arg1: number): number;
			getLineMax(arg1: number): number;
			getTopPadding(): number;
			getLineEnd(arg1: number): number;
			getSpacingAdd(): number;
			getHeight(): number;
			getWidth(): number;
			getAlignment(): android.text.Layout.Alignment;
			getText(): java.lang.ICharSequence;
			draw(arg1: android.graphics.Canvas, arg2: android.graphics.Path, arg3: android.graphics.Paint, arg4: number): void;
			draw(arg1: android.graphics.Canvas): void;
			getLineWidth(arg1: number): number;
			getPaint(): android.text.TextPaint;
			getLineCount(): number;
			getSelectionPath(arg1: number, arg2: number, arg3: android.graphics.Path): void;
		}
		export module Layout {
			export enum Alignment {
				ALIGN_CENTER,
				ALIGN_NORMAL,
				ALIGN_OPPOSITE
			}
			export module Alignment {
				export function valueOf(arg1: java.lang.String): android.text.Layout.Alignment;
				export function valueOf(arg1: string): android.text.Layout.Alignment;
				export function values(): native.Array<android.text.Layout.Alignment>;
			}
			export class Directions extends java.lang.Object {
				static class: java.lang.Class<android.text.Layout.Directions>;
			}
		}
		export interface IInputFilter {
			filter(arg1: string, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
		}
		export class Annotation extends java.lang.Object implements android.text.IParcelableSpan {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: android.os.Parcel);
			static class: java.lang.Class<android.text.Annotation>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getSpanTypeId(): number;
			getValue(): string;
			getKey(): string;
		}
		export class GetChars implements java.lang.ICharSequence, android.text.IGetChars {
			constructor(implementation: android.text.IGetChars);
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
		}
		export class ParcelableSpan implements android.os.IParcelable, android.text.IParcelableSpan {
			constructor(implementation: android.text.IParcelableSpan);
			getSpanTypeId(): number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
		}
		export class Spannable implements android.text.ISpanned, android.text.ISpannable {
			constructor(implementation: android.text.ISpannable);
			setSpan(arg1: any, arg2: number, arg3: number, arg4: number): void;
			removeSpan(arg1: any): void;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans<T>(arg1: number, arg2: number, arg3: java.lang.Class<T>): native.Array<T>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
		}
		export module Spannable {
			export class Factory extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.text.Spannable.Factory>;
				newSpannable(arg1: java.lang.ICharSequence): android.text.ISpannable;
				newSpannable(arg1: string): android.text.ISpannable;
				static getInstance(): android.text.Spannable.Factory;
			}
		}
		export module method {
			export class QwertyKeyListener extends android.text.method.BaseKeyListener {
				constructor(arg1: android.text.method.TextKeyListener.Capitalize, arg2: boolean);
				static class: java.lang.Class<android.text.method.QwertyKeyListener>;
				onKeyDown(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				getInputType(): number;
				static getInstanceForFullKeyboard(): android.text.method.QwertyKeyListener;
				static markAsReplaced(arg1: android.text.ISpannable, arg2: number, arg3: number, arg4: java.lang.String): void;
				static markAsReplaced(arg1: android.text.ISpannable, arg2: number, arg3: number, arg4: string): void;
				static getInstance(arg1: boolean, arg2: android.text.method.TextKeyListener.Capitalize): android.text.method.QwertyKeyListener;
			}
			export class BaseKeyListener extends android.text.method.MetaKeyKeyListener implements android.text.method.IKeyListener {
				constructor();
				static class: java.lang.Class<android.text.method.BaseKeyListener>;
				onKeyDown(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyOther(arg1: android.view.View, arg2: android.text.IEditable, arg3: android.view.KeyEvent): boolean;
				forwardDelete(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				backspace(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyUp(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				getInputType(): number;
				clearMetaKeyState(arg1: android.view.View, arg2: android.text.IEditable, arg3: number): void;
				static clearMetaKeyState(arg1: android.text.IEditable, arg2: number): void;
				clearMetaKeyState(arg1: native.Long, arg2: number): any;
			}
			export class BaseMovementMethod extends java.lang.Object implements android.text.method.IMovementMethod {
				constructor();
				static class: java.lang.Class<android.text.method.BaseMovementMethod>;
				onKeyUp(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onGenericMotionEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTrackballEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTouchEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onKeyOther(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.KeyEvent): boolean;
				onTakeFocus(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number): void;
				canSelectArbitrarily(): boolean;
				initialize(arg1: android.widget.TextView, arg2: android.text.ISpannable): void;
			}
			export class PasswordTransformationMethod extends java.lang.Object implements android.text.method.ITransformationMethod, android.text.ITextWatcher {
				constructor();
				static class: java.lang.Class<android.text.method.PasswordTransformationMethod>;
				onFocusChanged(arg1: android.view.View, arg2: java.lang.ICharSequence, arg3: boolean, arg4: number, arg5: android.graphics.Rect): void;
				onFocusChanged(arg1: android.view.View, arg2: string, arg3: boolean, arg4: number, arg5: android.graphics.Rect): void;
				beforeTextChanged(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number): void;
				beforeTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
				afterTextChanged(arg1: android.text.IEditable): void;
				onTextChanged(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: number): void;
				onTextChanged(arg1: string, arg2: number, arg3: number, arg4: number): void;
				getTransformation(arg1: java.lang.ICharSequence, arg2: android.view.View): java.lang.ICharSequence;
				getTransformation(arg1: string, arg2: android.view.View): java.lang.ICharSequence;
				static getInstance(): android.text.method.PasswordTransformationMethod;
			}
			export class NumberKeyListener extends android.text.method.BaseKeyListener implements android.text.IInputFilter {
				constructor();
				static class: java.lang.Class<android.text.method.NumberKeyListener>;
				onKeyDown(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				filter(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
				filter(arg1: string, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
			}
			export class DialerKeyListener extends android.text.method.NumberKeyListener {
				constructor();
				static CHARACTERS: native.Array<string>;
				static class: java.lang.Class<android.text.method.DialerKeyListener>;
				getInputType(): number;
				static getInstance(): android.text.method.DialerKeyListener;
			}
			export class DateTimeKeyListener extends android.text.method.NumberKeyListener {
				constructor();
				static CHARACTERS: native.Array<string>;
				static class: java.lang.Class<android.text.method.DateTimeKeyListener>;
				getInputType(): number;
				static getInstance(): android.text.method.DateTimeKeyListener;
			}
			export interface IMovementMethod {
				onKeyUp(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onGenericMotionEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTrackballEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTouchEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onKeyOther(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.KeyEvent): boolean;
				onTakeFocus(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number): void;
				canSelectArbitrarily(): boolean;
				initialize(arg1: android.widget.TextView, arg2: android.text.ISpannable): void;
			}
			export class Touch extends java.lang.Object {
				static class: java.lang.Class<android.text.method.Touch>;
				static scrollTo(arg1: android.widget.TextView, arg2: android.text.Layout, arg3: number, arg4: number): void;
				static onTouchEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				static getInitialScrollX(arg1: android.widget.TextView, arg2: android.text.ISpannable): number;
				static getInitialScrollY(arg1: android.widget.TextView, arg2: android.text.ISpannable): number;
			}
			export class ScrollingMovementMethod extends android.text.method.BaseMovementMethod implements android.text.method.IMovementMethod {
				constructor();
				static class: java.lang.Class<android.text.method.ScrollingMovementMethod>;
				onTouchEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTakeFocus(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number): void;
				static getInstance(): android.text.method.IMovementMethod;
				onKeyUp(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onGenericMotionEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTrackballEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onKeyOther(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.KeyEvent): boolean;
				canSelectArbitrarily(): boolean;
				initialize(arg1: android.widget.TextView, arg2: android.text.ISpannable): void;
			}
			export class LinkMovementMethod extends android.text.method.ScrollingMovementMethod {
				constructor();
				static class: java.lang.Class<android.text.method.LinkMovementMethod>;
				onTouchEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTakeFocus(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number): void;
				static getInstance(): android.text.method.IMovementMethod;
				initialize(arg1: android.widget.TextView, arg2: android.text.ISpannable): void;
			}
			export class KeyListener implements android.text.method.IKeyListener {
				constructor(implementation: android.text.method.IKeyListener);
				onKeyUp(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				getInputType(): number;
				onKeyOther(arg1: android.view.View, arg2: android.text.IEditable, arg3: android.view.KeyEvent): boolean;
				clearMetaKeyState(arg1: android.view.View, arg2: android.text.IEditable, arg3: number): void;
			}
			export class TimeKeyListener extends android.text.method.NumberKeyListener {
				constructor();
				static CHARACTERS: native.Array<string>;
				static class: java.lang.Class<android.text.method.TimeKeyListener>;
				getInputType(): number;
				static getInstance(): android.text.method.TimeKeyListener;
			}
			export class CharacterPickerDialog extends android.app.Dialog implements android.widget.AdapterView.IOnItemClickListener, android.view.View.IOnClickListener {
				constructor(arg1: android.content.Context, arg2: android.view.View, arg3: android.text.IEditable, arg4: java.lang.String, arg5: boolean);
				constructor(arg1: android.content.Context, arg2: android.view.View, arg3: android.text.IEditable, arg4: string, arg5: boolean);
				static class: java.lang.Class<android.text.method.CharacterPickerDialog>;
				onClick(arg1: android.view.View): void;
				onItemClick(arg1: android.widget.AdapterView<any>, arg2: android.view.View, arg3: number, arg4: native.Long): void;
			}
			export class SingleLineTransformationMethod extends android.text.method.ReplacementTransformationMethod {
				constructor();
				static class: java.lang.Class<android.text.method.SingleLineTransformationMethod>;
				static getInstance(): android.text.method.SingleLineTransformationMethod;
			}
			export interface ITransformationMethod {
				onFocusChanged(arg1: android.view.View, arg2: string, arg3: boolean, arg4: number, arg5: android.graphics.Rect): void;
				getTransformation(arg1: string, arg2: android.view.View): java.lang.ICharSequence;
			}
			export interface IKeyListener {
				onKeyUp(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				getInputType(): number;
				onKeyOther(arg1: android.view.View, arg2: android.text.IEditable, arg3: android.view.KeyEvent): boolean;
				clearMetaKeyState(arg1: android.view.View, arg2: android.text.IEditable, arg3: number): void;
			}
			export class MultiTapKeyListener extends android.text.method.BaseKeyListener implements android.text.ISpanWatcher {
				constructor(arg1: android.text.method.TextKeyListener.Capitalize, arg2: boolean);
				static class: java.lang.Class<android.text.method.MultiTapKeyListener>;
				onKeyDown(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				getInputType(): number;
				onSpanAdded(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number): void;
				onSpanRemoved(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number): void;
				onSpanChanged(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number, arg5: number, arg6: number): void;
				static getInstance(arg1: boolean, arg2: android.text.method.TextKeyListener.Capitalize): android.text.method.MultiTapKeyListener;
			}
			export class DigitsKeyListener extends android.text.method.NumberKeyListener {
				constructor();
				constructor(arg1: boolean, arg2: boolean);
				static class: java.lang.Class<android.text.method.DigitsKeyListener>;
				getInputType(): number;
				static getInstance(arg1: java.lang.String): android.text.method.DigitsKeyListener;
				static getInstance(arg1: string): android.text.method.DigitsKeyListener;
				static getInstance(arg1: boolean, arg2: boolean): android.text.method.DigitsKeyListener;
				static getInstance(): android.text.method.DigitsKeyListener;
				filter(arg1: java.lang.ICharSequence, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
				filter(arg1: string, arg2: number, arg3: number, arg4: android.text.ISpanned, arg5: number, arg6: number): java.lang.ICharSequence;
			}
			export class MetaKeyKeyListener extends java.lang.Object {
				constructor();
				static META_SHIFT_ON: number;
				static META_ALT_ON: number;
				static META_SYM_ON: number;
				static META_CAP_LOCKED: number;
				static META_ALT_LOCKED: number;
				static META_SYM_LOCKED: number;
				static class: java.lang.Class<android.text.method.MetaKeyKeyListener>;
				onKeyUp(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				static getMetaState(arg1: native.Long, arg2: number): number;
				static getMetaState(arg1: native.Long): number;
				static getMetaState(arg1: java.lang.ICharSequence): number;
				static getMetaState(arg1: string): number;
				static getMetaState(arg1: java.lang.ICharSequence, arg2: number): number;
				static getMetaState(arg1: string, arg2: number): number;
				static isSelectingMetaTracker(arg1: java.lang.ICharSequence, arg2: any): boolean;
				static isSelectingMetaTracker(arg1: string, arg2: any): boolean;
				static adjustMetaAfterKeypress(arg1: android.text.ISpannable): void;
				static adjustMetaAfterKeypress(arg1: native.Long): any;
				static isMetaTracker(arg1: java.lang.ICharSequence, arg2: any): boolean;
				static isMetaTracker(arg1: string, arg2: any): boolean;
				static handleKeyDown(arg1: native.Long, arg2: number, arg3: android.view.KeyEvent): any;
				static handleKeyUp(arg1: native.Long, arg2: number, arg3: android.view.KeyEvent): any;
				clearMetaKeyState(arg1: android.view.View, arg2: android.text.IEditable, arg3: number): void;
				static clearMetaKeyState(arg1: android.text.IEditable, arg2: number): void;
				clearMetaKeyState(arg1: native.Long, arg2: number): any;
				static resetMetaState(arg1: android.text.ISpannable): void;
				static resetLockedMeta(arg1: native.Long): any;
			}
			export class TransformationMethod implements android.text.method.ITransformationMethod {
				constructor(implementation: android.text.method.ITransformationMethod);
				onFocusChanged(arg1: android.view.View, arg2: java.lang.ICharSequence, arg3: boolean, arg4: number, arg5: android.graphics.Rect): void;
				onFocusChanged(arg1: android.view.View, arg2: string, arg3: boolean, arg4: number, arg5: android.graphics.Rect): void;
				getTransformation(arg1: java.lang.ICharSequence, arg2: android.view.View): java.lang.ICharSequence;
				getTransformation(arg1: string, arg2: android.view.View): java.lang.ICharSequence;
			}
			export class ReplacementTransformationMethod extends java.lang.Object implements android.text.method.ITransformationMethod {
				constructor();
				static class: java.lang.Class<android.text.method.ReplacementTransformationMethod>;
				onFocusChanged(arg1: android.view.View, arg2: java.lang.ICharSequence, arg3: boolean, arg4: number, arg5: android.graphics.Rect): void;
				onFocusChanged(arg1: android.view.View, arg2: string, arg3: boolean, arg4: number, arg5: android.graphics.Rect): void;
				getTransformation(arg1: java.lang.ICharSequence, arg2: android.view.View): java.lang.ICharSequence;
				getTransformation(arg1: string, arg2: android.view.View): java.lang.ICharSequence;
			}
			export class HideReturnsTransformationMethod extends android.text.method.ReplacementTransformationMethod {
				constructor();
				static class: java.lang.Class<android.text.method.HideReturnsTransformationMethod>;
				static getInstance(): android.text.method.HideReturnsTransformationMethod;
			}
			export class ArrowKeyMovementMethod extends android.text.method.BaseMovementMethod implements android.text.method.IMovementMethod {
				constructor();
				static class: java.lang.Class<android.text.method.ArrowKeyMovementMethod>;
				onTouchEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTakeFocus(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number): void;
				canSelectArbitrarily(): boolean;
				static getInstance(): android.text.method.IMovementMethod;
				initialize(arg1: android.widget.TextView, arg2: android.text.ISpannable): void;
				onKeyUp(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onGenericMotionEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTrackballEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onKeyOther(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.KeyEvent): boolean;
			}
			export class TextKeyListener extends android.text.method.BaseKeyListener implements android.text.ISpanWatcher {
				constructor(arg1: android.text.method.TextKeyListener.Capitalize, arg2: boolean);
				static class: java.lang.Class<android.text.method.TextKeyListener>;
				onKeyUp(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.view.View, arg2: android.text.IEditable, arg3: number, arg4: android.view.KeyEvent): boolean;
				getInputType(): number;
				onSpanAdded(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number): void;
				onSpanRemoved(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number): void;
				onSpanChanged(arg1: android.text.ISpannable, arg2: any, arg3: number, arg4: number, arg5: number, arg6: number): void;
				onKeyOther(arg1: android.view.View, arg2: android.text.IEditable, arg3: android.view.KeyEvent): boolean;
				static shouldCap(arg1: android.text.method.TextKeyListener.Capitalize, arg2: java.lang.ICharSequence, arg3: number): boolean;
				static shouldCap(arg1: android.text.method.TextKeyListener.Capitalize, arg2: string, arg3: number): boolean;
				static getInstance(): android.text.method.TextKeyListener;
				static getInstance(arg1: boolean, arg2: android.text.method.TextKeyListener.Capitalize): android.text.method.TextKeyListener;
				static clear(arg1: android.text.IEditable): void;
				release(): void;
			}
			export module TextKeyListener {
				export enum Capitalize {
					CHARACTERS,
					NONE,
					SENTENCES,
					WORDS
				}
				export module Capitalize {
					export function valueOf(arg1: java.lang.String): android.text.method.TextKeyListener.Capitalize;
					export function valueOf(arg1: string): android.text.method.TextKeyListener.Capitalize;
					export function values(): native.Array<android.text.method.TextKeyListener.Capitalize>;
				}
			}
			export class DateKeyListener extends android.text.method.NumberKeyListener {
				constructor();
				static CHARACTERS: native.Array<string>;
				static class: java.lang.Class<android.text.method.DateKeyListener>;
				getInputType(): number;
				static getInstance(): android.text.method.DateKeyListener;
			}
			export class MovementMethod implements android.text.method.IMovementMethod {
				constructor(implementation: android.text.method.IMovementMethod);
				onKeyUp(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onKeyDown(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number, arg4: android.view.KeyEvent): boolean;
				onGenericMotionEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTrackballEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onTouchEvent(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.MotionEvent): boolean;
				onKeyOther(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: android.view.KeyEvent): boolean;
				onTakeFocus(arg1: android.widget.TextView, arg2: android.text.ISpannable, arg3: number): void;
				canSelectArbitrarily(): boolean;
				initialize(arg1: android.widget.TextView, arg2: android.text.ISpannable): void;
			}
		}
		export class SpannableStringBuilder extends java.lang.Object implements java.lang.ICharSequence, android.text.IGetChars, android.text.ISpannable, android.text.IEditable, java.lang.IAppendable {
			constructor();
			constructor(arg1: java.lang.ICharSequence);
			constructor(arg1: string);
			constructor(arg1: java.lang.ICharSequence, arg2: number, arg3: number);
			constructor(arg1: string, arg2: number, arg3: number);
			static class: java.lang.Class<android.text.SpannableStringBuilder>;
			Filters: native.Array<android.text.IInputFilter>;
			setFilters(arg1: native.Array<android.text.IInputFilter>): void;
			getFilters(): native.Array<android.text.IInputFilter>;
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans<T>(arg1: number, arg2: number, arg3: java.lang.Class<T>): native.Array<T>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
			setSpan(arg1: any, arg2: number, arg3: number, arg4: number): void;
			removeSpan(arg1: any): void;
			clearSpans(): void;
			getTextRunCursor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: android.graphics.Paint): number;
			toString(): string;
			append(arg1: java.lang.ICharSequence): android.text.SpannableStringBuilder;
			append(arg1: string): android.text.SpannableStringBuilder;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): android.text.SpannableStringBuilder;
			append(arg1: string, arg2: number, arg3: number): android.text.SpannableStringBuilder;
			charAt(arg1: number): string;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			length(): number;
			replace(arg1: number, arg2: number, arg3: java.lang.ICharSequence, arg4: number, arg5: number): android.text.SpannableStringBuilder;
			replace(arg1: number, arg2: number, arg3: string, arg4: number, arg5: number): android.text.SpannableStringBuilder;
			replace(arg1: number, arg2: number, arg3: java.lang.ICharSequence): android.text.SpannableStringBuilder;
			replace(arg1: number, arg2: number, arg3: string): android.text.SpannableStringBuilder;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			static valueOf(arg1: java.lang.ICharSequence): android.text.SpannableStringBuilder;
			static valueOf(arg1: string): android.text.SpannableStringBuilder;
			clear(): void;
			delete(arg1: number, arg2: number): android.text.SpannableStringBuilder;
			insert(arg1: number, arg2: java.lang.ICharSequence, arg3: number, arg4: number): android.text.SpannableStringBuilder;
			insert(arg1: number, arg2: string, arg3: number, arg4: number): android.text.SpannableStringBuilder;
			insert(arg1: number, arg2: java.lang.ICharSequence): android.text.SpannableStringBuilder;
			insert(arg1: number, arg2: string): android.text.SpannableStringBuilder;
		}
		export interface ISpanned extends java.lang.ICharSequence {
			nextSpanTransition(arg1: number, arg2: number, arg3: java.lang.Class<any>): number;
			getSpans<T>(arg1: number, arg2: number, arg3: java.lang.Class<T>): native.Array<T>;
			getSpanStart(arg1: any): number;
			getSpanFlags(arg1: any): number;
			getSpanEnd(arg1: any): number;
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
		}
		export module ISpanned {
			var SPAN_POINT_MARK_MASK: number;
			var SPAN_MARK_MARK: number;
			var SPAN_MARK_POINT: number;
			var SPAN_POINT_MARK: number;
			var SPAN_POINT_POINT: number;
			var SPAN_PARAGRAPH: number;
			var SPAN_INCLUSIVE_EXCLUSIVE: number;
			var SPAN_INCLUSIVE_INCLUSIVE: number;
			var SPAN_EXCLUSIVE_EXCLUSIVE: number;
			var SPAN_EXCLUSIVE_INCLUSIVE: number;
			var SPAN_COMPOSING: number;
			var SPAN_INTERMEDIATE: number;
			var SPAN_USER_SHIFT: number;
			var SPAN_USER: number;
			var SPAN_PRIORITY_SHIFT: number;
			var SPAN_PRIORITY: number;
		}
		export module util {
			export class Rfc822Token extends java.lang.Object {
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
				constructor(arg1: string, arg2: string, arg3: string);
				static class: java.lang.Class<android.text.util.Rfc822Token>;
				Name: string;
				Address: string;
				Comment: string;
				static quoteNameIfNecessary(arg1: java.lang.String): string;
				static quoteNameIfNecessary(arg1: string): string;
				static quoteComment(arg1: java.lang.String): string;
				static quoteComment(arg1: string): string;
				static quoteName(arg1: java.lang.String): string;
				static quoteName(arg1: string): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getName(): string;
				setName(arg1: java.lang.String): void;
				setName(arg1: string): void;
				getAddress(): string;
				getComment(): string;
				setComment(arg1: java.lang.String): void;
				setComment(arg1: string): void;
				setAddress(arg1: java.lang.String): void;
				setAddress(arg1: string): void;
			}
			export class Linkify extends java.lang.Object {
				constructor();
				static WEB_URLS: number;
				static EMAIL_ADDRESSES: number;
				static PHONE_NUMBERS: number;
				static MAP_ADDRESSES: number;
				static ALL: number;
				static sUrlMatchFilter: android.text.util.Linkify.IMatchFilter;
				static sPhoneNumberMatchFilter: android.text.util.Linkify.IMatchFilter;
				static sPhoneNumberTransformFilter: android.text.util.Linkify.ITransformFilter;
				static class: java.lang.Class<android.text.util.Linkify>;
				static addLinks(arg1: android.text.ISpannable, arg2: java.util.regex.Pattern, arg3: java.lang.String): boolean;
				static addLinks(arg1: android.text.ISpannable, arg2: java.util.regex.Pattern, arg3: string): boolean;
				static addLinks(arg1: android.text.ISpannable, arg2: java.util.regex.Pattern, arg3: java.lang.String, arg4: android.text.util.Linkify.IMatchFilter, arg5: android.text.util.Linkify.ITransformFilter): boolean;
				static addLinks(arg1: android.text.ISpannable, arg2: java.util.regex.Pattern, arg3: string, arg4: android.text.util.Linkify.IMatchFilter, arg5: android.text.util.Linkify.ITransformFilter): boolean;
				static addLinks(arg1: android.widget.TextView, arg2: java.util.regex.Pattern, arg3: java.lang.String): void;
				static addLinks(arg1: android.widget.TextView, arg2: java.util.regex.Pattern, arg3: string): void;
				static addLinks(arg1: android.widget.TextView, arg2: number): boolean;
				static addLinks(arg1: android.text.ISpannable, arg2: number): boolean;
				static addLinks(arg1: android.widget.TextView, arg2: java.util.regex.Pattern, arg3: java.lang.String, arg4: android.text.util.Linkify.IMatchFilter, arg5: android.text.util.Linkify.ITransformFilter): void;
				static addLinks(arg1: android.widget.TextView, arg2: java.util.regex.Pattern, arg3: string, arg4: android.text.util.Linkify.IMatchFilter, arg5: android.text.util.Linkify.ITransformFilter): void;
			}
			export module Linkify {
				export class TransformFilter implements android.text.util.Linkify.ITransformFilter {
					constructor(implementation: android.text.util.Linkify.ITransformFilter);
					transformUrl(arg1: java.util.regex.Matcher, arg2: java.lang.String): string;
					transformUrl(arg1: java.util.regex.Matcher, arg2: string): string;
				}
				export class MatchFilter implements android.text.util.Linkify.IMatchFilter {
					constructor(implementation: android.text.util.Linkify.IMatchFilter);
					acceptMatch(arg1: java.lang.ICharSequence, arg2: number, arg3: number): boolean;
					acceptMatch(arg1: string, arg2: number, arg3: number): boolean;
				}
				export interface ITransformFilter {
					transformUrl(arg1: java.util.regex.Matcher, arg2: string): string;
				}
				export interface IMatchFilter {
					acceptMatch(arg1: string, arg2: number, arg3: number): boolean;
				}
			}
			export class Rfc822Tokenizer extends java.lang.Object implements android.widget.MultiAutoCompleteTextView.ITokenizer {
				constructor();
				static class: java.lang.Class<android.text.util.Rfc822Tokenizer>;
				findTokenEnd(arg1: java.lang.ICharSequence, arg2: number): number;
				findTokenEnd(arg1: string, arg2: number): number;
				terminateToken(arg1: java.lang.ICharSequence): java.lang.ICharSequence;
				terminateToken(arg1: string): java.lang.ICharSequence;
				findTokenStart(arg1: java.lang.ICharSequence, arg2: number): number;
				findTokenStart(arg1: string, arg2: number): number;
				static tokenize(arg1: java.lang.ICharSequence): native.Array<android.text.util.Rfc822Token>;
				static tokenize(arg1: string): native.Array<android.text.util.Rfc822Token>;
				static tokenize(arg1: java.lang.ICharSequence, arg2: java.util.ICollection<android.text.util.Rfc822Token>): void;
				static tokenize(arg1: string, arg2: java.util.ICollection<android.text.util.Rfc822Token>): void;
			}
		}
		export class Selection extends java.lang.Object {
			static SELECTION_START: any;
			static SELECTION_END: any;
			static class: java.lang.Class<android.text.Selection>;
			static setSelection(arg1: android.text.ISpannable, arg2: number): void;
			static setSelection(arg1: android.text.ISpannable, arg2: number, arg3: number): void;
			static moveLeft(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static moveUp(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static moveDown(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static moveRight(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static extendUp(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static extendLeft(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static extendRight(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static extendDown(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static extendToLeftEdge(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static extendToRightEdge(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static moveToRightEdge(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static moveToLeftEdge(arg1: android.text.ISpannable, arg2: android.text.Layout): boolean;
			static removeSelection(arg1: android.text.ISpannable): void;
			static selectAll(arg1: android.text.ISpannable): void;
			static getSelectionEnd(arg1: java.lang.ICharSequence): number;
			static getSelectionEnd(arg1: string): number;
			static getSelectionStart(arg1: java.lang.ICharSequence): number;
			static getSelectionStart(arg1: string): number;
			static extendSelection(arg1: android.text.ISpannable, arg2: number): void;
		}
	}
	export module accounts {
		export class AccountsException extends java.lang.Exception {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<android.accounts.AccountsException>;
		}
		export class AccountAuthenticatorResponse extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.os.Parcel);
			static CREATOR: android.os.Parcelable.ICreator<android.accounts.AccountAuthenticatorResponse>;
			static class: java.lang.Class<android.accounts.AccountAuthenticatorResponse>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			onError(arg1: number, arg2: java.lang.String): void;
			onError(arg1: number, arg2: string): void;
			onResult(arg1: android.os.Bundle): void;
			onRequestContinued(): void;
		}
		export interface IAccountManagerFuture<V> {
			isCancelled(): boolean;
			getResult(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
			getResult(): V;
			isDone(): boolean;
			cancel(arg1: boolean): boolean;
		}
		export class AuthenticatorDescription extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: number, arg5: number, arg6: number);
			constructor(arg1: string, arg2: string, arg3: number, arg4: number, arg5: number, arg6: number);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean);
			constructor(arg1: string, arg2: string, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean);
			type: java.lang.String;
			labelId: number;
			iconId: number;
			smallIconId: number;
			accountPreferencesId: number;
			packageName: java.lang.String;
			customTokens: boolean;
			static CREATOR: android.os.Parcelable.ICreator<android.accounts.AuthenticatorDescription>;
			static class: java.lang.Class<android.accounts.AuthenticatorDescription>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			static newKey(arg1: java.lang.String): android.accounts.AuthenticatorDescription;
			static newKey(arg1: string): android.accounts.AuthenticatorDescription;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class AuthenticatorException extends android.accounts.AccountsException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<android.accounts.AuthenticatorException>;
		}
		export interface IOnAccountsUpdateListener {
			onAccountsUpdated(arg1: native.Array<android.accounts.Account>): void;
		}
		export class Account extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: android.os.Parcel);
			name: java.lang.String;
			type: java.lang.String;
			static CREATOR: android.os.Parcelable.ICreator<android.accounts.Account>;
			static class: java.lang.Class<android.accounts.Account>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class OnAccountsUpdateListener implements android.accounts.IOnAccountsUpdateListener {
			constructor(implementation: android.accounts.IOnAccountsUpdateListener);
			onAccountsUpdated(arg1: native.Array<android.accounts.Account>): void;
		}
		export class OperationCanceledException extends android.accounts.AccountsException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<android.accounts.OperationCanceledException>;
		}
		export class AbstractAccountAuthenticator extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.accounts.AbstractAccountAuthenticator>;
			getAccountRemovalAllowed(arg1: android.accounts.AccountAuthenticatorResponse, arg2: android.accounts.Account): android.os.Bundle;
			hasFeatures(arg1: android.accounts.AccountAuthenticatorResponse, arg2: android.accounts.Account, arg3: native.Array<java.lang.String>): android.os.Bundle;
			getAuthToken(arg1: android.accounts.AccountAuthenticatorResponse, arg2: android.accounts.Account, arg3: java.lang.String, arg4: android.os.Bundle): android.os.Bundle;
			getAuthToken(arg1: android.accounts.AccountAuthenticatorResponse, arg2: android.accounts.Account, arg3: string, arg4: android.os.Bundle): android.os.Bundle;
			addAccount(arg1: android.accounts.AccountAuthenticatorResponse, arg2: java.lang.String, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: android.os.Bundle): android.os.Bundle;
			addAccount(arg1: android.accounts.AccountAuthenticatorResponse, arg2: string, arg3: string, arg4: native.Array<java.lang.String>, arg5: android.os.Bundle): android.os.Bundle;
			getIBinder(): android.os.IIBinder;
			confirmCredentials(arg1: android.accounts.AccountAuthenticatorResponse, arg2: android.accounts.Account, arg3: android.os.Bundle): android.os.Bundle;
			updateCredentials(arg1: android.accounts.AccountAuthenticatorResponse, arg2: android.accounts.Account, arg3: java.lang.String, arg4: android.os.Bundle): android.os.Bundle;
			updateCredentials(arg1: android.accounts.AccountAuthenticatorResponse, arg2: android.accounts.Account, arg3: string, arg4: android.os.Bundle): android.os.Bundle;
			getAuthTokenLabel(arg1: java.lang.String): string;
			getAuthTokenLabel(arg1: string): string;
			editProperties(arg1: android.accounts.AccountAuthenticatorResponse, arg2: java.lang.String): android.os.Bundle;
			editProperties(arg1: android.accounts.AccountAuthenticatorResponse, arg2: string): android.os.Bundle;
		}
		export class AccountManagerFuture<V> implements android.accounts.IAccountManagerFuture<V> {
			constructor(implementation: android.accounts.IAccountManagerFuture<V>);
			isCancelled(): boolean;
			getResult(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
			getResult(): V;
			isDone(): boolean;
			cancel(arg1: boolean): boolean;
		}
		export class AccountManagerCallback<V> implements android.accounts.IAccountManagerCallback<V> {
			constructor(implementation: android.accounts.IAccountManagerCallback<V>);
			run(arg1: android.accounts.IAccountManagerFuture<V>): void;
		}
		export class AccountAuthenticatorActivity extends android.app.Activity {
			constructor();
			static class: java.lang.Class<android.accounts.AccountAuthenticatorActivity>;
			setAccountAuthenticatorResult(arg1: android.os.Bundle): void;
			finish(): void;
		}
		export class AccountManager extends java.lang.Object {
			static ERROR_CODE_REMOTE_EXCEPTION: number;
			static ERROR_CODE_NETWORK_ERROR: number;
			static ERROR_CODE_CANCELED: number;
			static ERROR_CODE_INVALID_RESPONSE: number;
			static ERROR_CODE_UNSUPPORTED_OPERATION: number;
			static ERROR_CODE_BAD_ARGUMENTS: number;
			static ERROR_CODE_BAD_REQUEST: number;
			static KEY_ACCOUNT_NAME: java.lang.String;
			static KEY_ACCOUNT_TYPE: java.lang.String;
			static KEY_AUTHTOKEN: java.lang.String;
			static KEY_INTENT: java.lang.String;
			static KEY_PASSWORD: java.lang.String;
			static KEY_ACCOUNTS: java.lang.String;
			static KEY_ACCOUNT_AUTHENTICATOR_RESPONSE: java.lang.String;
			static KEY_ACCOUNT_MANAGER_RESPONSE: java.lang.String;
			static KEY_AUTHENTICATOR_TYPES: java.lang.String;
			static KEY_AUTH_FAILED_MESSAGE: java.lang.String;
			static KEY_AUTH_TOKEN_LABEL: java.lang.String;
			static KEY_BOOLEAN_RESULT: java.lang.String;
			static KEY_ERROR_CODE: java.lang.String;
			static KEY_ERROR_MESSAGE: java.lang.String;
			static KEY_USERDATA: java.lang.String;
			static KEY_CALLER_UID: java.lang.String;
			static KEY_CALLER_PID: java.lang.String;
			static KEY_ANDROID_PACKAGE_NAME: java.lang.String;
			static ACTION_AUTHENTICATOR_INTENT: java.lang.String;
			static AUTHENTICATOR_META_DATA_NAME: java.lang.String;
			static AUTHENTICATOR_ATTRIBUTES_NAME: java.lang.String;
			static LOGIN_ACCOUNTS_CHANGED_ACTION: java.lang.String;
			static class: java.lang.Class<android.accounts.AccountManager>;
			clearPassword(arg1: android.accounts.Account): void;
			setPassword(arg1: android.accounts.Account, arg2: java.lang.String): void;
			setPassword(arg1: android.accounts.Account, arg2: string): void;
			getAccountsByTypeAndFeatures(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: android.accounts.IAccountManagerCallback<native.Array<android.accounts.Account>>, arg4: android.os.Handler): android.accounts.IAccountManagerFuture<native.Array<android.accounts.Account>>;
			getAccountsByTypeAndFeatures(arg1: string, arg2: native.Array<java.lang.String>, arg3: android.accounts.IAccountManagerCallback<native.Array<android.accounts.Account>>, arg4: android.os.Handler): android.accounts.IAccountManagerFuture<native.Array<android.accounts.Account>>;
			getAuthTokenByFeatures(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: android.app.Activity, arg5: android.os.Bundle, arg6: android.os.Bundle, arg7: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg8: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			getAuthTokenByFeatures(arg1: string, arg2: string, arg3: native.Array<java.lang.String>, arg4: android.app.Activity, arg5: android.os.Bundle, arg6: android.os.Bundle, arg7: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg8: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			static newChooseAccountIntent(arg1: android.accounts.Account, arg2: java.util.ArrayList<android.accounts.Account>, arg3: native.Array<java.lang.String>, arg4: boolean, arg5: java.lang.String, arg6: java.lang.String, arg7: native.Array<java.lang.String>, arg8: android.os.Bundle): android.content.Intent;
			static newChooseAccountIntent(arg1: android.accounts.Account, arg2: java.util.ArrayList<android.accounts.Account>, arg3: native.Array<java.lang.String>, arg4: boolean, arg5: string, arg6: string, arg7: native.Array<java.lang.String>, arg8: android.os.Bundle): android.content.Intent;
			addOnAccountsUpdatedListener(arg1: android.accounts.IOnAccountsUpdateListener, arg2: android.os.Handler, arg3: boolean): void;
			removeAccount(arg1: android.accounts.Account, arg2: android.accounts.IAccountManagerCallback<boolean>, arg3: android.os.Handler): android.accounts.IAccountManagerFuture<boolean>;
			getAccounts(): native.Array<android.accounts.Account>;
			hasFeatures(arg1: android.accounts.Account, arg2: native.Array<java.lang.String>, arg3: android.accounts.IAccountManagerCallback<boolean>, arg4: android.os.Handler): android.accounts.IAccountManagerFuture<boolean>;
			setAuthToken(arg1: android.accounts.Account, arg2: java.lang.String, arg3: java.lang.String): void;
			setAuthToken(arg1: android.accounts.Account, arg2: string, arg3: string): void;
			getAuthToken(arg1: android.accounts.Account, arg2: java.lang.String, arg3: android.os.Bundle, arg4: boolean, arg5: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg6: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			getAuthToken(arg1: android.accounts.Account, arg2: string, arg3: android.os.Bundle, arg4: boolean, arg5: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg6: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			getAuthToken(arg1: android.accounts.Account, arg2: java.lang.String, arg3: boolean, arg4: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg5: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			getAuthToken(arg1: android.accounts.Account, arg2: string, arg3: boolean, arg4: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg5: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			getAuthToken(arg1: android.accounts.Account, arg2: java.lang.String, arg3: android.os.Bundle, arg4: android.app.Activity, arg5: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg6: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			getAuthToken(arg1: android.accounts.Account, arg2: string, arg3: android.os.Bundle, arg4: android.app.Activity, arg5: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg6: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			peekAuthToken(arg1: android.accounts.Account, arg2: java.lang.String): string;
			peekAuthToken(arg1: android.accounts.Account, arg2: string): string;
			addAccount(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: android.os.Bundle, arg5: android.app.Activity, arg6: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg7: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			addAccount(arg1: string, arg2: string, arg3: native.Array<java.lang.String>, arg4: android.os.Bundle, arg5: android.app.Activity, arg6: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg7: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			getAuthenticatorTypes(): native.Array<android.accounts.AuthenticatorDescription>;
			getAccountsByType(arg1: java.lang.String): native.Array<android.accounts.Account>;
			getAccountsByType(arg1: string): native.Array<android.accounts.Account>;
			addAccountExplicitly(arg1: android.accounts.Account, arg2: java.lang.String, arg3: android.os.Bundle): boolean;
			addAccountExplicitly(arg1: android.accounts.Account, arg2: string, arg3: android.os.Bundle): boolean;
			invalidateAuthToken(arg1: java.lang.String, arg2: java.lang.String): void;
			invalidateAuthToken(arg1: string, arg2: string): void;
			blockingGetAuthToken(arg1: android.accounts.Account, arg2: java.lang.String, arg3: boolean): string;
			blockingGetAuthToken(arg1: android.accounts.Account, arg2: string, arg3: boolean): string;
			confirmCredentials(arg1: android.accounts.Account, arg2: android.os.Bundle, arg3: android.app.Activity, arg4: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg5: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			updateCredentials(arg1: android.accounts.Account, arg2: java.lang.String, arg3: android.os.Bundle, arg4: android.app.Activity, arg5: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg6: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			updateCredentials(arg1: android.accounts.Account, arg2: string, arg3: android.os.Bundle, arg4: android.app.Activity, arg5: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg6: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			editProperties(arg1: java.lang.String, arg2: android.app.Activity, arg3: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg4: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			editProperties(arg1: string, arg2: android.app.Activity, arg3: android.accounts.IAccountManagerCallback<android.os.Bundle>, arg4: android.os.Handler): android.accounts.IAccountManagerFuture<android.os.Bundle>;
			removeOnAccountsUpdatedListener(arg1: android.accounts.IOnAccountsUpdateListener): void;
			static get(arg1: android.content.Context): android.accounts.AccountManager;
			getPassword(arg1: android.accounts.Account): string;
			getUserData(arg1: android.accounts.Account, arg2: java.lang.String): string;
			getUserData(arg1: android.accounts.Account, arg2: string): string;
			setUserData(arg1: android.accounts.Account, arg2: java.lang.String, arg3: java.lang.String): void;
			setUserData(arg1: android.accounts.Account, arg2: string, arg3: string): void;
		}
		export interface IAccountManagerCallback<V> {
			run(arg1: android.accounts.IAccountManagerFuture<V>): void;
		}
		export class NetworkErrorException extends android.accounts.AccountsException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<android.accounts.NetworkErrorException>;
		}
	}
	export module animation {
		export class PropertyValuesHolder extends java.lang.Object implements java.lang.ICloneable {
			static class: java.lang.Class<android.animation.PropertyValuesHolder>;
			PropertyName: string;
			static ofInt(arg1: android.util.Property<any, java.lang.Integer>, arg2: native.Array<number>): android.animation.PropertyValuesHolder;
			static ofInt(arg1: java.lang.String, arg2: native.Array<number>): android.animation.PropertyValuesHolder;
			static ofInt(arg1: string, arg2: native.Array<number>): android.animation.PropertyValuesHolder;
			static ofObject<V>(arg1: android.util.Property<any, any>, arg2: android.animation.ITypeEvaluator<V>, arg3: native.Array<V>): android.animation.PropertyValuesHolder;
			static ofObject(arg1: java.lang.String, arg2: android.animation.ITypeEvaluator<any>, arg3: native.Array<any>): android.animation.PropertyValuesHolder;
			static ofObject(arg1: string, arg2: android.animation.ITypeEvaluator<any>, arg3: native.Array<any>): android.animation.PropertyValuesHolder;
			setIntValues(arg1: native.Array<number>): void;
			setKeyframes(arg1: native.Array<android.animation.Keyframe>): void;
			static ofKeyframe(arg1: android.util.Property<any, any>, arg2: native.Array<android.animation.Keyframe>): android.animation.PropertyValuesHolder;
			static ofKeyframe(arg1: java.lang.String, arg2: native.Array<android.animation.Keyframe>): android.animation.PropertyValuesHolder;
			static ofKeyframe(arg1: string, arg2: native.Array<android.animation.Keyframe>): android.animation.PropertyValuesHolder;
			static ofFloat(arg1: java.lang.String, arg2: native.Array<native.Float>): android.animation.PropertyValuesHolder;
			static ofFloat(arg1: string, arg2: native.Array<native.Float>): android.animation.PropertyValuesHolder;
			static ofFloat(arg1: android.util.Property<any, java.lang.Float>, arg2: native.Array<native.Float>): android.animation.PropertyValuesHolder;
			setEvaluator(arg1: android.animation.ITypeEvaluator<any>): void;
			setFloatValues(arg1: native.Array<native.Float>): void;
			setObjectValues(arg1: native.Array<any>): void;
			setPropertyName(arg1: java.lang.String): void;
			setPropertyName(arg1: string): void;
			clone(): android.animation.PropertyValuesHolder;
			toString(): string;
			setProperty(arg1: android.util.Property<any, any>): void;
			getPropertyName(): string;
		}
		export interface ITimeInterpolator {
			getInterpolation(arg1: native.Float): number;
		}
		export class ArgbEvaluator extends java.lang.Object implements android.animation.ITypeEvaluator<any> {
			constructor();
			static class: java.lang.Class<android.animation.ArgbEvaluator>;
			evaluate(arg1: native.Float, arg2: any, arg3: any): any;
		}
		export class AnimatorListenerAdapter extends java.lang.Object implements android.animation.Animator.IAnimatorListener {
			constructor();
			static class: java.lang.Class<android.animation.AnimatorListenerAdapter>;
			onAnimationEnd(arg1: android.animation.Animator): void;
			onAnimationStart(arg1: android.animation.Animator): void;
			onAnimationRepeat(arg1: android.animation.Animator): void;
			onAnimationCancel(arg1: android.animation.Animator): void;
		}
		export class IntEvaluator extends java.lang.Object implements android.animation.ITypeEvaluator<java.lang.Integer> {
			constructor();
			static class: java.lang.Class<android.animation.IntEvaluator>;
			evaluate(arg1: native.Float, arg2: java.lang.Integer, arg3: java.lang.Integer): java.lang.Integer;
			evaluate(arg1: native.Float, arg2: any, arg3: any): any;
		}
		export class LayoutTransition extends java.lang.Object {
			constructor();
			static CHANGE_APPEARING: number;
			static CHANGE_DISAPPEARING: number;
			static APPEARING: number;
			static DISAPPEARING: number;
			static CHANGING: number;
			static class: java.lang.Class<android.animation.LayoutTransition>;
			getDuration(arg1: number): any;
			setInterpolator(arg1: number, arg2: android.animation.ITimeInterpolator): void;
			getInterpolator(arg1: number): android.animation.ITimeInterpolator;
			setDuration(arg1: number, arg2: native.Long): void;
			setDuration(arg1: native.Long): void;
			addChild(arg1: android.view.ViewGroup, arg2: android.view.View): void;
			getStartDelay(arg1: number): any;
			setStartDelay(arg1: number, arg2: native.Long): void;
			removeTransitionListener(arg1: android.animation.LayoutTransition.ITransitionListener): void;
			getTransitionListeners(): java.util.IList<android.animation.LayoutTransition.ITransitionListener>;
			setAnimateParentHierarchy(arg1: boolean): void;
			isTransitionTypeEnabled(arg1: number): boolean;
			getStagger(arg1: number): any;
			getAnimator(arg1: number): android.animation.Animator;
			setAnimator(arg1: number, arg2: android.animation.Animator): void;
			setStagger(arg1: number, arg2: native.Long): void;
			showChild(arg1: android.view.ViewGroup, arg2: android.view.View): void;
			showChild(arg1: android.view.ViewGroup, arg2: android.view.View, arg3: number): void;
			hideChild(arg1: android.view.ViewGroup, arg2: android.view.View, arg3: number): void;
			hideChild(arg1: android.view.ViewGroup, arg2: android.view.View): void;
			enableTransitionType(arg1: number): void;
			addTransitionListener(arg1: android.animation.LayoutTransition.ITransitionListener): void;
			isChangingLayout(): boolean;
			disableTransitionType(arg1: number): void;
			isRunning(): boolean;
			removeChild(arg1: android.view.ViewGroup, arg2: android.view.View): void;
		}
		export module LayoutTransition {
			export class TransitionListener implements android.animation.LayoutTransition.ITransitionListener {
				constructor(implementation: android.animation.LayoutTransition.ITransitionListener);
				endTransition(arg1: android.animation.LayoutTransition, arg2: android.view.ViewGroup, arg3: android.view.View, arg4: number): void;
				startTransition(arg1: android.animation.LayoutTransition, arg2: android.view.ViewGroup, arg3: android.view.View, arg4: number): void;
			}
			export interface ITransitionListener {
				endTransition(arg1: android.animation.LayoutTransition, arg2: android.view.ViewGroup, arg3: android.view.View, arg4: number): void;
				startTransition(arg1: android.animation.LayoutTransition, arg2: android.view.ViewGroup, arg3: android.view.View, arg4: number): void;
			}
		}
		export class TypeEvaluator<T> implements android.animation.ITypeEvaluator<T> {
			constructor(implementation: android.animation.ITypeEvaluator<T>);
			evaluate(arg1: native.Float, arg2: T, arg3: T): T;
		}
		export class ValueAnimator extends android.animation.Animator {
			constructor();
			static RESTART: number;
			static REVERSE: number;
			static INFINITE: number;
			static class: java.lang.Class<android.animation.ValueAnimator>;
			Values: native.Array<android.animation.PropertyValuesHolder>;
			RepeatMode: number;
			RepeatCount: number;
			Interpolator: android.animation.ITimeInterpolator;
			getDuration(): any;
			setInterpolator(arg1: android.animation.ITimeInterpolator): void;
			getInterpolator(): android.animation.ITimeInterpolator;
			setDuration(arg1: native.Long): android.animation.ValueAnimator;
			setRepeatCount(arg1: number): void;
			getRepeatCount(): number;
			setRepeatMode(arg1: number): void;
			getRepeatMode(): number;
			getStartDelay(): any;
			setStartDelay(arg1: native.Long): void;
			static ofPropertyValuesHolder(arg1: native.Array<android.animation.PropertyValuesHolder>): android.animation.ValueAnimator;
			removeAllUpdateListeners(): void;
			static ofInt(arg1: native.Array<number>): android.animation.ValueAnimator;
			isStarted(): boolean;
			static ofObject(arg1: android.animation.ITypeEvaluator<any>, arg2: native.Array<any>): android.animation.ValueAnimator;
			static getFrameDelay(): any;
			setIntValues(arg1: native.Array<number>): void;
			static setFrameDelay(arg1: native.Long): void;
			static ofFloat(arg1: native.Array<native.Float>): android.animation.ValueAnimator;
			setEvaluator(arg1: android.animation.ITypeEvaluator<any>): void;
			addUpdateListener(arg1: android.animation.ValueAnimator.IAnimatorUpdateListener): void;
			getAnimatedFraction(): number;
			setFloatValues(arg1: native.Array<native.Float>): void;
			getCurrentPlayTime(): any;
			removeUpdateListener(arg1: android.animation.ValueAnimator.IAnimatorUpdateListener): void;
			setObjectValues(arg1: native.Array<any>): void;
			setCurrentPlayTime(arg1: native.Long): void;
			getAnimatedValue(): any;
			getAnimatedValue(arg1: java.lang.String): any;
			getAnimatedValue(arg1: string): any;
			clone(): android.animation.ValueAnimator;
			toString(): string;
			start(): void;
			reverse(): void;
			getValues(): native.Array<android.animation.PropertyValuesHolder>;
			isRunning(): boolean;
			cancel(): void;
			end(): void;
			setValues(arg1: native.Array<android.animation.PropertyValuesHolder>): void;
		}
		export module ValueAnimator {
			export class AnimatorUpdateListener implements android.animation.ValueAnimator.IAnimatorUpdateListener {
				constructor(implementation: android.animation.ValueAnimator.IAnimatorUpdateListener);
				onAnimationUpdate(arg1: android.animation.ValueAnimator): void;
			}
			export interface IAnimatorUpdateListener {
				onAnimationUpdate(arg1: android.animation.ValueAnimator): void;
			}
		}
		export class FloatEvaluator extends java.lang.Object implements android.animation.ITypeEvaluator<java.lang.Number> {
			constructor();
			static class: java.lang.Class<android.animation.FloatEvaluator>;
			evaluate(arg1: native.Float, arg2: java.lang.Number, arg3: java.lang.Number): java.lang.Float;
			evaluate(arg1: native.Float, arg2: any, arg3: any): any;
		}
		export class TimeInterpolator implements android.animation.ITimeInterpolator {
			constructor(implementation: android.animation.ITimeInterpolator);
			getInterpolation(arg1: native.Float): number;
		}
		export class TimeAnimator extends android.animation.ValueAnimator {
			constructor();
			static class: java.lang.Class<android.animation.TimeAnimator>;
			setTimeListener(arg1: android.animation.TimeAnimator.ITimeListener): void;
			start(): void;
		}
		export module TimeAnimator {
			export interface ITimeListener {
				onTimeUpdate(arg1: android.animation.TimeAnimator, arg2: native.Long, arg3: native.Long): void;
			}
			export class TimeListener implements android.animation.TimeAnimator.ITimeListener {
				constructor(implementation: android.animation.TimeAnimator.ITimeListener);
				onTimeUpdate(arg1: android.animation.TimeAnimator, arg2: native.Long, arg3: native.Long): void;
			}
		}
		export class AnimatorInflater extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.animation.AnimatorInflater>;
			static loadAnimator(arg1: android.content.Context, arg2: number): android.animation.Animator;
		}
		export class ObjectAnimator extends android.animation.ValueAnimator {
			constructor();
			static class: java.lang.Class<android.animation.ObjectAnimator>;
			Target: any;
			PropertyName: string;
			setDuration(arg1: native.Long): android.animation.ObjectAnimator;
			static ofPropertyValuesHolder(arg1: any, arg2: native.Array<android.animation.PropertyValuesHolder>): android.animation.ObjectAnimator;
			static ofInt<T>(arg1: T, arg2: android.util.Property<T, java.lang.Integer>, arg3: native.Array<number>): android.animation.ObjectAnimator;
			static ofInt(arg1: any, arg2: java.lang.String, arg3: native.Array<number>): android.animation.ObjectAnimator;
			static ofInt(arg1: any, arg2: string, arg3: native.Array<number>): android.animation.ObjectAnimator;
			static ofObject<T, V>(arg1: T, arg2: android.util.Property<T, V>, arg3: android.animation.ITypeEvaluator<V>, arg4: native.Array<V>): android.animation.ObjectAnimator;
			static ofObject(arg1: any, arg2: java.lang.String, arg3: android.animation.ITypeEvaluator<any>, arg4: native.Array<any>): android.animation.ObjectAnimator;
			static ofObject(arg1: any, arg2: string, arg3: android.animation.ITypeEvaluator<any>, arg4: native.Array<any>): android.animation.ObjectAnimator;
			setIntValues(arg1: native.Array<number>): void;
			static ofFloat<T>(arg1: T, arg2: android.util.Property<T, java.lang.Float>, arg3: native.Array<native.Float>): android.animation.ObjectAnimator;
			static ofFloat(arg1: any, arg2: java.lang.String, arg3: native.Array<native.Float>): android.animation.ObjectAnimator;
			static ofFloat(arg1: any, arg2: string, arg3: native.Array<native.Float>): android.animation.ObjectAnimator;
			setFloatValues(arg1: native.Array<native.Float>): void;
			setupStartValues(): void;
			setObjectValues(arg1: native.Array<any>): void;
			setupEndValues(): void;
			setPropertyName(arg1: java.lang.String): void;
			setPropertyName(arg1: string): void;
			clone(): android.animation.ObjectAnimator;
			toString(): string;
			setProperty(arg1: android.util.Property<any, any>): void;
			start(): void;
			getTarget(): any;
			setTarget(arg1: any): void;
			getPropertyName(): string;
			static ofPropertyValuesHolder(arg1: native.Array<android.animation.PropertyValuesHolder>): android.animation.ValueAnimator;
			static ofInt(arg1: native.Array<number>): android.animation.ValueAnimator;
			static ofObject(arg1: android.animation.ITypeEvaluator<any>, arg2: native.Array<any>): android.animation.ValueAnimator;
			static ofFloat(arg1: native.Array<native.Float>): android.animation.ValueAnimator;
		}
		export class Animator extends java.lang.Object implements java.lang.ICloneable {
			constructor();
			static class: java.lang.Class<android.animation.Animator>;
			getDuration(): any;
			setInterpolator(arg1: android.animation.ITimeInterpolator): void;
			setDuration(arg1: native.Long): android.animation.Animator;
			getStartDelay(): any;
			setStartDelay(arg1: native.Long): void;
			isStarted(): boolean;
			setupStartValues(): void;
			setupEndValues(): void;
			clone(): android.animation.Animator;
			start(): void;
			setTarget(arg1: any): void;
			getListeners(): java.util.ArrayList<android.animation.Animator.IAnimatorListener>;
			isRunning(): boolean;
			removeAllListeners(): void;
			cancel(): void;
			end(): void;
			addListener(arg1: android.animation.Animator.IAnimatorListener): void;
			removeListener(arg1: android.animation.Animator.IAnimatorListener): void;
		}
		export module Animator {
			export class AnimatorListener implements android.animation.Animator.IAnimatorListener {
				constructor(implementation: android.animation.Animator.IAnimatorListener);
				onAnimationEnd(arg1: android.animation.Animator): void;
				onAnimationStart(arg1: android.animation.Animator): void;
				onAnimationRepeat(arg1: android.animation.Animator): void;
				onAnimationCancel(arg1: android.animation.Animator): void;
			}
			export interface IAnimatorListener {
				onAnimationEnd(arg1: android.animation.Animator): void;
				onAnimationStart(arg1: android.animation.Animator): void;
				onAnimationRepeat(arg1: android.animation.Animator): void;
				onAnimationCancel(arg1: android.animation.Animator): void;
			}
		}
		export class Keyframe extends java.lang.Object implements java.lang.ICloneable {
			constructor();
			static class: java.lang.Class<android.animation.Keyframe>;
			Value: any;
			Interpolator: android.animation.ITimeInterpolator;
			setInterpolator(arg1: android.animation.ITimeInterpolator): void;
			getInterpolator(): android.animation.ITimeInterpolator;
			getFraction(): number;
			static ofInt(arg1: native.Float): android.animation.Keyframe;
			static ofInt(arg1: native.Float, arg2: number): android.animation.Keyframe;
			static ofObject(arg1: native.Float): android.animation.Keyframe;
			static ofObject(arg1: native.Float, arg2: any): android.animation.Keyframe;
			setFraction(arg1: native.Float): void;
			hasValue(): boolean;
			static ofFloat(arg1: native.Float, arg2: native.Float): android.animation.Keyframe;
			static ofFloat(arg1: native.Float): android.animation.Keyframe;
			clone(): android.animation.Keyframe;
			getValue(): any;
			getType(): java.lang.Class<any>;
			setValue(arg1: any): void;
		}
		export class AnimatorSet extends android.animation.Animator {
			constructor();
			static class: java.lang.Class<android.animation.AnimatorSet>;
			getDuration(): any;
			setInterpolator(arg1: android.animation.ITimeInterpolator): void;
			setDuration(arg1: native.Long): android.animation.AnimatorSet;
			getStartDelay(): any;
			setStartDelay(arg1: native.Long): void;
			isStarted(): boolean;
			playTogether(arg1: java.util.ICollection<android.animation.Animator>): void;
			playTogether(arg1: native.Array<android.animation.Animator>): void;
			setupStartValues(): void;
			setupEndValues(): void;
			playSequentially(arg1: java.util.IList<android.animation.Animator>): void;
			playSequentially(arg1: native.Array<android.animation.Animator>): void;
			getChildAnimations(): java.util.ArrayList<android.animation.Animator>;
			clone(): android.animation.AnimatorSet;
			start(): void;
			setTarget(arg1: any): void;
			isRunning(): boolean;
			cancel(): void;
			end(): void;
			play(arg1: android.animation.Animator): android.animation.AnimatorSet.Builder;
		}
		export module AnimatorSet {
			export class Builder extends java.lang.Object {
				static class: java.lang.Class<android.animation.AnimatorSet.Builder>;
				after(arg1: android.animation.Animator): android.animation.AnimatorSet.Builder;
				after(arg1: native.Long): android.animation.AnimatorSet.Builder;
				before(arg1: android.animation.Animator): android.animation.AnimatorSet.Builder;
				with(arg1: android.animation.Animator): android.animation.AnimatorSet.Builder;
			}
		}
		export interface ITypeEvaluator<T> {
			evaluate(arg1: native.Float, arg2: T, arg3: T): T;
		}
	}
	export module gesture {
		export class GestureUtils extends java.lang.Object {
			static class: java.lang.Class<android.gesture.GestureUtils>;
			static computeOrientedBoundingBox(arg1: native.Array<native.Float>): android.gesture.OrientedBoundingBox;
			static computeOrientedBoundingBox(arg1: java.util.ArrayList<android.gesture.GesturePoint>): android.gesture.OrientedBoundingBox;
			static temporalSampling(arg1: android.gesture.GestureStroke, arg2: number): native.Array<native.Float>;
			static spatialSampling(arg1: android.gesture.Gesture, arg2: number, arg3: boolean): native.Array<native.Float>;
			static spatialSampling(arg1: android.gesture.Gesture, arg2: number): native.Array<native.Float>;
		}
		export class Prediction extends java.lang.Object {
			name: java.lang.String;
			score: native.Double;
			static class: java.lang.Class<android.gesture.Prediction>;
			toString(): string;
		}
		export class GestureStroke extends java.lang.Object {
			constructor(arg1: java.util.ArrayList<android.gesture.GesturePoint>);
			boundingBox: android.graphics.RectF;
			length: native.Float;
			points: native.Array<native.Float>;
			static class: java.lang.Class<android.gesture.GestureStroke>;
			computeOrientedBoundingBox(): android.gesture.OrientedBoundingBox;
			clearPath(): void;
			clone(): any;
			getPath(): android.graphics.Path;
			toPath(arg1: native.Float, arg2: native.Float, arg3: number): android.graphics.Path;
		}
		export class OrientedBoundingBox extends java.lang.Object {
			squareness: native.Float;
			width: native.Float;
			height: native.Float;
			orientation: native.Float;
			centerX: native.Float;
			centerY: native.Float;
			static class: java.lang.Class<android.gesture.OrientedBoundingBox>;
		}
		export class Gesture extends java.lang.Object implements android.os.IParcelable {
			constructor();
			static CREATOR: android.os.Parcelable.ICreator<android.gesture.Gesture>;
			static class: java.lang.Class<android.gesture.Gesture>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getStrokes(): java.util.ArrayList<android.gesture.GestureStroke>;
			toBitmap(arg1: number, arg2: number, arg3: number, arg4: number): android.graphics.Bitmap;
			toBitmap(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): android.graphics.Bitmap;
			addStroke(arg1: android.gesture.GestureStroke): void;
			getBoundingBox(): android.graphics.RectF;
			getStrokesCount(): number;
			clone(): any;
			getLength(): number;
			toPath(arg1: android.graphics.Path): android.graphics.Path;
			toPath(): android.graphics.Path;
			toPath(arg1: android.graphics.Path, arg2: number, arg3: number, arg4: number, arg5: number): android.graphics.Path;
			toPath(arg1: number, arg2: number, arg3: number, arg4: number): android.graphics.Path;
			getID(): any;
		}
		export class GestureStore extends java.lang.Object {
			constructor();
			static SEQUENCE_INVARIANT: number;
			static SEQUENCE_SENSITIVE: number;
			static ORIENTATION_INVARIANT: number;
			static ORIENTATION_SENSITIVE: number;
			static class: java.lang.Class<android.gesture.GestureStore>;
			SequenceType: number;
			OrientationStyle: number;
			removeEntry(arg1: java.lang.String): void;
			removeEntry(arg1: string): void;
			hasChanged(): boolean;
			addGesture(arg1: java.lang.String, arg2: android.gesture.Gesture): void;
			addGesture(arg1: string, arg2: android.gesture.Gesture): void;
			removeGesture(arg1: java.lang.String, arg2: android.gesture.Gesture): void;
			removeGesture(arg1: string, arg2: android.gesture.Gesture): void;
			getGestures(arg1: java.lang.String): java.util.ArrayList<android.gesture.Gesture>;
			getGestures(arg1: string): java.util.ArrayList<android.gesture.Gesture>;
			recognize(arg1: android.gesture.Gesture): java.util.ArrayList<android.gesture.Prediction>;
			setOrientationStyle(arg1: number): void;
			getOrientationStyle(): number;
			setSequenceType(arg1: number): void;
			getSequenceType(): number;
			getGestureEntries(): java.util.ISet<string>;
			load(arg1: java.io.InputStream): void;
			load(arg1: java.io.InputStream, arg2: boolean): void;
			save(arg1: java.io.OutputStream): void;
			save(arg1: java.io.OutputStream, arg2: boolean): void;
		}
		export class GestureLibraries extends java.lang.Object {
			static class: java.lang.Class<android.gesture.GestureLibraries>;
			static fromFile(arg1: java.io.File): android.gesture.GestureLibrary;
			static fromFile(arg1: java.lang.String): android.gesture.GestureLibrary;
			static fromFile(arg1: string): android.gesture.GestureLibrary;
			static fromRawResource(arg1: android.content.Context, arg2: number): android.gesture.GestureLibrary;
			static fromPrivateFile(arg1: android.content.Context, arg2: java.lang.String): android.gesture.GestureLibrary;
			static fromPrivateFile(arg1: android.content.Context, arg2: string): android.gesture.GestureLibrary;
		}
		export class GestureOverlayView extends android.widget.FrameLayout {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static GESTURE_STROKE_TYPE_SINGLE: number;
			static GESTURE_STROKE_TYPE_MULTIPLE: number;
			static ORIENTATION_HORIZONTAL: number;
			static ORIENTATION_VERTICAL: number;
			static class: java.lang.Class<android.gesture.GestureOverlayView>;
			Orientation: number;
			GestureColor: number;
			Gesture: android.gesture.Gesture;
			UncertainGestureColor: number;
			GestureStrokeType: number;
			dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
			removeOnGestureListener(arg1: android.gesture.GestureOverlayView.IOnGestureListener): void;
			removeAllOnGestureListeners(): void;
			addOnGesturePerformedListener(arg1: android.gesture.GestureOverlayView.IOnGesturePerformedListener): void;
			setEventsInterceptionEnabled(arg1: boolean): void;
			setUncertainGestureColor(arg1: number): void;
			getUncertainGestureColor(): number;
			isEventsInterceptionEnabled(): boolean;
			removeAllOnGesturingListeners(): void;
			removeOnGesturingListener(arg1: android.gesture.GestureOverlayView.IOnGesturingListener): void;
			addOnGesturingListener(arg1: android.gesture.GestureOverlayView.IOnGesturingListener): void;
			getFadeOffset(): any;
			setGesture(arg1: android.gesture.Gesture): void;
			isFadeEnabled(): boolean;
			getGesture(): android.gesture.Gesture;
			isGesturing(): boolean;
			cancelGesture(): void;
			setFadeOffset(arg1: native.Long): void;
			setGestureStrokeType(arg1: number): void;
			getGestureStrokeWidth(): number;
			getGesturePath(arg1: android.graphics.Path): android.graphics.Path;
			getGesturePath(): android.graphics.Path;
			addOnGestureListener(arg1: android.gesture.GestureOverlayView.IOnGestureListener): void;
			cancelClearAnimation(): void;
			setGestureStrokeWidth(arg1: native.Float): void;
			setFadeEnabled(arg1: boolean): void;
			getCurrentStroke(): java.util.ArrayList<android.gesture.GesturePoint>;
			setGestureColor(arg1: number): void;
			isGestureVisible(): boolean;
			setGestureVisible(arg1: boolean): void;
			getGestureColor(): number;
			getGestureStrokeType(): number;
			removeAllOnGesturePerformedListeners(): void;
			getGestureStrokeLengthThreshold(): number;
			setGestureStrokeSquarenessTreshold(arg1: native.Float): void;
			getGestureStrokeSquarenessTreshold(): number;
			setGestureStrokeLengthThreshold(arg1: native.Float): void;
			getGestureStrokeAngleThreshold(): number;
			setGestureStrokeAngleThreshold(arg1: native.Float): void;
			removeOnGesturePerformedListener(arg1: android.gesture.GestureOverlayView.IOnGesturePerformedListener): void;
			clear(arg1: boolean): void;
			getOrientation(): number;
			draw(arg1: android.graphics.Canvas): void;
			setOrientation(arg1: number): void;
		}
		export module GestureOverlayView {
			export class OnGestureListener implements android.gesture.GestureOverlayView.IOnGestureListener {
				constructor(implementation: android.gesture.GestureOverlayView.IOnGestureListener);
				onGesture(arg1: android.gesture.GestureOverlayView, arg2: android.view.MotionEvent): void;
				onGestureStarted(arg1: android.gesture.GestureOverlayView, arg2: android.view.MotionEvent): void;
				onGestureCancelled(arg1: android.gesture.GestureOverlayView, arg2: android.view.MotionEvent): void;
				onGestureEnded(arg1: android.gesture.GestureOverlayView, arg2: android.view.MotionEvent): void;
			}
			export interface IOnGestureListener {
				onGesture(arg1: android.gesture.GestureOverlayView, arg2: android.view.MotionEvent): void;
				onGestureStarted(arg1: android.gesture.GestureOverlayView, arg2: android.view.MotionEvent): void;
				onGestureCancelled(arg1: android.gesture.GestureOverlayView, arg2: android.view.MotionEvent): void;
				onGestureEnded(arg1: android.gesture.GestureOverlayView, arg2: android.view.MotionEvent): void;
			}
			export class OnGesturePerformedListener implements android.gesture.GestureOverlayView.IOnGesturePerformedListener {
				constructor(implementation: android.gesture.GestureOverlayView.IOnGesturePerformedListener);
				onGesturePerformed(arg1: android.gesture.GestureOverlayView, arg2: android.gesture.Gesture): void;
			}
			export class OnGesturingListener implements android.gesture.GestureOverlayView.IOnGesturingListener {
				constructor(implementation: android.gesture.GestureOverlayView.IOnGesturingListener);
				onGesturingStarted(arg1: android.gesture.GestureOverlayView): void;
				onGesturingEnded(arg1: android.gesture.GestureOverlayView): void;
			}
			export interface IOnGesturePerformedListener {
				onGesturePerformed(arg1: android.gesture.GestureOverlayView, arg2: android.gesture.Gesture): void;
			}
			export interface IOnGesturingListener {
				onGesturingStarted(arg1: android.gesture.GestureOverlayView): void;
				onGesturingEnded(arg1: android.gesture.GestureOverlayView): void;
			}
		}
		export class GesturePoint extends java.lang.Object {
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Long);
			x: native.Float;
			y: native.Float;
			timestamp: native.Long;
			static class: java.lang.Class<android.gesture.GesturePoint>;
			clone(): any;
		}
		export class GestureLibrary extends java.lang.Object {
			static class: java.lang.Class<android.gesture.GestureLibrary>;
			SequenceType: number;
			OrientationStyle: number;
			removeEntry(arg1: java.lang.String): void;
			removeEntry(arg1: string): void;
			addGesture(arg1: java.lang.String, arg2: android.gesture.Gesture): void;
			addGesture(arg1: string, arg2: android.gesture.Gesture): void;
			removeGesture(arg1: java.lang.String, arg2: android.gesture.Gesture): void;
			removeGesture(arg1: string, arg2: android.gesture.Gesture): void;
			getGestures(arg1: java.lang.String): java.util.ArrayList<android.gesture.Gesture>;
			getGestures(arg1: string): java.util.ArrayList<android.gesture.Gesture>;
			recognize(arg1: android.gesture.Gesture): java.util.ArrayList<android.gesture.Prediction>;
			setOrientationStyle(arg1: number): void;
			getOrientationStyle(): number;
			setSequenceType(arg1: number): void;
			getSequenceType(): number;
			getGestureEntries(): java.util.ISet<string>;
			load(): boolean;
			save(): boolean;
			isReadOnly(): boolean;
		}
	}
	export module provider {
		export class ContactsContract extends java.lang.Object {
			constructor();
			static AUTHORITY: java.lang.String;
			static AUTHORITY_URI: android.net.Uri;
			static CALLER_IS_SYNCADAPTER: java.lang.String;
			static DIRECTORY_PARAM_KEY: java.lang.String;
			static LIMIT_PARAM_KEY: java.lang.String;
			static PRIMARY_ACCOUNT_NAME: java.lang.String;
			static PRIMARY_ACCOUNT_TYPE: java.lang.String;
			static class: java.lang.Class<android.provider.ContactsContract>;
			static isProfileId(arg1: native.Long): boolean;
		}
		export module ContactsContract {
			export class GroupsColumns implements android.provider.ContactsContract.IGroupsColumns {
				constructor(implementation: android.provider.ContactsContract.IGroupsColumns);
				static DATA_SET: java.lang.String;
				static TITLE: java.lang.String;
				static NOTES: java.lang.String;
				static SYSTEM_ID: java.lang.String;
				static SUMMARY_COUNT: java.lang.String;
				static SUMMARY_WITH_PHONES: java.lang.String;
				static GROUP_VISIBLE: java.lang.String;
				static DELETED: java.lang.String;
				static SHOULD_SYNC: java.lang.String;
				static AUTO_ADD: java.lang.String;
				static FAVORITES: java.lang.String;
				static GROUP_IS_READ_ONLY: java.lang.String;
			}
			export class DataColumnsWithJoins implements android.provider.IBaseColumns, android.provider.ContactsContract.IDataColumns, android.provider.ContactsContract.IStatusColumns, android.provider.ContactsContract.IRawContactsColumns, android.provider.ContactsContract.IContactsColumns, android.provider.ContactsContract.IContactNameColumns, android.provider.ContactsContract.IContactOptionsColumns, android.provider.ContactsContract.IContactStatusColumns, android.provider.ContactsContract.IDataColumnsWithJoins {
				constructor(implementation: android.provider.ContactsContract.IDataColumnsWithJoins);
			}
			export interface IPhoneticNameStyle {
			}
			export module IPhoneticNameStyle {
				var UNDEFINED: number;
				var PINYIN: number;
				var JAPANESE: number;
				var KOREAN: number;
			}
			export class DisplayNameSources implements android.provider.ContactsContract.IDisplayNameSources {
				constructor(implementation: android.provider.ContactsContract.IDisplayNameSources);
				static UNDEFINED: number;
				static EMAIL: number;
				static PHONE: number;
				static ORGANIZATION: number;
				static NICKNAME: number;
				static STRUCTURED_NAME: number;
			}
			export interface IDataColumnsWithJoins extends android.provider.IBaseColumns, android.provider.ContactsContract.IDataColumns, android.provider.ContactsContract.IStatusColumns, android.provider.ContactsContract.IRawContactsColumns, android.provider.ContactsContract.IContactsColumns, android.provider.ContactsContract.IContactNameColumns, android.provider.ContactsContract.IContactOptionsColumns, android.provider.ContactsContract.IContactStatusColumns {
			}
			export class QuickContact extends java.lang.Object {
				constructor();
				static MODE_SMALL: number;
				static MODE_MEDIUM: number;
				static MODE_LARGE: number;
				static class: java.lang.Class<android.provider.ContactsContract.QuickContact>;
				static showQuickContact(arg1: android.content.Context, arg2: android.view.View, arg3: android.net.Uri, arg4: number, arg5: native.Array<java.lang.String>): void;
				static showQuickContact(arg1: android.content.Context, arg2: android.graphics.Rect, arg3: android.net.Uri, arg4: number, arg5: native.Array<java.lang.String>): void;
			}
			export class SyncState extends java.lang.Object implements android.provider.SyncStateContract.IColumns {
				static CONTENT_DIRECTORY: java.lang.String;
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.ContactsContract.SyncState>;
				static newSetOperation(arg1: android.accounts.Account, arg2: native.Array<native.Byte>): android.content.ContentProviderOperation;
				static getWithUri(arg1: android.content.ContentProviderClient, arg2: android.accounts.Account): android.util.Pair<android.net.Uri, native.Array<native.Byte>>;
				static get(arg1: android.content.ContentProviderClient, arg2: android.accounts.Account): native.Array<native.Byte>;
				static set(arg1: android.content.ContentProviderClient, arg2: android.accounts.Account, arg3: native.Array<native.Byte>): void;
			}
			export interface IPresenceColumns {
			}
			export module IPresenceColumns {
				var DATA_ID: java.lang.String;
				var PROTOCOL: java.lang.String;
				var CUSTOM_PROTOCOL: java.lang.String;
				var IM_HANDLE: java.lang.String;
				var IM_ACCOUNT: java.lang.String;
			}
			export class PhoneLookup extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IPhoneLookupColumns, android.provider.ContactsContract.IContactsColumns, android.provider.ContactsContract.IContactOptionsColumns {
				static CONTENT_FILTER_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.ContactsContract.PhoneLookup>;
			}
			export class DisplayPhoto extends java.lang.Object {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_MAX_DIMENSIONS_URI: android.net.Uri;
				static DISPLAY_MAX_DIM: java.lang.String;
				static THUMBNAIL_MAX_DIM: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.DisplayPhoto>;
			}
			export interface IFullNameStyle {
			}
			export module IFullNameStyle {
				var UNDEFINED: number;
				var WESTERN: number;
				var CJK: number;
				var CHINESE: number;
				var JAPANESE: number;
				var KOREAN: number;
			}
			export class RawContactsEntity extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IDataColumns, android.provider.ContactsContract.IRawContactsColumns {
				static CONTENT_URI: android.net.Uri;
				static PROFILE_CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static DATA_ID: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.RawContactsEntity>;
			}
			export class StreamItemPhotosColumns implements android.provider.ContactsContract.IStreamItemPhotosColumns {
				constructor(implementation: android.provider.ContactsContract.IStreamItemPhotosColumns);
				static STREAM_ITEM_ID: java.lang.String;
				static SORT_INDEX: java.lang.String;
				static PHOTO_FILE_ID: java.lang.String;
				static PHOTO_URI: java.lang.String;
				static SYNC1: java.lang.String;
				static SYNC2: java.lang.String;
				static SYNC3: java.lang.String;
				static SYNC4: java.lang.String;
			}
			export class Data extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.Data>;
				static getContactLookupUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): android.net.Uri;
			}
			export class FullNameStyle implements android.provider.ContactsContract.IFullNameStyle {
				constructor(implementation: android.provider.ContactsContract.IFullNameStyle);
				static UNDEFINED: number;
				static WESTERN: number;
				static CJK: number;
				static CHINESE: number;
				static JAPANESE: number;
				static KOREAN: number;
			}
			export class StatusUpdates extends java.lang.Object implements android.provider.ContactsContract.IStatusColumns, android.provider.ContactsContract.IPresenceColumns {
				static CONTENT_URI: android.net.Uri;
				static PROFILE_CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.StatusUpdates>;
				static getPresenceIconResourceId(arg1: number): number;
				static getPresencePrecedence(arg1: number): number;
			}
			export class ProfileSyncState extends java.lang.Object implements android.provider.SyncStateContract.IColumns {
				static CONTENT_DIRECTORY: java.lang.String;
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.ContactsContract.ProfileSyncState>;
				static newSetOperation(arg1: android.accounts.Account, arg2: native.Array<native.Byte>): android.content.ContentProviderOperation;
				static getWithUri(arg1: android.content.ContentProviderClient, arg2: android.accounts.Account): android.util.Pair<android.net.Uri, native.Array<native.Byte>>;
				static get(arg1: android.content.ContentProviderClient, arg2: android.accounts.Account): native.Array<native.Byte>;
				static set(arg1: android.content.ContentProviderClient, arg2: android.accounts.Account, arg3: native.Array<native.Byte>): void;
			}
			export interface IContactOptionsColumns {
			}
			export module IContactOptionsColumns {
				var TIMES_CONTACTED: java.lang.String;
				var LAST_TIME_CONTACTED: java.lang.String;
				var STARRED: java.lang.String;
				var CUSTOM_RINGTONE: java.lang.String;
				var SEND_TO_VOICEMAIL: java.lang.String;
			}
			export class DataUsageFeedback extends java.lang.Object {
				constructor();
				static FEEDBACK_URI: android.net.Uri;
				static DELETE_USAGE_URI: android.net.Uri;
				static USAGE_TYPE: java.lang.String;
				static USAGE_TYPE_CALL: java.lang.String;
				static USAGE_TYPE_LONG_TEXT: java.lang.String;
				static USAGE_TYPE_SHORT_TEXT: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.DataUsageFeedback>;
			}
			export interface IDisplayNameSources {
			}
			export module IDisplayNameSources {
				var UNDEFINED: number;
				var EMAIL: number;
				var PHONE: number;
				var ORGANIZATION: number;
				var NICKNAME: number;
				var STRUCTURED_NAME: number;
			}
			export class StreamItemPhotos extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IStreamItemPhotosColumns {
				static PHOTO: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.StreamItemPhotos>;
			}
			export interface IStreamItemsColumns {
			}
			export module IStreamItemsColumns {
				var CONTACT_ID: java.lang.String;
				var CONTACT_LOOKUP_KEY: java.lang.String;
				var RAW_CONTACT_ID: java.lang.String;
				var RES_PACKAGE: java.lang.String;
				var ACCOUNT_TYPE: java.lang.String;
				var ACCOUNT_NAME: java.lang.String;
				var DATA_SET: java.lang.String;
				var RAW_CONTACT_SOURCE_ID: java.lang.String;
				var RES_ICON: java.lang.String;
				var RES_LABEL: java.lang.String;
				var TEXT: java.lang.String;
				var TIMESTAMP: java.lang.String;
				var COMMENTS: java.lang.String;
				var SYNC1: java.lang.String;
				var SYNC2: java.lang.String;
				var SYNC3: java.lang.String;
				var SYNC4: java.lang.String;
			}
			export class ContactStatusColumns implements android.provider.ContactsContract.IContactStatusColumns {
				constructor(implementation: android.provider.ContactsContract.IContactStatusColumns);
				static CONTACT_PRESENCE: java.lang.String;
				static CONTACT_CHAT_CAPABILITY: java.lang.String;
				static CONTACT_STATUS: java.lang.String;
				static CONTACT_STATUS_TIMESTAMP: java.lang.String;
				static CONTACT_STATUS_RES_PACKAGE: java.lang.String;
				static CONTACT_STATUS_LABEL: java.lang.String;
				static CONTACT_STATUS_ICON: java.lang.String;
			}
			export interface IDataColumns {
			}
			export module IDataColumns {
				var MIMETYPE: java.lang.String;
				var RAW_CONTACT_ID: java.lang.String;
				var IS_PRIMARY: java.lang.String;
				var IS_SUPER_PRIMARY: java.lang.String;
				var IS_READ_ONLY: java.lang.String;
				var DATA_VERSION: java.lang.String;
				var DATA1: java.lang.String;
				var DATA2: java.lang.String;
				var DATA3: java.lang.String;
				var DATA4: java.lang.String;
				var DATA5: java.lang.String;
				var DATA6: java.lang.String;
				var DATA7: java.lang.String;
				var DATA8: java.lang.String;
				var DATA9: java.lang.String;
				var DATA10: java.lang.String;
				var DATA11: java.lang.String;
				var DATA12: java.lang.String;
				var DATA13: java.lang.String;
				var DATA14: java.lang.String;
				var DATA15: java.lang.String;
				var SYNC1: java.lang.String;
				var SYNC2: java.lang.String;
				var SYNC3: java.lang.String;
				var SYNC4: java.lang.String;
			}
			export interface IBaseSyncColumns {
			}
			export module IBaseSyncColumns {
				var SYNC1: java.lang.String;
				var SYNC2: java.lang.String;
				var SYNC3: java.lang.String;
				var SYNC4: java.lang.String;
			}
			export class ContactNameColumns implements android.provider.ContactsContract.IContactNameColumns {
				constructor(implementation: android.provider.ContactsContract.IContactNameColumns);
				static DISPLAY_NAME_SOURCE: java.lang.String;
				static DISPLAY_NAME_PRIMARY: java.lang.String;
				static DISPLAY_NAME_ALTERNATIVE: java.lang.String;
				static PHONETIC_NAME_STYLE: java.lang.String;
				static PHONETIC_NAME: java.lang.String;
				static SORT_KEY_PRIMARY: java.lang.String;
				static SORT_KEY_ALTERNATIVE: java.lang.String;
			}
			export class Profile extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IContactsColumns, android.provider.ContactsContract.IContactOptionsColumns, android.provider.ContactsContract.IContactNameColumns, android.provider.ContactsContract.IContactStatusColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_VCARD_URI: android.net.Uri;
				static CONTENT_RAW_CONTACTS_URI: android.net.Uri;
				static MIN_ID: native.Long;
				static class: java.lang.Class<android.provider.ContactsContract.Profile>;
			}
			export interface ISyncColumns extends android.provider.ContactsContract.IBaseSyncColumns {
			}
			export module ISyncColumns {
				var ACCOUNT_NAME: java.lang.String;
				var ACCOUNT_TYPE: java.lang.String;
				var SOURCE_ID: java.lang.String;
				var VERSION: java.lang.String;
				var DIRTY: java.lang.String;
			}
			export interface IContactNameColumns {
			}
			export module IContactNameColumns {
				var DISPLAY_NAME_SOURCE: java.lang.String;
				var DISPLAY_NAME_PRIMARY: java.lang.String;
				var DISPLAY_NAME_ALTERNATIVE: java.lang.String;
				var PHONETIC_NAME_STYLE: java.lang.String;
				var PHONETIC_NAME: java.lang.String;
				var SORT_KEY_PRIMARY: java.lang.String;
				var SORT_KEY_ALTERNATIVE: java.lang.String;
			}
			export class PresenceColumns implements android.provider.ContactsContract.IPresenceColumns {
				constructor(implementation: android.provider.ContactsContract.IPresenceColumns);
				static DATA_ID: java.lang.String;
				static PROTOCOL: java.lang.String;
				static CUSTOM_PROTOCOL: java.lang.String;
				static IM_HANDLE: java.lang.String;
				static IM_ACCOUNT: java.lang.String;
			}
			export class SettingsColumns implements android.provider.ContactsContract.ISettingsColumns {
				constructor(implementation: android.provider.ContactsContract.ISettingsColumns);
				static ACCOUNT_NAME: java.lang.String;
				static ACCOUNT_TYPE: java.lang.String;
				static DATA_SET: java.lang.String;
				static SHOULD_SYNC: java.lang.String;
				static UNGROUPED_VISIBLE: java.lang.String;
				static ANY_UNSYNCED: java.lang.String;
				static UNGROUPED_COUNT: java.lang.String;
				static UNGROUPED_WITH_PHONES: java.lang.String;
			}
			export class StreamItemsColumns implements android.provider.ContactsContract.IStreamItemsColumns {
				constructor(implementation: android.provider.ContactsContract.IStreamItemsColumns);
				static CONTACT_ID: java.lang.String;
				static CONTACT_LOOKUP_KEY: java.lang.String;
				static RAW_CONTACT_ID: java.lang.String;
				static RES_PACKAGE: java.lang.String;
				static ACCOUNT_TYPE: java.lang.String;
				static ACCOUNT_NAME: java.lang.String;
				static DATA_SET: java.lang.String;
				static RAW_CONTACT_SOURCE_ID: java.lang.String;
				static RES_ICON: java.lang.String;
				static RES_LABEL: java.lang.String;
				static TEXT: java.lang.String;
				static TIMESTAMP: java.lang.String;
				static COMMENTS: java.lang.String;
				static SYNC1: java.lang.String;
				static SYNC2: java.lang.String;
				static SYNC3: java.lang.String;
				static SYNC4: java.lang.String;
			}
			export class StatusColumns implements android.provider.ContactsContract.IStatusColumns {
				constructor(implementation: android.provider.ContactsContract.IStatusColumns);
				static PRESENCE: java.lang.String;
				static PRESENCE_STATUS: java.lang.String;
				static OFFLINE: number;
				static INVISIBLE: number;
				static AWAY: number;
				static IDLE: number;
				static DO_NOT_DISTURB: number;
				static AVAILABLE: number;
				static STATUS: java.lang.String;
				static PRESENCE_CUSTOM_STATUS: java.lang.String;
				static STATUS_TIMESTAMP: java.lang.String;
				static STATUS_RES_PACKAGE: java.lang.String;
				static STATUS_LABEL: java.lang.String;
				static STATUS_ICON: java.lang.String;
				static CHAT_CAPABILITY: java.lang.String;
				static CAPABILITY_HAS_VOICE: number;
				static CAPABILITY_HAS_VIDEO: number;
				static CAPABILITY_HAS_CAMERA: number;
			}
			export class PhoneLookupColumns implements android.provider.ContactsContract.IPhoneLookupColumns {
				constructor(implementation: android.provider.ContactsContract.IPhoneLookupColumns);
				static NUMBER: java.lang.String;
				static TYPE: java.lang.String;
				static LABEL: java.lang.String;
				static NORMALIZED_NUMBER: java.lang.String;
			}
			export class SyncColumns implements android.provider.ContactsContract.IBaseSyncColumns, android.provider.ContactsContract.ISyncColumns {
				constructor(implementation: android.provider.ContactsContract.ISyncColumns);
				static ACCOUNT_NAME: java.lang.String;
				static ACCOUNT_TYPE: java.lang.String;
				static SOURCE_ID: java.lang.String;
				static VERSION: java.lang.String;
				static DIRTY: java.lang.String;
			}
			export class Intents extends java.lang.Object {
				constructor();
				static SEARCH_SUGGESTION_CLICKED: java.lang.String;
				static SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED: java.lang.String;
				static SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED: java.lang.String;
				static ATTACH_IMAGE: java.lang.String;
				static INVITE_CONTACT: java.lang.String;
				static SHOW_OR_CREATE_CONTACT: java.lang.String;
				static EXTRA_FORCE_CREATE: java.lang.String;
				static EXTRA_CREATE_DESCRIPTION: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.Intents>;
			}
			export module Intents {
				export class Insert extends java.lang.Object {
					constructor();
					static ACTION: java.lang.String;
					static FULL_MODE: java.lang.String;
					static NAME: java.lang.String;
					static PHONETIC_NAME: java.lang.String;
					static COMPANY: java.lang.String;
					static JOB_TITLE: java.lang.String;
					static NOTES: java.lang.String;
					static PHONE: java.lang.String;
					static PHONE_TYPE: java.lang.String;
					static PHONE_ISPRIMARY: java.lang.String;
					static SECONDARY_PHONE: java.lang.String;
					static SECONDARY_PHONE_TYPE: java.lang.String;
					static TERTIARY_PHONE: java.lang.String;
					static TERTIARY_PHONE_TYPE: java.lang.String;
					static EMAIL: java.lang.String;
					static EMAIL_TYPE: java.lang.String;
					static EMAIL_ISPRIMARY: java.lang.String;
					static SECONDARY_EMAIL: java.lang.String;
					static SECONDARY_EMAIL_TYPE: java.lang.String;
					static TERTIARY_EMAIL: java.lang.String;
					static TERTIARY_EMAIL_TYPE: java.lang.String;
					static POSTAL: java.lang.String;
					static POSTAL_TYPE: java.lang.String;
					static POSTAL_ISPRIMARY: java.lang.String;
					static IM_HANDLE: java.lang.String;
					static IM_PROTOCOL: java.lang.String;
					static IM_ISPRIMARY: java.lang.String;
					static DATA: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.Intents.Insert>;
				}
			}
			export interface IContactsColumns {
			}
			export module IContactsColumns {
				var DISPLAY_NAME: java.lang.String;
				var PHOTO_ID: java.lang.String;
				var PHOTO_FILE_ID: java.lang.String;
				var PHOTO_URI: java.lang.String;
				var PHOTO_THUMBNAIL_URI: java.lang.String;
				var IN_VISIBLE_GROUP: java.lang.String;
				var IS_USER_PROFILE: java.lang.String;
				var HAS_PHONE_NUMBER: java.lang.String;
				var LOOKUP_KEY: java.lang.String;
			}
			export class Presence extends android.provider.ContactsContract.StatusUpdates {
				constructor();
				static class: java.lang.Class<android.provider.ContactsContract.Presence>;
			}
			export class Groups extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IGroupsColumns, android.provider.ContactsContract.ISyncColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_SUMMARY_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.Groups>;
				static newEntityIterator(arg1: android.database.ICursor): android.content.IEntityIterator;
			}
			export class DataColumns implements android.provider.ContactsContract.IDataColumns {
				constructor(implementation: android.provider.ContactsContract.IDataColumns);
				static MIMETYPE: java.lang.String;
				static RAW_CONTACT_ID: java.lang.String;
				static IS_PRIMARY: java.lang.String;
				static IS_SUPER_PRIMARY: java.lang.String;
				static IS_READ_ONLY: java.lang.String;
				static DATA_VERSION: java.lang.String;
				static DATA1: java.lang.String;
				static DATA2: java.lang.String;
				static DATA3: java.lang.String;
				static DATA4: java.lang.String;
				static DATA5: java.lang.String;
				static DATA6: java.lang.String;
				static DATA7: java.lang.String;
				static DATA8: java.lang.String;
				static DATA9: java.lang.String;
				static DATA10: java.lang.String;
				static DATA11: java.lang.String;
				static DATA12: java.lang.String;
				static DATA13: java.lang.String;
				static DATA14: java.lang.String;
				static DATA15: java.lang.String;
				static SYNC1: java.lang.String;
				static SYNC2: java.lang.String;
				static SYNC3: java.lang.String;
				static SYNC4: java.lang.String;
			}
			export interface IRawContactsColumns {
			}
			export module IRawContactsColumns {
				var CONTACT_ID: java.lang.String;
				var DATA_SET: java.lang.String;
				var AGGREGATION_MODE: java.lang.String;
				var DELETED: java.lang.String;
				var RAW_CONTACT_IS_READ_ONLY: java.lang.String;
				var RAW_CONTACT_IS_USER_PROFILE: java.lang.String;
			}
			export class RawContacts extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IRawContactsColumns, android.provider.ContactsContract.IContactOptionsColumns, android.provider.ContactsContract.IContactNameColumns, android.provider.ContactsContract.ISyncColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static AGGREGATION_MODE_DEFAULT: number;
				static AGGREGATION_MODE_IMMEDIATE: number;
				static AGGREGATION_MODE_SUSPENDED: number;
				static AGGREGATION_MODE_DISABLED: number;
				static class: java.lang.Class<android.provider.ContactsContract.RawContacts>;
				static newEntityIterator(arg1: android.database.ICursor): android.content.IEntityIterator;
				static getContactLookupUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): android.net.Uri;
			}
			export module RawContacts {
				export class Data extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IDataColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.RawContacts.Data>;
				}
				export class StreamItems extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IStreamItemsColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.RawContacts.StreamItems>;
				}
				export class DisplayPhoto extends java.lang.Object {
					static CONTENT_DIRECTORY: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.RawContacts.DisplayPhoto>;
				}
				export class Entity extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IDataColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static DATA_ID: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.RawContacts.Entity>;
				}
			}
			export class PhoneticNameStyle implements android.provider.ContactsContract.IPhoneticNameStyle {
				constructor(implementation: android.provider.ContactsContract.IPhoneticNameStyle);
				static UNDEFINED: number;
				static PINYIN: number;
				static JAPANESE: number;
				static KOREAN: number;
			}
			export interface IGroupsColumns {
			}
			export module IGroupsColumns {
				var DATA_SET: java.lang.String;
				var TITLE: java.lang.String;
				var NOTES: java.lang.String;
				var SYSTEM_ID: java.lang.String;
				var SUMMARY_COUNT: java.lang.String;
				var SUMMARY_WITH_PHONES: java.lang.String;
				var GROUP_VISIBLE: java.lang.String;
				var DELETED: java.lang.String;
				var SHOULD_SYNC: java.lang.String;
				var AUTO_ADD: java.lang.String;
				var FAVORITES: java.lang.String;
				var GROUP_IS_READ_ONLY: java.lang.String;
			}
			export class AggregationExceptions extends java.lang.Object implements android.provider.IBaseColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static TYPE: java.lang.String;
				static TYPE_AUTOMATIC: number;
				static TYPE_KEEP_TOGETHER: number;
				static TYPE_KEEP_SEPARATE: number;
				static RAW_CONTACT_ID1: java.lang.String;
				static RAW_CONTACT_ID2: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.AggregationExceptions>;
			}
			export class Contacts extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IContactsColumns, android.provider.ContactsContract.IContactOptionsColumns, android.provider.ContactsContract.IContactNameColumns, android.provider.ContactsContract.IContactStatusColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_LOOKUP_URI: android.net.Uri;
				static CONTENT_VCARD_URI: android.net.Uri;
				static CONTENT_FILTER_URI: android.net.Uri;
				static CONTENT_STREQUENT_URI: android.net.Uri;
				static CONTENT_STREQUENT_FILTER_URI: android.net.Uri;
				static CONTENT_GROUP_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static CONTENT_VCARD_TYPE: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.Contacts>;
				static lookupContact(arg1: android.content.ContentResolver, arg2: android.net.Uri): android.net.Uri;
				static getLookupUri(arg1: native.Long, arg2: java.lang.String): android.net.Uri;
				static getLookupUri(arg1: native.Long, arg2: string): android.net.Uri;
				static getLookupUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): android.net.Uri;
				static openContactPhotoInputStream(arg1: android.content.ContentResolver, arg2: android.net.Uri): java.io.InputStream;
				static openContactPhotoInputStream(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: boolean): java.io.InputStream;
				static markAsContacted(arg1: android.content.ContentResolver, arg2: native.Long): void;
			}
			export module Contacts {
				export class Data extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IDataColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.Contacts.Data>;
				}
				export class AggregationSuggestions extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IContactsColumns, android.provider.ContactsContract.IContactOptionsColumns, android.provider.ContactsContract.IContactStatusColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.Contacts.AggregationSuggestions>;
				}
				export class StreamItems extends java.lang.Object implements android.provider.ContactsContract.IStreamItemsColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.Contacts.StreamItems>;
				}
				export class Photo extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IDataColumnsWithJoins {
					static CONTENT_DIRECTORY: java.lang.String;
					static DISPLAY_PHOTO: java.lang.String;
					static PHOTO_FILE_ID: java.lang.String;
					static PHOTO: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.Contacts.Photo>;
				}
				export class Entity extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IContactsColumns, android.provider.ContactsContract.IContactNameColumns, android.provider.ContactsContract.IRawContactsColumns, android.provider.ContactsContract.IBaseSyncColumns, android.provider.ContactsContract.ISyncColumns, android.provider.ContactsContract.IDataColumns, android.provider.ContactsContract.IStatusColumns, android.provider.ContactsContract.IContactOptionsColumns, android.provider.ContactsContract.IContactStatusColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static RAW_CONTACT_ID: java.lang.String;
					static DATA_ID: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.Contacts.Entity>;
				}
			}
			export class RawContactsColumns implements android.provider.ContactsContract.IRawContactsColumns {
				constructor(implementation: android.provider.ContactsContract.IRawContactsColumns);
				static CONTACT_ID: java.lang.String;
				static DATA_SET: java.lang.String;
				static AGGREGATION_MODE: java.lang.String;
				static DELETED: java.lang.String;
				static RAW_CONTACT_IS_READ_ONLY: java.lang.String;
				static RAW_CONTACT_IS_USER_PROFILE: java.lang.String;
			}
			export class CommonDataKinds extends java.lang.Object {
				static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds>;
			}
			export module CommonDataKinds {
				export class Relation extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static TYPE_ASSISTANT: number;
					static TYPE_BROTHER: number;
					static TYPE_CHILD: number;
					static TYPE_DOMESTIC_PARTNER: number;
					static TYPE_FATHER: number;
					static TYPE_FRIEND: number;
					static TYPE_MANAGER: number;
					static TYPE_MOTHER: number;
					static TYPE_PARENT: number;
					static TYPE_PARTNER: number;
					static TYPE_REFERRED_BY: number;
					static TYPE_RELATIVE: number;
					static TYPE_SISTER: number;
					static TYPE_SPOUSE: number;
					static NAME: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Relation>;
					static getTypeLabelResource(arg1: number): number;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: string): java.lang.ICharSequence;
				}
				export class Phone extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static CONTENT_TYPE: java.lang.String;
					static CONTENT_URI: android.net.Uri;
					static CONTENT_FILTER_URI: android.net.Uri;
					static SEARCH_DISPLAY_NAME_KEY: java.lang.String;
					static SEARCH_PHONE_NUMBER_KEY: java.lang.String;
					static TYPE_HOME: number;
					static TYPE_MOBILE: number;
					static TYPE_WORK: number;
					static TYPE_FAX_WORK: number;
					static TYPE_FAX_HOME: number;
					static TYPE_PAGER: number;
					static TYPE_OTHER: number;
					static TYPE_CALLBACK: number;
					static TYPE_CAR: number;
					static TYPE_COMPANY_MAIN: number;
					static TYPE_ISDN: number;
					static TYPE_MAIN: number;
					static TYPE_OTHER_FAX: number;
					static TYPE_RADIO: number;
					static TYPE_TELEX: number;
					static TYPE_TTY_TDD: number;
					static TYPE_WORK_MOBILE: number;
					static TYPE_WORK_PAGER: number;
					static TYPE_ASSISTANT: number;
					static TYPE_MMS: number;
					static NUMBER: java.lang.String;
					static NORMALIZED_NUMBER: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Phone>;
					static getTypeLabelResource(arg1: number): number;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: string): java.lang.ICharSequence;
				}
				export class Im extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static TYPE_HOME: number;
					static TYPE_WORK: number;
					static TYPE_OTHER: number;
					static PROTOCOL: java.lang.String;
					static CUSTOM_PROTOCOL: java.lang.String;
					static PROTOCOL_CUSTOM: number;
					static PROTOCOL_AIM: number;
					static PROTOCOL_MSN: number;
					static PROTOCOL_YAHOO: number;
					static PROTOCOL_SKYPE: number;
					static PROTOCOL_QQ: number;
					static PROTOCOL_GOOGLE_TALK: number;
					static PROTOCOL_ICQ: number;
					static PROTOCOL_JABBER: number;
					static PROTOCOL_NETMEETING: number;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Im>;
					static getProtocolLabelResource(arg1: number): number;
					static getTypeLabelResource(arg1: number): number;
					static getProtocolLabel(arg1: android.content.res.Resources, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
					static getProtocolLabel(arg1: android.content.res.Resources, arg2: number, arg3: string): java.lang.ICharSequence;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: string): java.lang.ICharSequence;
				}
				export class SipAddress extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static TYPE_HOME: number;
					static TYPE_WORK: number;
					static TYPE_OTHER: number;
					static SIP_ADDRESS: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.SipAddress>;
					static getTypeLabelResource(arg1: number): number;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: string): java.lang.ICharSequence;
				}
				export interface ICommonColumns extends android.provider.ContactsContract.CommonDataKinds.IBaseTypes {
				}
				export module ICommonColumns {
					var DATA: java.lang.String;
					var TYPE: java.lang.String;
					var LABEL: java.lang.String;
				}
				export class BaseTypes implements android.provider.ContactsContract.CommonDataKinds.IBaseTypes {
					constructor(implementation: android.provider.ContactsContract.CommonDataKinds.IBaseTypes);
					static TYPE_CUSTOM: number;
				}
				export class CommonColumns implements android.provider.ContactsContract.CommonDataKinds.IBaseTypes, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					constructor(implementation: android.provider.ContactsContract.CommonDataKinds.ICommonColumns);
					static DATA: java.lang.String;
					static TYPE: java.lang.String;
					static LABEL: java.lang.String;
				}
				export class Website extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static TYPE_HOMEPAGE: number;
					static TYPE_BLOG: number;
					static TYPE_PROFILE: number;
					static TYPE_HOME: number;
					static TYPE_WORK: number;
					static TYPE_FTP: number;
					static TYPE_OTHER: number;
					static URL: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Website>;
				}
				export class Event extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static TYPE_ANNIVERSARY: number;
					static TYPE_OTHER: number;
					static TYPE_BIRTHDAY: number;
					static START_DATE: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Event>;
					static getTypeResource(arg1: java.lang.Integer): number;
				}
				export class StructuredName extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static DISPLAY_NAME: java.lang.String;
					static GIVEN_NAME: java.lang.String;
					static FAMILY_NAME: java.lang.String;
					static PREFIX: java.lang.String;
					static MIDDLE_NAME: java.lang.String;
					static SUFFIX: java.lang.String;
					static PHONETIC_GIVEN_NAME: java.lang.String;
					static PHONETIC_MIDDLE_NAME: java.lang.String;
					static PHONETIC_FAMILY_NAME: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.StructuredName>;
				}
				export class Organization extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static TYPE_WORK: number;
					static TYPE_OTHER: number;
					static COMPANY: java.lang.String;
					static TITLE: java.lang.String;
					static DEPARTMENT: java.lang.String;
					static JOB_DESCRIPTION: java.lang.String;
					static SYMBOL: java.lang.String;
					static PHONETIC_NAME: java.lang.String;
					static OFFICE_LOCATION: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Organization>;
					static getTypeLabelResource(arg1: number): number;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: string): java.lang.ICharSequence;
				}
				export class Note extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static NOTE: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Note>;
				}
				export class Photo extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static PHOTO_FILE_ID: java.lang.String;
					static PHOTO: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Photo>;
				}
				export class Nickname extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static TYPE_DEFAULT: number;
					static TYPE_OTHER_NAME: number;
					static TYPE_MAIDEN_NAME: number;
					static TYPE_MAINDEN_NAME: number;
					static TYPE_SHORT_NAME: number;
					static TYPE_INITIALS: number;
					static NAME: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Nickname>;
				}
				export class Email extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static CONTENT_TYPE: java.lang.String;
					static CONTENT_URI: android.net.Uri;
					static CONTENT_LOOKUP_URI: android.net.Uri;
					static CONTENT_FILTER_URI: android.net.Uri;
					static ADDRESS: java.lang.String;
					static TYPE_HOME: number;
					static TYPE_WORK: number;
					static TYPE_OTHER: number;
					static TYPE_MOBILE: number;
					static DISPLAY_NAME: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Email>;
					static getTypeLabelResource(arg1: number): number;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: string): java.lang.ICharSequence;
				}
				export class Identity extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static IDENTITY: java.lang.String;
					static NAMESPACE: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.Identity>;
				}
				export class StructuredPostal extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins, android.provider.ContactsContract.CommonDataKinds.ICommonColumns {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static CONTENT_TYPE: java.lang.String;
					static CONTENT_URI: android.net.Uri;
					static TYPE_HOME: number;
					static TYPE_WORK: number;
					static TYPE_OTHER: number;
					static FORMATTED_ADDRESS: java.lang.String;
					static STREET: java.lang.String;
					static POBOX: java.lang.String;
					static NEIGHBORHOOD: java.lang.String;
					static CITY: java.lang.String;
					static REGION: java.lang.String;
					static POSTCODE: java.lang.String;
					static COUNTRY: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.StructuredPostal>;
					static getTypeLabelResource(arg1: number): number;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
					static getTypeLabel(arg1: android.content.res.Resources, arg2: number, arg3: string): java.lang.ICharSequence;
				}
				export interface IBaseTypes {
				}
				export module IBaseTypes {
					var TYPE_CUSTOM: number;
				}
				export class GroupMembership extends java.lang.Object implements android.provider.ContactsContract.IDataColumnsWithJoins {
					static CONTENT_ITEM_TYPE: java.lang.String;
					static GROUP_ROW_ID: java.lang.String;
					static GROUP_SOURCE_ID: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.CommonDataKinds.GroupMembership>;
				}
			}
			export interface IContactStatusColumns {
			}
			export module IContactStatusColumns {
				var CONTACT_PRESENCE: java.lang.String;
				var CONTACT_CHAT_CAPABILITY: java.lang.String;
				var CONTACT_STATUS: java.lang.String;
				var CONTACT_STATUS_TIMESTAMP: java.lang.String;
				var CONTACT_STATUS_RES_PACKAGE: java.lang.String;
				var CONTACT_STATUS_LABEL: java.lang.String;
				var CONTACT_STATUS_ICON: java.lang.String;
			}
			export interface IStatusColumns {
			}
			export module IStatusColumns {
				var PRESENCE: java.lang.String;
				var PRESENCE_STATUS: java.lang.String;
				var OFFLINE: number;
				var INVISIBLE: number;
				var AWAY: number;
				var IDLE: number;
				var DO_NOT_DISTURB: number;
				var AVAILABLE: number;
				var STATUS: java.lang.String;
				var PRESENCE_CUSTOM_STATUS: java.lang.String;
				var STATUS_TIMESTAMP: java.lang.String;
				var STATUS_RES_PACKAGE: java.lang.String;
				var STATUS_LABEL: java.lang.String;
				var STATUS_ICON: java.lang.String;
				var CHAT_CAPABILITY: java.lang.String;
				var CAPABILITY_HAS_VOICE: number;
				var CAPABILITY_HAS_VIDEO: number;
				var CAPABILITY_HAS_CAMERA: number;
			}
			export class Settings extends java.lang.Object implements android.provider.ContactsContract.ISettingsColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.Settings>;
			}
			export interface IPhoneLookupColumns {
			}
			export module IPhoneLookupColumns {
				var NUMBER: java.lang.String;
				var TYPE: java.lang.String;
				var LABEL: java.lang.String;
				var NORMALIZED_NUMBER: java.lang.String;
			}
			export class StreamItems extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IStreamItemsColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_PHOTO_URI: android.net.Uri;
				static CONTENT_LIMIT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static MAX_ITEMS: java.lang.String;
				static class: java.lang.Class<android.provider.ContactsContract.StreamItems>;
			}
			export module StreamItems {
				export class StreamItemPhotos extends java.lang.Object implements android.provider.IBaseColumns, android.provider.ContactsContract.IStreamItemPhotosColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static CONTENT_TYPE: java.lang.String;
					static CONTENT_ITEM_TYPE: java.lang.String;
					static class: java.lang.Class<android.provider.ContactsContract.StreamItems.StreamItemPhotos>;
				}
			}
			export interface ISettingsColumns {
			}
			export module ISettingsColumns {
				var ACCOUNT_NAME: java.lang.String;
				var ACCOUNT_TYPE: java.lang.String;
				var DATA_SET: java.lang.String;
				var SHOULD_SYNC: java.lang.String;
				var UNGROUPED_VISIBLE: java.lang.String;
				var ANY_UNSYNCED: java.lang.String;
				var UNGROUPED_COUNT: java.lang.String;
				var UNGROUPED_WITH_PHONES: java.lang.String;
			}
			export class BaseSyncColumns implements android.provider.ContactsContract.IBaseSyncColumns {
				constructor(implementation: android.provider.ContactsContract.IBaseSyncColumns);
				static SYNC1: java.lang.String;
				static SYNC2: java.lang.String;
				static SYNC3: java.lang.String;
				static SYNC4: java.lang.String;
			}
			export interface IStreamItemPhotosColumns {
			}
			export module IStreamItemPhotosColumns {
				var STREAM_ITEM_ID: java.lang.String;
				var SORT_INDEX: java.lang.String;
				var PHOTO_FILE_ID: java.lang.String;
				var PHOTO_URI: java.lang.String;
				var SYNC1: java.lang.String;
				var SYNC2: java.lang.String;
				var SYNC3: java.lang.String;
				var SYNC4: java.lang.String;
			}
			export class ContactsColumns implements android.provider.ContactsContract.IContactsColumns {
				constructor(implementation: android.provider.ContactsContract.IContactsColumns);
				static DISPLAY_NAME: java.lang.String;
				static PHOTO_ID: java.lang.String;
				static PHOTO_FILE_ID: java.lang.String;
				static PHOTO_URI: java.lang.String;
				static PHOTO_THUMBNAIL_URI: java.lang.String;
				static IN_VISIBLE_GROUP: java.lang.String;
				static IS_USER_PROFILE: java.lang.String;
				static HAS_PHONE_NUMBER: java.lang.String;
				static LOOKUP_KEY: java.lang.String;
			}
			export class ContactOptionsColumns implements android.provider.ContactsContract.IContactOptionsColumns {
				constructor(implementation: android.provider.ContactsContract.IContactOptionsColumns);
				static TIMES_CONTACTED: java.lang.String;
				static LAST_TIME_CONTACTED: java.lang.String;
				static STARRED: java.lang.String;
				static CUSTOM_RINGTONE: java.lang.String;
				static SEND_TO_VOICEMAIL: java.lang.String;
			}
			export class Directory extends java.lang.Object implements android.provider.IBaseColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static DEFAULT: native.Long;
				static LOCAL_INVISIBLE: native.Long;
				static PACKAGE_NAME: java.lang.String;
				static TYPE_RESOURCE_ID: java.lang.String;
				static DISPLAY_NAME: java.lang.String;
				static DIRECTORY_AUTHORITY: java.lang.String;
				static ACCOUNT_TYPE: java.lang.String;
				static ACCOUNT_NAME: java.lang.String;
				static EXPORT_SUPPORT: java.lang.String;
				static EXPORT_SUPPORT_NONE: number;
				static EXPORT_SUPPORT_SAME_ACCOUNT_ONLY: number;
				static EXPORT_SUPPORT_ANY_ACCOUNT: number;
				static SHORTCUT_SUPPORT: java.lang.String;
				static SHORTCUT_SUPPORT_NONE: number;
				static SHORTCUT_SUPPORT_DATA_ITEMS_ONLY: number;
				static SHORTCUT_SUPPORT_FULL: number;
				static PHOTO_SUPPORT: java.lang.String;
				static PHOTO_SUPPORT_NONE: number;
				static PHOTO_SUPPORT_THUMBNAIL_ONLY: number;
				static PHOTO_SUPPORT_FULL_SIZE_ONLY: number;
				static PHOTO_SUPPORT_FULL: number;
				static class: java.lang.Class<android.provider.ContactsContract.Directory>;
				static notifyDirectoryChange(arg1: android.content.ContentResolver): void;
			}
		}
		export class Settings extends java.lang.Object {
			constructor();
			static ACTION_SETTINGS: java.lang.String;
			static ACTION_APN_SETTINGS: java.lang.String;
			static ACTION_LOCATION_SOURCE_SETTINGS: java.lang.String;
			static ACTION_WIRELESS_SETTINGS: java.lang.String;
			static ACTION_AIRPLANE_MODE_SETTINGS: java.lang.String;
			static ACTION_ACCESSIBILITY_SETTINGS: java.lang.String;
			static ACTION_SECURITY_SETTINGS: java.lang.String;
			static ACTION_PRIVACY_SETTINGS: java.lang.String;
			static ACTION_WIFI_SETTINGS: java.lang.String;
			static ACTION_WIFI_IP_SETTINGS: java.lang.String;
			static ACTION_BLUETOOTH_SETTINGS: java.lang.String;
			static ACTION_DATE_SETTINGS: java.lang.String;
			static ACTION_SOUND_SETTINGS: java.lang.String;
			static ACTION_DISPLAY_SETTINGS: java.lang.String;
			static ACTION_LOCALE_SETTINGS: java.lang.String;
			static ACTION_INPUT_METHOD_SETTINGS: java.lang.String;
			static ACTION_INPUT_METHOD_SUBTYPE_SETTINGS: java.lang.String;
			static ACTION_USER_DICTIONARY_SETTINGS: java.lang.String;
			static ACTION_APPLICATION_SETTINGS: java.lang.String;
			static ACTION_APPLICATION_DEVELOPMENT_SETTINGS: java.lang.String;
			static ACTION_QUICK_LAUNCH_SETTINGS: java.lang.String;
			static ACTION_MANAGE_APPLICATIONS_SETTINGS: java.lang.String;
			static ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS: java.lang.String;
			static ACTION_APPLICATION_DETAILS_SETTINGS: java.lang.String;
			static ACTION_SYNC_SETTINGS: java.lang.String;
			static ACTION_ADD_ACCOUNT: java.lang.String;
			static ACTION_NETWORK_OPERATOR_SETTINGS: java.lang.String;
			static ACTION_DATA_ROAMING_SETTINGS: java.lang.String;
			static ACTION_INTERNAL_STORAGE_SETTINGS: java.lang.String;
			static ACTION_MEMORY_CARD_SETTINGS: java.lang.String;
			static ACTION_SEARCH_SETTINGS: java.lang.String;
			static ACTION_DEVICE_INFO_SETTINGS: java.lang.String;
			static ACTION_NFC_SETTINGS: java.lang.String;
			static ACTION_NFCSHARING_SETTINGS: java.lang.String;
			static EXTRA_AUTHORITIES: java.lang.String;
			static EXTRA_INPUT_METHOD_ID: java.lang.String;
			static AUTHORITY: java.lang.String;
			static class: java.lang.Class<android.provider.Settings>;
		}
		export module Settings {
			export class SettingNotFoundException extends android.util.AndroidException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.provider.Settings.SettingNotFoundException>;
			}
			export class NameValueTable extends java.lang.Object implements android.provider.IBaseColumns {
				constructor();
				static NAME: java.lang.String;
				static VALUE: java.lang.String;
				static class: java.lang.Class<android.provider.Settings.NameValueTable>;
				static getUriFor(arg1: android.net.Uri, arg2: java.lang.String): android.net.Uri;
				static getUriFor(arg1: android.net.Uri, arg2: string): android.net.Uri;
			}
			export class System extends android.provider.Settings.NameValueTable {
				constructor();
				static SYS_PROP_SETTING_VERSION: java.lang.String;
				static CONTENT_URI: android.net.Uri;
				static STAY_ON_WHILE_PLUGGED_IN: java.lang.String;
				static END_BUTTON_BEHAVIOR: java.lang.String;
				static AIRPLANE_MODE_ON: java.lang.String;
				static RADIO_BLUETOOTH: java.lang.String;
				static RADIO_WIFI: java.lang.String;
				static RADIO_CELL: java.lang.String;
				static RADIO_NFC: java.lang.String;
				static AIRPLANE_MODE_RADIOS: java.lang.String;
				static WIFI_SLEEP_POLICY: java.lang.String;
				static WIFI_SLEEP_POLICY_DEFAULT: number;
				static WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED: number;
				static WIFI_SLEEP_POLICY_NEVER: number;
				static MODE_RINGER: java.lang.String;
				static WIFI_USE_STATIC_IP: java.lang.String;
				static WIFI_STATIC_IP: java.lang.String;
				static WIFI_STATIC_GATEWAY: java.lang.String;
				static WIFI_STATIC_NETMASK: java.lang.String;
				static WIFI_STATIC_DNS1: java.lang.String;
				static WIFI_STATIC_DNS2: java.lang.String;
				static BLUETOOTH_DISCOVERABILITY: java.lang.String;
				static BLUETOOTH_DISCOVERABILITY_TIMEOUT: java.lang.String;
				static LOCK_PATTERN_ENABLED: java.lang.String;
				static LOCK_PATTERN_VISIBLE: java.lang.String;
				static LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED: java.lang.String;
				static NEXT_ALARM_FORMATTED: java.lang.String;
				static FONT_SCALE: java.lang.String;
				static DEBUG_APP: java.lang.String;
				static WAIT_FOR_DEBUGGER: java.lang.String;
				static DIM_SCREEN: java.lang.String;
				static SCREEN_OFF_TIMEOUT: java.lang.String;
				static SCREEN_BRIGHTNESS: java.lang.String;
				static SCREEN_BRIGHTNESS_MODE: java.lang.String;
				static SCREEN_BRIGHTNESS_MODE_MANUAL: number;
				static SCREEN_BRIGHTNESS_MODE_AUTOMATIC: number;
				static SHOW_PROCESSES: java.lang.String;
				static ALWAYS_FINISH_ACTIVITIES: java.lang.String;
				static MODE_RINGER_STREAMS_AFFECTED: java.lang.String;
				static MUTE_STREAMS_AFFECTED: java.lang.String;
				static VIBRATE_ON: java.lang.String;
				static VOLUME_RING: java.lang.String;
				static VOLUME_SYSTEM: java.lang.String;
				static VOLUME_VOICE: java.lang.String;
				static VOLUME_MUSIC: java.lang.String;
				static VOLUME_ALARM: java.lang.String;
				static VOLUME_NOTIFICATION: java.lang.String;
				static VOLUME_BLUETOOTH_SCO: java.lang.String;
				static VOLUME_SETTINGS: native.Array<java.lang.String>;
				static APPEND_FOR_LAST_AUDIBLE: java.lang.String;
				static RINGTONE: java.lang.String;
				static DEFAULT_RINGTONE_URI: android.net.Uri;
				static NOTIFICATION_SOUND: java.lang.String;
				static DEFAULT_NOTIFICATION_URI: android.net.Uri;
				static ALARM_ALERT: java.lang.String;
				static DEFAULT_ALARM_ALERT_URI: android.net.Uri;
				static TEXT_AUTO_REPLACE: java.lang.String;
				static TEXT_AUTO_CAPS: java.lang.String;
				static TEXT_AUTO_PUNCTUATE: java.lang.String;
				static TEXT_SHOW_PASSWORD: java.lang.String;
				static SHOW_GTALK_SERVICE_STATUS: java.lang.String;
				static WALLPAPER_ACTIVITY: java.lang.String;
				static AUTO_TIME: java.lang.String;
				static AUTO_TIME_ZONE: java.lang.String;
				static TIME_12_24: java.lang.String;
				static DATE_FORMAT: java.lang.String;
				static SETUP_WIZARD_HAS_RUN: java.lang.String;
				static WINDOW_ANIMATION_SCALE: java.lang.String;
				static TRANSITION_ANIMATION_SCALE: java.lang.String;
				static ANIMATOR_DURATION_SCALE: java.lang.String;
				static ACCELEROMETER_ROTATION: java.lang.String;
				static USER_ROTATION: java.lang.String;
				static DTMF_TONE_WHEN_DIALING: java.lang.String;
				static SOUND_EFFECTS_ENABLED: java.lang.String;
				static HAPTIC_FEEDBACK_ENABLED: java.lang.String;
				static SHOW_WEB_SUGGESTIONS: java.lang.String;
				static ADB_ENABLED: java.lang.String;
				static ANDROID_ID: java.lang.String;
				static BLUETOOTH_ON: java.lang.String;
				static DATA_ROAMING: java.lang.String;
				static DEVICE_PROVISIONED: java.lang.String;
				static HTTP_PROXY: java.lang.String;
				static INSTALL_NON_MARKET_APPS: java.lang.String;
				static LOCATION_PROVIDERS_ALLOWED: java.lang.String;
				static LOGGING_ID: java.lang.String;
				static NETWORK_PREFERENCE: java.lang.String;
				static PARENTAL_CONTROL_ENABLED: java.lang.String;
				static PARENTAL_CONTROL_LAST_UPDATE: java.lang.String;
				static PARENTAL_CONTROL_REDIRECT_URL: java.lang.String;
				static SETTINGS_CLASSNAME: java.lang.String;
				static USB_MASS_STORAGE_ENABLED: java.lang.String;
				static USE_GOOGLE_MAIL: java.lang.String;
				static WIFI_MAX_DHCP_RETRY_COUNT: java.lang.String;
				static WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS: java.lang.String;
				static WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON: java.lang.String;
				static WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY: java.lang.String;
				static WIFI_NUM_OPEN_NETWORKS_KEPT: java.lang.String;
				static WIFI_ON: java.lang.String;
				static WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE: java.lang.String;
				static WIFI_WATCHDOG_AP_COUNT: java.lang.String;
				static WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS: java.lang.String;
				static WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED: java.lang.String;
				static WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS: java.lang.String;
				static WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT: java.lang.String;
				static WIFI_WATCHDOG_MAX_AP_CHECKS: java.lang.String;
				static WIFI_WATCHDOG_ON: java.lang.String;
				static WIFI_WATCHDOG_PING_COUNT: java.lang.String;
				static WIFI_WATCHDOG_PING_DELAY_MS: java.lang.String;
				static WIFI_WATCHDOG_PING_TIMEOUT_MS: java.lang.String;
				static class: java.lang.Class<android.provider.Settings.System>;
				static getConfiguration(arg1: android.content.ContentResolver, arg2: android.content.res.Configuration): void;
				static putString(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: java.lang.String): boolean;
				static putString(arg1: android.content.ContentResolver, arg2: string, arg3: string): boolean;
				static getShowGTalkServiceStatus(arg1: android.content.ContentResolver): boolean;
				static setShowGTalkServiceStatus(arg1: android.content.ContentResolver, arg2: boolean): void;
				static putConfiguration(arg1: android.content.ContentResolver, arg2: android.content.res.Configuration): boolean;
				static getUriFor(arg1: java.lang.String): android.net.Uri;
				static getUriFor(arg1: string): android.net.Uri;
				static getFloat(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Float): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: string, arg3: native.Float): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: java.lang.String): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: string): number;
				static getInt(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: number): number;
				static getInt(arg1: android.content.ContentResolver, arg2: string, arg3: number): number;
				static getInt(arg1: android.content.ContentResolver, arg2: java.lang.String): number;
				static getInt(arg1: android.content.ContentResolver, arg2: string): number;
				static getLong(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Long): any;
				static getLong(arg1: android.content.ContentResolver, arg2: string, arg3: native.Long): any;
				static getLong(arg1: android.content.ContentResolver, arg2: java.lang.String): any;
				static getLong(arg1: android.content.ContentResolver, arg2: string): any;
				static putFloat(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Float): boolean;
				static putFloat(arg1: android.content.ContentResolver, arg2: string, arg3: native.Float): boolean;
				static putInt(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: number): boolean;
				static putInt(arg1: android.content.ContentResolver, arg2: string, arg3: number): boolean;
				static putLong(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Long): boolean;
				static putLong(arg1: android.content.ContentResolver, arg2: string, arg3: native.Long): boolean;
				static getString(arg1: android.content.ContentResolver, arg2: java.lang.String): string;
				static getString(arg1: android.content.ContentResolver, arg2: string): string;
				static getUriFor(arg1: android.net.Uri, arg2: java.lang.String): android.net.Uri;
				static getUriFor(arg1: android.net.Uri, arg2: string): android.net.Uri;
			}
			export class Secure extends android.provider.Settings.NameValueTable {
				constructor();
				static SYS_PROP_SETTING_VERSION: java.lang.String;
				static CONTENT_URI: android.net.Uri;
				static DEVELOPMENT_SETTINGS_ENABLED: java.lang.String;
				static ADB_ENABLED: java.lang.String;
				static ALLOW_MOCK_LOCATION: java.lang.String;
				static ANDROID_ID: java.lang.String;
				static BLUETOOTH_ON: java.lang.String;
				static DATA_ROAMING: java.lang.String;
				static DEFAULT_INPUT_METHOD: java.lang.String;
				static SELECTED_INPUT_METHOD_SUBTYPE: java.lang.String;
				static INPUT_METHOD_SELECTOR_VISIBILITY: java.lang.String;
				static DEVICE_PROVISIONED: java.lang.String;
				static ENABLED_INPUT_METHODS: java.lang.String;
				static HTTP_PROXY: java.lang.String;
				static INSTALL_NON_MARKET_APPS: java.lang.String;
				static LOCATION_PROVIDERS_ALLOWED: java.lang.String;
				static LOCK_PATTERN_ENABLED: java.lang.String;
				static LOCK_PATTERN_VISIBLE: java.lang.String;
				static LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED: java.lang.String;
				static LOGGING_ID: java.lang.String;
				static NETWORK_PREFERENCE: java.lang.String;
				static PARENTAL_CONTROL_ENABLED: java.lang.String;
				static PARENTAL_CONTROL_LAST_UPDATE: java.lang.String;
				static PARENTAL_CONTROL_REDIRECT_URL: java.lang.String;
				static SETTINGS_CLASSNAME: java.lang.String;
				static USB_MASS_STORAGE_ENABLED: java.lang.String;
				static USE_GOOGLE_MAIL: java.lang.String;
				static ACCESSIBILITY_ENABLED: java.lang.String;
				static TOUCH_EXPLORATION_ENABLED: java.lang.String;
				static ENABLED_ACCESSIBILITY_SERVICES: java.lang.String;
				static ACCESSIBILITY_SPEAK_PASSWORD: java.lang.String;
				static TTS_USE_DEFAULTS: java.lang.String;
				static TTS_DEFAULT_RATE: java.lang.String;
				static TTS_DEFAULT_PITCH: java.lang.String;
				static TTS_DEFAULT_SYNTH: java.lang.String;
				static TTS_DEFAULT_LANG: java.lang.String;
				static TTS_DEFAULT_COUNTRY: java.lang.String;
				static TTS_DEFAULT_VARIANT: java.lang.String;
				static TTS_ENABLED_PLUGINS: java.lang.String;
				static WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON: java.lang.String;
				static WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY: java.lang.String;
				static WIFI_NUM_OPEN_NETWORKS_KEPT: java.lang.String;
				static WIFI_ON: java.lang.String;
				static WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE: java.lang.String;
				static WIFI_WATCHDOG_AP_COUNT: java.lang.String;
				static WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS: java.lang.String;
				static WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED: java.lang.String;
				static WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS: java.lang.String;
				static WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT: java.lang.String;
				static WIFI_WATCHDOG_MAX_AP_CHECKS: java.lang.String;
				static WIFI_WATCHDOG_ON: java.lang.String;
				static WIFI_WATCHDOG_WATCH_LIST: java.lang.String;
				static WIFI_WATCHDOG_PING_COUNT: java.lang.String;
				static WIFI_WATCHDOG_PING_DELAY_MS: java.lang.String;
				static WIFI_WATCHDOG_PING_TIMEOUT_MS: java.lang.String;
				static WIFI_MAX_DHCP_RETRY_COUNT: java.lang.String;
				static WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS: java.lang.String;
				static BACKGROUND_DATA: java.lang.String;
				static ALLOWED_GEOLOCATION_ORIGINS: java.lang.String;
				static class: java.lang.Class<android.provider.Settings.Secure>;
				static putString(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: java.lang.String): boolean;
				static putString(arg1: android.content.ContentResolver, arg2: string, arg3: string): boolean;
				static isLocationProviderEnabled(arg1: android.content.ContentResolver, arg2: java.lang.String): boolean;
				static isLocationProviderEnabled(arg1: android.content.ContentResolver, arg2: string): boolean;
				static setLocationProviderEnabled(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: boolean): void;
				static setLocationProviderEnabled(arg1: android.content.ContentResolver, arg2: string, arg3: boolean): void;
				static getUriFor(arg1: java.lang.String): android.net.Uri;
				static getUriFor(arg1: string): android.net.Uri;
				static getFloat(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Float): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: string, arg3: native.Float): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: java.lang.String): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: string): number;
				static getInt(arg1: android.content.ContentResolver, arg2: java.lang.String): number;
				static getInt(arg1: android.content.ContentResolver, arg2: string): number;
				static getInt(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: number): number;
				static getInt(arg1: android.content.ContentResolver, arg2: string, arg3: number): number;
				static getLong(arg1: android.content.ContentResolver, arg2: java.lang.String): any;
				static getLong(arg1: android.content.ContentResolver, arg2: string): any;
				static getLong(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Long): any;
				static getLong(arg1: android.content.ContentResolver, arg2: string, arg3: native.Long): any;
				static putFloat(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Float): boolean;
				static putFloat(arg1: android.content.ContentResolver, arg2: string, arg3: native.Float): boolean;
				static putInt(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: number): boolean;
				static putInt(arg1: android.content.ContentResolver, arg2: string, arg3: number): boolean;
				static putLong(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Long): boolean;
				static putLong(arg1: android.content.ContentResolver, arg2: string, arg3: native.Long): boolean;
				static getString(arg1: android.content.ContentResolver, arg2: java.lang.String): string;
				static getString(arg1: android.content.ContentResolver, arg2: string): string;
				static getUriFor(arg1: android.net.Uri, arg2: java.lang.String): android.net.Uri;
				static getUriFor(arg1: android.net.Uri, arg2: string): android.net.Uri;
			}
			export class Global extends android.provider.Settings.NameValueTable {
				constructor();
				static SYS_PROP_SETTING_VERSION: java.lang.String;
				static CONTENT_URI: android.net.Uri;
				static AIRPLANE_MODE_ON: java.lang.String;
				static RADIO_BLUETOOTH: java.lang.String;
				static RADIO_WIFI: java.lang.String;
				static RADIO_CELL: java.lang.String;
				static RADIO_NFC: java.lang.String;
				static AIRPLANE_MODE_RADIOS: java.lang.String;
				static WIFI_SLEEP_POLICY: java.lang.String;
				static WIFI_SLEEP_POLICY_DEFAULT: number;
				static WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED: number;
				static WIFI_SLEEP_POLICY_NEVER: number;
				static AUTO_TIME: java.lang.String;
				static AUTO_TIME_ZONE: java.lang.String;
				static STAY_ON_WHILE_PLUGGED_IN: java.lang.String;
				static ADB_ENABLED: java.lang.String;
				static BLUETOOTH_ON: java.lang.String;
				static DATA_ROAMING: java.lang.String;
				static DEVELOPMENT_SETTINGS_ENABLED: java.lang.String;
				static DEVICE_PROVISIONED: java.lang.String;
				static INSTALL_NON_MARKET_APPS: java.lang.String;
				static NETWORK_PREFERENCE: java.lang.String;
				static USB_MASS_STORAGE_ENABLED: java.lang.String;
				static USE_GOOGLE_MAIL: java.lang.String;
				static WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON: java.lang.String;
				static WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY: java.lang.String;
				static WIFI_NUM_OPEN_NETWORKS_KEPT: java.lang.String;
				static WIFI_ON: java.lang.String;
				static WIFI_WATCHDOG_ON: java.lang.String;
				static WIFI_MAX_DHCP_RETRY_COUNT: java.lang.String;
				static WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS: java.lang.String;
				static MODE_RINGER: java.lang.String;
				static HTTP_PROXY: java.lang.String;
				static WINDOW_ANIMATION_SCALE: java.lang.String;
				static TRANSITION_ANIMATION_SCALE: java.lang.String;
				static ANIMATOR_DURATION_SCALE: java.lang.String;
				static DEBUG_APP: java.lang.String;
				static WAIT_FOR_DEBUGGER: java.lang.String;
				static SHOW_PROCESSES: java.lang.String;
				static ALWAYS_FINISH_ACTIVITIES: java.lang.String;
				static class: java.lang.Class<android.provider.Settings.Global>;
				static putString(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: java.lang.String): boolean;
				static putString(arg1: android.content.ContentResolver, arg2: string, arg3: string): boolean;
				static getUriFor(arg1: java.lang.String): android.net.Uri;
				static getUriFor(arg1: string): android.net.Uri;
				static getFloat(arg1: android.content.ContentResolver, arg2: java.lang.String): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: string): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Float): number;
				static getFloat(arg1: android.content.ContentResolver, arg2: string, arg3: native.Float): number;
				static getInt(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: number): number;
				static getInt(arg1: android.content.ContentResolver, arg2: string, arg3: number): number;
				static getInt(arg1: android.content.ContentResolver, arg2: java.lang.String): number;
				static getInt(arg1: android.content.ContentResolver, arg2: string): number;
				static getLong(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Long): any;
				static getLong(arg1: android.content.ContentResolver, arg2: string, arg3: native.Long): any;
				static getLong(arg1: android.content.ContentResolver, arg2: java.lang.String): any;
				static getLong(arg1: android.content.ContentResolver, arg2: string): any;
				static putFloat(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Float): boolean;
				static putFloat(arg1: android.content.ContentResolver, arg2: string, arg3: native.Float): boolean;
				static putInt(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: number): boolean;
				static putInt(arg1: android.content.ContentResolver, arg2: string, arg3: number): boolean;
				static putLong(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: native.Long): boolean;
				static putLong(arg1: android.content.ContentResolver, arg2: string, arg3: native.Long): boolean;
				static getString(arg1: android.content.ContentResolver, arg2: java.lang.String): string;
				static getString(arg1: android.content.ContentResolver, arg2: string): string;
				static getUriFor(arg1: android.net.Uri, arg2: java.lang.String): android.net.Uri;
				static getUriFor(arg1: android.net.Uri, arg2: string): android.net.Uri;
			}
		}
		export interface IOpenableColumns {
		}
		export module IOpenableColumns {
			var DISPLAY_NAME: java.lang.String;
			var SIZE: java.lang.String;
		}
		export class LiveFolders extends java.lang.Object implements android.provider.IBaseColumns {
			static NAME: java.lang.String;
			static DESCRIPTION: java.lang.String;
			static INTENT: java.lang.String;
			static ICON_BITMAP: java.lang.String;
			static ICON_PACKAGE: java.lang.String;
			static ICON_RESOURCE: java.lang.String;
			static DISPLAY_MODE_GRID: number;
			static DISPLAY_MODE_LIST: number;
			static EXTRA_LIVE_FOLDER_NAME: java.lang.String;
			static EXTRA_LIVE_FOLDER_ICON: java.lang.String;
			static EXTRA_LIVE_FOLDER_DISPLAY_MODE: java.lang.String;
			static EXTRA_LIVE_FOLDER_BASE_INTENT: java.lang.String;
			static ACTION_CREATE_LIVE_FOLDER: java.lang.String;
			static class: java.lang.Class<android.provider.LiveFolders>;
		}
		export class SyncStateContract extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.provider.SyncStateContract>;
		}
		export module SyncStateContract {
			export class Columns implements android.provider.IBaseColumns, android.provider.SyncStateContract.IColumns {
				constructor(implementation: android.provider.SyncStateContract.IColumns);
				static ACCOUNT_NAME: java.lang.String;
				static ACCOUNT_TYPE: java.lang.String;
				static DATA: java.lang.String;
			}
			export class Helpers extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.provider.SyncStateContract.Helpers>;
				static newSetOperation(arg1: android.net.Uri, arg2: android.accounts.Account, arg3: native.Array<native.Byte>): android.content.ContentProviderOperation;
				static newUpdateOperation(arg1: android.net.Uri, arg2: native.Array<native.Byte>): android.content.ContentProviderOperation;
				static getWithUri(arg1: android.content.ContentProviderClient, arg2: android.net.Uri, arg3: android.accounts.Account): android.util.Pair<android.net.Uri, native.Array<native.Byte>>;
				static get(arg1: android.content.ContentProviderClient, arg2: android.net.Uri, arg3: android.accounts.Account): native.Array<native.Byte>;
				static set(arg1: android.content.ContentProviderClient, arg2: android.net.Uri, arg3: android.accounts.Account, arg4: native.Array<native.Byte>): void;
				static insert(arg1: android.content.ContentProviderClient, arg2: android.net.Uri, arg3: android.accounts.Account, arg4: native.Array<native.Byte>): android.net.Uri;
				static update(arg1: android.content.ContentProviderClient, arg2: android.net.Uri, arg3: native.Array<native.Byte>): void;
			}
			export class Constants extends java.lang.Object implements android.provider.SyncStateContract.IColumns {
				constructor();
				static CONTENT_DIRECTORY: java.lang.String;
				static class: java.lang.Class<android.provider.SyncStateContract.Constants>;
			}
			export interface IColumns extends android.provider.IBaseColumns {
			}
			export module IColumns {
				var ACCOUNT_NAME: java.lang.String;
				var ACCOUNT_TYPE: java.lang.String;
				var DATA: java.lang.String;
			}
		}
		export class OpenableColumns implements android.provider.IOpenableColumns {
			constructor(implementation: android.provider.IOpenableColumns);
			static DISPLAY_NAME: java.lang.String;
			static SIZE: java.lang.String;
		}
		export class Browser extends java.lang.Object {
			constructor();
			static BOOKMARKS_URI: android.net.Uri;
			static INITIAL_ZOOM_LEVEL: java.lang.String;
			static EXTRA_APPLICATION_ID: java.lang.String;
			static EXTRA_HEADERS: java.lang.String;
			static HISTORY_PROJECTION: native.Array<java.lang.String>;
			static HISTORY_PROJECTION_ID_INDEX: number;
			static HISTORY_PROJECTION_URL_INDEX: number;
			static HISTORY_PROJECTION_VISITS_INDEX: number;
			static HISTORY_PROJECTION_DATE_INDEX: number;
			static HISTORY_PROJECTION_BOOKMARK_INDEX: number;
			static HISTORY_PROJECTION_TITLE_INDEX: number;
			static HISTORY_PROJECTION_FAVICON_INDEX: number;
			static TRUNCATE_HISTORY_PROJECTION: native.Array<java.lang.String>;
			static TRUNCATE_HISTORY_PROJECTION_ID_INDEX: number;
			static TRUNCATE_N_OLDEST: number;
			static SEARCHES_URI: android.net.Uri;
			static SEARCHES_PROJECTION: native.Array<java.lang.String>;
			static SEARCHES_PROJECTION_SEARCH_INDEX: number;
			static SEARCHES_PROJECTION_DATE_INDEX: number;
			static EXTRA_CREATE_NEW_TAB: java.lang.String;
			static class: java.lang.Class<android.provider.Browser>;
			static clearHistory(arg1: android.content.ContentResolver): void;
			static deleteHistoryTimeFrame(arg1: android.content.ContentResolver, arg2: native.Long, arg3: native.Long): void;
			static truncateHistory(arg1: android.content.ContentResolver): void;
			static requestAllIcons(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: android.webkit.WebIconDatabase.IIconListener): void;
			static requestAllIcons(arg1: android.content.ContentResolver, arg2: string, arg3: android.webkit.WebIconDatabase.IIconListener): void;
			static getAllBookmarks(arg1: android.content.ContentResolver): android.database.ICursor;
			static deleteFromHistory(arg1: android.content.ContentResolver, arg2: java.lang.String): void;
			static deleteFromHistory(arg1: android.content.ContentResolver, arg2: string): void;
			static getAllVisitedUrls(arg1: android.content.ContentResolver): android.database.ICursor;
			static canClearHistory(arg1: android.content.ContentResolver): boolean;
			static updateVisitedHistory(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: boolean): void;
			static updateVisitedHistory(arg1: android.content.ContentResolver, arg2: string, arg3: boolean): void;
			static sendString(arg1: android.content.Context, arg2: java.lang.String): void;
			static sendString(arg1: android.content.Context, arg2: string): void;
			static addSearchUrl(arg1: android.content.ContentResolver, arg2: java.lang.String): void;
			static addSearchUrl(arg1: android.content.ContentResolver, arg2: string): void;
			static clearSearches(arg1: android.content.ContentResolver): void;
			static saveBookmark(arg1: android.content.Context, arg2: java.lang.String, arg3: java.lang.String): void;
			static saveBookmark(arg1: android.content.Context, arg2: string, arg3: string): void;
		}
		export module Browser {
			export class SearchColumns extends java.lang.Object implements android.provider.IBaseColumns {
				constructor();
				static URL: java.lang.String;
				static SEARCH: java.lang.String;
				static DATE: java.lang.String;
				static class: java.lang.Class<android.provider.Browser.SearchColumns>;
			}
			export class BookmarkColumns extends java.lang.Object implements android.provider.IBaseColumns {
				constructor();
				static URL: java.lang.String;
				static VISITS: java.lang.String;
				static DATE: java.lang.String;
				static BOOKMARK: java.lang.String;
				static TITLE: java.lang.String;
				static CREATED: java.lang.String;
				static FAVICON: java.lang.String;
				static class: java.lang.Class<android.provider.Browser.BookmarkColumns>;
			}
		}
		export class VoicemailContract extends java.lang.Object {
			static AUTHORITY: java.lang.String;
			static PARAM_KEY_SOURCE_PACKAGE: java.lang.String;
			static ACTION_NEW_VOICEMAIL: java.lang.String;
			static ACTION_FETCH_VOICEMAIL: java.lang.String;
			static EXTRA_SELF_CHANGE: java.lang.String;
			static class: java.lang.Class<android.provider.VoicemailContract>;
		}
		export module VoicemailContract {
			export class Status extends java.lang.Object implements android.provider.IBaseColumns {
				static CONTENT_URI: android.net.Uri;
				static DIR_TYPE: java.lang.String;
				static ITEM_TYPE: java.lang.String;
				static SOURCE_PACKAGE: java.lang.String;
				static SETTINGS_URI: java.lang.String;
				static VOICEMAIL_ACCESS_URI: java.lang.String;
				static CONFIGURATION_STATE: java.lang.String;
				static CONFIGURATION_STATE_OK: number;
				static CONFIGURATION_STATE_NOT_CONFIGURED: number;
				static CONFIGURATION_STATE_CAN_BE_CONFIGURED: number;
				static DATA_CHANNEL_STATE: java.lang.String;
				static DATA_CHANNEL_STATE_OK: number;
				static DATA_CHANNEL_STATE_NO_CONNECTION: number;
				static NOTIFICATION_CHANNEL_STATE: java.lang.String;
				static NOTIFICATION_CHANNEL_STATE_OK: number;
				static NOTIFICATION_CHANNEL_STATE_NO_CONNECTION: number;
				static NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING: number;
				static class: java.lang.Class<android.provider.VoicemailContract.Status>;
				static buildSourceUri(arg1: java.lang.String): android.net.Uri;
				static buildSourceUri(arg1: string): android.net.Uri;
			}
			export class Voicemails extends java.lang.Object implements android.provider.IBaseColumns, android.provider.IOpenableColumns {
				static CONTENT_URI: android.net.Uri;
				static DIR_TYPE: java.lang.String;
				static ITEM_TYPE: java.lang.String;
				static NUMBER: java.lang.String;
				static DATE: java.lang.String;
				static DURATION: java.lang.String;
				static IS_READ: java.lang.String;
				static SOURCE_PACKAGE: java.lang.String;
				static SOURCE_DATA: java.lang.String;
				static HAS_CONTENT: java.lang.String;
				static MIME_TYPE: java.lang.String;
				static class: java.lang.Class<android.provider.VoicemailContract.Voicemails>;
				static buildSourceUri(arg1: java.lang.String): android.net.Uri;
				static buildSourceUri(arg1: string): android.net.Uri;
			}
		}
		export interface IBaseColumns {
		}
		export module IBaseColumns {
			var _ID: java.lang.String;
			var _COUNT: java.lang.String;
		}
		export class SearchRecentSuggestions extends java.lang.Object {
			constructor(arg1: android.content.Context, arg2: java.lang.String, arg3: number);
			constructor(arg1: android.content.Context, arg2: string, arg3: number);
			static QUERIES_PROJECTION_1LINE: native.Array<java.lang.String>;
			static QUERIES_PROJECTION_2LINE: native.Array<java.lang.String>;
			static QUERIES_PROJECTION_DATE_INDEX: number;
			static QUERIES_PROJECTION_QUERY_INDEX: number;
			static QUERIES_PROJECTION_DISPLAY1_INDEX: number;
			static QUERIES_PROJECTION_DISPLAY2_INDEX: number;
			static class: java.lang.Class<android.provider.SearchRecentSuggestions>;
			clearHistory(): void;
			saveRecentQuery(arg1: java.lang.String, arg2: java.lang.String): void;
			saveRecentQuery(arg1: string, arg2: string): void;
		}
		export class UserDictionary extends java.lang.Object {
			constructor();
			static AUTHORITY: java.lang.String;
			static CONTENT_URI: android.net.Uri;
			static class: java.lang.Class<android.provider.UserDictionary>;
		}
		export module UserDictionary {
			export class Words extends java.lang.Object implements android.provider.IBaseColumns {
				constructor();
				static CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static _ID: java.lang.String;
				static WORD: java.lang.String;
				static FREQUENCY: java.lang.String;
				static LOCALE: java.lang.String;
				static APP_ID: java.lang.String;
				static SHORTCUT: java.lang.String;
				static LOCALE_TYPE_ALL: number;
				static LOCALE_TYPE_CURRENT: number;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static class: java.lang.Class<android.provider.UserDictionary.Words>;
				static addWord(arg1: android.content.Context, arg2: java.lang.String, arg3: number, arg4: java.lang.String, arg5: java.util.Locale): void;
				static addWord(arg1: android.content.Context, arg2: string, arg3: number, arg4: string, arg5: java.util.Locale): void;
				static addWord(arg1: android.content.Context, arg2: java.lang.String, arg3: number, arg4: number): void;
				static addWord(arg1: android.content.Context, arg2: string, arg3: number, arg4: number): void;
			}
		}
		export class CallLog extends java.lang.Object {
			constructor();
			static AUTHORITY: java.lang.String;
			static CONTENT_URI: android.net.Uri;
			static class: java.lang.Class<android.provider.CallLog>;
		}
		export module CallLog {
			export class Calls extends java.lang.Object implements android.provider.IBaseColumns {
				constructor();
				static CONTENT_URI: android.net.Uri;
				static CONTENT_FILTER_URI: android.net.Uri;
				static LIMIT_PARAM_KEY: java.lang.String;
				static OFFSET_PARAM_KEY: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static TYPE: java.lang.String;
				static INCOMING_TYPE: number;
				static OUTGOING_TYPE: number;
				static MISSED_TYPE: number;
				static NUMBER: java.lang.String;
				static DATE: java.lang.String;
				static DURATION: java.lang.String;
				static NEW: java.lang.String;
				static CACHED_NAME: java.lang.String;
				static CACHED_NUMBER_TYPE: java.lang.String;
				static CACHED_NUMBER_LABEL: java.lang.String;
				static IS_READ: java.lang.String;
				static class: java.lang.Class<android.provider.CallLog.Calls>;
				static getLastOutgoingCall(arg1: android.content.Context): string;
			}
		}
		export class CalendarContract extends java.lang.Object {
			static ACTION_EVENT_REMINDER: java.lang.String;
			static ACTION_HANDLE_CUSTOM_EVENT: java.lang.String;
			static EXTRA_CUSTOM_APP_URI: java.lang.String;
			static EXTRA_EVENT_BEGIN_TIME: java.lang.String;
			static EXTRA_EVENT_END_TIME: java.lang.String;
			static EXTRA_EVENT_ALL_DAY: java.lang.String;
			static AUTHORITY: java.lang.String;
			static CONTENT_URI: android.net.Uri;
			static CALLER_IS_SYNCADAPTER: java.lang.String;
			static ACCOUNT_TYPE_LOCAL: java.lang.String;
			static class: java.lang.Class<android.provider.CalendarContract>;
		}
		export module CalendarContract {
			export class Reminders extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.IRemindersColumns, android.provider.CalendarContract.IEventsColumns {
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.Reminders>;
				static query(arg1: android.content.ContentResolver, arg2: native.Long, arg3: native.Array<java.lang.String>): android.database.ICursor;
			}
			export class CalendarCacheColumns implements android.provider.CalendarContract.ICalendarCacheColumns {
				constructor(implementation: android.provider.CalendarContract.ICalendarCacheColumns);
				static KEY: java.lang.String;
				static VALUE: java.lang.String;
			}
			export class SyncColumns implements android.provider.CalendarContract.ICalendarSyncColumns, android.provider.CalendarContract.ISyncColumns {
				constructor(implementation: android.provider.CalendarContract.ISyncColumns);
				static ACCOUNT_NAME: java.lang.String;
				static ACCOUNT_TYPE: java.lang.String;
				static _SYNC_ID: java.lang.String;
				static DIRTY: java.lang.String;
				static DELETED: java.lang.String;
				static CAN_PARTIALLY_UPDATE: java.lang.String;
			}
			export class SyncState extends java.lang.Object implements android.provider.SyncStateContract.IColumns {
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.SyncState>;
			}
			export class CalendarSyncColumns implements android.provider.CalendarContract.ICalendarSyncColumns {
				constructor(implementation: android.provider.CalendarContract.ICalendarSyncColumns);
				static CAL_SYNC1: java.lang.String;
				static CAL_SYNC2: java.lang.String;
				static CAL_SYNC3: java.lang.String;
				static CAL_SYNC4: java.lang.String;
				static CAL_SYNC5: java.lang.String;
				static CAL_SYNC6: java.lang.String;
				static CAL_SYNC7: java.lang.String;
				static CAL_SYNC8: java.lang.String;
				static CAL_SYNC9: java.lang.String;
				static CAL_SYNC10: java.lang.String;
			}
			export class Instances extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.IEventsColumns, android.provider.CalendarContract.ICalendarColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_BY_DAY_URI: android.net.Uri;
				static CONTENT_SEARCH_URI: android.net.Uri;
				static CONTENT_SEARCH_BY_DAY_URI: android.net.Uri;
				static BEGIN: java.lang.String;
				static END: java.lang.String;
				static EVENT_ID: java.lang.String;
				static START_DAY: java.lang.String;
				static END_DAY: java.lang.String;
				static START_MINUTE: java.lang.String;
				static END_MINUTE: java.lang.String;
				static class: java.lang.Class<android.provider.CalendarContract.Instances>;
				static query(arg1: android.content.ContentResolver, arg2: native.Array<java.lang.String>, arg3: native.Long, arg4: native.Long): android.database.ICursor;
				static query(arg1: android.content.ContentResolver, arg2: native.Array<java.lang.String>, arg3: native.Long, arg4: native.Long, arg5: java.lang.String): android.database.ICursor;
				static query(arg1: android.content.ContentResolver, arg2: native.Array<java.lang.String>, arg3: native.Long, arg4: native.Long, arg5: string): android.database.ICursor;
			}
			export interface IRemindersColumns {
			}
			export module IRemindersColumns {
				var EVENT_ID: java.lang.String;
				var MINUTES: java.lang.String;
				var MINUTES_DEFAULT: number;
				var METHOD: java.lang.String;
				var METHOD_DEFAULT: number;
				var METHOD_ALERT: number;
				var METHOD_EMAIL: number;
				var METHOD_SMS: number;
				var METHOD_ALARM: number;
			}
			export interface ICalendarCacheColumns {
			}
			export module ICalendarCacheColumns {
				var KEY: java.lang.String;
				var VALUE: java.lang.String;
			}
			export class EventDaysColumns implements android.provider.CalendarContract.IEventDaysColumns {
				constructor(implementation: android.provider.CalendarContract.IEventDaysColumns);
				static STARTDAY: java.lang.String;
				static ENDDAY: java.lang.String;
			}
			export class CalendarColumns implements android.provider.CalendarContract.ICalendarColumns {
				constructor(implementation: android.provider.CalendarContract.ICalendarColumns);
				static CALENDAR_COLOR: java.lang.String;
				static CALENDAR_COLOR_KEY: java.lang.String;
				static CALENDAR_DISPLAY_NAME: java.lang.String;
				static CALENDAR_ACCESS_LEVEL: java.lang.String;
				static CAL_ACCESS_NONE: number;
				static CAL_ACCESS_FREEBUSY: number;
				static CAL_ACCESS_READ: number;
				static CAL_ACCESS_RESPOND: number;
				static CAL_ACCESS_OVERRIDE: number;
				static CAL_ACCESS_CONTRIBUTOR: number;
				static CAL_ACCESS_EDITOR: number;
				static CAL_ACCESS_OWNER: number;
				static CAL_ACCESS_ROOT: number;
				static VISIBLE: java.lang.String;
				static CALENDAR_TIME_ZONE: java.lang.String;
				static SYNC_EVENTS: java.lang.String;
				static OWNER_ACCOUNT: java.lang.String;
				static CAN_ORGANIZER_RESPOND: java.lang.String;
				static CAN_MODIFY_TIME_ZONE: java.lang.String;
				static MAX_REMINDERS: java.lang.String;
				static ALLOWED_REMINDERS: java.lang.String;
				static ALLOWED_AVAILABILITY: java.lang.String;
				static ALLOWED_ATTENDEE_TYPES: java.lang.String;
				static IS_PRIMARY: java.lang.String;
			}
			export interface ICalendarSyncColumns {
			}
			export module ICalendarSyncColumns {
				var CAL_SYNC1: java.lang.String;
				var CAL_SYNC2: java.lang.String;
				var CAL_SYNC3: java.lang.String;
				var CAL_SYNC4: java.lang.String;
				var CAL_SYNC5: java.lang.String;
				var CAL_SYNC6: java.lang.String;
				var CAL_SYNC7: java.lang.String;
				var CAL_SYNC8: java.lang.String;
				var CAL_SYNC9: java.lang.String;
				var CAL_SYNC10: java.lang.String;
			}
			export interface IExtendedPropertiesColumns {
			}
			export module IExtendedPropertiesColumns {
				var EVENT_ID: java.lang.String;
				var NAME: java.lang.String;
				var VALUE: java.lang.String;
			}
			export class Calendars extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.ISyncColumns, android.provider.CalendarContract.ICalendarColumns {
				static CONTENT_URI: android.net.Uri;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static NAME: java.lang.String;
				static CALENDAR_LOCATION: java.lang.String;
				static class: java.lang.Class<android.provider.CalendarContract.Calendars>;
			}
			export class CalendarAlerts extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.ICalendarAlertsColumns, android.provider.CalendarContract.IEventsColumns, android.provider.CalendarContract.ICalendarColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_URI_BY_INSTANCE: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.CalendarAlerts>;
			}
			export interface IAttendeesColumns {
			}
			export module IAttendeesColumns {
				var EVENT_ID: java.lang.String;
				var ATTENDEE_NAME: java.lang.String;
				var ATTENDEE_EMAIL: java.lang.String;
				var ATTENDEE_RELATIONSHIP: java.lang.String;
				var RELATIONSHIP_NONE: number;
				var RELATIONSHIP_ATTENDEE: number;
				var RELATIONSHIP_ORGANIZER: number;
				var RELATIONSHIP_PERFORMER: number;
				var RELATIONSHIP_SPEAKER: number;
				var ATTENDEE_TYPE: java.lang.String;
				var TYPE_NONE: number;
				var TYPE_REQUIRED: number;
				var TYPE_OPTIONAL: number;
				var TYPE_RESOURCE: number;
				var ATTENDEE_STATUS: java.lang.String;
				var ATTENDEE_STATUS_NONE: number;
				var ATTENDEE_STATUS_ACCEPTED: number;
				var ATTENDEE_STATUS_DECLINED: number;
				var ATTENDEE_STATUS_INVITED: number;
				var ATTENDEE_STATUS_TENTATIVE: number;
				var ATTENDEE_IDENTITY: java.lang.String;
				var ATTENDEE_ID_NAMESPACE: java.lang.String;
			}
			export interface IColorsColumns extends android.provider.SyncStateContract.IColumns {
			}
			export module IColorsColumns {
				var COLOR_TYPE: java.lang.String;
				var TYPE_CALENDAR: number;
				var TYPE_EVENT: number;
				var COLOR_KEY: java.lang.String;
				var COLOR: java.lang.String;
			}
			export class CalendarAlertsColumns implements android.provider.CalendarContract.ICalendarAlertsColumns {
				constructor(implementation: android.provider.CalendarContract.ICalendarAlertsColumns);
				static EVENT_ID: java.lang.String;
				static BEGIN: java.lang.String;
				static END: java.lang.String;
				static ALARM_TIME: java.lang.String;
				static CREATION_TIME: java.lang.String;
				static RECEIVED_TIME: java.lang.String;
				static NOTIFY_TIME: java.lang.String;
				static STATE: java.lang.String;
				static STATE_SCHEDULED: number;
				static STATE_FIRED: number;
				static STATE_DISMISSED: number;
				static MINUTES: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
			}
			export class CalendarCache extends java.lang.Object implements android.provider.CalendarContract.ICalendarCacheColumns {
				static URI: android.net.Uri;
				static KEY_TIMEZONE_TYPE: java.lang.String;
				static KEY_TIMEZONE_INSTANCES: java.lang.String;
				static KEY_TIMEZONE_INSTANCES_PREVIOUS: java.lang.String;
				static TIMEZONE_TYPE_AUTO: java.lang.String;
				static TIMEZONE_TYPE_HOME: java.lang.String;
				static class: java.lang.Class<android.provider.CalendarContract.CalendarCache>;
			}
			export class AttendeesColumns implements android.provider.CalendarContract.IAttendeesColumns {
				constructor(implementation: android.provider.CalendarContract.IAttendeesColumns);
				static EVENT_ID: java.lang.String;
				static ATTENDEE_NAME: java.lang.String;
				static ATTENDEE_EMAIL: java.lang.String;
				static ATTENDEE_RELATIONSHIP: java.lang.String;
				static RELATIONSHIP_NONE: number;
				static RELATIONSHIP_ATTENDEE: number;
				static RELATIONSHIP_ORGANIZER: number;
				static RELATIONSHIP_PERFORMER: number;
				static RELATIONSHIP_SPEAKER: number;
				static ATTENDEE_TYPE: java.lang.String;
				static TYPE_NONE: number;
				static TYPE_REQUIRED: number;
				static TYPE_OPTIONAL: number;
				static TYPE_RESOURCE: number;
				static ATTENDEE_STATUS: java.lang.String;
				static ATTENDEE_STATUS_NONE: number;
				static ATTENDEE_STATUS_ACCEPTED: number;
				static ATTENDEE_STATUS_DECLINED: number;
				static ATTENDEE_STATUS_INVITED: number;
				static ATTENDEE_STATUS_TENTATIVE: number;
				static ATTENDEE_IDENTITY: java.lang.String;
				static ATTENDEE_ID_NAMESPACE: java.lang.String;
			}
			export interface ICalendarAlertsColumns {
			}
			export module ICalendarAlertsColumns {
				var EVENT_ID: java.lang.String;
				var BEGIN: java.lang.String;
				var END: java.lang.String;
				var ALARM_TIME: java.lang.String;
				var CREATION_TIME: java.lang.String;
				var RECEIVED_TIME: java.lang.String;
				var NOTIFY_TIME: java.lang.String;
				var STATE: java.lang.String;
				var STATE_SCHEDULED: number;
				var STATE_FIRED: number;
				var STATE_DISMISSED: number;
				var MINUTES: java.lang.String;
				var DEFAULT_SORT_ORDER: java.lang.String;
			}
			export class ColorsColumns implements android.provider.SyncStateContract.IColumns, android.provider.CalendarContract.IColorsColumns {
				constructor(implementation: android.provider.CalendarContract.IColorsColumns);
				static COLOR_TYPE: java.lang.String;
				static TYPE_CALENDAR: number;
				static TYPE_EVENT: number;
				static COLOR_KEY: java.lang.String;
				static COLOR: java.lang.String;
			}
			export class RemindersColumns implements android.provider.CalendarContract.IRemindersColumns {
				constructor(implementation: android.provider.CalendarContract.IRemindersColumns);
				static EVENT_ID: java.lang.String;
				static MINUTES: java.lang.String;
				static MINUTES_DEFAULT: number;
				static METHOD: java.lang.String;
				static METHOD_DEFAULT: number;
				static METHOD_ALERT: number;
				static METHOD_EMAIL: number;
				static METHOD_SMS: number;
				static METHOD_ALARM: number;
			}
			export class EventsColumns implements android.provider.CalendarContract.IEventsColumns {
				constructor(implementation: android.provider.CalendarContract.IEventsColumns);
				static CALENDAR_ID: java.lang.String;
				static TITLE: java.lang.String;
				static DESCRIPTION: java.lang.String;
				static EVENT_LOCATION: java.lang.String;
				static EVENT_COLOR: java.lang.String;
				static EVENT_COLOR_KEY: java.lang.String;
				static DISPLAY_COLOR: java.lang.String;
				static STATUS: java.lang.String;
				static STATUS_TENTATIVE: number;
				static STATUS_CONFIRMED: number;
				static STATUS_CANCELED: number;
				static SELF_ATTENDEE_STATUS: java.lang.String;
				static SYNC_DATA1: java.lang.String;
				static SYNC_DATA2: java.lang.String;
				static SYNC_DATA3: java.lang.String;
				static SYNC_DATA4: java.lang.String;
				static SYNC_DATA5: java.lang.String;
				static SYNC_DATA6: java.lang.String;
				static SYNC_DATA7: java.lang.String;
				static SYNC_DATA8: java.lang.String;
				static SYNC_DATA9: java.lang.String;
				static SYNC_DATA10: java.lang.String;
				static LAST_SYNCED: java.lang.String;
				static DTSTART: java.lang.String;
				static DTEND: java.lang.String;
				static DURATION: java.lang.String;
				static EVENT_TIMEZONE: java.lang.String;
				static EVENT_END_TIMEZONE: java.lang.String;
				static ALL_DAY: java.lang.String;
				static ACCESS_LEVEL: java.lang.String;
				static ACCESS_DEFAULT: number;
				static ACCESS_CONFIDENTIAL: number;
				static ACCESS_PRIVATE: number;
				static ACCESS_PUBLIC: number;
				static AVAILABILITY: java.lang.String;
				static AVAILABILITY_BUSY: number;
				static AVAILABILITY_FREE: number;
				static AVAILABILITY_TENTATIVE: number;
				static HAS_ALARM: java.lang.String;
				static HAS_EXTENDED_PROPERTIES: java.lang.String;
				static RRULE: java.lang.String;
				static RDATE: java.lang.String;
				static EXRULE: java.lang.String;
				static EXDATE: java.lang.String;
				static ORIGINAL_ID: java.lang.String;
				static ORIGINAL_SYNC_ID: java.lang.String;
				static ORIGINAL_INSTANCE_TIME: java.lang.String;
				static ORIGINAL_ALL_DAY: java.lang.String;
				static LAST_DATE: java.lang.String;
				static HAS_ATTENDEE_DATA: java.lang.String;
				static GUESTS_CAN_MODIFY: java.lang.String;
				static GUESTS_CAN_INVITE_OTHERS: java.lang.String;
				static GUESTS_CAN_SEE_GUESTS: java.lang.String;
				static ORGANIZER: java.lang.String;
				static IS_ORGANIZER: java.lang.String;
				static CAN_INVITE_OTHERS: java.lang.String;
				static CUSTOM_APP_PACKAGE: java.lang.String;
				static CUSTOM_APP_URI: java.lang.String;
				static UID_2445: java.lang.String;
			}
			export class Events extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.ISyncColumns, android.provider.CalendarContract.IEventsColumns, android.provider.CalendarContract.ICalendarColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_EXCEPTION_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.Events>;
			}
			export class Colors extends java.lang.Object implements android.provider.CalendarContract.IColorsColumns {
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.Colors>;
			}
			export interface ISyncColumns extends android.provider.CalendarContract.ICalendarSyncColumns {
			}
			export module ISyncColumns {
				var ACCOUNT_NAME: java.lang.String;
				var ACCOUNT_TYPE: java.lang.String;
				var _SYNC_ID: java.lang.String;
				var DIRTY: java.lang.String;
				var DELETED: java.lang.String;
				var CAN_PARTIALLY_UPDATE: java.lang.String;
			}
			export class EventsEntity extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.ISyncColumns, android.provider.CalendarContract.IEventsColumns {
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.EventsEntity>;
				static newEntityIterator(arg1: android.database.ICursor, arg2: android.content.ContentProviderClient): android.content.IEntityIterator;
				static newEntityIterator(arg1: android.database.ICursor, arg2: android.content.ContentResolver): android.content.IEntityIterator;
			}
			export class CalendarEntity extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.ISyncColumns, android.provider.CalendarContract.ICalendarColumns {
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.CalendarEntity>;
				static newEntityIterator(arg1: android.database.ICursor): android.content.IEntityIterator;
			}
			export class ExtendedProperties extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.IExtendedPropertiesColumns, android.provider.CalendarContract.IEventsColumns {
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.ExtendedProperties>;
			}
			export class Attendees extends java.lang.Object implements android.provider.IBaseColumns, android.provider.CalendarContract.IAttendeesColumns, android.provider.CalendarContract.IEventsColumns {
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.Attendees>;
				static query(arg1: android.content.ContentResolver, arg2: native.Long, arg3: native.Array<java.lang.String>): android.database.ICursor;
			}
			export interface IEventDaysColumns {
			}
			export module IEventDaysColumns {
				var STARTDAY: java.lang.String;
				var ENDDAY: java.lang.String;
			}
			export interface ICalendarColumns {
			}
			export module ICalendarColumns {
				var CALENDAR_COLOR: java.lang.String;
				var CALENDAR_COLOR_KEY: java.lang.String;
				var CALENDAR_DISPLAY_NAME: java.lang.String;
				var CALENDAR_ACCESS_LEVEL: java.lang.String;
				var CAL_ACCESS_NONE: number;
				var CAL_ACCESS_FREEBUSY: number;
				var CAL_ACCESS_READ: number;
				var CAL_ACCESS_RESPOND: number;
				var CAL_ACCESS_OVERRIDE: number;
				var CAL_ACCESS_CONTRIBUTOR: number;
				var CAL_ACCESS_EDITOR: number;
				var CAL_ACCESS_OWNER: number;
				var CAL_ACCESS_ROOT: number;
				var VISIBLE: java.lang.String;
				var CALENDAR_TIME_ZONE: java.lang.String;
				var SYNC_EVENTS: java.lang.String;
				var OWNER_ACCOUNT: java.lang.String;
				var CAN_ORGANIZER_RESPOND: java.lang.String;
				var CAN_MODIFY_TIME_ZONE: java.lang.String;
				var MAX_REMINDERS: java.lang.String;
				var ALLOWED_REMINDERS: java.lang.String;
				var ALLOWED_AVAILABILITY: java.lang.String;
				var ALLOWED_ATTENDEE_TYPES: java.lang.String;
				var IS_PRIMARY: java.lang.String;
			}
			export interface IEventsColumns {
			}
			export module IEventsColumns {
				var CALENDAR_ID: java.lang.String;
				var TITLE: java.lang.String;
				var DESCRIPTION: java.lang.String;
				var EVENT_LOCATION: java.lang.String;
				var EVENT_COLOR: java.lang.String;
				var EVENT_COLOR_KEY: java.lang.String;
				var DISPLAY_COLOR: java.lang.String;
				var STATUS: java.lang.String;
				var STATUS_TENTATIVE: number;
				var STATUS_CONFIRMED: number;
				var STATUS_CANCELED: number;
				var SELF_ATTENDEE_STATUS: java.lang.String;
				var SYNC_DATA1: java.lang.String;
				var SYNC_DATA2: java.lang.String;
				var SYNC_DATA3: java.lang.String;
				var SYNC_DATA4: java.lang.String;
				var SYNC_DATA5: java.lang.String;
				var SYNC_DATA6: java.lang.String;
				var SYNC_DATA7: java.lang.String;
				var SYNC_DATA8: java.lang.String;
				var SYNC_DATA9: java.lang.String;
				var SYNC_DATA10: java.lang.String;
				var LAST_SYNCED: java.lang.String;
				var DTSTART: java.lang.String;
				var DTEND: java.lang.String;
				var DURATION: java.lang.String;
				var EVENT_TIMEZONE: java.lang.String;
				var EVENT_END_TIMEZONE: java.lang.String;
				var ALL_DAY: java.lang.String;
				var ACCESS_LEVEL: java.lang.String;
				var ACCESS_DEFAULT: number;
				var ACCESS_CONFIDENTIAL: number;
				var ACCESS_PRIVATE: number;
				var ACCESS_PUBLIC: number;
				var AVAILABILITY: java.lang.String;
				var AVAILABILITY_BUSY: number;
				var AVAILABILITY_FREE: number;
				var AVAILABILITY_TENTATIVE: number;
				var HAS_ALARM: java.lang.String;
				var HAS_EXTENDED_PROPERTIES: java.lang.String;
				var RRULE: java.lang.String;
				var RDATE: java.lang.String;
				var EXRULE: java.lang.String;
				var EXDATE: java.lang.String;
				var ORIGINAL_ID: java.lang.String;
				var ORIGINAL_SYNC_ID: java.lang.String;
				var ORIGINAL_INSTANCE_TIME: java.lang.String;
				var ORIGINAL_ALL_DAY: java.lang.String;
				var LAST_DATE: java.lang.String;
				var HAS_ATTENDEE_DATA: java.lang.String;
				var GUESTS_CAN_MODIFY: java.lang.String;
				var GUESTS_CAN_INVITE_OTHERS: java.lang.String;
				var GUESTS_CAN_SEE_GUESTS: java.lang.String;
				var ORGANIZER: java.lang.String;
				var IS_ORGANIZER: java.lang.String;
				var CAN_INVITE_OTHERS: java.lang.String;
				var CUSTOM_APP_PACKAGE: java.lang.String;
				var CUSTOM_APP_URI: java.lang.String;
				var UID_2445: java.lang.String;
			}
			export class EventDays extends java.lang.Object implements android.provider.CalendarContract.IEventDaysColumns {
				static CONTENT_URI: android.net.Uri;
				static class: java.lang.Class<android.provider.CalendarContract.EventDays>;
				static query(arg1: android.content.ContentResolver, arg2: number, arg3: number, arg4: native.Array<java.lang.String>): android.database.ICursor;
			}
			export class ExtendedPropertiesColumns implements android.provider.CalendarContract.IExtendedPropertiesColumns {
				constructor(implementation: android.provider.CalendarContract.IExtendedPropertiesColumns);
				static EVENT_ID: java.lang.String;
				static NAME: java.lang.String;
				static VALUE: java.lang.String;
			}
		}
		export class Contacts extends java.lang.Object {
			static AUTHORITY: java.lang.String;
			static CONTENT_URI: android.net.Uri;
			static KIND_EMAIL: number;
			static KIND_POSTAL: number;
			static KIND_IM: number;
			static KIND_ORGANIZATION: number;
			static KIND_PHONE: number;
			static class: java.lang.Class<android.provider.Contacts>;
		}
		export module Contacts {
			export class GroupsColumns implements android.provider.Contacts.IGroupsColumns {
				constructor(implementation: android.provider.Contacts.IGroupsColumns);
				static NAME: java.lang.String;
				static NOTES: java.lang.String;
				static SHOULD_SYNC: java.lang.String;
				static SYSTEM_ID: java.lang.String;
			}
			export class Phones extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IPhonesColumns, android.provider.Contacts.IPeopleColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_FILTER_URL: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static PERSON_ID: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.Phones>;
				static getDisplayLabel(arg1: android.content.Context, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
				static getDisplayLabel(arg1: android.content.Context, arg2: number, arg3: string): java.lang.ICharSequence;
				static getDisplayLabel(arg1: android.content.Context, arg2: number, arg3: java.lang.ICharSequence, arg4: native.Array<java.lang.ICharSequence>): java.lang.ICharSequence;
				static getDisplayLabel(arg1: android.content.Context, arg2: number, arg3: string, arg4: native.Array<java.lang.ICharSequence>): java.lang.ICharSequence;
			}
			export class Organizations extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IOrganizationColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_DIRECTORY: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.Organizations>;
				static getDisplayLabel(arg1: android.content.Context, arg2: number, arg3: java.lang.ICharSequence): java.lang.ICharSequence;
				static getDisplayLabel(arg1: android.content.Context, arg2: number, arg3: string): java.lang.ICharSequence;
			}
			export class PhotosColumns implements android.provider.Contacts.IPhotosColumns {
				constructor(implementation: android.provider.Contacts.IPhotosColumns);
				static LOCAL_VERSION: java.lang.String;
				static PERSON_ID: java.lang.String;
				static DOWNLOAD_REQUIRED: java.lang.String;
				static EXISTS_ON_SERVER: java.lang.String;
				static SYNC_ERROR: java.lang.String;
				static DATA: java.lang.String;
			}
			export interface IPresenceColumns {
			}
			export module IPresenceColumns {
				var PRIORITY: java.lang.String;
				var PRESENCE_STATUS: java.lang.String;
				var OFFLINE: number;
				var INVISIBLE: number;
				var AWAY: number;
				var IDLE: number;
				var DO_NOT_DISTURB: number;
				var AVAILABLE: number;
				var PRESENCE_CUSTOM_STATUS: java.lang.String;
				var IM_PROTOCOL: java.lang.String;
				var IM_HANDLE: java.lang.String;
				var IM_ACCOUNT: java.lang.String;
			}
			export class Intents extends java.lang.Object {
				constructor();
				static SEARCH_SUGGESTION_CLICKED: java.lang.String;
				static SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED: java.lang.String;
				static SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED: java.lang.String;
				static ATTACH_IMAGE: java.lang.String;
				static SHOW_OR_CREATE_CONTACT: java.lang.String;
				static EXTRA_FORCE_CREATE: java.lang.String;
				static EXTRA_CREATE_DESCRIPTION: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.Intents>;
			}
			export module Intents {
				export class Insert extends java.lang.Object {
					constructor();
					static ACTION: java.lang.String;
					static FULL_MODE: java.lang.String;
					static NAME: java.lang.String;
					static PHONETIC_NAME: java.lang.String;
					static COMPANY: java.lang.String;
					static JOB_TITLE: java.lang.String;
					static NOTES: java.lang.String;
					static PHONE: java.lang.String;
					static PHONE_TYPE: java.lang.String;
					static PHONE_ISPRIMARY: java.lang.String;
					static SECONDARY_PHONE: java.lang.String;
					static SECONDARY_PHONE_TYPE: java.lang.String;
					static TERTIARY_PHONE: java.lang.String;
					static TERTIARY_PHONE_TYPE: java.lang.String;
					static EMAIL: java.lang.String;
					static EMAIL_TYPE: java.lang.String;
					static EMAIL_ISPRIMARY: java.lang.String;
					static SECONDARY_EMAIL: java.lang.String;
					static SECONDARY_EMAIL_TYPE: java.lang.String;
					static TERTIARY_EMAIL: java.lang.String;
					static TERTIARY_EMAIL_TYPE: java.lang.String;
					static POSTAL: java.lang.String;
					static POSTAL_TYPE: java.lang.String;
					static POSTAL_ISPRIMARY: java.lang.String;
					static IM_HANDLE: java.lang.String;
					static IM_PROTOCOL: java.lang.String;
					static IM_ISPRIMARY: java.lang.String;
					static class: java.lang.Class<android.provider.Contacts.Intents.Insert>;
				}
				export class UI extends java.lang.Object {
					constructor();
					static LIST_DEFAULT: java.lang.String;
					static LIST_GROUP_ACTION: java.lang.String;
					static GROUP_NAME_EXTRA_KEY: java.lang.String;
					static LIST_ALL_CONTACTS_ACTION: java.lang.String;
					static LIST_CONTACTS_WITH_PHONES_ACTION: java.lang.String;
					static LIST_STARRED_ACTION: java.lang.String;
					static LIST_FREQUENT_ACTION: java.lang.String;
					static LIST_STREQUENT_ACTION: java.lang.String;
					static TITLE_EXTRA_KEY: java.lang.String;
					static FILTER_CONTACTS_ACTION: java.lang.String;
					static FILTER_TEXT_EXTRA_KEY: java.lang.String;
					static class: java.lang.Class<android.provider.Contacts.Intents.UI>;
				}
			}
			export interface IExtensionsColumns {
			}
			export module IExtensionsColumns {
				var NAME: java.lang.String;
				var VALUE: java.lang.String;
			}
			export class PhonesColumns implements android.provider.Contacts.IPhonesColumns {
				constructor(implementation: android.provider.Contacts.IPhonesColumns);
				static TYPE: java.lang.String;
				static TYPE_CUSTOM: number;
				static TYPE_HOME: number;
				static TYPE_MOBILE: number;
				static TYPE_WORK: number;
				static TYPE_FAX_WORK: number;
				static TYPE_FAX_HOME: number;
				static TYPE_PAGER: number;
				static TYPE_OTHER: number;
				static LABEL: java.lang.String;
				static NUMBER: java.lang.String;
				static NUMBER_KEY: java.lang.String;
				static ISPRIMARY: java.lang.String;
			}
			export class ExtensionsColumns implements android.provider.Contacts.IExtensionsColumns {
				constructor(implementation: android.provider.Contacts.IExtensionsColumns);
				static NAME: java.lang.String;
				static VALUE: java.lang.String;
			}
			export class Groups extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IGroupsColumns {
				static CONTENT_URI: android.net.Uri;
				static DELETED_CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static GROUP_ANDROID_STARRED: java.lang.String;
				static GROUP_MY_CONTACTS: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.Groups>;
			}
			export class Photos extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IPhotosColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_DIRECTORY: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.Photos>;
			}
			export interface IGroupsColumns {
			}
			export module IGroupsColumns {
				var NAME: java.lang.String;
				var NOTES: java.lang.String;
				var SHOULD_SYNC: java.lang.String;
				var SYSTEM_ID: java.lang.String;
			}
			export interface IPhotosColumns {
			}
			export module IPhotosColumns {
				var LOCAL_VERSION: java.lang.String;
				var PERSON_ID: java.lang.String;
				var DOWNLOAD_REQUIRED: java.lang.String;
				var EXISTS_ON_SERVER: java.lang.String;
				var SYNC_ERROR: java.lang.String;
				var DATA: java.lang.String;
			}
			export class GroupMembership extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IGroupsColumns {
				static CONTENT_URI: android.net.Uri;
				static RAW_CONTENT_URI: android.net.Uri;
				static CONTENT_DIRECTORY: java.lang.String;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static GROUP_ID: java.lang.String;
				static GROUP_SYNC_ID: java.lang.String;
				static GROUP_SYNC_ACCOUNT: java.lang.String;
				static GROUP_SYNC_ACCOUNT_TYPE: java.lang.String;
				static PERSON_ID: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.GroupMembership>;
			}
			export class Extensions extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IExtensionsColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static PERSON_ID: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.Extensions>;
			}
			export class Settings extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.ISettingsColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_DIRECTORY: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static SYNC_EVERYTHING: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.Settings>;
				static getSetting(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: java.lang.String): string;
				static getSetting(arg1: android.content.ContentResolver, arg2: string, arg3: string): string;
				static setSetting(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void;
				static setSetting(arg1: android.content.ContentResolver, arg2: string, arg3: string, arg4: string): void;
			}
			export class PeopleColumns implements android.provider.Contacts.IPeopleColumns {
				constructor(implementation: android.provider.Contacts.IPeopleColumns);
				static NAME: java.lang.String;
				static PHONETIC_NAME: java.lang.String;
				static DISPLAY_NAME: java.lang.String;
				static NOTES: java.lang.String;
				static TIMES_CONTACTED: java.lang.String;
				static LAST_TIME_CONTACTED: java.lang.String;
				static CUSTOM_RINGTONE: java.lang.String;
				static SEND_TO_VOICEMAIL: java.lang.String;
				static STARRED: java.lang.String;
				static PHOTO_VERSION: java.lang.String;
			}
			export interface IPeopleColumns {
			}
			export module IPeopleColumns {
				var NAME: java.lang.String;
				var PHONETIC_NAME: java.lang.String;
				var DISPLAY_NAME: java.lang.String;
				var NOTES: java.lang.String;
				var TIMES_CONTACTED: java.lang.String;
				var LAST_TIME_CONTACTED: java.lang.String;
				var CUSTOM_RINGTONE: java.lang.String;
				var SEND_TO_VOICEMAIL: java.lang.String;
				var STARRED: java.lang.String;
				var PHOTO_VERSION: java.lang.String;
			}
			export class PresenceColumns implements android.provider.Contacts.IPresenceColumns {
				constructor(implementation: android.provider.Contacts.IPresenceColumns);
				static PRIORITY: java.lang.String;
				static PRESENCE_STATUS: java.lang.String;
				static OFFLINE: number;
				static INVISIBLE: number;
				static AWAY: number;
				static IDLE: number;
				static DO_NOT_DISTURB: number;
				static AVAILABLE: number;
				static PRESENCE_CUSTOM_STATUS: java.lang.String;
				static IM_PROTOCOL: java.lang.String;
				static IM_HANDLE: java.lang.String;
				static IM_ACCOUNT: java.lang.String;
			}
			export class OrganizationColumns implements android.provider.Contacts.IOrganizationColumns {
				constructor(implementation: android.provider.Contacts.IOrganizationColumns);
				static TYPE: java.lang.String;
				static TYPE_CUSTOM: number;
				static TYPE_WORK: number;
				static TYPE_OTHER: number;
				static LABEL: java.lang.String;
				static COMPANY: java.lang.String;
				static TITLE: java.lang.String;
				static PERSON_ID: java.lang.String;
				static ISPRIMARY: java.lang.String;
			}
			export interface ISettingsColumns {
			}
			export module ISettingsColumns {
				var _SYNC_ACCOUNT: java.lang.String;
				var _SYNC_ACCOUNT_TYPE: java.lang.String;
				var KEY: java.lang.String;
				var VALUE: java.lang.String;
			}
			export interface IOrganizationColumns {
			}
			export module IOrganizationColumns {
				var TYPE: java.lang.String;
				var TYPE_CUSTOM: number;
				var TYPE_WORK: number;
				var TYPE_OTHER: number;
				var LABEL: java.lang.String;
				var COMPANY: java.lang.String;
				var TITLE: java.lang.String;
				var PERSON_ID: java.lang.String;
				var ISPRIMARY: java.lang.String;
			}
			export interface IContactMethodsColumns {
			}
			export module IContactMethodsColumns {
				var KIND: java.lang.String;
				var TYPE: java.lang.String;
				var TYPE_CUSTOM: number;
				var TYPE_HOME: number;
				var TYPE_WORK: number;
				var TYPE_OTHER: number;
				var LABEL: java.lang.String;
				var DATA: java.lang.String;
				var AUX_DATA: java.lang.String;
				var ISPRIMARY: java.lang.String;
			}
			export class ContactMethodsColumns implements android.provider.Contacts.IContactMethodsColumns {
				constructor(implementation: android.provider.Contacts.IContactMethodsColumns);
				static KIND: java.lang.String;
				static TYPE: java.lang.String;
				static TYPE_CUSTOM: number;
				static TYPE_HOME: number;
				static TYPE_WORK: number;
				static TYPE_OTHER: number;
				static LABEL: java.lang.String;
				static DATA: java.lang.String;
				static AUX_DATA: java.lang.String;
				static ISPRIMARY: java.lang.String;
			}
			export interface IPhonesColumns {
			}
			export module IPhonesColumns {
				var TYPE: java.lang.String;
				var TYPE_CUSTOM: number;
				var TYPE_HOME: number;
				var TYPE_MOBILE: number;
				var TYPE_WORK: number;
				var TYPE_FAX_WORK: number;
				var TYPE_FAX_HOME: number;
				var TYPE_PAGER: number;
				var TYPE_OTHER: number;
				var LABEL: java.lang.String;
				var NUMBER: java.lang.String;
				var NUMBER_KEY: java.lang.String;
				var ISPRIMARY: java.lang.String;
			}
			export class People extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IPeopleColumns, android.provider.Contacts.IPhonesColumns, android.provider.Contacts.IPresenceColumns {
				static CONTENT_URI: android.net.Uri;
				static CONTENT_FILTER_URI: android.net.Uri;
				static DELETED_CONTENT_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_ITEM_TYPE: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static PRIMARY_PHONE_ID: java.lang.String;
				static PRIMARY_EMAIL_ID: java.lang.String;
				static PRIMARY_ORGANIZATION_ID: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.People>;
				static openContactPhotoInputStream(arg1: android.content.ContentResolver, arg2: android.net.Uri): java.io.InputStream;
				static createPersonInMyContactsGroup(arg1: android.content.ContentResolver, arg2: android.content.ContentValues): android.net.Uri;
				static markAsContacted(arg1: android.content.ContentResolver, arg2: native.Long): void;
				static addToMyContactsGroup(arg1: android.content.ContentResolver, arg2: native.Long): android.net.Uri;
				static loadContactPhoto(arg1: android.content.Context, arg2: android.net.Uri, arg3: number, arg4: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
				static setPhotoData(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: native.Array<native.Byte>): void;
				static addToGroup(arg1: android.content.ContentResolver, arg2: native.Long, arg3: native.Long): android.net.Uri;
				static addToGroup(arg1: android.content.ContentResolver, arg2: native.Long, arg3: java.lang.String): android.net.Uri;
				static addToGroup(arg1: android.content.ContentResolver, arg2: native.Long, arg3: string): android.net.Uri;
				static queryGroups(arg1: android.content.ContentResolver, arg2: native.Long): android.database.ICursor;
			}
			export module People {
				export class Extensions extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IExtensionsColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static PERSON_ID: java.lang.String;
					static class: java.lang.Class<android.provider.Contacts.People.Extensions>;
				}
				export class Phones extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IPhonesColumns, android.provider.Contacts.IPeopleColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static class: java.lang.Class<android.provider.Contacts.People.Phones>;
				}
				export class ContactMethods extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IContactMethodsColumns, android.provider.Contacts.IPeopleColumns {
					static CONTENT_DIRECTORY: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static class: java.lang.Class<android.provider.Contacts.People.ContactMethods>;
				}
			}
			export class SettingsColumns implements android.provider.Contacts.ISettingsColumns {
				constructor(implementation: android.provider.Contacts.ISettingsColumns);
				static _SYNC_ACCOUNT: java.lang.String;
				static _SYNC_ACCOUNT_TYPE: java.lang.String;
				static KEY: java.lang.String;
				static VALUE: java.lang.String;
			}
			export class ContactMethods extends java.lang.Object implements android.provider.IBaseColumns, android.provider.Contacts.IContactMethodsColumns, android.provider.Contacts.IPeopleColumns {
				static POSTAL_LOCATION_LATITUDE: java.lang.String;
				static POSTAL_LOCATION_LONGITUDE: java.lang.String;
				static PROTOCOL_AIM: number;
				static PROTOCOL_MSN: number;
				static PROTOCOL_YAHOO: number;
				static PROTOCOL_SKYPE: number;
				static PROTOCOL_QQ: number;
				static PROTOCOL_GOOGLE_TALK: number;
				static PROTOCOL_ICQ: number;
				static PROTOCOL_JABBER: number;
				static CONTENT_URI: android.net.Uri;
				static CONTENT_EMAIL_URI: android.net.Uri;
				static CONTENT_TYPE: java.lang.String;
				static CONTENT_EMAIL_TYPE: java.lang.String;
				static CONTENT_POSTAL_TYPE: java.lang.String;
				static CONTENT_EMAIL_ITEM_TYPE: java.lang.String;
				static CONTENT_POSTAL_ITEM_TYPE: java.lang.String;
				static CONTENT_IM_ITEM_TYPE: java.lang.String;
				static DEFAULT_SORT_ORDER: java.lang.String;
				static PERSON_ID: java.lang.String;
				static class: java.lang.Class<android.provider.Contacts.ContactMethods>;
				static getDisplayLabel(arg1: android.content.Context, arg2: number, arg3: number, arg4: java.lang.ICharSequence): java.lang.ICharSequence;
				static getDisplayLabel(arg1: android.content.Context, arg2: number, arg3: number, arg4: string): java.lang.ICharSequence;
				static encodePredefinedImProtocol(arg1: number): string;
				static encodeCustomImProtocol(arg1: java.lang.String): string;
				static encodeCustomImProtocol(arg1: string): string;
				static decodeImProtocol(arg1: java.lang.String): any;
				static decodeImProtocol(arg1: string): any;
				addPostalLocation(arg1: android.content.Context, arg2: native.Long, arg3: native.Double, arg4: native.Double): void;
				addPostalLocation(arg1: android.content.Context, arg2: native.Long, arg3: number, arg4: number): void;
			}
		}
		export class MediaStore extends java.lang.Object {
			constructor();
			static AUTHORITY: java.lang.String;
			static INTENT_ACTION_MUSIC_PLAYER: java.lang.String;
			static INTENT_ACTION_MEDIA_SEARCH: java.lang.String;
			static INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH: java.lang.String;
			static INTENT_ACTION_TEXT_OPEN_FROM_SEARCH: java.lang.String;
			static INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH: java.lang.String;
			static EXTRA_MEDIA_ARTIST: java.lang.String;
			static EXTRA_MEDIA_ALBUM: java.lang.String;
			static EXTRA_MEDIA_TITLE: java.lang.String;
			static EXTRA_MEDIA_FOCUS: java.lang.String;
			static EXTRA_SCREEN_ORIENTATION: java.lang.String;
			static EXTRA_FULL_SCREEN: java.lang.String;
			static EXTRA_SHOW_ACTION_ICONS: java.lang.String;
			static EXTRA_FINISH_ON_COMPLETION: java.lang.String;
			static INTENT_ACTION_STILL_IMAGE_CAMERA: java.lang.String;
			static INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE: java.lang.String;
			static INTENT_ACTION_VIDEO_CAMERA: java.lang.String;
			static ACTION_IMAGE_CAPTURE: java.lang.String;
			static ACTION_IMAGE_CAPTURE_SECURE: java.lang.String;
			static ACTION_VIDEO_CAPTURE: java.lang.String;
			static EXTRA_VIDEO_QUALITY: java.lang.String;
			static EXTRA_SIZE_LIMIT: java.lang.String;
			static EXTRA_DURATION_LIMIT: java.lang.String;
			static EXTRA_OUTPUT: java.lang.String;
			static UNKNOWN_STRING: java.lang.String;
			static MEDIA_SCANNER_VOLUME: java.lang.String;
			static MEDIA_IGNORE_FILENAME: java.lang.String;
			static class: java.lang.Class<android.provider.MediaStore>;
			static getMediaScannerUri(): android.net.Uri;
			static getVersion(arg1: android.content.Context): string;
		}
		export module MediaStore {
			export class Files extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.provider.MediaStore.Files>;
				static getContentUri(arg1: java.lang.String): android.net.Uri;
				static getContentUri(arg1: string): android.net.Uri;
				static getContentUri(arg1: java.lang.String, arg2: native.Long): android.net.Uri;
				static getContentUri(arg1: string, arg2: native.Long): android.net.Uri;
			}
			export module Files {
				export class FileColumns implements android.provider.MediaStore.IMediaColumns, android.provider.MediaStore.Files.IFileColumns {
					constructor(implementation: android.provider.MediaStore.Files.IFileColumns);
					static PARENT: java.lang.String;
					static MIME_TYPE: java.lang.String;
					static TITLE: java.lang.String;
					static MEDIA_TYPE: java.lang.String;
					static MEDIA_TYPE_NONE: number;
					static MEDIA_TYPE_IMAGE: number;
					static MEDIA_TYPE_AUDIO: number;
					static MEDIA_TYPE_VIDEO: number;
					static MEDIA_TYPE_PLAYLIST: number;
				}
				export interface IFileColumns extends android.provider.MediaStore.IMediaColumns {
				}
				export module IFileColumns {
					var PARENT: java.lang.String;
					var MIME_TYPE: java.lang.String;
					var TITLE: java.lang.String;
					var MEDIA_TYPE: java.lang.String;
					var MEDIA_TYPE_NONE: number;
					var MEDIA_TYPE_IMAGE: number;
					var MEDIA_TYPE_AUDIO: number;
					var MEDIA_TYPE_VIDEO: number;
					var MEDIA_TYPE_PLAYLIST: number;
				}
			}
			export interface IMediaColumns extends android.provider.IBaseColumns {
			}
			export module IMediaColumns {
				var DATA: java.lang.String;
				var SIZE: java.lang.String;
				var DISPLAY_NAME: java.lang.String;
				var TITLE: java.lang.String;
				var DATE_ADDED: java.lang.String;
				var DATE_MODIFIED: java.lang.String;
				var MIME_TYPE: java.lang.String;
				var WIDTH: java.lang.String;
				var HEIGHT: java.lang.String;
			}
			export class MediaColumns implements android.provider.IBaseColumns, android.provider.MediaStore.IMediaColumns {
				constructor(implementation: android.provider.MediaStore.IMediaColumns);
				static DATA: java.lang.String;
				static SIZE: java.lang.String;
				static DISPLAY_NAME: java.lang.String;
				static TITLE: java.lang.String;
				static DATE_ADDED: java.lang.String;
				static DATE_MODIFIED: java.lang.String;
				static MIME_TYPE: java.lang.String;
				static WIDTH: java.lang.String;
				static HEIGHT: java.lang.String;
			}
			export class Images extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.provider.MediaStore.Images>;
			}
			export module Images {
				export class ImageColumns implements android.provider.MediaStore.IMediaColumns, android.provider.MediaStore.Images.IImageColumns {
					constructor(implementation: android.provider.MediaStore.Images.IImageColumns);
					static DESCRIPTION: java.lang.String;
					static PICASA_ID: java.lang.String;
					static IS_PRIVATE: java.lang.String;
					static LATITUDE: java.lang.String;
					static LONGITUDE: java.lang.String;
					static DATE_TAKEN: java.lang.String;
					static ORIENTATION: java.lang.String;
					static MINI_THUMB_MAGIC: java.lang.String;
					static BUCKET_ID: java.lang.String;
					static BUCKET_DISPLAY_NAME: java.lang.String;
				}
				export class Media extends java.lang.Object implements android.provider.MediaStore.Images.IImageColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static CONTENT_TYPE: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Images.Media>;
					static getBitmap(arg1: android.content.ContentResolver, arg2: android.net.Uri): android.graphics.Bitmap;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
					static insertImage(arg1: android.content.ContentResolver, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): string;
					static insertImage(arg1: android.content.ContentResolver, arg2: string, arg3: string, arg4: string): string;
					static insertImage(arg1: android.content.ContentResolver, arg2: android.graphics.Bitmap, arg3: java.lang.String, arg4: java.lang.String): string;
					static insertImage(arg1: android.content.ContentResolver, arg2: android.graphics.Bitmap, arg3: string, arg4: string): string;
					static query(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: native.Array<java.lang.String>, arg4: java.lang.String, arg5: native.Array<java.lang.String>, arg6: java.lang.String): android.database.ICursor;
					static query(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: native.Array<java.lang.String>, arg4: string, arg5: native.Array<java.lang.String>, arg6: string): android.database.ICursor;
					static query(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: native.Array<java.lang.String>): android.database.ICursor;
					static query(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: native.Array<java.lang.String>, arg4: java.lang.String, arg5: java.lang.String): android.database.ICursor;
					static query(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: native.Array<java.lang.String>, arg4: string, arg5: string): android.database.ICursor;
				}
				export class Thumbnails extends java.lang.Object implements android.provider.IBaseColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static DATA: java.lang.String;
					static IMAGE_ID: java.lang.String;
					static KIND: java.lang.String;
					static MINI_KIND: number;
					static FULL_SCREEN_KIND: number;
					static MICRO_KIND: number;
					static THUMB_DATA: java.lang.String;
					static WIDTH: java.lang.String;
					static HEIGHT: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Images.Thumbnails>;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
					static cancelThumbnailRequest(arg1: android.content.ContentResolver, arg2: native.Long): void;
					static cancelThumbnailRequest(arg1: android.content.ContentResolver, arg2: native.Long, arg3: native.Long): void;
					static queryMiniThumbnails(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: number, arg4: native.Array<java.lang.String>): android.database.ICursor;
					static queryMiniThumbnail(arg1: android.content.ContentResolver, arg2: native.Long, arg3: number, arg4: native.Array<java.lang.String>): android.database.ICursor;
					static getThumbnail(arg1: android.content.ContentResolver, arg2: native.Long, arg3: native.Long, arg4: number, arg5: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
					static getThumbnail(arg1: android.content.ContentResolver, arg2: native.Long, arg3: number, arg4: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
					static query(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: native.Array<java.lang.String>): android.database.ICursor;
				}
				export interface IImageColumns extends android.provider.MediaStore.IMediaColumns {
				}
				export module IImageColumns {
					var DESCRIPTION: java.lang.String;
					var PICASA_ID: java.lang.String;
					var IS_PRIVATE: java.lang.String;
					var LATITUDE: java.lang.String;
					var LONGITUDE: java.lang.String;
					var DATE_TAKEN: java.lang.String;
					var ORIENTATION: java.lang.String;
					var MINI_THUMB_MAGIC: java.lang.String;
					var BUCKET_ID: java.lang.String;
					var BUCKET_DISPLAY_NAME: java.lang.String;
				}
			}
			export class Audio extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.provider.MediaStore.Audio>;
				static keyFor(arg1: java.lang.String): string;
				static keyFor(arg1: string): string;
			}
			export module Audio {
				export class Artists extends java.lang.Object implements android.provider.IBaseColumns, android.provider.MediaStore.Audio.IArtistColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static CONTENT_TYPE: java.lang.String;
					static ENTRY_CONTENT_TYPE: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Audio.Artists>;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
				}
				export module Artists {
					export class Albums extends java.lang.Object implements android.provider.MediaStore.Audio.IAlbumColumns {
						constructor();
						static class: java.lang.Class<android.provider.MediaStore.Audio.Artists.Albums>;
						static getContentUri(arg1: java.lang.String, arg2: native.Long): android.net.Uri;
						static getContentUri(arg1: string, arg2: native.Long): android.net.Uri;
					}
				}
				export interface IAlbumColumns {
				}
				export module IAlbumColumns {
					var ALBUM_ID: java.lang.String;
					var ALBUM: java.lang.String;
					var ARTIST: java.lang.String;
					var NUMBER_OF_SONGS: java.lang.String;
					var NUMBER_OF_SONGS_FOR_ARTIST: java.lang.String;
					var FIRST_YEAR: java.lang.String;
					var LAST_YEAR: java.lang.String;
					var ALBUM_KEY: java.lang.String;
					var ALBUM_ART: java.lang.String;
				}
				export interface IGenresColumns {
				}
				export module IGenresColumns {
					var NAME: java.lang.String;
				}
				export class Media extends java.lang.Object implements android.provider.MediaStore.Audio.IAudioColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static CONTENT_TYPE: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static RECORD_SOUND_ACTION: java.lang.String;
					static EXTRA_MAX_BYTES: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Audio.Media>;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
					static getContentUriForPath(arg1: java.lang.String): android.net.Uri;
					static getContentUriForPath(arg1: string): android.net.Uri;
				}
				export interface IArtistColumns {
				}
				export module IArtistColumns {
					var ARTIST: java.lang.String;
					var ARTIST_KEY: java.lang.String;
					var NUMBER_OF_ALBUMS: java.lang.String;
					var NUMBER_OF_TRACKS: java.lang.String;
				}
				export interface IPlaylistsColumns {
				}
				export module IPlaylistsColumns {
					var NAME: java.lang.String;
					var DATA: java.lang.String;
					var DATE_ADDED: java.lang.String;
					var DATE_MODIFIED: java.lang.String;
				}
				export class Albums extends java.lang.Object implements android.provider.IBaseColumns, android.provider.MediaStore.Audio.IAlbumColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static CONTENT_TYPE: java.lang.String;
					static ENTRY_CONTENT_TYPE: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Audio.Albums>;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
				}
				export class ArtistColumns implements android.provider.MediaStore.Audio.IArtistColumns {
					constructor(implementation: android.provider.MediaStore.Audio.IArtistColumns);
					static ARTIST: java.lang.String;
					static ARTIST_KEY: java.lang.String;
					static NUMBER_OF_ALBUMS: java.lang.String;
					static NUMBER_OF_TRACKS: java.lang.String;
				}
				export class PlaylistsColumns implements android.provider.MediaStore.Audio.IPlaylistsColumns {
					constructor(implementation: android.provider.MediaStore.Audio.IPlaylistsColumns);
					static NAME: java.lang.String;
					static DATA: java.lang.String;
					static DATE_ADDED: java.lang.String;
					static DATE_MODIFIED: java.lang.String;
				}
				export class AudioColumns implements android.provider.MediaStore.IMediaColumns, android.provider.MediaStore.Audio.IAudioColumns {
					constructor(implementation: android.provider.MediaStore.Audio.IAudioColumns);
					static TITLE_KEY: java.lang.String;
					static DURATION: java.lang.String;
					static BOOKMARK: java.lang.String;
					static ARTIST_ID: java.lang.String;
					static ARTIST: java.lang.String;
					static ARTIST_KEY: java.lang.String;
					static COMPOSER: java.lang.String;
					static ALBUM_ID: java.lang.String;
					static ALBUM: java.lang.String;
					static ALBUM_KEY: java.lang.String;
					static TRACK: java.lang.String;
					static YEAR: java.lang.String;
					static IS_MUSIC: java.lang.String;
					static IS_PODCAST: java.lang.String;
					static IS_RINGTONE: java.lang.String;
					static IS_ALARM: java.lang.String;
					static IS_NOTIFICATION: java.lang.String;
				}
				export class AlbumColumns implements android.provider.MediaStore.Audio.IAlbumColumns {
					constructor(implementation: android.provider.MediaStore.Audio.IAlbumColumns);
					static ALBUM_ID: java.lang.String;
					static ALBUM: java.lang.String;
					static ARTIST: java.lang.String;
					static NUMBER_OF_SONGS: java.lang.String;
					static NUMBER_OF_SONGS_FOR_ARTIST: java.lang.String;
					static FIRST_YEAR: java.lang.String;
					static LAST_YEAR: java.lang.String;
					static ALBUM_KEY: java.lang.String;
					static ALBUM_ART: java.lang.String;
				}
				export class Playlists extends java.lang.Object implements android.provider.IBaseColumns, android.provider.MediaStore.Audio.IPlaylistsColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static CONTENT_TYPE: java.lang.String;
					static ENTRY_CONTENT_TYPE: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Audio.Playlists>;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
				}
				export module Playlists {
					export class Members extends java.lang.Object implements android.provider.MediaStore.Audio.IAudioColumns {
						constructor();
						static _ID: java.lang.String;
						static CONTENT_DIRECTORY: java.lang.String;
						static AUDIO_ID: java.lang.String;
						static PLAYLIST_ID: java.lang.String;
						static PLAY_ORDER: java.lang.String;
						static DEFAULT_SORT_ORDER: java.lang.String;
						static class: java.lang.Class<android.provider.MediaStore.Audio.Playlists.Members>;
						static getContentUri(arg1: java.lang.String, arg2: native.Long): android.net.Uri;
						static getContentUri(arg1: string, arg2: native.Long): android.net.Uri;
						static moveItem(arg1: android.content.ContentResolver, arg2: native.Long, arg3: number, arg4: number): boolean;
					}
				}
				export interface IAudioColumns extends android.provider.MediaStore.IMediaColumns {
				}
				export module IAudioColumns {
					var TITLE_KEY: java.lang.String;
					var DURATION: java.lang.String;
					var BOOKMARK: java.lang.String;
					var ARTIST_ID: java.lang.String;
					var ARTIST: java.lang.String;
					var ARTIST_KEY: java.lang.String;
					var COMPOSER: java.lang.String;
					var ALBUM_ID: java.lang.String;
					var ALBUM: java.lang.String;
					var ALBUM_KEY: java.lang.String;
					var TRACK: java.lang.String;
					var YEAR: java.lang.String;
					var IS_MUSIC: java.lang.String;
					var IS_PODCAST: java.lang.String;
					var IS_RINGTONE: java.lang.String;
					var IS_ALARM: java.lang.String;
					var IS_NOTIFICATION: java.lang.String;
				}
				export class Genres extends java.lang.Object implements android.provider.IBaseColumns, android.provider.MediaStore.Audio.IGenresColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static CONTENT_TYPE: java.lang.String;
					static ENTRY_CONTENT_TYPE: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Audio.Genres>;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
					static getContentUriForAudioId(arg1: java.lang.String, arg2: number): android.net.Uri;
					static getContentUriForAudioId(arg1: string, arg2: number): android.net.Uri;
				}
				export module Genres {
					export class Members extends java.lang.Object implements android.provider.MediaStore.Audio.IAudioColumns {
						constructor();
						static CONTENT_DIRECTORY: java.lang.String;
						static DEFAULT_SORT_ORDER: java.lang.String;
						static AUDIO_ID: java.lang.String;
						static GENRE_ID: java.lang.String;
						static class: java.lang.Class<android.provider.MediaStore.Audio.Genres.Members>;
						static getContentUri(arg1: java.lang.String, arg2: native.Long): android.net.Uri;
						static getContentUri(arg1: string, arg2: native.Long): android.net.Uri;
					}
				}
				export class GenresColumns implements android.provider.MediaStore.Audio.IGenresColumns {
					constructor(implementation: android.provider.MediaStore.Audio.IGenresColumns);
					static NAME: java.lang.String;
				}
			}
			export class Video extends java.lang.Object {
				constructor();
				static DEFAULT_SORT_ORDER: java.lang.String;
				static class: java.lang.Class<android.provider.MediaStore.Video>;
				static query(arg1: android.content.ContentResolver, arg2: android.net.Uri, arg3: native.Array<java.lang.String>): android.database.ICursor;
			}
			export module Video {
				export class Media extends java.lang.Object implements android.provider.MediaStore.Video.IVideoColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static CONTENT_TYPE: java.lang.String;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Video.Media>;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
				}
				export interface IVideoColumns extends android.provider.MediaStore.IMediaColumns {
				}
				export module IVideoColumns {
					var DURATION: java.lang.String;
					var ARTIST: java.lang.String;
					var ALBUM: java.lang.String;
					var RESOLUTION: java.lang.String;
					var DESCRIPTION: java.lang.String;
					var IS_PRIVATE: java.lang.String;
					var TAGS: java.lang.String;
					var CATEGORY: java.lang.String;
					var LANGUAGE: java.lang.String;
					var LATITUDE: java.lang.String;
					var LONGITUDE: java.lang.String;
					var DATE_TAKEN: java.lang.String;
					var MINI_THUMB_MAGIC: java.lang.String;
					var BUCKET_ID: java.lang.String;
					var BUCKET_DISPLAY_NAME: java.lang.String;
					var BOOKMARK: java.lang.String;
				}
				export class VideoColumns implements android.provider.MediaStore.IMediaColumns, android.provider.MediaStore.Video.IVideoColumns {
					constructor(implementation: android.provider.MediaStore.Video.IVideoColumns);
					static DURATION: java.lang.String;
					static ARTIST: java.lang.String;
					static ALBUM: java.lang.String;
					static RESOLUTION: java.lang.String;
					static DESCRIPTION: java.lang.String;
					static IS_PRIVATE: java.lang.String;
					static TAGS: java.lang.String;
					static CATEGORY: java.lang.String;
					static LANGUAGE: java.lang.String;
					static LATITUDE: java.lang.String;
					static LONGITUDE: java.lang.String;
					static DATE_TAKEN: java.lang.String;
					static MINI_THUMB_MAGIC: java.lang.String;
					static BUCKET_ID: java.lang.String;
					static BUCKET_DISPLAY_NAME: java.lang.String;
					static BOOKMARK: java.lang.String;
				}
				export class Thumbnails extends java.lang.Object implements android.provider.IBaseColumns {
					constructor();
					static INTERNAL_CONTENT_URI: android.net.Uri;
					static EXTERNAL_CONTENT_URI: android.net.Uri;
					static DEFAULT_SORT_ORDER: java.lang.String;
					static DATA: java.lang.String;
					static VIDEO_ID: java.lang.String;
					static KIND: java.lang.String;
					static MINI_KIND: number;
					static FULL_SCREEN_KIND: number;
					static MICRO_KIND: number;
					static WIDTH: java.lang.String;
					static HEIGHT: java.lang.String;
					static class: java.lang.Class<android.provider.MediaStore.Video.Thumbnails>;
					static getContentUri(arg1: java.lang.String): android.net.Uri;
					static getContentUri(arg1: string): android.net.Uri;
					static cancelThumbnailRequest(arg1: android.content.ContentResolver, arg2: native.Long, arg3: native.Long): void;
					static cancelThumbnailRequest(arg1: android.content.ContentResolver, arg2: native.Long): void;
					static getThumbnail(arg1: android.content.ContentResolver, arg2: native.Long, arg3: native.Long, arg4: number, arg5: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
					static getThumbnail(arg1: android.content.ContentResolver, arg2: native.Long, arg3: number, arg4: android.graphics.BitmapFactory.Options): android.graphics.Bitmap;
				}
			}
		}
		export class BaseColumns implements android.provider.IBaseColumns {
			constructor(implementation: android.provider.IBaseColumns);
			static _ID: java.lang.String;
			static _COUNT: java.lang.String;
		}
		export class AlarmClock extends java.lang.Object {
			constructor();
			static ACTION_SET_ALARM: java.lang.String;
			static EXTRA_MESSAGE: java.lang.String;
			static EXTRA_HOUR: java.lang.String;
			static EXTRA_MINUTES: java.lang.String;
			static EXTRA_SKIP_UI: java.lang.String;
			static class: java.lang.Class<android.provider.AlarmClock>;
		}
	}
	export module database {
		export class CrossProcessCursor implements android.database.ICursor, android.database.ICrossProcessCursor {
			constructor(implementation: android.database.ICrossProcessCursor);
			onMove(arg1: number, arg2: number): boolean;
			fillWindow(arg1: number, arg2: android.database.CursorWindow): void;
			getWindow(): android.database.CursorWindow;
			getBlob(arg1: number): native.Array<native.Byte>;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getExtras(): android.os.Bundle;
			moveToLast(): boolean;
			moveToFirst(): boolean;
			moveToNext(): boolean;
			requery(): boolean;
			respond(arg1: android.os.Bundle): android.os.Bundle;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			getWantsAllOnMoveCalls(): boolean;
			registerContentObserver(arg1: android.database.ContentObserver): void;
			copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
			moveToPrevious(): boolean;
			getColumnIndexOrThrow(arg1: string): number;
			setNotificationUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): void;
			moveToPosition(arg1: number): boolean;
			getColumnNames(): native.Array<java.lang.String>;
			close(): void;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			move(arg1: number): boolean;
			isNull(arg1: number): boolean;
			getColumnCount(): number;
			getPosition(): number;
			isClosed(): boolean;
			deactivate(): void;
			getColumnIndex(arg1: string): number;
			getColumnName(arg1: number): string;
			getCount(): number;
		}
		export class MergeCursor extends android.database.AbstractCursor {
			constructor(arg1: native.Array<android.database.ICursor>);
			static class: java.lang.Class<android.database.MergeCursor>;
			getBlob(arg1: number): native.Array<native.Byte>;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			requery(): boolean;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			registerContentObserver(arg1: android.database.ContentObserver): void;
			getColumnNames(): native.Array<java.lang.String>;
			onMove(arg1: number, arg2: number): boolean;
			close(): void;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			isNull(arg1: number): boolean;
			deactivate(): void;
			getCount(): number;
		}
		export class DefaultDatabaseErrorHandler extends java.lang.Object implements android.database.IDatabaseErrorHandler {
			constructor();
			static class: java.lang.Class<android.database.DefaultDatabaseErrorHandler>;
			onCorruption(arg1: android.database.sqlite.SQLiteDatabase): void;
		}
		export class DatabaseUtils extends java.lang.Object {
			constructor();
			static STATEMENT_SELECT: number;
			static STATEMENT_UPDATE: number;
			static STATEMENT_ATTACH: number;
			static STATEMENT_BEGIN: number;
			static STATEMENT_COMMIT: number;
			static STATEMENT_ABORT: number;
			static STATEMENT_PRAGMA: number;
			static STATEMENT_DDL: number;
			static STATEMENT_UNPREPARED: number;
			static STATEMENT_OTHER: number;
			static class: java.lang.Class<android.database.DatabaseUtils>;
			static dumpCurrentRowToString(arg1: android.database.ICursor): string;
			static readExceptionFromParcel(arg1: android.os.Parcel): void;
			static cursorDoubleToContentValues(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.content.ContentValues, arg4: java.lang.String): void;
			static cursorDoubleToContentValues(arg1: android.database.ICursor, arg2: string, arg3: android.content.ContentValues, arg4: string): void;
			static writeExceptionToParcel(arg1: android.os.Parcel, arg2: java.lang.Exception): void;
			static cursorIntToContentValues(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.content.ContentValues, arg4: java.lang.String): void;
			static cursorIntToContentValues(arg1: android.database.ICursor, arg2: string, arg3: android.content.ContentValues, arg4: string): void;
			static cursorIntToContentValues(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.content.ContentValues): void;
			static cursorIntToContentValues(arg1: android.database.ICursor, arg2: string, arg3: android.content.ContentValues): void;
			static cursorStringToContentValues(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.content.ContentValues, arg4: java.lang.String): void;
			static cursorStringToContentValues(arg1: android.database.ICursor, arg2: string, arg3: android.content.ContentValues, arg4: string): void;
			static cursorStringToContentValues(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.content.ContentValues): void;
			static cursorStringToContentValues(arg1: android.database.ICursor, arg2: string, arg3: android.content.ContentValues): void;
			static createDbFromSqlStatements(arg1: android.content.Context, arg2: java.lang.String, arg3: number, arg4: java.lang.String): void;
			static createDbFromSqlStatements(arg1: android.content.Context, arg2: string, arg3: number, arg4: string): void;
			static cursorStringToInsertHelper(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.database.DatabaseUtils.InsertHelper, arg4: number): void;
			static cursorStringToInsertHelper(arg1: android.database.ICursor, arg2: string, arg3: android.database.DatabaseUtils.InsertHelper, arg4: number): void;
			static cursorDoubleToCursorValues(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.content.ContentValues): void;
			static cursorDoubleToCursorValues(arg1: android.database.ICursor, arg2: string, arg3: android.content.ContentValues): void;
			static cursorLongToContentValues(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.content.ContentValues): void;
			static cursorLongToContentValues(arg1: android.database.ICursor, arg2: string, arg3: android.content.ContentValues): void;
			static cursorLongToContentValues(arg1: android.database.ICursor, arg2: java.lang.String, arg3: android.content.ContentValues, arg4: java.lang.String): void;
			static cursorLongToContentValues(arg1: android.database.ICursor, arg2: string, arg3: android.content.ContentValues, arg4: string): void;
			static cursorRowToContentValues(arg1: android.database.ICursor, arg2: android.content.ContentValues): void;
			static appendEscapedSQLString(arg1: java.lang.StringBuilder, arg2: java.lang.String): void;
			static appendEscapedSQLString(arg1: java.lang.StringBuilder, arg2: string): void;
			static blobFileDescriptorForQuery(arg1: android.database.sqlite.SQLiteDatabase, arg2: java.lang.String, arg3: native.Array<java.lang.String>): android.os.ParcelFileDescriptor;
			static blobFileDescriptorForQuery(arg1: android.database.sqlite.SQLiteDatabase, arg2: string, arg3: native.Array<java.lang.String>): android.os.ParcelFileDescriptor;
			static blobFileDescriptorForQuery(arg1: android.database.sqlite.SQLiteStatement, arg2: native.Array<java.lang.String>): android.os.ParcelFileDescriptor;
			static longForQuery(arg1: android.database.sqlite.SQLiteStatement, arg2: native.Array<java.lang.String>): any;
			static longForQuery(arg1: android.database.sqlite.SQLiteDatabase, arg2: java.lang.String, arg3: native.Array<java.lang.String>): any;
			static longForQuery(arg1: android.database.sqlite.SQLiteDatabase, arg2: string, arg3: native.Array<java.lang.String>): any;
			static dumpCursor(arg1: android.database.ICursor, arg2: java.lang.StringBuilder): void;
			static dumpCursor(arg1: android.database.ICursor): void;
			static dumpCursor(arg1: android.database.ICursor, arg2: java.io.PrintStream): void;
			static concatenateWhere(arg1: java.lang.String, arg2: java.lang.String): string;
			static concatenateWhere(arg1: string, arg2: string): string;
			static getSqlStatementType(arg1: java.lang.String): number;
			static getSqlStatementType(arg1: string): number;
			static bindObjectToProgram(arg1: android.database.sqlite.SQLiteProgram, arg2: number, arg3: any): void;
			static appendValueToSql(arg1: java.lang.StringBuilder, arg2: any): void;
			static getHexCollationKey(arg1: java.lang.String): string;
			static getHexCollationKey(arg1: string): string;
			static sqlEscapeString(arg1: java.lang.String): string;
			static sqlEscapeString(arg1: string): string;
			static dumpCurrentRow(arg1: android.database.ICursor): void;
			static dumpCurrentRow(arg1: android.database.ICursor, arg2: java.lang.StringBuilder): void;
			static dumpCurrentRow(arg1: android.database.ICursor, arg2: java.io.PrintStream): void;
			static dumpCursorToString(arg1: android.database.ICursor): string;
			static appendSelectionArgs(arg1: native.Array<java.lang.String>, arg2: native.Array<java.lang.String>): native.Array<java.lang.String>;
			static stringForQuery(arg1: android.database.sqlite.SQLiteDatabase, arg2: java.lang.String, arg3: native.Array<java.lang.String>): string;
			static stringForQuery(arg1: android.database.sqlite.SQLiteDatabase, arg2: string, arg3: native.Array<java.lang.String>): string;
			static stringForQuery(arg1: android.database.sqlite.SQLiteStatement, arg2: native.Array<java.lang.String>): string;
			static queryNumEntries(arg1: android.database.sqlite.SQLiteDatabase, arg2: java.lang.String, arg3: java.lang.String, arg4: native.Array<java.lang.String>): any;
			static queryNumEntries(arg1: android.database.sqlite.SQLiteDatabase, arg2: string, arg3: string, arg4: native.Array<java.lang.String>): any;
			static queryNumEntries(arg1: android.database.sqlite.SQLiteDatabase, arg2: java.lang.String): any;
			static queryNumEntries(arg1: android.database.sqlite.SQLiteDatabase, arg2: string): any;
			static queryNumEntries(arg1: android.database.sqlite.SQLiteDatabase, arg2: java.lang.String, arg3: java.lang.String): any;
			static queryNumEntries(arg1: android.database.sqlite.SQLiteDatabase, arg2: string, arg3: string): any;
			static readExceptionWithFileNotFoundExceptionFromParcel(arg1: android.os.Parcel): void;
			static cursorShortToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: java.lang.String): void;
			static cursorShortToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: string): void;
			static cursorDoubleToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: java.lang.String): void;
			static cursorDoubleToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: string): void;
			static cursorLongToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: java.lang.String): void;
			static cursorLongToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: string): void;
			static cursorIntToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: java.lang.String): void;
			static cursorIntToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: string): void;
			static cursorStringToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: java.lang.String): void;
			static cursorStringToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: string): void;
			static cursorFloatToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: java.lang.String): void;
			static cursorFloatToContentValuesIfPresent(arg1: android.database.ICursor, arg2: android.content.ContentValues, arg3: string): void;
			static readExceptionWithOperationApplicationExceptionFromParcel(arg1: android.os.Parcel): void;
			static getCollationKey(arg1: java.lang.String): string;
			static getCollationKey(arg1: string): string;
		}
		export module DatabaseUtils {
			export class InsertHelper extends java.lang.Object {
				constructor(arg1: android.database.sqlite.SQLiteDatabase, arg2: java.lang.String);
				constructor(arg1: android.database.sqlite.SQLiteDatabase, arg2: string);
				static class: java.lang.Class<android.database.DatabaseUtils.InsertHelper>;
				bindNull(arg1: number): void;
				prepareForInsert(): void;
				prepareForReplace(): void;
				replace(arg1: android.content.ContentValues): any;
				close(): void;
				bind(arg1: number, arg2: java.lang.String): void;
				bind(arg1: number, arg2: string): void;
				bind(arg1: number, arg2: native.Array<native.Byte>): void;
				bind(arg1: number, arg2: native.Float): void;
				bind(arg1: number, arg2: native.Double): void;
				bind(arg1: number, arg2: number): void;
				bind(arg1: number, arg2: native.Long): void;
				bind(arg1: number, arg2: boolean): void;
				insert(arg1: android.content.ContentValues): any;
				execute(): any;
				getColumnIndex(arg1: java.lang.String): number;
				getColumnIndex(arg1: string): number;
			}
		}
		export interface ICursor extends java.io.ICloseable {
			getBlob(arg1: number): native.Array<native.Byte>;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getExtras(): android.os.Bundle;
			moveToLast(): boolean;
			moveToFirst(): boolean;
			moveToNext(): boolean;
			requery(): boolean;
			respond(arg1: android.os.Bundle): android.os.Bundle;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			getWantsAllOnMoveCalls(): boolean;
			registerContentObserver(arg1: android.database.ContentObserver): void;
			copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
			moveToPrevious(): boolean;
			getColumnIndexOrThrow(arg1: string): number;
			setNotificationUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): void;
			moveToPosition(arg1: number): boolean;
			getColumnNames(): native.Array<java.lang.String>;
			close(): void;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			move(arg1: number): boolean;
			isNull(arg1: number): boolean;
			getColumnCount(): number;
			getPosition(): number;
			isClosed(): boolean;
			deactivate(): void;
			getColumnIndex(arg1: string): number;
			getColumnName(arg1: number): string;
			getCount(): number;
		}
		export module ICursor {
			var FIELD_TYPE_NULL: number;
			var FIELD_TYPE_INTEGER: number;
			var FIELD_TYPE_FLOAT: number;
			var FIELD_TYPE_STRING: number;
			var FIELD_TYPE_BLOB: number;
		}
		export class CursorWindow extends android.database.sqlite.SQLiteClosable implements android.os.IParcelable {
			constructor(arg1: boolean);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static CREATOR: android.os.Parcelable.ICreator<android.database.CursorWindow>;
			static class: java.lang.Class<android.database.CursorWindow>;
			StartPosition: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			getBlob(arg1: number, arg2: number): native.Array<native.Byte>;
			describeContents(): number;
			setNumColumns(arg1: number): boolean;
			copyStringToBuffer(arg1: number, arg2: number, arg3: android.database.CharArrayBuffer): void;
			putString(arg1: java.lang.String, arg2: number, arg3: number): boolean;
			putString(arg1: string, arg2: number, arg3: number): boolean;
			isString(arg1: number, arg2: number): boolean;
			freeLastRow(): void;
			getNumRows(): number;
			isLong(arg1: number, arg2: number): boolean;
			putBlob(arg1: native.Array<native.Byte>, arg2: number, arg3: number): boolean;
			isFloat(arg1: number, arg2: number): boolean;
			allocRow(): boolean;
			isBlob(arg1: number, arg2: number): boolean;
			static newFromParcel(arg1: android.os.Parcel): android.database.CursorWindow;
			setStartPosition(arg1: number): void;
			toString(): string;
			clear(): void;
			getDouble(arg1: number, arg2: number): any;
			getFloat(arg1: number, arg2: number): number;
			getInt(arg1: number, arg2: number): number;
			getLong(arg1: number, arg2: number): any;
			getShort(arg1: number, arg2: number): number;
			getType(arg1: number, arg2: number): number;
			putDouble(arg1: native.Double, arg2: number, arg3: number): boolean;
			putDouble(arg1: number, arg2: number, arg3: number): boolean;
			putLong(arg1: native.Long, arg2: number, arg3: number): boolean;
			getString(arg1: number, arg2: number): string;
			isNull(arg1: number, arg2: number): boolean;
			getStartPosition(): number;
			putNull(arg1: number, arg2: number): boolean;
		}
		export interface ICrossProcessCursor extends android.database.ICursor {
			onMove(arg1: number, arg2: number): boolean;
			fillWindow(arg1: number, arg2: android.database.CursorWindow): void;
			getWindow(): android.database.CursorWindow;
			getBlob(arg1: number): native.Array<native.Byte>;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getExtras(): android.os.Bundle;
			moveToLast(): boolean;
			moveToFirst(): boolean;
			moveToNext(): boolean;
			requery(): boolean;
			respond(arg1: android.os.Bundle): android.os.Bundle;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			getWantsAllOnMoveCalls(): boolean;
			registerContentObserver(arg1: android.database.ContentObserver): void;
			copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
			moveToPrevious(): boolean;
			getColumnIndexOrThrow(arg1: string): number;
			setNotificationUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): void;
			moveToPosition(arg1: number): boolean;
			getColumnNames(): native.Array<java.lang.String>;
			close(): void;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			move(arg1: number): boolean;
			isNull(arg1: number): boolean;
			getColumnCount(): number;
			getPosition(): number;
			isClosed(): boolean;
			deactivate(): void;
			getColumnIndex(arg1: string): number;
			getColumnName(arg1: number): string;
			getCount(): number;
		}
		export class DataSetObservable extends android.database.Observable<android.database.DataSetObserver> {
			constructor();
			static class: java.lang.Class<android.database.DataSetObservable>;
			notifyChanged(): void;
			notifyInvalidated(): void;
		}
		export class CrossProcessCursorWrapper extends android.database.CursorWrapper implements android.database.ICrossProcessCursor {
			constructor(arg1: android.database.ICursor);
			static class: java.lang.Class<android.database.CrossProcessCursorWrapper>;
			onMove(arg1: number, arg2: number): boolean;
			fillWindow(arg1: number, arg2: android.database.CursorWindow): void;
			getWindow(): android.database.CursorWindow;
			getBlob(arg1: number): native.Array<native.Byte>;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getExtras(): android.os.Bundle;
			moveToLast(): boolean;
			moveToFirst(): boolean;
			moveToNext(): boolean;
			requery(): boolean;
			respond(arg1: android.os.Bundle): android.os.Bundle;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			getWantsAllOnMoveCalls(): boolean;
			registerContentObserver(arg1: android.database.ContentObserver): void;
			copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
			moveToPrevious(): boolean;
			getColumnIndexOrThrow(arg1: string): number;
			setNotificationUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): void;
			moveToPosition(arg1: number): boolean;
			getColumnNames(): native.Array<java.lang.String>;
			close(): void;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			move(arg1: number): boolean;
			isNull(arg1: number): boolean;
			getColumnCount(): number;
			getPosition(): number;
			isClosed(): boolean;
			deactivate(): void;
			getColumnIndex(arg1: string): number;
			getColumnName(arg1: number): string;
			getCount(): number;
			getColumnIndexOrThrow(arg1: java.lang.String): number;
			getColumnIndex(arg1: java.lang.String): number;
		}
		export class ContentObserver extends java.lang.Object {
			constructor(arg1: android.os.Handler);
			static class: java.lang.Class<android.database.ContentObserver>;
			deliverSelfNotifications(): boolean;
			onChange(arg1: boolean): void;
			onChange(arg1: boolean, arg2: android.net.Uri): void;
			dispatchChange(arg1: boolean): void;
			dispatchChange(arg1: boolean, arg2: android.net.Uri): void;
		}
		export class Cursor implements java.io.ICloseable, android.database.ICursor {
			constructor(implementation: android.database.ICursor);
			static FIELD_TYPE_NULL: number;
			static FIELD_TYPE_INTEGER: number;
			static FIELD_TYPE_FLOAT: number;
			static FIELD_TYPE_STRING: number;
			static FIELD_TYPE_BLOB: number;
			getBlob(arg1: number): native.Array<native.Byte>;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getExtras(): android.os.Bundle;
			moveToLast(): boolean;
			moveToFirst(): boolean;
			moveToNext(): boolean;
			requery(): boolean;
			respond(arg1: android.os.Bundle): android.os.Bundle;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			getWantsAllOnMoveCalls(): boolean;
			registerContentObserver(arg1: android.database.ContentObserver): void;
			copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
			moveToPrevious(): boolean;
			getColumnIndexOrThrow(arg1: java.lang.String): number;
			getColumnIndexOrThrow(arg1: string): number;
			setNotificationUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): void;
			moveToPosition(arg1: number): boolean;
			getColumnNames(): native.Array<java.lang.String>;
			close(): void;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			move(arg1: number): boolean;
			isNull(arg1: number): boolean;
			getColumnCount(): number;
			getPosition(): number;
			isClosed(): boolean;
			deactivate(): void;
			getColumnIndex(arg1: java.lang.String): number;
			getColumnIndex(arg1: string): number;
			getColumnName(arg1: number): string;
			getCount(): number;
		}
		export module sqlite {
			export class SQLiteDatabaseLockedException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteDatabaseLockedException>;
			}
			export class SQLiteTransactionListener implements android.database.sqlite.ISQLiteTransactionListener {
				constructor(implementation: android.database.sqlite.ISQLiteTransactionListener);
				onRollback(): void;
				onCommit(): void;
				onBegin(): void;
			}
			export class SQLiteOpenHelper extends java.lang.Object {
				constructor(arg1: android.content.Context, arg2: java.lang.String, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: number);
				constructor(arg1: android.content.Context, arg2: string, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: number);
				constructor(arg1: android.content.Context, arg2: java.lang.String, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: number, arg5: android.database.IDatabaseErrorHandler);
				constructor(arg1: android.content.Context, arg2: string, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: number, arg5: android.database.IDatabaseErrorHandler);
				static class: java.lang.Class<android.database.sqlite.SQLiteOpenHelper>;
				onCreate(arg1: android.database.sqlite.SQLiteDatabase): void;
				setWriteAheadLoggingEnabled(arg1: boolean): void;
				onConfigure(arg1: android.database.sqlite.SQLiteDatabase): void;
				onOpen(arg1: android.database.sqlite.SQLiteDatabase): void;
				onUpgrade(arg1: android.database.sqlite.SQLiteDatabase, arg2: number, arg3: number): void;
				onDowngrade(arg1: android.database.sqlite.SQLiteDatabase, arg2: number, arg3: number): void;
				getReadableDatabase(): android.database.sqlite.SQLiteDatabase;
				getDatabaseName(): string;
				getWritableDatabase(): android.database.sqlite.SQLiteDatabase;
				close(): void;
			}
			export class SQLiteTableLockedException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteTableLockedException>;
			}
			export class SQLiteProgram extends android.database.sqlite.SQLiteClosable {
				static class: java.lang.Class<android.database.sqlite.SQLiteProgram>;
				bindDouble(arg1: number, arg2: native.Double): void;
				bindDouble(arg1: number, arg2: number): void;
				bindString(arg1: number, arg2: java.lang.String): void;
				bindString(arg1: number, arg2: string): void;
				bindBlob(arg1: number, arg2: native.Array<native.Byte>): void;
				bindLong(arg1: number, arg2: native.Long): void;
				bindNull(arg1: number): void;
				clearBindings(): void;
				getUniqueId(): number;
				bindAllArgsAsStrings(arg1: native.Array<java.lang.String>): void;
			}
			export class SQLiteDiskIOException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteDiskIOException>;
			}
			export class SQLiteStatement extends android.database.sqlite.SQLiteProgram {
				static class: java.lang.Class<android.database.sqlite.SQLiteStatement>;
				executeInsert(): any;
				simpleQueryForLong(): any;
				simpleQueryForString(): string;
				executeUpdateDelete(): number;
				simpleQueryForBlobFileDescriptor(): android.os.ParcelFileDescriptor;
				toString(): string;
				execute(): void;
			}
			export class SQLiteDatabase extends android.database.sqlite.SQLiteClosable {
				static CONFLICT_ROLLBACK: number;
				static CONFLICT_ABORT: number;
				static CONFLICT_FAIL: number;
				static CONFLICT_IGNORE: number;
				static CONFLICT_REPLACE: number;
				static CONFLICT_NONE: number;
				static SQLITE_MAX_LIKE_PATTERN_LENGTH: number;
				static OPEN_READWRITE: number;
				static OPEN_READONLY: number;
				static NO_LOCALIZED_COLLATORS: number;
				static CREATE_IF_NECESSARY: number;
				static ENABLE_WRITE_AHEAD_LOGGING: number;
				static MAX_SQL_CACHE_SIZE: number;
				static class: java.lang.Class<android.database.sqlite.SQLiteDatabase>;
				Version: number;
				setVersion(arg1: number): void;
				static openOrCreateDatabase(arg1: java.io.File, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
				static openOrCreateDatabase(arg1: java.lang.String, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg3: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
				static openOrCreateDatabase(arg1: string, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg3: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
				static openOrCreateDatabase(arg1: java.lang.String, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
				static openOrCreateDatabase(arg1: string, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
				static deleteDatabase(arg1: java.io.File): boolean;
				beginTransactionWithListener(arg1: android.database.sqlite.ISQLiteTransactionListener): void;
				yieldIfContendedSafely(arg1: native.Long): boolean;
				yieldIfContendedSafely(): boolean;
				isDbLockedByCurrentThread(): boolean;
				isWriteAheadLoggingEnabled(): boolean;
				beginTransactionNonExclusive(): void;
				isDbLockedByOtherThreads(): boolean;
				disableWriteAheadLogging(): void;
				setTransactionSuccessful(): void;
				enableWriteAheadLogging(): boolean;
				static openDatabase(arg1: java.lang.String, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg3: number, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
				static openDatabase(arg1: string, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg3: number, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
				static openDatabase(arg1: java.lang.String, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg3: number): android.database.sqlite.SQLiteDatabase;
				static openDatabase(arg1: string, arg2: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg3: number): android.database.sqlite.SQLiteDatabase;
				inTransaction(): boolean;
				static releaseMemory(): number;
				setPageSize(arg1: native.Long): void;
				static findEditTable(arg1: java.lang.String): string;
				static findEditTable(arg1: string): string;
				getPageSize(): any;
				rawQuery(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: android.os.CancellationSignal): android.database.ICursor;
				rawQuery(arg1: string, arg2: native.Array<java.lang.String>, arg3: android.os.CancellationSignal): android.database.ICursor;
				rawQuery(arg1: java.lang.String, arg2: native.Array<java.lang.String>): android.database.ICursor;
				rawQuery(arg1: string, arg2: native.Array<java.lang.String>): android.database.ICursor;
				needUpgrade(arg1: number): boolean;
				insertOrThrow(arg1: java.lang.String, arg2: java.lang.String, arg3: android.content.ContentValues): any;
				insertOrThrow(arg1: string, arg2: string, arg3: android.content.ContentValues): any;
				execSQL(arg1: java.lang.String, arg2: native.Array<any>): void;
				execSQL(arg1: string, arg2: native.Array<any>): void;
				execSQL(arg1: java.lang.String): void;
				execSQL(arg1: string): void;
				setMaxSqlCacheSize(arg1: number): void;
				getAttachedDbs(): java.util.IList<android.util.Pair<string, string>>;
				isDatabaseIntegrityOk(): boolean;
				updateWithOnConflict(arg1: java.lang.String, arg2: android.content.ContentValues, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: number): number;
				updateWithOnConflict(arg1: string, arg2: android.content.ContentValues, arg3: string, arg4: native.Array<java.lang.String>, arg5: number): number;
				beginTransaction(): void;
				yieldIfContended(): boolean;
				queryWithFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: boolean, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: native.Array<java.lang.String>, arg7: java.lang.String, arg8: java.lang.String, arg9: java.lang.String, arg10: java.lang.String, arg11: android.os.CancellationSignal): android.database.ICursor;
				queryWithFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: boolean, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: native.Array<java.lang.String>, arg7: string, arg8: string, arg9: string, arg10: string, arg11: android.os.CancellationSignal): android.database.ICursor;
				queryWithFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: boolean, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: native.Array<java.lang.String>, arg7: java.lang.String, arg8: java.lang.String, arg9: java.lang.String, arg10: java.lang.String): android.database.ICursor;
				queryWithFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: boolean, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: native.Array<java.lang.String>, arg7: string, arg8: string, arg9: string, arg10: string): android.database.ICursor;
				setLockingEnabled(arg1: boolean): void;
				markTableSyncable(arg1: java.lang.String, arg2: java.lang.String): void;
				markTableSyncable(arg1: string, arg2: string): void;
				markTableSyncable(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
				markTableSyncable(arg1: string, arg2: string, arg3: string): void;
				rawQueryWithFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: java.lang.String, arg5: android.os.CancellationSignal): android.database.ICursor;
				rawQueryWithFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: string, arg3: native.Array<java.lang.String>, arg4: string, arg5: android.os.CancellationSignal): android.database.ICursor;
				rawQueryWithFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: java.lang.String): android.database.ICursor;
				rawQueryWithFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: string, arg3: native.Array<java.lang.String>, arg4: string): android.database.ICursor;
				replaceOrThrow(arg1: java.lang.String, arg2: java.lang.String, arg3: android.content.ContentValues): any;
				replaceOrThrow(arg1: string, arg2: string, arg3: android.content.ContentValues): any;
				endTransaction(): void;
				getSyncedTables(): java.util.IMap<string, string>;
				compileStatement(arg1: java.lang.String): android.database.sqlite.SQLiteStatement;
				compileStatement(arg1: string): android.database.sqlite.SQLiteStatement;
				insertWithOnConflict(arg1: java.lang.String, arg2: java.lang.String, arg3: android.content.ContentValues, arg4: number): any;
				insertWithOnConflict(arg1: string, arg2: string, arg3: android.content.ContentValues, arg4: number): any;
				beginTransactionWithListenerNonExclusive(arg1: android.database.sqlite.ISQLiteTransactionListener): void;
				setForeignKeyConstraintsEnabled(arg1: boolean): void;
				toString(): string;
				replace(arg1: java.lang.String, arg2: java.lang.String, arg3: android.content.ContentValues): any;
				replace(arg1: string, arg2: string, arg3: android.content.ContentValues): any;
				delete(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<java.lang.String>): number;
				delete(arg1: string, arg2: string, arg3: native.Array<java.lang.String>): number;
				insert(arg1: java.lang.String, arg2: java.lang.String, arg3: android.content.ContentValues): any;
				insert(arg1: string, arg2: string, arg3: android.content.ContentValues): any;
				isReadOnly(): boolean;
				getPath(): string;
				isOpen(): boolean;
				static create(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
				query(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String, arg8: java.lang.String): android.database.ICursor;
				query(arg1: string, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: string, arg7: string, arg8: string): android.database.ICursor;
				query(arg1: boolean, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: java.lang.String, arg5: native.Array<java.lang.String>, arg6: java.lang.String, arg7: java.lang.String, arg8: java.lang.String, arg9: java.lang.String): android.database.ICursor;
				query(arg1: boolean, arg2: string, arg3: native.Array<java.lang.String>, arg4: string, arg5: native.Array<java.lang.String>, arg6: string, arg7: string, arg8: string, arg9: string): android.database.ICursor;
				query(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String): android.database.ICursor;
				query(arg1: string, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: string, arg7: string): android.database.ICursor;
				query(arg1: boolean, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: java.lang.String, arg5: native.Array<java.lang.String>, arg6: java.lang.String, arg7: java.lang.String, arg8: java.lang.String, arg9: java.lang.String, arg10: android.os.CancellationSignal): android.database.ICursor;
				query(arg1: boolean, arg2: string, arg3: native.Array<java.lang.String>, arg4: string, arg5: native.Array<java.lang.String>, arg6: string, arg7: string, arg8: string, arg9: string, arg10: android.os.CancellationSignal): android.database.ICursor;
				getMaximumSize(): any;
				update(arg1: java.lang.String, arg2: android.content.ContentValues, arg3: java.lang.String, arg4: native.Array<java.lang.String>): number;
				update(arg1: string, arg2: android.content.ContentValues, arg3: string, arg4: native.Array<java.lang.String>): number;
				setLocale(arg1: java.util.Locale): void;
				setMaximumSize(arg1: native.Long): any;
				getVersion(): number;
			}
			export module SQLiteDatabase {
				export class CursorFactory implements android.database.sqlite.SQLiteDatabase.ICursorFactory {
					constructor(implementation: android.database.sqlite.SQLiteDatabase.ICursorFactory);
					newCursor(arg1: android.database.sqlite.SQLiteDatabase, arg2: android.database.sqlite.ISQLiteCursorDriver, arg3: java.lang.String, arg4: android.database.sqlite.SQLiteQuery): android.database.ICursor;
					newCursor(arg1: android.database.sqlite.SQLiteDatabase, arg2: android.database.sqlite.ISQLiteCursorDriver, arg3: string, arg4: android.database.sqlite.SQLiteQuery): android.database.ICursor;
				}
				export interface ICursorFactory {
					newCursor(arg1: android.database.sqlite.SQLiteDatabase, arg2: android.database.sqlite.ISQLiteCursorDriver, arg3: string, arg4: android.database.sqlite.SQLiteQuery): android.database.ICursor;
				}
			}
			export class SQLiteCantOpenDatabaseException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteCantOpenDatabaseException>;
			}
			export class SQLiteQuery extends android.database.sqlite.SQLiteProgram {
				static class: java.lang.Class<android.database.sqlite.SQLiteQuery>;
				toString(): string;
			}
			export class SQLiteClosable extends java.lang.Object implements java.io.ICloseable {
				constructor();
				static class: java.lang.Class<android.database.sqlite.SQLiteClosable>;
				releaseReferenceFromContainer(): void;
				releaseReference(): void;
				acquireReference(): void;
				close(): void;
			}
			export class SQLiteReadOnlyDatabaseException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteReadOnlyDatabaseException>;
			}
			export interface ISQLiteTransactionListener {
				onRollback(): void;
				onCommit(): void;
				onBegin(): void;
			}
			export class SQLiteException extends android.database.SQLException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				static class: java.lang.Class<android.database.sqlite.SQLiteException>;
			}
			export class SQLiteMisuseException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteMisuseException>;
			}
			export class SQLiteCursorDriver implements android.database.sqlite.ISQLiteCursorDriver {
				constructor(implementation: android.database.sqlite.ISQLiteCursorDriver);
				cursorClosed(): void;
				cursorDeactivated(): void;
				cursorRequeried(arg1: android.database.ICursor): void;
				setBindArguments(arg1: native.Array<java.lang.String>): void;
				query(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: native.Array<java.lang.String>): android.database.ICursor;
			}
			export class SQLiteConstraintException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteConstraintException>;
			}
			export class SQLiteAccessPermException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteAccessPermException>;
			}
			export class SQLiteBindOrColumnIndexOutOfRangeException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException>;
			}
			export class SQLiteDoneException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteDoneException>;
			}
			export class SQLiteFullException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteFullException>;
			}
			export class SQLiteAbortException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteAbortException>;
			}
			export class SQLiteBlobTooBigException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteBlobTooBigException>;
			}
			export class SQLiteOutOfMemoryException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteOutOfMemoryException>;
			}
			export interface ISQLiteCursorDriver {
				cursorClosed(): void;
				cursorDeactivated(): void;
				cursorRequeried(arg1: android.database.ICursor): void;
				setBindArguments(arg1: native.Array<java.lang.String>): void;
				query(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg2: native.Array<java.lang.String>): android.database.ICursor;
			}
			export class SQLiteDatatypeMismatchException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteDatatypeMismatchException>;
			}
			export class SQLiteCursor extends android.database.AbstractWindowedCursor {
				constructor(arg1: android.database.sqlite.SQLiteDatabase, arg2: android.database.sqlite.ISQLiteCursorDriver, arg3: java.lang.String, arg4: android.database.sqlite.SQLiteQuery);
				constructor(arg1: android.database.sqlite.SQLiteDatabase, arg2: android.database.sqlite.ISQLiteCursorDriver, arg3: string, arg4: android.database.sqlite.SQLiteQuery);
				constructor(arg1: android.database.sqlite.ISQLiteCursorDriver, arg2: java.lang.String, arg3: android.database.sqlite.SQLiteQuery);
				constructor(arg1: android.database.sqlite.ISQLiteCursorDriver, arg2: string, arg3: android.database.sqlite.SQLiteQuery);
				static class: java.lang.Class<android.database.sqlite.SQLiteCursor>;
				requery(): boolean;
				getColumnNames(): native.Array<java.lang.String>;
				onMove(arg1: number, arg2: number): boolean;
				setWindow(arg1: android.database.CursorWindow): void;
				getDatabase(): android.database.sqlite.SQLiteDatabase;
				setSelectionArguments(arg1: native.Array<java.lang.String>): void;
				close(): void;
				deactivate(): void;
				getColumnIndex(arg1: java.lang.String): number;
				getColumnIndex(arg1: string): number;
				getCount(): number;
			}
			export class SQLiteDatabaseCorruptException extends android.database.sqlite.SQLiteException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.database.sqlite.SQLiteDatabaseCorruptException>;
			}
			export class SQLiteQueryBuilder extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.database.sqlite.SQLiteQueryBuilder>;
				Tables: string;
				appendWhereEscapeString(arg1: java.lang.String): void;
				appendWhereEscapeString(arg1: string): void;
				setTables(arg1: java.lang.String): void;
				setTables(arg1: string): void;
				appendWhere(arg1: java.lang.ICharSequence): void;
				appendWhere(arg1: string): void;
				setStrict(arg1: boolean): void;
				static appendColumns(arg1: java.lang.StringBuilder, arg2: native.Array<java.lang.String>): void;
				setDistinct(arg1: boolean): void;
				buildQuery(arg1: native.Array<java.lang.String>, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String): string;
				buildQuery(arg1: native.Array<java.lang.String>, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string): string;
				buildQuery(arg1: native.Array<java.lang.String>, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String): string;
				buildQuery(arg1: native.Array<java.lang.String>, arg2: string, arg3: native.Array<java.lang.String>, arg4: string, arg5: string, arg6: string, arg7: string): string;
				static buildQueryString(arg1: boolean, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String, arg8: java.lang.String): string;
				static buildQueryString(arg1: boolean, arg2: string, arg3: native.Array<java.lang.String>, arg4: string, arg5: string, arg6: string, arg7: string, arg8: string): string;
				buildUnionQuery(arg1: native.Array<java.lang.String>, arg2: java.lang.String, arg3: java.lang.String): string;
				buildUnionQuery(arg1: native.Array<java.lang.String>, arg2: string, arg3: string): string;
				setCursorFactory(arg1: android.database.sqlite.SQLiteDatabase.ICursorFactory): void;
				buildUnionSubQuery(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: java.util.ISet<string>, arg4: number, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String, arg8: java.lang.String): string;
				buildUnionSubQuery(arg1: string, arg2: native.Array<java.lang.String>, arg3: java.util.ISet<string>, arg4: number, arg5: string, arg6: string, arg7: string, arg8: string): string;
				buildUnionSubQuery(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: java.util.ISet<string>, arg4: number, arg5: java.lang.String, arg6: java.lang.String, arg7: native.Array<java.lang.String>, arg8: java.lang.String, arg9: java.lang.String): string;
				buildUnionSubQuery(arg1: string, arg2: native.Array<java.lang.String>, arg3: java.util.ISet<string>, arg4: number, arg5: string, arg6: string, arg7: native.Array<java.lang.String>, arg8: string, arg9: string): string;
				setProjectionMap(arg1: java.util.IMap<string, string>): void;
				query(arg1: android.database.sqlite.SQLiteDatabase, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String, arg8: java.lang.String, arg9: android.os.CancellationSignal): android.database.ICursor;
				query(arg1: android.database.sqlite.SQLiteDatabase, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: string, arg7: string, arg8: string, arg9: android.os.CancellationSignal): android.database.ICursor;
				query(arg1: android.database.sqlite.SQLiteDatabase, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String): android.database.ICursor;
				query(arg1: android.database.sqlite.SQLiteDatabase, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: string, arg7: string): android.database.ICursor;
				query(arg1: android.database.sqlite.SQLiteDatabase, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String, arg8: java.lang.String): android.database.ICursor;
				query(arg1: android.database.sqlite.SQLiteDatabase, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: string, arg7: string, arg8: string): android.database.ICursor;
				getTables(): string;
			}
		}
		export class Observable<T> extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.database.Observable<any>>;
			unregisterAll(): void;
			registerObserver(arg1: T): void;
			unregisterObserver(arg1: T): void;
		}
		export class CharArrayBuffer extends java.lang.Object {
			constructor(arg1: number);
			constructor(arg1: native.Array<string>);
			data: native.Array<string>;
			sizeCopied: number;
			static class: java.lang.Class<android.database.CharArrayBuffer>;
		}
		export class DatabaseErrorHandler implements android.database.IDatabaseErrorHandler {
			constructor(implementation: android.database.IDatabaseErrorHandler);
			onCorruption(arg1: android.database.sqlite.SQLiteDatabase): void;
		}
		export interface IDatabaseErrorHandler {
			onCorruption(arg1: android.database.sqlite.SQLiteDatabase): void;
		}
		export class DataSetObserver extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.database.DataSetObserver>;
			onInvalidated(): void;
			onChanged(): void;
		}
		export class MatrixCursor extends android.database.AbstractCursor {
			constructor(arg1: native.Array<java.lang.String>);
			constructor(arg1: native.Array<java.lang.String>, arg2: number);
			static class: java.lang.Class<android.database.MatrixCursor>;
			getBlob(arg1: number): native.Array<native.Byte>;
			getColumnNames(): native.Array<java.lang.String>;
			newRow(): android.database.MatrixCursor.RowBuilder;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			isNull(arg1: number): boolean;
			addRow(arg1: native.Array<any>): void;
			addRow(arg1: java.lang.IIterable<any>): void;
			getCount(): number;
		}
		export module MatrixCursor {
			export class RowBuilder extends java.lang.Object {
				static class: java.lang.Class<android.database.MatrixCursor.RowBuilder>;
				add(arg1: any): android.database.MatrixCursor.RowBuilder;
			}
		}
		export class ContentObservable extends android.database.Observable<android.database.ContentObserver> {
			constructor();
			static class: java.lang.Class<android.database.ContentObservable>;
			notifyChange(arg1: boolean): void;
			registerObserver(arg1: any): void;
			registerObserver(arg1: android.database.ContentObserver): void;
			dispatchChange(arg1: boolean, arg2: android.net.Uri): void;
			dispatchChange(arg1: boolean): void;
		}
		export class CursorWrapper extends java.lang.Object implements android.database.ICursor {
			constructor(arg1: android.database.ICursor);
			static class: java.lang.Class<android.database.CursorWrapper>;
			getBlob(arg1: number): native.Array<native.Byte>;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getExtras(): android.os.Bundle;
			moveToLast(): boolean;
			moveToFirst(): boolean;
			moveToNext(): boolean;
			requery(): boolean;
			respond(arg1: android.os.Bundle): android.os.Bundle;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			getWantsAllOnMoveCalls(): boolean;
			registerContentObserver(arg1: android.database.ContentObserver): void;
			copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
			moveToPrevious(): boolean;
			getColumnIndexOrThrow(arg1: java.lang.String): number;
			getColumnIndexOrThrow(arg1: string): number;
			setNotificationUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): void;
			moveToPosition(arg1: number): boolean;
			getColumnNames(): native.Array<java.lang.String>;
			getWrappedCursor(): android.database.ICursor;
			close(): void;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			move(arg1: number): boolean;
			isNull(arg1: number): boolean;
			getColumnCount(): number;
			getPosition(): number;
			isClosed(): boolean;
			deactivate(): void;
			getColumnIndex(arg1: java.lang.String): number;
			getColumnIndex(arg1: string): number;
			getColumnName(arg1: number): string;
			getCount(): number;
		}
		export class SQLException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			static class: java.lang.Class<android.database.SQLException>;
		}
		export class StaleDataException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.database.StaleDataException>;
		}
		export class AbstractWindowedCursor extends android.database.AbstractCursor {
			constructor();
			static class: java.lang.Class<android.database.AbstractWindowedCursor>;
			Window: android.database.CursorWindow;
			getBlob(arg1: number): native.Array<native.Byte>;
			copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
			isString(arg1: number): boolean;
			isLong(arg1: number): boolean;
			isFloat(arg1: number): boolean;
			setWindow(arg1: android.database.CursorWindow): void;
			hasWindow(): boolean;
			isBlob(arg1: number): boolean;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			getWindow(): android.database.CursorWindow;
			isNull(arg1: number): boolean;
		}
		export class AbstractCursor extends java.lang.Object implements android.database.ICrossProcessCursor {
			constructor();
			static class: java.lang.Class<android.database.AbstractCursor>;
			getBlob(arg1: number): native.Array<native.Byte>;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			unregisterDataSetObserver(arg1: android.database.DataSetObserver): void;
			registerDataSetObserver(arg1: android.database.DataSetObserver): void;
			getExtras(): android.os.Bundle;
			moveToLast(): boolean;
			moveToFirst(): boolean;
			moveToNext(): boolean;
			requery(): boolean;
			respond(arg1: android.os.Bundle): android.os.Bundle;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			getWantsAllOnMoveCalls(): boolean;
			registerContentObserver(arg1: android.database.ContentObserver): void;
			copyStringToBuffer(arg1: number, arg2: android.database.CharArrayBuffer): void;
			moveToPrevious(): boolean;
			getColumnIndexOrThrow(arg1: java.lang.String): number;
			getColumnIndexOrThrow(arg1: string): number;
			setNotificationUri(arg1: android.content.ContentResolver, arg2: android.net.Uri): void;
			moveToPosition(arg1: number): boolean;
			getColumnNames(): native.Array<java.lang.String>;
			onMove(arg1: number, arg2: number): boolean;
			fillWindow(arg1: number, arg2: android.database.CursorWindow): void;
			getNotificationUri(): android.net.Uri;
			close(): void;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getType(arg1: number): number;
			getString(arg1: number): string;
			move(arg1: number): boolean;
			getWindow(): android.database.CursorWindow;
			isNull(arg1: number): boolean;
			getColumnCount(): number;
			getPosition(): number;
			isClosed(): boolean;
			deactivate(): void;
			getColumnIndex(arg1: java.lang.String): number;
			getColumnIndex(arg1: string): number;
			getColumnName(arg1: number): string;
			getCount(): number;
		}
		export module AbstractCursor {
			export class SelfContentObserver extends android.database.ContentObserver {
				constructor(arg1: android.database.AbstractCursor);
				static class: java.lang.Class<android.database.AbstractCursor.SelfContentObserver>;
				deliverSelfNotifications(): boolean;
				onChange(arg1: boolean): void;
				onChange(arg1: boolean, arg2: android.net.Uri): void;
			}
		}
		export class CursorJoiner extends java.lang.Object implements java.util.IIterator<android.database.CursorJoiner.Result>, java.lang.IIterable<android.database.CursorJoiner.Result> {
			constructor(arg1: android.database.ICursor, arg2: native.Array<java.lang.String>, arg3: android.database.ICursor, arg4: native.Array<java.lang.String>);
			static class: java.lang.Class<android.database.CursorJoiner>;
			hasNext(): boolean;
			iterator(): java.util.IIterator<android.database.CursorJoiner.Result>;
			next(): android.database.CursorJoiner.Result;
			remove(): void;
		}
		export module CursorJoiner {
			export enum Result {
				BOTH,
				LEFT,
				RIGHT
			}
			export module Result {
				export function valueOf(arg1: java.lang.String): android.database.CursorJoiner.Result;
				export function valueOf(arg1: string): android.database.CursorJoiner.Result;
				export function values(): native.Array<android.database.CursorJoiner.Result>;
			}
		}
		export class CursorIndexOutOfBoundsException extends java.lang.IndexOutOfBoundsException {
			constructor(arg1: number, arg2: number);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.database.CursorIndexOutOfBoundsException>;
		}
	}
	export module renderscript {
		export class ScriptIntrinsicConvolve5x5 extends android.renderscript.ScriptIntrinsic {
			static class: java.lang.Class<android.renderscript.ScriptIntrinsicConvolve5x5>;
			getFieldID_Input(): android.renderscript.Script.FieldID;
			setCoefficients(arg1: native.Array<native.Float>): void;
			forEach(arg1: android.renderscript.Allocation): void;
			getKernelID(): android.renderscript.Script.KernelID;
			static create(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element): android.renderscript.ScriptIntrinsicConvolve5x5;
			setInput(arg1: android.renderscript.Allocation): void;
		}
		export class RenderScriptGL extends android.renderscript.RenderScript {
			constructor(arg1: android.content.Context, arg2: android.renderscript.RenderScriptGL.SurfaceConfig);
			static class: java.lang.Class<android.renderscript.RenderScriptGL>;
			pause(): void;
			setSurfaceTexture(arg1: android.graphics.SurfaceTexture, arg2: number, arg3: number): void;
			bindProgramRaster(arg1: android.renderscript.ProgramRaster): void;
			bindProgramStore(arg1: android.renderscript.ProgramStore): void;
			bindRootScript(arg1: android.renderscript.Script): void;
			bindProgramFragment(arg1: android.renderscript.ProgramFragment): void;
			bindProgramVertex(arg1: android.renderscript.ProgramVertex): void;
			setSurface(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number): void;
			resume(): void;
			getHeight(): number;
			getWidth(): number;
		}
		export module RenderScriptGL {
			export class SurfaceConfig extends java.lang.Object {
				constructor();
				constructor(arg1: android.renderscript.RenderScriptGL.SurfaceConfig);
				static class: java.lang.Class<android.renderscript.RenderScriptGL.SurfaceConfig>;
				setAlpha(arg1: number, arg2: number): void;
				setDepth(arg1: number, arg2: number): void;
				setColor(arg1: number, arg2: number): void;
				setSamples(arg1: number, arg2: number, arg3: native.Float): void;
			}
		}
		export class RSSurfaceView extends android.view.SurfaceView implements android.view.SurfaceHolder.ICallback {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.renderscript.RSSurfaceView>;
			RenderScriptGL: android.renderscript.RenderScriptGL;
			pause(): void;
			surfaceCreated(arg1: android.view.ISurfaceHolder): void;
			surfaceChanged(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number, arg4: number): void;
			surfaceDestroyed(arg1: android.view.ISurfaceHolder): void;
			destroyRenderScriptGL(): void;
			setRenderScriptGL(arg1: android.renderscript.RenderScriptGL): void;
			getRenderScriptGL(): android.renderscript.RenderScriptGL;
			createRenderScriptGL(arg1: android.renderscript.RenderScriptGL.SurfaceConfig): android.renderscript.RenderScriptGL;
			resume(): void;
		}
		export class Float4 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float);
			x: native.Float;
			y: native.Float;
			z: native.Float;
			w: native.Float;
			static class: java.lang.Class<android.renderscript.Float4>;
			private __android_renderscript_Float4: any;
		}
		export class Matrix2f extends java.lang.Object {
			constructor();
			constructor(arg1: native.Array<native.Float>);
			static class: java.lang.Class<android.renderscript.Matrix2f>;
			loadIdentity(): void;
			loadScale(arg1: native.Float, arg2: native.Float): void;
			transpose(): void;
			loadRotate(arg1: native.Float): void;
			loadMultiply(arg1: android.renderscript.Matrix2f, arg2: android.renderscript.Matrix2f): void;
			get(arg1: number, arg2: number): number;
			getArray(): native.Array<native.Float>;
			load(arg1: android.renderscript.Matrix2f): void;
			set(arg1: number, arg2: number, arg3: native.Float): void;
			rotate(arg1: native.Float): void;
			scale(arg1: native.Float, arg2: native.Float): void;
			multiply(arg1: android.renderscript.Matrix2f): void;
		}
		export class Byte2 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Byte, arg2: native.Byte);
			x: native.Byte;
			y: native.Byte;
			static class: java.lang.Class<android.renderscript.Byte2>;
			private __android_renderscript_Byte2: any;
		}
		export class Byte3 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Byte, arg2: native.Byte, arg3: native.Byte);
			x: native.Byte;
			y: native.Byte;
			z: native.Byte;
			static class: java.lang.Class<android.renderscript.Byte3>;
			private __android_renderscript_Byte3: any;
		}
		export class ScriptGroup extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.ScriptGroup>;
			execute(): void;
			setInput(arg1: android.renderscript.Script.KernelID, arg2: android.renderscript.Allocation): void;
			setOutput(arg1: android.renderscript.Script.KernelID, arg2: android.renderscript.Allocation): void;
		}
		export module ScriptGroup {
			export class Builder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript);
				static class: java.lang.Class<android.renderscript.ScriptGroup.Builder>;
				addConnection(arg1: android.renderscript.Type, arg2: android.renderscript.Script.KernelID, arg3: android.renderscript.Script.FieldID): android.renderscript.ScriptGroup.Builder;
				addConnection(arg1: android.renderscript.Type, arg2: android.renderscript.Script.KernelID, arg3: android.renderscript.Script.KernelID): android.renderscript.ScriptGroup.Builder;
				addKernel(arg1: android.renderscript.Script.KernelID): android.renderscript.ScriptGroup.Builder;
				create(): android.renderscript.ScriptGroup;
			}
		}
		export class Float3 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float);
			x: native.Float;
			y: native.Float;
			z: native.Float;
			static class: java.lang.Class<android.renderscript.Float3>;
			private __android_renderscript_Float3: any;
		}
		export class Float2 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Float, arg2: native.Float);
			x: native.Float;
			y: native.Float;
			static class: java.lang.Class<android.renderscript.Float2>;
			private __android_renderscript_Float2: any;
		}
		export class Program extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.Program>;
			getConstantCount(): number;
			getTextureType(arg1: number): android.renderscript.Program.TextureType;
			getTextureCount(): number;
			getTextureName(arg1: number): string;
			bindConstants(arg1: android.renderscript.Allocation, arg2: number): void;
			bindTexture(arg1: android.renderscript.Allocation, arg2: number): void;
			bindSampler(arg1: android.renderscript.Sampler, arg2: number): void;
			getConstant(arg1: number): android.renderscript.Type;
		}
		export module Program {
			export enum TextureType {
				TEXTURE_2D,
				TEXTURE_CUBE
			}
			export module TextureType {
				export function valueOf(arg1: java.lang.String): android.renderscript.Program.TextureType;
				export function valueOf(arg1: string): android.renderscript.Program.TextureType;
				export function values(): native.Array<android.renderscript.Program.TextureType>;
			}
			export class BaseProgramBuilder extends java.lang.Object {
				static class: java.lang.Class<android.renderscript.Program.BaseProgramBuilder>;
				setShader(arg1: android.content.res.Resources, arg2: number): android.renderscript.Program.BaseProgramBuilder;
				setShader(arg1: java.lang.String): android.renderscript.Program.BaseProgramBuilder;
				setShader(arg1: string): android.renderscript.Program.BaseProgramBuilder;
				addConstant(arg1: android.renderscript.Type): android.renderscript.Program.BaseProgramBuilder;
				addTexture(arg1: android.renderscript.Program.TextureType): android.renderscript.Program.BaseProgramBuilder;
				addTexture(arg1: android.renderscript.Program.TextureType, arg2: java.lang.String): android.renderscript.Program.BaseProgramBuilder;
				addTexture(arg1: android.renderscript.Program.TextureType, arg2: string): android.renderscript.Program.BaseProgramBuilder;
				getCurrentTextureIndex(): number;
				getCurrentConstantIndex(): number;
			}
		}
		export class Byte4 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Byte, arg2: native.Byte, arg3: native.Byte, arg4: native.Byte);
			x: native.Byte;
			y: native.Byte;
			z: native.Byte;
			w: native.Byte;
			static class: java.lang.Class<android.renderscript.Byte4>;
			private __android_renderscript_Byte4: any;
		}
		export class ProgramFragment extends android.renderscript.Program {
			static class: java.lang.Class<android.renderscript.ProgramFragment>;
		}
		export module ProgramFragment {
			export class Builder extends android.renderscript.Program.BaseProgramBuilder {
				constructor(arg1: android.renderscript.RenderScript);
				static class: java.lang.Class<android.renderscript.ProgramFragment.Builder>;
				create(): android.renderscript.ProgramFragment;
			}
		}
		export class Long4 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Long, arg2: native.Long, arg3: native.Long, arg4: native.Long);
			x: native.Long;
			y: native.Long;
			z: native.Long;
			w: native.Long;
			static class: java.lang.Class<android.renderscript.Long4>;
		}
		export class Long3 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Long, arg2: native.Long, arg3: native.Long);
			x: native.Long;
			y: native.Long;
			z: native.Long;
			static class: java.lang.Class<android.renderscript.Long3>;
		}
		export class Long2 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Long, arg2: native.Long);
			x: native.Long;
			y: native.Long;
			static class: java.lang.Class<android.renderscript.Long2>;
		}
		export class RSIllegalArgumentException extends android.renderscript.RSRuntimeException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.renderscript.RSIllegalArgumentException>;
		}
		export class ScriptIntrinsicBlend extends android.renderscript.ScriptIntrinsic {
			static class: java.lang.Class<android.renderscript.ScriptIntrinsicBlend>;
			getKernelIDSrc(): android.renderscript.Script.KernelID;
			getKernelIDDst(): android.renderscript.Script.KernelID;
			forEachSrcOver(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			getKernelIDSrcOver(): android.renderscript.Script.KernelID;
			forEachDstOver(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			getKernelIDClear(): android.renderscript.Script.KernelID;
			getKernelIDDstOver(): android.renderscript.Script.KernelID;
			getKernelIDXor(): android.renderscript.Script.KernelID;
			getKernelIDDstAtop(): android.renderscript.Script.KernelID;
			getKernelIDDstIn(): android.renderscript.Script.KernelID;
			getKernelIDMultiply(): android.renderscript.Script.KernelID;
			getKernelIDDstOut(): android.renderscript.Script.KernelID;
			getKernelIDSrcOut(): android.renderscript.Script.KernelID;
			forEachMultiply(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			getKernelIDSrcIn(): android.renderscript.Script.KernelID;
			getKernelIDSubtract(): android.renderscript.Script.KernelID;
			getKernelIDAdd(): android.renderscript.Script.KernelID;
			forEachSrcAtop(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			getKernelIDSrcAtop(): android.renderscript.Script.KernelID;
			forEachDstAtop(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachSubtract(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachClear(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachSrc(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachDst(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachSrcIn(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachXor(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachDstOut(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachDstIn(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachSrcOut(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			forEachAdd(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			static create(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element): android.renderscript.ScriptIntrinsicBlend;
		}
		export class ScriptIntrinsicColorMatrix extends android.renderscript.ScriptIntrinsic {
			static class: java.lang.Class<android.renderscript.ScriptIntrinsicColorMatrix>;
			setColorMatrix(arg1: android.renderscript.Matrix4f): void;
			setColorMatrix(arg1: android.renderscript.Matrix3f): void;
			forEach(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			getKernelID(): android.renderscript.Script.KernelID;
			setYUVtoRGB(): void;
			setRGBtoYUV(): void;
			setGreyscale(): void;
			static create(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element): android.renderscript.ScriptIntrinsicColorMatrix;
		}
		export class FieldPacker extends java.lang.Object {
			constructor(arg1: number);
			static class: java.lang.Class<android.renderscript.FieldPacker>;
			addU8(arg1: native.Short): void;
			addU8(arg1: android.renderscript.Short3): void;
			addU8(arg1: android.renderscript.Short4): void;
			addU8(arg1: android.renderscript.Short2): void;
			addI8(arg1: android.renderscript.Byte2): void;
			addI8(arg1: android.renderscript.Byte4): void;
			addI8(arg1: android.renderscript.Byte3): void;
			addI8(arg1: native.Byte): void;
			addU32(arg1: android.renderscript.Long3): void;
			addU32(arg1: native.Long): void;
			addU32(arg1: android.renderscript.Long2): void;
			addU32(arg1: android.renderscript.Long4): void;
			addU64(arg1: android.renderscript.Long4): void;
			addU64(arg1: android.renderscript.Long3): void;
			addU64(arg1: native.Long): void;
			addU64(arg1: android.renderscript.Long2): void;
			addI32(arg1: number): void;
			addI32(arg1: android.renderscript.Int3): void;
			addI32(arg1: android.renderscript.Int2): void;
			addI32(arg1: android.renderscript.Int4): void;
			addI16(arg1: android.renderscript.Short4): void;
			addI16(arg1: android.renderscript.Short2): void;
			addI16(arg1: android.renderscript.Short3): void;
			addI16(arg1: native.Short): void;
			addF32(arg1: android.renderscript.Float3): void;
			addF32(arg1: android.renderscript.Float2): void;
			addF32(arg1: native.Float): void;
			addF32(arg1: android.renderscript.Float4): void;
			addU16(arg1: android.renderscript.Int2): void;
			addU16(arg1: android.renderscript.Int4): void;
			addU16(arg1: android.renderscript.Int3): void;
			addU16(arg1: number): void;
			addF64(arg1: native.Double): void;
			addF64(arg1: number): void;
			addF64(arg1: android.renderscript.Double4): void;
			addF64(arg1: android.renderscript.Double2): void;
			addF64(arg1: android.renderscript.Double3): void;
			addObj(arg1: android.renderscript.BaseObj): void;
			addMatrix(arg1: android.renderscript.Matrix2f): void;
			addMatrix(arg1: android.renderscript.Matrix3f): void;
			addMatrix(arg1: android.renderscript.Matrix4f): void;
			addBoolean(arg1: boolean): void;
			addI64(arg1: android.renderscript.Long2): void;
			addI64(arg1: native.Long): void;
			addI64(arg1: android.renderscript.Long4): void;
			addI64(arg1: android.renderscript.Long3): void;
			reset(): void;
			reset(arg1: number): void;
			skip(arg1: number): void;
			getData(): native.Array<native.Byte>;
			align(arg1: number): void;
		}
		export class FileA3D extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.FileA3D>;
			static createFromResource(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: number): android.renderscript.FileA3D;
			static createFromAsset(arg1: android.renderscript.RenderScript, arg2: android.content.res.AssetManager, arg3: java.lang.String): android.renderscript.FileA3D;
			static createFromAsset(arg1: android.renderscript.RenderScript, arg2: android.content.res.AssetManager, arg3: string): android.renderscript.FileA3D;
			static createFromFile(arg1: android.renderscript.RenderScript, arg2: java.lang.String): android.renderscript.FileA3D;
			static createFromFile(arg1: android.renderscript.RenderScript, arg2: string): android.renderscript.FileA3D;
			static createFromFile(arg1: android.renderscript.RenderScript, arg2: java.io.File): android.renderscript.FileA3D;
			getIndexEntryCount(): number;
			getIndexEntry(arg1: number): android.renderscript.FileA3D.IndexEntry;
		}
		export module FileA3D {
			export enum EntryType {
				MESH,
				UNKNOWN
			}
			export module EntryType {
				export function valueOf(arg1: java.lang.String): android.renderscript.FileA3D.EntryType;
				export function valueOf(arg1: string): android.renderscript.FileA3D.EntryType;
				export function values(): native.Array<android.renderscript.FileA3D.EntryType>;
			}
			export class IndexEntry extends java.lang.Object {
				static class: java.lang.Class<android.renderscript.FileA3D.IndexEntry>;
				getEntryType(): android.renderscript.FileA3D.EntryType;
				getMesh(): android.renderscript.Mesh;
				getName(): string;
				getObject(): android.renderscript.BaseObj;
			}
		}
		export class ProgramVertex extends android.renderscript.Program {
			static class: java.lang.Class<android.renderscript.ProgramVertex>;
			getInput(arg1: number): android.renderscript.Element;
			getInputCount(): number;
		}
		export module ProgramVertex {
			export class Builder extends android.renderscript.Program.BaseProgramBuilder {
				constructor(arg1: android.renderscript.RenderScript);
				static class: java.lang.Class<android.renderscript.ProgramVertex.Builder>;
				addInput(arg1: android.renderscript.Element): android.renderscript.ProgramVertex.Builder;
				create(): android.renderscript.ProgramVertex;
			}
		}
		export class Matrix3f extends java.lang.Object {
			constructor();
			constructor(arg1: native.Array<native.Float>);
			static class: java.lang.Class<android.renderscript.Matrix3f>;
			loadIdentity(): void;
			loadScale(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			loadScale(arg1: native.Float, arg2: native.Float): void;
			transpose(): void;
			loadRotate(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			loadRotate(arg1: native.Float): void;
			loadMultiply(arg1: android.renderscript.Matrix3f, arg2: android.renderscript.Matrix3f): void;
			loadTranslate(arg1: native.Float, arg2: native.Float): void;
			get(arg1: number, arg2: number): number;
			getArray(): native.Array<native.Float>;
			load(arg1: android.renderscript.Matrix3f): void;
			set(arg1: number, arg2: number, arg3: native.Float): void;
			rotate(arg1: native.Float): void;
			rotate(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			scale(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			scale(arg1: native.Float, arg2: native.Float): void;
			translate(arg1: native.Float, arg2: native.Float): void;
			multiply(arg1: android.renderscript.Matrix3f): void;
		}
		export class AllocationAdapter extends android.renderscript.Allocation {
			static class: java.lang.Class<android.renderscript.AllocationAdapter>;
			setY(arg1: number): void;
			setZ(arg1: number): void;
			setLOD(arg1: number): void;
			static create2D(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Allocation): android.renderscript.AllocationAdapter;
			setFace(arg1: android.renderscript.Type.CubemapFace): void;
			static create1D(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Allocation): android.renderscript.AllocationAdapter;
			resize(arg1: number): void;
		}
		export class BaseObj extends java.lang.Object {
			static class: java.lang.Class<android.renderscript.BaseObj>;
			Name: string;
			hashCode(): number;
			equals(arg1: any): boolean;
			getName(): string;
			destroy(): void;
			setName(arg1: java.lang.String): void;
			setName(arg1: string): void;
		}
		export class Sampler extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.Sampler>;
			getMagnification(): android.renderscript.Sampler.Value;
			getMinification(): android.renderscript.Sampler.Value;
			getWrapS(): android.renderscript.Sampler.Value;
			static CLAMP_NEAREST(arg1: android.renderscript.RenderScript): android.renderscript.Sampler;
			static CLAMP_LINEAR(arg1: android.renderscript.RenderScript): android.renderscript.Sampler;
			static WRAP_LINEAR(arg1: android.renderscript.RenderScript): android.renderscript.Sampler;
			getWrapT(): android.renderscript.Sampler.Value;
			getAnisotropy(): number;
			static WRAP_NEAREST(arg1: android.renderscript.RenderScript): android.renderscript.Sampler;
			static WRAP_LINEAR_MIP_LINEAR(arg1: android.renderscript.RenderScript): android.renderscript.Sampler;
			static CLAMP_LINEAR_MIP_LINEAR(arg1: android.renderscript.RenderScript): android.renderscript.Sampler;
		}
		export module Sampler {
			export enum Value {
				CLAMP,
				LINEAR,
				LINEAR_MIP_LINEAR,
				LINEAR_MIP_NEAREST,
				NEAREST,
				WRAP
			}
			export module Value {
				export function valueOf(arg1: java.lang.String): android.renderscript.Sampler.Value;
				export function valueOf(arg1: string): android.renderscript.Sampler.Value;
				export function values(): native.Array<android.renderscript.Sampler.Value>;
			}
			export class Builder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript);
				static class: java.lang.Class<android.renderscript.Sampler.Builder>;
				setMagnification(arg1: android.renderscript.Sampler.Value): void;
				setMinification(arg1: android.renderscript.Sampler.Value): void;
				setWrapS(arg1: android.renderscript.Sampler.Value): void;
				setWrapT(arg1: android.renderscript.Sampler.Value): void;
				setAnisotropy(arg1: native.Float): void;
				create(): android.renderscript.Sampler;
			}
		}
		export class RSRuntimeException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.renderscript.RSRuntimeException>;
		}
		export class RSTextureView extends android.view.TextureView implements android.view.TextureView.ISurfaceTextureListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.renderscript.RSTextureView>;
			RenderScriptGL: android.renderscript.RenderScriptGL;
			pause(): void;
			onSurfaceTextureSizeChanged(arg1: android.graphics.SurfaceTexture, arg2: number, arg3: number): void;
			onSurfaceTextureDestroyed(arg1: android.graphics.SurfaceTexture): boolean;
			onSurfaceTextureUpdated(arg1: android.graphics.SurfaceTexture): void;
			onSurfaceTextureAvailable(arg1: android.graphics.SurfaceTexture, arg2: number, arg3: number): void;
			destroyRenderScriptGL(): void;
			setRenderScriptGL(arg1: android.renderscript.RenderScriptGL): void;
			getRenderScriptGL(): android.renderscript.RenderScriptGL;
			createRenderScriptGL(arg1: android.renderscript.RenderScriptGL.SurfaceConfig): android.renderscript.RenderScriptGL;
			resume(): void;
		}
		export class Type extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.Type>;
			getZ(): number;
			hasFaces(): boolean;
			hasMipmaps(): boolean;
			getX(): number;
			getY(): number;
			getElement(): android.renderscript.Element;
			getCount(): number;
		}
		export module Type {
			export enum CubemapFace {
				NEGATIVE_X,
				NEGATIVE_Y,
				NEGATIVE_Z,
				POSITIVE_X,
				POSITIVE_Y,
				POSITIVE_Z,
				POSITVE_X,
				POSITVE_Y,
				POSITVE_Z
			}
			export module CubemapFace {
				export function valueOf(arg1: java.lang.String): android.renderscript.Type.CubemapFace;
				export function valueOf(arg1: string): android.renderscript.Type.CubemapFace;
				export function values(): native.Array<android.renderscript.Type.CubemapFace>;
			}
			export class Builder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element);
				static class: java.lang.Class<android.renderscript.Type.Builder>;
				setX(arg1: number): android.renderscript.Type.Builder;
				setY(arg1: number): android.renderscript.Type.Builder;
				setFaces(arg1: boolean): android.renderscript.Type.Builder;
				setMipmaps(arg1: boolean): android.renderscript.Type.Builder;
				create(): android.renderscript.Type;
			}
		}
		export class RSDriverException extends android.renderscript.RSRuntimeException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.renderscript.RSDriverException>;
		}
		export class ScriptIntrinsicYuvToRGB extends android.renderscript.ScriptIntrinsic {
			static class: java.lang.Class<android.renderscript.ScriptIntrinsicYuvToRGB>;
			getFieldID_Input(): android.renderscript.Script.FieldID;
			forEach(arg1: android.renderscript.Allocation): void;
			getKernelID(): android.renderscript.Script.KernelID;
			static create(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element): android.renderscript.ScriptIntrinsicYuvToRGB;
			setInput(arg1: android.renderscript.Allocation): void;
		}
		export class Allocation extends android.renderscript.BaseObj {
			static USAGE_SCRIPT: number;
			static USAGE_GRAPHICS_TEXTURE: number;
			static USAGE_GRAPHICS_VERTEX: number;
			static USAGE_GRAPHICS_CONSTANTS: number;
			static USAGE_GRAPHICS_RENDER_TARGET: number;
			static USAGE_IO_INPUT: number;
			static USAGE_IO_OUTPUT: number;
			static class: java.lang.Class<android.renderscript.Allocation>;
			Surface: android.view.Surface;
			copyFrom(arg1: android.graphics.Bitmap): void;
			copyFrom(arg1: native.Array<native.Float>): void;
			getSurface(): android.view.Surface;
			getUsage(): number;
			setFromFieldPacker(arg1: number, arg2: android.renderscript.FieldPacker): void;
			setFromFieldPacker(arg1: number, arg2: number, arg3: android.renderscript.FieldPacker): void;
			generateMipmaps(): void;
			copyFromUnchecked(arg1: native.Array<native.Float>): void;
			static createFromString(arg1: android.renderscript.RenderScript, arg2: java.lang.String, arg3: number): android.renderscript.Allocation;
			static createFromString(arg1: android.renderscript.RenderScript, arg2: string, arg3: number): android.renderscript.Allocation;
			copy2DRangeFrom(arg1: number, arg2: number, arg3: number, arg4: number, arg5: android.renderscript.Allocation, arg6: number, arg7: number): void;
			copy2DRangeFrom(arg1: number, arg2: number, arg3: android.graphics.Bitmap): void;
			copy2DRangeFrom(arg1: number, arg2: number, arg3: number, arg4: number, arg5: native.Array<native.Byte>): void;
			copy1DRangeFrom(arg1: number, arg2: number, arg3: native.Array<native.Short>): void;
			copy1DRangeFrom(arg1: number, arg2: number, arg3: android.renderscript.Allocation, arg4: number): void;
			static createFromBitmap(arg1: android.renderscript.RenderScript, arg2: android.graphics.Bitmap, arg3: android.renderscript.Allocation.MipmapControl, arg4: number): android.renderscript.Allocation;
			static createFromBitmap(arg1: android.renderscript.RenderScript, arg2: android.graphics.Bitmap): android.renderscript.Allocation;
			getBytesSize(): number;
			setSurface(arg1: android.view.Surface): void;
			copyTo(arg1: android.graphics.Bitmap): void;
			copyTo(arg1: native.Array<native.Float>): void;
			ioReceive(): void;
			static createSized(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element, arg3: number, arg4: number): android.renderscript.Allocation;
			static createSized(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element, arg3: number): android.renderscript.Allocation;
			static createTyped(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Type, arg3: android.renderscript.Allocation.MipmapControl, arg4: number): android.renderscript.Allocation;
			static createTyped(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Type, arg3: number): android.renderscript.Allocation;
			static createTyped(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Type): android.renderscript.Allocation;
			ioSend(): void;
			copy1DRangeFromUnchecked(arg1: number, arg2: number, arg3: native.Array<native.Byte>): void;
			static createCubemapFromBitmap(arg1: android.renderscript.RenderScript, arg2: android.graphics.Bitmap, arg3: android.renderscript.Allocation.MipmapControl, arg4: number): android.renderscript.Allocation;
			static createCubemapFromBitmap(arg1: android.renderscript.RenderScript, arg2: android.graphics.Bitmap): android.renderscript.Allocation;
			static createFromBitmapResource(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: number, arg4: android.renderscript.Allocation.MipmapControl, arg5: number): android.renderscript.Allocation;
			static createFromBitmapResource(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: number): android.renderscript.Allocation;
			static createCubemapFromCubeFaces(arg1: android.renderscript.RenderScript, arg2: android.graphics.Bitmap, arg3: android.graphics.Bitmap, arg4: android.graphics.Bitmap, arg5: android.graphics.Bitmap, arg6: android.graphics.Bitmap, arg7: android.graphics.Bitmap, arg8: android.renderscript.Allocation.MipmapControl, arg9: number): android.renderscript.Allocation;
			static createCubemapFromCubeFaces(arg1: android.renderscript.RenderScript, arg2: android.graphics.Bitmap, arg3: android.graphics.Bitmap, arg4: android.graphics.Bitmap, arg5: android.graphics.Bitmap, arg6: android.graphics.Bitmap, arg7: android.graphics.Bitmap): android.renderscript.Allocation;
			getType(): android.renderscript.Type;
			syncAll(arg1: number): void;
			resize(arg1: number): void;
			getElement(): android.renderscript.Element;
		}
		export module Allocation {
			export enum MipmapControl {
				MIPMAP_FULL,
				MIPMAP_NONE,
				MIPMAP_ON_SYNC_TO_TEXTURE
			}
			export module MipmapControl {
				export function valueOf(arg1: java.lang.String): android.renderscript.Allocation.MipmapControl;
				export function valueOf(arg1: string): android.renderscript.Allocation.MipmapControl;
				export function values(): native.Array<android.renderscript.Allocation.MipmapControl>;
			}
		}
		export class Mesh extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.Mesh>;
			getPrimitiveCount(): number;
			getIndexSetAllocation(arg1: number): android.renderscript.Allocation;
			getVertexAllocation(arg1: number): android.renderscript.Allocation;
			getPrimitive(arg1: number): android.renderscript.Mesh.Primitive;
			getVertexAllocationCount(): number;
		}
		export module Mesh {
			export class Builder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript, arg2: number);
				static class: java.lang.Class<android.renderscript.Mesh.Builder>;
				addIndexSetType(arg1: android.renderscript.Element, arg2: number, arg3: android.renderscript.Mesh.Primitive): android.renderscript.Mesh.Builder;
				addIndexSetType(arg1: android.renderscript.Type, arg2: android.renderscript.Mesh.Primitive): android.renderscript.Mesh.Builder;
				addIndexSetType(arg1: android.renderscript.Mesh.Primitive): android.renderscript.Mesh.Builder;
				addVertexType(arg1: android.renderscript.Element, arg2: number): android.renderscript.Mesh.Builder;
				addVertexType(arg1: android.renderscript.Type): android.renderscript.Mesh.Builder;
				getCurrentIndexSetIndex(): number;
				getCurrentVertexTypeIndex(): number;
				create(): android.renderscript.Mesh;
			}
			export enum Primitive {
				LINE,
				LINE_STRIP,
				POINT,
				TRIANGLE,
				TRIANGLE_FAN,
				TRIANGLE_STRIP
			}
			export module Primitive {
				export function valueOf(arg1: java.lang.String): android.renderscript.Mesh.Primitive;
				export function valueOf(arg1: string): android.renderscript.Mesh.Primitive;
				export function values(): native.Array<android.renderscript.Mesh.Primitive>;
			}
			export class AllocationBuilder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript);
				static class: java.lang.Class<android.renderscript.Mesh.AllocationBuilder>;
				addIndexSetType(arg1: android.renderscript.Mesh.Primitive): android.renderscript.Mesh.AllocationBuilder;
				addVertexAllocation(arg1: android.renderscript.Allocation): android.renderscript.Mesh.AllocationBuilder;
				addIndexSetAllocation(arg1: android.renderscript.Allocation, arg2: android.renderscript.Mesh.Primitive): android.renderscript.Mesh.AllocationBuilder;
				getCurrentIndexSetIndex(): number;
				getCurrentVertexTypeIndex(): number;
				create(): android.renderscript.Mesh;
			}
			export class TriangleMeshBuilder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript, arg2: number, arg3: number);
				static COLOR: number;
				static NORMAL: number;
				static TEXTURE_0: number;
				static class: java.lang.Class<android.renderscript.Mesh.TriangleMeshBuilder>;
				setTexture(arg1: native.Float, arg2: native.Float): android.renderscript.Mesh.TriangleMeshBuilder;
				setNormal(arg1: native.Float, arg2: native.Float, arg3: native.Float): android.renderscript.Mesh.TriangleMeshBuilder;
				addTriangle(arg1: number, arg2: number, arg3: number): android.renderscript.Mesh.TriangleMeshBuilder;
				addVertex(arg1: native.Float, arg2: native.Float): android.renderscript.Mesh.TriangleMeshBuilder;
				addVertex(arg1: native.Float, arg2: native.Float, arg3: native.Float): android.renderscript.Mesh.TriangleMeshBuilder;
				create(arg1: boolean): android.renderscript.Mesh;
				setColor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): android.renderscript.Mesh.TriangleMeshBuilder;
			}
		}
		export class Matrix4f extends java.lang.Object {
			constructor();
			constructor(arg1: native.Array<native.Float>);
			static class: java.lang.Class<android.renderscript.Matrix4f>;
			loadPerspective(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			loadOrthoWindow(arg1: number, arg2: number): void;
			inverseTranspose(): boolean;
			loadIdentity(): void;
			loadScale(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			transpose(): void;
			loadRotate(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			loadMultiply(arg1: android.renderscript.Matrix4f, arg2: android.renderscript.Matrix4f): void;
			loadTranslate(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			inverse(): boolean;
			loadFrustum(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			loadOrtho(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
			loadProjectionNormalized(arg1: number, arg2: number): void;
			get(arg1: number, arg2: number): number;
			getArray(): native.Array<native.Float>;
			load(arg1: android.renderscript.Matrix4f): void;
			set(arg1: number, arg2: number, arg3: native.Float): void;
			rotate(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			scale(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			translate(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			multiply(arg1: android.renderscript.Matrix4f): void;
		}
		export class ScriptIntrinsicLUT extends android.renderscript.ScriptIntrinsic {
			static class: java.lang.Class<android.renderscript.ScriptIntrinsicLUT>;
			setAlpha(arg1: number, arg2: number): void;
			forEach(arg1: android.renderscript.Allocation, arg2: android.renderscript.Allocation): void;
			getKernelID(): android.renderscript.Script.KernelID;
			setGreen(arg1: number, arg2: number): void;
			setBlue(arg1: number, arg2: number): void;
			setRed(arg1: number, arg2: number): void;
			static create(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element): android.renderscript.ScriptIntrinsicLUT;
		}
		export class Font extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.Font>;
			static createFromResource(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: number, arg4: native.Float): android.renderscript.Font;
			static createFromAsset(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: java.lang.String, arg4: native.Float): android.renderscript.Font;
			static createFromAsset(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: string, arg4: native.Float): android.renderscript.Font;
			static createFromFile(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: java.lang.String, arg4: native.Float): android.renderscript.Font;
			static createFromFile(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: string, arg4: native.Float): android.renderscript.Font;
			static createFromFile(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: java.io.File, arg4: native.Float): android.renderscript.Font;
			static create(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: java.lang.String, arg4: android.renderscript.Font.Style, arg5: native.Float): android.renderscript.Font;
			static create(arg1: android.renderscript.RenderScript, arg2: android.content.res.Resources, arg3: string, arg4: android.renderscript.Font.Style, arg5: native.Float): android.renderscript.Font;
		}
		export module Font {
			export enum Style {
				BOLD,
				BOLD_ITALIC,
				ITALIC,
				NORMAL
			}
			export module Style {
				export function valueOf(arg1: java.lang.String): android.renderscript.Font.Style;
				export function valueOf(arg1: string): android.renderscript.Font.Style;
				export function values(): native.Array<android.renderscript.Font.Style>;
			}
		}
		export class Int2 extends java.lang.Object {
			constructor();
			constructor(arg1: number, arg2: number);
			x: number;
			y: number;
			static class: java.lang.Class<android.renderscript.Int2>;
			private __android_renderscript_Int2: any;
		}
		export class Int4 extends java.lang.Object {
			constructor();
			constructor(arg1: number, arg2: number, arg3: number, arg4: number);
			x: number;
			y: number;
			z: number;
			w: number;
			static class: java.lang.Class<android.renderscript.Int4>;
			private __android_renderscript_Int4: any;
		}
		export class Int3 extends java.lang.Object {
			constructor();
			constructor(arg1: number, arg2: number, arg3: number);
			x: number;
			y: number;
			z: number;
			static class: java.lang.Class<android.renderscript.Int3>;
			private __android_renderscript_Int3: any;
		}
		export class ScriptC extends android.renderscript.Script {
			static class: java.lang.Class<android.renderscript.ScriptC>;
		}
		export class RSInvalidStateException extends android.renderscript.RSRuntimeException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.renderscript.RSInvalidStateException>;
		}
		export class ScriptIntrinsic extends android.renderscript.Script {
			static class: java.lang.Class<android.renderscript.ScriptIntrinsic>;
		}
		export class Script extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.Script>;
			bindAllocation(arg1: android.renderscript.Allocation, arg2: number): void;
			setVar(arg1: number, arg2: android.renderscript.BaseObj): void;
			setVar(arg1: number, arg2: number): void;
			setVar(arg1: number, arg2: native.Float): void;
			setVar(arg1: number, arg2: native.Long): void;
			setVar(arg1: number, arg2: boolean): void;
			setVar(arg1: number, arg2: android.renderscript.FieldPacker, arg3: android.renderscript.Element, arg4: native.Array<number>): void;
			setVar(arg1: number, arg2: android.renderscript.FieldPacker): void;
			setVar(arg1: number, arg2: native.Double): void;
			setTimeZone(arg1: java.lang.String): void;
			setTimeZone(arg1: string): void;
		}
		export module Script {
			export class FieldID extends android.renderscript.BaseObj {
				static class: java.lang.Class<android.renderscript.Script.FieldID>;
				private __android_renderscript_Script_FieldID: any;
			}
			export class KernelID extends android.renderscript.BaseObj {
				static class: java.lang.Class<android.renderscript.Script.KernelID>;
				private __android_renderscript_Script_KernelID: any;
			}
			export class FieldBase extends java.lang.Object {
				static class: java.lang.Class<android.renderscript.Script.FieldBase>;
				updateAllocation(): void;
				getAllocation(): android.renderscript.Allocation;
				getType(): android.renderscript.Type;
				getElement(): android.renderscript.Element;
			}
			export class Builder extends java.lang.Object {
				static class: java.lang.Class<android.renderscript.Script.Builder>;
			}
		}
		export class ProgramRaster extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.ProgramRaster>;
			isPointSpriteEnabled(): boolean;
			getCullMode(): android.renderscript.ProgramRaster.CullMode;
			static CULL_BACK(arg1: android.renderscript.RenderScript): android.renderscript.ProgramRaster;
			static CULL_FRONT(arg1: android.renderscript.RenderScript): android.renderscript.ProgramRaster;
			static CULL_NONE(arg1: android.renderscript.RenderScript): android.renderscript.ProgramRaster;
		}
		export module ProgramRaster {
			export enum CullMode {
				BACK,
				FRONT,
				NONE
			}
			export module CullMode {
				export function valueOf(arg1: java.lang.String): android.renderscript.ProgramRaster.CullMode;
				export function valueOf(arg1: string): android.renderscript.ProgramRaster.CullMode;
				export function values(): native.Array<android.renderscript.ProgramRaster.CullMode>;
			}
			export class Builder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript);
				static class: java.lang.Class<android.renderscript.ProgramRaster.Builder>;
				setPointSpriteEnabled(arg1: boolean): android.renderscript.ProgramRaster.Builder;
				setCullMode(arg1: android.renderscript.ProgramRaster.CullMode): android.renderscript.ProgramRaster.Builder;
				create(): android.renderscript.ProgramRaster;
			}
		}
		export class Double2 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Double, arg2: native.Double);
			constructor(arg1: number, arg2: number);
			x: native.Double;
			y: native.Double;
			static class: java.lang.Class<android.renderscript.Double2>;
			private __android_renderscript_Double2: any;
		}
		export class Double4 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Double, arg2: native.Double, arg3: native.Double, arg4: native.Double);
			constructor(arg1: number, arg2: number, arg3: number, arg4: number);
			x: native.Double;
			y: native.Double;
			z: native.Double;
			w: native.Double;
			static class: java.lang.Class<android.renderscript.Double4>;
			private __android_renderscript_Double4: any;
		}
		export class Double3 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Double, arg2: native.Double, arg3: native.Double);
			constructor(arg1: number, arg2: number, arg3: number);
			x: native.Double;
			y: native.Double;
			z: native.Double;
			static class: java.lang.Class<android.renderscript.Double3>;
			private __android_renderscript_Double3: any;
		}
		export class RenderScript extends java.lang.Object {
			static class: java.lang.Class<android.renderscript.RenderScript>;
			ErrorHandler: android.renderscript.RenderScript.RSErrorHandler;
			MessageHandler: android.renderscript.RenderScript.RSMessageHandler;
			getApplicationContext(): android.content.Context;
			setMessageHandler(arg1: android.renderscript.RenderScript.RSMessageHandler): void;
			getMessageHandler(): android.renderscript.RenderScript.RSMessageHandler;
			getErrorHandler(): android.renderscript.RenderScript.RSErrorHandler;
			contextDump(): void;
			setPriority(arg1: android.renderscript.RenderScript.Priority): void;
			destroy(): void;
			static create(arg1: android.content.Context): android.renderscript.RenderScript;
			finish(): void;
			setErrorHandler(arg1: android.renderscript.RenderScript.RSErrorHandler): void;
		}
		export module RenderScript {
			export class RSMessageHandler extends java.lang.Object implements java.lang.IRunnable {
				constructor();
				static class: java.lang.Class<android.renderscript.RenderScript.RSMessageHandler>;
				run(): void;
			}
			export class RSErrorHandler extends java.lang.Object implements java.lang.IRunnable {
				constructor();
				static class: java.lang.Class<android.renderscript.RenderScript.RSErrorHandler>;
				run(): void;
			}
			export enum Priority {
				LOW,
				NORMAL
			}
			export module Priority {
				export function valueOf(arg1: java.lang.String): android.renderscript.RenderScript.Priority;
				export function valueOf(arg1: string): android.renderscript.RenderScript.Priority;
				export function values(): native.Array<android.renderscript.RenderScript.Priority>;
			}
		}
		export class ProgramStore extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.ProgramStore>;
			isColorMaskRedEnabled(): boolean;
			getBlendDstFunc(): android.renderscript.ProgramStore.BlendDstFunc;
			isDepthMaskEnabled(): boolean;
			getBlendSrcFunc(): android.renderscript.ProgramStore.BlendSrcFunc;
			static BLEND_NONE_DEPTH_NONE(arg1: android.renderscript.RenderScript): android.renderscript.ProgramStore;
			static BLEND_NONE_DEPTH_TEST(arg1: android.renderscript.RenderScript): android.renderscript.ProgramStore;
			isDitherEnabled(): boolean;
			getDepthFunc(): android.renderscript.ProgramStore.DepthFunc;
			isColorMaskAlphaEnabled(): boolean;
			static BLEND_ALPHA_DEPTH_TEST(arg1: android.renderscript.RenderScript): android.renderscript.ProgramStore;
			isColorMaskBlueEnabled(): boolean;
			static BLEND_ALPHA_DEPTH_NONE(arg1: android.renderscript.RenderScript): android.renderscript.ProgramStore;
			isColorMaskGreenEnabled(): boolean;
		}
		export module ProgramStore {
			export enum DepthFunc {
				ALWAYS,
				EQUAL,
				GREATER,
				GREATER_OR_EQUAL,
				LESS,
				LESS_OR_EQUAL,
				NOT_EQUAL
			}
			export module DepthFunc {
				export function valueOf(arg1: java.lang.String): android.renderscript.ProgramStore.DepthFunc;
				export function valueOf(arg1: string): android.renderscript.ProgramStore.DepthFunc;
				export function values(): native.Array<android.renderscript.ProgramStore.DepthFunc>;
			}
			export enum BlendSrcFunc {
				DST_ALPHA,
				DST_COLOR,
				ONE,
				ONE_MINUS_DST_ALPHA,
				ONE_MINUS_DST_COLOR,
				ONE_MINUS_SRC_ALPHA,
				SRC_ALPHA,
				SRC_ALPHA_SATURATE,
				ZERO
			}
			export module BlendSrcFunc {
				export function valueOf(arg1: java.lang.String): android.renderscript.ProgramStore.BlendSrcFunc;
				export function valueOf(arg1: string): android.renderscript.ProgramStore.BlendSrcFunc;
				export function values(): native.Array<android.renderscript.ProgramStore.BlendSrcFunc>;
			}
			export enum BlendDstFunc {
				DST_ALPHA,
				ONE,
				ONE_MINUS_DST_ALPHA,
				ONE_MINUS_SRC_ALPHA,
				ONE_MINUS_SRC_COLOR,
				SRC_ALPHA,
				SRC_COLOR,
				ZERO
			}
			export module BlendDstFunc {
				export function valueOf(arg1: java.lang.String): android.renderscript.ProgramStore.BlendDstFunc;
				export function valueOf(arg1: string): android.renderscript.ProgramStore.BlendDstFunc;
				export function values(): native.Array<android.renderscript.ProgramStore.BlendDstFunc>;
			}
			export class Builder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript);
				static class: java.lang.Class<android.renderscript.ProgramStore.Builder>;
				setColorMaskEnabled(arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean): android.renderscript.ProgramStore.Builder;
				setDitherEnabled(arg1: boolean): android.renderscript.ProgramStore.Builder;
				setDepthMaskEnabled(arg1: boolean): android.renderscript.ProgramStore.Builder;
				setDepthFunc(arg1: android.renderscript.ProgramStore.DepthFunc): android.renderscript.ProgramStore.Builder;
				setBlendFunc(arg1: android.renderscript.ProgramStore.BlendSrcFunc, arg2: android.renderscript.ProgramStore.BlendDstFunc): android.renderscript.ProgramStore.Builder;
				create(): android.renderscript.ProgramStore;
			}
		}
		export class Short3 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Short, arg2: native.Short, arg3: native.Short);
			x: native.Short;
			y: native.Short;
			z: native.Short;
			static class: java.lang.Class<android.renderscript.Short3>;
			private __android_renderscript_Short3: any;
		}
		export class ScriptIntrinsicBlur extends android.renderscript.ScriptIntrinsic {
			static class: java.lang.Class<android.renderscript.ScriptIntrinsicBlur>;
			getFieldID_Input(): android.renderscript.Script.FieldID;
			forEach(arg1: android.renderscript.Allocation): void;
			setRadius(arg1: native.Float): void;
			getKernelID(): android.renderscript.Script.KernelID;
			static create(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element): android.renderscript.ScriptIntrinsicBlur;
			setInput(arg1: android.renderscript.Allocation): void;
		}
		export class Short2 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Short, arg2: native.Short);
			x: native.Short;
			y: native.Short;
			static class: java.lang.Class<android.renderscript.Short2>;
			private __android_renderscript_Short2: any;
		}
		export class ScriptIntrinsicConvolve3x3 extends android.renderscript.ScriptIntrinsic {
			static class: java.lang.Class<android.renderscript.ScriptIntrinsicConvolve3x3>;
			getFieldID_Input(): android.renderscript.Script.FieldID;
			setCoefficients(arg1: native.Array<native.Float>): void;
			forEach(arg1: android.renderscript.Allocation): void;
			getKernelID(): android.renderscript.Script.KernelID;
			static create(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element): android.renderscript.ScriptIntrinsicConvolve3x3;
			setInput(arg1: android.renderscript.Allocation): void;
		}
		export class Short4 extends java.lang.Object {
			constructor();
			constructor(arg1: native.Short, arg2: native.Short, arg3: native.Short, arg4: native.Short);
			x: native.Short;
			y: native.Short;
			z: native.Short;
			w: native.Short;
			static class: java.lang.Class<android.renderscript.Short4>;
			private __android_renderscript_Short4: any;
		}
		export class Element extends android.renderscript.BaseObj {
			static class: java.lang.Class<android.renderscript.Element>;
			static BOOLEAN(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I32_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U16_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I16_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I64(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static F32(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static F32_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U8_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I16_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static F64_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static F64(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I8_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I16_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U64(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U16_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I32(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U32_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static F32_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static F32_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static A_8(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static F64_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static F64_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U8_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U8_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U32(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U32_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U32_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I8_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I8_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U16_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I32_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I32_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static MESH(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U64_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U64_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U64_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I64_2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I64_3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I64_4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I8(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static I16(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U16(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static U8(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static PROGRAM_VERTEX(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			getSubElementCount(): number;
			getSubElementName(arg1: number): string;
			static PROGRAM_FRAGMENT(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static PROGRAM_RASTER(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static ELEMENT(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			getDataKind(): android.renderscript.Element.DataKind;
			static ALLOCATION(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			getSubElement(arg1: number): android.renderscript.Element;
			static SCRIPT(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			getBytesSize(): number;
			getVectorSize(): number;
			static PROGRAM_STORE(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			isComplex(): boolean;
			static RGB_565(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static SAMPLER(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static RGB_888(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static MATRIX_3X3(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static MATRIX_4X4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static MATRIX4X4(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static createVector(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element.DataType, arg3: number): android.renderscript.Element;
			static RGBA_4444(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static createPixel(arg1: android.renderscript.RenderScript, arg2: android.renderscript.Element.DataType, arg3: android.renderscript.Element.DataKind): android.renderscript.Element;
			static RGBA_5551(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static RGBA_8888(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static MATRIX_2X2(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			getSubElementArraySize(arg1: number): number;
			getSubElementOffsetBytes(arg1: number): number;
			static TYPE(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			static FONT(arg1: android.renderscript.RenderScript): android.renderscript.Element;
			getDataType(): android.renderscript.Element.DataType;
			isCompatible(arg1: android.renderscript.Element): boolean;
		}
		export module Element {
			export enum DataType {
				BOOLEAN,
				FLOAT_32,
				FLOAT_64,
				MATRIX_2X2,
				MATRIX_3X3,
				MATRIX_4X4,
				NONE,
				RS_ALLOCATION,
				RS_ELEMENT,
				RS_FONT,
				RS_MESH,
				RS_PROGRAM_FRAGMENT,
				RS_PROGRAM_RASTER,
				RS_PROGRAM_STORE,
				RS_PROGRAM_VERTEX,
				RS_SAMPLER,
				RS_SCRIPT,
				RS_TYPE,
				SIGNED_16,
				SIGNED_32,
				SIGNED_64,
				SIGNED_8,
				UNSIGNED_16,
				UNSIGNED_32,
				UNSIGNED_4_4_4_4,
				UNSIGNED_5_5_5_1,
				UNSIGNED_5_6_5,
				UNSIGNED_64,
				UNSIGNED_8
			}
			export module DataType {
				export function valueOf(arg1: java.lang.String): android.renderscript.Element.DataType;
				export function valueOf(arg1: string): android.renderscript.Element.DataType;
				export function values(): native.Array<android.renderscript.Element.DataType>;
			}
			export enum DataKind {
				PIXEL_A,
				PIXEL_DEPTH,
				PIXEL_L,
				PIXEL_LA,
				PIXEL_RGB,
				PIXEL_RGBA,
				USER
			}
			export module DataKind {
				export function valueOf(arg1: java.lang.String): android.renderscript.Element.DataKind;
				export function valueOf(arg1: string): android.renderscript.Element.DataKind;
				export function values(): native.Array<android.renderscript.Element.DataKind>;
			}
			export class Builder extends java.lang.Object {
				constructor(arg1: android.renderscript.RenderScript);
				static class: java.lang.Class<android.renderscript.Element.Builder>;
				add(arg1: android.renderscript.Element, arg2: java.lang.String): android.renderscript.Element.Builder;
				add(arg1: android.renderscript.Element, arg2: string): android.renderscript.Element.Builder;
				add(arg1: android.renderscript.Element, arg2: java.lang.String, arg3: number): android.renderscript.Element.Builder;
				add(arg1: android.renderscript.Element, arg2: string, arg3: number): android.renderscript.Element.Builder;
				create(): android.renderscript.Element;
			}
		}
	}
	export module content {
		export class ContentProviderClient extends java.lang.Object {
			static class: java.lang.Class<android.content.ContentProviderClient>;
			call(arg1: java.lang.String, arg2: java.lang.String, arg3: android.os.Bundle): android.os.Bundle;
			call(arg1: string, arg2: string, arg3: android.os.Bundle): android.os.Bundle;
			bulkInsert(arg1: android.net.Uri, arg2: native.Array<android.content.ContentValues>): number;
			applyBatch(arg1: java.util.ArrayList<android.content.ContentProviderOperation>): native.Array<android.content.ContentProviderResult>;
			openAssetFile(arg1: android.net.Uri, arg2: java.lang.String): android.content.res.AssetFileDescriptor;
			openAssetFile(arg1: android.net.Uri, arg2: string): android.content.res.AssetFileDescriptor;
			openFile(arg1: android.net.Uri, arg2: java.lang.String): android.os.ParcelFileDescriptor;
			openFile(arg1: android.net.Uri, arg2: string): android.os.ParcelFileDescriptor;
			getStreamTypes(arg1: android.net.Uri, arg2: java.lang.String): native.Array<java.lang.String>;
			getStreamTypes(arg1: android.net.Uri, arg2: string): native.Array<java.lang.String>;
			openTypedAssetFileDescriptor(arg1: android.net.Uri, arg2: java.lang.String, arg3: android.os.Bundle): android.content.res.AssetFileDescriptor;
			openTypedAssetFileDescriptor(arg1: android.net.Uri, arg2: string, arg3: android.os.Bundle): android.content.res.AssetFileDescriptor;
			getLocalContentProvider(): android.content.ContentProvider;
			getType(arg1: android.net.Uri): string;
			delete(arg1: android.net.Uri, arg2: java.lang.String, arg3: native.Array<java.lang.String>): number;
			delete(arg1: android.net.Uri, arg2: string, arg3: native.Array<java.lang.String>): number;
			insert(arg1: android.net.Uri, arg2: android.content.ContentValues): android.net.Uri;
			release(): boolean;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: android.os.CancellationSignal): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: android.os.CancellationSignal): android.database.ICursor;
			update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: java.lang.String, arg4: native.Array<java.lang.String>): number;
			update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: string, arg4: native.Array<java.lang.String>): number;
		}
		export class Intent extends java.lang.Object implements android.os.IParcelable, java.lang.ICloneable {
			constructor(arg1: android.content.Context, arg2: java.lang.Class<any>);
			constructor(arg1: java.lang.String, arg2: android.net.Uri, arg3: android.content.Context, arg4: java.lang.Class<any>);
			constructor(arg1: string, arg2: android.net.Uri, arg3: android.content.Context, arg4: java.lang.Class<any>);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: android.content.Intent);
			constructor(arg1: java.lang.String, arg2: android.net.Uri);
			constructor(arg1: string, arg2: android.net.Uri);
			static ACTION_MAIN: java.lang.String;
			static ACTION_VIEW: java.lang.String;
			static ACTION_DEFAULT: java.lang.String;
			static ACTION_ATTACH_DATA: java.lang.String;
			static ACTION_EDIT: java.lang.String;
			static ACTION_INSERT_OR_EDIT: java.lang.String;
			static ACTION_PICK: java.lang.String;
			static ACTION_CREATE_SHORTCUT: java.lang.String;
			static EXTRA_SHORTCUT_INTENT: java.lang.String;
			static EXTRA_SHORTCUT_NAME: java.lang.String;
			static EXTRA_SHORTCUT_ICON: java.lang.String;
			static EXTRA_SHORTCUT_ICON_RESOURCE: java.lang.String;
			static ACTION_CHOOSER: java.lang.String;
			static ACTION_GET_CONTENT: java.lang.String;
			static ACTION_DIAL: java.lang.String;
			static ACTION_CALL: java.lang.String;
			static ACTION_SENDTO: java.lang.String;
			static ACTION_SEND: java.lang.String;
			static ACTION_SEND_MULTIPLE: java.lang.String;
			static ACTION_ANSWER: java.lang.String;
			static ACTION_INSERT: java.lang.String;
			static ACTION_PASTE: java.lang.String;
			static ACTION_DELETE: java.lang.String;
			static ACTION_RUN: java.lang.String;
			static ACTION_SYNC: java.lang.String;
			static ACTION_PICK_ACTIVITY: java.lang.String;
			static ACTION_SEARCH: java.lang.String;
			static ACTION_SYSTEM_TUTORIAL: java.lang.String;
			static ACTION_WEB_SEARCH: java.lang.String;
			static ACTION_ASSIST: java.lang.String;
			static ACTION_ALL_APPS: java.lang.String;
			static ACTION_SET_WALLPAPER: java.lang.String;
			static ACTION_BUG_REPORT: java.lang.String;
			static ACTION_FACTORY_TEST: java.lang.String;
			static ACTION_CALL_BUTTON: java.lang.String;
			static ACTION_VOICE_COMMAND: java.lang.String;
			static ACTION_SEARCH_LONG_PRESS: java.lang.String;
			static ACTION_APP_ERROR: java.lang.String;
			static ACTION_POWER_USAGE_SUMMARY: java.lang.String;
			static ACTION_MANAGE_NETWORK_USAGE: java.lang.String;
			static ACTION_INSTALL_PACKAGE: java.lang.String;
			static EXTRA_INSTALLER_PACKAGE_NAME: java.lang.String;
			static EXTRA_NOT_UNKNOWN_SOURCE: java.lang.String;
			static EXTRA_ORIGINATING_URI: java.lang.String;
			static EXTRA_REFERRER: java.lang.String;
			static EXTRA_ALLOW_REPLACE: java.lang.String;
			static EXTRA_RETURN_RESULT: java.lang.String;
			static ACTION_UNINSTALL_PACKAGE: java.lang.String;
			static ACTION_SCREEN_OFF: java.lang.String;
			static ACTION_SCREEN_ON: java.lang.String;
			static ACTION_DREAMING_STOPPED: java.lang.String;
			static ACTION_DREAMING_STARTED: java.lang.String;
			static ACTION_USER_PRESENT: java.lang.String;
			static ACTION_TIME_TICK: java.lang.String;
			static ACTION_TIME_CHANGED: java.lang.String;
			static ACTION_DATE_CHANGED: java.lang.String;
			static ACTION_TIMEZONE_CHANGED: java.lang.String;
			static ACTION_BOOT_COMPLETED: java.lang.String;
			static ACTION_CLOSE_SYSTEM_DIALOGS: java.lang.String;
			static ACTION_PACKAGE_INSTALL: java.lang.String;
			static ACTION_PACKAGE_ADDED: java.lang.String;
			static ACTION_PACKAGE_REPLACED: java.lang.String;
			static ACTION_MY_PACKAGE_REPLACED: java.lang.String;
			static ACTION_PACKAGE_REMOVED: java.lang.String;
			static ACTION_PACKAGE_FULLY_REMOVED: java.lang.String;
			static ACTION_PACKAGE_CHANGED: java.lang.String;
			static ACTION_PACKAGE_RESTARTED: java.lang.String;
			static ACTION_PACKAGE_DATA_CLEARED: java.lang.String;
			static ACTION_UID_REMOVED: java.lang.String;
			static ACTION_PACKAGE_FIRST_LAUNCH: java.lang.String;
			static ACTION_PACKAGE_NEEDS_VERIFICATION: java.lang.String;
			static ACTION_PACKAGE_VERIFIED: java.lang.String;
			static ACTION_EXTERNAL_APPLICATIONS_AVAILABLE: java.lang.String;
			static ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE: java.lang.String;
			static ACTION_WALLPAPER_CHANGED: java.lang.String;
			static ACTION_CONFIGURATION_CHANGED: java.lang.String;
			static ACTION_LOCALE_CHANGED: java.lang.String;
			static ACTION_BATTERY_CHANGED: java.lang.String;
			static ACTION_BATTERY_LOW: java.lang.String;
			static ACTION_BATTERY_OKAY: java.lang.String;
			static ACTION_POWER_CONNECTED: java.lang.String;
			static ACTION_POWER_DISCONNECTED: java.lang.String;
			static ACTION_SHUTDOWN: java.lang.String;
			static ACTION_DEVICE_STORAGE_LOW: java.lang.String;
			static ACTION_DEVICE_STORAGE_OK: java.lang.String;
			static ACTION_MANAGE_PACKAGE_STORAGE: java.lang.String;
			static ACTION_UMS_CONNECTED: java.lang.String;
			static ACTION_UMS_DISCONNECTED: java.lang.String;
			static ACTION_MEDIA_REMOVED: java.lang.String;
			static ACTION_MEDIA_UNMOUNTED: java.lang.String;
			static ACTION_MEDIA_CHECKING: java.lang.String;
			static ACTION_MEDIA_NOFS: java.lang.String;
			static ACTION_MEDIA_MOUNTED: java.lang.String;
			static ACTION_MEDIA_SHARED: java.lang.String;
			static ACTION_MEDIA_BAD_REMOVAL: java.lang.String;
			static ACTION_MEDIA_UNMOUNTABLE: java.lang.String;
			static ACTION_MEDIA_EJECT: java.lang.String;
			static ACTION_MEDIA_SCANNER_STARTED: java.lang.String;
			static ACTION_MEDIA_SCANNER_FINISHED: java.lang.String;
			static ACTION_MEDIA_SCANNER_SCAN_FILE: java.lang.String;
			static ACTION_MEDIA_BUTTON: java.lang.String;
			static ACTION_CAMERA_BUTTON: java.lang.String;
			static ACTION_GTALK_SERVICE_CONNECTED: java.lang.String;
			static ACTION_GTALK_SERVICE_DISCONNECTED: java.lang.String;
			static ACTION_INPUT_METHOD_CHANGED: java.lang.String;
			static ACTION_AIRPLANE_MODE_CHANGED: java.lang.String;
			static ACTION_PROVIDER_CHANGED: java.lang.String;
			static ACTION_HEADSET_PLUG: java.lang.String;
			static ACTION_NEW_OUTGOING_CALL: java.lang.String;
			static ACTION_REBOOT: java.lang.String;
			static ACTION_DOCK_EVENT: java.lang.String;
			static ACTION_USER_INITIALIZE: java.lang.String;
			static ACTION_USER_FOREGROUND: java.lang.String;
			static ACTION_USER_BACKGROUND: java.lang.String;
			static ACTION_QUICK_CLOCK: java.lang.String;
			static CATEGORY_DEFAULT: java.lang.String;
			static CATEGORY_BROWSABLE: java.lang.String;
			static CATEGORY_ALTERNATIVE: java.lang.String;
			static CATEGORY_SELECTED_ALTERNATIVE: java.lang.String;
			static CATEGORY_TAB: java.lang.String;
			static CATEGORY_LAUNCHER: java.lang.String;
			static CATEGORY_INFO: java.lang.String;
			static CATEGORY_HOME: java.lang.String;
			static CATEGORY_PREFERENCE: java.lang.String;
			static CATEGORY_DEVELOPMENT_PREFERENCE: java.lang.String;
			static CATEGORY_EMBED: java.lang.String;
			static CATEGORY_APP_MARKET: java.lang.String;
			static CATEGORY_MONKEY: java.lang.String;
			static CATEGORY_TEST: java.lang.String;
			static CATEGORY_UNIT_TEST: java.lang.String;
			static CATEGORY_SAMPLE_CODE: java.lang.String;
			static CATEGORY_OPENABLE: java.lang.String;
			static CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: java.lang.String;
			static CATEGORY_CAR_DOCK: java.lang.String;
			static CATEGORY_DESK_DOCK: java.lang.String;
			static CATEGORY_LE_DESK_DOCK: java.lang.String;
			static CATEGORY_HE_DESK_DOCK: java.lang.String;
			static CATEGORY_CAR_MODE: java.lang.String;
			static CATEGORY_APP_BROWSER: java.lang.String;
			static CATEGORY_APP_CALCULATOR: java.lang.String;
			static CATEGORY_APP_CALENDAR: java.lang.String;
			static CATEGORY_APP_CONTACTS: java.lang.String;
			static CATEGORY_APP_EMAIL: java.lang.String;
			static CATEGORY_APP_GALLERY: java.lang.String;
			static CATEGORY_APP_MAPS: java.lang.String;
			static CATEGORY_APP_MESSAGING: java.lang.String;
			static CATEGORY_APP_MUSIC: java.lang.String;
			static EXTRA_TEMPLATE: java.lang.String;
			static EXTRA_TEXT: java.lang.String;
			static EXTRA_HTML_TEXT: java.lang.String;
			static EXTRA_STREAM: java.lang.String;
			static EXTRA_EMAIL: java.lang.String;
			static EXTRA_CC: java.lang.String;
			static EXTRA_BCC: java.lang.String;
			static EXTRA_SUBJECT: java.lang.String;
			static EXTRA_INTENT: java.lang.String;
			static EXTRA_TITLE: java.lang.String;
			static EXTRA_INITIAL_INTENTS: java.lang.String;
			static EXTRA_KEY_EVENT: java.lang.String;
			static EXTRA_DONT_KILL_APP: java.lang.String;
			static EXTRA_PHONE_NUMBER: java.lang.String;
			static EXTRA_UID: java.lang.String;
			static EXTRA_DATA_REMOVED: java.lang.String;
			static EXTRA_REPLACING: java.lang.String;
			static EXTRA_ALARM_COUNT: java.lang.String;
			static EXTRA_DOCK_STATE: java.lang.String;
			static EXTRA_DOCK_STATE_UNDOCKED: number;
			static EXTRA_DOCK_STATE_DESK: number;
			static EXTRA_DOCK_STATE_CAR: number;
			static EXTRA_DOCK_STATE_LE_DESK: number;
			static EXTRA_DOCK_STATE_HE_DESK: number;
			static METADATA_DOCK_HOME: java.lang.String;
			static EXTRA_BUG_REPORT: java.lang.String;
			static EXTRA_REMOTE_INTENT_TOKEN: java.lang.String;
			static EXTRA_CHANGED_COMPONENT_NAME: java.lang.String;
			static EXTRA_CHANGED_COMPONENT_NAME_LIST: java.lang.String;
			static EXTRA_CHANGED_PACKAGE_LIST: java.lang.String;
			static EXTRA_CHANGED_UID_LIST: java.lang.String;
			static EXTRA_LOCAL_ONLY: java.lang.String;
			static FLAG_GRANT_READ_URI_PERMISSION: number;
			static FLAG_GRANT_WRITE_URI_PERMISSION: number;
			static FLAG_FROM_BACKGROUND: number;
			static FLAG_DEBUG_LOG_RESOLUTION: number;
			static FLAG_EXCLUDE_STOPPED_PACKAGES: number;
			static FLAG_INCLUDE_STOPPED_PACKAGES: number;
			static FLAG_ACTIVITY_NO_HISTORY: number;
			static FLAG_ACTIVITY_SINGLE_TOP: number;
			static FLAG_ACTIVITY_NEW_TASK: number;
			static FLAG_ACTIVITY_MULTIPLE_TASK: number;
			static FLAG_ACTIVITY_CLEAR_TOP: number;
			static FLAG_ACTIVITY_FORWARD_RESULT: number;
			static FLAG_ACTIVITY_PREVIOUS_IS_TOP: number;
			static FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: number;
			static FLAG_ACTIVITY_BROUGHT_TO_FRONT: number;
			static FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: number;
			static FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: number;
			static FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: number;
			static FLAG_ACTIVITY_NO_USER_ACTION: number;
			static FLAG_ACTIVITY_REORDER_TO_FRONT: number;
			static FLAG_ACTIVITY_NO_ANIMATION: number;
			static FLAG_ACTIVITY_CLEAR_TASK: number;
			static FLAG_ACTIVITY_TASK_ON_HOME: number;
			static FLAG_RECEIVER_REGISTERED_ONLY: number;
			static FLAG_RECEIVER_REPLACE_PENDING: number;
			static FLAG_RECEIVER_FOREGROUND: number;
			static URI_INTENT_SCHEME: number;
			static FILL_IN_ACTION: number;
			static FILL_IN_DATA: number;
			static FILL_IN_CATEGORIES: number;
			static FILL_IN_COMPONENT: number;
			static FILL_IN_PACKAGE: number;
			static FILL_IN_SOURCE_BOUNDS: number;
			static FILL_IN_SELECTOR: number;
			static FILL_IN_CLIP_DATA: number;
			static CREATOR: android.os.Parcelable.ICreator<android.content.Intent>;
			static class: java.lang.Class<android.content.Intent>;
			Type: string;
			Data: android.net.Uri;
			Action: string;
			SourceBounds: android.graphics.Rect;
			ClipData: android.content.ClipData;
			Package: string;
			Component: android.content.ComponentName;
			Selector: android.content.Intent;
			Flags: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			toUri(arg1: number): string;
			getSelector(): android.content.Intent;
			setSelector(arg1: android.content.Intent): void;
			getExtras(): android.os.Bundle;
			resolveActivity(arg1: android.content.pm.PackageManager): android.content.ComponentName;
			static getIntent(arg1: java.lang.String): android.content.Intent;
			static getIntent(arg1: string): android.content.Intent;
			readFromParcel(arg1: android.os.Parcel): void;
			getClipData(): android.content.ClipData;
			setClassName(arg1: java.lang.String, arg2: java.lang.String): android.content.Intent;
			setClassName(arg1: string, arg2: string): android.content.Intent;
			setClassName(arg1: android.content.Context, arg2: java.lang.String): android.content.Intent;
			setClassName(arg1: android.content.Context, arg2: string): android.content.Intent;
			setFlags(arg1: number): android.content.Intent;
			hasFileDescriptors(): boolean;
			static makeMainSelectorActivity(arg1: java.lang.String, arg2: java.lang.String): android.content.Intent;
			static makeMainSelectorActivity(arg1: string, arg2: string): android.content.Intent;
			static makeRestartActivityTask(arg1: android.content.ComponentName): android.content.Intent;
			getParcelableArrayExtra(arg1: java.lang.String): native.Array<android.os.IParcelable>;
			getParcelableArrayExtra(arg1: string): native.Array<android.os.IParcelable>;
			getCharSequenceArrayListExtra(arg1: java.lang.String): java.util.ArrayList<java.lang.ICharSequence>;
			getCharSequenceArrayListExtra(arg1: string): java.util.ArrayList<java.lang.ICharSequence>;
			putCharSequenceArrayListExtra(arg1: java.lang.String, arg2: java.util.ArrayList<java.lang.ICharSequence>): android.content.Intent;
			putCharSequenceArrayListExtra(arg1: string, arg2: java.util.ArrayList<java.lang.ICharSequence>): android.content.Intent;
			getStringArrayListExtra(arg1: java.lang.String): java.util.ArrayList<string>;
			getStringArrayListExtra(arg1: string): java.util.ArrayList<string>;
			getCharSequenceArrayExtra(arg1: java.lang.String): native.Array<java.lang.ICharSequence>;
			getCharSequenceArrayExtra(arg1: string): native.Array<java.lang.ICharSequence>;
			putStringArrayListExtra(arg1: java.lang.String, arg2: java.util.ArrayList<string>): android.content.Intent;
			putStringArrayListExtra(arg1: string, arg2: java.util.ArrayList<string>): android.content.Intent;
			putParcelableArrayListExtra(arg1: java.lang.String, arg2: java.util.ArrayList<any>): android.content.Intent;
			putParcelableArrayListExtra(arg1: string, arg2: java.util.ArrayList<any>): android.content.Intent;
			getParcelableArrayListExtra<T extends android.os.IParcelable>(arg1: java.lang.String): java.util.ArrayList<T>;
			getParcelableArrayListExtra<T extends android.os.IParcelable>(arg1: string): java.util.ArrayList<T>;
			getIntegerArrayListExtra(arg1: java.lang.String): java.util.ArrayList<java.lang.Integer>;
			getIntegerArrayListExtra(arg1: string): java.util.ArrayList<java.lang.Integer>;
			putIntegerArrayListExtra(arg1: java.lang.String, arg2: java.util.ArrayList<java.lang.Integer>): android.content.Intent;
			putIntegerArrayListExtra(arg1: string, arg2: java.util.ArrayList<java.lang.Integer>): android.content.Intent;
			setDataAndTypeAndNormalize(arg1: android.net.Uri, arg2: java.lang.String): android.content.Intent;
			setDataAndTypeAndNormalize(arg1: android.net.Uri, arg2: string): android.content.Intent;
			hasCategory(arg1: java.lang.String): boolean;
			hasCategory(arg1: string): boolean;
			addCategory(arg1: java.lang.String): android.content.Intent;
			addCategory(arg1: string): android.content.Intent;
			static getIntentOld(arg1: java.lang.String): android.content.Intent;
			static getIntentOld(arg1: string): android.content.Intent;
			getShortExtra(arg1: java.lang.String, arg2: native.Short): number;
			getShortExtra(arg1: string, arg2: native.Short): number;
			putExtras(arg1: android.content.Intent): android.content.Intent;
			putExtras(arg1: android.os.Bundle): android.content.Intent;
			removeExtra(arg1: java.lang.String): void;
			removeExtra(arg1: string): void;
			setClipData(arg1: android.content.ClipData): void;
			getIntExtra(arg1: java.lang.String, arg2: number): number;
			getIntExtra(arg1: string, arg2: number): number;
			static parseUri(arg1: java.lang.String, arg2: number): android.content.Intent;
			static parseUri(arg1: string, arg2: number): android.content.Intent;
			setClass(arg1: android.content.Context, arg2: java.lang.Class<any>): android.content.Intent;
			filterEquals(arg1: android.content.Intent): boolean;
			hasExtra(arg1: java.lang.String): boolean;
			hasExtra(arg1: string): boolean;
			getByteExtra(arg1: java.lang.String, arg2: native.Byte): number;
			getByteExtra(arg1: string, arg2: native.Byte): number;
			static createChooser(arg1: android.content.Intent, arg2: java.lang.ICharSequence): android.content.Intent;
			static createChooser(arg1: android.content.Intent, arg2: string): android.content.Intent;
			cloneFilter(): android.content.Intent;
			getDataString(): string;
			setPackage(arg1: java.lang.String): android.content.Intent;
			setPackage(arg1: string): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: native.Array<native.Byte>): android.content.Intent;
			putExtra(arg1: string, arg2: native.Array<native.Byte>): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: java.lang.String): android.content.Intent;
			putExtra(arg1: string, arg2: string): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: boolean): android.content.Intent;
			putExtra(arg1: string, arg2: boolean): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: android.os.IParcelable): android.content.Intent;
			putExtra(arg1: string, arg2: android.os.IParcelable): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: java.lang.ICharSequence): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: native.Byte): android.content.Intent;
			putExtra(arg1: string, arg2: native.Byte): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: java.io.ISerializable): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: number): android.content.Intent;
			putExtra(arg1: string, arg2: number): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: string): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: native.Short): android.content.Intent;
			putExtra(arg1: string, arg2: native.Short): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: native.Double): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: native.Float): android.content.Intent;
			putExtra(arg1: string, arg2: native.Float): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: native.Long): android.content.Intent;
			putExtra(arg1: string, arg2: native.Long): android.content.Intent;
			putExtra(arg1: java.lang.String, arg2: android.os.Bundle): android.content.Intent;
			putExtra(arg1: string, arg2: android.os.Bundle): android.content.Intent;
			replaceExtras(arg1: android.os.Bundle): android.content.Intent;
			replaceExtras(arg1: android.content.Intent): android.content.Intent;
			getCategories(): java.util.ISet<string>;
			resolveType(arg1: android.content.Context): string;
			resolveType(arg1: android.content.ContentResolver): string;
			getLongExtra(arg1: java.lang.String, arg2: native.Long): any;
			getLongExtra(arg1: string, arg2: native.Long): any;
			getCharExtra(arg1: java.lang.String, arg2: string): string;
			getCharExtra(arg1: string, arg2: string): string;
			getFloatExtra(arg1: java.lang.String, arg2: native.Float): number;
			getFloatExtra(arg1: string, arg2: native.Float): number;
			fillIn(arg1: android.content.Intent, arg2: number): number;
			static parseIntent(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser, arg3: android.util.IAttributeSet): android.content.Intent;
			getStringExtra(arg1: java.lang.String): string;
			getStringExtra(arg1: string): string;
			getByteArrayExtra(arg1: java.lang.String): native.Array<native.Byte>;
			getByteArrayExtra(arg1: string): native.Array<native.Byte>;
			getIntArrayExtra(arg1: java.lang.String): native.Array<number>;
			getIntArrayExtra(arg1: string): native.Array<number>;
			getDoubleArrayExtra(arg1: java.lang.String): native.Array<native.Double>;
			getDoubleArrayExtra(arg1: string): native.Array<native.Double>;
			getSerializableExtra(arg1: java.lang.String): java.io.ISerializable;
			getSerializableExtra(arg1: string): java.io.ISerializable;
			resolveTypeIfNeeded(arg1: android.content.ContentResolver): string;
			static makeMainActivity(arg1: android.content.ComponentName): android.content.Intent;
			getDoubleExtra(arg1: java.lang.String, arg2: native.Double): any;
			getDoubleExtra(arg1: string, arg2: number): any;
			getParcelableExtra<T extends android.os.IParcelable>(arg1: java.lang.String): T;
			getParcelableExtra<T extends android.os.IParcelable>(arg1: string): T;
			setExtrasClassLoader(arg1: java.lang.ClassLoader): void;
			getBooleanArrayExtra(arg1: java.lang.String): native.Array<boolean>;
			getBooleanArrayExtra(arg1: string): native.Array<boolean>;
			getCharArrayExtra(arg1: java.lang.String): native.Array<string>;
			getCharArrayExtra(arg1: string): native.Array<string>;
			getLongArrayExtra(arg1: java.lang.String): native.Array<native.Long>;
			getLongArrayExtra(arg1: string): native.Array<native.Long>;
			getStringArrayExtra(arg1: java.lang.String): native.Array<java.lang.String>;
			getStringArrayExtra(arg1: string): native.Array<java.lang.String>;
			getBundleExtra(arg1: java.lang.String): android.os.Bundle;
			getBundleExtra(arg1: string): android.os.Bundle;
			getSourceBounds(): android.graphics.Rect;
			getCharSequenceExtra(arg1: java.lang.String): java.lang.ICharSequence;
			getCharSequenceExtra(arg1: string): java.lang.ICharSequence;
			getShortArrayExtra(arg1: java.lang.String): native.Array<native.Short>;
			getShortArrayExtra(arg1: string): native.Array<native.Short>;
			getFloatArrayExtra(arg1: java.lang.String): native.Array<native.Float>;
			getFloatArrayExtra(arg1: string): native.Array<native.Float>;
			getBooleanExtra(arg1: java.lang.String, arg2: boolean): boolean;
			getBooleanExtra(arg1: string, arg2: boolean): boolean;
			resolveActivityInfo(arg1: android.content.pm.PackageManager, arg2: number): android.content.pm.ActivityInfo;
			setDataAndNormalize(arg1: android.net.Uri): android.content.Intent;
			removeCategory(arg1: java.lang.String): void;
			removeCategory(arg1: string): void;
			setTypeAndNormalize(arg1: java.lang.String): android.content.Intent;
			setTypeAndNormalize(arg1: string): android.content.Intent;
			setSourceBounds(arg1: android.graphics.Rect): void;
			setDataAndType(arg1: android.net.Uri, arg2: java.lang.String): android.content.Intent;
			setDataAndType(arg1: android.net.Uri, arg2: string): android.content.Intent;
			filterHashCode(): number;
			clone(): any;
			toString(): string;
			getPackage(): string;
			getType(): string;
			getScheme(): string;
			toURI(): string;
			getComponent(): android.content.ComponentName;
			setType(arg1: java.lang.String): android.content.Intent;
			setType(arg1: string): android.content.Intent;
			setComponent(arg1: android.content.ComponentName): android.content.Intent;
			getData(): android.net.Uri;
			setData(arg1: android.net.Uri): android.content.Intent;
			getFlags(): number;
			getAction(): string;
			setAction(arg1: java.lang.String): android.content.Intent;
			setAction(arg1: string): android.content.Intent;
			addFlags(arg1: number): android.content.Intent;
			static normalizeMimeType(arg1: java.lang.String): string;
			static normalizeMimeType(arg1: string): string;
		}
		export module Intent {
			export class ShortcutIconResource extends java.lang.Object implements android.os.IParcelable {
				constructor();
				packageName: java.lang.String;
				resourceName: java.lang.String;
				static CREATOR: android.os.Parcelable.ICreator<android.content.Intent.ShortcutIconResource>;
				static class: java.lang.Class<android.content.Intent.ShortcutIconResource>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				static fromContext(arg1: android.content.Context, arg2: number): android.content.Intent.ShortcutIconResource;
				toString(): string;
			}
			export class FilterComparison extends java.lang.Object {
				constructor(arg1: android.content.Intent);
				static class: java.lang.Class<android.content.Intent.FilterComparison>;
				getIntent(): android.content.Intent;
				hashCode(): number;
				equals(arg1: any): boolean;
			}
		}
		export class SyncContext extends java.lang.Object {
			static class: java.lang.Class<android.content.SyncContext>;
			onFinished(arg1: android.content.SyncResult): void;
			getSyncContextBinder(): android.os.IIBinder;
		}
		export class Loader<D> extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.content.Loader<any>>;
			ForceLoadContentObserver: { new (): android.content.Loader.ForceLoadContentObserver };
			onContentChanged(): void;
			registerListener(arg1: number, arg2: android.content.Loader.IOnLoadCompleteListener<D>): void;
			unregisterListener(arg1: android.content.Loader.IOnLoadCompleteListener<D>): void;
			isStarted(): boolean;
			startLoading(): void;
			forceLoad(): void;
			abandon(): void;
			isReset(): boolean;
			dataToString(arg1: D): string;
			deliverResult(arg1: D): void;
			isAbandoned(): boolean;
			cancelLoad(): boolean;
			registerOnLoadCanceledListener(arg1: android.content.Loader.IOnLoadCanceledListener<D>): void;
			unregisterOnLoadCanceledListener(arg1: android.content.Loader.IOnLoadCanceledListener<D>): void;
			takeContentChanged(): boolean;
			deliverCancellation(): void;
			toString(): string;
			getContext(): android.content.Context;
			getId(): number;
			reset(): void;
			dump(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dump(arg1: string, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			stopLoading(): void;
		}
		export module Loader {
			export interface IOnLoadCanceledListener<D> {
				onLoadCanceled(arg1: android.content.Loader<D>): void;
			}
			export class ForceLoadContentObserver extends android.database.ContentObserver {
				static class: java.lang.Class<android.content.Loader.ForceLoadContentObserver>;
				deliverSelfNotifications(): boolean;
				onChange(arg1: boolean): void;
				onChange(arg1: boolean, arg2: android.net.Uri): void;
			}
			export class OnLoadCompleteListener<D> implements android.content.Loader.IOnLoadCompleteListener<D> {
				constructor(implementation: android.content.Loader.IOnLoadCompleteListener<D>);
				onLoadComplete(arg1: android.content.Loader<D>, arg2: D): void;
			}
			export class OnLoadCanceledListener<D> implements android.content.Loader.IOnLoadCanceledListener<D> {
				constructor(implementation: android.content.Loader.IOnLoadCanceledListener<D>);
				onLoadCanceled(arg1: android.content.Loader<D>): void;
			}
			export interface IOnLoadCompleteListener<D> {
				onLoadComplete(arg1: android.content.Loader<D>, arg2: D): void;
			}
		}
		export class SyncInfo extends java.lang.Object implements android.os.IParcelable {
			account: android.accounts.Account;
			authority: java.lang.String;
			startTime: native.Long;
			static class: java.lang.Class<android.content.SyncInfo>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
		}
		export class ActivityNotFoundException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.content.ActivityNotFoundException>;
		}
		export class ContentQueryMap extends java.util.Observable {
			constructor(arg1: android.database.ICursor, arg2: java.lang.String, arg3: boolean, arg4: android.os.Handler);
			constructor(arg1: android.database.ICursor, arg2: string, arg3: boolean, arg4: android.os.Handler);
			static class: java.lang.Class<android.content.ContentQueryMap>;
			requery(): void;
			setKeepUpdated(arg1: boolean): void;
			close(): void;
			getValues(arg1: java.lang.String): android.content.ContentValues;
			getValues(arg1: string): android.content.ContentValues;
			getRows(): java.util.IMap<string, android.content.ContentValues>;
		}
		export class ClipboardManager extends android.text.ClipboardManager {
			static class: java.lang.Class<android.content.ClipboardManager>;
			Text: java.lang.ICharSequence;
			PrimaryClip: android.content.ClipData;
			hasText(): boolean;
			getPrimaryClipDescription(): android.content.ClipDescription;
			addPrimaryClipChangedListener(arg1: android.content.ClipboardManager.IOnPrimaryClipChangedListener): void;
			removePrimaryClipChangedListener(arg1: android.content.ClipboardManager.IOnPrimaryClipChangedListener): void;
			setPrimaryClip(arg1: android.content.ClipData): void;
			hasPrimaryClip(): boolean;
			getPrimaryClip(): android.content.ClipData;
			getText(): java.lang.ICharSequence;
			setText(arg1: java.lang.ICharSequence): void;
			setText(arg1: string): void;
		}
		export module ClipboardManager {
			export class OnPrimaryClipChangedListener implements android.content.ClipboardManager.IOnPrimaryClipChangedListener {
				constructor(implementation: android.content.ClipboardManager.IOnPrimaryClipChangedListener);
				onPrimaryClipChanged(): void;
			}
			export interface IOnPrimaryClipChangedListener {
				onPrimaryClipChanged(): void;
			}
		}
		export class IntentSender extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.content.IntentSender>;
			static class: java.lang.Class<android.content.IntentSender>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getCreatorPackage(): string;
			getTargetPackage(): string;
			getCreatorUserHandle(): android.os.UserHandle;
			getCreatorUid(): number;
			sendIntent(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: android.content.IntentSender.IOnFinished, arg5: android.os.Handler, arg6: java.lang.String): void;
			sendIntent(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: android.content.IntentSender.IOnFinished, arg5: android.os.Handler, arg6: string): void;
			sendIntent(arg1: android.content.Context, arg2: number, arg3: android.content.Intent, arg4: android.content.IntentSender.IOnFinished, arg5: android.os.Handler): void;
			static readIntentSenderOrNullFromParcel(arg1: android.os.Parcel): android.content.IntentSender;
			static writeIntentSenderOrNullToParcel(arg1: android.content.IntentSender, arg2: android.os.Parcel): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export module IntentSender {
			export class OnFinished implements android.content.IntentSender.IOnFinished {
				constructor(implementation: android.content.IntentSender.IOnFinished);
				onSendFinished(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: java.lang.String, arg5: android.os.Bundle): void;
				onSendFinished(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: string, arg5: android.os.Bundle): void;
			}
			export interface IOnFinished {
				onSendFinished(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: string, arg5: android.os.Bundle): void;
			}
			export class SendIntentException extends android.util.AndroidException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.Exception);
				static class: java.lang.Class<android.content.IntentSender.SendIntentException>;
			}
		}
		export class Context extends java.lang.Object {
			constructor();
			static MODE_PRIVATE: number;
			static MODE_WORLD_READABLE: number;
			static MODE_WORLD_WRITEABLE: number;
			static MODE_APPEND: number;
			static MODE_MULTI_PROCESS: number;
			static MODE_ENABLE_WRITE_AHEAD_LOGGING: number;
			static BIND_AUTO_CREATE: number;
			static BIND_DEBUG_UNBIND: number;
			static BIND_NOT_FOREGROUND: number;
			static BIND_ABOVE_CLIENT: number;
			static BIND_ALLOW_OOM_MANAGEMENT: number;
			static BIND_WAIVE_PRIORITY: number;
			static BIND_IMPORTANT: number;
			static BIND_ADJUST_WITH_ACTIVITY: number;
			static POWER_SERVICE: java.lang.String;
			static WINDOW_SERVICE: java.lang.String;
			static LAYOUT_INFLATER_SERVICE: java.lang.String;
			static ACCOUNT_SERVICE: java.lang.String;
			static ACTIVITY_SERVICE: java.lang.String;
			static ALARM_SERVICE: java.lang.String;
			static NOTIFICATION_SERVICE: java.lang.String;
			static ACCESSIBILITY_SERVICE: java.lang.String;
			static KEYGUARD_SERVICE: java.lang.String;
			static LOCATION_SERVICE: java.lang.String;
			static SEARCH_SERVICE: java.lang.String;
			static SENSOR_SERVICE: java.lang.String;
			static STORAGE_SERVICE: java.lang.String;
			static WALLPAPER_SERVICE: java.lang.String;
			static VIBRATOR_SERVICE: java.lang.String;
			static CONNECTIVITY_SERVICE: java.lang.String;
			static WIFI_SERVICE: java.lang.String;
			static WIFI_P2P_SERVICE: java.lang.String;
			static NSD_SERVICE: java.lang.String;
			static AUDIO_SERVICE: java.lang.String;
			static MEDIA_ROUTER_SERVICE: java.lang.String;
			static TELEPHONY_SERVICE: java.lang.String;
			static CLIPBOARD_SERVICE: java.lang.String;
			static INPUT_METHOD_SERVICE: java.lang.String;
			static TEXT_SERVICES_MANAGER_SERVICE: java.lang.String;
			static DROPBOX_SERVICE: java.lang.String;
			static DEVICE_POLICY_SERVICE: java.lang.String;
			static UI_MODE_SERVICE: java.lang.String;
			static DOWNLOAD_SERVICE: java.lang.String;
			static NFC_SERVICE: java.lang.String;
			static USB_SERVICE: java.lang.String;
			static INPUT_SERVICE: java.lang.String;
			static DISPLAY_SERVICE: java.lang.String;
			static USER_SERVICE: java.lang.String;
			static CONTEXT_INCLUDE_CODE: number;
			static CONTEXT_IGNORE_SECURITY: number;
			static CONTEXT_RESTRICTED: number;
			static class: java.lang.Class<android.content.Context>;
			enforceCallingOrSelfPermission(arg1: java.lang.String, arg2: java.lang.String): void;
			enforceCallingOrSelfPermission(arg1: string, arg2: string): void;
			getWallpaperDesiredMinimumHeight(): number;
			sendStickyOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: java.lang.String, arg7: android.os.Bundle): void;
			sendStickyOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: string, arg7: android.os.Bundle): void;
			getWallpaperDesiredMinimumWidth(): number;
			checkCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number): number;
			enforceCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number, arg3: java.lang.String): void;
			enforceCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number, arg3: string): void;
			openFileOutput(arg1: java.lang.String, arg2: number): java.io.FileOutputStream;
			openFileOutput(arg1: string, arg2: number): java.io.FileOutputStream;
			unregisterReceiver(arg1: android.content.BroadcastReceiver): void;
			getExternalCacheDir(): java.io.File;
			openOrCreateDatabase(arg1: java.lang.String, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: string, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: java.lang.String, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: string, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
			startIntentSender(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: number, arg5: number): void;
			startIntentSender(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: number, arg5: number, arg6: android.os.Bundle): void;
			clearWallpaper(): void;
			getDatabasePath(arg1: java.lang.String): java.io.File;
			getDatabasePath(arg1: string): java.io.File;
			sendStickyBroadcast(arg1: android.content.Intent): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: java.lang.String): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: string): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: java.lang.String, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: java.lang.String, arg7: android.os.Bundle): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: string, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: string, arg7: android.os.Bundle): void;
			sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
			sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: java.lang.String): void;
			sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: string): void;
			removeStickyBroadcast(arg1: android.content.Intent): void;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter): android.content.Intent;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter, arg3: java.lang.String, arg4: android.os.Handler): android.content.Intent;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter, arg3: string, arg4: android.os.Handler): android.content.Intent;
			startInstrumentation(arg1: android.content.ComponentName, arg2: java.lang.String, arg3: android.os.Bundle): boolean;
			startInstrumentation(arg1: android.content.ComponentName, arg2: string, arg3: android.os.Bundle): boolean;
			getPackageCodePath(): string;
			getApplicationInfo(): android.content.pm.ApplicationInfo;
			enforcePermission(arg1: java.lang.String, arg2: number, arg3: number, arg4: java.lang.String): void;
			enforcePermission(arg1: string, arg2: number, arg3: number, arg4: string): void;
			grantUriPermission(arg1: java.lang.String, arg2: android.net.Uri, arg3: number): void;
			grantUriPermission(arg1: string, arg2: android.net.Uri, arg3: number): void;
			revokeUriPermission(arg1: android.net.Uri, arg2: number): void;
			getSystemService(arg1: java.lang.String): any;
			getSystemService(arg1: string): any;
			getApplicationContext(): android.content.Context;
			getSharedPreferences(arg1: java.lang.String, arg2: number): android.content.ISharedPreferences;
			getSharedPreferences(arg1: string, arg2: number): android.content.ISharedPreferences;
			getExternalFilesDir(arg1: java.lang.String): java.io.File;
			getExternalFilesDir(arg1: string): java.io.File;
			deleteDatabase(arg1: java.lang.String): boolean;
			deleteDatabase(arg1: string): boolean;
			startActivities(arg1: native.Array<android.content.Intent>, arg2: android.os.Bundle): void;
			startActivities(arg1: native.Array<android.content.Intent>): void;
			getFileStreamPath(arg1: java.lang.String): java.io.File;
			getFileStreamPath(arg1: string): java.io.File;
			getPackageManager(): android.content.pm.PackageManager;
			getContentResolver(): android.content.ContentResolver;
			getObbDir(): java.io.File;
			getCacheDir(): java.io.File;
			getDir(arg1: java.lang.String, arg2: number): java.io.File;
			getDir(arg1: string, arg2: number): java.io.File;
			getFilesDir(): java.io.File;
			databaseList(): native.Array<java.lang.String>;
			getAssets(): android.content.res.AssetManager;
			deleteFile(arg1: java.lang.String): boolean;
			deleteFile(arg1: string): boolean;
			openFileInput(arg1: java.lang.String): java.io.FileInputStream;
			openFileInput(arg1: string): java.io.FileInputStream;
			fileList(): native.Array<java.lang.String>;
			setTheme(arg1: number): void;
			getMainLooper(): android.os.Looper;
			peekWallpaper(): android.graphics.drawable.Drawable;
			sendBroadcast(arg1: android.content.Intent, arg2: java.lang.String): void;
			sendBroadcast(arg1: android.content.Intent, arg2: string): void;
			sendBroadcast(arg1: android.content.Intent): void;
			stopService(arg1: android.content.Intent): boolean;
			startActivity(arg1: android.content.Intent, arg2: android.os.Bundle): void;
			startActivity(arg1: android.content.Intent): void;
			isRestricted(): boolean;
			setWallpaper(arg1: android.graphics.Bitmap): void;
			setWallpaper(arg1: java.io.InputStream): void;
			startService(arg1: android.content.Intent): android.content.ComponentName;
			getWallpaper(): android.graphics.drawable.Drawable;
			unbindService(arg1: android.content.IServiceConnection): void;
			bindService(arg1: android.content.Intent, arg2: android.content.IServiceConnection, arg3: number): boolean;
			sendOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: java.lang.String, arg4: android.content.BroadcastReceiver, arg5: android.os.Handler, arg6: number, arg7: java.lang.String, arg8: android.os.Bundle): void;
			sendOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: string, arg4: android.content.BroadcastReceiver, arg5: android.os.Handler, arg6: number, arg7: string, arg8: android.os.Bundle): void;
			getPackageResourcePath(): string;
			sendStickyOrderedBroadcast(arg1: android.content.Intent, arg2: android.content.BroadcastReceiver, arg3: android.os.Handler, arg4: number, arg5: java.lang.String, arg6: android.os.Bundle): void;
			sendStickyOrderedBroadcast(arg1: android.content.Intent, arg2: android.content.BroadcastReceiver, arg3: android.os.Handler, arg4: number, arg5: string, arg6: android.os.Bundle): void;
			sendStickyBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
			checkCallingPermission(arg1: java.lang.String): number;
			checkCallingPermission(arg1: string): number;
			checkCallingOrSelfPermission(arg1: java.lang.String): number;
			checkCallingOrSelfPermission(arg1: string): number;
			removeStickyBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
			enforceCallingPermission(arg1: java.lang.String, arg2: java.lang.String): void;
			enforceCallingPermission(arg1: string, arg2: string): void;
			registerComponentCallbacks(arg1: android.content.IComponentCallbacks): void;
			obtainStyledAttributes(arg1: android.util.IAttributeSet, arg2: native.Array<number>, arg3: number, arg4: number): android.content.res.TypedArray;
			obtainStyledAttributes(arg1: android.util.IAttributeSet, arg2: native.Array<number>): android.content.res.TypedArray;
			obtainStyledAttributes(arg1: native.Array<number>): android.content.res.TypedArray;
			obtainStyledAttributes(arg1: number, arg2: native.Array<number>): android.content.res.TypedArray;
			unregisterComponentCallbacks(arg1: android.content.IComponentCallbacks): void;
			enforceCallingUriPermission(arg1: android.net.Uri, arg2: number, arg3: java.lang.String): void;
			enforceCallingUriPermission(arg1: android.net.Uri, arg2: number, arg3: string): void;
			createConfigurationContext(arg1: android.content.res.Configuration): android.content.Context;
			checkCallingUriPermission(arg1: android.net.Uri, arg2: number): number;
			checkUriPermission(arg1: android.net.Uri, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number, arg6: number): number;
			checkUriPermission(arg1: android.net.Uri, arg2: string, arg3: string, arg4: number, arg5: number, arg6: number): number;
			checkUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number): number;
			enforceUriPermission(arg1: android.net.Uri, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number, arg6: number, arg7: java.lang.String): void;
			enforceUriPermission(arg1: android.net.Uri, arg2: string, arg3: string, arg4: number, arg5: number, arg6: number, arg7: string): void;
			enforceUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number, arg5: java.lang.String): void;
			enforceUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number, arg5: string): void;
			createDisplayContext(arg1: android.view.Display): android.content.Context;
			createPackageContext(arg1: java.lang.String, arg2: number): android.content.Context;
			createPackageContext(arg1: string, arg2: number): android.content.Context;
			checkPermission(arg1: java.lang.String, arg2: number, arg3: number): number;
			checkPermission(arg1: string, arg2: number, arg3: number): number;
			getClassLoader(): java.lang.ClassLoader;
			getResources(): android.content.res.Resources;
			getString(arg1: number, arg2: native.Array<any>): string;
			getString(arg1: number): string;
			getPackageName(): string;
			getText(arg1: number): java.lang.ICharSequence;
			getTheme(): android.content.res.Resources.Theme;
		}
		export class ClipDescription extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: java.lang.ICharSequence, arg2: native.Array<java.lang.String>);
			constructor(arg1: string, arg2: native.Array<java.lang.String>);
			constructor(arg1: android.content.ClipDescription);
			static MIMETYPE_TEXT_PLAIN: java.lang.String;
			static MIMETYPE_TEXT_HTML: java.lang.String;
			static MIMETYPE_TEXT_URILIST: java.lang.String;
			static MIMETYPE_TEXT_INTENT: java.lang.String;
			static CREATOR: android.os.Parcelable.ICreator<android.content.ClipDescription>;
			static class: java.lang.Class<android.content.ClipDescription>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			hasMimeType(arg1: java.lang.String): boolean;
			hasMimeType(arg1: string): boolean;
			static compareMimeTypes(arg1: java.lang.String, arg2: java.lang.String): boolean;
			static compareMimeTypes(arg1: string, arg2: string): boolean;
			filterMimeTypes(arg1: java.lang.String): native.Array<java.lang.String>;
			filterMimeTypes(arg1: string): native.Array<java.lang.String>;
			getMimeTypeCount(): number;
			toString(): string;
			getLabel(): java.lang.ICharSequence;
			getMimeType(arg1: number): string;
		}
		export interface ISharedPreferences {
			getAll(): java.util.IMap<string, any>;
			edit(): android.content.SharedPreferences.IEditor;
			getStringSet(arg1: string, arg2: java.util.ISet<string>): java.util.ISet<string>;
			registerOnSharedPreferenceChangeListener(arg1: android.content.SharedPreferences.IOnSharedPreferenceChangeListener): void;
			unregisterOnSharedPreferenceChangeListener(arg1: android.content.SharedPreferences.IOnSharedPreferenceChangeListener): void;
			contains(arg1: string): boolean;
			getBoolean(arg1: string, arg2: boolean): boolean;
			getFloat(arg1: string, arg2: native.Float): number;
			getInt(arg1: string, arg2: number): number;
			getLong(arg1: string, arg2: native.Long): any;
			getString(arg1: string, arg2: string): string;
		}
		export class ServiceConnection implements android.content.IServiceConnection {
			constructor(implementation: android.content.IServiceConnection);
			onServiceConnected(arg1: android.content.ComponentName, arg2: android.os.IIBinder): void;
			onServiceDisconnected(arg1: android.content.ComponentName): void;
		}
		export class ComponentCallbacks2 implements android.content.IComponentCallbacks, android.content.IComponentCallbacks2 {
			constructor(implementation: android.content.IComponentCallbacks2);
			static TRIM_MEMORY_COMPLETE: number;
			static TRIM_MEMORY_MODERATE: number;
			static TRIM_MEMORY_BACKGROUND: number;
			static TRIM_MEMORY_UI_HIDDEN: number;
			static TRIM_MEMORY_RUNNING_CRITICAL: number;
			static TRIM_MEMORY_RUNNING_LOW: number;
			static TRIM_MEMORY_RUNNING_MODERATE: number;
			onTrimMemory(arg1: number): void;
			onLowMemory(): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
		}
		export class ContentProviderOperation extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.content.ContentProviderOperation>;
			static class: java.lang.Class<android.content.ContentProviderOperation>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			apply(arg1: android.content.ContentProvider, arg2: native.Array<android.content.ContentProviderResult>, arg3: number): android.content.ContentProviderResult;
			getUri(): android.net.Uri;
			resolveValueBackReferences(arg1: native.Array<android.content.ContentProviderResult>, arg2: number): android.content.ContentValues;
			static newInsert(arg1: android.net.Uri): android.content.ContentProviderOperation.Builder;
			static newDelete(arg1: android.net.Uri): android.content.ContentProviderOperation.Builder;
			static newUpdate(arg1: android.net.Uri): android.content.ContentProviderOperation.Builder;
			resolveSelectionArgsBackReferences(arg1: native.Array<android.content.ContentProviderResult>, arg2: number): native.Array<java.lang.String>;
			isWriteOperation(): boolean;
			isYieldAllowed(): boolean;
			isReadOperation(): boolean;
			static newAssertQuery(arg1: android.net.Uri): android.content.ContentProviderOperation.Builder;
			toString(): string;
		}
		export module ContentProviderOperation {
			export class Builder extends java.lang.Object {
				static class: java.lang.Class<android.content.ContentProviderOperation.Builder>;
				withValueBackReference(arg1: java.lang.String, arg2: number): android.content.ContentProviderOperation.Builder;
				withValueBackReference(arg1: string, arg2: number): android.content.ContentProviderOperation.Builder;
				withSelectionBackReference(arg1: number, arg2: number): android.content.ContentProviderOperation.Builder;
				withValueBackReferences(arg1: android.content.ContentValues): android.content.ContentProviderOperation.Builder;
				withValues(arg1: android.content.ContentValues): android.content.ContentProviderOperation.Builder;
				withValue(arg1: java.lang.String, arg2: any): android.content.ContentProviderOperation.Builder;
				withValue(arg1: string, arg2: any): android.content.ContentProviderOperation.Builder;
				withSelection(arg1: java.lang.String, arg2: native.Array<java.lang.String>): android.content.ContentProviderOperation.Builder;
				withSelection(arg1: string, arg2: native.Array<java.lang.String>): android.content.ContentProviderOperation.Builder;
				withYieldAllowed(arg1: boolean): android.content.ContentProviderOperation.Builder;
				withExpectedCount(arg1: number): android.content.ContentProviderOperation.Builder;
				build(): android.content.ContentProviderOperation;
			}
		}
		export class CursorLoader extends android.content.AsyncTaskLoader<android.database.ICursor> {
			constructor(arg1: android.content.Context, arg2: android.net.Uri, arg3: native.Array<java.lang.String>, arg4: java.lang.String, arg5: native.Array<java.lang.String>, arg6: java.lang.String);
			constructor(arg1: android.content.Context, arg2: android.net.Uri, arg3: native.Array<java.lang.String>, arg4: string, arg5: native.Array<java.lang.String>, arg6: string);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.content.CursorLoader>;
			Projection: native.Array<java.lang.String>;
			SortOrder: string;
			Uri: android.net.Uri;
			SelectionArgs: native.Array<java.lang.String>;
			Selection: string;
			setUri(arg1: android.net.Uri): void;
			setSelection(arg1: java.lang.String): void;
			setSelection(arg1: string): void;
			getUri(): android.net.Uri;
			setProjection(arg1: native.Array<java.lang.String>): void;
			cancelLoadInBackground(): void;
			deliverResult(arg1: any): void;
			deliverResult(arg1: android.database.ICursor): void;
			setSortOrder(arg1: java.lang.String): void;
			setSortOrder(arg1: string): void;
			getProjection(): native.Array<java.lang.String>;
			onCanceled(arg1: any): void;
			onCanceled(arg1: android.database.ICursor): void;
			loadInBackground(): android.database.ICursor;
			getSelectionArgs(): native.Array<java.lang.String>;
			setSelectionArgs(arg1: native.Array<java.lang.String>): void;
			dump(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dump(arg1: string, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			getSelection(): string;
			getSortOrder(): string;
		}
		export class ComponentCallbacks implements android.content.IComponentCallbacks {
			constructor(implementation: android.content.IComponentCallbacks);
			onLowMemory(): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
		}
		export class EntityIterator implements java.util.IIterator<android.content.Entity>, android.content.IEntityIterator {
			constructor(implementation: android.content.IEntityIterator);
			close(): void;
			reset(): void;
			hasNext(): boolean;
			next(): android.content.Entity;
			remove(): void;
		}
		export class ContentResolver extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static SYNC_EXTRAS_ACCOUNT: java.lang.String;
			static SYNC_EXTRAS_EXPEDITED: java.lang.String;
			static SYNC_EXTRAS_FORCE: java.lang.String;
			static SYNC_EXTRAS_IGNORE_SETTINGS: java.lang.String;
			static SYNC_EXTRAS_IGNORE_BACKOFF: java.lang.String;
			static SYNC_EXTRAS_DO_NOT_RETRY: java.lang.String;
			static SYNC_EXTRAS_MANUAL: java.lang.String;
			static SYNC_EXTRAS_UPLOAD: java.lang.String;
			static SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS: java.lang.String;
			static SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS: java.lang.String;
			static SYNC_EXTRAS_INITIALIZE: java.lang.String;
			static SCHEME_CONTENT: java.lang.String;
			static SCHEME_ANDROID_RESOURCE: java.lang.String;
			static SCHEME_FILE: java.lang.String;
			static CURSOR_ITEM_BASE_TYPE: java.lang.String;
			static CURSOR_DIR_BASE_TYPE: java.lang.String;
			static SYNC_OBSERVER_TYPE_SETTINGS: number;
			static SYNC_OBSERVER_TYPE_PENDING: number;
			static SYNC_OBSERVER_TYPE_ACTIVE: number;
			static class: java.lang.Class<android.content.ContentResolver>;
			call(arg1: android.net.Uri, arg2: java.lang.String, arg3: java.lang.String, arg4: android.os.Bundle): android.os.Bundle;
			call(arg1: android.net.Uri, arg2: string, arg3: string, arg4: android.os.Bundle): android.os.Bundle;
			bulkInsert(arg1: android.net.Uri, arg2: native.Array<android.content.ContentValues>): number;
			applyBatch(arg1: java.lang.String, arg2: java.util.ArrayList<android.content.ContentProviderOperation>): native.Array<android.content.ContentProviderResult>;
			applyBatch(arg1: string, arg2: java.util.ArrayList<android.content.ContentProviderOperation>): native.Array<android.content.ContentProviderResult>;
			notifyChange(arg1: android.net.Uri, arg2: android.database.ContentObserver): void;
			notifyChange(arg1: android.net.Uri, arg2: android.database.ContentObserver, arg3: boolean): void;
			startSync(arg1: android.net.Uri, arg2: android.os.Bundle): void;
			static requestSync(arg1: android.accounts.Account, arg2: java.lang.String, arg3: android.os.Bundle): void;
			static requestSync(arg1: android.accounts.Account, arg2: string, arg3: android.os.Bundle): void;
			cancelSync(arg1: android.net.Uri): void;
			static cancelSync(arg1: android.accounts.Account, arg2: java.lang.String): void;
			static cancelSync(arg1: android.accounts.Account, arg2: string): void;
			unregisterContentObserver(arg1: android.database.ContentObserver): void;
			registerContentObserver(arg1: android.net.Uri, arg2: boolean, arg3: android.database.ContentObserver): void;
			openOutputStream(arg1: android.net.Uri, arg2: java.lang.String): java.io.OutputStream;
			openOutputStream(arg1: android.net.Uri, arg2: string): java.io.OutputStream;
			openOutputStream(arg1: android.net.Uri): java.io.OutputStream;
			static getCurrentSync(): android.content.SyncInfo;
			static setSyncAutomatically(arg1: android.accounts.Account, arg2: java.lang.String, arg3: boolean): void;
			static setSyncAutomatically(arg1: android.accounts.Account, arg2: string, arg3: boolean): void;
			static getCurrentSyncs(): java.util.IList<android.content.SyncInfo>;
			openInputStream(arg1: android.net.Uri): java.io.InputStream;
			static getSyncAdapterTypes(): native.Array<android.content.SyncAdapterType>;
			static removePeriodicSync(arg1: android.accounts.Account, arg2: java.lang.String, arg3: android.os.Bundle): void;
			static removePeriodicSync(arg1: android.accounts.Account, arg2: string, arg3: android.os.Bundle): void;
			static getPeriodicSyncs(arg1: android.accounts.Account, arg2: java.lang.String): java.util.IList<android.content.PeriodicSync>;
			static getPeriodicSyncs(arg1: android.accounts.Account, arg2: string): java.util.IList<android.content.PeriodicSync>;
			static addPeriodicSync(arg1: android.accounts.Account, arg2: java.lang.String, arg3: android.os.Bundle, arg4: native.Long): void;
			static addPeriodicSync(arg1: android.accounts.Account, arg2: string, arg3: android.os.Bundle, arg4: native.Long): void;
			static getSyncAutomatically(arg1: android.accounts.Account, arg2: java.lang.String): boolean;
			static getSyncAutomatically(arg1: android.accounts.Account, arg2: string): boolean;
			openFileDescriptor(arg1: android.net.Uri, arg2: java.lang.String): android.os.ParcelFileDescriptor;
			openFileDescriptor(arg1: android.net.Uri, arg2: string): android.os.ParcelFileDescriptor;
			getStreamTypes(arg1: android.net.Uri, arg2: java.lang.String): native.Array<java.lang.String>;
			getStreamTypes(arg1: android.net.Uri, arg2: string): native.Array<java.lang.String>;
			acquireUnstableContentProviderClient(arg1: java.lang.String): android.content.ContentProviderClient;
			acquireUnstableContentProviderClient(arg1: string): android.content.ContentProviderClient;
			acquireUnstableContentProviderClient(arg1: android.net.Uri): android.content.ContentProviderClient;
			acquireContentProviderClient(arg1: android.net.Uri): android.content.ContentProviderClient;
			acquireContentProviderClient(arg1: java.lang.String): android.content.ContentProviderClient;
			acquireContentProviderClient(arg1: string): android.content.ContentProviderClient;
			static addStatusChangeListener(arg1: number, arg2: android.content.ISyncStatusObserver): any;
			static setMasterSyncAutomatically(arg1: boolean): void;
			static validateSyncExtrasBundle(arg1: android.os.Bundle): void;
			static getMasterSyncAutomatically(): boolean;
			openTypedAssetFileDescriptor(arg1: android.net.Uri, arg2: java.lang.String, arg3: android.os.Bundle): android.content.res.AssetFileDescriptor;
			openTypedAssetFileDescriptor(arg1: android.net.Uri, arg2: string, arg3: android.os.Bundle): android.content.res.AssetFileDescriptor;
			openAssetFileDescriptor(arg1: android.net.Uri, arg2: java.lang.String): android.content.res.AssetFileDescriptor;
			openAssetFileDescriptor(arg1: android.net.Uri, arg2: string): android.content.res.AssetFileDescriptor;
			static removeStatusChangeListener(arg1: any): void;
			static setIsSyncable(arg1: android.accounts.Account, arg2: java.lang.String, arg3: number): void;
			static setIsSyncable(arg1: android.accounts.Account, arg2: string, arg3: number): void;
			static isSyncPending(arg1: android.accounts.Account, arg2: java.lang.String): boolean;
			static isSyncPending(arg1: android.accounts.Account, arg2: string): boolean;
			static isSyncActive(arg1: android.accounts.Account, arg2: java.lang.String): boolean;
			static isSyncActive(arg1: android.accounts.Account, arg2: string): boolean;
			static getIsSyncable(arg1: android.accounts.Account, arg2: java.lang.String): number;
			static getIsSyncable(arg1: android.accounts.Account, arg2: string): number;
			getType(arg1: android.net.Uri): string;
			delete(arg1: android.net.Uri, arg2: java.lang.String, arg3: native.Array<java.lang.String>): number;
			delete(arg1: android.net.Uri, arg2: string, arg3: native.Array<java.lang.String>): number;
			insert(arg1: android.net.Uri, arg2: android.content.ContentValues): android.net.Uri;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: android.os.CancellationSignal): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: android.os.CancellationSignal): android.database.ICursor;
			update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: java.lang.String, arg4: native.Array<java.lang.String>): number;
			update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: string, arg4: native.Array<java.lang.String>): number;
		}
		export class SearchRecentSuggestionsProvider extends android.content.ContentProvider {
			constructor();
			static DATABASE_MODE_QUERIES: number;
			static DATABASE_MODE_2LINES: number;
			static class: java.lang.Class<android.content.SearchRecentSuggestionsProvider>;
			onCreate(): boolean;
			getType(arg1: android.net.Uri): string;
			delete(arg1: android.net.Uri, arg2: java.lang.String, arg3: native.Array<java.lang.String>): number;
			delete(arg1: android.net.Uri, arg2: string, arg3: native.Array<java.lang.String>): number;
			insert(arg1: android.net.Uri, arg2: android.content.ContentValues): android.net.Uri;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string): android.database.ICursor;
			update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: java.lang.String, arg4: native.Array<java.lang.String>): number;
			update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: string, arg4: native.Array<java.lang.String>): number;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: android.os.CancellationSignal): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: android.os.CancellationSignal): android.database.ICursor;
		}
		export class SyncResult extends java.lang.Object implements android.os.IParcelable {
			constructor();
			syncAlreadyInProgress: boolean;
			tooManyDeletions: boolean;
			tooManyRetries: boolean;
			databaseError: boolean;
			fullSyncRequested: boolean;
			partialSyncUnavailable: boolean;
			moreRecordsToGet: boolean;
			delayUntil: native.Long;
			stats: android.content.SyncStats;
			static ALREADY_IN_PROGRESS: android.content.SyncResult;
			static CREATOR: android.os.Parcelable.ICreator<android.content.SyncResult>;
			static class: java.lang.Class<android.content.SyncResult>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			hasHardError(): boolean;
			hasSoftError(): boolean;
			toDebugString(): string;
			madeSomeProgress(): boolean;
			toString(): string;
			clear(): void;
			hasError(): boolean;
		}
		export interface IEntityIterator extends java.util.IIterator<android.content.Entity> {
			close(): void;
			reset(): void;
			hasNext(): boolean;
			next(): android.content.Entity;
			remove(): void;
		}
		export class SyncStatusObserver implements android.content.ISyncStatusObserver {
			constructor(implementation: android.content.ISyncStatusObserver);
			onStatusChanged(arg1: number): void;
		}
		export class SyncStats extends java.lang.Object implements android.os.IParcelable {
			constructor();
			constructor(arg1: android.os.Parcel);
			numAuthExceptions: native.Long;
			numIoExceptions: native.Long;
			numParseExceptions: native.Long;
			numConflictDetectedExceptions: native.Long;
			numInserts: native.Long;
			numUpdates: native.Long;
			numDeletes: native.Long;
			numEntries: native.Long;
			numSkippedEntries: native.Long;
			static CREATOR: android.os.Parcelable.ICreator<android.content.SyncStats>;
			static class: java.lang.Class<android.content.SyncStats>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			toString(): string;
			clear(): void;
		}
		export class AbstractThreadedSyncAdapter extends java.lang.Object {
			constructor(arg1: android.content.Context, arg2: boolean, arg3: boolean);
			constructor(arg1: android.content.Context, arg2: boolean);
			static LOG_SYNC_DETAILS: number;
			static class: java.lang.Class<android.content.AbstractThreadedSyncAdapter>;
			onPerformSync(arg1: android.accounts.Account, arg2: android.os.Bundle, arg3: java.lang.String, arg4: android.content.ContentProviderClient, arg5: android.content.SyncResult): void;
			onPerformSync(arg1: android.accounts.Account, arg2: android.os.Bundle, arg3: string, arg4: android.content.ContentProviderClient, arg5: android.content.SyncResult): void;
			onSyncCanceled(arg1: java.lang.Thread): void;
			onSyncCanceled(): void;
			getSyncAdapterBinder(): android.os.IIBinder;
			getContext(): android.content.Context;
		}
		export class ContentProvider extends java.lang.Object implements android.content.IComponentCallbacks2 {
			constructor();
			static class: java.lang.Class<android.content.ContentProvider>;
			call(arg1: java.lang.String, arg2: java.lang.String, arg3: android.os.Bundle): android.os.Bundle;
			call(arg1: string, arg2: string, arg3: android.os.Bundle): android.os.Bundle;
			onTrimMemory(arg1: number): void;
			onLowMemory(): void;
			onCreate(): boolean;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
			bulkInsert(arg1: android.net.Uri, arg2: native.Array<android.content.ContentValues>): number;
			attachInfo(arg1: android.content.Context, arg2: android.content.pm.ProviderInfo): void;
			applyBatch(arg1: java.util.ArrayList<android.content.ContentProviderOperation>): native.Array<android.content.ContentProviderResult>;
			openAssetFile(arg1: android.net.Uri, arg2: java.lang.String): android.content.res.AssetFileDescriptor;
			openAssetFile(arg1: android.net.Uri, arg2: string): android.content.res.AssetFileDescriptor;
			openFile(arg1: android.net.Uri, arg2: java.lang.String): android.os.ParcelFileDescriptor;
			openFile(arg1: android.net.Uri, arg2: string): android.os.ParcelFileDescriptor;
			getStreamTypes(arg1: android.net.Uri, arg2: java.lang.String): native.Array<java.lang.String>;
			getStreamTypes(arg1: android.net.Uri, arg2: string): native.Array<java.lang.String>;
			getReadPermission(): string;
			getWritePermission(): string;
			openPipeHelper<T>(arg1: android.net.Uri, arg2: java.lang.String, arg3: android.os.Bundle, arg4: T, arg5: android.content.ContentProvider.IPipeDataWriter<T>): android.os.ParcelFileDescriptor;
			openPipeHelper<T>(arg1: android.net.Uri, arg2: string, arg3: android.os.Bundle, arg4: T, arg5: android.content.ContentProvider.IPipeDataWriter<T>): android.os.ParcelFileDescriptor;
			openTypedAssetFile(arg1: android.net.Uri, arg2: java.lang.String, arg3: android.os.Bundle): android.content.res.AssetFileDescriptor;
			openTypedAssetFile(arg1: android.net.Uri, arg2: string, arg3: android.os.Bundle): android.content.res.AssetFileDescriptor;
			getPathPermissions(): native.Array<android.content.pm.PathPermission>;
			getContext(): android.content.Context;
			getType(arg1: android.net.Uri): string;
			delete(arg1: android.net.Uri, arg2: java.lang.String, arg3: native.Array<java.lang.String>): number;
			delete(arg1: android.net.Uri, arg2: string, arg3: native.Array<java.lang.String>): number;
			insert(arg1: android.net.Uri, arg2: android.content.ContentValues): android.net.Uri;
			shutdown(): void;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: java.lang.String, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: android.os.CancellationSignal): android.database.ICursor;
			query(arg1: android.net.Uri, arg2: native.Array<java.lang.String>, arg3: string, arg4: native.Array<java.lang.String>, arg5: string, arg6: android.os.CancellationSignal): android.database.ICursor;
			update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: java.lang.String, arg4: native.Array<java.lang.String>): number;
			update(arg1: android.net.Uri, arg2: android.content.ContentValues, arg3: string, arg4: native.Array<java.lang.String>): number;
		}
		export module ContentProvider {
			export class PipeDataWriter<T> implements android.content.ContentProvider.IPipeDataWriter<T> {
				constructor(implementation: android.content.ContentProvider.IPipeDataWriter<T>);
				writeDataToPipe(arg1: android.os.ParcelFileDescriptor, arg2: android.net.Uri, arg3: java.lang.String, arg4: android.os.Bundle, arg5: T): void;
				writeDataToPipe(arg1: android.os.ParcelFileDescriptor, arg2: android.net.Uri, arg3: string, arg4: android.os.Bundle, arg5: T): void;
			}
			export interface IPipeDataWriter<T> {
				writeDataToPipe(arg1: android.os.ParcelFileDescriptor, arg2: android.net.Uri, arg3: string, arg4: android.os.Bundle, arg5: T): void;
			}
		}
		export class ClipData extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.content.ClipDescription, arg2: android.content.ClipData.Item);
			constructor(arg1: android.content.ClipData);
			constructor(arg1: java.lang.ICharSequence, arg2: native.Array<java.lang.String>, arg3: android.content.ClipData.Item);
			constructor(arg1: string, arg2: native.Array<java.lang.String>, arg3: android.content.ClipData.Item);
			static CREATOR: android.os.Parcelable.ICreator<android.content.ClipData>;
			static class: java.lang.Class<android.content.ClipData>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			static newIntent(arg1: java.lang.ICharSequence, arg2: android.content.Intent): android.content.ClipData;
			static newIntent(arg1: string, arg2: android.content.Intent): android.content.ClipData;
			static newHtmlText(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence, arg3: java.lang.String): android.content.ClipData;
			static newHtmlText(arg1: string, arg2: string, arg3: string): android.content.ClipData;
			static newPlainText(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence): android.content.ClipData;
			static newPlainText(arg1: string, arg2: string): android.content.ClipData;
			static newUri(arg1: android.content.ContentResolver, arg2: java.lang.ICharSequence, arg3: android.net.Uri): android.content.ClipData;
			static newUri(arg1: android.content.ContentResolver, arg2: string, arg3: android.net.Uri): android.content.ClipData;
			static newRawUri(arg1: java.lang.ICharSequence, arg2: android.net.Uri): android.content.ClipData;
			static newRawUri(arg1: string, arg2: android.net.Uri): android.content.ClipData;
			toString(): string;
			getItemCount(): number;
			addItem(arg1: android.content.ClipData.Item): void;
			getDescription(): android.content.ClipDescription;
			getItemAt(arg1: number): android.content.ClipData.Item;
		}
		export module ClipData {
			export class Item extends java.lang.Object {
				constructor(arg1: java.lang.ICharSequence);
				constructor(arg1: string);
				constructor(arg1: android.content.Intent);
				constructor(arg1: java.lang.ICharSequence, arg2: java.lang.String);
				constructor(arg1: string, arg2: string);
				constructor(arg1: java.lang.ICharSequence, arg2: android.content.Intent, arg3: android.net.Uri);
				constructor(arg1: string, arg2: android.content.Intent, arg3: android.net.Uri);
				constructor(arg1: java.lang.ICharSequence, arg2: java.lang.String, arg3: android.content.Intent, arg4: android.net.Uri);
				constructor(arg1: string, arg2: string, arg3: android.content.Intent, arg4: android.net.Uri);
				constructor(arg1: android.net.Uri);
				static class: java.lang.Class<android.content.ClipData.Item>;
				getIntent(): android.content.Intent;
				getUri(): android.net.Uri;
				getHtmlText(): string;
				coerceToText(arg1: android.content.Context): java.lang.ICharSequence;
				coerceToHtmlText(arg1: android.content.Context): string;
				coerceToStyledText(arg1: android.content.Context): java.lang.ICharSequence;
				toString(): string;
				getText(): java.lang.ICharSequence;
			}
		}
		export module pm {
			export class PackageManager extends java.lang.Object {
				constructor();
				static GET_ACTIVITIES: number;
				static GET_RECEIVERS: number;
				static GET_SERVICES: number;
				static GET_PROVIDERS: number;
				static GET_INSTRUMENTATION: number;
				static GET_INTENT_FILTERS: number;
				static GET_SIGNATURES: number;
				static GET_RESOLVED_FILTER: number;
				static GET_META_DATA: number;
				static GET_GIDS: number;
				static GET_DISABLED_COMPONENTS: number;
				static GET_SHARED_LIBRARY_FILES: number;
				static GET_URI_PERMISSION_PATTERNS: number;
				static GET_PERMISSIONS: number;
				static GET_UNINSTALLED_PACKAGES: number;
				static GET_CONFIGURATIONS: number;
				static MATCH_DEFAULT_ONLY: number;
				static PERMISSION_GRANTED: number;
				static PERMISSION_DENIED: number;
				static SIGNATURE_MATCH: number;
				static SIGNATURE_NEITHER_SIGNED: number;
				static SIGNATURE_FIRST_NOT_SIGNED: number;
				static SIGNATURE_SECOND_NOT_SIGNED: number;
				static SIGNATURE_NO_MATCH: number;
				static SIGNATURE_UNKNOWN_PACKAGE: number;
				static COMPONENT_ENABLED_STATE_DEFAULT: number;
				static COMPONENT_ENABLED_STATE_ENABLED: number;
				static COMPONENT_ENABLED_STATE_DISABLED: number;
				static COMPONENT_ENABLED_STATE_DISABLED_USER: number;
				static DONT_KILL_APP: number;
				static VERIFICATION_ALLOW: number;
				static VERIFICATION_REJECT: number;
				static MAXIMUM_VERIFICATION_TIMEOUT: native.Long;
				static FEATURE_AUDIO_LOW_LATENCY: java.lang.String;
				static FEATURE_BLUETOOTH: java.lang.String;
				static FEATURE_CAMERA: java.lang.String;
				static FEATURE_CAMERA_AUTOFOCUS: java.lang.String;
				static FEATURE_CAMERA_ANY: java.lang.String;
				static FEATURE_CAMERA_FLASH: java.lang.String;
				static FEATURE_CAMERA_FRONT: java.lang.String;
				static FEATURE_LOCATION: java.lang.String;
				static FEATURE_LOCATION_GPS: java.lang.String;
				static FEATURE_LOCATION_NETWORK: java.lang.String;
				static FEATURE_MICROPHONE: java.lang.String;
				static FEATURE_NFC: java.lang.String;
				static FEATURE_SENSOR_ACCELEROMETER: java.lang.String;
				static FEATURE_SENSOR_BAROMETER: java.lang.String;
				static FEATURE_SENSOR_COMPASS: java.lang.String;
				static FEATURE_SENSOR_GYROSCOPE: java.lang.String;
				static FEATURE_SENSOR_LIGHT: java.lang.String;
				static FEATURE_SENSOR_PROXIMITY: java.lang.String;
				static FEATURE_TELEPHONY: java.lang.String;
				static FEATURE_TELEPHONY_CDMA: java.lang.String;
				static FEATURE_TELEPHONY_GSM: java.lang.String;
				static FEATURE_USB_HOST: java.lang.String;
				static FEATURE_USB_ACCESSORY: java.lang.String;
				static FEATURE_SIP: java.lang.String;
				static FEATURE_SIP_VOIP: java.lang.String;
				static FEATURE_TOUCHSCREEN: java.lang.String;
				static FEATURE_TOUCHSCREEN_MULTITOUCH: java.lang.String;
				static FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT: java.lang.String;
				static FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND: java.lang.String;
				static FEATURE_FAKETOUCH: java.lang.String;
				static FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT: java.lang.String;
				static FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND: java.lang.String;
				static FEATURE_SCREEN_PORTRAIT: java.lang.String;
				static FEATURE_SCREEN_LANDSCAPE: java.lang.String;
				static FEATURE_LIVE_WALLPAPER: java.lang.String;
				static FEATURE_WIFI: java.lang.String;
				static FEATURE_WIFI_DIRECT: java.lang.String;
				static FEATURE_TELEVISION: java.lang.String;
				static EXTRA_VERIFICATION_ID: java.lang.String;
				static EXTRA_VERIFICATION_RESULT: java.lang.String;
				static class: java.lang.Class<android.content.pm.PackageManager>;
				getServiceInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.ServiceInfo;
				addPermission(arg1: android.content.pm.PermissionInfo): boolean;
				removePermission(arg1: java.lang.String): void;
				removePermission(arg1: string): void;
				getApplicationInfo(arg1: java.lang.String, arg2: number): android.content.pm.ApplicationInfo;
				getApplicationInfo(arg1: string, arg2: number): android.content.pm.ApplicationInfo;
				getDrawable(arg1: java.lang.String, arg2: number, arg3: android.content.pm.ApplicationInfo): android.graphics.drawable.Drawable;
				getDrawable(arg1: string, arg2: number, arg3: android.content.pm.ApplicationInfo): android.graphics.drawable.Drawable;
				getXml(arg1: java.lang.String, arg2: number, arg3: android.content.pm.ApplicationInfo): android.content.res.IXmlResourceParser;
				getXml(arg1: string, arg2: number, arg3: android.content.pm.ApplicationInfo): android.content.res.IXmlResourceParser;
				getNameForUid(arg1: number): string;
				isSafeMode(): boolean;
				getInstrumentationInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.InstrumentationInfo;
				getApplicationEnabledSetting(arg1: java.lang.String): number;
				getApplicationEnabledSetting(arg1: string): number;
				getPermissionGroupInfo(arg1: java.lang.String, arg2: number): android.content.pm.PermissionGroupInfo;
				getPermissionGroupInfo(arg1: string, arg2: number): android.content.pm.PermissionGroupInfo;
				resolveContentProvider(arg1: java.lang.String, arg2: number): android.content.pm.ProviderInfo;
				resolveContentProvider(arg1: string, arg2: number): android.content.pm.ProviderInfo;
				getLaunchIntentForPackage(arg1: java.lang.String): android.content.Intent;
				getLaunchIntentForPackage(arg1: string): android.content.Intent;
				getComponentEnabledSetting(arg1: android.content.ComponentName): number;
				setComponentEnabledSetting(arg1: android.content.ComponentName, arg2: number, arg3: number): void;
				getPreferredActivities(arg1: java.util.IList<android.content.IntentFilter>, arg2: java.util.IList<android.content.ComponentName>, arg3: java.lang.String): number;
				getPreferredActivities(arg1: java.util.IList<android.content.IntentFilter>, arg2: java.util.IList<android.content.ComponentName>, arg3: string): number;
				getSystemSharedLibraryNames(): native.Array<java.lang.String>;
				getSystemAvailableFeatures(): native.Array<android.content.pm.FeatureInfo>;
				extendVerificationTimeout(arg1: number, arg2: number, arg3: native.Long): void;
				getInstalledApplications(arg1: number): java.util.IList<android.content.pm.ApplicationInfo>;
				getAllPermissionGroups(arg1: number): java.util.IList<android.content.pm.PermissionGroupInfo>;
				queryBroadcastReceivers(arg1: android.content.Intent, arg2: number): java.util.IList<android.content.pm.ResolveInfo>;
				getResourcesForActivity(arg1: android.content.ComponentName): android.content.res.Resources;
				getDefaultActivityIcon(): android.graphics.drawable.Drawable;
				queryIntentActivityOptions(arg1: android.content.ComponentName, arg2: native.Array<android.content.Intent>, arg3: android.content.Intent, arg4: number): java.util.IList<android.content.pm.ResolveInfo>;
				getResourcesForApplication(arg1: java.lang.String): android.content.res.Resources;
				getResourcesForApplication(arg1: string): android.content.res.Resources;
				getResourcesForApplication(arg1: android.content.pm.ApplicationInfo): android.content.res.Resources;
				queryPermissionsByGroup(arg1: java.lang.String, arg2: number): java.util.IList<android.content.pm.PermissionInfo>;
				queryPermissionsByGroup(arg1: string, arg2: number): java.util.IList<android.content.pm.PermissionInfo>;
				setInstallerPackageName(arg1: java.lang.String, arg2: java.lang.String): void;
				setInstallerPackageName(arg1: string, arg2: string): void;
				getInstallerPackageName(arg1: java.lang.String): string;
				getInstallerPackageName(arg1: string): string;
				removePackageFromPreferred(arg1: java.lang.String): void;
				removePackageFromPreferred(arg1: string): void;
				setApplicationEnabledSetting(arg1: java.lang.String, arg2: number, arg3: number): void;
				setApplicationEnabledSetting(arg1: string, arg2: number, arg3: number): void;
				getPackageGids(arg1: java.lang.String): native.Array<number>;
				getPackageGids(arg1: string): native.Array<number>;
				getReceiverInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.ActivityInfo;
				getInstalledPackages(arg1: number): java.util.IList<android.content.pm.PackageInfo>;
				addPermissionAsync(arg1: android.content.pm.PermissionInfo): boolean;
				resolveActivity(arg1: android.content.Intent, arg2: number): android.content.pm.ResolveInfo;
				queryIntentActivities(arg1: android.content.Intent, arg2: number): java.util.IList<android.content.pm.ResolveInfo>;
				queryIntentServices(arg1: android.content.Intent, arg2: number): java.util.IList<android.content.pm.ResolveInfo>;
				getActivityInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.ActivityInfo;
				getPermissionInfo(arg1: java.lang.String, arg2: number): android.content.pm.PermissionInfo;
				getPermissionInfo(arg1: string, arg2: number): android.content.pm.PermissionInfo;
				queryContentProviders(arg1: java.lang.String, arg2: number, arg3: number): java.util.IList<android.content.pm.ProviderInfo>;
				queryContentProviders(arg1: string, arg2: number, arg3: number): java.util.IList<android.content.pm.ProviderInfo>;
				getActivityIcon(arg1: android.content.ComponentName): android.graphics.drawable.Drawable;
				getActivityIcon(arg1: android.content.Intent): android.graphics.drawable.Drawable;
				queryInstrumentation(arg1: java.lang.String, arg2: number): java.util.IList<android.content.pm.InstrumentationInfo>;
				queryInstrumentation(arg1: string, arg2: number): java.util.IList<android.content.pm.InstrumentationInfo>;
				getApplicationIcon(arg1: java.lang.String): android.graphics.drawable.Drawable;
				getApplicationIcon(arg1: string): android.graphics.drawable.Drawable;
				getApplicationIcon(arg1: android.content.pm.ApplicationInfo): android.graphics.drawable.Drawable;
				resolveService(arg1: android.content.Intent, arg2: number): android.content.pm.ResolveInfo;
				getProviderInfo(arg1: android.content.ComponentName, arg2: number): android.content.pm.ProviderInfo;
				getPackagesForUid(arg1: number): native.Array<java.lang.String>;
				getActivityLogo(arg1: android.content.Intent): android.graphics.drawable.Drawable;
				getActivityLogo(arg1: android.content.ComponentName): android.graphics.drawable.Drawable;
				checkSignatures(arg1: number, arg2: number): number;
				checkSignatures(arg1: java.lang.String, arg2: java.lang.String): number;
				checkSignatures(arg1: string, arg2: string): number;
				hasSystemFeature(arg1: java.lang.String): boolean;
				hasSystemFeature(arg1: string): boolean;
				getPreferredPackages(arg1: number): java.util.IList<android.content.pm.PackageInfo>;
				addPreferredActivity(arg1: android.content.IntentFilter, arg2: number, arg3: native.Array<android.content.ComponentName>, arg4: android.content.ComponentName): void;
				getApplicationLabel(arg1: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				addPackageToPreferred(arg1: java.lang.String): void;
				addPackageToPreferred(arg1: string): void;
				getApplicationLogo(arg1: android.content.pm.ApplicationInfo): android.graphics.drawable.Drawable;
				getApplicationLogo(arg1: java.lang.String): android.graphics.drawable.Drawable;
				getApplicationLogo(arg1: string): android.graphics.drawable.Drawable;
				verifyPendingInstall(arg1: number, arg2: number): void;
				getPackageArchiveInfo(arg1: java.lang.String, arg2: number): android.content.pm.PackageInfo;
				getPackageArchiveInfo(arg1: string, arg2: number): android.content.pm.PackageInfo;
				currentToCanonicalPackageNames(arg1: native.Array<java.lang.String>): native.Array<java.lang.String>;
				canonicalToCurrentPackageNames(arg1: native.Array<java.lang.String>): native.Array<java.lang.String>;
				clearPackagePreferredActivities(arg1: java.lang.String): void;
				clearPackagePreferredActivities(arg1: string): void;
				checkPermission(arg1: java.lang.String, arg2: java.lang.String): number;
				checkPermission(arg1: string, arg2: string): number;
				getText(arg1: java.lang.String, arg2: number, arg3: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				getText(arg1: string, arg2: number, arg3: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				getPackageInfo(arg1: java.lang.String, arg2: number): android.content.pm.PackageInfo;
				getPackageInfo(arg1: string, arg2: number): android.content.pm.PackageInfo;
			}
			export module PackageManager {
				export class NameNotFoundException extends android.util.AndroidException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static class: java.lang.Class<android.content.pm.PackageManager.NameNotFoundException>;
				}
			}
			export class ConfigurationInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				constructor(arg1: android.content.pm.ConfigurationInfo);
				reqTouchScreen: number;
				reqKeyboardType: number;
				reqNavigation: number;
				static INPUT_FEATURE_HARD_KEYBOARD: number;
				static INPUT_FEATURE_FIVE_WAY_NAV: number;
				reqInputFeatures: number;
				static GL_ES_VERSION_UNDEFINED: number;
				reqGlEsVersion: number;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.ConfigurationInfo>;
				static class: java.lang.Class<android.content.pm.ConfigurationInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getGlEsVersion(): string;
				toString(): string;
			}
			export class ComponentInfo extends android.content.pm.PackageItemInfo {
				constructor();
				constructor(arg1: android.content.pm.ComponentInfo);
				applicationInfo: android.content.pm.ApplicationInfo;
				processName: java.lang.String;
				descriptionRes: number;
				enabled: boolean;
				exported: boolean;
				static class: java.lang.Class<android.content.pm.ComponentInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				loadLabel(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				isEnabled(): boolean;
				getIconResource(): number;
			}
			export class ResolveInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				constructor(arg1: android.content.pm.ResolveInfo);
				activityInfo: android.content.pm.ActivityInfo;
				serviceInfo: android.content.pm.ServiceInfo;
				filter: android.content.IntentFilter;
				priority: number;
				preferredOrder: number;
				match: number;
				specificIndex: number;
				isDefault: boolean;
				labelRes: number;
				nonLocalizedLabel: java.lang.ICharSequence;
				icon: number;
				resolvePackageName: java.lang.String;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.ResolveInfo>;
				static class: java.lang.Class<android.content.pm.ResolveInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				loadLabel(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				loadIcon(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
				toString(): string;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
				getIconResource(): number;
			}
			export module ResolveInfo {
				export class DisplayNameComparator extends java.lang.Object implements java.util.IComparator<android.content.pm.ResolveInfo> {
					constructor(arg1: android.content.pm.PackageManager);
					static class: java.lang.Class<android.content.pm.ResolveInfo.DisplayNameComparator>;
					compare(arg1: android.content.pm.ResolveInfo, arg2: android.content.pm.ResolveInfo): number;
					compare(arg1: any, arg2: any): number;
					equals(arg1: any): boolean;
				}
			}
			export class PathPermission extends android.os.PatternMatcher {
				constructor(arg1: java.lang.String, arg2: number, arg3: java.lang.String, arg4: java.lang.String);
				constructor(arg1: string, arg2: number, arg3: string, arg4: string);
				constructor(arg1: android.os.Parcel);
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.PathPermission>;
				static class: java.lang.Class<android.content.pm.PathPermission>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				getReadPermission(): string;
				getWritePermission(): string;
			}
			export class PackageItemInfo extends java.lang.Object {
				constructor();
				constructor(arg1: android.content.pm.PackageItemInfo);
				name: java.lang.String;
				packageName: java.lang.String;
				labelRes: number;
				nonLocalizedLabel: java.lang.ICharSequence;
				icon: number;
				logo: number;
				metaData: android.os.Bundle;
				static class: java.lang.Class<android.content.pm.PackageItemInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				loadLabel(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				loadIcon(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
				loadLogo(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
				loadXmlMetaData(arg1: android.content.pm.PackageManager, arg2: java.lang.String): android.content.res.IXmlResourceParser;
				loadXmlMetaData(arg1: android.content.pm.PackageManager, arg2: string): android.content.res.IXmlResourceParser;
			}
			export module PackageItemInfo {
				export class DisplayNameComparator extends java.lang.Object implements java.util.IComparator<android.content.pm.PackageItemInfo> {
					constructor(arg1: android.content.pm.PackageManager);
					static class: java.lang.Class<android.content.pm.PackageItemInfo.DisplayNameComparator>;
					compare(arg1: android.content.pm.PackageItemInfo, arg2: android.content.pm.PackageItemInfo): number;
					compare(arg1: any, arg2: any): number;
					equals(arg1: any): boolean;
				}
			}
			export class ServiceInfo extends android.content.pm.ComponentInfo implements android.os.IParcelable {
				constructor(arg1: android.content.pm.ServiceInfo);
				constructor();
				permission: java.lang.String;
				static FLAG_STOP_WITH_TASK: number;
				static FLAG_ISOLATED_PROCESS: number;
				static FLAG_SINGLE_USER: number;
				flags: number;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.ServiceInfo>;
				static class: java.lang.Class<android.content.pm.ServiceInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
			export class Signature extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: native.Array<native.Byte>);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.Signature>;
				static class: java.lang.Class<android.content.pm.Signature>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toCharsString(): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				toChars(): native.Array<string>;
				toChars(arg1: native.Array<string>, arg2: native.Array<number>): native.Array<string>;
				toByteArray(): native.Array<native.Byte>;
			}
			export class ProviderInfo extends android.content.pm.ComponentInfo implements android.os.IParcelable {
				constructor();
				constructor(arg1: android.content.pm.ProviderInfo);
				authority: java.lang.String;
				readPermission: java.lang.String;
				writePermission: java.lang.String;
				grantUriPermissions: boolean;
				uriPermissionPatterns: native.Array<android.os.PatternMatcher>;
				pathPermissions: native.Array<android.content.pm.PathPermission>;
				multiprocess: boolean;
				initOrder: number;
				static FLAG_SINGLE_USER: number;
				flags: number;
				isSyncable: boolean;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.ProviderInfo>;
				static class: java.lang.Class<android.content.pm.ProviderInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
			}
			export class PackageStats extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: android.content.pm.PackageStats);
				constructor(arg1: android.os.Parcel);
				packageName: java.lang.String;
				codeSize: native.Long;
				dataSize: native.Long;
				cacheSize: native.Long;
				externalCodeSize: native.Long;
				externalDataSize: native.Long;
				externalCacheSize: native.Long;
				externalMediaSize: native.Long;
				externalObbSize: native.Long;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.PackageStats>;
				static class: java.lang.Class<android.content.pm.PackageStats>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
			}
			export class PermissionInfo extends android.content.pm.PackageItemInfo implements android.os.IParcelable {
				constructor(arg1: android.content.pm.PermissionInfo);
				constructor();
				static PROTECTION_NORMAL: number;
				static PROTECTION_DANGEROUS: number;
				static PROTECTION_SIGNATURE: number;
				static PROTECTION_SIGNATURE_OR_SYSTEM: number;
				static PROTECTION_FLAG_SYSTEM: number;
				static PROTECTION_FLAG_DEVELOPMENT: number;
				static PROTECTION_MASK_BASE: number;
				static PROTECTION_MASK_FLAGS: number;
				protectionLevel: number;
				group: java.lang.String;
				static FLAG_COSTS_MONEY: number;
				flags: number;
				descriptionRes: number;
				nonLocalizedDescription: java.lang.ICharSequence;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.PermissionInfo>;
				static class: java.lang.Class<android.content.pm.PermissionInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				loadDescription(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				describeContents(): number;
				toString(): string;
			}
			export class ActivityInfo extends android.content.pm.ComponentInfo implements android.os.IParcelable {
				constructor(arg1: android.content.pm.ActivityInfo);
				constructor();
				theme: number;
				static LAUNCH_MULTIPLE: number;
				static LAUNCH_SINGLE_TOP: number;
				static LAUNCH_SINGLE_TASK: number;
				static LAUNCH_SINGLE_INSTANCE: number;
				launchMode: number;
				permission: java.lang.String;
				taskAffinity: java.lang.String;
				targetActivity: java.lang.String;
				static FLAG_MULTIPROCESS: number;
				static FLAG_FINISH_ON_TASK_LAUNCH: number;
				static FLAG_CLEAR_TASK_ON_LAUNCH: number;
				static FLAG_ALWAYS_RETAIN_TASK_STATE: number;
				static FLAG_STATE_NOT_NEEDED: number;
				static FLAG_EXCLUDE_FROM_RECENTS: number;
				static FLAG_ALLOW_TASK_REPARENTING: number;
				static FLAG_NO_HISTORY: number;
				static FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS: number;
				static FLAG_HARDWARE_ACCELERATED: number;
				static FLAG_SINGLE_USER: number;
				flags: number;
				static SCREEN_ORIENTATION_UNSPECIFIED: number;
				static SCREEN_ORIENTATION_LANDSCAPE: number;
				static SCREEN_ORIENTATION_PORTRAIT: number;
				static SCREEN_ORIENTATION_USER: number;
				static SCREEN_ORIENTATION_BEHIND: number;
				static SCREEN_ORIENTATION_SENSOR: number;
				static SCREEN_ORIENTATION_NOSENSOR: number;
				static SCREEN_ORIENTATION_SENSOR_LANDSCAPE: number;
				static SCREEN_ORIENTATION_SENSOR_PORTRAIT: number;
				static SCREEN_ORIENTATION_REVERSE_LANDSCAPE: number;
				static SCREEN_ORIENTATION_REVERSE_PORTRAIT: number;
				static SCREEN_ORIENTATION_FULL_SENSOR: number;
				screenOrientation: number;
				static CONFIG_MCC: number;
				static CONFIG_MNC: number;
				static CONFIG_LOCALE: number;
				static CONFIG_TOUCHSCREEN: number;
				static CONFIG_KEYBOARD: number;
				static CONFIG_KEYBOARD_HIDDEN: number;
				static CONFIG_NAVIGATION: number;
				static CONFIG_ORIENTATION: number;
				static CONFIG_SCREEN_LAYOUT: number;
				static CONFIG_UI_MODE: number;
				static CONFIG_SCREEN_SIZE: number;
				static CONFIG_SMALLEST_SCREEN_SIZE: number;
				static CONFIG_DENSITY: number;
				static CONFIG_LAYOUT_DIRECTION: number;
				static CONFIG_FONT_SCALE: number;
				configChanges: number;
				softInputMode: number;
				uiOptions: number;
				static UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW: number;
				parentActivityName: java.lang.String;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.ActivityInfo>;
				static class: java.lang.Class<android.content.pm.ActivityInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getThemeResource(): number;
				toString(): string;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
			export class InstrumentationInfo extends android.content.pm.PackageItemInfo implements android.os.IParcelable {
				constructor();
				constructor(arg1: android.content.pm.InstrumentationInfo);
				targetPackage: java.lang.String;
				sourceDir: java.lang.String;
				publicSourceDir: java.lang.String;
				dataDir: java.lang.String;
				handleProfiling: boolean;
				functionalTest: boolean;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.InstrumentationInfo>;
				static class: java.lang.Class<android.content.pm.InstrumentationInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
			}
			export class PackageInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				packageName: java.lang.String;
				versionCode: number;
				versionName: java.lang.String;
				sharedUserId: java.lang.String;
				sharedUserLabel: number;
				applicationInfo: android.content.pm.ApplicationInfo;
				firstInstallTime: native.Long;
				lastUpdateTime: native.Long;
				gids: native.Array<number>;
				activities: native.Array<android.content.pm.ActivityInfo>;
				receivers: native.Array<android.content.pm.ActivityInfo>;
				services: native.Array<android.content.pm.ServiceInfo>;
				providers: native.Array<android.content.pm.ProviderInfo>;
				instrumentation: native.Array<android.content.pm.InstrumentationInfo>;
				permissions: native.Array<android.content.pm.PermissionInfo>;
				requestedPermissions: native.Array<java.lang.String>;
				requestedPermissionsFlags: native.Array<number>;
				static REQUESTED_PERMISSION_REQUIRED: number;
				static REQUESTED_PERMISSION_GRANTED: number;
				signatures: native.Array<android.content.pm.Signature>;
				configPreferences: native.Array<android.content.pm.ConfigurationInfo>;
				reqFeatures: native.Array<android.content.pm.FeatureInfo>;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.PackageInfo>;
				static class: java.lang.Class<android.content.pm.PackageInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
			}
			export class ApplicationInfo extends android.content.pm.PackageItemInfo implements android.os.IParcelable {
				constructor();
				constructor(arg1: android.content.pm.ApplicationInfo);
				taskAffinity: java.lang.String;
				permission: java.lang.String;
				processName: java.lang.String;
				className: java.lang.String;
				descriptionRes: number;
				theme: number;
				manageSpaceActivityName: java.lang.String;
				backupAgentName: java.lang.String;
				uiOptions: number;
				static FLAG_SYSTEM: number;
				static FLAG_DEBUGGABLE: number;
				static FLAG_HAS_CODE: number;
				static FLAG_PERSISTENT: number;
				static FLAG_FACTORY_TEST: number;
				static FLAG_ALLOW_TASK_REPARENTING: number;
				static FLAG_ALLOW_CLEAR_USER_DATA: number;
				static FLAG_UPDATED_SYSTEM_APP: number;
				static FLAG_TEST_ONLY: number;
				static FLAG_SUPPORTS_SMALL_SCREENS: number;
				static FLAG_SUPPORTS_NORMAL_SCREENS: number;
				static FLAG_SUPPORTS_LARGE_SCREENS: number;
				static FLAG_RESIZEABLE_FOR_SCREENS: number;
				static FLAG_SUPPORTS_SCREEN_DENSITIES: number;
				static FLAG_VM_SAFE_MODE: number;
				static FLAG_ALLOW_BACKUP: number;
				static FLAG_KILL_AFTER_RESTORE: number;
				static FLAG_RESTORE_ANY_VERSION: number;
				static FLAG_EXTERNAL_STORAGE: number;
				static FLAG_SUPPORTS_XLARGE_SCREENS: number;
				static FLAG_LARGE_HEAP: number;
				static FLAG_STOPPED: number;
				static FLAG_SUPPORTS_RTL: number;
				static FLAG_INSTALLED: number;
				static FLAG_IS_DATA_ONLY: number;
				flags: number;
				requiresSmallestWidthDp: number;
				compatibleWidthLimitDp: number;
				largestWidthLimitDp: number;
				sourceDir: java.lang.String;
				publicSourceDir: java.lang.String;
				sharedLibraryFiles: native.Array<java.lang.String>;
				dataDir: java.lang.String;
				nativeLibraryDir: java.lang.String;
				uid: number;
				targetSdkVersion: number;
				enabled: boolean;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.ApplicationInfo>;
				static class: java.lang.Class<android.content.pm.ApplicationInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				loadDescription(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				describeContents(): number;
				toString(): string;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
			export module ApplicationInfo {
				export class DisplayNameComparator extends java.lang.Object implements java.util.IComparator<android.content.pm.ApplicationInfo> {
					constructor(arg1: android.content.pm.PackageManager);
					static class: java.lang.Class<android.content.pm.ApplicationInfo.DisplayNameComparator>;
					compare(arg1: android.content.pm.ApplicationInfo, arg2: android.content.pm.ApplicationInfo): number;
					compare(arg1: any, arg2: any): number;
					equals(arg1: any): boolean;
				}
			}
			export class FeatureInfo extends java.lang.Object implements android.os.IParcelable {
				constructor();
				constructor(arg1: android.content.pm.FeatureInfo);
				name: java.lang.String;
				static GL_ES_VERSION_UNDEFINED: number;
				reqGlEsVersion: number;
				static FLAG_REQUIRED: number;
				flags: number;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.FeatureInfo>;
				static class: java.lang.Class<android.content.pm.FeatureInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getGlEsVersion(): string;
				toString(): string;
			}
			export class PermissionGroupInfo extends android.content.pm.PackageItemInfo implements android.os.IParcelable {
				constructor(arg1: android.content.pm.PermissionGroupInfo);
				constructor();
				descriptionRes: number;
				nonLocalizedDescription: java.lang.ICharSequence;
				static FLAG_PERSONAL_INFO: number;
				flags: number;
				priority: number;
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.PermissionGroupInfo>;
				static class: java.lang.Class<android.content.pm.PermissionGroupInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				loadDescription(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				describeContents(): number;
				toString(): string;
			}
			export class LabeledIntent extends android.content.Intent {
				constructor(arg1: android.content.Intent, arg2: java.lang.String, arg3: java.lang.ICharSequence, arg4: number);
				constructor(arg1: android.content.Intent, arg2: string, arg3: string, arg4: number);
				constructor(arg1: java.lang.String, arg2: java.lang.ICharSequence, arg3: number);
				constructor(arg1: string, arg2: string, arg3: number);
				constructor(arg1: android.content.Intent, arg2: java.lang.String, arg3: number, arg4: number);
				constructor(arg1: android.content.Intent, arg2: string, arg3: number, arg4: number);
				constructor(arg1: java.lang.String, arg2: number, arg3: number);
				constructor(arg1: string, arg2: number, arg3: number);
				static CREATOR: android.os.Parcelable.ICreator<android.content.pm.LabeledIntent>;
				static class: java.lang.Class<android.content.pm.LabeledIntent>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				loadLabel(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				loadIcon(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
				readFromParcel(arg1: android.os.Parcel): void;
				getLabelResource(): number;
				getSourcePackage(): string;
				getNonLocalizedLabel(): java.lang.ICharSequence;
				getIconResource(): number;
			}
		}
		export interface ISyncStatusObserver {
			onStatusChanged(arg1: number): void;
		}
		export class ComponentName extends java.lang.Object implements android.os.IParcelable, java.lang.ICloneable, java.lang.IComparable<android.content.ComponentName> {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: android.content.Context, arg2: java.lang.String);
			constructor(arg1: android.content.Context, arg2: string);
			constructor(arg1: android.content.Context, arg2: java.lang.Class<any>);
			constructor(arg1: android.os.Parcel);
			static CREATOR: android.os.Parcelable.ICreator<android.content.ComponentName>;
			static class: java.lang.Class<android.content.ComponentName>;
			static writeToParcel(arg1: android.content.ComponentName, arg2: android.os.Parcel): void;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			static readFromParcel(arg1: android.os.Parcel): android.content.ComponentName;
			toShortString(): string;
			getShortClassName(): string;
			flattenToString(): string;
			static unflattenFromString(arg1: java.lang.String): android.content.ComponentName;
			static unflattenFromString(arg1: string): android.content.ComponentName;
			flattenToShortString(): string;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): android.content.ComponentName;
			toString(): string;
			compareTo(arg1: android.content.ComponentName): number;
			compareTo(arg1: any): number;
			getClassName(): string;
			getPackageName(): string;
		}
		export class Entity extends java.lang.Object {
			constructor(arg1: android.content.ContentValues);
			static class: java.lang.Class<android.content.Entity>;
			getSubValues(): java.util.ArrayList<android.content.Entity.NamedContentValues>;
			addSubValue(arg1: android.net.Uri, arg2: android.content.ContentValues): void;
			getEntityValues(): android.content.ContentValues;
			toString(): string;
		}
		export module Entity {
			export class NamedContentValues extends java.lang.Object {
				constructor(arg1: android.net.Uri, arg2: android.content.ContentValues);
				uri: android.net.Uri;
				values: android.content.ContentValues;
				static class: java.lang.Class<android.content.Entity.NamedContentValues>;
			}
		}
		export module res {
			export class TypedArray extends java.lang.Object {
				static class: java.lang.Class<android.content.res.TypedArray>;
				getDrawable(arg1: number): android.graphics.drawable.Drawable;
				getPositionDescription(): string;
				getTextArray(arg1: number): native.Array<java.lang.ICharSequence>;
				getFraction(arg1: number, arg2: number, arg3: number, arg4: native.Float): number;
				getDimensionPixelOffset(arg1: number, arg2: number): number;
				getDimensionPixelSize(arg1: number, arg2: number): number;
				getColorStateList(arg1: number): android.content.res.ColorStateList;
				recycle(): void;
				hasValue(arg1: number): boolean;
				getResourceId(arg1: number, arg2: number): number;
				getIndexCount(): number;
				peekValue(arg1: number): android.util.TypedValue;
				getNonResourceString(arg1: number): string;
				getLayoutDimension(arg1: number, arg2: java.lang.String): number;
				getLayoutDimension(arg1: number, arg2: string): number;
				getLayoutDimension(arg1: number, arg2: number): number;
				toString(): string;
				getValue(arg1: number, arg2: android.util.TypedValue): boolean;
				length(): number;
				getResources(): android.content.res.Resources;
				getBoolean(arg1: number, arg2: boolean): boolean;
				getFloat(arg1: number, arg2: native.Float): number;
				getInt(arg1: number, arg2: number): number;
				getInteger(arg1: number, arg2: number): number;
				getString(arg1: number): string;
				getIndex(arg1: number): number;
				getText(arg1: number): java.lang.ICharSequence;
				getColor(arg1: number, arg2: number): number;
				getDimension(arg1: number, arg2: native.Float): number;
			}
			export class XmlResourceParser implements org.xmlpull.v1.IXmlPullParser, android.util.IAttributeSet, android.content.res.IXmlResourceParser {
				constructor(implementation: android.content.res.IXmlResourceParser);
				close(): void;
				getAttributeName(arg1: number): string;
				getAttributeValue(arg1: string, arg2: string): string;
				getAttributeValue(arg1: number): string;
				getPositionDescription(): string;
				require(arg1: number, arg2: string, arg3: string): void;
				getEventType(): number;
				getNamespace(arg1: string): string;
				getNamespace(): string;
				nextText(): string;
				nextTag(): number;
				isAttributeDefault(arg1: number): boolean;
				getNamespaceCount(arg1: number): number;
				getTextCharacters(arg1: native.Array<number>): native.Array<string>;
				getAttributeNamespace(arg1: number): string;
				getNamespaceUri(arg1: number): string;
				getAttributePrefix(arg1: number): string;
				getAttributeType(arg1: number): string;
				isEmptyElementTag(): boolean;
				getNamespacePrefix(arg1: number): string;
				defineEntityReplacementText(arg1: string, arg2: string): void;
				getName(): string;
				next(): number;
				getProperty(arg1: string): any;
				setProperty(arg1: string, arg2: any): void;
				getLineNumber(): number;
				isWhitespace(): boolean;
				nextToken(): number;
				getText(): string;
				getAttributeCount(): number;
				setInput(arg1: java.io.Reader): void;
				setInput(arg1: java.io.InputStream, arg2: string): void;
				getFeature(arg1: string): boolean;
				getPrefix(): string;
				setFeature(arg1: string, arg2: boolean): void;
				getInputEncoding(): string;
				getColumnNumber(): number;
				getDepth(): number;
				getAttributeListValue(arg1: string, arg2: string, arg3: native.Array<java.lang.String>, arg4: number): number;
				getAttributeListValue(arg1: number, arg2: native.Array<java.lang.String>, arg3: number): number;
				getAttributeIntValue(arg1: string, arg2: string, arg3: number): number;
				getAttributeIntValue(arg1: number, arg2: number): number;
				getClassAttribute(): string;
				getStyleAttribute(): number;
				getIdAttribute(): string;
				getAttributeUnsignedIntValue(arg1: number, arg2: number): number;
				getAttributeUnsignedIntValue(arg1: string, arg2: string, arg3: number): number;
				getAttributeBooleanValue(arg1: string, arg2: string, arg3: boolean): boolean;
				getAttributeBooleanValue(arg1: number, arg2: boolean): boolean;
				getIdAttributeResourceValue(arg1: number): number;
				getAttributeResourceValue(arg1: string, arg2: string, arg3: number): number;
				getAttributeResourceValue(arg1: number, arg2: number): number;
				getAttributeFloatValue(arg1: number, arg2: native.Float): number;
				getAttributeFloatValue(arg1: string, arg2: string, arg3: native.Float): number;
				getAttributeNameResource(arg1: number): number;
			}
			export class AssetFileDescriptor extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: android.os.ParcelFileDescriptor, arg2: native.Long, arg3: native.Long);
				static UNKNOWN_LENGTH: native.Long;
				static CREATOR: android.os.Parcelable.ICreator<android.content.res.AssetFileDescriptor>;
				static class: java.lang.Class<android.content.res.AssetFileDescriptor>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getDeclaredLength(): any;
				createInputStream(): java.io.FileInputStream;
				createOutputStream(): java.io.FileOutputStream;
				getParcelFileDescriptor(): android.os.ParcelFileDescriptor;
				toString(): string;
				close(): void;
				getLength(): any;
				getStartOffset(): any;
				getFileDescriptor(): java.io.FileDescriptor;
			}
			export module AssetFileDescriptor {
				export class AutoCloseInputStream extends android.os.ParcelFileDescriptor.AutoCloseInputStream {
					constructor(arg1: android.content.res.AssetFileDescriptor);
					static class: java.lang.Class<android.content.res.AssetFileDescriptor.AutoCloseInputStream>;
					mark(arg1: number): void;
					reset(): void;
					available(): number;
					read(arg1: native.Array<native.Byte>): number;
					read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
					read(): number;
					skip(arg1: native.Long): any;
					markSupported(): boolean;
				}
				export class AutoCloseOutputStream extends android.os.ParcelFileDescriptor.AutoCloseOutputStream {
					constructor(arg1: android.content.res.AssetFileDescriptor);
					static class: java.lang.Class<android.content.res.AssetFileDescriptor.AutoCloseOutputStream>;
					write(arg1: number): void;
					write(arg1: native.Array<native.Byte>): void;
					write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				}
			}
			export interface IXmlResourceParser extends org.xmlpull.v1.IXmlPullParser, android.util.IAttributeSet {
				close(): void;
				getAttributeName(arg1: number): string;
				getAttributeValue(arg1: string, arg2: string): string;
				getAttributeValue(arg1: number): string;
				getPositionDescription(): string;
				require(arg1: number, arg2: string, arg3: string): void;
				getEventType(): number;
				getNamespace(arg1: string): string;
				getNamespace(): string;
				nextText(): string;
				nextTag(): number;
				isAttributeDefault(arg1: number): boolean;
				getNamespaceCount(arg1: number): number;
				getTextCharacters(arg1: native.Array<number>): native.Array<string>;
				getAttributeNamespace(arg1: number): string;
				getNamespaceUri(arg1: number): string;
				getAttributePrefix(arg1: number): string;
				getAttributeType(arg1: number): string;
				isEmptyElementTag(): boolean;
				getNamespacePrefix(arg1: number): string;
				defineEntityReplacementText(arg1: string, arg2: string): void;
				getName(): string;
				next(): number;
				getProperty(arg1: string): any;
				setProperty(arg1: string, arg2: any): void;
				getLineNumber(): number;
				isWhitespace(): boolean;
				nextToken(): number;
				getText(): string;
				getAttributeCount(): number;
				setInput(arg1: java.io.Reader): void;
				setInput(arg1: java.io.InputStream, arg2: string): void;
				getFeature(arg1: string): boolean;
				getPrefix(): string;
				setFeature(arg1: string, arg2: boolean): void;
				getInputEncoding(): string;
				getColumnNumber(): number;
				getDepth(): number;
				getAttributeListValue(arg1: string, arg2: string, arg3: native.Array<java.lang.String>, arg4: number): number;
				getAttributeListValue(arg1: number, arg2: native.Array<java.lang.String>, arg3: number): number;
				getAttributeIntValue(arg1: string, arg2: string, arg3: number): number;
				getAttributeIntValue(arg1: number, arg2: number): number;
				getClassAttribute(): string;
				getStyleAttribute(): number;
				getIdAttribute(): string;
				getAttributeUnsignedIntValue(arg1: number, arg2: number): number;
				getAttributeUnsignedIntValue(arg1: string, arg2: string, arg3: number): number;
				getAttributeBooleanValue(arg1: string, arg2: string, arg3: boolean): boolean;
				getAttributeBooleanValue(arg1: number, arg2: boolean): boolean;
				getIdAttributeResourceValue(arg1: number): number;
				getAttributeResourceValue(arg1: string, arg2: string, arg3: number): number;
				getAttributeResourceValue(arg1: number, arg2: number): number;
				getAttributeFloatValue(arg1: number, arg2: native.Float): number;
				getAttributeFloatValue(arg1: string, arg2: string, arg3: native.Float): number;
				getAttributeNameResource(arg1: number): number;
			}
			export class ObbScanner extends java.lang.Object {
				static class: java.lang.Class<android.content.res.ObbScanner>;
				static getObbInfo(arg1: java.lang.String): android.content.res.ObbInfo;
				static getObbInfo(arg1: string): android.content.res.ObbInfo;
			}
			export class ObbInfo extends java.lang.Object implements android.os.IParcelable {
				static OBB_OVERLAY: number;
				filename: java.lang.String;
				packageName: java.lang.String;
				version: number;
				flags: number;
				static CREATOR: android.os.Parcelable.ICreator<android.content.res.ObbInfo>;
				static class: java.lang.Class<android.content.res.ObbInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
			}
			export class AssetManager extends java.lang.Object {
				static ACCESS_UNKNOWN: number;
				static ACCESS_RANDOM: number;
				static ACCESS_STREAMING: number;
				static ACCESS_BUFFER: number;
				static class: java.lang.Class<android.content.res.AssetManager>;
				getLocales(): native.Array<java.lang.String>;
				openFd(arg1: java.lang.String): android.content.res.AssetFileDescriptor;
				openFd(arg1: string): android.content.res.AssetFileDescriptor;
				openNonAssetFd(arg1: number, arg2: java.lang.String): android.content.res.AssetFileDescriptor;
				openNonAssetFd(arg1: number, arg2: string): android.content.res.AssetFileDescriptor;
				openNonAssetFd(arg1: java.lang.String): android.content.res.AssetFileDescriptor;
				openNonAssetFd(arg1: string): android.content.res.AssetFileDescriptor;
				openXmlResourceParser(arg1: java.lang.String): android.content.res.IXmlResourceParser;
				openXmlResourceParser(arg1: string): android.content.res.IXmlResourceParser;
				openXmlResourceParser(arg1: number, arg2: java.lang.String): android.content.res.IXmlResourceParser;
				openXmlResourceParser(arg1: number, arg2: string): android.content.res.IXmlResourceParser;
				list(arg1: java.lang.String): native.Array<java.lang.String>;
				list(arg1: string): native.Array<java.lang.String>;
				close(): void;
				open(arg1: java.lang.String): java.io.InputStream;
				open(arg1: string): java.io.InputStream;
				open(arg1: java.lang.String, arg2: number): java.io.InputStream;
				open(arg1: string, arg2: number): java.io.InputStream;
			}
			export module AssetManager {
				export class AssetInputStream extends java.io.InputStream {
					static class: java.lang.Class<android.content.res.AssetManager.AssetInputStream>;
					getAssetInt(): number;
					close(): void;
					mark(arg1: number): void;
					reset(): void;
					available(): number;
					read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
					read(arg1: native.Array<native.Byte>): number;
					read(): number;
					skip(arg1: native.Long): any;
					markSupported(): boolean;
				}
			}
			export class ColorStateList extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: native.Array<native.Array<number>>, arg2: native.Array<number>);
				static CREATOR: android.os.Parcelable.ICreator<android.content.res.ColorStateList>;
				static class: java.lang.Class<android.content.res.ColorStateList>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				withAlpha(arg1: number): android.content.res.ColorStateList;
				isStateful(): boolean;
				static createFromXml(arg1: android.content.res.Resources, arg2: org.xmlpull.v1.IXmlPullParser): android.content.res.ColorStateList;
				getColorForState(arg1: native.Array<number>, arg2: number): number;
				toString(): string;
				static valueOf(arg1: number): android.content.res.ColorStateList;
				getDefaultColor(): number;
			}
			export class Configuration extends java.lang.Object implements android.os.IParcelable, java.lang.IComparable<android.content.res.Configuration> {
				constructor();
				constructor(arg1: android.content.res.Configuration);
				fontScale: native.Float;
				mcc: number;
				mnc: number;
				locale: java.util.Locale;
				static SCREENLAYOUT_SIZE_MASK: number;
				static SCREENLAYOUT_SIZE_UNDEFINED: number;
				static SCREENLAYOUT_SIZE_SMALL: number;
				static SCREENLAYOUT_SIZE_NORMAL: number;
				static SCREENLAYOUT_SIZE_LARGE: number;
				static SCREENLAYOUT_SIZE_XLARGE: number;
				static SCREENLAYOUT_LONG_MASK: number;
				static SCREENLAYOUT_LONG_UNDEFINED: number;
				static SCREENLAYOUT_LONG_NO: number;
				static SCREENLAYOUT_LONG_YES: number;
				static SCREENLAYOUT_LAYOUTDIR_MASK: number;
				static SCREENLAYOUT_LAYOUTDIR_SHIFT: number;
				static SCREENLAYOUT_LAYOUTDIR_UNDEFINED: number;
				static SCREENLAYOUT_LAYOUTDIR_LTR: number;
				static SCREENLAYOUT_LAYOUTDIR_RTL: number;
				static SCREENLAYOUT_UNDEFINED: number;
				screenLayout: number;
				static TOUCHSCREEN_UNDEFINED: number;
				static TOUCHSCREEN_NOTOUCH: number;
				static TOUCHSCREEN_STYLUS: number;
				static TOUCHSCREEN_FINGER: number;
				touchscreen: number;
				static KEYBOARD_UNDEFINED: number;
				static KEYBOARD_NOKEYS: number;
				static KEYBOARD_QWERTY: number;
				static KEYBOARD_12KEY: number;
				keyboard: number;
				static KEYBOARDHIDDEN_UNDEFINED: number;
				static KEYBOARDHIDDEN_NO: number;
				static KEYBOARDHIDDEN_YES: number;
				keyboardHidden: number;
				static HARDKEYBOARDHIDDEN_UNDEFINED: number;
				static HARDKEYBOARDHIDDEN_NO: number;
				static HARDKEYBOARDHIDDEN_YES: number;
				hardKeyboardHidden: number;
				static NAVIGATION_UNDEFINED: number;
				static NAVIGATION_NONAV: number;
				static NAVIGATION_DPAD: number;
				static NAVIGATION_TRACKBALL: number;
				static NAVIGATION_WHEEL: number;
				navigation: number;
				static NAVIGATIONHIDDEN_UNDEFINED: number;
				static NAVIGATIONHIDDEN_NO: number;
				static NAVIGATIONHIDDEN_YES: number;
				navigationHidden: number;
				static ORIENTATION_UNDEFINED: number;
				static ORIENTATION_PORTRAIT: number;
				static ORIENTATION_LANDSCAPE: number;
				static ORIENTATION_SQUARE: number;
				orientation: number;
				static UI_MODE_TYPE_MASK: number;
				static UI_MODE_TYPE_UNDEFINED: number;
				static UI_MODE_TYPE_NORMAL: number;
				static UI_MODE_TYPE_DESK: number;
				static UI_MODE_TYPE_CAR: number;
				static UI_MODE_TYPE_TELEVISION: number;
				static UI_MODE_TYPE_APPLIANCE: number;
				static UI_MODE_NIGHT_MASK: number;
				static UI_MODE_NIGHT_UNDEFINED: number;
				static UI_MODE_NIGHT_NO: number;
				static UI_MODE_NIGHT_YES: number;
				uiMode: number;
				static SCREEN_WIDTH_DP_UNDEFINED: number;
				screenWidthDp: number;
				static SCREEN_HEIGHT_DP_UNDEFINED: number;
				screenHeightDp: number;
				static SMALLEST_SCREEN_WIDTH_DP_UNDEFINED: number;
				smallestScreenWidthDp: number;
				static DENSITY_DPI_UNDEFINED: number;
				densityDpi: number;
				static CREATOR: android.os.Parcelable.ICreator<android.content.res.Configuration>;
				static class: java.lang.Class<android.content.res.Configuration>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				setLayoutDirection(arg1: java.util.Locale): void;
				getLayoutDirection(): number;
				setTo(arg1: android.content.res.Configuration): void;
				diff(arg1: android.content.res.Configuration): number;
				setToDefaults(): void;
				readFromParcel(arg1: android.os.Parcel): void;
				updateFrom(arg1: android.content.res.Configuration): number;
				static needNewResources(arg1: number, arg2: number): boolean;
				isLayoutSizeAtLeast(arg1: number): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				equals(arg1: android.content.res.Configuration): boolean;
				toString(): string;
				compareTo(arg1: any): number;
				compareTo(arg1: android.content.res.Configuration): number;
				setLocale(arg1: java.util.Locale): void;
			}
			export class Resources extends java.lang.Object {
				constructor(arg1: android.content.res.AssetManager, arg2: android.util.DisplayMetrics, arg3: android.content.res.Configuration);
				static class: java.lang.Class<android.content.res.Resources>;
				getAssets(): android.content.res.AssetManager;
				getAnimation(arg1: number): android.content.res.IXmlResourceParser;
				getDrawable(arg1: number): android.graphics.drawable.Drawable;
				static getSystem(): android.content.res.Resources;
				getTextArray(arg1: number): native.Array<java.lang.ICharSequence>;
				getXml(arg1: number): android.content.res.IXmlResourceParser;
				newTheme(): android.content.res.Resources.Theme;
				getIntArray(arg1: number): native.Array<number>;
				getMovie(arg1: number): android.graphics.Movie;
				getFraction(arg1: number, arg2: number, arg3: number): number;
				getDimensionPixelOffset(arg1: number): number;
				getResourcePackageName(arg1: number): string;
				getQuantityText(arg1: number, arg2: number): java.lang.ICharSequence;
				openRawResource(arg1: number, arg2: android.util.TypedValue): java.io.InputStream;
				openRawResource(arg1: number): java.io.InputStream;
				getDimensionPixelSize(arg1: number): number;
				getConfiguration(): android.content.res.Configuration;
				getColorStateList(arg1: number): android.content.res.ColorStateList;
				getQuantityString(arg1: number, arg2: number): string;
				getQuantityString(arg1: number, arg2: number, arg3: native.Array<any>): string;
				openRawResourceFd(arg1: number): android.content.res.AssetFileDescriptor;
				getDisplayMetrics(): android.util.DisplayMetrics;
				obtainAttributes(arg1: android.util.IAttributeSet, arg2: native.Array<number>): android.content.res.TypedArray;
				updateConfiguration(arg1: android.content.res.Configuration, arg2: android.util.DisplayMetrics): void;
				obtainTypedArray(arg1: number): android.content.res.TypedArray;
				getResourceTypeName(arg1: number): string;
				finishPreloading(): void;
				parseBundleExtras(arg1: android.content.res.IXmlResourceParser, arg2: android.os.Bundle): void;
				parseBundleExtra(arg1: java.lang.String, arg2: android.util.IAttributeSet, arg3: android.os.Bundle): void;
				parseBundleExtra(arg1: string, arg2: android.util.IAttributeSet, arg3: android.os.Bundle): void;
				getValueForDensity(arg1: number, arg2: number, arg3: android.util.TypedValue, arg4: boolean): void;
				flushLayoutCache(): void;
				getDrawableForDensity(arg1: number, arg2: number): android.graphics.drawable.Drawable;
				getResourceEntryName(arg1: number): string;
				getResourceName(arg1: number): string;
				getValue(arg1: java.lang.String, arg2: android.util.TypedValue, arg3: boolean): void;
				getValue(arg1: string, arg2: android.util.TypedValue, arg3: boolean): void;
				getValue(arg1: number, arg2: android.util.TypedValue, arg3: boolean): void;
				getBoolean(arg1: number): boolean;
				getInteger(arg1: number): number;
				getString(arg1: number, arg2: native.Array<any>): string;
				getString(arg1: number): string;
				getLayout(arg1: number): android.content.res.IXmlResourceParser;
				getText(arg1: number): java.lang.ICharSequence;
				getText(arg1: number, arg2: java.lang.ICharSequence): java.lang.ICharSequence;
				getText(arg1: number, arg2: string): java.lang.ICharSequence;
				getStringArray(arg1: number): native.Array<java.lang.String>;
				getColor(arg1: number): number;
				getDimension(arg1: number): number;
				getIdentifier(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): number;
				getIdentifier(arg1: string, arg2: string, arg3: string): number;
			}
			export module Resources {
				export class Theme extends java.lang.Object {
					static class: java.lang.Class<android.content.res.Resources.Theme>;
					obtainStyledAttributes(arg1: native.Array<number>): android.content.res.TypedArray;
					obtainStyledAttributes(arg1: android.util.IAttributeSet, arg2: native.Array<number>, arg3: number, arg4: number): android.content.res.TypedArray;
					obtainStyledAttributes(arg1: number, arg2: native.Array<number>): android.content.res.TypedArray;
					setTo(arg1: android.content.res.Resources.Theme): void;
					resolveAttribute(arg1: number, arg2: android.util.TypedValue, arg3: boolean): boolean;
					applyStyle(arg1: number, arg2: boolean): void;
					dump(arg1: number, arg2: java.lang.String, arg3: java.lang.String): void;
					dump(arg1: number, arg2: string, arg3: string): void;
				}
				export class NotFoundException extends java.lang.RuntimeException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static class: java.lang.Class<android.content.res.Resources.NotFoundException>;
				}
			}
		}
		export class AsyncTaskLoader<D> extends android.content.Loader<D> {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.content.AsyncTaskLoader<any>>;
			cancelLoadInBackground(): void;
			isLoadInBackgroundCanceled(): boolean;
			onCanceled(arg1: D): void;
			setUpdateThrottle(arg1: native.Long): void;
			loadInBackground(): D;
			dump(arg1: java.lang.String, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
			dump(arg1: string, arg2: java.io.FileDescriptor, arg3: java.io.PrintWriter, arg4: native.Array<java.lang.String>): void;
		}
		export class PeriodicSync extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.accounts.Account, arg2: java.lang.String, arg3: android.os.Bundle, arg4: native.Long);
			constructor(arg1: android.accounts.Account, arg2: string, arg3: android.os.Bundle, arg4: native.Long);
			account: android.accounts.Account;
			authority: java.lang.String;
			extras: android.os.Bundle;
			period: native.Long;
			static CREATOR: android.os.Parcelable.ICreator<android.content.PeriodicSync>;
			static class: java.lang.Class<android.content.PeriodicSync>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			equals(arg1: any): boolean;
		}
		export class SharedPreferences implements android.content.ISharedPreferences {
			constructor(implementation: android.content.ISharedPreferences);
			getAll(): java.util.IMap<string, any>;
			edit(): android.content.SharedPreferences.IEditor;
			getStringSet(arg1: java.lang.String, arg2: java.util.ISet<string>): java.util.ISet<string>;
			getStringSet(arg1: string, arg2: java.util.ISet<string>): java.util.ISet<string>;
			registerOnSharedPreferenceChangeListener(arg1: android.content.SharedPreferences.IOnSharedPreferenceChangeListener): void;
			unregisterOnSharedPreferenceChangeListener(arg1: android.content.SharedPreferences.IOnSharedPreferenceChangeListener): void;
			contains(arg1: java.lang.String): boolean;
			contains(arg1: string): boolean;
			getBoolean(arg1: java.lang.String, arg2: boolean): boolean;
			getBoolean(arg1: string, arg2: boolean): boolean;
			getFloat(arg1: java.lang.String, arg2: native.Float): number;
			getFloat(arg1: string, arg2: native.Float): number;
			getInt(arg1: java.lang.String, arg2: number): number;
			getInt(arg1: string, arg2: number): number;
			getLong(arg1: java.lang.String, arg2: native.Long): any;
			getLong(arg1: string, arg2: native.Long): any;
			getString(arg1: java.lang.String, arg2: java.lang.String): string;
			getString(arg1: string, arg2: string): string;
		}
		export module SharedPreferences {
			export class OnSharedPreferenceChangeListener implements android.content.SharedPreferences.IOnSharedPreferenceChangeListener {
				constructor(implementation: android.content.SharedPreferences.IOnSharedPreferenceChangeListener);
				onSharedPreferenceChanged(arg1: android.content.ISharedPreferences, arg2: java.lang.String): void;
				onSharedPreferenceChanged(arg1: android.content.ISharedPreferences, arg2: string): void;
			}
			export class Editor implements android.content.SharedPreferences.IEditor {
				constructor(implementation: android.content.SharedPreferences.IEditor);
				apply(): void;
				putString(arg1: java.lang.String, arg2: java.lang.String): android.content.SharedPreferences.IEditor;
				putString(arg1: string, arg2: string): android.content.SharedPreferences.IEditor;
				putStringSet(arg1: java.lang.String, arg2: java.util.ISet<string>): android.content.SharedPreferences.IEditor;
				putStringSet(arg1: string, arg2: java.util.ISet<string>): android.content.SharedPreferences.IEditor;
				remove(arg1: java.lang.String): android.content.SharedPreferences.IEditor;
				remove(arg1: string): android.content.SharedPreferences.IEditor;
				clear(): android.content.SharedPreferences.IEditor;
				putBoolean(arg1: java.lang.String, arg2: boolean): android.content.SharedPreferences.IEditor;
				putBoolean(arg1: string, arg2: boolean): android.content.SharedPreferences.IEditor;
				putFloat(arg1: java.lang.String, arg2: native.Float): android.content.SharedPreferences.IEditor;
				putFloat(arg1: string, arg2: native.Float): android.content.SharedPreferences.IEditor;
				putInt(arg1: java.lang.String, arg2: number): android.content.SharedPreferences.IEditor;
				putInt(arg1: string, arg2: number): android.content.SharedPreferences.IEditor;
				putLong(arg1: java.lang.String, arg2: native.Long): android.content.SharedPreferences.IEditor;
				putLong(arg1: string, arg2: native.Long): android.content.SharedPreferences.IEditor;
				commit(): boolean;
			}
			export interface IOnSharedPreferenceChangeListener {
				onSharedPreferenceChanged(arg1: android.content.ISharedPreferences, arg2: string): void;
			}
			export interface IEditor {
				apply(): void;
				putString(arg1: string, arg2: string): android.content.SharedPreferences.IEditor;
				putStringSet(arg1: string, arg2: java.util.ISet<string>): android.content.SharedPreferences.IEditor;
				remove(arg1: string): android.content.SharedPreferences.IEditor;
				clear(): android.content.SharedPreferences.IEditor;
				putBoolean(arg1: string, arg2: boolean): android.content.SharedPreferences.IEditor;
				putFloat(arg1: string, arg2: native.Float): android.content.SharedPreferences.IEditor;
				putInt(arg1: string, arg2: number): android.content.SharedPreferences.IEditor;
				putLong(arg1: string, arg2: native.Long): android.content.SharedPreferences.IEditor;
				commit(): boolean;
			}
		}
		export interface IServiceConnection {
			onServiceConnected(arg1: android.content.ComponentName, arg2: android.os.IIBinder): void;
			onServiceDisconnected(arg1: android.content.ComponentName): void;
		}
		export class ContentValues extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.content.ContentValues);
			constructor(arg1: number);
			constructor();
			static TAG: java.lang.String;
			static CREATOR: android.os.Parcelable.ICreator<android.content.ContentValues>;
			static class: java.lang.Class<android.content.ContentValues>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getAsShort(arg1: java.lang.String): java.lang.Short;
			getAsShort(arg1: string): java.lang.Short;
			getAsFloat(arg1: java.lang.String): java.lang.Float;
			getAsFloat(arg1: string): java.lang.Float;
			getAsLong(arg1: java.lang.String): java.lang.Long;
			getAsLong(arg1: string): java.lang.Long;
			getAsBoolean(arg1: java.lang.String): boolean;
			getAsBoolean(arg1: string): boolean;
			valueSet(): java.util.ISet<java.util.Map.IEntry<string, any>>;
			getAsByte(arg1: java.lang.String): java.lang.Byte;
			getAsByte(arg1: string): java.lang.Byte;
			getAsDouble(arg1: java.lang.String): java.lang.Double;
			getAsDouble(arg1: string): java.lang.Double;
			getAsInteger(arg1: java.lang.String): java.lang.Integer;
			getAsInteger(arg1: string): java.lang.Integer;
			getAsByteArray(arg1: java.lang.String): native.Array<native.Byte>;
			getAsByteArray(arg1: string): native.Array<native.Byte>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			get(arg1: java.lang.String): any;
			get(arg1: string): any;
			size(): number;
			put(arg1: java.lang.String, arg2: java.lang.Double): void;
			put(arg1: string, arg2: java.lang.Double): void;
			put(arg1: java.lang.String, arg2: java.lang.Boolean): void;
			put(arg1: string, arg2: boolean): void;
			put(arg1: java.lang.String, arg2: java.lang.Short): void;
			put(arg1: string, arg2: java.lang.Short): void;
			put(arg1: java.lang.String, arg2: java.lang.Long): void;
			put(arg1: string, arg2: java.lang.Long): void;
			put(arg1: java.lang.String, arg2: java.lang.Integer): void;
			put(arg1: string, arg2: java.lang.Integer): void;
			put(arg1: java.lang.String, arg2: java.lang.String): void;
			put(arg1: string, arg2: string): void;
			put(arg1: java.lang.String, arg2: java.lang.Float): void;
			put(arg1: string, arg2: java.lang.Float): void;
			put(arg1: java.lang.String, arg2: java.lang.Byte): void;
			put(arg1: string, arg2: java.lang.Byte): void;
			put(arg1: java.lang.String, arg2: native.Array<native.Byte>): void;
			put(arg1: string, arg2: native.Array<native.Byte>): void;
			putAll(arg1: android.content.ContentValues): void;
			remove(arg1: java.lang.String): void;
			remove(arg1: string): void;
			clear(): void;
			keySet(): java.util.ISet<string>;
			containsKey(arg1: java.lang.String): boolean;
			containsKey(arg1: string): boolean;
			putNull(arg1: java.lang.String): void;
			putNull(arg1: string): void;
			getAsString(arg1: java.lang.String): string;
			getAsString(arg1: string): string;
		}
		export class SyncAdapterType extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.os.Parcel);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: boolean, arg4: boolean);
			constructor(arg1: string, arg2: string, arg3: boolean, arg4: boolean);
			authority: java.lang.String;
			accountType: java.lang.String;
			isKey: boolean;
			static CREATOR: android.os.Parcelable.ICreator<android.content.SyncAdapterType>;
			static class: java.lang.Class<android.content.SyncAdapterType>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getSettingsActivity(): string;
			allowParallelSyncs(): boolean;
			isAlwaysSyncable(): boolean;
			supportsUploading(): boolean;
			static newKey(arg1: java.lang.String, arg2: java.lang.String): android.content.SyncAdapterType;
			static newKey(arg1: string, arg2: string): android.content.SyncAdapterType;
			isUserVisible(): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class ContentProviderResult extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.net.Uri);
			constructor(arg1: android.os.Parcel);
			constructor(arg1: number);
			uri: android.net.Uri;
			count: java.lang.Integer;
			static CREATOR: android.os.Parcelable.ICreator<android.content.ContentProviderResult>;
			static class: java.lang.Class<android.content.ContentProviderResult>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			toString(): string;
		}
		export class OperationApplicationException extends java.lang.Exception {
			constructor(arg1: number);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			constructor();
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.content.OperationApplicationException>;
			getNumSuccessfulYieldPoints(): number;
		}
		export class BroadcastReceiver extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.content.BroadcastReceiver>;
			ResultData: string;
			ResultCode: number;
			DebugUnregister: boolean;
			setResult(arg1: number, arg2: java.lang.String, arg3: android.os.Bundle): void;
			setResult(arg1: number, arg2: string, arg3: android.os.Bundle): void;
			onReceive(arg1: android.content.Context, arg2: android.content.Intent): void;
			isInitialStickyBroadcast(): boolean;
			clearAbortBroadcast(): void;
			isOrderedBroadcast(): boolean;
			setDebugUnregister(arg1: boolean): void;
			getDebugUnregister(): boolean;
			getResultExtras(arg1: boolean): android.os.Bundle;
			abortBroadcast(): void;
			setOrderedHint(arg1: boolean): void;
			setResultExtras(arg1: android.os.Bundle): void;
			getAbortBroadcast(): boolean;
			peekService(arg1: android.content.Context, arg2: android.content.Intent): android.os.IIBinder;
			goAsync(): android.content.BroadcastReceiver.PendingResult;
			setResultCode(arg1: number): void;
			setResultData(arg1: java.lang.String): void;
			setResultData(arg1: string): void;
			getResultData(): string;
			getResultCode(): number;
		}
		export module BroadcastReceiver {
			export class PendingResult extends java.lang.Object {
				static class: java.lang.Class<android.content.BroadcastReceiver.PendingResult>;
				ResultData: string;
				ResultCode: number;
				setResult(arg1: number, arg2: java.lang.String, arg3: android.os.Bundle): void;
				setResult(arg1: number, arg2: string, arg3: android.os.Bundle): void;
				clearAbortBroadcast(): void;
				getResultExtras(arg1: boolean): android.os.Bundle;
				abortBroadcast(): void;
				setResultExtras(arg1: android.os.Bundle): void;
				getAbortBroadcast(): boolean;
				setResultCode(arg1: number): void;
				setResultData(arg1: java.lang.String): void;
				setResultData(arg1: string): void;
				getResultData(): string;
				getResultCode(): number;
				finish(): void;
			}
		}
		export class UriMatcher extends java.lang.Object {
			constructor(arg1: number);
			static NO_MATCH: number;
			static class: java.lang.Class<android.content.UriMatcher>;
			addURI(arg1: java.lang.String, arg2: java.lang.String, arg3: number): void;
			addURI(arg1: string, arg2: string, arg3: number): void;
			match(arg1: android.net.Uri): number;
		}
		export class DialogInterface implements android.content.IDialogInterface {
			constructor(implementation: android.content.IDialogInterface);
			static BUTTON_POSITIVE: number;
			static BUTTON_NEGATIVE: number;
			static BUTTON_NEUTRAL: number;
			static BUTTON1: number;
			static BUTTON2: number;
			static BUTTON3: number;
			dismiss(): void;
			cancel(): void;
		}
		export module DialogInterface {
			export class OnCancelListener implements android.content.DialogInterface.IOnCancelListener {
				constructor(implementation: android.content.DialogInterface.IOnCancelListener);
				onCancel(arg1: android.content.IDialogInterface): void;
			}
			export class OnKeyListener implements android.content.DialogInterface.IOnKeyListener {
				constructor(implementation: android.content.DialogInterface.IOnKeyListener);
				onKey(arg1: android.content.IDialogInterface, arg2: number, arg3: android.view.KeyEvent): boolean;
			}
			export interface IOnShowListener {
				onShow(arg1: android.content.IDialogInterface): void;
			}
			export class OnClickListener implements android.content.DialogInterface.IOnClickListener {
				constructor(implementation: android.content.DialogInterface.IOnClickListener);
				onClick(arg1: android.content.IDialogInterface, arg2: number): void;
			}
			export class OnShowListener implements android.content.DialogInterface.IOnShowListener {
				constructor(implementation: android.content.DialogInterface.IOnShowListener);
				onShow(arg1: android.content.IDialogInterface): void;
			}
			export class OnMultiChoiceClickListener implements android.content.DialogInterface.IOnMultiChoiceClickListener {
				constructor(implementation: android.content.DialogInterface.IOnMultiChoiceClickListener);
				onClick(arg1: android.content.IDialogInterface, arg2: number, arg3: boolean): void;
			}
			export interface IOnClickListener {
				onClick(arg1: android.content.IDialogInterface, arg2: number): void;
			}
			export interface IOnMultiChoiceClickListener {
				onClick(arg1: android.content.IDialogInterface, arg2: number, arg3: boolean): void;
			}
			export interface IOnCancelListener {
				onCancel(arg1: android.content.IDialogInterface): void;
			}
			export interface IOnKeyListener {
				onKey(arg1: android.content.IDialogInterface, arg2: number, arg3: android.view.KeyEvent): boolean;
			}
			export class OnDismissListener implements android.content.DialogInterface.IOnDismissListener {
				constructor(implementation: android.content.DialogInterface.IOnDismissListener);
				onDismiss(arg1: android.content.IDialogInterface): void;
			}
			export interface IOnDismissListener {
				onDismiss(arg1: android.content.IDialogInterface): void;
			}
		}
		export class ContentUris extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.content.ContentUris>;
			static appendId(arg1: android.net.Uri.Builder, arg2: native.Long): android.net.Uri.Builder;
			static parseId(arg1: android.net.Uri): any;
			static withAppendedId(arg1: android.net.Uri, arg2: native.Long): android.net.Uri;
		}
		export class ReceiverCallNotAllowedException extends android.util.AndroidRuntimeException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.content.ReceiverCallNotAllowedException>;
		}
		export class AsyncQueryHandler extends android.os.Handler {
			constructor(arg1: android.content.ContentResolver);
			static class: java.lang.Class<android.content.AsyncQueryHandler>;
			WorkerHandler: { new (arg2: android.os.Looper): android.content.AsyncQueryHandler.WorkerHandler };
			handleMessage(arg1: android.os.Message): void;
			startUpdate(arg1: number, arg2: any, arg3: android.net.Uri, arg4: android.content.ContentValues, arg5: java.lang.String, arg6: native.Array<java.lang.String>): void;
			startUpdate(arg1: number, arg2: any, arg3: android.net.Uri, arg4: android.content.ContentValues, arg5: string, arg6: native.Array<java.lang.String>): void;
			startDelete(arg1: number, arg2: any, arg3: android.net.Uri, arg4: java.lang.String, arg5: native.Array<java.lang.String>): void;
			startDelete(arg1: number, arg2: any, arg3: android.net.Uri, arg4: string, arg5: native.Array<java.lang.String>): void;
			startInsert(arg1: number, arg2: any, arg3: android.net.Uri, arg4: android.content.ContentValues): void;
			startQuery(arg1: number, arg2: any, arg3: android.net.Uri, arg4: native.Array<java.lang.String>, arg5: java.lang.String, arg6: native.Array<java.lang.String>, arg7: java.lang.String): void;
			startQuery(arg1: number, arg2: any, arg3: android.net.Uri, arg4: native.Array<java.lang.String>, arg5: string, arg6: native.Array<java.lang.String>, arg7: string): void;
			cancelOperation(arg1: number): void;
		}
		export module AsyncQueryHandler {
			export class WorkerHandler extends android.os.Handler {
				static class: java.lang.Class<android.content.AsyncQueryHandler.WorkerHandler>;
				handleMessage(arg1: android.os.Message): void;
			}
			export class WorkerArgs extends java.lang.Object {
				uri: android.net.Uri;
				handler: android.os.Handler;
				projection: native.Array<java.lang.String>;
				selection: java.lang.String;
				selectionArgs: native.Array<java.lang.String>;
				orderBy: java.lang.String;
				result: any;
				cookie: any;
				values: android.content.ContentValues;
				static class: java.lang.Class<android.content.AsyncQueryHandler.WorkerArgs>;
			}
		}
		export interface IComponentCallbacks2 extends android.content.IComponentCallbacks {
			onTrimMemory(arg1: number): void;
			onLowMemory(): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
		}
		export module IComponentCallbacks2 {
			var TRIM_MEMORY_COMPLETE: number;
			var TRIM_MEMORY_MODERATE: number;
			var TRIM_MEMORY_BACKGROUND: number;
			var TRIM_MEMORY_UI_HIDDEN: number;
			var TRIM_MEMORY_RUNNING_CRITICAL: number;
			var TRIM_MEMORY_RUNNING_LOW: number;
			var TRIM_MEMORY_RUNNING_MODERATE: number;
		}
		export interface IDialogInterface {
			dismiss(): void;
			cancel(): void;
		}
		export module IDialogInterface {
			var BUTTON_POSITIVE: number;
			var BUTTON_NEGATIVE: number;
			var BUTTON_NEUTRAL: number;
			var BUTTON1: number;
			var BUTTON2: number;
			var BUTTON3: number;
		}
		export class IntentFilter extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.content.IntentFilter);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static SYSTEM_HIGH_PRIORITY: number;
			static SYSTEM_LOW_PRIORITY: number;
			static MATCH_CATEGORY_MASK: number;
			static MATCH_ADJUSTMENT_MASK: number;
			static MATCH_ADJUSTMENT_NORMAL: number;
			static MATCH_CATEGORY_EMPTY: number;
			static MATCH_CATEGORY_SCHEME: number;
			static MATCH_CATEGORY_HOST: number;
			static MATCH_CATEGORY_PORT: number;
			static MATCH_CATEGORY_PATH: number;
			static MATCH_CATEGORY_TYPE: number;
			static NO_MATCH_TYPE: number;
			static NO_MATCH_DATA: number;
			static NO_MATCH_ACTION: number;
			static NO_MATCH_CATEGORY: number;
			static CREATOR: android.os.Parcelable.ICreator<android.content.IntentFilter>;
			static class: java.lang.Class<android.content.IntentFilter>;
			Priority: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			addAction(arg1: java.lang.String): void;
			addAction(arg1: string): void;
			matchAction(arg1: java.lang.String): boolean;
			matchAction(arg1: string): boolean;
			addDataType(arg1: java.lang.String): void;
			addDataType(arg1: string): void;
			getDataPath(arg1: number): android.os.PatternMatcher;
			countActions(): number;
			addDataScheme(arg1: java.lang.String): void;
			addDataScheme(arg1: string): void;
			hasDataType(arg1: java.lang.String): boolean;
			hasDataType(arg1: string): boolean;
			hasDataScheme(arg1: java.lang.String): boolean;
			hasDataScheme(arg1: string): boolean;
			addDataPath(arg1: java.lang.String, arg2: number): void;
			addDataPath(arg1: string, arg2: number): void;
			hasDataPath(arg1: java.lang.String): boolean;
			hasDataPath(arg1: string): boolean;
			pathsIterator(): java.util.IIterator<android.os.PatternMatcher>;
			typesIterator(): java.util.IIterator<string>;
			hasAction(arg1: java.lang.String): boolean;
			hasAction(arg1: string): boolean;
			getDataScheme(arg1: number): string;
			hasCategory(arg1: java.lang.String): boolean;
			hasCategory(arg1: string): boolean;
			addCategory(arg1: java.lang.String): void;
			addCategory(arg1: string): void;
			writeToXml(arg1: org.xmlpull.v1.IXmlSerializer): void;
			matchData(arg1: java.lang.String, arg2: java.lang.String, arg3: android.net.Uri): number;
			matchData(arg1: string, arg2: string, arg3: android.net.Uri): number;
			readFromXml(arg1: org.xmlpull.v1.IXmlPullParser): void;
			getCategory(arg1: number): string;
			countDataSchemes(): number;
			countDataAuthorities(): number;
			schemesIterator(): java.util.IIterator<string>;
			getDataAuthority(arg1: number): android.content.IntentFilter.AuthorityEntry;
			hasDataAuthority(arg1: android.net.Uri): boolean;
			addDataAuthority(arg1: java.lang.String, arg2: java.lang.String): void;
			addDataAuthority(arg1: string, arg2: string): void;
			countDataTypes(): number;
			actionsIterator(): java.util.IIterator<string>;
			countDataPaths(): number;
			matchCategories(arg1: java.util.ISet<string>): string;
			categoriesIterator(): java.util.IIterator<string>;
			authoritiesIterator(): java.util.IIterator<android.content.IntentFilter.AuthorityEntry>;
			countCategories(): number;
			matchDataAuthority(arg1: android.net.Uri): number;
			setPriority(arg1: number): void;
			getPriority(): number;
			static create(arg1: java.lang.String, arg2: java.lang.String): android.content.IntentFilter;
			static create(arg1: string, arg2: string): android.content.IntentFilter;
			match(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: android.net.Uri, arg5: java.util.ISet<string>, arg6: java.lang.String): number;
			match(arg1: string, arg2: string, arg3: string, arg4: android.net.Uri, arg5: java.util.ISet<string>, arg6: string): number;
			match(arg1: android.content.ContentResolver, arg2: android.content.Intent, arg3: boolean, arg4: java.lang.String): number;
			match(arg1: android.content.ContentResolver, arg2: android.content.Intent, arg3: boolean, arg4: string): number;
			dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
			dump(arg1: android.util.IPrinter, arg2: string): void;
			getAction(arg1: number): string;
			getDataType(arg1: number): string;
		}
		export module IntentFilter {
			export class MalformedMimeTypeException extends android.util.AndroidException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.content.IntentFilter.MalformedMimeTypeException>;
			}
			export class AuthorityEntry extends java.lang.Object {
				constructor(arg1: java.lang.String, arg2: java.lang.String);
				constructor(arg1: string, arg2: string);
				static class: java.lang.Class<android.content.IntentFilter.AuthorityEntry>;
				getHost(): string;
				match(arg1: android.net.Uri): number;
				getPort(): number;
			}
		}
		export class ContextWrapper extends android.content.Context {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.content.ContextWrapper>;
			enforceCallingOrSelfPermission(arg1: java.lang.String, arg2: java.lang.String): void;
			enforceCallingOrSelfPermission(arg1: string, arg2: string): void;
			getWallpaperDesiredMinimumHeight(): number;
			sendStickyOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: java.lang.String, arg7: android.os.Bundle): void;
			sendStickyOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: string, arg7: android.os.Bundle): void;
			getWallpaperDesiredMinimumWidth(): number;
			checkCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number): number;
			enforceCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number, arg3: java.lang.String): void;
			enforceCallingOrSelfUriPermission(arg1: android.net.Uri, arg2: number, arg3: string): void;
			openFileOutput(arg1: java.lang.String, arg2: number): java.io.FileOutputStream;
			openFileOutput(arg1: string, arg2: number): java.io.FileOutputStream;
			unregisterReceiver(arg1: android.content.BroadcastReceiver): void;
			getExternalCacheDir(): java.io.File;
			openOrCreateDatabase(arg1: java.lang.String, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: string, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: java.lang.String, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
			openOrCreateDatabase(arg1: string, arg2: number, arg3: android.database.sqlite.SQLiteDatabase.ICursorFactory, arg4: android.database.IDatabaseErrorHandler): android.database.sqlite.SQLiteDatabase;
			startIntentSender(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: number, arg5: number, arg6: android.os.Bundle): void;
			startIntentSender(arg1: android.content.IntentSender, arg2: android.content.Intent, arg3: number, arg4: number, arg5: number): void;
			clearWallpaper(): void;
			getDatabasePath(arg1: java.lang.String): java.io.File;
			getDatabasePath(arg1: string): java.io.File;
			sendStickyBroadcast(arg1: android.content.Intent): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: java.lang.String, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: java.lang.String, arg7: android.os.Bundle): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: string, arg3: android.content.BroadcastReceiver, arg4: android.os.Handler, arg5: number, arg6: string, arg7: android.os.Bundle): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: java.lang.String): void;
			sendOrderedBroadcast(arg1: android.content.Intent, arg2: string): void;
			sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
			sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: java.lang.String): void;
			sendBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: string): void;
			removeStickyBroadcast(arg1: android.content.Intent): void;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter): android.content.Intent;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter, arg3: java.lang.String, arg4: android.os.Handler): android.content.Intent;
			registerReceiver(arg1: android.content.BroadcastReceiver, arg2: android.content.IntentFilter, arg3: string, arg4: android.os.Handler): android.content.Intent;
			startInstrumentation(arg1: android.content.ComponentName, arg2: java.lang.String, arg3: android.os.Bundle): boolean;
			startInstrumentation(arg1: android.content.ComponentName, arg2: string, arg3: android.os.Bundle): boolean;
			getPackageCodePath(): string;
			getApplicationInfo(): android.content.pm.ApplicationInfo;
			enforcePermission(arg1: java.lang.String, arg2: number, arg3: number, arg4: java.lang.String): void;
			enforcePermission(arg1: string, arg2: number, arg3: number, arg4: string): void;
			grantUriPermission(arg1: java.lang.String, arg2: android.net.Uri, arg3: number): void;
			grantUriPermission(arg1: string, arg2: android.net.Uri, arg3: number): void;
			revokeUriPermission(arg1: android.net.Uri, arg2: number): void;
			getSystemService(arg1: java.lang.String): any;
			getSystemService(arg1: string): any;
			getApplicationContext(): android.content.Context;
			getSharedPreferences(arg1: java.lang.String, arg2: number): android.content.ISharedPreferences;
			getSharedPreferences(arg1: string, arg2: number): android.content.ISharedPreferences;
			getExternalFilesDir(arg1: java.lang.String): java.io.File;
			getExternalFilesDir(arg1: string): java.io.File;
			deleteDatabase(arg1: java.lang.String): boolean;
			deleteDatabase(arg1: string): boolean;
			startActivities(arg1: native.Array<android.content.Intent>): void;
			startActivities(arg1: native.Array<android.content.Intent>, arg2: android.os.Bundle): void;
			getFileStreamPath(arg1: java.lang.String): java.io.File;
			getFileStreamPath(arg1: string): java.io.File;
			getPackageManager(): android.content.pm.PackageManager;
			getContentResolver(): android.content.ContentResolver;
			getBaseContext(): android.content.Context;
			getObbDir(): java.io.File;
			getCacheDir(): java.io.File;
			getDir(arg1: java.lang.String, arg2: number): java.io.File;
			getDir(arg1: string, arg2: number): java.io.File;
			getFilesDir(): java.io.File;
			databaseList(): native.Array<java.lang.String>;
			getAssets(): android.content.res.AssetManager;
			deleteFile(arg1: java.lang.String): boolean;
			deleteFile(arg1: string): boolean;
			openFileInput(arg1: java.lang.String): java.io.FileInputStream;
			openFileInput(arg1: string): java.io.FileInputStream;
			fileList(): native.Array<java.lang.String>;
			setTheme(arg1: number): void;
			getMainLooper(): android.os.Looper;
			peekWallpaper(): android.graphics.drawable.Drawable;
			sendBroadcast(arg1: android.content.Intent): void;
			sendBroadcast(arg1: android.content.Intent, arg2: java.lang.String): void;
			sendBroadcast(arg1: android.content.Intent, arg2: string): void;
			stopService(arg1: android.content.Intent): boolean;
			startActivity(arg1: android.content.Intent, arg2: android.os.Bundle): void;
			startActivity(arg1: android.content.Intent): void;
			isRestricted(): boolean;
			setWallpaper(arg1: java.io.InputStream): void;
			setWallpaper(arg1: android.graphics.Bitmap): void;
			startService(arg1: android.content.Intent): android.content.ComponentName;
			getWallpaper(): android.graphics.drawable.Drawable;
			unbindService(arg1: android.content.IServiceConnection): void;
			bindService(arg1: android.content.Intent, arg2: android.content.IServiceConnection, arg3: number): boolean;
			sendOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: java.lang.String, arg4: android.content.BroadcastReceiver, arg5: android.os.Handler, arg6: number, arg7: java.lang.String, arg8: android.os.Bundle): void;
			sendOrderedBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle, arg3: string, arg4: android.content.BroadcastReceiver, arg5: android.os.Handler, arg6: number, arg7: string, arg8: android.os.Bundle): void;
			getPackageResourcePath(): string;
			sendStickyOrderedBroadcast(arg1: android.content.Intent, arg2: android.content.BroadcastReceiver, arg3: android.os.Handler, arg4: number, arg5: java.lang.String, arg6: android.os.Bundle): void;
			sendStickyOrderedBroadcast(arg1: android.content.Intent, arg2: android.content.BroadcastReceiver, arg3: android.os.Handler, arg4: number, arg5: string, arg6: android.os.Bundle): void;
			sendStickyBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
			checkCallingPermission(arg1: java.lang.String): number;
			checkCallingPermission(arg1: string): number;
			checkCallingOrSelfPermission(arg1: java.lang.String): number;
			checkCallingOrSelfPermission(arg1: string): number;
			removeStickyBroadcastAsUser(arg1: android.content.Intent, arg2: android.os.UserHandle): void;
			enforceCallingPermission(arg1: java.lang.String, arg2: java.lang.String): void;
			enforceCallingPermission(arg1: string, arg2: string): void;
			enforceCallingUriPermission(arg1: android.net.Uri, arg2: number, arg3: java.lang.String): void;
			enforceCallingUriPermission(arg1: android.net.Uri, arg2: number, arg3: string): void;
			createConfigurationContext(arg1: android.content.res.Configuration): android.content.Context;
			checkCallingUriPermission(arg1: android.net.Uri, arg2: number): number;
			checkUriPermission(arg1: android.net.Uri, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number, arg6: number): number;
			checkUriPermission(arg1: android.net.Uri, arg2: string, arg3: string, arg4: number, arg5: number, arg6: number): number;
			checkUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number): number;
			enforceUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number, arg5: java.lang.String): void;
			enforceUriPermission(arg1: android.net.Uri, arg2: number, arg3: number, arg4: number, arg5: string): void;
			enforceUriPermission(arg1: android.net.Uri, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number, arg6: number, arg7: java.lang.String): void;
			enforceUriPermission(arg1: android.net.Uri, arg2: string, arg3: string, arg4: number, arg5: number, arg6: number, arg7: string): void;
			createDisplayContext(arg1: android.view.Display): android.content.Context;
			createPackageContext(arg1: java.lang.String, arg2: number): android.content.Context;
			createPackageContext(arg1: string, arg2: number): android.content.Context;
			checkPermission(arg1: java.lang.String, arg2: number, arg3: number): number;
			checkPermission(arg1: string, arg2: number, arg3: number): number;
			getClassLoader(): java.lang.ClassLoader;
			getResources(): android.content.res.Resources;
			getPackageName(): string;
			getTheme(): android.content.res.Resources.Theme;
		}
		export interface IComponentCallbacks {
			onLowMemory(): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
		}
		export class MutableContextWrapper extends android.content.ContextWrapper {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.content.MutableContextWrapper>;
			setBaseContext(arg1: android.content.Context): void;
		}
	}
	export module speech {
		export class RecognitionListener implements android.speech.IRecognitionListener {
			constructor(implementation: android.speech.IRecognitionListener);
			onError(arg1: number): void;
			onEvent(arg1: number, arg2: android.os.Bundle): void;
			onRmsChanged(arg1: native.Float): void;
			onResults(arg1: android.os.Bundle): void;
			onEndOfSpeech(): void;
			onBufferReceived(arg1: native.Array<native.Byte>): void;
			onReadyForSpeech(arg1: android.os.Bundle): void;
			onBeginningOfSpeech(): void;
			onPartialResults(arg1: android.os.Bundle): void;
		}
		export class RecognizerIntent extends java.lang.Object {
			static EXTRA_CALLING_PACKAGE: java.lang.String;
			static ACTION_RECOGNIZE_SPEECH: java.lang.String;
			static ACTION_WEB_SEARCH: java.lang.String;
			static ACTION_VOICE_SEARCH_HANDS_FREE: java.lang.String;
			static EXTRA_SECURE: java.lang.String;
			static EXTRA_SPEECH_INPUT_MINIMUM_LENGTH_MILLIS: java.lang.String;
			static EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS: java.lang.String;
			static EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS: java.lang.String;
			static EXTRA_LANGUAGE_MODEL: java.lang.String;
			static LANGUAGE_MODEL_FREE_FORM: java.lang.String;
			static LANGUAGE_MODEL_WEB_SEARCH: java.lang.String;
			static EXTRA_PROMPT: java.lang.String;
			static EXTRA_LANGUAGE: java.lang.String;
			static EXTRA_ORIGIN: java.lang.String;
			static EXTRA_MAX_RESULTS: java.lang.String;
			static EXTRA_WEB_SEARCH_ONLY: java.lang.String;
			static EXTRA_PARTIAL_RESULTS: java.lang.String;
			static EXTRA_RESULTS_PENDINGINTENT: java.lang.String;
			static EXTRA_RESULTS_PENDINGINTENT_BUNDLE: java.lang.String;
			static RESULT_NO_MATCH: number;
			static RESULT_CLIENT_ERROR: number;
			static RESULT_SERVER_ERROR: number;
			static RESULT_NETWORK_ERROR: number;
			static RESULT_AUDIO_ERROR: number;
			static EXTRA_RESULTS: java.lang.String;
			static EXTRA_CONFIDENCE_SCORES: java.lang.String;
			static DETAILS_META_DATA: java.lang.String;
			static ACTION_GET_LANGUAGE_DETAILS: java.lang.String;
			static EXTRA_ONLY_RETURN_LANGUAGE_PREFERENCE: java.lang.String;
			static EXTRA_LANGUAGE_PREFERENCE: java.lang.String;
			static EXTRA_SUPPORTED_LANGUAGES: java.lang.String;
			static class: java.lang.Class<android.speech.RecognizerIntent>;
			static getVoiceDetailsIntent(arg1: android.content.Context): android.content.Intent;
		}
		export module tts {
			export class SynthesisRequest extends java.lang.Object {
				constructor(arg1: java.lang.String, arg2: android.os.Bundle);
				constructor(arg1: string, arg2: android.os.Bundle);
				static class: java.lang.Class<android.speech.tts.SynthesisRequest>;
				getSpeechRate(): number;
				getPitch(): number;
				getLanguage(): string;
				getCountry(): string;
				getVariant(): string;
				getText(): string;
				getParams(): android.os.Bundle;
			}
			export interface ISynthesisCallback {
				audioAvailable(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				start(arg1: number, arg2: number, arg3: number): number;
				error(): void;
				done(): number;
				getMaxBufferSize(): number;
			}
			export class SynthesisCallback implements android.speech.tts.ISynthesisCallback {
				constructor(implementation: android.speech.tts.ISynthesisCallback);
				audioAvailable(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				start(arg1: number, arg2: number, arg3: number): number;
				error(): void;
				done(): number;
				getMaxBufferSize(): number;
			}
			export class TextToSpeech extends java.lang.Object {
				constructor(arg1: android.content.Context, arg2: android.speech.tts.TextToSpeech.IOnInitListener);
				constructor(arg1: android.content.Context, arg2: android.speech.tts.TextToSpeech.IOnInitListener, arg3: java.lang.String);
				constructor(arg1: android.content.Context, arg2: android.speech.tts.TextToSpeech.IOnInitListener, arg3: string);
				static SUCCESS: number;
				static ERROR: number;
				static QUEUE_FLUSH: number;
				static QUEUE_ADD: number;
				static LANG_COUNTRY_VAR_AVAILABLE: number;
				static LANG_COUNTRY_AVAILABLE: number;
				static LANG_AVAILABLE: number;
				static LANG_MISSING_DATA: number;
				static LANG_NOT_SUPPORTED: number;
				static ACTION_TTS_QUEUE_PROCESSING_COMPLETED: java.lang.String;
				static class: java.lang.Class<android.speech.tts.TextToSpeech>;
				Engine: { new (): android.speech.tts.TextToSpeech.Engine };
				Language: java.util.Locale;
				getFeatures(arg1: java.util.Locale): java.util.ISet<string>;
				setEngineByPackageName(arg1: java.lang.String): number;
				setEngineByPackageName(arg1: string): number;
				speak(arg1: java.lang.String, arg2: number, arg3: java.util.HashMap<string, string>): number;
				speak(arg1: string, arg2: number, arg3: java.util.HashMap<string, string>): number;
				addSpeech(arg1: java.lang.String, arg2: java.lang.String): number;
				addSpeech(arg1: string, arg2: string): number;
				addSpeech(arg1: java.lang.String, arg2: java.lang.String, arg3: number): number;
				addSpeech(arg1: string, arg2: string, arg3: number): number;
				addEarcon(arg1: java.lang.String, arg2: java.lang.String): number;
				addEarcon(arg1: string, arg2: string): number;
				addEarcon(arg1: java.lang.String, arg2: java.lang.String, arg3: number): number;
				addEarcon(arg1: string, arg2: string, arg3: number): number;
				playEarcon(arg1: java.lang.String, arg2: number, arg3: java.util.HashMap<string, string>): number;
				playEarcon(arg1: string, arg2: number, arg3: java.util.HashMap<string, string>): number;
				setLanguage(arg1: java.util.Locale): number;
				setPitch(arg1: native.Float): number;
				getEngines(): java.util.IList<android.speech.tts.TextToSpeech.EngineInfo>;
				isSpeaking(): boolean;
				setSpeechRate(arg1: native.Float): number;
				playSilence(arg1: native.Long, arg2: number, arg3: java.util.HashMap<string, string>): number;
				synthesizeToFile(arg1: java.lang.String, arg2: java.util.HashMap<string, string>, arg3: java.lang.String): number;
				synthesizeToFile(arg1: string, arg2: java.util.HashMap<string, string>, arg3: string): number;
				getDefaultEngine(): string;
				isLanguageAvailable(arg1: java.util.Locale): number;
				areDefaultsEnforced(): boolean;
				setOnUtteranceProgressListener(arg1: android.speech.tts.UtteranceProgressListener): number;
				setOnUtteranceCompletedListener(arg1: android.speech.tts.TextToSpeech.IOnUtteranceCompletedListener): number;
				getLanguage(): java.util.Locale;
				stop(): number;
				shutdown(): void;
			}
			export module TextToSpeech {
				export interface IOnInitListener {
					onInit(arg1: number): void;
				}
				export interface IOnUtteranceCompletedListener {
					onUtteranceCompleted(arg1: string): void;
				}
				export class OnUtteranceCompletedListener implements android.speech.tts.TextToSpeech.IOnUtteranceCompletedListener {
					constructor(implementation: android.speech.tts.TextToSpeech.IOnUtteranceCompletedListener);
					onUtteranceCompleted(arg1: java.lang.String): void;
					onUtteranceCompleted(arg1: string): void;
				}
				export class EngineInfo extends java.lang.Object {
					constructor();
					name: java.lang.String;
					label: java.lang.String;
					icon: number;
					static class: java.lang.Class<android.speech.tts.TextToSpeech.EngineInfo>;
					toString(): string;
				}
				export class OnInitListener implements android.speech.tts.TextToSpeech.IOnInitListener {
					constructor(implementation: android.speech.tts.TextToSpeech.IOnInitListener);
					onInit(arg1: number): void;
				}
				export class Engine extends java.lang.Object {
					static DEFAULT_STREAM: number;
					static CHECK_VOICE_DATA_PASS: number;
					static CHECK_VOICE_DATA_FAIL: number;
					static CHECK_VOICE_DATA_BAD_DATA: number;
					static CHECK_VOICE_DATA_MISSING_DATA: number;
					static CHECK_VOICE_DATA_MISSING_VOLUME: number;
					static INTENT_ACTION_TTS_SERVICE: java.lang.String;
					static SERVICE_META_DATA: java.lang.String;
					static ACTION_INSTALL_TTS_DATA: java.lang.String;
					static ACTION_TTS_DATA_INSTALLED: java.lang.String;
					static ACTION_CHECK_TTS_DATA: java.lang.String;
					static EXTRA_VOICE_DATA_ROOT_DIRECTORY: java.lang.String;
					static EXTRA_VOICE_DATA_FILES: java.lang.String;
					static EXTRA_VOICE_DATA_FILES_INFO: java.lang.String;
					static EXTRA_AVAILABLE_VOICES: java.lang.String;
					static EXTRA_UNAVAILABLE_VOICES: java.lang.String;
					static EXTRA_CHECK_VOICE_DATA_FOR: java.lang.String;
					static EXTRA_TTS_DATA_INSTALLED: java.lang.String;
					static KEY_PARAM_STREAM: java.lang.String;
					static KEY_PARAM_UTTERANCE_ID: java.lang.String;
					static KEY_PARAM_VOLUME: java.lang.String;
					static KEY_PARAM_PAN: java.lang.String;
					static KEY_FEATURE_NETWORK_SYNTHESIS: java.lang.String;
					static KEY_FEATURE_EMBEDDED_SYNTHESIS: java.lang.String;
					static class: java.lang.Class<android.speech.tts.TextToSpeech.Engine>;
				}
			}
			export class TextToSpeechService extends android.app.Service {
				constructor();
				static class: java.lang.Class<android.speech.tts.TextToSpeechService>;
				onBind(arg1: android.content.Intent): android.os.IIBinder;
				onDestroy(): void;
				onCreate(): void;
			}
			export class UtteranceProgressListener extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.speech.tts.UtteranceProgressListener>;
				onStart(arg1: java.lang.String): void;
				onStart(arg1: string): void;
				onError(arg1: java.lang.String): void;
				onError(arg1: string): void;
				onDone(arg1: java.lang.String): void;
				onDone(arg1: string): void;
			}
		}
		export class RecognizerResultsIntent extends java.lang.Object {
			static ACTION_VOICE_SEARCH_RESULTS: java.lang.String;
			static EXTRA_VOICE_SEARCH_RESULT_STRINGS: java.lang.String;
			static EXTRA_VOICE_SEARCH_RESULT_URLS: java.lang.String;
			static EXTRA_VOICE_SEARCH_RESULT_HTML: java.lang.String;
			static EXTRA_VOICE_SEARCH_RESULT_HTML_BASE_URLS: java.lang.String;
			static EXTRA_VOICE_SEARCH_RESULT_HTTP_HEADERS: java.lang.String;
			static URI_SCHEME_INLINE: java.lang.String;
			static class: java.lang.Class<android.speech.RecognizerResultsIntent>;
		}
		export class SpeechRecognizer extends java.lang.Object {
			static RESULTS_RECOGNITION: java.lang.String;
			static CONFIDENCE_SCORES: java.lang.String;
			static ERROR_NETWORK_TIMEOUT: number;
			static ERROR_NETWORK: number;
			static ERROR_AUDIO: number;
			static ERROR_SERVER: number;
			static ERROR_CLIENT: number;
			static ERROR_SPEECH_TIMEOUT: number;
			static ERROR_NO_MATCH: number;
			static ERROR_RECOGNIZER_BUSY: number;
			static ERROR_INSUFFICIENT_PERMISSIONS: number;
			static class: java.lang.Class<android.speech.SpeechRecognizer>;
			startListening(arg1: android.content.Intent): void;
			static isRecognitionAvailable(arg1: android.content.Context): boolean;
			setRecognitionListener(arg1: android.speech.IRecognitionListener): void;
			static createSpeechRecognizer(arg1: android.content.Context, arg2: android.content.ComponentName): android.speech.SpeechRecognizer;
			static createSpeechRecognizer(arg1: android.content.Context): android.speech.SpeechRecognizer;
			destroy(): void;
			cancel(): void;
			stopListening(): void;
		}
		export class RecognitionService extends android.app.Service {
			constructor();
			static SERVICE_INTERFACE: java.lang.String;
			static SERVICE_META_DATA: java.lang.String;
			static class: java.lang.Class<android.speech.RecognitionService>;
			onBind(arg1: android.content.Intent): android.os.IIBinder;
			onDestroy(): void;
		}
		export module RecognitionService {
			export class Callback extends java.lang.Object {
				static class: java.lang.Class<android.speech.RecognitionService.Callback>;
				results(arg1: android.os.Bundle): void;
				endOfSpeech(): void;
				rmsChanged(arg1: native.Float): void;
				beginningOfSpeech(): void;
				readyForSpeech(arg1: android.os.Bundle): void;
				bufferReceived(arg1: native.Array<native.Byte>): void;
				partialResults(arg1: android.os.Bundle): void;
				error(arg1: number): void;
			}
		}
		export interface IRecognitionListener {
			onError(arg1: number): void;
			onEvent(arg1: number, arg2: android.os.Bundle): void;
			onRmsChanged(arg1: native.Float): void;
			onResults(arg1: android.os.Bundle): void;
			onEndOfSpeech(): void;
			onBufferReceived(arg1: native.Array<native.Byte>): void;
			onReadyForSpeech(arg1: android.os.Bundle): void;
			onBeginningOfSpeech(): void;
			onPartialResults(arg1: android.os.Bundle): void;
		}
	}
	export module bluetooth {
		export class BluetoothDevice extends java.lang.Object implements android.os.IParcelable {
			static ERROR: number;
			static ACTION_FOUND: java.lang.String;
			static ACTION_CLASS_CHANGED: java.lang.String;
			static ACTION_ACL_CONNECTED: java.lang.String;
			static ACTION_ACL_DISCONNECT_REQUESTED: java.lang.String;
			static ACTION_ACL_DISCONNECTED: java.lang.String;
			static ACTION_NAME_CHANGED: java.lang.String;
			static ACTION_BOND_STATE_CHANGED: java.lang.String;
			static EXTRA_DEVICE: java.lang.String;
			static EXTRA_NAME: java.lang.String;
			static EXTRA_RSSI: java.lang.String;
			static EXTRA_CLASS: java.lang.String;
			static EXTRA_BOND_STATE: java.lang.String;
			static EXTRA_PREVIOUS_BOND_STATE: java.lang.String;
			static BOND_NONE: number;
			static BOND_BONDING: number;
			static BOND_BONDED: number;
			static ACTION_UUID: java.lang.String;
			static EXTRA_UUID: java.lang.String;
			static CREATOR: android.os.Parcelable.ICreator<android.bluetooth.BluetoothDevice>;
			static class: java.lang.Class<android.bluetooth.BluetoothDevice>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			createRfcommSocketToServiceRecord(arg1: java.util.UUID): android.bluetooth.BluetoothSocket;
			getBluetoothClass(): android.bluetooth.BluetoothClass;
			fetchUuidsWithSdp(): boolean;
			createInsecureRfcommSocketToServiceRecord(arg1: java.util.UUID): android.bluetooth.BluetoothSocket;
			getUuids(): native.Array<android.os.ParcelUuid>;
			getBondState(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getName(): string;
			getAddress(): string;
		}
		export class BluetoothClass extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.bluetooth.BluetoothClass>;
			static class: java.lang.Class<android.bluetooth.BluetoothClass>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getMajorDeviceClass(): number;
			hasService(arg1: number): boolean;
			getDeviceClass(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export module BluetoothClass {
			export class Service extends java.lang.Object {
				constructor();
				static LIMITED_DISCOVERABILITY: number;
				static POSITIONING: number;
				static NETWORKING: number;
				static RENDER: number;
				static CAPTURE: number;
				static OBJECT_TRANSFER: number;
				static AUDIO: number;
				static TELEPHONY: number;
				static INFORMATION: number;
				static class: java.lang.Class<android.bluetooth.BluetoothClass.Service>;
			}
			export class Device extends java.lang.Object {
				constructor();
				static COMPUTER_UNCATEGORIZED: number;
				static COMPUTER_DESKTOP: number;
				static COMPUTER_SERVER: number;
				static COMPUTER_LAPTOP: number;
				static COMPUTER_HANDHELD_PC_PDA: number;
				static COMPUTER_PALM_SIZE_PC_PDA: number;
				static COMPUTER_WEARABLE: number;
				static PHONE_UNCATEGORIZED: number;
				static PHONE_CELLULAR: number;
				static PHONE_CORDLESS: number;
				static PHONE_SMART: number;
				static PHONE_MODEM_OR_GATEWAY: number;
				static PHONE_ISDN: number;
				static AUDIO_VIDEO_UNCATEGORIZED: number;
				static AUDIO_VIDEO_WEARABLE_HEADSET: number;
				static AUDIO_VIDEO_HANDSFREE: number;
				static AUDIO_VIDEO_MICROPHONE: number;
				static AUDIO_VIDEO_LOUDSPEAKER: number;
				static AUDIO_VIDEO_HEADPHONES: number;
				static AUDIO_VIDEO_PORTABLE_AUDIO: number;
				static AUDIO_VIDEO_CAR_AUDIO: number;
				static AUDIO_VIDEO_SET_TOP_BOX: number;
				static AUDIO_VIDEO_HIFI_AUDIO: number;
				static AUDIO_VIDEO_VCR: number;
				static AUDIO_VIDEO_VIDEO_CAMERA: number;
				static AUDIO_VIDEO_CAMCORDER: number;
				static AUDIO_VIDEO_VIDEO_MONITOR: number;
				static AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER: number;
				static AUDIO_VIDEO_VIDEO_CONFERENCING: number;
				static AUDIO_VIDEO_VIDEO_GAMING_TOY: number;
				static WEARABLE_UNCATEGORIZED: number;
				static WEARABLE_WRIST_WATCH: number;
				static WEARABLE_PAGER: number;
				static WEARABLE_JACKET: number;
				static WEARABLE_HELMET: number;
				static WEARABLE_GLASSES: number;
				static TOY_UNCATEGORIZED: number;
				static TOY_ROBOT: number;
				static TOY_VEHICLE: number;
				static TOY_DOLL_ACTION_FIGURE: number;
				static TOY_CONTROLLER: number;
				static TOY_GAME: number;
				static HEALTH_UNCATEGORIZED: number;
				static HEALTH_BLOOD_PRESSURE: number;
				static HEALTH_THERMOMETER: number;
				static HEALTH_WEIGHING: number;
				static HEALTH_GLUCOSE: number;
				static HEALTH_PULSE_OXIMETER: number;
				static HEALTH_PULSE_RATE: number;
				static HEALTH_DATA_DISPLAY: number;
				static class: java.lang.Class<android.bluetooth.BluetoothClass.Device>;
			}
			export module Device {
				export class Major extends java.lang.Object {
					constructor();
					static MISC: number;
					static COMPUTER: number;
					static PHONE: number;
					static NETWORKING: number;
					static AUDIO_VIDEO: number;
					static PERIPHERAL: number;
					static IMAGING: number;
					static WEARABLE: number;
					static TOY: number;
					static HEALTH: number;
					static UNCATEGORIZED: number;
					static class: java.lang.Class<android.bluetooth.BluetoothClass.Device.Major>;
				}
			}
		}
		export class BluetoothProfile implements android.bluetooth.IBluetoothProfile {
			constructor(implementation: android.bluetooth.IBluetoothProfile);
			static EXTRA_STATE: java.lang.String;
			static EXTRA_PREVIOUS_STATE: java.lang.String;
			static STATE_DISCONNECTED: number;
			static STATE_CONNECTING: number;
			static STATE_CONNECTED: number;
			static STATE_DISCONNECTING: number;
			static HEADSET: number;
			static A2DP: number;
			static HEALTH: number;
			getDevicesMatchingConnectionStates(arg1: native.Array<number>): java.util.IList<android.bluetooth.BluetoothDevice>;
			getConnectionState(arg1: android.bluetooth.BluetoothDevice): number;
			getConnectedDevices(): java.util.IList<android.bluetooth.BluetoothDevice>;
		}
		export module BluetoothProfile {
			export class ServiceListener implements android.bluetooth.BluetoothProfile.IServiceListener {
				constructor(implementation: android.bluetooth.BluetoothProfile.IServiceListener);
				onServiceConnected(arg1: number, arg2: android.bluetooth.IBluetoothProfile): void;
				onServiceDisconnected(arg1: number): void;
			}
			export interface IServiceListener {
				onServiceConnected(arg1: number, arg2: android.bluetooth.IBluetoothProfile): void;
				onServiceDisconnected(arg1: number): void;
			}
		}
		export class BluetoothHealthCallback extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.bluetooth.BluetoothHealthCallback>;
			onHealthAppConfigurationStatusChange(arg1: android.bluetooth.BluetoothHealthAppConfiguration, arg2: number): void;
			onHealthChannelStateChange(arg1: android.bluetooth.BluetoothHealthAppConfiguration, arg2: android.bluetooth.BluetoothDevice, arg3: number, arg4: number, arg5: android.os.ParcelFileDescriptor, arg6: number): void;
		}
		export class BluetoothAdapter extends java.lang.Object {
			static ERROR: number;
			static ACTION_STATE_CHANGED: java.lang.String;
			static EXTRA_STATE: java.lang.String;
			static EXTRA_PREVIOUS_STATE: java.lang.String;
			static STATE_OFF: number;
			static STATE_TURNING_ON: number;
			static STATE_ON: number;
			static STATE_TURNING_OFF: number;
			static ACTION_REQUEST_DISCOVERABLE: java.lang.String;
			static EXTRA_DISCOVERABLE_DURATION: java.lang.String;
			static ACTION_REQUEST_ENABLE: java.lang.String;
			static ACTION_SCAN_MODE_CHANGED: java.lang.String;
			static EXTRA_SCAN_MODE: java.lang.String;
			static EXTRA_PREVIOUS_SCAN_MODE: java.lang.String;
			static SCAN_MODE_NONE: number;
			static SCAN_MODE_CONNECTABLE: number;
			static SCAN_MODE_CONNECTABLE_DISCOVERABLE: number;
			static ACTION_DISCOVERY_STARTED: java.lang.String;
			static ACTION_DISCOVERY_FINISHED: java.lang.String;
			static ACTION_LOCAL_NAME_CHANGED: java.lang.String;
			static EXTRA_LOCAL_NAME: java.lang.String;
			static ACTION_CONNECTION_STATE_CHANGED: java.lang.String;
			static EXTRA_CONNECTION_STATE: java.lang.String;
			static EXTRA_PREVIOUS_CONNECTION_STATE: java.lang.String;
			static STATE_DISCONNECTED: number;
			static STATE_CONNECTING: number;
			static STATE_CONNECTED: number;
			static STATE_DISCONNECTING: number;
			static class: java.lang.Class<android.bluetooth.BluetoothAdapter>;
			Name: string;
			listenUsingRfcommWithServiceRecord(arg1: java.lang.String, arg2: java.util.UUID): android.bluetooth.BluetoothServerSocket;
			listenUsingRfcommWithServiceRecord(arg1: string, arg2: java.util.UUID): android.bluetooth.BluetoothServerSocket;
			getRemoteDevice(arg1: java.lang.String): android.bluetooth.BluetoothDevice;
			getRemoteDevice(arg1: string): android.bluetooth.BluetoothDevice;
			getRemoteDevice(arg1: native.Array<native.Byte>): android.bluetooth.BluetoothDevice;
			closeProfileProxy(arg1: number, arg2: android.bluetooth.IBluetoothProfile): void;
			static checkBluetoothAddress(arg1: java.lang.String): boolean;
			static checkBluetoothAddress(arg1: string): boolean;
			startDiscovery(): boolean;
			cancelDiscovery(): boolean;
			static getDefaultAdapter(): android.bluetooth.BluetoothAdapter;
			getProfileProxy(arg1: android.content.Context, arg2: android.bluetooth.BluetoothProfile.IServiceListener, arg3: number): boolean;
			getBondedDevices(): java.util.ISet<android.bluetooth.BluetoothDevice>;
			getProfileConnectionState(arg1: number): number;
			listenUsingInsecureRfcommWithServiceRecord(arg1: java.lang.String, arg2: java.util.UUID): android.bluetooth.BluetoothServerSocket;
			listenUsingInsecureRfcommWithServiceRecord(arg1: string, arg2: java.util.UUID): android.bluetooth.BluetoothServerSocket;
			isDiscovering(): boolean;
			getScanMode(): number;
			getName(): string;
			getState(): number;
			setName(arg1: java.lang.String): boolean;
			setName(arg1: string): boolean;
			getAddress(): string;
			disable(): boolean;
			enable(): boolean;
			isEnabled(): boolean;
		}
		export class BluetoothA2dp extends java.lang.Object implements android.bluetooth.IBluetoothProfile {
			static ACTION_CONNECTION_STATE_CHANGED: java.lang.String;
			static ACTION_PLAYING_STATE_CHANGED: java.lang.String;
			static STATE_PLAYING: number;
			static STATE_NOT_PLAYING: number;
			static class: java.lang.Class<android.bluetooth.BluetoothA2dp>;
			getDevicesMatchingConnectionStates(arg1: native.Array<number>): java.util.IList<android.bluetooth.BluetoothDevice>;
			getConnectionState(arg1: android.bluetooth.BluetoothDevice): number;
			getConnectedDevices(): java.util.IList<android.bluetooth.BluetoothDevice>;
			isA2dpPlaying(arg1: android.bluetooth.BluetoothDevice): boolean;
			finalize(): void;
		}
		export class BluetoothHealthAppConfiguration extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.bluetooth.BluetoothHealthAppConfiguration>;
			static class: java.lang.Class<android.bluetooth.BluetoothHealthAppConfiguration>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getRole(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getName(): string;
			getDataType(): number;
		}
		export interface IBluetoothProfile {
			getDevicesMatchingConnectionStates(arg1: native.Array<number>): java.util.IList<android.bluetooth.BluetoothDevice>;
			getConnectionState(arg1: android.bluetooth.BluetoothDevice): number;
			getConnectedDevices(): java.util.IList<android.bluetooth.BluetoothDevice>;
		}
		export module IBluetoothProfile {
			var EXTRA_STATE: java.lang.String;
			var EXTRA_PREVIOUS_STATE: java.lang.String;
			var STATE_DISCONNECTED: number;
			var STATE_CONNECTING: number;
			var STATE_CONNECTED: number;
			var STATE_DISCONNECTING: number;
			var HEADSET: number;
			var A2DP: number;
			var HEALTH: number;
		}
		export class BluetoothAssignedNumbers extends java.lang.Object {
			static ERICSSON_TECHNOLOGY: number;
			static NOKIA_MOBILE_PHONES: number;
			static INTEL: number;
			static IBM: number;
			static TOSHIBA: number;
			static THREECOM: number;
			static MICROSOFT: number;
			static LUCENT: number;
			static MOTOROLA: number;
			static INFINEON_TECHNOLOGIES: number;
			static CAMBRIDGE_SILICON_RADIO: number;
			static SILICON_WAVE: number;
			static DIGIANSWER: number;
			static TEXAS_INSTRUMENTS: number;
			static PARTHUS_TECHNOLOGIES: number;
			static BROADCOM: number;
			static MITEL_SEMICONDUCTOR: number;
			static WIDCOMM: number;
			static ZEEVO: number;
			static ATMEL: number;
			static MITSUBISHI_ELECTRIC: number;
			static RTX_TELECOM: number;
			static KC_TECHNOLOGY: number;
			static NEWLOGIC: number;
			static TRANSILICA: number;
			static ROHDE_AND_SCHWARZ: number;
			static TTPCOM: number;
			static SIGNIA_TECHNOLOGIES: number;
			static CONEXANT_SYSTEMS: number;
			static QUALCOMM: number;
			static INVENTEL: number;
			static AVM_BERLIN: number;
			static BANDSPEED: number;
			static MANSELLA: number;
			static NEC: number;
			static WAVEPLUS_TECHNOLOGY: number;
			static ALCATEL: number;
			static PHILIPS_SEMICONDUCTORS: number;
			static C_TECHNOLOGIES: number;
			static OPEN_INTERFACE: number;
			static RF_MICRO_DEVICES: number;
			static HITACHI: number;
			static SYMBOL_TECHNOLOGIES: number;
			static TENOVIS: number;
			static MACRONIX: number;
			static GCT_SEMICONDUCTOR: number;
			static NORWOOD_SYSTEMS: number;
			static MEWTEL_TECHNOLOGY: number;
			static ST_MICROELECTRONICS: number;
			static SYNOPSYS: number;
			static RED_M: number;
			static COMMIL: number;
			static CATC: number;
			static ECLIPSE: number;
			static RENESAS_TECHNOLOGY: number;
			static MOBILIAN_CORPORATION: number;
			static TERAX: number;
			static INTEGRATED_SYSTEM_SOLUTION: number;
			static MATSUSHITA_ELECTRIC: number;
			static GENNUM: number;
			static RESEARCH_IN_MOTION: number;
			static IPEXTREME: number;
			static SYSTEMS_AND_CHIPS: number;
			static BLUETOOTH_SIG: number;
			static SEIKO_EPSON: number;
			static INTEGRATED_SILICON_SOLUTION: number;
			static CONWISE_TECHNOLOGY: number;
			static PARROT: number;
			static SOCKET_MOBILE: number;
			static ATHEROS_COMMUNICATIONS: number;
			static MEDIATEK: number;
			static BLUEGIGA: number;
			static MARVELL: number;
			static THREE_DSP: number;
			static ACCEL_SEMICONDUCTOR: number;
			static CONTINENTAL_AUTOMOTIVE: number;
			static APPLE: number;
			static STACCATO_COMMUNICATIONS: number;
			static AVAGO: number;
			static APT_LICENSING: number;
			static SIRF_TECHNOLOGY: number;
			static TZERO_TECHNOLOGIES: number;
			static J_AND_M: number;
			static FREE2MOVE: number;
			static THREE_DIJOY: number;
			static PLANTRONICS: number;
			static SONY_ERICSSON: number;
			static HARMAN_INTERNATIONAL: number;
			static VIZIO: number;
			static NORDIC_SEMICONDUCTOR: number;
			static EM_MICROELECTRONIC_MARIN: number;
			static RALINK_TECHNOLOGY: number;
			static BELKIN_INTERNATIONAL: number;
			static REALTEK_SEMICONDUCTOR: number;
			static STONESTREET_ONE: number;
			static WICENTRIC: number;
			static RIVIERAWAVES: number;
			static class: java.lang.Class<android.bluetooth.BluetoothAssignedNumbers>;
		}
		export class BluetoothHealth extends java.lang.Object implements android.bluetooth.IBluetoothProfile {
			static SOURCE_ROLE: number;
			static SINK_ROLE: number;
			static CHANNEL_TYPE_RELIABLE: number;
			static CHANNEL_TYPE_STREAMING: number;
			static STATE_CHANNEL_DISCONNECTED: number;
			static STATE_CHANNEL_CONNECTING: number;
			static STATE_CHANNEL_CONNECTED: number;
			static STATE_CHANNEL_DISCONNECTING: number;
			static APP_CONFIG_REGISTRATION_SUCCESS: number;
			static APP_CONFIG_REGISTRATION_FAILURE: number;
			static APP_CONFIG_UNREGISTRATION_SUCCESS: number;
			static APP_CONFIG_UNREGISTRATION_FAILURE: number;
			static class: java.lang.Class<android.bluetooth.BluetoothHealth>;
			getDevicesMatchingConnectionStates(arg1: native.Array<number>): java.util.IList<android.bluetooth.BluetoothDevice>;
			registerSinkAppConfiguration(arg1: java.lang.String, arg2: number, arg3: android.bluetooth.BluetoothHealthCallback): boolean;
			registerSinkAppConfiguration(arg1: string, arg2: number, arg3: android.bluetooth.BluetoothHealthCallback): boolean;
			unregisterAppConfiguration(arg1: android.bluetooth.BluetoothHealthAppConfiguration): boolean;
			connectChannelToSource(arg1: android.bluetooth.BluetoothDevice, arg2: android.bluetooth.BluetoothHealthAppConfiguration): boolean;
			getMainChannelFd(arg1: android.bluetooth.BluetoothDevice, arg2: android.bluetooth.BluetoothHealthAppConfiguration): android.os.ParcelFileDescriptor;
			getConnectionState(arg1: android.bluetooth.BluetoothDevice): number;
			getConnectedDevices(): java.util.IList<android.bluetooth.BluetoothDevice>;
			disconnectChannel(arg1: android.bluetooth.BluetoothDevice, arg2: android.bluetooth.BluetoothHealthAppConfiguration, arg3: number): boolean;
		}
		export class BluetoothHeadset extends java.lang.Object implements android.bluetooth.IBluetoothProfile {
			static ACTION_CONNECTION_STATE_CHANGED: java.lang.String;
			static ACTION_AUDIO_STATE_CHANGED: java.lang.String;
			static ACTION_VENDOR_SPECIFIC_HEADSET_EVENT: java.lang.String;
			static EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD: java.lang.String;
			static EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE: java.lang.String;
			static AT_CMD_TYPE_READ: number;
			static AT_CMD_TYPE_TEST: number;
			static AT_CMD_TYPE_SET: number;
			static AT_CMD_TYPE_BASIC: number;
			static AT_CMD_TYPE_ACTION: number;
			static EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS: java.lang.String;
			static VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY: java.lang.String;
			static STATE_AUDIO_DISCONNECTED: number;
			static STATE_AUDIO_CONNECTING: number;
			static STATE_AUDIO_CONNECTED: number;
			static class: java.lang.Class<android.bluetooth.BluetoothHeadset>;
			getDevicesMatchingConnectionStates(arg1: native.Array<number>): java.util.IList<android.bluetooth.BluetoothDevice>;
			getConnectionState(arg1: android.bluetooth.BluetoothDevice): number;
			getConnectedDevices(): java.util.IList<android.bluetooth.BluetoothDevice>;
			isAudioConnected(arg1: android.bluetooth.BluetoothDevice): boolean;
			stopVoiceRecognition(arg1: android.bluetooth.BluetoothDevice): boolean;
			startVoiceRecognition(arg1: android.bluetooth.BluetoothDevice): boolean;
		}
		export class BluetoothServerSocket extends java.lang.Object implements java.io.ICloseable {
			static class: java.lang.Class<android.bluetooth.BluetoothServerSocket>;
			close(): void;
			accept(): android.bluetooth.BluetoothSocket;
			accept(arg1: number): android.bluetooth.BluetoothSocket;
		}
		export class BluetoothSocket extends java.lang.Object implements java.io.ICloseable {
			static class: java.lang.Class<android.bluetooth.BluetoothSocket>;
			getRemoteDevice(): android.bluetooth.BluetoothDevice;
			close(): void;
			getInputStream(): java.io.InputStream;
			connect(): void;
			getOutputStream(): java.io.OutputStream;
			isConnected(): boolean;
		}
	}
	export module preference {
		export class MultiSelectListPreference extends android.preference.DialogPreference {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.preference.MultiSelectListPreference>;
			Values: java.util.ISet<string>;
			EntryValues: native.Array<java.lang.ICharSequence>;
			Entries: native.Array<java.lang.ICharSequence>;
			setEntries(arg1: number): void;
			setEntries(arg1: native.Array<java.lang.ICharSequence>): void;
			findIndexOfValue(arg1: java.lang.String): number;
			findIndexOfValue(arg1: string): number;
			getEntryValues(): native.Array<java.lang.ICharSequence>;
			setEntryValues(arg1: number): void;
			setEntryValues(arg1: native.Array<java.lang.ICharSequence>): void;
			getEntries(): native.Array<java.lang.ICharSequence>;
			getValues(): java.util.ISet<string>;
			setValues(arg1: java.util.ISet<string>): void;
		}
		export class PreferenceGroup extends android.preference.Preference {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.preference.PreferenceGroup>;
			getPreference(arg1: number): android.preference.Preference;
			addPreference(arg1: android.preference.Preference): boolean;
			findPreference(arg1: java.lang.ICharSequence): android.preference.Preference;
			findPreference(arg1: string): android.preference.Preference;
			addItemFromInflater(arg1: android.preference.Preference): void;
			getPreferenceCount(): number;
			removePreference(arg1: android.preference.Preference): boolean;
			setOrderingAsAdded(arg1: boolean): void;
			isOrderingAsAdded(): boolean;
			removeAll(): void;
			setEnabled(arg1: boolean): void;
		}
		export class EditTextPreference extends android.preference.DialogPreference {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.preference.EditTextPreference>;
			Text: string;
			shouldDisableDependents(): boolean;
			getEditText(): android.widget.EditText;
			getText(): string;
			setText(arg1: java.lang.String): void;
			setText(arg1: string): void;
		}
		export class ListPreference extends android.preference.DialogPreference {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.preference.ListPreference>;
			Value: string;
			EntryValues: native.Array<java.lang.ICharSequence>;
			Entries: native.Array<java.lang.ICharSequence>;
			Summary: java.lang.ICharSequence;
			setSummary(arg1: java.lang.ICharSequence): void;
			setSummary(arg1: string): void;
			getSummary(): java.lang.ICharSequence;
			setValueIndex(arg1: number): void;
			setEntries(arg1: number): void;
			setEntries(arg1: native.Array<java.lang.ICharSequence>): void;
			findIndexOfValue(arg1: java.lang.String): number;
			findIndexOfValue(arg1: string): number;
			getEntryValues(): native.Array<java.lang.ICharSequence>;
			setEntryValues(arg1: native.Array<java.lang.ICharSequence>): void;
			setEntryValues(arg1: number): void;
			getValue(): string;
			getEntry(): java.lang.ICharSequence;
			setValue(arg1: java.lang.String): void;
			setValue(arg1: string): void;
			getEntries(): native.Array<java.lang.ICharSequence>;
			setSummary(arg1: number): void;
		}
		export class PreferenceActivity extends android.app.ListActivity implements android.preference.PreferenceFragment.IOnPreferenceStartFragmentCallback {
			constructor();
			static EXTRA_SHOW_FRAGMENT: java.lang.String;
			static EXTRA_SHOW_FRAGMENT_ARGUMENTS: java.lang.String;
			static EXTRA_SHOW_FRAGMENT_TITLE: java.lang.String;
			static EXTRA_SHOW_FRAGMENT_SHORT_TITLE: java.lang.String;
			static EXTRA_NO_HEADERS: java.lang.String;
			static HEADER_ID_UNDEFINED: native.Long;
			static class: java.lang.Class<android.preference.PreferenceActivity>;
			PreferenceScreen: android.preference.PreferenceScreen;
			onContentChanged(): void;
			loadHeadersFromResource(arg1: number, arg2: java.util.IList<android.preference.PreferenceActivity.Header>): void;
			onBuildStartFragmentIntent(arg1: java.lang.String, arg2: android.os.Bundle, arg3: number, arg4: number): android.content.Intent;
			onBuildStartFragmentIntent(arg1: string, arg2: android.os.Bundle, arg3: number, arg4: number): android.content.Intent;
			startPreferenceFragment(arg1: android.app.Fragment, arg2: boolean): void;
			onPreferenceStartFragment(arg1: android.preference.PreferenceFragment, arg2: android.preference.Preference): boolean;
			addPreferencesFromIntent(arg1: android.content.Intent): void;
			addPreferencesFromResource(arg1: number): void;
			hasHeaders(): boolean;
			isMultiPane(): boolean;
			setListFooter(arg1: android.view.View): void;
			onHeaderClick(arg1: android.preference.PreferenceActivity.Header, arg2: number): void;
			onIsMultiPane(): boolean;
			getPreferenceManager(): android.preference.PreferenceManager;
			onGetInitialHeader(): android.preference.PreferenceActivity.Header;
			switchToHeader(arg1: java.lang.String, arg2: android.os.Bundle): void;
			switchToHeader(arg1: string, arg2: android.os.Bundle): void;
			switchToHeader(arg1: android.preference.PreferenceActivity.Header): void;
			finishPreferencePanel(arg1: android.app.Fragment, arg2: number, arg3: android.content.Intent): void;
			onBuildHeaders(arg1: java.util.IList<android.preference.PreferenceActivity.Header>): void;
			setParentTitle(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence, arg3: android.view.View.IOnClickListener): void;
			setParentTitle(arg1: string, arg2: string, arg3: android.view.View.IOnClickListener): void;
			onIsHidingHeaders(): boolean;
			showBreadCrumbs(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence): void;
			showBreadCrumbs(arg1: string, arg2: string): void;
			onPreferenceTreeClick(arg1: android.preference.PreferenceScreen, arg2: android.preference.Preference): boolean;
			invalidateHeaders(): void;
			startWithFragment(arg1: java.lang.String, arg2: android.os.Bundle, arg3: android.app.Fragment, arg4: number, arg5: number, arg6: number): void;
			startWithFragment(arg1: string, arg2: android.os.Bundle, arg3: android.app.Fragment, arg4: number, arg5: number, arg6: number): void;
			startWithFragment(arg1: java.lang.String, arg2: android.os.Bundle, arg3: android.app.Fragment, arg4: number): void;
			startWithFragment(arg1: string, arg2: android.os.Bundle, arg3: android.app.Fragment, arg4: number): void;
			onGetNewHeader(): android.preference.PreferenceActivity.Header;
			setPreferenceScreen(arg1: android.preference.PreferenceScreen): void;
			getPreferenceScreen(): android.preference.PreferenceScreen;
			startPreferencePanel(arg1: java.lang.String, arg2: android.os.Bundle, arg3: number, arg4: java.lang.ICharSequence, arg5: android.app.Fragment, arg6: number): void;
			startPreferencePanel(arg1: string, arg2: android.os.Bundle, arg3: number, arg4: string, arg5: android.app.Fragment, arg6: number): void;
			findPreference(arg1: java.lang.ICharSequence): android.preference.Preference;
			findPreference(arg1: string): android.preference.Preference;
		}
		export module PreferenceActivity {
			export class Header extends java.lang.Object implements android.os.IParcelable {
				constructor();
				id: native.Long;
				titleRes: number;
				title: java.lang.ICharSequence;
				summaryRes: number;
				summary: java.lang.ICharSequence;
				breadCrumbTitleRes: number;
				breadCrumbTitle: java.lang.ICharSequence;
				breadCrumbShortTitleRes: number;
				breadCrumbShortTitle: java.lang.ICharSequence;
				iconRes: number;
				fragment: java.lang.String;
				fragmentArguments: android.os.Bundle;
				intent: android.content.Intent;
				extras: android.os.Bundle;
				static CREATOR: android.os.Parcelable.ICreator<android.preference.PreferenceActivity.Header>;
				static class: java.lang.Class<android.preference.PreferenceActivity.Header>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				readFromParcel(arg1: android.os.Parcel): void;
				getBreadCrumbShortTitle(arg1: android.content.res.Resources): java.lang.ICharSequence;
				getSummary(arg1: android.content.res.Resources): java.lang.ICharSequence;
				getBreadCrumbTitle(arg1: android.content.res.Resources): java.lang.ICharSequence;
				getTitle(arg1: android.content.res.Resources): java.lang.ICharSequence;
			}
		}
		export class PreferenceCategory extends android.preference.PreferenceGroup {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.preference.PreferenceCategory>;
			isEnabled(): boolean;
		}
		export class TwoStatePreference extends android.preference.Preference {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.preference.TwoStatePreference>;
			SummaryOn: java.lang.ICharSequence;
			DisableDependentsState: boolean;
			SummaryOff: java.lang.ICharSequence;
			isChecked(): boolean;
			setChecked(arg1: boolean): void;
			setDisableDependentsState(arg1: boolean): void;
			getDisableDependentsState(): boolean;
			shouldDisableDependents(): boolean;
			getSummaryOn(): java.lang.ICharSequence;
			getSummaryOff(): java.lang.ICharSequence;
			setSummaryOff(arg1: number): void;
			setSummaryOff(arg1: java.lang.ICharSequence): void;
			setSummaryOff(arg1: string): void;
			setSummaryOn(arg1: java.lang.ICharSequence): void;
			setSummaryOn(arg1: string): void;
			setSummaryOn(arg1: number): void;
		}
		export class PreferenceScreen extends android.preference.PreferenceGroup implements android.widget.AdapterView.IOnItemClickListener, android.content.DialogInterface.IOnDismissListener {
			static class: java.lang.Class<android.preference.PreferenceScreen>;
			onDismiss(arg1: android.content.IDialogInterface): void;
			onItemClick(arg1: android.widget.AdapterView<any>, arg2: android.view.View, arg3: number, arg4: native.Long): void;
			getDialog(): android.app.Dialog;
			getRootAdapter(): android.widget.IListAdapter;
			bind(arg1: android.widget.ListView): void;
		}
		export class DialogPreference extends android.preference.Preference implements android.content.DialogInterface.IOnClickListener, android.content.DialogInterface.IOnDismissListener, android.preference.PreferenceManager.IOnActivityDestroyListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.preference.DialogPreference>;
			PositiveButtonText: java.lang.ICharSequence;
			DialogMessage: java.lang.ICharSequence;
			NegativeButtonText: java.lang.ICharSequence;
			DialogIcon: android.graphics.drawable.Drawable;
			DialogLayoutResource: number;
			DialogTitle: java.lang.ICharSequence;
			onDismiss(arg1: android.content.IDialogInterface): void;
			onClick(arg1: android.content.IDialogInterface, arg2: number): void;
			setDialogLayoutResource(arg1: number): void;
			getDialogLayoutResource(): number;
			setDialogIcon(arg1: number): void;
			setDialogIcon(arg1: android.graphics.drawable.Drawable): void;
			getDialogIcon(): android.graphics.drawable.Drawable;
			getDialog(): android.app.Dialog;
			setDialogTitle(arg1: java.lang.ICharSequence): void;
			setDialogTitle(arg1: string): void;
			setDialogTitle(arg1: number): void;
			setDialogMessage(arg1: java.lang.ICharSequence): void;
			setDialogMessage(arg1: string): void;
			setDialogMessage(arg1: number): void;
			setPositiveButtonText(arg1: java.lang.ICharSequence): void;
			setPositiveButtonText(arg1: string): void;
			setPositiveButtonText(arg1: number): void;
			getDialogMessage(): java.lang.ICharSequence;
			getPositiveButtonText(): java.lang.ICharSequence;
			getNegativeButtonText(): java.lang.ICharSequence;
			getDialogTitle(): java.lang.ICharSequence;
			onActivityDestroy(): void;
			setNegativeButtonText(arg1: java.lang.ICharSequence): void;
			setNegativeButtonText(arg1: string): void;
			setNegativeButtonText(arg1: number): void;
		}
		export class CheckBoxPreference extends android.preference.TwoStatePreference {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.preference.CheckBoxPreference>;
		}
		export class SwitchPreference extends android.preference.TwoStatePreference {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static class: java.lang.Class<android.preference.SwitchPreference>;
			SwitchTextOff: java.lang.ICharSequence;
			SwitchTextOn: java.lang.ICharSequence;
			setSwitchTextOn(arg1: number): void;
			setSwitchTextOn(arg1: java.lang.ICharSequence): void;
			setSwitchTextOn(arg1: string): void;
			setSwitchTextOff(arg1: java.lang.ICharSequence): void;
			setSwitchTextOff(arg1: string): void;
			setSwitchTextOff(arg1: number): void;
			getSwitchTextOff(): java.lang.ICharSequence;
			getSwitchTextOn(): java.lang.ICharSequence;
		}
		export class RingtonePreference extends android.preference.Preference implements android.preference.PreferenceManager.IOnActivityResultListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.preference.RingtonePreference>;
			RingtoneType: number;
			ShowSilent: boolean;
			ShowDefault: boolean;
			onActivityResult(arg1: number, arg2: number, arg3: android.content.Intent): boolean;
			setShowSilent(arg1: boolean): void;
			getShowSilent(): boolean;
			getShowDefault(): boolean;
			setShowDefault(arg1: boolean): void;
			setRingtoneType(arg1: number): void;
			getRingtoneType(): number;
		}
		export class PreferenceFragment extends android.app.Fragment {
			constructor();
			static class: java.lang.Class<android.preference.PreferenceFragment>;
			PreferenceScreen: android.preference.PreferenceScreen;
			onDestroy(): void;
			onStart(): void;
			onCreate(arg1: android.os.Bundle): void;
			onSaveInstanceState(arg1: android.os.Bundle): void;
			onCreateView(arg1: android.view.LayoutInflater, arg2: android.view.ViewGroup, arg3: android.os.Bundle): android.view.View;
			onDestroyView(): void;
			onStop(): void;
			onActivityResult(arg1: number, arg2: number, arg3: android.content.Intent): void;
			onActivityCreated(arg1: android.os.Bundle): void;
			addPreferencesFromIntent(arg1: android.content.Intent): void;
			addPreferencesFromResource(arg1: number): void;
			getPreferenceManager(): android.preference.PreferenceManager;
			onPreferenceTreeClick(arg1: android.preference.PreferenceScreen, arg2: android.preference.Preference): boolean;
			setPreferenceScreen(arg1: android.preference.PreferenceScreen): void;
			getPreferenceScreen(): android.preference.PreferenceScreen;
			findPreference(arg1: java.lang.ICharSequence): android.preference.Preference;
			findPreference(arg1: string): android.preference.Preference;
		}
		export module PreferenceFragment {
			export class OnPreferenceStartFragmentCallback implements android.preference.PreferenceFragment.IOnPreferenceStartFragmentCallback {
				constructor(implementation: android.preference.PreferenceFragment.IOnPreferenceStartFragmentCallback);
				onPreferenceStartFragment(arg1: android.preference.PreferenceFragment, arg2: android.preference.Preference): boolean;
			}
			export interface IOnPreferenceStartFragmentCallback {
				onPreferenceStartFragment(arg1: android.preference.PreferenceFragment, arg2: android.preference.Preference): boolean;
			}
		}
		export class Preference extends java.lang.Object implements java.lang.IComparable<android.preference.Preference> {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static DEFAULT_ORDER: number;
			static class: java.lang.Class<android.preference.Preference>;
			LayoutResource: number;
			Key: string;
			Intent: android.content.Intent;
			OnPreferenceChangeListener: android.preference.Preference.IOnPreferenceChangeListener;
			Order: number;
			ShouldDisableView: boolean;
			Title: java.lang.ICharSequence;
			Dependency: string;
			WidgetLayoutResource: number;
			Summary: java.lang.ICharSequence;
			OnPreferenceClickListener: android.preference.Preference.IOnPreferenceClickListener;
			Icon: android.graphics.drawable.Drawable;
			Fragment: string;
			getOrder(): number;
			getSharedPreferences(): android.content.ISharedPreferences;
			isSelectable(): boolean;
			setIntent(arg1: android.content.Intent): void;
			saveHierarchyState(arg1: android.os.Bundle): void;
			restoreHierarchyState(arg1: android.os.Bundle): void;
			getExtras(): android.os.Bundle;
			getIntent(): android.content.Intent;
			getLayoutResource(): number;
			setLayoutResource(arg1: number): void;
			setOrder(arg1: number): void;
			getOnPreferenceClickListener(): android.preference.Preference.IOnPreferenceClickListener;
			setOnPreferenceClickListener(arg1: android.preference.Preference.IOnPreferenceClickListener): void;
			getOnPreferenceChangeListener(): android.preference.Preference.IOnPreferenceChangeListener;
			getWidgetLayoutResource(): number;
			setOnPreferenceChangeListener(arg1: android.preference.Preference.IOnPreferenceChangeListener): void;
			setWidgetLayoutResource(arg1: number): void;
			shouldDisableDependents(): boolean;
			notifyDependencyChange(arg1: boolean): void;
			setFragment(arg1: java.lang.String): void;
			setFragment(arg1: string): void;
			setSelectable(arg1: boolean): void;
			setSummary(arg1: number): void;
			setSummary(arg1: java.lang.ICharSequence): void;
			setSummary(arg1: string): void;
			shouldCommit(): boolean;
			isPersistent(): boolean;
			setPersistent(arg1: boolean): void;
			peekExtras(): android.os.Bundle;
			getTitleRes(): number;
			getSummary(): java.lang.ICharSequence;
			setDependency(arg1: java.lang.String): void;
			setDependency(arg1: string): void;
			hasKey(): boolean;
			getDependency(): string;
			getPreferenceManager(): android.preference.PreferenceManager;
			setShouldDisableView(arg1: boolean): void;
			onDependencyChanged(arg1: android.preference.Preference, arg2: boolean): void;
			getShouldDisableView(): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: android.preference.Preference): number;
			getKey(): string;
			getContext(): android.content.Context;
			getFragment(): string;
			getTitle(): java.lang.ICharSequence;
			setTitle(arg1: java.lang.ICharSequence): void;
			setTitle(arg1: string): void;
			setTitle(arg1: number): void;
			isEnabled(): boolean;
			setEnabled(arg1: boolean): void;
			getIcon(): android.graphics.drawable.Drawable;
			setIcon(arg1: number): void;
			setIcon(arg1: android.graphics.drawable.Drawable): void;
			getView(arg1: android.view.View, arg2: android.view.ViewGroup): android.view.View;
			getEditor(): android.content.SharedPreferences.IEditor;
			setDefaultValue(arg1: any): void;
			setKey(arg1: java.lang.String): void;
			setKey(arg1: string): void;
		}
		export module Preference {
			export class OnPreferenceClickListener implements android.preference.Preference.IOnPreferenceClickListener {
				constructor(implementation: android.preference.Preference.IOnPreferenceClickListener);
				onPreferenceClick(arg1: android.preference.Preference): boolean;
			}
			export class OnPreferenceChangeListener implements android.preference.Preference.IOnPreferenceChangeListener {
				constructor(implementation: android.preference.Preference.IOnPreferenceChangeListener);
				onPreferenceChange(arg1: android.preference.Preference, arg2: any): boolean;
			}
			export class BaseSavedState extends android.view.AbsSavedState {
				constructor(arg1: android.os.Parcel);
				constructor(arg1: android.os.IParcelable);
				static CREATOR: android.os.Parcelable.ICreator<android.preference.Preference.BaseSavedState>;
				static class: java.lang.Class<android.preference.Preference.BaseSavedState>;
			}
			export interface IOnPreferenceChangeListener {
				onPreferenceChange(arg1: android.preference.Preference, arg2: any): boolean;
			}
			export interface IOnPreferenceClickListener {
				onPreferenceClick(arg1: android.preference.Preference): boolean;
			}
		}
		export class PreferenceManager extends java.lang.Object {
			static METADATA_KEY_PREFERENCES: java.lang.String;
			static KEY_HAS_SET_DEFAULT_VALUES: java.lang.String;
			static class: java.lang.Class<android.preference.PreferenceManager>;
			SharedPreferencesName: string;
			SharedPreferencesMode: number;
			getSharedPreferences(): android.content.ISharedPreferences;
			getSharedPreferencesName(): string;
			getSharedPreferencesMode(): number;
			static getDefaultSharedPreferences(arg1: android.content.Context): android.content.ISharedPreferences;
			setSharedPreferencesName(arg1: java.lang.String): void;
			setSharedPreferencesName(arg1: string): void;
			createPreferenceScreen(arg1: android.content.Context): android.preference.PreferenceScreen;
			setSharedPreferencesMode(arg1: number): void;
			findPreference(arg1: java.lang.ICharSequence): android.preference.Preference;
			findPreference(arg1: string): android.preference.Preference;
			static setDefaultValues(arg1: android.content.Context, arg2: number, arg3: boolean): void;
			static setDefaultValues(arg1: android.content.Context, arg2: java.lang.String, arg3: number, arg4: number, arg5: boolean): void;
			static setDefaultValues(arg1: android.content.Context, arg2: string, arg3: number, arg4: number, arg5: boolean): void;
		}
		export module PreferenceManager {
			export interface IOnActivityDestroyListener {
				onActivityDestroy(): void;
			}
			export class OnActivityStopListener implements android.preference.PreferenceManager.IOnActivityStopListener {
				constructor(implementation: android.preference.PreferenceManager.IOnActivityStopListener);
				onActivityStop(): void;
			}
			export interface IOnActivityStopListener {
				onActivityStop(): void;
			}
			export class OnActivityResultListener implements android.preference.PreferenceManager.IOnActivityResultListener {
				constructor(implementation: android.preference.PreferenceManager.IOnActivityResultListener);
				onActivityResult(arg1: number, arg2: number, arg3: android.content.Intent): boolean;
			}
			export class OnActivityDestroyListener implements android.preference.PreferenceManager.IOnActivityDestroyListener {
				constructor(implementation: android.preference.PreferenceManager.IOnActivityDestroyListener);
				onActivityDestroy(): void;
			}
			export interface IOnActivityResultListener {
				onActivityResult(arg1: number, arg2: number, arg3: android.content.Intent): boolean;
			}
		}
	}
	export module inputmethodservice {
		export class InputMethodService extends android.inputmethodservice.AbstractInputMethodService {
			constructor();
			static BACK_DISPOSITION_DEFAULT: number;
			static BACK_DISPOSITION_WILL_NOT_DISMISS: number;
			static BACK_DISPOSITION_WILL_DISMISS: number;
			static class: java.lang.Class<android.inputmethodservice.InputMethodService>;
			InputMethodSessionImpl: { new (): android.inputmethodservice.InputMethodService.InputMethodSessionImpl };
			InputMethodImpl: { new (): android.inputmethodservice.InputMethodService.InputMethodImpl };
			BackDisposition: number;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			onDestroy(): void;
			setTheme(arg1: number): void;
			onCreate(): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
			onKeyLongPress(arg1: number, arg2: android.view.KeyEvent): boolean;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			getLayoutInflater(): android.view.LayoutInflater;
			showStatusIcon(arg1: number): void;
			hideStatusIcon(): void;
			isFullscreenMode(): boolean;
			switchInputMethod(arg1: java.lang.String): void;
			switchInputMethod(arg1: string): void;
			setExtractViewShown(arg1: boolean): void;
			isExtractViewShown(): boolean;
			updateFullscreenMode(): void;
			getBackDisposition(): number;
			onConfigureWindow(arg1: android.view.Window, arg2: boolean, arg3: boolean): void;
			onInitializeInterface(): void;
			setBackDisposition(arg1: number): void;
			onShowInputRequested(arg1: number, arg2: boolean): boolean;
			onComputeInsets(arg1: android.inputmethodservice.InputMethodService.Insets): void;
			setCandidatesView(arg1: android.view.View): void;
			onWindowHidden(): void;
			setExtractView(arg1: android.view.View): void;
			onUpdateCursor(arg1: android.graphics.Rect): void;
			onStartCandidatesView(arg1: android.view.inputmethod.EditorInfo, arg2: boolean): void;
			isShowInputRequested(): boolean;
			onFinishInputView(arg1: boolean): void;
			onCreateInputView(): android.view.View;
			getTextForImeAction(arg1: number): java.lang.ICharSequence;
			onUpdateSelection(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
			sendDownUpKeyEvents(arg1: number): void;
			isInputViewShown(): boolean;
			updateInputViewShown(): void;
			onStartInputView(arg1: android.view.inputmethod.EditorInfo, arg2: boolean): void;
			onDisplayCompletions(arg1: native.Array<android.view.inputmethod.CompletionInfo>): void;
			requestHideSelf(arg1: number): void;
			onAppPrivateCommand(arg1: java.lang.String, arg2: android.os.Bundle): void;
			onAppPrivateCommand(arg1: string, arg2: android.os.Bundle): void;
			onUpdateExtractedText(arg1: number, arg2: android.view.inputmethod.ExtractedText): void;
			onCreateInputMethodSessionInterface(): android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl;
			getCurrentInputBinding(): android.view.inputmethod.InputBinding;
			getCurrentInputConnection(): android.view.inputmethod.IInputConnection;
			enableHardwareAcceleration(): boolean;
			getCurrentInputStarted(): boolean;
			onCreateInputMethodInterface(): android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl;
			onExtractedCursorMovement(arg1: number, arg2: number): void;
			onUpdateExtractingViews(arg1: android.view.inputmethod.EditorInfo): void;
			setCandidatesViewShown(arg1: boolean): void;
			onEvaluateInputViewShown(): boolean;
			getCandidatesHiddenVisibility(): number;
			onExtractedSelectionChanged(arg1: number, arg2: number): void;
			onExtractedTextClicked(): void;
			onCreateExtractTextView(): android.view.View;
			onEvaluateFullscreenMode(): boolean;
			onFinishCandidatesView(arg1: boolean): void;
			onCreateCandidatesView(): android.view.View;
			getCurrentInputEditorInfo(): android.view.inputmethod.EditorInfo;
			onExtractTextContextMenuItem(arg1: number): boolean;
			onUpdateExtractingVisibility(arg1: android.view.inputmethod.EditorInfo): void;
			sendDefaultEditorAction(arg1: boolean): boolean;
			onExtractingInputChanged(arg1: android.view.inputmethod.EditorInfo): void;
			showWindow(arg1: boolean): void;
			hideWindow(): void;
			onWindowShown(): void;
			setInputView(arg1: android.view.View): void;
			onStartInput(arg1: android.view.inputmethod.EditorInfo, arg2: boolean): void;
			onViewClicked(arg1: boolean): void;
			onBindInput(): void;
			onUnbindInput(): void;
			sendKeyChar(arg1: string): void;
			onFinishInput(): void;
			getWindow(): android.app.Dialog;
			getMaxWidth(): number;
		}
		export module InputMethodService {
			export class Insets extends java.lang.Object {
				constructor();
				contentTopInsets: number;
				visibleTopInsets: number;
				touchableRegion: android.graphics.Region;
				static TOUCHABLE_INSETS_FRAME: number;
				static TOUCHABLE_INSETS_CONTENT: number;
				static TOUCHABLE_INSETS_VISIBLE: number;
				static TOUCHABLE_INSETS_REGION: number;
				touchableInsets: number;
				static class: java.lang.Class<android.inputmethodservice.InputMethodService.Insets>;
			}
			export class InputMethodSessionImpl extends android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl {
				static class: java.lang.Class<android.inputmethodservice.InputMethodService.InputMethodSessionImpl>;
				finishInput(): void;
				viewClicked(arg1: boolean): void;
				displayCompletions(arg1: native.Array<android.view.inputmethod.CompletionInfo>): void;
				updateExtractedText(arg1: number, arg2: android.view.inputmethod.ExtractedText): void;
				appPrivateCommand(arg1: java.lang.String, arg2: android.os.Bundle): void;
				appPrivateCommand(arg1: string, arg2: android.os.Bundle): void;
				toggleSoftInput(arg1: number, arg2: number): void;
				updateSelection(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
				updateCursor(arg1: android.graphics.Rect): void;
			}
			export class InputMethodImpl extends android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl {
				static class: java.lang.Class<android.inputmethodservice.InputMethodService.InputMethodImpl>;
				startInput(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.EditorInfo): void;
				showSoftInput(arg1: number, arg2: android.os.ResultReceiver): void;
				hideSoftInput(arg1: number, arg2: android.os.ResultReceiver): void;
				bindInput(arg1: android.view.inputmethod.InputBinding): void;
				unbindInput(): void;
				attachToken(arg1: android.os.IIBinder): void;
				restartInput(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.EditorInfo): void;
				changeInputMethodSubtype(arg1: android.view.inputmethod.InputMethodSubtype): void;
			}
		}
		export class AbstractInputMethodService extends android.app.Service implements android.view.KeyEvent.ICallback {
			constructor();
			static class: java.lang.Class<android.inputmethodservice.AbstractInputMethodService>;
			AbstractInputMethodSessionImpl: { new (): android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl };
			AbstractInputMethodImpl: { new (): android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl };
			onBind(arg1: android.content.Intent): android.os.IIBinder;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			getKeyDispatcherState(): android.view.KeyEvent.DispatcherState;
			onCreateInputMethodSessionInterface(): android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl;
			onCreateInputMethodInterface(): android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyLongPress(arg1: number, arg2: android.view.KeyEvent): boolean;
		}
		export module AbstractInputMethodService {
			export class AbstractInputMethodSessionImpl extends java.lang.Object implements android.view.inputmethod.IInputMethodSession {
				static class: java.lang.Class<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl>;
				isRevoked(): boolean;
				dispatchTrackballEvent(arg1: number, arg2: android.view.MotionEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				dispatchGenericMotionEvent(arg1: number, arg2: android.view.MotionEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				revokeSelf(): void;
				isEnabled(): boolean;
				setEnabled(arg1: boolean): void;
				dispatchKeyEvent(arg1: number, arg2: android.view.KeyEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				finishInput(): void;
				viewClicked(arg1: boolean): void;
				displayCompletions(arg1: native.Array<android.view.inputmethod.CompletionInfo>): void;
				updateExtractedText(arg1: number, arg2: android.view.inputmethod.ExtractedText): void;
				appPrivateCommand(arg1: string, arg2: android.os.Bundle): void;
				toggleSoftInput(arg1: number, arg2: number): void;
				updateSelection(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
				updateCursor(arg1: android.graphics.Rect): void;
			}
			export class AbstractInputMethodImpl extends java.lang.Object implements android.view.inputmethod.IInputMethod {
				static class: java.lang.Class<android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl>;
				createSession(arg1: android.view.inputmethod.InputMethod.ISessionCallback): void;
				revokeSession(arg1: android.view.inputmethod.IInputMethodSession): void;
				setSessionEnabled(arg1: android.view.inputmethod.IInputMethodSession, arg2: boolean): void;
				startInput(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.EditorInfo): void;
				showSoftInput(arg1: number, arg2: android.os.ResultReceiver): void;
				hideSoftInput(arg1: number, arg2: android.os.ResultReceiver): void;
				bindInput(arg1: android.view.inputmethod.InputBinding): void;
				unbindInput(): void;
				attachToken(arg1: android.os.IIBinder): void;
				restartInput(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.EditorInfo): void;
				changeInputMethodSubtype(arg1: android.view.inputmethod.InputMethodSubtype): void;
			}
		}
		export class KeyboardView extends android.view.View implements android.view.View.IOnClickListener {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.inputmethodservice.KeyboardView>;
			Keyboard: android.inputmethodservice.Keyboard;
			onHoverEvent(arg1: android.view.MotionEvent): boolean;
			onMeasure(arg1: number, arg2: number): void;
			onDraw(arg1: android.graphics.Canvas): void;
			onDetachedFromWindow(): void;
			onSizeChanged(arg1: number, arg2: number, arg3: number, arg4: number): void;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			onClick(arg1: android.view.View): void;
			setPopupOffset(arg1: number, arg2: number): void;
			setPopupParent(arg1: android.view.View): void;
			setPreviewEnabled(arg1: boolean): void;
			isPreviewEnabled(): boolean;
			setVerticalCorrection(arg1: number): void;
			invalidateAllKeys(): void;
			setOnKeyboardActionListener(arg1: android.inputmethodservice.KeyboardView.IOnKeyboardActionListener): void;
			isProximityCorrectionEnabled(): boolean;
			setProximityCorrectionEnabled(arg1: boolean): void;
			setShifted(arg1: boolean): boolean;
			isShifted(): boolean;
			invalidateKey(arg1: number): void;
			getKeyboard(): android.inputmethodservice.Keyboard;
			setKeyboard(arg1: android.inputmethodservice.Keyboard): void;
			handleBack(): boolean;
			closing(): void;
		}
		export module KeyboardView {
			export class OnKeyboardActionListener implements android.inputmethodservice.KeyboardView.IOnKeyboardActionListener {
				constructor(implementation: android.inputmethodservice.KeyboardView.IOnKeyboardActionListener);
				onRelease(arg1: number): void;
				onKey(arg1: number, arg2: native.Array<number>): void;
				onText(arg1: java.lang.ICharSequence): void;
				onText(arg1: string): void;
				swipeRight(): void;
				swipeDown(): void;
				swipeLeft(): void;
				swipeUp(): void;
				onPress(arg1: number): void;
			}
			export interface IOnKeyboardActionListener {
				onRelease(arg1: number): void;
				onKey(arg1: number, arg2: native.Array<number>): void;
				onText(arg1: string): void;
				swipeRight(): void;
				swipeDown(): void;
				swipeLeft(): void;
				swipeUp(): void;
				onPress(arg1: number): void;
			}
		}
		export class ExtractEditText extends android.widget.EditText {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.inputmethodservice.ExtractEditText>;
			performClick(): boolean;
			hasWindowFocus(): boolean;
			setExtractedText(arg1: android.view.inputmethod.ExtractedText): void;
			onTextContextMenuItem(arg1: number): boolean;
			isInputMethodTarget(): boolean;
			finishInternalChanges(): void;
			startInternalChanges(): void;
			hasVerticalScrollBar(): boolean;
			isFocused(): boolean;
			hasFocus(): boolean;
		}
		export class Keyboard extends java.lang.Object {
			constructor(arg1: android.content.Context, arg2: number, arg3: number, arg4: number, arg5: number);
			constructor(arg1: android.content.Context, arg2: number, arg3: number);
			constructor(arg1: android.content.Context, arg2: number);
			constructor(arg1: android.content.Context, arg2: number, arg3: java.lang.ICharSequence, arg4: number, arg5: number);
			constructor(arg1: android.content.Context, arg2: number, arg3: string, arg4: number, arg5: number);
			static EDGE_LEFT: number;
			static EDGE_RIGHT: number;
			static EDGE_TOP: number;
			static EDGE_BOTTOM: number;
			static KEYCODE_SHIFT: number;
			static KEYCODE_MODE_CHANGE: number;
			static KEYCODE_CANCEL: number;
			static KEYCODE_DONE: number;
			static KEYCODE_DELETE: number;
			static KEYCODE_ALT: number;
			static class: java.lang.Class<android.inputmethodservice.Keyboard>;
			getShiftKeyIndex(): number;
			getModifierKeys(): java.util.IList<android.inputmethodservice.Keyboard.Key>;
			getNearestKeys(arg1: number, arg2: number): native.Array<number>;
			setShifted(arg1: boolean): boolean;
			isShifted(): boolean;
			getKeys(): java.util.IList<android.inputmethodservice.Keyboard.Key>;
			getHeight(): number;
			getMinWidth(): number;
		}
		export module Keyboard {
			export class Key extends java.lang.Object {
				constructor(arg1: android.content.res.Resources, arg2: android.inputmethodservice.Keyboard.Row, arg3: number, arg4: number, arg5: android.content.res.IXmlResourceParser);
				constructor(arg1: android.inputmethodservice.Keyboard.Row);
				codes: native.Array<number>;
				label: java.lang.ICharSequence;
				icon: android.graphics.drawable.Drawable;
				iconPreview: android.graphics.drawable.Drawable;
				width: number;
				height: number;
				gap: number;
				sticky: boolean;
				x: number;
				y: number;
				pressed: boolean;
				on: boolean;
				text: java.lang.ICharSequence;
				popupCharacters: java.lang.ICharSequence;
				edgeFlags: number;
				modifier: boolean;
				popupResId: number;
				repeatable: boolean;
				static class: java.lang.Class<android.inputmethodservice.Keyboard.Key>;
				squaredDistanceFrom(arg1: number, arg2: number): number;
				getCurrentDrawableState(): native.Array<number>;
				onPressed(): void;
				isInside(arg1: number, arg2: number): boolean;
				onReleased(arg1: boolean): void;
			}
			export class Row extends java.lang.Object {
				constructor(arg1: android.inputmethodservice.Keyboard);
				constructor(arg1: android.content.res.Resources, arg2: android.inputmethodservice.Keyboard, arg3: android.content.res.IXmlResourceParser);
				defaultWidth: number;
				defaultHeight: number;
				defaultHorizontalGap: number;
				verticalGap: number;
				rowEdgeFlags: number;
				mode: number;
				static class: java.lang.Class<android.inputmethodservice.Keyboard.Row>;
			}
		}
	}
	export module service {
		export module dreams {
			export class DreamService extends android.app.Service implements android.view.Window.ICallback {
				constructor();
				static SERVICE_INTERFACE: java.lang.String;
				static DREAM_META_DATA: java.lang.String;
				static class: java.lang.Class<android.service.dreams.DreamService>;
				dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
				onBind(arg1: android.content.Intent): android.os.IIBinder;
				onDestroy(): void;
				onCreate(): void;
				onDetachedFromWindow(): void;
				onWindowFocusChanged(arg1: boolean): void;
				dispatchKeyShortcutEvent(arg1: android.view.KeyEvent): boolean;
				dispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
				dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
				onAttachedToWindow(): void;
				dispatchGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
				findViewById(arg1: number): android.view.View;
				onContentChanged(): void;
				setContentView(arg1: number): void;
				setContentView(arg1: android.view.View): void;
				setContentView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
				getWindowManager(): android.view.IWindowManager;
				addContentView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
				onMenuOpened(arg1: number, arg2: android.view.IMenu): boolean;
				onPanelClosed(arg1: number, arg2: android.view.IMenu): void;
				onWindowAttributesChanged(arg1: android.view.WindowManager.LayoutParams): void;
				onWindowStartingActionMode(arg1: android.view.ActionMode.ICallback): android.view.ActionMode;
				onPreparePanel(arg1: number, arg2: android.view.View, arg3: android.view.IMenu): boolean;
				onMenuItemSelected(arg1: number, arg2: android.view.IMenuItem): boolean;
				onSearchRequested(): boolean;
				onActionModeStarted(arg1: android.view.ActionMode): void;
				onCreatePanelView(arg1: number): android.view.View;
				onActionModeFinished(arg1: android.view.ActionMode): void;
				onCreatePanelMenu(arg1: number, arg2: android.view.IMenu): boolean;
				isInteractive(): boolean;
				isFullscreen(): boolean;
				setFullscreen(arg1: boolean): void;
				isScreenBright(): boolean;
				onDreamingStarted(): void;
				setInteractive(arg1: boolean): void;
				onDreamingStopped(): void;
				setScreenBright(arg1: boolean): void;
				finish(): void;
				getWindow(): android.view.Window;
				dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			}
		}
		export module textservice {
			export class SpellCheckerService extends android.app.Service {
				constructor();
				static SERVICE_INTERFACE: java.lang.String;
				static class: java.lang.Class<android.service.textservice.SpellCheckerService>;
				onBind(arg1: android.content.Intent): android.os.IIBinder;
				createSession(): android.service.textservice.SpellCheckerService.Session;
			}
			export module SpellCheckerService {
				export class Session extends java.lang.Object {
					constructor();
					static class: java.lang.Class<android.service.textservice.SpellCheckerService.Session>;
					onCreate(): void;
					onClose(): void;
					onGetSuggestions(arg1: android.view.textservice.TextInfo, arg2: number): android.view.textservice.SuggestionsInfo;
					onGetSentenceSuggestionsMultiple(arg1: native.Array<android.view.textservice.TextInfo>, arg2: number): native.Array<android.view.textservice.SentenceSuggestionsInfo>;
					onCancel(): void;
					onGetSuggestionsMultiple(arg1: native.Array<android.view.textservice.TextInfo>, arg2: number, arg3: boolean): native.Array<android.view.textservice.SuggestionsInfo>;
					getBundle(): android.os.Bundle;
					getLocale(): string;
				}
			}
		}
		export module wallpaper {
			export class WallpaperService extends android.app.Service {
				constructor();
				static SERVICE_INTERFACE: java.lang.String;
				static SERVICE_META_DATA: java.lang.String;
				static class: java.lang.Class<android.service.wallpaper.WallpaperService>;
				Engine: { new (): android.service.wallpaper.WallpaperService.Engine };
				onBind(arg1: android.content.Intent): android.os.IIBinder;
				onDestroy(): void;
				onCreate(): void;
				onCreateEngine(): android.service.wallpaper.WallpaperService.Engine;
			}
			export module WallpaperService {
				export class Engine extends java.lang.Object {
					static class: java.lang.Class<android.service.wallpaper.WallpaperService.Engine>;
					onDestroy(): void;
					onCreate(arg1: android.view.ISurfaceHolder): void;
					onVisibilityChanged(arg1: boolean): void;
					onTouchEvent(arg1: android.view.MotionEvent): void;
					onSurfaceCreated(arg1: android.view.ISurfaceHolder): void;
					onSurfaceChanged(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number, arg4: number): void;
					isPreview(): boolean;
					onCommand(arg1: java.lang.String, arg2: number, arg3: number, arg4: number, arg5: android.os.Bundle, arg6: boolean): android.os.Bundle;
					onCommand(arg1: string, arg2: number, arg3: number, arg4: number, arg5: android.os.Bundle, arg6: boolean): android.os.Bundle;
					getSurfaceHolder(): android.view.ISurfaceHolder;
					onOffsetsChanged(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: number, arg6: number): void;
					onDesiredSizeChanged(arg1: number, arg2: number): void;
					onSurfaceDestroyed(arg1: android.view.ISurfaceHolder): void;
					onSurfaceRedrawNeeded(arg1: android.view.ISurfaceHolder): void;
					setTouchEventsEnabled(arg1: boolean): void;
					getDesiredMinimumWidth(): number;
					setOffsetNotificationsEnabled(arg1: boolean): void;
					getDesiredMinimumHeight(): number;
					isVisible(): boolean;
				}
			}
		}
	}
	export module nfc {
		export class FormatException extends java.lang.Exception {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			static class: java.lang.Class<android.nfc.FormatException>;
		}
		export class NdefMessage extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: native.Array<native.Byte>);
			constructor(arg1: android.nfc.NdefRecord, arg2: native.Array<android.nfc.NdefRecord>);
			static CREATOR: android.os.Parcelable.ICreator<android.nfc.NdefMessage>;
			static class: java.lang.Class<android.nfc.NdefMessage>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getRecords(): native.Array<android.nfc.NdefRecord>;
			getByteArrayLength(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			toByteArray(): native.Array<native.Byte>;
		}
		export class Tag extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.nfc.Tag>;
			static class: java.lang.Class<android.nfc.Tag>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getTechList(): native.Array<java.lang.String>;
			toString(): string;
			getId(): native.Array<native.Byte>;
		}
		export class NdefRecord extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: native.Array<native.Byte>);
			constructor(arg1: native.Short, arg2: native.Array<native.Byte>, arg3: native.Array<native.Byte>, arg4: native.Array<native.Byte>);
			static TNF_EMPTY: native.Short;
			static TNF_WELL_KNOWN: native.Short;
			static TNF_MIME_MEDIA: native.Short;
			static TNF_ABSOLUTE_URI: native.Short;
			static TNF_EXTERNAL_TYPE: native.Short;
			static TNF_UNKNOWN: native.Short;
			static TNF_UNCHANGED: native.Short;
			static RTD_TEXT: native.Array<native.Byte>;
			static RTD_URI: native.Array<native.Byte>;
			static RTD_SMART_POSTER: native.Array<native.Byte>;
			static RTD_ALTERNATIVE_CARRIER: native.Array<native.Byte>;
			static RTD_HANDOVER_CARRIER: native.Array<native.Byte>;
			static RTD_HANDOVER_REQUEST: native.Array<native.Byte>;
			static RTD_HANDOVER_SELECT: native.Array<native.Byte>;
			static CREATOR: android.os.Parcelable.ICreator<android.nfc.NdefRecord>;
			static class: java.lang.Class<android.nfc.NdefRecord>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			toUri(): android.net.Uri;
			static createApplicationRecord(arg1: java.lang.String): android.nfc.NdefRecord;
			static createApplicationRecord(arg1: string): android.nfc.NdefRecord;
			getTnf(): number;
			static createUri(arg1: java.lang.String): android.nfc.NdefRecord;
			static createUri(arg1: string): android.nfc.NdefRecord;
			static createUri(arg1: android.net.Uri): android.nfc.NdefRecord;
			toMimeType(): string;
			static createMime(arg1: java.lang.String, arg2: native.Array<native.Byte>): android.nfc.NdefRecord;
			static createMime(arg1: string, arg2: native.Array<native.Byte>): android.nfc.NdefRecord;
			getPayload(): native.Array<native.Byte>;
			static createExternal(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<native.Byte>): android.nfc.NdefRecord;
			static createExternal(arg1: string, arg2: string, arg3: native.Array<native.Byte>): android.nfc.NdefRecord;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getId(): native.Array<native.Byte>;
			getType(): native.Array<native.Byte>;
			toByteArray(): native.Array<native.Byte>;
		}
		export class NfcEvent extends java.lang.Object {
			nfcAdapter: android.nfc.NfcAdapter;
			static class: java.lang.Class<android.nfc.NfcEvent>;
		}
		export class NfcManager extends java.lang.Object {
			static class: java.lang.Class<android.nfc.NfcManager>;
			getDefaultAdapter(): android.nfc.NfcAdapter;
		}
		export class TagLostException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.nfc.TagLostException>;
		}
		export module tech {
			export class TagTechnology implements java.io.ICloseable, android.nfc.tech.ITagTechnology {
				constructor(implementation: android.nfc.tech.ITagTechnology);
				close(): void;
				connect(): void;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class MifareClassic extends android.nfc.tech.BasicTagTechnology {
				static KEY_DEFAULT: native.Array<native.Byte>;
				static KEY_MIFARE_APPLICATION_DIRECTORY: native.Array<native.Byte>;
				static KEY_NFC_FORUM: native.Array<native.Byte>;
				static TYPE_UNKNOWN: number;
				static TYPE_CLASSIC: number;
				static TYPE_PLUS: number;
				static TYPE_PRO: number;
				static SIZE_1K: number;
				static SIZE_2K: number;
				static SIZE_4K: number;
				static SIZE_MINI: number;
				static BLOCK_SIZE: number;
				static class: java.lang.Class<android.nfc.tech.MifareClassic>;
				Timeout: number;
				getBlockCountInSector(arg1: number): number;
				getSectorCount(): number;
				authenticateSectorWithKeyB(arg1: number, arg2: native.Array<native.Byte>): boolean;
				getMaxTransceiveLength(): number;
				authenticateSectorWithKeyA(arg1: number, arg2: native.Array<native.Byte>): boolean;
				sectorToBlock(arg1: number): number;
				writeBlock(arg1: number, arg2: native.Array<native.Byte>): void;
				getBlockCount(): number;
				blockToSector(arg1: number): number;
				transceive(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
				setTimeout(arg1: number): void;
				static get(arg1: android.nfc.Tag): android.nfc.tech.MifareClassic;
				increment(arg1: number, arg2: number): void;
				close(): void;
				getType(): number;
				getSize(): number;
				transfer(arg1: number): void;
				connect(): void;
				readBlock(arg1: number): native.Array<native.Byte>;
				decrement(arg1: number, arg2: number): void;
				restore(arg1: number): void;
				getTimeout(): number;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class IsoDep extends android.nfc.tech.BasicTagTechnology {
				static class: java.lang.Class<android.nfc.tech.IsoDep>;
				Timeout: number;
				getHistoricalBytes(): native.Array<native.Byte>;
				getHiLayerResponse(): native.Array<native.Byte>;
				getMaxTransceiveLength(): number;
				isExtendedLengthApduSupported(): boolean;
				transceive(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
				setTimeout(arg1: number): void;
				static get(arg1: android.nfc.Tag): android.nfc.tech.IsoDep;
				close(): void;
				connect(): void;
				getTimeout(): number;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class NfcA extends android.nfc.tech.BasicTagTechnology {
				static class: java.lang.Class<android.nfc.tech.NfcA>;
				Timeout: number;
				getMaxTransceiveLength(): number;
				transceive(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
				getSak(): number;
				getAtqa(): native.Array<native.Byte>;
				setTimeout(arg1: number): void;
				static get(arg1: android.nfc.Tag): android.nfc.tech.NfcA;
				close(): void;
				connect(): void;
				getTimeout(): number;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class Ndef extends android.nfc.tech.BasicTagTechnology {
				static NFC_FORUM_TYPE_1: java.lang.String;
				static NFC_FORUM_TYPE_2: java.lang.String;
				static NFC_FORUM_TYPE_3: java.lang.String;
				static NFC_FORUM_TYPE_4: java.lang.String;
				static MIFARE_CLASSIC: java.lang.String;
				static class: java.lang.Class<android.nfc.tech.Ndef>;
				isWritable(): boolean;
				writeNdefMessage(arg1: android.nfc.NdefMessage): void;
				canMakeReadOnly(): boolean;
				getCachedNdefMessage(): android.nfc.NdefMessage;
				getNdefMessage(): android.nfc.NdefMessage;
				getMaxSize(): number;
				makeReadOnly(): boolean;
				static get(arg1: android.nfc.Tag): android.nfc.tech.Ndef;
				close(): void;
				getType(): string;
				connect(): void;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class NfcB extends android.nfc.tech.BasicTagTechnology {
				static class: java.lang.Class<android.nfc.tech.NfcB>;
				getProtocolInfo(): native.Array<native.Byte>;
				getApplicationData(): native.Array<native.Byte>;
				getMaxTransceiveLength(): number;
				transceive(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
				static get(arg1: android.nfc.Tag): android.nfc.tech.NfcB;
				close(): void;
				connect(): void;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class NdefFormatable extends android.nfc.tech.BasicTagTechnology {
				static class: java.lang.Class<android.nfc.tech.NdefFormatable>;
				formatReadOnly(arg1: android.nfc.NdefMessage): void;
				format(arg1: android.nfc.NdefMessage): void;
				static get(arg1: android.nfc.Tag): android.nfc.tech.NdefFormatable;
				close(): void;
				connect(): void;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class NfcF extends android.nfc.tech.BasicTagTechnology {
				static class: java.lang.Class<android.nfc.tech.NfcF>;
				Timeout: number;
				getManufacturer(): native.Array<native.Byte>;
				getMaxTransceiveLength(): number;
				getSystemCode(): native.Array<native.Byte>;
				transceive(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
				setTimeout(arg1: number): void;
				static get(arg1: android.nfc.Tag): android.nfc.tech.NfcF;
				close(): void;
				connect(): void;
				getTimeout(): number;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class MifareUltralight extends android.nfc.tech.BasicTagTechnology {
				static TYPE_UNKNOWN: number;
				static TYPE_ULTRALIGHT: number;
				static TYPE_ULTRALIGHT_C: number;
				static PAGE_SIZE: number;
				static class: java.lang.Class<android.nfc.tech.MifareUltralight>;
				Timeout: number;
				getMaxTransceiveLength(): number;
				writePage(arg1: number, arg2: native.Array<native.Byte>): void;
				readPages(arg1: number): native.Array<native.Byte>;
				transceive(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
				setTimeout(arg1: number): void;
				static get(arg1: android.nfc.Tag): android.nfc.tech.MifareUltralight;
				close(): void;
				getType(): number;
				connect(): void;
				getTimeout(): number;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export interface ITagTechnology extends java.io.ICloseable {
				close(): void;
				connect(): void;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class NfcV extends android.nfc.tech.BasicTagTechnology {
				static class: java.lang.Class<android.nfc.tech.NfcV>;
				getResponseFlags(): number;
				getMaxTransceiveLength(): number;
				getDsfId(): number;
				transceive(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
				static get(arg1: android.nfc.Tag): android.nfc.tech.NfcV;
				close(): void;
				connect(): void;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class BasicTagTechnology extends java.lang.Object implements android.nfc.tech.ITagTechnology {
				static class: java.lang.Class<android.nfc.tech.BasicTagTechnology>;
				close(): void;
				connect(): void;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
			export class NfcBarcode extends android.nfc.tech.BasicTagTechnology {
				static TYPE_KOVIO: number;
				static TYPE_UNKNOWN: number;
				static class: java.lang.Class<android.nfc.tech.NfcBarcode>;
				getBarcode(): native.Array<native.Byte>;
				static get(arg1: android.nfc.Tag): android.nfc.tech.NfcBarcode;
				close(): void;
				getType(): number;
				connect(): void;
				isConnected(): boolean;
				getTag(): android.nfc.Tag;
			}
		}
		export class NfcAdapter extends java.lang.Object {
			static ACTION_NDEF_DISCOVERED: java.lang.String;
			static ACTION_TECH_DISCOVERED: java.lang.String;
			static ACTION_TAG_DISCOVERED: java.lang.String;
			static EXTRA_TAG: java.lang.String;
			static EXTRA_NDEF_MESSAGES: java.lang.String;
			static EXTRA_ID: java.lang.String;
			static class: java.lang.Class<android.nfc.NfcAdapter>;
			static getDefaultAdapter(arg1: android.content.Context): android.nfc.NfcAdapter;
			setNdefPushMessageCallback(arg1: android.nfc.NfcAdapter.ICreateNdefMessageCallback, arg2: android.app.Activity, arg3: native.Array<android.app.Activity>): void;
			setOnNdefPushCompleteCallback(arg1: android.nfc.NfcAdapter.IOnNdefPushCompleteCallback, arg2: android.app.Activity, arg3: native.Array<android.app.Activity>): void;
			enableForegroundDispatch(arg1: android.app.Activity, arg2: android.app.PendingIntent, arg3: native.Array<android.content.IntentFilter>, arg4: native.Array<native.Array<java.lang.String>>): void;
			setBeamPushUrisCallback(arg1: android.nfc.NfcAdapter.ICreateBeamUrisCallback, arg2: android.app.Activity): void;
			disableForegroundNdefPush(arg1: android.app.Activity): void;
			enableForegroundNdefPush(arg1: android.app.Activity, arg2: android.nfc.NdefMessage): void;
			disableForegroundDispatch(arg1: android.app.Activity): void;
			setBeamPushUris(arg1: native.Array<android.net.Uri>, arg2: android.app.Activity): void;
			setNdefPushMessage(arg1: android.nfc.NdefMessage, arg2: android.app.Activity, arg3: native.Array<android.app.Activity>): void;
			isNdefPushEnabled(): boolean;
			isEnabled(): boolean;
		}
		export module NfcAdapter {
			export interface ICreateNdefMessageCallback {
				createNdefMessage(arg1: android.nfc.NfcEvent): android.nfc.NdefMessage;
			}
			export class CreateBeamUrisCallback implements android.nfc.NfcAdapter.ICreateBeamUrisCallback {
				constructor(implementation: android.nfc.NfcAdapter.ICreateBeamUrisCallback);
				createBeamUris(arg1: android.nfc.NfcEvent): native.Array<android.net.Uri>;
			}
			export interface ICreateBeamUrisCallback {
				createBeamUris(arg1: android.nfc.NfcEvent): native.Array<android.net.Uri>;
			}
			export class OnNdefPushCompleteCallback implements android.nfc.NfcAdapter.IOnNdefPushCompleteCallback {
				constructor(implementation: android.nfc.NfcAdapter.IOnNdefPushCompleteCallback);
				onNdefPushComplete(arg1: android.nfc.NfcEvent): void;
			}
			export interface IOnNdefPushCompleteCallback {
				onNdefPushComplete(arg1: android.nfc.NfcEvent): void;
			}
			export class CreateNdefMessageCallback implements android.nfc.NfcAdapter.ICreateNdefMessageCallback {
				constructor(implementation: android.nfc.NfcAdapter.ICreateNdefMessageCallback);
				createNdefMessage(arg1: android.nfc.NfcEvent): android.nfc.NdefMessage;
			}
		}
	}
	export module sax {
		export interface ITextElementListener extends android.sax.IStartElementListener, android.sax.IEndTextElementListener {
			start(arg1: org.xml.sax.IAttributes): void;
			end(arg1: string): void;
		}
		export interface IEndTextElementListener {
			end(arg1: string): void;
		}
		export class EndTextElementListener implements android.sax.IEndTextElementListener {
			constructor(implementation: android.sax.IEndTextElementListener);
			end(arg1: java.lang.String): void;
			end(arg1: string): void;
		}
		export interface IStartElementListener {
			start(arg1: org.xml.sax.IAttributes): void;
		}
		export interface IEndElementListener {
			end(): void;
		}
		export class TextElementListener implements android.sax.IStartElementListener, android.sax.IEndTextElementListener, android.sax.ITextElementListener {
			constructor(implementation: android.sax.ITextElementListener);
			start(arg1: org.xml.sax.IAttributes): void;
			end(arg1: string): void;
		}
		export interface IElementListener extends android.sax.IStartElementListener, android.sax.IEndElementListener {
			start(arg1: org.xml.sax.IAttributes): void;
			end(): void;
		}
		export class EndElementListener implements android.sax.IEndElementListener {
			constructor(implementation: android.sax.IEndElementListener);
			end(): void;
		}
		export class StartElementListener implements android.sax.IStartElementListener {
			constructor(implementation: android.sax.IStartElementListener);
			start(arg1: org.xml.sax.IAttributes): void;
		}
		export class RootElement extends android.sax.Element {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.sax.RootElement>;
			getContentHandler(): org.xml.sax.IContentHandler;
		}
		export class Element extends java.lang.Object {
			static class: java.lang.Class<android.sax.Element>;
			requireChild(arg1: java.lang.String): android.sax.Element;
			requireChild(arg1: string): android.sax.Element;
			requireChild(arg1: java.lang.String, arg2: java.lang.String): android.sax.Element;
			requireChild(arg1: string, arg2: string): android.sax.Element;
			setEndElementListener(arg1: android.sax.IEndElementListener): void;
			setElementListener(arg1: android.sax.IElementListener): void;
			setStartElementListener(arg1: android.sax.IStartElementListener): void;
			setEndTextElementListener(arg1: android.sax.IEndTextElementListener): void;
			setTextElementListener(arg1: android.sax.ITextElementListener): void;
			toString(): string;
			getChild(arg1: java.lang.String, arg2: java.lang.String): android.sax.Element;
			getChild(arg1: string, arg2: string): android.sax.Element;
			getChild(arg1: java.lang.String): android.sax.Element;
			getChild(arg1: string): android.sax.Element;
		}
		export class ElementListener implements android.sax.IStartElementListener, android.sax.IEndElementListener, android.sax.IElementListener {
			constructor(implementation: android.sax.IElementListener);
			start(arg1: org.xml.sax.IAttributes): void;
			end(): void;
		}
	}
	export module view {
		export class ViewGroup extends android.view.View implements android.view.IViewParent, android.view.IViewManager {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static FOCUS_BEFORE_DESCENDANTS: number;
			static FOCUS_AFTER_DESCENDANTS: number;
			static FOCUS_BLOCK_DESCENDANTS: number;
			static PERSISTENT_NO_CACHE: number;
			static PERSISTENT_ANIMATION_CACHE: number;
			static PERSISTENT_SCROLLING_CACHE: number;
			static PERSISTENT_ALL_CACHES: number;
			static class: java.lang.Class<android.view.ViewGroup>;
			LayoutAnimation: android.view.animation.LayoutAnimationController;
			DescendantFocusability: number;
			LayoutAnimationListener: android.view.animation.Animation.IAnimationListener;
			LayoutTransition: android.animation.LayoutTransition;
			PersistentDrawingCache: number;
			indexOfChild(arg1: android.view.View): number;
			removeViews(arg1: number, arg2: number): void;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number, arg3: number): void;
			addView(arg1: android.view.View, arg2: number, arg3: android.view.ViewGroup.LayoutParams): void;
			addView(arg1: android.view.View, arg2: number): void;
			addView(arg1: android.view.View): void;
			hasFocusable(): boolean;
			removeView(arg1: android.view.View): void;
			removeViewAt(arg1: number): void;
			focusSearch(arg1: android.view.View, arg2: number): android.view.View;
			addFocusables(arg1: java.util.ArrayList<android.view.View>, arg2: number, arg3: number): void;
			addTouchables(arg1: java.util.ArrayList<android.view.View>): void;
			findFocus(): android.view.View;
			clearFocus(): void;
			generateLayoutParams(arg1: android.util.IAttributeSet): android.view.ViewGroup.LayoutParams;
			requestChildFocus(arg1: android.view.View, arg2: android.view.View): void;
			dispatchUnhandledMove(arg1: android.view.View, arg2: number): boolean;
			clearChildFocus(arg1: android.view.View): void;
			getFocusedChild(): android.view.View;
			dispatchWindowSystemUiVisiblityChanged(arg1: number): void;
			offsetRectIntoDescendantCoords(arg1: android.view.View, arg2: android.graphics.Rect): void;
			onRequestSendAccessibilityEvent(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): boolean;
			requestDisallowInterceptTouchEvent(arg1: boolean): void;
			dispatchSystemUiVisibilityChanged(arg1: number): void;
			setMotionEventSplittingEnabled(arg1: boolean): void;
			setAlwaysDrawnWithCacheEnabled(arg1: boolean): void;
			offsetDescendantRectToMyCoords(arg1: android.view.View, arg2: android.graphics.Rect): void;
			dispatchWindowVisibilityChanged(arg1: number): void;
			setAnimationCacheEnabled(arg1: boolean): void;
			isAlwaysDrawnWithCacheEnabled(): boolean;
			isAnimationCacheEnabled(): boolean;
			getPersistentDrawingCache(): number;
			scheduleLayoutAnimation(): void;
			setOnHierarchyChangeListener(arg1: android.view.ViewGroup.IOnHierarchyChangeListener): void;
			isMotionEventSplittingEnabled(): boolean;
			addChildrenForAccessibility(arg1: java.util.ArrayList<android.view.View>): void;
			removeAllViewsInLayout(): void;
			invalidateChildInParent(arg1: native.Array<number>, arg2: android.graphics.Rect): android.view.IViewParent;
			setPersistentDrawingCache(arg1: number): void;
			setDescendantFocusability(arg1: number): void;
			focusableViewAvailable(arg1: android.view.View): void;
			shouldDelayChildPressedState(): boolean;
			getDescendantFocusability(): number;
			dispatchWindowFocusChanged(arg1: boolean): void;
			recomputeViewAttributes(arg1: android.view.View): void;
			dispatchKeyEventPreIme(arg1: android.view.KeyEvent): boolean;
			showContextMenuForChild(arg1: android.view.View): boolean;
			startActionModeForChild(arg1: android.view.View, arg2: android.view.ActionMode.ICallback): android.view.ActionMode;
			dispatchKeyShortcutEvent(arg1: android.view.KeyEvent): boolean;
			requestSendAccessibilityEvent(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): boolean;
			dispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
			requestChildRectangleOnScreen(arg1: android.view.View, arg2: android.graphics.Rect, arg3: boolean): boolean;
			dispatchConfigurationChanged(arg1: android.content.res.Configuration): void;
			startViewTransition(arg1: android.view.View): void;
			endViewTransition(arg1: android.view.View): void;
			static getChildMeasureSpec(arg1: number, arg2: number, arg3: number): number;
			addStatesFromChildren(): boolean;
			setLayoutTransition(arg1: android.animation.LayoutTransition): void;
			dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
			getLayoutTransition(): android.animation.LayoutTransition;
			removeViewInLayout(arg1: android.view.View): void;
			setClipToPadding(arg1: boolean): void;
			dispatchDragEvent(arg1: android.view.DragEvent): boolean;
			dispatchSetSelected(arg1: boolean): void;
			findViewsWithText(arg1: java.util.ArrayList<android.view.View>, arg2: java.lang.ICharSequence, arg3: number): void;
			findViewsWithText(arg1: java.util.ArrayList<android.view.View>, arg2: string, arg3: number): void;
			removeAllViews(): void;
			updateViewLayout(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			bringChildToFront(arg1: android.view.View): void;
			onInterceptHoverEvent(arg1: android.view.MotionEvent): boolean;
			setClipChildren(arg1: boolean): void;
			dispatchDisplayHint(arg1: number): void;
			onInterceptTouchEvent(arg1: android.view.MotionEvent): boolean;
			dispatchSetActivated(arg1: boolean): void;
			removeViewsInLayout(arg1: number, arg2: number): void;
			startLayoutAnimation(): void;
			getLayoutAnimation(): android.view.animation.LayoutAnimationController;
			setLayoutAnimation(arg1: android.view.animation.LayoutAnimationController): void;
			getChildVisibleRect(arg1: android.view.View, arg2: android.graphics.Rect, arg3: android.graphics.Point): boolean;
			invalidateChild(arg1: android.view.View, arg2: android.graphics.Rect): void;
			gatherTransparentRegion(arg1: android.graphics.Region): boolean;
			clearDisappearingChildren(): void;
			getLayoutAnimationListener(): android.view.animation.Animation.IAnimationListener;
			jumpDrawablesToCurrentState(): void;
			setAddStatesFromChildren(arg1: boolean): void;
			requestTransparentRegion(arg1: android.view.View): void;
			childDrawableStateChanged(arg1: android.view.View): void;
			setLayoutAnimationListener(arg1: android.view.animation.Animation.IAnimationListener): void;
			requestFocus(arg1: number, arg2: android.graphics.Rect): boolean;
			layout(arg1: number, arg2: number, arg3: number, arg4: number): void;
			hasFocus(): boolean;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			getChildAt(arg1: number): android.view.View;
			getChildCount(): number;
			requestLayout(): void;
			createContextMenu(arg1: android.view.IContextMenu): void;
			isLayoutRequested(): boolean;
			requestFitSystemWindows(): void;
			getParentForAccessibility(): android.view.IViewParent;
			getParent(): android.view.IViewParent;
			focusSearch(arg1: number): android.view.View;
			addFocusables(arg1: java.util.ArrayList<android.view.View>, arg2: number): void;
			requestFocus(arg1: number): boolean;
			requestFocus(): boolean;
		}
		export module ViewGroup {
			export class MarginLayoutParams extends android.view.ViewGroup.LayoutParams {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: number, arg2: number);
				constructor(arg1: android.view.ViewGroup.MarginLayoutParams);
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				leftMargin: number;
				topMargin: number;
				rightMargin: number;
				bottomMargin: number;
				static class: java.lang.Class<android.view.ViewGroup.MarginLayoutParams>;
				LayoutDirection: number;
				MarginStart: number;
				MarginEnd: number;
				setLayoutDirection(arg1: number): void;
				getLayoutDirection(): number;
				resolveLayoutDirection(arg1: number): void;
				setMargins(arg1: number, arg2: number, arg3: number, arg4: number): void;
				setMarginEnd(arg1: number): void;
				getMarginEnd(): number;
				setMarginStart(arg1: number): void;
				getMarginStart(): number;
				isMarginRelative(): boolean;
			}
			export class OnHierarchyChangeListener implements android.view.ViewGroup.IOnHierarchyChangeListener {
				constructor(implementation: android.view.ViewGroup.IOnHierarchyChangeListener);
				onChildViewRemoved(arg1: android.view.View, arg2: android.view.View): void;
				onChildViewAdded(arg1: android.view.View, arg2: android.view.View): void;
			}
			export interface IOnHierarchyChangeListener {
				onChildViewRemoved(arg1: android.view.View, arg2: android.view.View): void;
				onChildViewAdded(arg1: android.view.View, arg2: android.view.View): void;
			}
			export class LayoutParams extends java.lang.Object {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: android.view.ViewGroup.LayoutParams);
				constructor(arg1: number, arg2: number);
				static FILL_PARENT: number;
				static MATCH_PARENT: number;
				static WRAP_CONTENT: number;
				width: number;
				height: number;
				layoutAnimationParameters: android.view.animation.LayoutAnimationController.AnimationParameters;
				static class: java.lang.Class<android.view.ViewGroup.LayoutParams>;
				resolveLayoutDirection(arg1: number): void;
			}
		}
		export interface ISurfaceHolder {
			setKeepScreenOn(arg1: boolean): void;
			lockCanvas(): android.graphics.Canvas;
			lockCanvas(arg1: android.graphics.Rect): android.graphics.Canvas;
			isCreating(): boolean;
			addCallback(arg1: android.view.SurfaceHolder.ICallback): void;
			setFixedSize(arg1: number, arg2: number): void;
			getSurface(): android.view.Surface;
			removeCallback(arg1: android.view.SurfaceHolder.ICallback): void;
			setSizeFromLayout(): void;
			getSurfaceFrame(): android.graphics.Rect;
			unlockCanvasAndPost(arg1: android.graphics.Canvas): void;
			setType(arg1: number): void;
			setFormat(arg1: number): void;
		}
		export module ISurfaceHolder {
			var SURFACE_TYPE_NORMAL: number;
			var SURFACE_TYPE_HARDWARE: number;
			var SURFACE_TYPE_GPU: number;
			var SURFACE_TYPE_PUSH_BUFFERS: number;
		}
		export class OrientationListener extends java.lang.Object implements android.hardware.ISensorListener {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: number);
			static ORIENTATION_UNKNOWN: number;
			static class: java.lang.Class<android.view.OrientationListener>;
			onOrientationChanged(arg1: number): void;
			onAccuracyChanged(arg1: number, arg2: number): void;
			onSensorChanged(arg1: number, arg2: native.Array<native.Float>): void;
			disable(): void;
			enable(): void;
		}
		export class ViewDebug extends java.lang.Object {
			constructor();
			static TRACE_HIERARCHY: boolean;
			static TRACE_RECYCLER: boolean;
			static class: java.lang.Class<android.view.ViewDebug>;
			static trace(arg1: android.view.View, arg2: android.view.ViewDebug.HierarchyTraceType): void;
			static trace(arg1: android.view.View, arg2: android.view.ViewDebug.RecyclerTraceType, arg3: native.Array<number>): void;
			static dumpCapturedView(arg1: java.lang.String, arg2: any): void;
			static dumpCapturedView(arg1: string, arg2: any): void;
			static stopRecyclerTracing(): void;
			static stopHierarchyTracing(): void;
			static startHierarchyTracing(arg1: java.lang.String, arg2: android.view.View): void;
			static startHierarchyTracing(arg1: string, arg2: android.view.View): void;
			static startRecyclerTracing(arg1: java.lang.String, arg2: android.view.View): void;
			static startRecyclerTracing(arg1: string, arg2: android.view.View): void;
		}
		export module ViewDebug {
			export class ExportedProperty implements java.lang.annotation.IAnnotation, android.view.ViewDebug.IExportedProperty {
				constructor(implementation: android.view.ViewDebug.IExportedProperty);
				category(): string;
				deepExport(): boolean;
				resolveId(): boolean;
				indexMapping(): native.Array<android.view.ViewDebug.IIntToString>;
				flagMapping(): native.Array<android.view.ViewDebug.IFlagToString>;
				prefix(): string;
				mapping(): native.Array<android.view.ViewDebug.IIntToString>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export interface IIntToString extends java.lang.annotation.IAnnotation {
				from(): number;
				to(): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export interface ICapturedViewProperty extends java.lang.annotation.IAnnotation {
				retrieveReturn(): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class CapturedViewProperty implements java.lang.annotation.IAnnotation, android.view.ViewDebug.ICapturedViewProperty {
				constructor(implementation: android.view.ViewDebug.ICapturedViewProperty);
				retrieveReturn(): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export enum RecyclerTraceType {
				BIND_VIEW,
				MOVE_FROM_ACTIVE_TO_SCRAP_HEAP,
				MOVE_TO_SCRAP_HEAP,
				NEW_VIEW,
				RECYCLE_FROM_ACTIVE_HEAP,
				RECYCLE_FROM_SCRAP_HEAP
			}
			export module RecyclerTraceType {
				export function valueOf(arg1: java.lang.String): android.view.ViewDebug.RecyclerTraceType;
				export function valueOf(arg1: string): android.view.ViewDebug.RecyclerTraceType;
				export function values(): native.Array<android.view.ViewDebug.RecyclerTraceType>;
			}
			export enum HierarchyTraceType {
				BUILD_CACHE,
				DRAW,
				INVALIDATE,
				INVALIDATE_CHILD,
				INVALIDATE_CHILD_IN_PARENT,
				ON_LAYOUT,
				ON_MEASURE,
				REQUEST_LAYOUT
			}
			export module HierarchyTraceType {
				export function valueOf(arg1: java.lang.String): android.view.ViewDebug.HierarchyTraceType;
				export function valueOf(arg1: string): android.view.ViewDebug.HierarchyTraceType;
				export function values(): native.Array<android.view.ViewDebug.HierarchyTraceType>;
			}
			export class FlagToString implements java.lang.annotation.IAnnotation, android.view.ViewDebug.IFlagToString {
				constructor(implementation: android.view.ViewDebug.IFlagToString);
				outputIf(): boolean;
				equals(): number;
				name(): string;
				mask(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export interface IFlagToString extends java.lang.annotation.IAnnotation {
				outputIf(): boolean;
				equals(): number;
				name(): string;
				mask(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class IntToString implements java.lang.annotation.IAnnotation, android.view.ViewDebug.IIntToString {
				constructor(implementation: android.view.ViewDebug.IIntToString);
				from(): number;
				to(): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export interface IExportedProperty extends java.lang.annotation.IAnnotation {
				category(): string;
				deepExport(): boolean;
				resolveId(): boolean;
				indexMapping(): native.Array<android.view.ViewDebug.IIntToString>;
				flagMapping(): native.Array<android.view.ViewDebug.IFlagToString>;
				prefix(): string;
				mapping(): native.Array<android.view.ViewDebug.IIntToString>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
		}
		export class InputEvent extends java.lang.Object implements android.os.IParcelable {
			static CREATOR: android.os.Parcelable.ICreator<android.view.InputEvent>;
			static class: java.lang.Class<android.view.InputEvent>;
			describeContents(): number;
			getEventTime(): any;
			getDeviceId(): number;
			getDevice(): android.view.InputDevice;
			getSource(): number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
		}
		export class VelocityTracker extends java.lang.Object {
			static class: java.lang.Class<android.view.VelocityTracker>;
			static obtain(): android.view.VelocityTracker;
			recycle(): void;
			computeCurrentVelocity(arg1: number, arg2: native.Float): void;
			computeCurrentVelocity(arg1: number): void;
			getYVelocity(arg1: number): number;
			getYVelocity(): number;
			getXVelocity(): number;
			getXVelocity(arg1: number): number;
			addMovement(arg1: android.view.MotionEvent): void;
			clear(): void;
		}
		export class InputQueue extends java.lang.Object {
			static class: java.lang.Class<android.view.InputQueue>;
		}
		export module InputQueue {
			export interface ICallback {
				onInputQueueDestroyed(arg1: android.view.InputQueue): void;
				onInputQueueCreated(arg1: android.view.InputQueue): void;
			}
			export class Callback implements android.view.InputQueue.ICallback {
				constructor(implementation: android.view.InputQueue.ICallback);
				onInputQueueDestroyed(arg1: android.view.InputQueue): void;
				onInputQueueCreated(arg1: android.view.InputQueue): void;
			}
		}
		export class Menu implements android.view.IMenu {
			constructor(implementation: android.view.IMenu);
			static NONE: number;
			static FIRST: number;
			static CATEGORY_CONTAINER: number;
			static CATEGORY_SYSTEM: number;
			static CATEGORY_SECONDARY: number;
			static CATEGORY_ALTERNATIVE: number;
			static FLAG_APPEND_TO_GROUP: number;
			static FLAG_PERFORM_NO_CLOSE: number;
			static FLAG_ALWAYS_PERFORM_CLOSE: number;
			hasVisibleItems(): boolean;
			addIntentOptions(arg1: number, arg2: number, arg3: number, arg4: android.content.ComponentName, arg5: native.Array<android.content.Intent>, arg6: android.content.Intent, arg7: number, arg8: native.Array<android.view.IMenuItem>): number;
			setGroupEnabled(arg1: number, arg2: boolean): void;
			setGroupVisible(arg1: number, arg2: boolean): void;
			performShortcut(arg1: number, arg2: android.view.KeyEvent, arg3: number): boolean;
			setGroupCheckable(arg1: number, arg2: boolean, arg3: boolean): void;
			performIdentifierAction(arg1: number, arg2: number): boolean;
			removeGroup(arg1: number): void;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: number): android.view.ISubMenu;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: java.lang.ICharSequence): android.view.ISubMenu;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: string): android.view.ISubMenu;
			addSubMenu(arg1: number): android.view.ISubMenu;
			addSubMenu(arg1: java.lang.ICharSequence): android.view.ISubMenu;
			addSubMenu(arg1: string): android.view.ISubMenu;
			findItem(arg1: number): android.view.IMenuItem;
			isShortcutKey(arg1: number, arg2: android.view.KeyEvent): boolean;
			setQwertyMode(arg1: boolean): void;
			add(arg1: java.lang.ICharSequence): android.view.IMenuItem;
			add(arg1: string): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: number): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: java.lang.ICharSequence): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: string): android.view.IMenuItem;
			add(arg1: number): android.view.IMenuItem;
			size(): number;
			clear(): void;
			close(): void;
			getItem(arg1: number): android.view.IMenuItem;
			removeItem(arg1: number): void;
		}
		export class HapticFeedbackConstants extends java.lang.Object {
			static LONG_PRESS: number;
			static VIRTUAL_KEY: number;
			static KEYBOARD_TAP: number;
			static FLAG_IGNORE_VIEW_SETTING: number;
			static FLAG_IGNORE_GLOBAL_SETTING: number;
			static class: java.lang.Class<android.view.HapticFeedbackConstants>;
		}
		export interface IWindowManager extends android.view.IViewManager {
			removeViewImmediate(arg1: android.view.View): void;
			getDefaultDisplay(): android.view.Display;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			removeView(arg1: android.view.View): void;
			updateViewLayout(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
		}
		export module textservice {
			export class SentenceSuggestionsInfo extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: native.Array<android.view.textservice.SuggestionsInfo>, arg2: native.Array<number>, arg3: native.Array<number>);
				constructor(arg1: android.os.Parcel);
				static CREATOR: android.os.Parcelable.ICreator<android.view.textservice.SentenceSuggestionsInfo>;
				static class: java.lang.Class<android.view.textservice.SentenceSuggestionsInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getSuggestionsCount(): number;
				getSuggestionsInfoAt(arg1: number): android.view.textservice.SuggestionsInfo;
				getLengthAt(arg1: number): number;
				getOffsetAt(arg1: number): number;
			}
			export class TextServicesManager extends java.lang.Object {
				static class: java.lang.Class<android.view.textservice.TextServicesManager>;
				newSpellCheckerSession(arg1: android.os.Bundle, arg2: java.util.Locale, arg3: android.view.textservice.SpellCheckerSession.ISpellCheckerSessionListener, arg4: boolean): android.view.textservice.SpellCheckerSession;
			}
			export class TextInfo extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: android.os.Parcel);
				constructor(arg1: java.lang.String, arg2: number, arg3: number);
				constructor(arg1: string, arg2: number, arg3: number);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static CREATOR: android.os.Parcelable.ICreator<android.view.textservice.TextInfo>;
				static class: java.lang.Class<android.view.textservice.TextInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getCookie(): number;
				getText(): string;
				getSequence(): number;
			}
			export class SuggestionsInfo extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: number, arg2: native.Array<java.lang.String>);
				constructor(arg1: number, arg2: native.Array<java.lang.String>, arg3: number, arg4: number);
				constructor(arg1: android.os.Parcel);
				static RESULT_ATTR_IN_THE_DICTIONARY: number;
				static RESULT_ATTR_LOOKS_LIKE_TYPO: number;
				static RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS: number;
				static CREATOR: android.os.Parcelable.ICreator<android.view.textservice.SuggestionsInfo>;
				static class: java.lang.Class<android.view.textservice.SuggestionsInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getCookie(): number;
				getSuggestionsCount(): number;
				setCookieAndSequence(arg1: number, arg2: number): void;
				getSuggestionAt(arg1: number): string;
				getSuggestionsAttributes(): number;
				getSequence(): number;
			}
			export class SpellCheckerInfo extends java.lang.Object implements android.os.IParcelable {
				static CREATOR: android.os.Parcelable.ICreator<android.view.textservice.SpellCheckerInfo>;
				static class: java.lang.Class<android.view.textservice.SpellCheckerInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getServiceInfo(): android.content.pm.ServiceInfo;
				loadLabel(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				getSubtypeAt(arg1: number): android.view.textservice.SpellCheckerSubtype;
				loadIcon(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
				getSettingsActivity(): string;
				getSubtypeCount(): number;
				getId(): string;
				getPackageName(): string;
				getComponent(): android.content.ComponentName;
			}
			export class SpellCheckerSubtype extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: number, arg2: java.lang.String, arg3: java.lang.String);
				constructor(arg1: number, arg2: string, arg3: string);
				static CREATOR: android.os.Parcelable.ICreator<android.view.textservice.SpellCheckerSubtype>;
				static class: java.lang.Class<android.view.textservice.SpellCheckerSubtype>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getNameResId(): number;
				getExtraValue(): string;
				getExtraValueOf(arg1: java.lang.String): string;
				getExtraValueOf(arg1: string): string;
				containsExtraValueKey(arg1: java.lang.String): boolean;
				containsExtraValueKey(arg1: string): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				getDisplayName(arg1: android.content.Context, arg2: java.lang.String, arg3: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				getDisplayName(arg1: android.content.Context, arg2: string, arg3: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				getLocale(): string;
			}
			export class SpellCheckerSession extends java.lang.Object {
				static SERVICE_META_DATA: java.lang.String;
				static class: java.lang.Class<android.view.textservice.SpellCheckerSession>;
				getSuggestions(arg1: android.view.textservice.TextInfo, arg2: number): void;
				getSuggestions(arg1: native.Array<android.view.textservice.TextInfo>, arg2: number, arg3: boolean): void;
				getSpellChecker(): android.view.textservice.SpellCheckerInfo;
				isSessionDisconnected(): boolean;
				getSentenceSuggestions(arg1: native.Array<android.view.textservice.TextInfo>, arg2: number): void;
				close(): void;
				cancel(): void;
			}
			export module SpellCheckerSession {
				export interface ISpellCheckerSessionListener {
					onGetSuggestions(arg1: native.Array<android.view.textservice.SuggestionsInfo>): void;
					onGetSentenceSuggestions(arg1: native.Array<android.view.textservice.SentenceSuggestionsInfo>): void;
				}
				export class SpellCheckerSessionListener implements android.view.textservice.SpellCheckerSession.ISpellCheckerSessionListener {
					constructor(implementation: android.view.textservice.SpellCheckerSession.ISpellCheckerSessionListener);
					onGetSuggestions(arg1: native.Array<android.view.textservice.SuggestionsInfo>): void;
					onGetSentenceSuggestions(arg1: native.Array<android.view.textservice.SentenceSuggestionsInfo>): void;
				}
			}
		}
		export class MenuInflater extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.view.MenuInflater>;
			inflate(arg1: number, arg2: android.view.IMenu): void;
		}
		export class ViewParent implements android.view.IViewParent {
			constructor(implementation: android.view.IViewParent);
			requestLayout(): void;
			focusSearch(arg1: android.view.View, arg2: number): android.view.View;
			requestChildFocus(arg1: android.view.View, arg2: android.view.View): void;
			clearChildFocus(arg1: android.view.View): void;
			requestDisallowInterceptTouchEvent(arg1: boolean): void;
			invalidateChildInParent(arg1: native.Array<number>, arg2: android.graphics.Rect): android.view.IViewParent;
			focusableViewAvailable(arg1: android.view.View): void;
			recomputeViewAttributes(arg1: android.view.View): void;
			showContextMenuForChild(arg1: android.view.View): boolean;
			startActionModeForChild(arg1: android.view.View, arg2: android.view.ActionMode.ICallback): android.view.ActionMode;
			requestSendAccessibilityEvent(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): boolean;
			requestChildRectangleOnScreen(arg1: android.view.View, arg2: android.graphics.Rect, arg3: boolean): boolean;
			createContextMenu(arg1: android.view.IContextMenu): void;
			isLayoutRequested(): boolean;
			bringChildToFront(arg1: android.view.View): void;
			getChildVisibleRect(arg1: android.view.View, arg2: android.graphics.Rect, arg3: android.graphics.Point): boolean;
			invalidateChild(arg1: android.view.View, arg2: android.graphics.Rect): void;
			requestFitSystemWindows(): void;
			getParentForAccessibility(): android.view.IViewParent;
			requestTransparentRegion(arg1: android.view.View): void;
			childDrawableStateChanged(arg1: android.view.View): void;
			getParent(): android.view.IViewParent;
		}
		export class Surface extends java.lang.Object implements android.os.IParcelable {
			constructor(arg1: android.graphics.SurfaceTexture);
			static CREATOR: android.os.Parcelable.ICreator<android.view.Surface>;
			static ROTATION_0: number;
			static ROTATION_90: number;
			static ROTATION_180: number;
			static ROTATION_270: number;
			static class: java.lang.Class<android.view.Surface>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			lockCanvas(arg1: android.graphics.Rect): android.graphics.Canvas;
			readFromParcel(arg1: android.os.Parcel): void;
			unlockCanvasAndPost(arg1: android.graphics.Canvas): void;
			unlockCanvas(arg1: android.graphics.Canvas): void;
			toString(): string;
			release(): void;
			isValid(): boolean;
		}
		export module Surface {
			export class OutOfResourcesException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.view.Surface.OutOfResourcesException>;
			}
		}
		export class FocusFinder extends java.lang.Object {
			static class: java.lang.Class<android.view.FocusFinder>;
			findNearestTouchable(arg1: android.view.ViewGroup, arg2: number, arg3: number, arg4: number, arg5: native.Array<number>): android.view.View;
			findNextFocusFromRect(arg1: android.view.ViewGroup, arg2: android.graphics.Rect, arg3: number): android.view.View;
			findNextFocus(arg1: android.view.ViewGroup, arg2: android.view.View, arg3: number): android.view.View;
			static getInstance(): android.view.FocusFinder;
		}
		export class Window extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static FEATURE_OPTIONS_PANEL: number;
			static FEATURE_NO_TITLE: number;
			static FEATURE_PROGRESS: number;
			static FEATURE_LEFT_ICON: number;
			static FEATURE_RIGHT_ICON: number;
			static FEATURE_INDETERMINATE_PROGRESS: number;
			static FEATURE_CONTEXT_MENU: number;
			static FEATURE_CUSTOM_TITLE: number;
			static FEATURE_ACTION_BAR: number;
			static FEATURE_ACTION_BAR_OVERLAY: number;
			static FEATURE_ACTION_MODE_OVERLAY: number;
			static PROGRESS_VISIBILITY_ON: number;
			static PROGRESS_VISIBILITY_OFF: number;
			static PROGRESS_INDETERMINATE_ON: number;
			static PROGRESS_INDETERMINATE_OFF: number;
			static PROGRESS_START: number;
			static PROGRESS_END: number;
			static PROGRESS_SECONDARY_START: number;
			static PROGRESS_SECONDARY_END: number;
			static ID_ANDROID_CONTENT: number;
			static class: java.lang.Class<android.view.Window>;
			Attributes: android.view.WindowManager.LayoutParams;
			VolumeControlStream: number;
			Callback: android.view.Window.ICallback;
			Container: android.view.Window;
			setAttributes(arg1: android.view.WindowManager.LayoutParams): void;
			setGravity(arg1: number): void;
			onConfigurationChanged(arg1: android.content.res.Configuration): void;
			saveHierarchyState(): android.os.Bundle;
			restoreHierarchyState(arg1: android.os.Bundle): void;
			findViewById(arg1: number): android.view.View;
			setBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			setContentView(arg1: android.view.View): void;
			setContentView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			setContentView(arg1: number): void;
			setSoftInputMode(arg1: number): void;
			getLayoutInflater(): android.view.LayoutInflater;
			invalidatePanelMenu(arg1: number): void;
			performPanelShortcut(arg1: number, arg2: number, arg3: android.view.KeyEvent, arg4: number): boolean;
			closeAllPanels(): void;
			takeInputQueue(arg1: android.view.InputQueue.ICallback): void;
			setFeatureDrawableUri(arg1: number, arg2: android.net.Uri): void;
			setFeatureDrawable(arg1: number, arg2: android.graphics.drawable.Drawable): void;
			superDispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			setWindowAnimations(arg1: number): void;
			requestFeature(arg1: number): boolean;
			getWindowStyle(): android.content.res.TypedArray;
			getWindowManager(): android.view.IWindowManager;
			addContentView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			getCurrentFocus(): android.view.View;
			setWindowManager(arg1: android.view.IWindowManager, arg2: android.os.IIBinder, arg3: java.lang.String): void;
			setWindowManager(arg1: android.view.IWindowManager, arg2: android.os.IIBinder, arg3: string): void;
			setWindowManager(arg1: android.view.IWindowManager, arg2: android.os.IIBinder, arg3: java.lang.String, arg4: boolean): void;
			setWindowManager(arg1: android.view.IWindowManager, arg2: android.os.IIBinder, arg3: string, arg4: boolean): void;
			setChildDrawable(arg1: number, arg2: android.graphics.drawable.Drawable): void;
			performContextMenuIdentifierAction(arg1: number, arg2: number): boolean;
			superDispatchGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			isShortcutKey(arg1: number, arg2: android.view.KeyEvent): boolean;
			setCallback(arg1: android.view.Window.ICallback): void;
			getCallback(): android.view.Window.ICallback;
			setContainer(arg1: android.view.Window): void;
			hasChildren(): boolean;
			setFlags(arg1: number, arg2: number): void;
			takeKeyEvents(arg1: boolean): void;
			peekDecorView(): android.view.View;
			openPanel(arg1: number, arg2: android.view.KeyEvent): void;
			makeActive(): void;
			closePanel(arg1: number): void;
			takeSurface(arg1: android.view.SurfaceHolder.ICallback2): void;
			getDecorView(): android.view.View;
			togglePanel(arg1: number, arg2: android.view.KeyEvent): void;
			hasFeature(arg1: number): boolean;
			setDimAmount(arg1: native.Float): void;
			setFeatureInt(arg1: number, arg2: number): void;
			setUiOptions(arg1: number): void;
			setUiOptions(arg1: number, arg2: number): void;
			setChildInt(arg1: number, arg2: number): void;
			getVolumeControlStream(): number;
			setBackgroundDrawableResource(arg1: number): void;
			performPanelIdentifierAction(arg1: number, arg2: number, arg3: number): boolean;
			setVolumeControlStream(arg1: number): void;
			superDispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
			setFeatureDrawableResource(arg1: number, arg2: number): void;
			setFeatureDrawableAlpha(arg1: number, arg2: number): void;
			superDispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
			superDispatchKeyShortcutEvent(arg1: android.view.KeyEvent): boolean;
			getContext(): android.content.Context;
			getAttributes(): android.view.WindowManager.LayoutParams;
			setTitle(arg1: java.lang.ICharSequence): void;
			setTitle(arg1: string): void;
			getContainer(): android.view.Window;
			isActive(): boolean;
			setLayout(arg1: number, arg2: number): void;
			setType(arg1: number): void;
			setFormat(arg1: number): void;
			addFlags(arg1: number): void;
			clearFlags(arg1: number): void;
			isFloating(): boolean;
			setTitleColor(arg1: number): void;
		}
		export module Window {
			export interface ICallback {
				dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
				onDetachedFromWindow(): void;
				onWindowFocusChanged(arg1: boolean): void;
				dispatchKeyShortcutEvent(arg1: android.view.KeyEvent): boolean;
				dispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
				dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
				onAttachedToWindow(): void;
				dispatchGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
				onContentChanged(): void;
				onMenuOpened(arg1: number, arg2: android.view.IMenu): boolean;
				onPanelClosed(arg1: number, arg2: android.view.IMenu): void;
				onWindowAttributesChanged(arg1: android.view.WindowManager.LayoutParams): void;
				onWindowStartingActionMode(arg1: android.view.ActionMode.ICallback): android.view.ActionMode;
				onPreparePanel(arg1: number, arg2: android.view.View, arg3: android.view.IMenu): boolean;
				onMenuItemSelected(arg1: number, arg2: android.view.IMenuItem): boolean;
				onSearchRequested(): boolean;
				onActionModeStarted(arg1: android.view.ActionMode): void;
				onCreatePanelView(arg1: number): android.view.View;
				onActionModeFinished(arg1: android.view.ActionMode): void;
				onCreatePanelMenu(arg1: number, arg2: android.view.IMenu): boolean;
				dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			}
			export class Callback implements android.view.Window.ICallback {
				constructor(implementation: android.view.Window.ICallback);
				dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
				onDetachedFromWindow(): void;
				onWindowFocusChanged(arg1: boolean): void;
				dispatchKeyShortcutEvent(arg1: android.view.KeyEvent): boolean;
				dispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
				dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
				onAttachedToWindow(): void;
				dispatchGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
				onContentChanged(): void;
				onMenuOpened(arg1: number, arg2: android.view.IMenu): boolean;
				onPanelClosed(arg1: number, arg2: android.view.IMenu): void;
				onWindowAttributesChanged(arg1: android.view.WindowManager.LayoutParams): void;
				onWindowStartingActionMode(arg1: android.view.ActionMode.ICallback): android.view.ActionMode;
				onPreparePanel(arg1: number, arg2: android.view.View, arg3: android.view.IMenu): boolean;
				onMenuItemSelected(arg1: number, arg2: android.view.IMenuItem): boolean;
				onSearchRequested(): boolean;
				onActionModeStarted(arg1: android.view.ActionMode): void;
				onCreatePanelView(arg1: number): android.view.View;
				onActionModeFinished(arg1: android.view.ActionMode): void;
				onCreatePanelMenu(arg1: number, arg2: android.view.IMenu): boolean;
				dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			}
		}
		export class ViewPropertyAnimator extends java.lang.Object {
			static class: java.lang.Class<android.view.ViewPropertyAnimator>;
			getDuration(): any;
			setInterpolator(arg1: android.animation.ITimeInterpolator): android.view.ViewPropertyAnimator;
			translationX(arg1: native.Float): android.view.ViewPropertyAnimator;
			translationY(arg1: native.Float): android.view.ViewPropertyAnimator;
			rotation(arg1: native.Float): android.view.ViewPropertyAnimator;
			rotationX(arg1: native.Float): android.view.ViewPropertyAnimator;
			rotationY(arg1: native.Float): android.view.ViewPropertyAnimator;
			setDuration(arg1: native.Long): android.view.ViewPropertyAnimator;
			xBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			yBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			withStartAction(arg1: java.lang.IRunnable): android.view.ViewPropertyAnimator;
			translationYBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			translationXBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			getStartDelay(): any;
			setStartDelay(arg1: native.Long): android.view.ViewPropertyAnimator;
			rotationBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			rotationXBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			rotationYBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			setListener(arg1: android.animation.Animator.IAnimatorListener): android.view.ViewPropertyAnimator;
			withEndAction(arg1: java.lang.IRunnable): android.view.ViewPropertyAnimator;
			alphaBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			scaleYBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			withLayer(): android.view.ViewPropertyAnimator;
			scaleXBy(arg1: native.Float): android.view.ViewPropertyAnimator;
			start(): void;
			x(arg1: native.Float): android.view.ViewPropertyAnimator;
			y(arg1: native.Float): android.view.ViewPropertyAnimator;
			scaleX(arg1: native.Float): android.view.ViewPropertyAnimator;
			scaleY(arg1: native.Float): android.view.ViewPropertyAnimator;
			alpha(arg1: native.Float): android.view.ViewPropertyAnimator;
			cancel(): void;
		}
		export module accessibility {
			export class AccessibilityManager extends java.lang.Object {
				static class: java.lang.Class<android.view.accessibility.AccessibilityManager>;
				sendAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
				isTouchExplorationEnabled(): boolean;
				getAccessibilityServiceList(): java.util.IList<android.content.pm.ServiceInfo>;
				getEnabledAccessibilityServiceList(arg1: number): java.util.IList<android.accessibilityservice.AccessibilityServiceInfo>;
				addAccessibilityStateChangeListener(arg1: android.view.accessibility.AccessibilityManager.IAccessibilityStateChangeListener): boolean;
				getInstalledAccessibilityServiceList(): java.util.IList<android.accessibilityservice.AccessibilityServiceInfo>;
				removeAccessibilityStateChangeListener(arg1: android.view.accessibility.AccessibilityManager.IAccessibilityStateChangeListener): boolean;
				interrupt(): void;
				isEnabled(): boolean;
			}
			export module AccessibilityManager {
				export interface IAccessibilityStateChangeListener {
					onAccessibilityStateChanged(arg1: boolean): void;
				}
				export class AccessibilityStateChangeListener implements android.view.accessibility.AccessibilityManager.IAccessibilityStateChangeListener {
					constructor(implementation: android.view.accessibility.AccessibilityManager.IAccessibilityStateChangeListener);
					onAccessibilityStateChanged(arg1: boolean): void;
				}
			}
			export class AccessibilityEvent extends android.view.accessibility.AccessibilityRecord implements android.os.IParcelable {
				static INVALID_POSITION: number;
				static MAX_TEXT_LENGTH: number;
				static TYPE_VIEW_CLICKED: number;
				static TYPE_VIEW_LONG_CLICKED: number;
				static TYPE_VIEW_SELECTED: number;
				static TYPE_VIEW_FOCUSED: number;
				static TYPE_VIEW_TEXT_CHANGED: number;
				static TYPE_WINDOW_STATE_CHANGED: number;
				static TYPE_NOTIFICATION_STATE_CHANGED: number;
				static TYPE_VIEW_HOVER_ENTER: number;
				static TYPE_VIEW_HOVER_EXIT: number;
				static TYPE_TOUCH_EXPLORATION_GESTURE_START: number;
				static TYPE_TOUCH_EXPLORATION_GESTURE_END: number;
				static TYPE_WINDOW_CONTENT_CHANGED: number;
				static TYPE_VIEW_SCROLLED: number;
				static TYPE_VIEW_TEXT_SELECTION_CHANGED: number;
				static TYPE_ANNOUNCEMENT: number;
				static TYPE_VIEW_ACCESSIBILITY_FOCUSED: number;
				static TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED: number;
				static TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY: number;
				static TYPE_GESTURE_DETECTION_START: number;
				static TYPE_GESTURE_DETECTION_END: number;
				static TYPE_TOUCH_INTERACTION_START: number;
				static TYPE_TOUCH_INTERACTION_END: number;
				static TYPES_ALL_MASK: number;
				static CREATOR: android.os.Parcelable.ICreator<android.view.accessibility.AccessibilityEvent>;
				static class: java.lang.Class<android.view.accessibility.AccessibilityEvent>;
				Action: number;
				PackageName: java.lang.ICharSequence;
				EventType: number;
				MovementGranularity: number;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getEventTime(): any;
				static obtain(arg1: android.view.accessibility.AccessibilityEvent): android.view.accessibility.AccessibilityEvent;
				static obtain(): android.view.accessibility.AccessibilityEvent;
				static obtain(arg1: number): android.view.accessibility.AccessibilityEvent;
				recycle(): void;
				setPackageName(arg1: java.lang.ICharSequence): void;
				setPackageName(arg1: string): void;
				initFromParcel(arg1: android.os.Parcel): void;
				static eventTypeToString(arg1: number): string;
				getRecordCount(): number;
				getMovementGranularity(): number;
				setMovementGranularity(arg1: number): void;
				setEventType(arg1: number): void;
				getEventType(): number;
				getRecord(arg1: number): android.view.accessibility.AccessibilityRecord;
				setEventTime(arg1: native.Long): void;
				appendRecord(arg1: android.view.accessibility.AccessibilityRecord): void;
				toString(): string;
				getPackageName(): java.lang.ICharSequence;
				getAction(): number;
				setAction(arg1: number): void;
				static obtain(arg1: android.view.accessibility.AccessibilityRecord): android.view.accessibility.AccessibilityRecord;
			}
			export class AccessibilityRecord extends java.lang.Object {
				static class: java.lang.Class<android.view.accessibility.AccessibilityRecord>;
				AddedCount: number;
				FromIndex: number;
				ToIndex: number;
				ItemCount: number;
				CurrentItemIndex: number;
				RemovedCount: number;
				BeforeText: java.lang.ICharSequence;
				ScrollY: number;
				MaxScrollY: number;
				ParcelableData: android.os.IParcelable;
				ScrollX: number;
				ContentDescription: java.lang.ICharSequence;
				ClassName: java.lang.ICharSequence;
				MaxScrollX: number;
				getContentDescription(): java.lang.ICharSequence;
				setContentDescription(arg1: java.lang.ICharSequence): void;
				setContentDescription(arg1: string): void;
				setScrollY(arg1: number): void;
				getScrollY(): number;
				getScrollX(): number;
				setScrollX(arg1: number): void;
				isChecked(): boolean;
				setChecked(arg1: boolean): void;
				static obtain(): android.view.accessibility.AccessibilityRecord;
				static obtain(arg1: android.view.accessibility.AccessibilityRecord): android.view.accessibility.AccessibilityRecord;
				recycle(): void;
				getCurrentItemIndex(): number;
				setCurrentItemIndex(arg1: number): void;
				getRemovedCount(): number;
				setRemovedCount(arg1: number): void;
				setParcelableData(arg1: android.os.IParcelable): void;
				getParcelableData(): android.os.IParcelable;
				isPassword(): boolean;
				setMaxScrollX(arg1: number): void;
				setBeforeText(arg1: java.lang.ICharSequence): void;
				setBeforeText(arg1: string): void;
				getMaxScrollX(): number;
				setClassName(arg1: java.lang.ICharSequence): void;
				setClassName(arg1: string): void;
				getMaxScrollY(): number;
				setPassword(arg1: boolean): void;
				isFullScreen(): boolean;
				isScrollable(): boolean;
				setItemCount(arg1: number): void;
				setFromIndex(arg1: number): void;
				setToIndex(arg1: number): void;
				setMaxScrollY(arg1: number): void;
				setFullScreen(arg1: boolean): void;
				getAddedCount(): number;
				setAddedCount(arg1: number): void;
				getWindowId(): number;
				setScrollable(arg1: boolean): void;
				getBeforeText(): java.lang.ICharSequence;
				toString(): string;
				getClassName(): java.lang.ICharSequence;
				isEnabled(): boolean;
				getSource(): android.view.accessibility.AccessibilityNodeInfo;
				setEnabled(arg1: boolean): void;
				getText(): java.util.IList<java.lang.ICharSequence>;
				setSource(arg1: android.view.View): void;
				setSource(arg1: android.view.View, arg2: number): void;
				getItemCount(): number;
				getFromIndex(): number;
				getToIndex(): number;
			}
			export class AccessibilityNodeInfo extends java.lang.Object implements android.os.IParcelable {
				static ACTION_FOCUS: number;
				static ACTION_CLEAR_FOCUS: number;
				static ACTION_SELECT: number;
				static ACTION_CLEAR_SELECTION: number;
				static ACTION_CLICK: number;
				static ACTION_LONG_CLICK: number;
				static ACTION_ACCESSIBILITY_FOCUS: number;
				static ACTION_CLEAR_ACCESSIBILITY_FOCUS: number;
				static ACTION_NEXT_AT_MOVEMENT_GRANULARITY: number;
				static ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY: number;
				static ACTION_NEXT_HTML_ELEMENT: number;
				static ACTION_PREVIOUS_HTML_ELEMENT: number;
				static ACTION_SCROLL_FORWARD: number;
				static ACTION_SCROLL_BACKWARD: number;
				static ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT: java.lang.String;
				static ACTION_ARGUMENT_HTML_ELEMENT_STRING: java.lang.String;
				static FOCUS_INPUT: number;
				static FOCUS_ACCESSIBILITY: number;
				static MOVEMENT_GRANULARITY_CHARACTER: number;
				static MOVEMENT_GRANULARITY_WORD: number;
				static MOVEMENT_GRANULARITY_LINE: number;
				static MOVEMENT_GRANULARITY_PARAGRAPH: number;
				static MOVEMENT_GRANULARITY_PAGE: number;
				static CREATOR: android.os.Parcelable.ICreator<android.view.accessibility.AccessibilityNodeInfo>;
				static class: java.lang.Class<android.view.accessibility.AccessibilityNodeInfo>;
				ClassName: java.lang.ICharSequence;
				MovementGranularities: number;
				Text: java.lang.ICharSequence;
				PackageName: java.lang.ICharSequence;
				ContentDescription: java.lang.ICharSequence;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				setClickable(arg1: boolean): void;
				isClickable(): boolean;
				focusSearch(arg1: number): android.view.accessibility.AccessibilityNodeInfo;
				findFocus(arg1: number): android.view.accessibility.AccessibilityNodeInfo;
				getContentDescription(): java.lang.ICharSequence;
				setContentDescription(arg1: java.lang.ICharSequence): void;
				setContentDescription(arg1: string): void;
				setLongClickable(arg1: boolean): void;
				isLongClickable(): boolean;
				isChecked(): boolean;
				setChecked(arg1: boolean): void;
				static obtain(arg1: android.view.View): android.view.accessibility.AccessibilityNodeInfo;
				static obtain(arg1: android.view.accessibility.AccessibilityNodeInfo): android.view.accessibility.AccessibilityNodeInfo;
				static obtain(arg1: android.view.View, arg2: number): android.view.accessibility.AccessibilityNodeInfo;
				static obtain(): android.view.accessibility.AccessibilityNodeInfo;
				recycle(): void;
				setCheckable(arg1: boolean): void;
				isCheckable(): boolean;
				getBoundsInScreen(arg1: android.graphics.Rect): void;
				getBoundsInParent(arg1: android.graphics.Rect): void;
				setBoundsInScreen(arg1: android.graphics.Rect): void;
				setVisibleToUser(arg1: boolean): void;
				setPackageName(arg1: java.lang.ICharSequence): void;
				setPackageName(arg1: string): void;
				setBoundsInParent(arg1: android.graphics.Rect): void;
				isVisibleToUser(): boolean;
				getMovementGranularities(): number;
				setAccessibilityFocused(arg1: boolean): void;
				setMovementGranularities(arg1: number): void;
				isAccessibilityFocused(): boolean;
				findAccessibilityNodeInfosByText(arg1: java.lang.String): java.util.IList<android.view.accessibility.AccessibilityNodeInfo>;
				findAccessibilityNodeInfosByText(arg1: string): java.util.IList<android.view.accessibility.AccessibilityNodeInfo>;
				isPassword(): boolean;
				setClassName(arg1: java.lang.ICharSequence): void;
				setClassName(arg1: string): void;
				setPassword(arg1: boolean): void;
				isScrollable(): boolean;
				getWindowId(): number;
				setScrollable(arg1: boolean): void;
				performAction(arg1: number): boolean;
				performAction(arg1: number, arg2: android.os.Bundle): boolean;
				setLabeledBy(arg1: android.view.View): void;
				setLabeledBy(arg1: android.view.View, arg2: number): void;
				addAction(arg1: number): void;
				setFocused(arg1: boolean): void;
				getLabeledBy(): android.view.accessibility.AccessibilityNodeInfo;
				addChild(arg1: android.view.View): void;
				addChild(arg1: android.view.View, arg2: number): void;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getParent(): android.view.accessibility.AccessibilityNodeInfo;
				getActions(): number;
				getClassName(): java.lang.ICharSequence;
				setParent(arg1: android.view.View): void;
				setParent(arg1: android.view.View, arg2: number): void;
				getPackageName(): java.lang.ICharSequence;
				isFocused(): boolean;
				isEnabled(): boolean;
				isFocusable(): boolean;
				setEnabled(arg1: boolean): void;
				setFocusable(arg1: boolean): void;
				getText(): java.lang.ICharSequence;
				setText(arg1: java.lang.ICharSequence): void;
				setText(arg1: string): void;
				setSource(arg1: android.view.View): void;
				setSource(arg1: android.view.View, arg2: number): void;
				getChild(arg1: number): android.view.accessibility.AccessibilityNodeInfo;
				getLabelFor(): android.view.accessibility.AccessibilityNodeInfo;
				setLabelFor(arg1: android.view.View, arg2: number): void;
				setLabelFor(arg1: android.view.View): void;
				isSelected(): boolean;
				setSelected(arg1: boolean): void;
				getChildCount(): number;
			}
			export class AccessibilityNodeProvider extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.view.accessibility.AccessibilityNodeProvider>;
				createAccessibilityNodeInfo(arg1: number): android.view.accessibility.AccessibilityNodeInfo;
				findAccessibilityNodeInfosByText(arg1: java.lang.String, arg2: number): java.util.IList<android.view.accessibility.AccessibilityNodeInfo>;
				findAccessibilityNodeInfosByText(arg1: string, arg2: number): java.util.IList<android.view.accessibility.AccessibilityNodeInfo>;
				performAction(arg1: number, arg2: number, arg3: android.os.Bundle): boolean;
			}
			export class AccessibilityEventSource implements android.view.accessibility.IAccessibilityEventSource {
				constructor(implementation: android.view.accessibility.IAccessibilityEventSource);
				sendAccessibilityEventUnchecked(arg1: android.view.accessibility.AccessibilityEvent): void;
				sendAccessibilityEvent(arg1: number): void;
			}
			export interface IAccessibilityEventSource {
				sendAccessibilityEventUnchecked(arg1: android.view.accessibility.AccessibilityEvent): void;
				sendAccessibilityEvent(arg1: number): void;
			}
		}
		export class MotionEvent extends android.view.InputEvent implements android.os.IParcelable {
			static INVALID_POINTER_ID: number;
			static ACTION_MASK: number;
			static ACTION_DOWN: number;
			static ACTION_UP: number;
			static ACTION_MOVE: number;
			static ACTION_CANCEL: number;
			static ACTION_OUTSIDE: number;
			static ACTION_POINTER_DOWN: number;
			static ACTION_POINTER_UP: number;
			static ACTION_HOVER_MOVE: number;
			static ACTION_SCROLL: number;
			static ACTION_HOVER_ENTER: number;
			static ACTION_HOVER_EXIT: number;
			static ACTION_POINTER_INDEX_MASK: number;
			static ACTION_POINTER_INDEX_SHIFT: number;
			static ACTION_POINTER_1_DOWN: number;
			static ACTION_POINTER_2_DOWN: number;
			static ACTION_POINTER_3_DOWN: number;
			static ACTION_POINTER_1_UP: number;
			static ACTION_POINTER_2_UP: number;
			static ACTION_POINTER_3_UP: number;
			static ACTION_POINTER_ID_MASK: number;
			static ACTION_POINTER_ID_SHIFT: number;
			static FLAG_WINDOW_IS_OBSCURED: number;
			static EDGE_TOP: number;
			static EDGE_BOTTOM: number;
			static EDGE_LEFT: number;
			static EDGE_RIGHT: number;
			static AXIS_X: number;
			static AXIS_Y: number;
			static AXIS_PRESSURE: number;
			static AXIS_SIZE: number;
			static AXIS_TOUCH_MAJOR: number;
			static AXIS_TOUCH_MINOR: number;
			static AXIS_TOOL_MAJOR: number;
			static AXIS_TOOL_MINOR: number;
			static AXIS_ORIENTATION: number;
			static AXIS_VSCROLL: number;
			static AXIS_HSCROLL: number;
			static AXIS_Z: number;
			static AXIS_RX: number;
			static AXIS_RY: number;
			static AXIS_RZ: number;
			static AXIS_HAT_X: number;
			static AXIS_HAT_Y: number;
			static AXIS_LTRIGGER: number;
			static AXIS_RTRIGGER: number;
			static AXIS_THROTTLE: number;
			static AXIS_RUDDER: number;
			static AXIS_WHEEL: number;
			static AXIS_GAS: number;
			static AXIS_BRAKE: number;
			static AXIS_DISTANCE: number;
			static AXIS_TILT: number;
			static AXIS_GENERIC_1: number;
			static AXIS_GENERIC_2: number;
			static AXIS_GENERIC_3: number;
			static AXIS_GENERIC_4: number;
			static AXIS_GENERIC_5: number;
			static AXIS_GENERIC_6: number;
			static AXIS_GENERIC_7: number;
			static AXIS_GENERIC_8: number;
			static AXIS_GENERIC_9: number;
			static AXIS_GENERIC_10: number;
			static AXIS_GENERIC_11: number;
			static AXIS_GENERIC_12: number;
			static AXIS_GENERIC_13: number;
			static AXIS_GENERIC_14: number;
			static AXIS_GENERIC_15: number;
			static AXIS_GENERIC_16: number;
			static BUTTON_PRIMARY: number;
			static BUTTON_SECONDARY: number;
			static BUTTON_TERTIARY: number;
			static BUTTON_BACK: number;
			static BUTTON_FORWARD: number;
			static TOOL_TYPE_UNKNOWN: number;
			static TOOL_TYPE_FINGER: number;
			static TOOL_TYPE_STYLUS: number;
			static TOOL_TYPE_MOUSE: number;
			static TOOL_TYPE_ERASER: number;
			static CREATOR: android.os.Parcelable.ICreator<android.view.MotionEvent>;
			static class: java.lang.Class<android.view.MotionEvent>;
			Action: number;
			EdgeFlags: number;
			Source: number;
			addBatch(arg1: native.Long, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: number): void;
			addBatch(arg1: native.Long, arg2: native.Array<android.view.MotionEvent.PointerCoords>, arg3: number): void;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			getEventTime(): any;
			getDeviceId(): number;
			getDownTime(): any;
			getMetaState(): number;
			static obtain(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number, arg5: native.Float, arg6: native.Float, arg7: native.Float, arg8: native.Float, arg9: number, arg10: native.Float, arg11: native.Float, arg12: number, arg13: number): android.view.MotionEvent;
			static obtain(arg1: native.Long, arg2: native.Long, arg3: number, arg4: native.Float, arg5: native.Float, arg6: native.Float, arg7: native.Float, arg8: number, arg9: native.Float, arg10: native.Float, arg11: number, arg12: number): android.view.MotionEvent;
			static obtain(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number, arg5: native.Array<android.view.MotionEvent.PointerProperties>, arg6: native.Array<android.view.MotionEvent.PointerCoords>, arg7: number, arg8: number, arg9: native.Float, arg10: native.Float, arg11: number, arg12: number, arg13: number, arg14: number): android.view.MotionEvent;
			static obtain(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number, arg5: native.Array<number>, arg6: native.Array<android.view.MotionEvent.PointerCoords>, arg7: number, arg8: native.Float, arg9: native.Float, arg10: number, arg11: number, arg12: number, arg13: number): android.view.MotionEvent;
			static obtain(arg1: native.Long, arg2: native.Long, arg3: number, arg4: native.Float, arg5: native.Float, arg6: number): android.view.MotionEvent;
			static obtain(arg1: android.view.MotionEvent): android.view.MotionEvent;
			setEdgeFlags(arg1: number): void;
			recycle(): void;
			getRawY(): number;
			static axisToString(arg1: number): string;
			getToolMajor(arg1: number): number;
			getToolMajor(): number;
			getYPrecision(): number;
			getPressure(arg1: number): number;
			getPressure(): number;
			getPointerId(arg1: number): number;
			getToolType(arg1: number): number;
			getAxisValue(arg1: number): number;
			getAxisValue(arg1: number, arg2: number): number;
			getRawX(): number;
			getTouchMajor(): number;
			getTouchMajor(arg1: number): number;
			getToolMinor(): number;
			getToolMinor(arg1: number): number;
			getXPrecision(): number;
			getEdgeFlags(): number;
			getTouchMinor(arg1: number): number;
			getTouchMinor(): number;
			getPointerProperties(arg1: number, arg2: android.view.MotionEvent.PointerProperties): void;
			getActionIndex(): number;
			getHistoricalPressure(arg1: number, arg2: number): number;
			getHistoricalPressure(arg1: number): number;
			getHistoricalSize(arg1: number, arg2: number): number;
			getHistoricalSize(arg1: number): number;
			offsetLocation(arg1: native.Float, arg2: native.Float): void;
			static obtainNoHistory(arg1: android.view.MotionEvent): android.view.MotionEvent;
			getButtonState(): number;
			getActionMasked(): number;
			getHistorySize(): number;
			getHistoricalX(arg1: number): number;
			getHistoricalX(arg1: number, arg2: number): number;
			getHistoricalY(arg1: number): number;
			getHistoricalY(arg1: number, arg2: number): number;
			static axisFromString(arg1: java.lang.String): number;
			static axisFromString(arg1: string): number;
			findPointerIndex(arg1: number): number;
			getPointerCount(): number;
			getPointerCoords(arg1: number, arg2: android.view.MotionEvent.PointerCoords): void;
			getHistoricalTouchMajor(arg1: number): number;
			getHistoricalTouchMajor(arg1: number, arg2: number): number;
			getHistoricalEventTime(arg1: number): any;
			getHistoricalToolMajor(arg1: number): number;
			getHistoricalToolMajor(arg1: number, arg2: number): number;
			getHistoricalTouchMinor(arg1: number): number;
			getHistoricalTouchMinor(arg1: number, arg2: number): number;
			getHistoricalOrientation(arg1: number, arg2: number): number;
			getHistoricalOrientation(arg1: number): number;
			getHistoricalPointerCoords(arg1: number, arg2: number, arg3: android.view.MotionEvent.PointerCoords): void;
			getHistoricalAxisValue(arg1: number, arg2: number, arg3: number): number;
			getHistoricalAxisValue(arg1: number, arg2: number): number;
			getHistoricalToolMinor(arg1: number, arg2: number): number;
			getHistoricalToolMinor(arg1: number): number;
			toString(): string;
			transform(arg1: android.graphics.Matrix): void;
			getSize(arg1: number): number;
			getSize(): number;
			getOrientation(): number;
			getOrientation(arg1: number): number;
			getX(arg1: number): number;
			getX(): number;
			getY(): number;
			getY(arg1: number): number;
			setLocation(arg1: native.Float, arg2: native.Float): void;
			getSource(): number;
			setSource(arg1: number): void;
			getFlags(): number;
			getAction(): number;
			setAction(arg1: number): void;
			describeContents(): number;
		}
		export module MotionEvent {
			export class PointerCoords extends java.lang.Object {
				constructor(arg1: android.view.MotionEvent.PointerCoords);
				constructor();
				x: native.Float;
				y: native.Float;
				pressure: native.Float;
				size: native.Float;
				touchMajor: native.Float;
				touchMinor: native.Float;
				toolMajor: native.Float;
				toolMinor: native.Float;
				orientation: native.Float;
				static class: java.lang.Class<android.view.MotionEvent.PointerCoords>;
				copyFrom(arg1: android.view.MotionEvent.PointerCoords): void;
				getAxisValue(arg1: number): number;
				setAxisValue(arg1: number, arg2: native.Float): void;
				clear(): void;
			}
			export class PointerProperties extends java.lang.Object {
				constructor();
				constructor(arg1: android.view.MotionEvent.PointerProperties);
				id: number;
				toolType: number;
				static class: java.lang.Class<android.view.MotionEvent.PointerProperties>;
				copyFrom(arg1: android.view.MotionEvent.PointerProperties): void;
				hashCode(): number;
				equals(arg1: any): boolean;
				clear(): void;
			}
		}
		export interface IMenu {
			hasVisibleItems(): boolean;
			addIntentOptions(arg1: number, arg2: number, arg3: number, arg4: android.content.ComponentName, arg5: native.Array<android.content.Intent>, arg6: android.content.Intent, arg7: number, arg8: native.Array<android.view.IMenuItem>): number;
			setGroupEnabled(arg1: number, arg2: boolean): void;
			setGroupVisible(arg1: number, arg2: boolean): void;
			performShortcut(arg1: number, arg2: android.view.KeyEvent, arg3: number): boolean;
			setGroupCheckable(arg1: number, arg2: boolean, arg3: boolean): void;
			performIdentifierAction(arg1: number, arg2: number): boolean;
			removeGroup(arg1: number): void;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: number): android.view.ISubMenu;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: string): android.view.ISubMenu;
			addSubMenu(arg1: number): android.view.ISubMenu;
			addSubMenu(arg1: string): android.view.ISubMenu;
			findItem(arg1: number): android.view.IMenuItem;
			isShortcutKey(arg1: number, arg2: android.view.KeyEvent): boolean;
			setQwertyMode(arg1: boolean): void;
			add(arg1: string): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: number): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: string): android.view.IMenuItem;
			add(arg1: number): android.view.IMenuItem;
			size(): number;
			clear(): void;
			close(): void;
			getItem(arg1: number): android.view.IMenuItem;
			removeItem(arg1: number): void;
		}
		export module IMenu {
			var NONE: number;
			var FIRST: number;
			var CATEGORY_CONTAINER: number;
			var CATEGORY_SYSTEM: number;
			var CATEGORY_SECONDARY: number;
			var CATEGORY_ALTERNATIVE: number;
			var FLAG_APPEND_TO_GROUP: number;
			var FLAG_PERFORM_NO_CLOSE: number;
			var FLAG_ALWAYS_PERFORM_CLOSE: number;
		}
		export class ViewStub extends android.view.View {
			constructor(arg1: android.content.Context, arg2: number);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.view.ViewStub>;
			LayoutInflater: android.view.LayoutInflater;
			LayoutResource: number;
			InflatedId: number;
			setVisibility(arg1: number): void;
			getLayoutResource(): number;
			getLayoutInflater(): android.view.LayoutInflater;
			setLayoutInflater(arg1: android.view.LayoutInflater): void;
			setLayoutResource(arg1: number): void;
			setOnInflateListener(arg1: android.view.ViewStub.IOnInflateListener): void;
			getInflatedId(): number;
			setInflatedId(arg1: number): void;
			draw(arg1: android.graphics.Canvas): void;
			inflate(): android.view.View;
			static inflate(arg1: android.content.Context, arg2: number, arg3: android.view.ViewGroup): android.view.View;
		}
		export module ViewStub {
			export class OnInflateListener implements android.view.ViewStub.IOnInflateListener {
				constructor(implementation: android.view.ViewStub.IOnInflateListener);
				onInflate(arg1: android.view.ViewStub, arg2: android.view.View): void;
			}
			export interface IOnInflateListener {
				onInflate(arg1: android.view.ViewStub, arg2: android.view.View): void;
			}
		}
		export class KeyEvent extends android.view.InputEvent implements android.os.IParcelable {
			constructor(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number);
			constructor(arg1: android.view.KeyEvent);
			constructor(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number);
			constructor(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number);
			constructor(arg1: android.view.KeyEvent, arg2: native.Long, arg3: number);
			constructor(arg1: native.Long, arg2: java.lang.String, arg3: number, arg4: number);
			constructor(arg1: native.Long, arg2: string, arg3: number, arg4: number);
			constructor(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number, arg5: number);
			constructor(arg1: number, arg2: number);
			constructor(arg1: native.Long, arg2: native.Long, arg3: number, arg4: number, arg5: number, arg6: number);
			static KEYCODE_UNKNOWN: number;
			static KEYCODE_SOFT_LEFT: number;
			static KEYCODE_SOFT_RIGHT: number;
			static KEYCODE_HOME: number;
			static KEYCODE_BACK: number;
			static KEYCODE_CALL: number;
			static KEYCODE_ENDCALL: number;
			static KEYCODE_0: number;
			static KEYCODE_1: number;
			static KEYCODE_2: number;
			static KEYCODE_3: number;
			static KEYCODE_4: number;
			static KEYCODE_5: number;
			static KEYCODE_6: number;
			static KEYCODE_7: number;
			static KEYCODE_8: number;
			static KEYCODE_9: number;
			static KEYCODE_STAR: number;
			static KEYCODE_POUND: number;
			static KEYCODE_DPAD_UP: number;
			static KEYCODE_DPAD_DOWN: number;
			static KEYCODE_DPAD_LEFT: number;
			static KEYCODE_DPAD_RIGHT: number;
			static KEYCODE_DPAD_CENTER: number;
			static KEYCODE_VOLUME_UP: number;
			static KEYCODE_VOLUME_DOWN: number;
			static KEYCODE_POWER: number;
			static KEYCODE_CAMERA: number;
			static KEYCODE_CLEAR: number;
			static KEYCODE_A: number;
			static KEYCODE_B: number;
			static KEYCODE_C: number;
			static KEYCODE_D: number;
			static KEYCODE_E: number;
			static KEYCODE_F: number;
			static KEYCODE_G: number;
			static KEYCODE_H: number;
			static KEYCODE_I: number;
			static KEYCODE_J: number;
			static KEYCODE_K: number;
			static KEYCODE_L: number;
			static KEYCODE_M: number;
			static KEYCODE_N: number;
			static KEYCODE_O: number;
			static KEYCODE_P: number;
			static KEYCODE_Q: number;
			static KEYCODE_R: number;
			static KEYCODE_S: number;
			static KEYCODE_T: number;
			static KEYCODE_U: number;
			static KEYCODE_V: number;
			static KEYCODE_W: number;
			static KEYCODE_X: number;
			static KEYCODE_Y: number;
			static KEYCODE_Z: number;
			static KEYCODE_COMMA: number;
			static KEYCODE_PERIOD: number;
			static KEYCODE_ALT_LEFT: number;
			static KEYCODE_ALT_RIGHT: number;
			static KEYCODE_SHIFT_LEFT: number;
			static KEYCODE_SHIFT_RIGHT: number;
			static KEYCODE_TAB: number;
			static KEYCODE_SPACE: number;
			static KEYCODE_SYM: number;
			static KEYCODE_EXPLORER: number;
			static KEYCODE_ENVELOPE: number;
			static KEYCODE_ENTER: number;
			static KEYCODE_DEL: number;
			static KEYCODE_GRAVE: number;
			static KEYCODE_MINUS: number;
			static KEYCODE_EQUALS: number;
			static KEYCODE_LEFT_BRACKET: number;
			static KEYCODE_RIGHT_BRACKET: number;
			static KEYCODE_BACKSLASH: number;
			static KEYCODE_SEMICOLON: number;
			static KEYCODE_APOSTROPHE: number;
			static KEYCODE_SLASH: number;
			static KEYCODE_AT: number;
			static KEYCODE_NUM: number;
			static KEYCODE_HEADSETHOOK: number;
			static KEYCODE_FOCUS: number;
			static KEYCODE_PLUS: number;
			static KEYCODE_MENU: number;
			static KEYCODE_NOTIFICATION: number;
			static KEYCODE_SEARCH: number;
			static KEYCODE_MEDIA_PLAY_PAUSE: number;
			static KEYCODE_MEDIA_STOP: number;
			static KEYCODE_MEDIA_NEXT: number;
			static KEYCODE_MEDIA_PREVIOUS: number;
			static KEYCODE_MEDIA_REWIND: number;
			static KEYCODE_MEDIA_FAST_FORWARD: number;
			static KEYCODE_MUTE: number;
			static KEYCODE_PAGE_UP: number;
			static KEYCODE_PAGE_DOWN: number;
			static KEYCODE_PICTSYMBOLS: number;
			static KEYCODE_SWITCH_CHARSET: number;
			static KEYCODE_BUTTON_A: number;
			static KEYCODE_BUTTON_B: number;
			static KEYCODE_BUTTON_C: number;
			static KEYCODE_BUTTON_X: number;
			static KEYCODE_BUTTON_Y: number;
			static KEYCODE_BUTTON_Z: number;
			static KEYCODE_BUTTON_L1: number;
			static KEYCODE_BUTTON_R1: number;
			static KEYCODE_BUTTON_L2: number;
			static KEYCODE_BUTTON_R2: number;
			static KEYCODE_BUTTON_THUMBL: number;
			static KEYCODE_BUTTON_THUMBR: number;
			static KEYCODE_BUTTON_START: number;
			static KEYCODE_BUTTON_SELECT: number;
			static KEYCODE_BUTTON_MODE: number;
			static KEYCODE_ESCAPE: number;
			static KEYCODE_FORWARD_DEL: number;
			static KEYCODE_CTRL_LEFT: number;
			static KEYCODE_CTRL_RIGHT: number;
			static KEYCODE_CAPS_LOCK: number;
			static KEYCODE_SCROLL_LOCK: number;
			static KEYCODE_META_LEFT: number;
			static KEYCODE_META_RIGHT: number;
			static KEYCODE_FUNCTION: number;
			static KEYCODE_SYSRQ: number;
			static KEYCODE_BREAK: number;
			static KEYCODE_MOVE_HOME: number;
			static KEYCODE_MOVE_END: number;
			static KEYCODE_INSERT: number;
			static KEYCODE_FORWARD: number;
			static KEYCODE_MEDIA_PLAY: number;
			static KEYCODE_MEDIA_PAUSE: number;
			static KEYCODE_MEDIA_CLOSE: number;
			static KEYCODE_MEDIA_EJECT: number;
			static KEYCODE_MEDIA_RECORD: number;
			static KEYCODE_F1: number;
			static KEYCODE_F2: number;
			static KEYCODE_F3: number;
			static KEYCODE_F4: number;
			static KEYCODE_F5: number;
			static KEYCODE_F6: number;
			static KEYCODE_F7: number;
			static KEYCODE_F8: number;
			static KEYCODE_F9: number;
			static KEYCODE_F10: number;
			static KEYCODE_F11: number;
			static KEYCODE_F12: number;
			static KEYCODE_NUM_LOCK: number;
			static KEYCODE_NUMPAD_0: number;
			static KEYCODE_NUMPAD_1: number;
			static KEYCODE_NUMPAD_2: number;
			static KEYCODE_NUMPAD_3: number;
			static KEYCODE_NUMPAD_4: number;
			static KEYCODE_NUMPAD_5: number;
			static KEYCODE_NUMPAD_6: number;
			static KEYCODE_NUMPAD_7: number;
			static KEYCODE_NUMPAD_8: number;
			static KEYCODE_NUMPAD_9: number;
			static KEYCODE_NUMPAD_DIVIDE: number;
			static KEYCODE_NUMPAD_MULTIPLY: number;
			static KEYCODE_NUMPAD_SUBTRACT: number;
			static KEYCODE_NUMPAD_ADD: number;
			static KEYCODE_NUMPAD_DOT: number;
			static KEYCODE_NUMPAD_COMMA: number;
			static KEYCODE_NUMPAD_ENTER: number;
			static KEYCODE_NUMPAD_EQUALS: number;
			static KEYCODE_NUMPAD_LEFT_PAREN: number;
			static KEYCODE_NUMPAD_RIGHT_PAREN: number;
			static KEYCODE_VOLUME_MUTE: number;
			static KEYCODE_INFO: number;
			static KEYCODE_CHANNEL_UP: number;
			static KEYCODE_CHANNEL_DOWN: number;
			static KEYCODE_ZOOM_IN: number;
			static KEYCODE_ZOOM_OUT: number;
			static KEYCODE_TV: number;
			static KEYCODE_WINDOW: number;
			static KEYCODE_GUIDE: number;
			static KEYCODE_DVR: number;
			static KEYCODE_BOOKMARK: number;
			static KEYCODE_CAPTIONS: number;
			static KEYCODE_SETTINGS: number;
			static KEYCODE_TV_POWER: number;
			static KEYCODE_TV_INPUT: number;
			static KEYCODE_STB_POWER: number;
			static KEYCODE_STB_INPUT: number;
			static KEYCODE_AVR_POWER: number;
			static KEYCODE_AVR_INPUT: number;
			static KEYCODE_PROG_RED: number;
			static KEYCODE_PROG_GREEN: number;
			static KEYCODE_PROG_YELLOW: number;
			static KEYCODE_PROG_BLUE: number;
			static KEYCODE_APP_SWITCH: number;
			static KEYCODE_BUTTON_1: number;
			static KEYCODE_BUTTON_2: number;
			static KEYCODE_BUTTON_3: number;
			static KEYCODE_BUTTON_4: number;
			static KEYCODE_BUTTON_5: number;
			static KEYCODE_BUTTON_6: number;
			static KEYCODE_BUTTON_7: number;
			static KEYCODE_BUTTON_8: number;
			static KEYCODE_BUTTON_9: number;
			static KEYCODE_BUTTON_10: number;
			static KEYCODE_BUTTON_11: number;
			static KEYCODE_BUTTON_12: number;
			static KEYCODE_BUTTON_13: number;
			static KEYCODE_BUTTON_14: number;
			static KEYCODE_BUTTON_15: number;
			static KEYCODE_BUTTON_16: number;
			static KEYCODE_LANGUAGE_SWITCH: number;
			static KEYCODE_MANNER_MODE: number;
			static KEYCODE_3D_MODE: number;
			static KEYCODE_CONTACTS: number;
			static KEYCODE_CALENDAR: number;
			static KEYCODE_MUSIC: number;
			static KEYCODE_CALCULATOR: number;
			static KEYCODE_ZENKAKU_HANKAKU: number;
			static KEYCODE_EISU: number;
			static KEYCODE_MUHENKAN: number;
			static KEYCODE_HENKAN: number;
			static KEYCODE_KATAKANA_HIRAGANA: number;
			static KEYCODE_YEN: number;
			static KEYCODE_RO: number;
			static KEYCODE_KANA: number;
			static KEYCODE_ASSIST: number;
			static MAX_KEYCODE: number;
			static ACTION_DOWN: number;
			static ACTION_UP: number;
			static ACTION_MULTIPLE: number;
			static META_ALT_ON: number;
			static META_ALT_LEFT_ON: number;
			static META_ALT_RIGHT_ON: number;
			static META_SHIFT_ON: number;
			static META_SHIFT_LEFT_ON: number;
			static META_SHIFT_RIGHT_ON: number;
			static META_SYM_ON: number;
			static META_FUNCTION_ON: number;
			static META_CTRL_ON: number;
			static META_CTRL_LEFT_ON: number;
			static META_CTRL_RIGHT_ON: number;
			static META_META_ON: number;
			static META_META_LEFT_ON: number;
			static META_META_RIGHT_ON: number;
			static META_CAPS_LOCK_ON: number;
			static META_NUM_LOCK_ON: number;
			static META_SCROLL_LOCK_ON: number;
			static META_SHIFT_MASK: number;
			static META_ALT_MASK: number;
			static META_CTRL_MASK: number;
			static META_META_MASK: number;
			static FLAG_WOKE_HERE: number;
			static FLAG_SOFT_KEYBOARD: number;
			static FLAG_KEEP_TOUCH_MODE: number;
			static FLAG_FROM_SYSTEM: number;
			static FLAG_EDITOR_ACTION: number;
			static FLAG_CANCELED: number;
			static FLAG_VIRTUAL_HARD_KEY: number;
			static FLAG_LONG_PRESS: number;
			static FLAG_CANCELED_LONG_PRESS: number;
			static FLAG_TRACKING: number;
			static FLAG_FALLBACK: number;
			static CREATOR: android.os.Parcelable.ICreator<android.view.KeyEvent>;
			static class: java.lang.Class<android.view.KeyEvent>;
			Source: number;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			getEventTime(): any;
			isLongPress(): boolean;
			isCtrlPressed(): boolean;
			getScanCode(): number;
			isMetaPressed(): boolean;
			isTracking(): boolean;
			isCapsLockOn(): boolean;
			getDeviceId(): number;
			isAltPressed(): boolean;
			hasModifiers(arg1: number): boolean;
			isNumLockOn(): boolean;
			getCharacters(): string;
			getDownTime(): any;
			static isModifierKey(arg1: number): boolean;
			getMetaState(): number;
			startTracking(): void;
			isSymPressed(): boolean;
			isCanceled(): boolean;
			getKeyData(arg1: android.view.KeyCharacterMap.KeyData): boolean;
			isPrintingKey(): boolean;
			static getDeadChar(arg1: number, arg2: number): number;
			getMatch(arg1: native.Array<string>, arg2: number): string;
			getMatch(arg1: native.Array<string>): string;
			static getMaxKeyCode(): number;
			static changeAction(arg1: android.view.KeyEvent, arg2: number): android.view.KeyEvent;
			isSystem(): boolean;
			getDisplayLabel(): string;
			isShiftPressed(): boolean;
			static keyCodeFromString(arg1: java.lang.String): number;
			static keyCodeFromString(arg1: string): number;
			getUnicodeChar(arg1: number): number;
			getUnicodeChar(): number;
			static changeTimeRepeat(arg1: android.view.KeyEvent, arg2: native.Long, arg3: number, arg4: number): android.view.KeyEvent;
			static changeTimeRepeat(arg1: android.view.KeyEvent, arg2: native.Long, arg3: number): android.view.KeyEvent;
			getKeyCharacterMap(): android.view.KeyCharacterMap;
			static normalizeMetaState(arg1: number): number;
			getRepeatCount(): number;
			static keyCodeToString(arg1: number): string;
			static isGamepadButton(arg1: number): boolean;
			static metaStateHasModifiers(arg1: number, arg2: number): boolean;
			hasNoModifiers(): boolean;
			isScrollLockOn(): boolean;
			isFunctionPressed(): boolean;
			static metaStateHasNoModifiers(arg1: number): boolean;
			static getModifierMetaStateMask(): number;
			toString(): string;
			getModifiers(): number;
			getNumber(): string;
			dispatch(arg1: android.view.KeyEvent.ICallback): boolean;
			dispatch(arg1: android.view.KeyEvent.ICallback, arg2: android.view.KeyEvent.DispatcherState, arg3: any): boolean;
			getKeyCode(): number;
			getSource(): number;
			setSource(arg1: number): void;
			getFlags(): number;
			static changeFlags(arg1: android.view.KeyEvent, arg2: number): android.view.KeyEvent;
			getAction(): number;
			describeContents(): number;
		}
		export module KeyEvent {
			export interface ICallback {
				onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
				onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
				onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
				onKeyLongPress(arg1: number, arg2: android.view.KeyEvent): boolean;
			}
			export class DispatcherState extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.view.KeyEvent.DispatcherState>;
				isTracking(arg1: android.view.KeyEvent): boolean;
				startTracking(arg1: android.view.KeyEvent, arg2: any): void;
				performedLongPress(arg1: android.view.KeyEvent): void;
				handleUpEvent(arg1: android.view.KeyEvent): void;
				reset(): void;
				reset(arg1: any): void;
			}
			export class Callback implements android.view.KeyEvent.ICallback {
				constructor(implementation: android.view.KeyEvent.ICallback);
				onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
				onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
				onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
				onKeyLongPress(arg1: number, arg2: android.view.KeyEvent): boolean;
			}
		}
		export module animation {
			export interface IInterpolator extends android.animation.ITimeInterpolator {
				getInterpolation(arg1: native.Float): number;
			}
			export class Transformation extends java.lang.Object {
				constructor();
				static TYPE_IDENTITY: number;
				static TYPE_ALPHA: number;
				static TYPE_MATRIX: number;
				static TYPE_BOTH: number;
				static class: java.lang.Class<android.view.animation.Transformation>;
				TransformationType: number;
				setAlpha(arg1: native.Float): void;
				setTransformationType(arg1: number): void;
				getTransformationType(): number;
				toShortString(): string;
				toString(): string;
				clear(): void;
				set(arg1: android.view.animation.Transformation): void;
				getAlpha(): number;
				getMatrix(): android.graphics.Matrix;
				compose(arg1: android.view.animation.Transformation): void;
			}
			export class LinearInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor();
				static class: java.lang.Class<android.view.animation.LinearInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class Animation extends java.lang.Object implements java.lang.ICloneable {
				constructor();
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				static INFINITE: number;
				static RESTART: number;
				static REVERSE: number;
				static START_ON_FIRST_FRAME: number;
				static ABSOLUTE: number;
				static RELATIVE_TO_SELF: number;
				static RELATIVE_TO_PARENT: number;
				static ZORDER_NORMAL: number;
				static ZORDER_TOP: number;
				static ZORDER_BOTTOM: number;
				static class: java.lang.Class<android.view.animation.Animation>;
				DetachWallpaper: boolean;
				RepeatMode: number;
				BackgroundColor: number;
				RepeatCount: number;
				ZAdjustment: number;
				FillAfter: boolean;
				Interpolator: android.view.animation.IInterpolator;
				FillBefore: boolean;
				getDuration(): any;
				setInterpolator(arg1: android.content.Context, arg2: number): void;
				setInterpolator(arg1: android.view.animation.IInterpolator): void;
				getInterpolator(): android.view.animation.IInterpolator;
				setBackgroundColor(arg1: number): void;
				setDuration(arg1: native.Long): void;
				setStartOffset(arg1: native.Long): void;
				willChangeBounds(): boolean;
				scaleCurrentDuration(arg1: native.Float): void;
				setFillEnabled(arg1: boolean): void;
				setRepeatCount(arg1: number): void;
				setDetachWallpaper(arg1: boolean): void;
				computeDurationHint(): any;
				setAnimationListener(arg1: android.view.animation.Animation.IAnimationListener): void;
				setZAdjustment(arg1: number): void;
				getDetachWallpaper(): boolean;
				getBackgroundColor(): number;
				getZAdjustment(): number;
				restrictDuration(arg1: native.Long): void;
				getTransformation(arg1: native.Long, arg2: android.view.animation.Transformation): boolean;
				getTransformation(arg1: native.Long, arg2: android.view.animation.Transformation, arg3: native.Float): boolean;
				getRepeatCount(): number;
				willChangeTransformationMatrix(): boolean;
				startNow(): void;
				isInitialized(): boolean;
				isFillEnabled(): boolean;
				setFillBefore(arg1: boolean): void;
				setRepeatMode(arg1: number): void;
				setFillAfter(arg1: boolean): void;
				hasEnded(): boolean;
				getFillAfter(): boolean;
				getFillBefore(): boolean;
				hasStarted(): boolean;
				getRepeatMode(): number;
				start(): void;
				reset(): void;
				initialize(arg1: number, arg2: number, arg3: number, arg4: number): void;
				getStartTime(): any;
				setStartTime(arg1: native.Long): void;
				cancel(): void;
				getStartOffset(): any;
			}
			export module Animation {
				export class AnimationListener implements android.view.animation.Animation.IAnimationListener {
					constructor(implementation: android.view.animation.Animation.IAnimationListener);
					onAnimationEnd(arg1: android.view.animation.Animation): void;
					onAnimationStart(arg1: android.view.animation.Animation): void;
					onAnimationRepeat(arg1: android.view.animation.Animation): void;
				}
				export class Description extends java.lang.Object {
					type: number;
					value: native.Float;
					static class: java.lang.Class<android.view.animation.Animation.Description>;
				}
				export interface IAnimationListener {
					onAnimationEnd(arg1: android.view.animation.Animation): void;
					onAnimationStart(arg1: android.view.animation.Animation): void;
					onAnimationRepeat(arg1: android.view.animation.Animation): void;
				}
			}
			export class AccelerateInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor();
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: native.Float);
				static class: java.lang.Class<android.view.animation.AccelerateInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class DecelerateInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor();
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: native.Float);
				static class: java.lang.Class<android.view.animation.DecelerateInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class AlphaAnimation extends android.view.animation.Animation {
				constructor(arg1: native.Float, arg2: native.Float);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				static class: java.lang.Class<android.view.animation.AlphaAnimation>;
				willChangeBounds(): boolean;
				willChangeTransformationMatrix(): boolean;
			}
			export class RotateAnimation extends android.view.animation.Animation {
				constructor(arg1: native.Float, arg2: native.Float, arg3: number, arg4: native.Float, arg5: number, arg6: native.Float);
				constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float);
				constructor(arg1: native.Float, arg2: native.Float);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				static class: java.lang.Class<android.view.animation.RotateAnimation>;
				initialize(arg1: number, arg2: number, arg3: number, arg4: number): void;
			}
			export class AnticipateOvershootInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor();
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: native.Float, arg2: native.Float);
				constructor(arg1: native.Float);
				static class: java.lang.Class<android.view.animation.AnticipateOvershootInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class OvershootInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor();
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: native.Float);
				static class: java.lang.Class<android.view.animation.OvershootInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class LayoutAnimationController extends java.lang.Object {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: android.view.animation.Animation);
				constructor(arg1: android.view.animation.Animation, arg2: native.Float);
				static ORDER_NORMAL: number;
				static ORDER_REVERSE: number;
				static ORDER_RANDOM: number;
				static class: java.lang.Class<android.view.animation.LayoutAnimationController>;
				Animation: android.view.animation.Animation;
				Order: number;
				Interpolator: android.view.animation.IInterpolator;
				getOrder(): number;
				setInterpolator(arg1: android.content.Context, arg2: number): void;
				setInterpolator(arg1: android.view.animation.IInterpolator): void;
				getInterpolator(): android.view.animation.IInterpolator;
				getAnimation(): android.view.animation.Animation;
				setAnimation(arg1: android.view.animation.Animation): void;
				setAnimation(arg1: android.content.Context, arg2: number): void;
				getAnimationForView(arg1: android.view.View): android.view.animation.Animation;
				willOverlap(): boolean;
				setOrder(arg1: number): void;
				start(): void;
				isDone(): boolean;
				getDelay(): number;
				setDelay(arg1: native.Float): void;
			}
			export module LayoutAnimationController {
				export class AnimationParameters extends java.lang.Object {
					constructor();
					count: number;
					index: number;
					static class: java.lang.Class<android.view.animation.LayoutAnimationController.AnimationParameters>;
				}
			}
			export class CycleInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: native.Float);
				static class: java.lang.Class<android.view.animation.CycleInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class GridLayoutAnimationController extends android.view.animation.LayoutAnimationController {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: android.view.animation.Animation);
				constructor(arg1: android.view.animation.Animation, arg2: native.Float, arg3: native.Float);
				static DIRECTION_LEFT_TO_RIGHT: number;
				static DIRECTION_RIGHT_TO_LEFT: number;
				static DIRECTION_TOP_TO_BOTTOM: number;
				static DIRECTION_BOTTOM_TO_TOP: number;
				static DIRECTION_HORIZONTAL_MASK: number;
				static DIRECTION_VERTICAL_MASK: number;
				static PRIORITY_NONE: number;
				static PRIORITY_COLUMN: number;
				static PRIORITY_ROW: number;
				static class: java.lang.Class<android.view.animation.GridLayoutAnimationController>;
				DirectionPriority: number;
				Direction: number;
				getColumnDelay(): number;
				setColumnDelay(arg1: native.Float): void;
				setDirectionPriority(arg1: number): void;
				getDirectionPriority(): number;
				willOverlap(): boolean;
				setRowDelay(arg1: native.Float): void;
				getRowDelay(): number;
				setDirection(arg1: number): void;
				getDirection(): number;
			}
			export module GridLayoutAnimationController {
				export class AnimationParameters extends android.view.animation.LayoutAnimationController.AnimationParameters {
					constructor();
					column: number;
					row: number;
					columnsCount: number;
					rowsCount: number;
					static class: java.lang.Class<android.view.animation.GridLayoutAnimationController.AnimationParameters>;
				}
			}
			export class BounceInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor();
				static class: java.lang.Class<android.view.animation.BounceInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class AccelerateDecelerateInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor();
				static class: java.lang.Class<android.view.animation.AccelerateDecelerateInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class TranslateAnimation extends android.view.animation.Animation {
				constructor(arg1: number, arg2: native.Float, arg3: number, arg4: native.Float, arg5: number, arg6: native.Float, arg7: number, arg8: native.Float);
				constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				static class: java.lang.Class<android.view.animation.TranslateAnimation>;
				initialize(arg1: number, arg2: number, arg3: number, arg4: number): void;
			}
			export class AnimationUtils extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.view.animation.AnimationUtils>;
				static loadLayoutAnimation(arg1: android.content.Context, arg2: number): android.view.animation.LayoutAnimationController;
				static makeOutAnimation(arg1: android.content.Context, arg2: boolean): android.view.animation.Animation;
				static makeInAnimation(arg1: android.content.Context, arg2: boolean): android.view.animation.Animation;
				static loadInterpolator(arg1: android.content.Context, arg2: number): android.view.animation.IInterpolator;
				static currentAnimationTimeMillis(): any;
				static makeInChildBottomAnimation(arg1: android.content.Context): android.view.animation.Animation;
				static loadAnimation(arg1: android.content.Context, arg2: number): android.view.animation.Animation;
			}
			export class ScaleAnimation extends android.view.animation.Animation {
				constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: number, arg6: native.Float, arg7: number, arg8: native.Float);
				constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float);
				constructor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				static class: java.lang.Class<android.view.animation.ScaleAnimation>;
				initialize(arg1: number, arg2: number, arg3: number, arg4: number): void;
			}
			export class AnticipateInterpolator extends java.lang.Object implements android.view.animation.IInterpolator {
				constructor();
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				constructor(arg1: native.Float);
				static class: java.lang.Class<android.view.animation.AnticipateInterpolator>;
				getInterpolation(arg1: native.Float): number;
			}
			export class Interpolator implements android.animation.ITimeInterpolator, android.view.animation.IInterpolator {
				constructor(implementation: android.view.animation.IInterpolator);
				getInterpolation(arg1: native.Float): number;
			}
			export class AnimationSet extends android.view.animation.Animation {
				constructor(arg1: boolean);
				constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
				static class: java.lang.Class<android.view.animation.AnimationSet>;
				getDuration(): any;
				setDuration(arg1: native.Long): void;
				setStartOffset(arg1: native.Long): void;
				willChangeBounds(): boolean;
				scaleCurrentDuration(arg1: native.Float): void;
				computeDurationHint(): any;
				restrictDuration(arg1: native.Long): void;
				getTransformation(arg1: native.Long, arg2: android.view.animation.Transformation): boolean;
				willChangeTransformationMatrix(): boolean;
				setFillBefore(arg1: boolean): void;
				setRepeatMode(arg1: number): void;
				setFillAfter(arg1: boolean): void;
				addAnimation(arg1: android.view.animation.Animation): void;
				getAnimations(): java.util.IList<android.view.animation.Animation>;
				reset(): void;
				initialize(arg1: number, arg2: number, arg3: number, arg4: number): void;
				getStartTime(): any;
				setStartTime(arg1: native.Long): void;
				getTransformation(arg1: native.Long, arg2: android.view.animation.Transformation, arg3: native.Float): boolean;
			}
		}
		export class Display extends java.lang.Object {
			static DEFAULT_DISPLAY: number;
			static FLAG_SUPPORTS_PROTECTED_BUFFERS: number;
			static FLAG_SECURE: number;
			static class: java.lang.Class<android.view.Display>;
			getRotation(): number;
			getPixelFormat(): number;
			getCurrentSizeRange(arg1: android.graphics.Point, arg2: android.graphics.Point): void;
			getRealMetrics(arg1: android.util.DisplayMetrics): void;
			getRectSize(arg1: android.graphics.Rect): void;
			getRealSize(arg1: android.graphics.Point): void;
			getDisplayId(): number;
			toString(): string;
			getName(): string;
			getSize(arg1: android.graphics.Point): void;
			getHeight(): number;
			getOrientation(): number;
			getWidth(): number;
			isValid(): boolean;
			getMetrics(arg1: android.util.DisplayMetrics): void;
			getRefreshRate(): number;
			getFlags(): number;
		}
		export class TouchDelegate extends java.lang.Object {
			constructor(arg1: android.graphics.Rect, arg2: android.view.View);
			static ABOVE: number;
			static BELOW: number;
			static TO_LEFT: number;
			static TO_RIGHT: number;
			static class: java.lang.Class<android.view.TouchDelegate>;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
		}
		export class GestureDetector extends java.lang.Object {
			constructor(arg1: android.view.GestureDetector.IOnGestureListener, arg2: android.os.Handler);
			constructor(arg1: android.view.GestureDetector.IOnGestureListener);
			constructor(arg1: android.content.Context, arg2: android.view.GestureDetector.IOnGestureListener);
			constructor(arg1: android.content.Context, arg2: android.view.GestureDetector.IOnGestureListener, arg3: android.os.Handler);
			constructor(arg1: android.content.Context, arg2: android.view.GestureDetector.IOnGestureListener, arg3: android.os.Handler, arg4: boolean);
			static class: java.lang.Class<android.view.GestureDetector>;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			setIsLongpressEnabled(arg1: boolean): void;
			isLongpressEnabled(): boolean;
			setOnDoubleTapListener(arg1: android.view.GestureDetector.IOnDoubleTapListener): void;
		}
		export module GestureDetector {
			export class OnDoubleTapListener implements android.view.GestureDetector.IOnDoubleTapListener {
				constructor(implementation: android.view.GestureDetector.IOnDoubleTapListener);
				onSingleTapConfirmed(arg1: android.view.MotionEvent): boolean;
				onDoubleTapEvent(arg1: android.view.MotionEvent): boolean;
				onDoubleTap(arg1: android.view.MotionEvent): boolean;
			}
			export class OnGestureListener implements android.view.GestureDetector.IOnGestureListener {
				constructor(implementation: android.view.GestureDetector.IOnGestureListener);
				onScroll(arg1: android.view.MotionEvent, arg2: android.view.MotionEvent, arg3: native.Float, arg4: native.Float): boolean;
				onShowPress(arg1: android.view.MotionEvent): void;
				onSingleTapUp(arg1: android.view.MotionEvent): boolean;
				onLongPress(arg1: android.view.MotionEvent): void;
				onDown(arg1: android.view.MotionEvent): boolean;
				onFling(arg1: android.view.MotionEvent, arg2: android.view.MotionEvent, arg3: native.Float, arg4: native.Float): boolean;
			}
			export interface IOnGestureListener {
				onScroll(arg1: android.view.MotionEvent, arg2: android.view.MotionEvent, arg3: native.Float, arg4: native.Float): boolean;
				onShowPress(arg1: android.view.MotionEvent): void;
				onSingleTapUp(arg1: android.view.MotionEvent): boolean;
				onLongPress(arg1: android.view.MotionEvent): void;
				onDown(arg1: android.view.MotionEvent): boolean;
				onFling(arg1: android.view.MotionEvent, arg2: android.view.MotionEvent, arg3: native.Float, arg4: native.Float): boolean;
			}
			export interface IOnDoubleTapListener {
				onSingleTapConfirmed(arg1: android.view.MotionEvent): boolean;
				onDoubleTapEvent(arg1: android.view.MotionEvent): boolean;
				onDoubleTap(arg1: android.view.MotionEvent): boolean;
			}
			export class SimpleOnGestureListener extends java.lang.Object implements android.view.GestureDetector.IOnGestureListener, android.view.GestureDetector.IOnDoubleTapListener {
				constructor();
				static class: java.lang.Class<android.view.GestureDetector.SimpleOnGestureListener>;
				onScroll(arg1: android.view.MotionEvent, arg2: android.view.MotionEvent, arg3: native.Float, arg4: native.Float): boolean;
				onShowPress(arg1: android.view.MotionEvent): void;
				onSingleTapUp(arg1: android.view.MotionEvent): boolean;
				onLongPress(arg1: android.view.MotionEvent): void;
				onDown(arg1: android.view.MotionEvent): boolean;
				onFling(arg1: android.view.MotionEvent, arg2: android.view.MotionEvent, arg3: native.Float, arg4: native.Float): boolean;
				onSingleTapConfirmed(arg1: android.view.MotionEvent): boolean;
				onDoubleTapEvent(arg1: android.view.MotionEvent): boolean;
				onDoubleTap(arg1: android.view.MotionEvent): boolean;
			}
		}
		export class KeyCharacterMap extends java.lang.Object implements android.os.IParcelable {
			static BUILT_IN_KEYBOARD: number;
			static VIRTUAL_KEYBOARD: number;
			static NUMERIC: number;
			static PREDICTIVE: number;
			static ALPHA: number;
			static FULL: number;
			static SPECIAL_FUNCTION: number;
			static HEX_INPUT: string;
			static PICKER_DIALOG_INPUT: string;
			static MODIFIER_BEHAVIOR_CHORDED: number;
			static MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED: number;
			static COMBINING_ACCENT: number;
			static COMBINING_ACCENT_MASK: number;
			static CREATOR: android.os.Parcelable.ICreator<android.view.KeyCharacterMap>;
			static class: java.lang.Class<android.view.KeyCharacterMap>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getKeyData(arg1: number, arg2: android.view.KeyCharacterMap.KeyData): boolean;
			isPrintingKey(arg1: number): boolean;
			static getDeadChar(arg1: number, arg2: number): number;
			getEvents(arg1: native.Array<string>): native.Array<android.view.KeyEvent>;
			static deviceHasKey(arg1: number): boolean;
			static deviceHasKeys(arg1: native.Array<number>): native.Array<boolean>;
			getMatch(arg1: number, arg2: native.Array<string>, arg3: number): string;
			getMatch(arg1: number, arg2: native.Array<string>): string;
			getModifierBehavior(): number;
			getKeyboardType(): number;
			getDisplayLabel(arg1: number): string;
			get(arg1: number, arg2: number): number;
			static load(arg1: number): android.view.KeyCharacterMap;
			getNumber(arg1: number): string;
		}
		export module KeyCharacterMap {
			export class KeyData extends java.lang.Object {
				constructor();
				static META_LENGTH: number;
				displayLabel: string;
				number: string;
				meta: native.Array<string>;
				static class: java.lang.Class<android.view.KeyCharacterMap.KeyData>;
			}
			export class UnavailableException extends android.util.AndroidRuntimeException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.view.KeyCharacterMap.UnavailableException>;
			}
		}
		export class ViewTreeObserver extends java.lang.Object {
			static class: java.lang.Class<android.view.ViewTreeObserver>;
			dispatchOnDraw(): void;
			addOnDrawListener(arg1: android.view.ViewTreeObserver.IOnDrawListener): void;
			removeOnDrawListener(arg1: android.view.ViewTreeObserver.IOnDrawListener): void;
			dispatchOnPreDraw(): boolean;
			addOnPreDrawListener(arg1: android.view.ViewTreeObserver.IOnPreDrawListener): void;
			addOnGlobalLayoutListener(arg1: android.view.ViewTreeObserver.IOnGlobalLayoutListener): void;
			removeGlobalOnLayoutListener(arg1: android.view.ViewTreeObserver.IOnGlobalLayoutListener): void;
			removeOnPreDrawListener(arg1: android.view.ViewTreeObserver.IOnPreDrawListener): void;
			addOnScrollChangedListener(arg1: android.view.ViewTreeObserver.IOnScrollChangedListener): void;
			removeOnScrollChangedListener(arg1: android.view.ViewTreeObserver.IOnScrollChangedListener): void;
			removeOnGlobalLayoutListener(arg1: android.view.ViewTreeObserver.IOnGlobalLayoutListener): void;
			dispatchOnGlobalLayout(): void;
			addOnTouchModeChangeListener(arg1: android.view.ViewTreeObserver.IOnTouchModeChangeListener): void;
			removeOnTouchModeChangeListener(arg1: android.view.ViewTreeObserver.IOnTouchModeChangeListener): void;
			removeOnGlobalFocusChangeListener(arg1: android.view.ViewTreeObserver.IOnGlobalFocusChangeListener): void;
			addOnGlobalFocusChangeListener(arg1: android.view.ViewTreeObserver.IOnGlobalFocusChangeListener): void;
			isAlive(): boolean;
		}
		export module ViewTreeObserver {
			export class OnScrollChangedListener implements android.view.ViewTreeObserver.IOnScrollChangedListener {
				constructor(implementation: android.view.ViewTreeObserver.IOnScrollChangedListener);
				onScrollChanged(): void;
			}
			export interface IOnScrollChangedListener {
				onScrollChanged(): void;
			}
			export class OnPreDrawListener implements android.view.ViewTreeObserver.IOnPreDrawListener {
				constructor(implementation: android.view.ViewTreeObserver.IOnPreDrawListener);
				onPreDraw(): boolean;
			}
			export interface IOnGlobalLayoutListener {
				onGlobalLayout(): void;
			}
			export interface IOnGlobalFocusChangeListener {
				onGlobalFocusChanged(arg1: android.view.View, arg2: android.view.View): void;
			}
			export class OnDrawListener implements android.view.ViewTreeObserver.IOnDrawListener {
				constructor(implementation: android.view.ViewTreeObserver.IOnDrawListener);
				onDraw(): void;
			}
			export interface IOnTouchModeChangeListener {
				onTouchModeChanged(arg1: boolean): void;
			}
			export class OnGlobalFocusChangeListener implements android.view.ViewTreeObserver.IOnGlobalFocusChangeListener {
				constructor(implementation: android.view.ViewTreeObserver.IOnGlobalFocusChangeListener);
				onGlobalFocusChanged(arg1: android.view.View, arg2: android.view.View): void;
			}
			export interface IOnDrawListener {
				onDraw(): void;
			}
			export class OnTouchModeChangeListener implements android.view.ViewTreeObserver.IOnTouchModeChangeListener {
				constructor(implementation: android.view.ViewTreeObserver.IOnTouchModeChangeListener);
				onTouchModeChanged(arg1: boolean): void;
			}
			export class OnGlobalLayoutListener implements android.view.ViewTreeObserver.IOnGlobalLayoutListener {
				constructor(implementation: android.view.ViewTreeObserver.IOnGlobalLayoutListener);
				onGlobalLayout(): void;
			}
			export interface IOnPreDrawListener {
				onPreDraw(): boolean;
			}
		}
		export class ContextMenu implements android.view.IMenu, android.view.IContextMenu {
			constructor(implementation: android.view.IContextMenu);
			setHeaderTitle(arg1: number): android.view.IContextMenu;
			setHeaderTitle(arg1: java.lang.ICharSequence): android.view.IContextMenu;
			setHeaderTitle(arg1: string): android.view.IContextMenu;
			setHeaderView(arg1: android.view.View): android.view.IContextMenu;
			clearHeader(): void;
			setHeaderIcon(arg1: number): android.view.IContextMenu;
			setHeaderIcon(arg1: android.graphics.drawable.Drawable): android.view.IContextMenu;
			hasVisibleItems(): boolean;
			addIntentOptions(arg1: number, arg2: number, arg3: number, arg4: android.content.ComponentName, arg5: native.Array<android.content.Intent>, arg6: android.content.Intent, arg7: number, arg8: native.Array<android.view.IMenuItem>): number;
			setGroupEnabled(arg1: number, arg2: boolean): void;
			setGroupVisible(arg1: number, arg2: boolean): void;
			performShortcut(arg1: number, arg2: android.view.KeyEvent, arg3: number): boolean;
			setGroupCheckable(arg1: number, arg2: boolean, arg3: boolean): void;
			performIdentifierAction(arg1: number, arg2: number): boolean;
			removeGroup(arg1: number): void;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: number): android.view.ISubMenu;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: string): android.view.ISubMenu;
			addSubMenu(arg1: number): android.view.ISubMenu;
			addSubMenu(arg1: string): android.view.ISubMenu;
			findItem(arg1: number): android.view.IMenuItem;
			isShortcutKey(arg1: number, arg2: android.view.KeyEvent): boolean;
			setQwertyMode(arg1: boolean): void;
			add(arg1: string): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: number): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: string): android.view.IMenuItem;
			add(arg1: number): android.view.IMenuItem;
			size(): number;
			clear(): void;
			close(): void;
			getItem(arg1: number): android.view.IMenuItem;
			removeItem(arg1: number): void;
		}
		export module ContextMenu {
			export interface IContextMenuInfo {
			}
			export class ContextMenuInfo implements android.view.ContextMenu.IContextMenuInfo {
				constructor(implementation: android.view.ContextMenu.IContextMenuInfo);
			}
		}
		export class Choreographer extends java.lang.Object {
			static class: java.lang.Class<android.view.Choreographer>;
			removeFrameCallback(arg1: android.view.Choreographer.IFrameCallback): void;
			postFrameCallback(arg1: android.view.Choreographer.IFrameCallback): void;
			postFrameCallbackDelayed(arg1: android.view.Choreographer.IFrameCallback, arg2: native.Long): void;
			static getInstance(): android.view.Choreographer;
		}
		export module Choreographer {
			export class FrameCallback implements android.view.Choreographer.IFrameCallback {
				constructor(implementation: android.view.Choreographer.IFrameCallback);
				doFrame(arg1: native.Long): void;
			}
			export interface IFrameCallback {
				doFrame(arg1: native.Long): void;
			}
		}
		export class SubMenu implements android.view.IMenu, android.view.ISubMenu {
			constructor(implementation: android.view.ISubMenu);
			setHeaderTitle(arg1: number): android.view.ISubMenu;
			setHeaderTitle(arg1: java.lang.ICharSequence): android.view.ISubMenu;
			setHeaderTitle(arg1: string): android.view.ISubMenu;
			setHeaderView(arg1: android.view.View): android.view.ISubMenu;
			clearHeader(): void;
			setHeaderIcon(arg1: android.graphics.drawable.Drawable): android.view.ISubMenu;
			setHeaderIcon(arg1: number): android.view.ISubMenu;
			getItem(): android.view.IMenuItem;
			setIcon(arg1: android.graphics.drawable.Drawable): android.view.ISubMenu;
			setIcon(arg1: number): android.view.ISubMenu;
			hasVisibleItems(): boolean;
			addIntentOptions(arg1: number, arg2: number, arg3: number, arg4: android.content.ComponentName, arg5: native.Array<android.content.Intent>, arg6: android.content.Intent, arg7: number, arg8: native.Array<android.view.IMenuItem>): number;
			setGroupEnabled(arg1: number, arg2: boolean): void;
			setGroupVisible(arg1: number, arg2: boolean): void;
			performShortcut(arg1: number, arg2: android.view.KeyEvent, arg3: number): boolean;
			setGroupCheckable(arg1: number, arg2: boolean, arg3: boolean): void;
			performIdentifierAction(arg1: number, arg2: number): boolean;
			removeGroup(arg1: number): void;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: number): android.view.ISubMenu;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: string): android.view.ISubMenu;
			addSubMenu(arg1: number): android.view.ISubMenu;
			addSubMenu(arg1: string): android.view.ISubMenu;
			findItem(arg1: number): android.view.IMenuItem;
			isShortcutKey(arg1: number, arg2: android.view.KeyEvent): boolean;
			setQwertyMode(arg1: boolean): void;
			add(arg1: string): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: number): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: string): android.view.IMenuItem;
			add(arg1: number): android.view.IMenuItem;
			size(): number;
			clear(): void;
			close(): void;
			getItem(arg1: number): android.view.IMenuItem;
			removeItem(arg1: number): void;
		}
		export class TextureView extends android.view.View {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.view.TextureView>;
			SurfaceTextureListener: android.view.TextureView.ISurfaceTextureListener;
			SurfaceTexture: android.graphics.SurfaceTexture;
			buildLayer(): void;
			setLayerType(arg1: number, arg2: android.graphics.Paint): void;
			getLayerType(): number;
			getBitmap(arg1: android.graphics.Bitmap): android.graphics.Bitmap;
			getBitmap(arg1: number, arg2: number): android.graphics.Bitmap;
			getBitmap(): android.graphics.Bitmap;
			lockCanvas(arg1: android.graphics.Rect): android.graphics.Canvas;
			lockCanvas(): android.graphics.Canvas;
			getSurfaceTexture(): android.graphics.SurfaceTexture;
			setSurfaceTexture(arg1: android.graphics.SurfaceTexture): void;
			unlockCanvasAndPost(arg1: android.graphics.Canvas): void;
			setSurfaceTextureListener(arg1: android.view.TextureView.ISurfaceTextureListener): void;
			getSurfaceTextureListener(): android.view.TextureView.ISurfaceTextureListener;
			isOpaque(): boolean;
			setOpaque(arg1: boolean): void;
			getTransform(arg1: android.graphics.Matrix): android.graphics.Matrix;
			setTransform(arg1: android.graphics.Matrix): void;
			draw(arg1: android.graphics.Canvas): void;
			isAvailable(): boolean;
		}
		export module TextureView {
			export class SurfaceTextureListener implements android.view.TextureView.ISurfaceTextureListener {
				constructor(implementation: android.view.TextureView.ISurfaceTextureListener);
				onSurfaceTextureSizeChanged(arg1: android.graphics.SurfaceTexture, arg2: number, arg3: number): void;
				onSurfaceTextureDestroyed(arg1: android.graphics.SurfaceTexture): boolean;
				onSurfaceTextureUpdated(arg1: android.graphics.SurfaceTexture): void;
				onSurfaceTextureAvailable(arg1: android.graphics.SurfaceTexture, arg2: number, arg3: number): void;
			}
			export interface ISurfaceTextureListener {
				onSurfaceTextureSizeChanged(arg1: android.graphics.SurfaceTexture, arg2: number, arg3: number): void;
				onSurfaceTextureDestroyed(arg1: android.graphics.SurfaceTexture): boolean;
				onSurfaceTextureUpdated(arg1: android.graphics.SurfaceTexture): void;
				onSurfaceTextureAvailable(arg1: android.graphics.SurfaceTexture, arg2: number, arg3: number): void;
			}
		}
		export class OrientationEventListener extends java.lang.Object {
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: number);
			static ORIENTATION_UNKNOWN: number;
			static class: java.lang.Class<android.view.OrientationEventListener>;
			onOrientationChanged(arg1: number): void;
			canDetectOrientation(): boolean;
			disable(): void;
			enable(): void;
		}
		export class Gravity extends java.lang.Object {
			constructor();
			static NO_GRAVITY: number;
			static AXIS_SPECIFIED: number;
			static AXIS_PULL_BEFORE: number;
			static AXIS_PULL_AFTER: number;
			static AXIS_CLIP: number;
			static AXIS_X_SHIFT: number;
			static AXIS_Y_SHIFT: number;
			static TOP: number;
			static BOTTOM: number;
			static LEFT: number;
			static RIGHT: number;
			static CENTER_VERTICAL: number;
			static FILL_VERTICAL: number;
			static CENTER_HORIZONTAL: number;
			static FILL_HORIZONTAL: number;
			static CENTER: number;
			static FILL: number;
			static CLIP_VERTICAL: number;
			static CLIP_HORIZONTAL: number;
			static RELATIVE_LAYOUT_DIRECTION: number;
			static HORIZONTAL_GRAVITY_MASK: number;
			static VERTICAL_GRAVITY_MASK: number;
			static DISPLAY_CLIP_VERTICAL: number;
			static DISPLAY_CLIP_HORIZONTAL: number;
			static START: number;
			static END: number;
			static RELATIVE_HORIZONTAL_GRAVITY_MASK: number;
			static class: java.lang.Class<android.view.Gravity>;
			static apply(arg1: number, arg2: number, arg3: number, arg4: android.graphics.Rect, arg5: number, arg6: number, arg7: android.graphics.Rect, arg8: number): void;
			static apply(arg1: number, arg2: number, arg3: number, arg4: android.graphics.Rect, arg5: android.graphics.Rect, arg6: number): void;
			static apply(arg1: number, arg2: number, arg3: number, arg4: android.graphics.Rect, arg5: android.graphics.Rect): void;
			static apply(arg1: number, arg2: number, arg3: number, arg4: android.graphics.Rect, arg5: number, arg6: number, arg7: android.graphics.Rect): void;
			static applyDisplay(arg1: number, arg2: android.graphics.Rect, arg3: android.graphics.Rect, arg4: number): void;
			static applyDisplay(arg1: number, arg2: android.graphics.Rect, arg3: android.graphics.Rect): void;
			static isVertical(arg1: number): boolean;
			static getAbsoluteGravity(arg1: number, arg2: number): number;
			static isHorizontal(arg1: number): boolean;
		}
		export interface IMenuItem {
			getOrder(): number;
			getGroupId(): number;
			setIntent(arg1: android.content.Intent): android.view.IMenuItem;
			setOnMenuItemClickListener(arg1: android.view.MenuItem.IOnMenuItemClickListener): android.view.IMenuItem;
			isChecked(): boolean;
			setChecked(arg1: boolean): android.view.IMenuItem;
			getItemId(): number;
			hasSubMenu(): boolean;
			getIntent(): android.content.Intent;
			setCheckable(arg1: boolean): android.view.IMenuItem;
			isCheckable(): boolean;
			setAlphabeticShortcut(arg1: string): android.view.IMenuItem;
			setShowAsAction(arg1: number): void;
			setActionProvider(arg1: android.view.ActionProvider): android.view.IMenuItem;
			getTitleCondensed(): java.lang.ICharSequence;
			getActionProvider(): android.view.ActionProvider;
			isActionViewExpanded(): boolean;
			setTitleCondensed(arg1: string): android.view.IMenuItem;
			getAlphabeticShortcut(): string;
			setNumericShortcut(arg1: string): android.view.IMenuItem;
			expandActionView(): boolean;
			setShowAsActionFlags(arg1: number): android.view.IMenuItem;
			getNumericShortcut(): string;
			collapseActionView(): boolean;
			setOnActionExpandListener(arg1: android.view.MenuItem.IOnActionExpandListener): android.view.IMenuItem;
			getSubMenu(): android.view.ISubMenu;
			getActionView(): android.view.View;
			getMenuInfo(): android.view.ContextMenu.IContextMenuInfo;
			setActionView(arg1: number): android.view.IMenuItem;
			setActionView(arg1: android.view.View): android.view.IMenuItem;
			getTitle(): java.lang.ICharSequence;
			setTitle(arg1: number): android.view.IMenuItem;
			setTitle(arg1: string): android.view.IMenuItem;
			isVisible(): boolean;
			setVisible(arg1: boolean): android.view.IMenuItem;
			isEnabled(): boolean;
			setEnabled(arg1: boolean): android.view.IMenuItem;
			setShortcut(arg1: string, arg2: string): android.view.IMenuItem;
			getIcon(): android.graphics.drawable.Drawable;
			setIcon(arg1: number): android.view.IMenuItem;
			setIcon(arg1: android.graphics.drawable.Drawable): android.view.IMenuItem;
		}
		export module IMenuItem {
			var SHOW_AS_ACTION_NEVER: number;
			var SHOW_AS_ACTION_IF_ROOM: number;
			var SHOW_AS_ACTION_ALWAYS: number;
			var SHOW_AS_ACTION_WITH_TEXT: number;
			var SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;
		}
		export interface IViewManager {
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			removeView(arg1: android.view.View): void;
			updateViewLayout(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
		}
		export class ViewManager implements android.view.IViewManager {
			constructor(implementation: android.view.IViewManager);
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			removeView(arg1: android.view.View): void;
			updateViewLayout(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
		}
		export class ViewConfiguration extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.view.ViewConfiguration>;
			static getScrollBarSize(): number;
			static getScrollBarFadeDuration(): number;
			static getTouchSlop(): number;
			static getTapTimeout(): number;
			static getEdgeSlop(): number;
			static getKeyRepeatTimeout(): number;
			getScaledEdgeSlop(): number;
			static getDoubleTapTimeout(): number;
			static getScrollFriction(): number;
			static getFadingEdgeLength(): number;
			static getLongPressTimeout(): number;
			static getKeyRepeatDelay(): number;
			static getScrollDefaultDelay(): number;
			static getJumpTapTimeout(): number;
			getScaledTouchSlop(): number;
			static getWindowTouchSlop(): number;
			hasPermanentMenuKey(): boolean;
			getScaledFadingEdgeLength(): number;
			getScaledScrollBarSize(): number;
			getScaledDoubleTapSlop(): number;
			static getMinimumFlingVelocity(): number;
			getScaledPagingTouchSlop(): number;
			static getMaximumFlingVelocity(): number;
			static getMaximumDrawingCacheSize(): number;
			static getPressedStateDuration(): number;
			getScaledWindowTouchSlop(): number;
			getScaledOverscrollDistance(): number;
			getScaledOverflingDistance(): number;
			static getGlobalActionKeyTimeout(): any;
			static getZoomControlsTimeout(): any;
			getScaledMinimumFlingVelocity(): number;
			getScaledMaximumFlingVelocity(): number;
			getScaledMaximumDrawingCacheSize(): number;
			static get(arg1: android.content.Context): android.view.ViewConfiguration;
		}
		export class SurfaceHolder implements android.view.ISurfaceHolder {
			constructor(implementation: android.view.ISurfaceHolder);
			static SURFACE_TYPE_NORMAL: number;
			static SURFACE_TYPE_HARDWARE: number;
			static SURFACE_TYPE_GPU: number;
			static SURFACE_TYPE_PUSH_BUFFERS: number;
			setKeepScreenOn(arg1: boolean): void;
			lockCanvas(): android.graphics.Canvas;
			lockCanvas(arg1: android.graphics.Rect): android.graphics.Canvas;
			isCreating(): boolean;
			addCallback(arg1: android.view.SurfaceHolder.ICallback): void;
			setFixedSize(arg1: number, arg2: number): void;
			getSurface(): android.view.Surface;
			removeCallback(arg1: android.view.SurfaceHolder.ICallback): void;
			setSizeFromLayout(): void;
			getSurfaceFrame(): android.graphics.Rect;
			unlockCanvasAndPost(arg1: android.graphics.Canvas): void;
			setType(arg1: number): void;
			setFormat(arg1: number): void;
		}
		export module SurfaceHolder {
			export interface ICallback {
				surfaceCreated(arg1: android.view.ISurfaceHolder): void;
				surfaceChanged(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number, arg4: number): void;
				surfaceDestroyed(arg1: android.view.ISurfaceHolder): void;
			}
			export interface ICallback2 extends android.view.SurfaceHolder.ICallback {
				surfaceRedrawNeeded(arg1: android.view.ISurfaceHolder): void;
				surfaceCreated(arg1: android.view.ISurfaceHolder): void;
				surfaceChanged(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number, arg4: number): void;
				surfaceDestroyed(arg1: android.view.ISurfaceHolder): void;
			}
			export class BadSurfaceTypeException extends java.lang.RuntimeException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.view.SurfaceHolder.BadSurfaceTypeException>;
			}
			export class Callback implements android.view.SurfaceHolder.ICallback {
				constructor(implementation: android.view.SurfaceHolder.ICallback);
				surfaceCreated(arg1: android.view.ISurfaceHolder): void;
				surfaceChanged(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number, arg4: number): void;
				surfaceDestroyed(arg1: android.view.ISurfaceHolder): void;
			}
			export class Callback2 implements android.view.SurfaceHolder.ICallback, android.view.SurfaceHolder.ICallback2 {
				constructor(implementation: android.view.SurfaceHolder.ICallback2);
				surfaceRedrawNeeded(arg1: android.view.ISurfaceHolder): void;
				surfaceCreated(arg1: android.view.ISurfaceHolder): void;
				surfaceChanged(arg1: android.view.ISurfaceHolder, arg2: number, arg3: number, arg4: number): void;
				surfaceDestroyed(arg1: android.view.ISurfaceHolder): void;
			}
		}
		export class View extends java.lang.Object implements android.graphics.drawable.Drawable.ICallback, android.view.KeyEvent.ICallback, android.view.accessibility.IAccessibilityEventSource {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			static NO_ID: number;
			static VISIBLE: number;
			static INVISIBLE: number;
			static GONE: number;
			static DRAWING_CACHE_QUALITY_LOW: number;
			static DRAWING_CACHE_QUALITY_HIGH: number;
			static DRAWING_CACHE_QUALITY_AUTO: number;
			static SCROLLBARS_INSIDE_OVERLAY: number;
			static SCROLLBARS_INSIDE_INSET: number;
			static SCROLLBARS_OUTSIDE_OVERLAY: number;
			static SCROLLBARS_OUTSIDE_INSET: number;
			static KEEP_SCREEN_ON: number;
			static SOUND_EFFECTS_ENABLED: number;
			static HAPTIC_FEEDBACK_ENABLED: number;
			static FOCUSABLES_ALL: number;
			static FOCUSABLES_TOUCH_MODE: number;
			static FOCUS_BACKWARD: number;
			static FOCUS_FORWARD: number;
			static FOCUS_LEFT: number;
			static FOCUS_UP: number;
			static FOCUS_RIGHT: number;
			static FOCUS_DOWN: number;
			static MEASURED_SIZE_MASK: number;
			static MEASURED_STATE_MASK: number;
			static MEASURED_HEIGHT_STATE_SHIFT: number;
			static MEASURED_STATE_TOO_SMALL: number;
			static LAYOUT_DIRECTION_LTR: number;
			static LAYOUT_DIRECTION_RTL: number;
			static LAYOUT_DIRECTION_INHERIT: number;
			static LAYOUT_DIRECTION_LOCALE: number;
			static TEXT_DIRECTION_INHERIT: number;
			static TEXT_DIRECTION_FIRST_STRONG: number;
			static TEXT_DIRECTION_ANY_RTL: number;
			static TEXT_DIRECTION_LTR: number;
			static TEXT_DIRECTION_RTL: number;
			static TEXT_DIRECTION_LOCALE: number;
			static TEXT_ALIGNMENT_INHERIT: number;
			static TEXT_ALIGNMENT_GRAVITY: number;
			static TEXT_ALIGNMENT_TEXT_START: number;
			static TEXT_ALIGNMENT_TEXT_END: number;
			static TEXT_ALIGNMENT_CENTER: number;
			static TEXT_ALIGNMENT_VIEW_START: number;
			static TEXT_ALIGNMENT_VIEW_END: number;
			static IMPORTANT_FOR_ACCESSIBILITY_AUTO: number;
			static IMPORTANT_FOR_ACCESSIBILITY_YES: number;
			static IMPORTANT_FOR_ACCESSIBILITY_NO: number;
			static OVER_SCROLL_ALWAYS: number;
			static OVER_SCROLL_IF_CONTENT_SCROLLS: number;
			static OVER_SCROLL_NEVER: number;
			static SYSTEM_UI_FLAG_VISIBLE: number;
			static SYSTEM_UI_FLAG_LOW_PROFILE: number;
			static SYSTEM_UI_FLAG_HIDE_NAVIGATION: number;
			static SYSTEM_UI_FLAG_FULLSCREEN: number;
			static SYSTEM_UI_FLAG_LAYOUT_STABLE: number;
			static SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION: number;
			static SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN: number;
			static STATUS_BAR_HIDDEN: number;
			static STATUS_BAR_VISIBLE: number;
			static SYSTEM_UI_LAYOUT_FLAGS: number;
			static FIND_VIEWS_WITH_TEXT: number;
			static FIND_VIEWS_WITH_CONTENT_DESCRIPTION: number;
			static SCREEN_STATE_OFF: number;
			static SCREEN_STATE_ON: number;
			static SCROLLBAR_POSITION_DEFAULT: number;
			static SCROLLBAR_POSITION_LEFT: number;
			static SCROLLBAR_POSITION_RIGHT: number;
			static LAYER_TYPE_NONE: number;
			static LAYER_TYPE_SOFTWARE: number;
			static LAYER_TYPE_HARDWARE: number;
			static ALPHA: android.util.Property<android.view.View, java.lang.Float>;
			static TRANSLATION_X: android.util.Property<android.view.View, java.lang.Float>;
			static TRANSLATION_Y: android.util.Property<android.view.View, java.lang.Float>;
			static X: android.util.Property<android.view.View, java.lang.Float>;
			static Y: android.util.Property<android.view.View, java.lang.Float>;
			static ROTATION: android.util.Property<android.view.View, java.lang.Float>;
			static ROTATION_X: android.util.Property<android.view.View, java.lang.Float>;
			static ROTATION_Y: android.util.Property<android.view.View, java.lang.Float>;
			static SCALE_X: android.util.Property<android.view.View, java.lang.Float>;
			static SCALE_Y: android.util.Property<android.view.View, java.lang.Float>;
			static class: java.lang.Class<android.view.View>;
			VerticalScrollbarPosition: number;
			KeepScreenOn: boolean;
			ScrollBarStyle: number;
			Top: number;
			Animation: android.view.animation.Animation;
			Left: number;
			ScrollBarFadeDuration: number;
			Bottom: number;
			ScrollY: number;
			ScrollX: number;
			FitsSystemWindows: boolean;
			NextFocusUpId: number;
			Background: android.graphics.drawable.Drawable;
			ScrollBarDefaultDelayBeforeFade: number;
			NextFocusRightId: number;
			Right: number;
			OnFocusChangeListener: android.view.View.IOnFocusChangeListener;
			NextFocusDownId: number;
			LayoutParams: android.view.ViewGroup.LayoutParams;
			NextFocusForwardId: number;
			LayoutDirection: number;
			FilterTouchesWhenObscured: boolean;
			Tag: any;
			TouchDelegate: android.view.TouchDelegate;
			Id: number;
			Visibility: number;
			SystemUiVisibility: number;
			ImportantForAccessibility: number;
			ScrollBarSize: number;
			TextAlignment: number;
			TextDirection: number;
			DrawingCacheBackgroundColor: number;
			OverScrollMode: number;
			MinimumWidth: number;
			NextFocusLeftId: number;
			LabelFor: number;
			ContentDescription: java.lang.ICharSequence;
			MinimumHeight: number;
			DrawingCacheQuality: number;
			setX(arg1: native.Float): void;
			onInitializeAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			animate(): android.view.ViewPropertyAnimator;
			requestLayout(): void;
			onKeyPreIme(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyUp(arg1: number, arg2: android.view.KeyEvent): boolean;
			onKeyShortcut(arg1: number, arg2: android.view.KeyEvent): boolean;
			willNotDraw(): boolean;
			callOnClick(): boolean;
			onKeyMultiple(arg1: number, arg2: number, arg3: android.view.KeyEvent): boolean;
			setVisibility(arg1: number): void;
			isInTouchMode(): boolean;
			onHoverEvent(arg1: android.view.MotionEvent): boolean;
			isShown(): boolean;
			getTouchables(): java.util.ArrayList<android.view.View>;
			setClickable(arg1: boolean): void;
			isHovered(): boolean;
			getFocusables(arg1: number): java.util.ArrayList<android.view.View>;
			getVisibility(): number;
			isClickable(): boolean;
			isSaveEnabled(): boolean;
			performClick(): boolean;
			onKeyDown(arg1: number, arg2: android.view.KeyEvent): boolean;
			hasFocusable(): boolean;
			focusSearch(arg1: number): android.view.View;
			addFocusables(arg1: java.util.ArrayList<android.view.View>, arg2: number): void;
			addFocusables(arg1: java.util.ArrayList<android.view.View>, arg2: number, arg3: number): void;
			addTouchables(arg1: java.util.ArrayList<android.view.View>): void;
			findFocus(): android.view.View;
			clearFocus(): void;
			getScrollBarDefaultDelayBeforeFade(): number;
			sendAccessibilityEventUnchecked(arg1: android.view.accessibility.AccessibilityEvent): void;
			setOnCreateContextMenuListener(arg1: android.view.View.IOnCreateContextMenuListener): void;
			dispatchPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): boolean;
			setHorizontalFadingEdgeEnabled(arg1: boolean): void;
			setScrollBarDefaultDelayBeforeFade(arg1: number): void;
			setDuplicateParentStateEnabled(arg1: boolean): void;
			removeOnAttachStateChangeListener(arg1: android.view.View.IOnAttachStateChangeListener): void;
			addOnAttachStateChangeListener(arg1: android.view.View.IOnAttachStateChangeListener): void;
			getDrawingCacheBackgroundColor(): number;
			setDrawingCacheBackgroundColor(arg1: number): void;
			setHovered(arg1: boolean): void;
			onWindowFocusChanged(arg1: boolean): void;
			hasWindowFocus(): boolean;
			getContentDescription(): java.lang.ICharSequence;
			dispatchUnhandledMove(arg1: android.view.View, arg2: number): boolean;
			dispatchWindowSystemUiVisiblityChanged(arg1: number): void;
			dispatchSystemUiVisibilityChanged(arg1: number): void;
			dispatchWindowVisibilityChanged(arg1: number): void;
			onInitializeAccessibilityNodeInfo(arg1: android.view.accessibility.AccessibilityNodeInfo): void;
			addChildrenForAccessibility(arg1: java.util.ArrayList<android.view.View>): void;
			onRtlPropertiesChanged(arg1: number): void;
			dispatchWindowFocusChanged(arg1: boolean): void;
			dispatchKeyEventPreIme(arg1: android.view.KeyEvent): boolean;
			dispatchKeyShortcutEvent(arg1: android.view.KeyEvent): boolean;
			dispatchTrackballEvent(arg1: android.view.MotionEvent): boolean;
			dispatchConfigurationChanged(arg1: android.content.res.Configuration): void;
			createContextMenu(arg1: android.view.IContextMenu): void;
			isLayoutRequested(): boolean;
			hasOnClickListeners(): boolean;
			startActionMode(arg1: android.view.ActionMode.ICallback): android.view.ActionMode;
			performLongClick(): boolean;
			setOnKeyListener(arg1: android.view.View.IOnKeyListener): void;
			setOnTouchListener(arg1: android.view.View.IOnTouchListener): void;
			showContextMenu(): boolean;
			setOnClickListener(arg1: android.view.View.IOnClickListener): void;
			setOnHoverListener(arg1: android.view.View.IOnHoverListener): void;
			setFadingEdgeLength(arg1: number): void;
			setOnDragListener(arg1: android.view.View.IOnDragListener): void;
			dispatchTouchEvent(arg1: android.view.MotionEvent): boolean;
			dispatchDragEvent(arg1: android.view.DragEvent): boolean;
			findViewsWithText(arg1: java.util.ArrayList<android.view.View>, arg2: java.lang.ICharSequence, arg3: number): void;
			findViewsWithText(arg1: java.util.ArrayList<android.view.View>, arg2: string, arg3: number): void;
			dispatchDisplayHint(arg1: number): void;
			requestFitSystemWindows(): void;
			getParentForAccessibility(): android.view.IViewParent;
			setOnFocusChangeListener(arg1: android.view.View.IOnFocusChangeListener): void;
			onPopulateAccessibilityEvent(arg1: android.view.accessibility.AccessibilityEvent): void;
			setVerticalScrollbarPosition(arg1: number): void;
			setOnLongClickListener(arg1: android.view.View.IOnLongClickListener): void;
			getVerticalScrollbarPosition(): number;
			addOnLayoutChangeListener(arg1: android.view.View.IOnLayoutChangeListener): void;
			getHorizontalFadingEdgeLength(): number;
			getVerticalScrollbarWidth(): number;
			announceForAccessibility(arg1: java.lang.ICharSequence): void;
			announceForAccessibility(arg1: string): void;
			setOnGenericMotionListener(arg1: android.view.View.IOnGenericMotionListener): void;
			createAccessibilityNodeInfo(): android.view.accessibility.AccessibilityNodeInfo;
			setAccessibilityDelegate(arg1: android.view.View.AccessibilityDelegate): void;
			requestRectangleOnScreen(arg1: android.graphics.Rect): boolean;
			requestRectangleOnScreen(arg1: android.graphics.Rect, arg2: boolean): boolean;
			getAccessibilityNodeProvider(): android.view.accessibility.AccessibilityNodeProvider;
			getOnFocusChangeListener(): android.view.View.IOnFocusChangeListener;
			getVerticalFadingEdgeLength(): number;
			sendAccessibilityEvent(arg1: number): void;
			removeOnLayoutChangeListener(arg1: android.view.View.IOnLayoutChangeListener): void;
			jumpDrawablesToCurrentState(): void;
			getMeasuredState(): number;
			onKeyLongPress(arg1: number, arg2: android.view.KeyEvent): boolean;
			setTouchDelegate(arg1: android.view.TouchDelegate): void;
			getMeasuredHeight(): number;
			getTouchDelegate(): android.view.TouchDelegate;
			getDrawingRect(arg1: android.graphics.Rect): void;
			onGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			getMeasuredWidth(): number;
			cancelLongPress(): void;
			setCameraDistance(arg1: native.Float): void;
			getTranslationY(): number;
			setTranslationY(arg1: native.Float): void;
			getFocusedRect(arg1: android.graphics.Rect): void;
			getGlobalVisibleRect(arg1: android.graphics.Rect, arg2: android.graphics.Point): boolean;
			getGlobalVisibleRect(arg1: android.graphics.Rect): boolean;
			getCameraDistance(): number;
			onCheckIsTextEditor(): boolean;
			onHoverChanged(arg1: boolean): void;
			getLocalVisibleRect(arg1: android.graphics.Rect): boolean;
			offsetTopAndBottom(arg1: number): void;
			setTranslationX(arg1: native.Float): void;
			offsetLeftAndRight(arg1: number): void;
			getLayoutParams(): android.view.ViewGroup.LayoutParams;
			getTranslationX(): number;
			onTrackballEvent(arg1: android.view.MotionEvent): boolean;
			getWindowVisibility(): number;
			setScrollBarSize(arg1: number): void;
			canScrollHorizontally(arg1: number): boolean;
			setScrollBarStyle(arg1: number): void;
			saveHierarchyState(arg1: android.util.SparseArray<android.os.IParcelable>): void;
			onScreenStateChanged(arg1: number): void;
			getDrawingCache(arg1: boolean): android.graphics.Bitmap;
			getDrawingCache(): android.graphics.Bitmap;
			destroyDrawingCache(): void;
			postInvalidateDelayed(arg1: native.Long): void;
			postInvalidateDelayed(arg1: native.Long, arg2: number, arg3: number, arg4: number, arg5: number): void;
			setLayoutParams(arg1: android.view.ViewGroup.LayoutParams): void;
			getScrollBarStyle(): number;
			postInvalidate(): void;
			postInvalidate(arg1: number, arg2: number, arg3: number, arg4: number): void;
			canScrollVertically(arg1: number): boolean;
			getWindowToken(): android.os.IIBinder;
			removeCallbacks(arg1: java.lang.IRunnable): boolean;
			postOnAnimation(arg1: java.lang.IRunnable): void;
			restoreHierarchyState(arg1: android.util.SparseArray<android.os.IParcelable>): void;
			getDrawingTime(): any;
			isDrawingCacheEnabled(): boolean;
			buildDrawingCache(): void;
			buildDrawingCache(arg1: boolean): void;
			getScrollBarSize(): number;
			setLayoutDirection(arg1: number): void;
			getLayoutDirection(): number;
			hasTransientState(): boolean;
			getFitsSystemWindows(): boolean;
			setContentDescription(arg1: java.lang.ICharSequence): void;
			setContentDescription(arg1: string): void;
			getNextFocusLeftId(): number;
			setNextFocusRightId(arg1: number): void;
			setNextFocusLeftId(arg1: number): void;
			getNextFocusDownId(): number;
			setNextFocusDownId(arg1: number): void;
			getNextFocusForwardId(): number;
			setHasTransientState(arg1: boolean): void;
			willNotCacheDrawing(): boolean;
			setWillNotDraw(arg1: boolean): void;
			setNextFocusForwardId(arg1: number): void;
			getNextFocusUpId(): number;
			setScrollContainer(arg1: boolean): void;
			getKeepScreenOn(): boolean;
			isScrollContainer(): boolean;
			getNextFocusRightId(): number;
			setNextFocusUpId(arg1: number): void;
			setFitsSystemWindows(arg1: boolean): void;
			isSoundEffectsEnabled(): boolean;
			setKeepScreenOn(arg1: boolean): void;
			setLongClickable(arg1: boolean): void;
			setSaveEnabled(arg1: boolean): void;
			requestFocusFromTouch(): boolean;
			getKeyDispatcherState(): android.view.KeyEvent.DispatcherState;
			isLongClickable(): boolean;
			setHapticFeedbackEnabled(arg1: boolean): void;
			setWillNotCacheDrawing(arg1: boolean): void;
			dispatchGenericMotionEvent(arg1: android.view.MotionEvent): boolean;
			checkInputConnectionProxy(arg1: android.view.View): boolean;
			getWindowVisibleDisplayFrame(arg1: android.graphics.Rect): void;
			getImportantForAccessibility(): number;
			setSoundEffectsEnabled(arg1: boolean): void;
			setDrawingCacheQuality(arg1: number): void;
			isSaveFromParentEnabled(): boolean;
			onFilterTouchEventForSecurity(arg1: android.view.MotionEvent): boolean;
			getDrawingCacheQuality(): number;
			isHapticFeedbackEnabled(): boolean;
			setSaveFromParentEnabled(arg1: boolean): void;
			isFocusableInTouchMode(): boolean;
			performAccessibilityAction(arg1: number, arg2: android.os.Bundle): boolean;
			getMeasuredWidthAndState(): number;
			onStartTemporaryDetach(): void;
			setFilterTouchesWhenObscured(arg1: boolean): void;
			setFocusableInTouchMode(arg1: boolean): void;
			getFilterTouchesWhenObscured(): boolean;
			setImportantForAccessibility(arg1: number): void;
			onFinishTemporaryDetach(): void;
			onCreateInputConnection(arg1: android.view.inputmethod.EditorInfo): android.view.inputmethod.IInputConnection;
			isScrollbarFadingEnabled(): boolean;
			postOnAnimationDelayed(arg1: java.lang.IRunnable, arg2: native.Long): void;
			isVerticalFadingEdgeEnabled(): boolean;
			isVerticalScrollBarEnabled(): boolean;
			setScrollbarFadingEnabled(arg1: boolean): void;
			isHorizontalFadingEdgeEnabled(): boolean;
			getScrollBarFadeDuration(): number;
			setScrollBarFadeDuration(arg1: number): void;
			setVerticalScrollBarEnabled(arg1: boolean): void;
			postInvalidateOnAnimation(): void;
			postInvalidateOnAnimation(arg1: number, arg2: number, arg3: number, arg4: number): void;
			setVerticalFadingEdgeEnabled(arg1: boolean): void;
			getMeasuredHeightAndState(): number;
			hasOverlappingRendering(): boolean;
			isHorizontalScrollBarEnabled(): boolean;
			setHorizontalScrollBarEnabled(arg1: boolean): void;
			setDrawingCacheEnabled(arg1: boolean): void;
			getWindowSystemUiVisibility(): number;
			getApplicationWindowToken(): android.os.IIBinder;
			isDuplicateParentStateEnabled(): boolean;
			setLeft(arg1: number): void;
			scrollBy(arg1: number, arg2: number): void;
			buildLayer(): void;
			getSolidColor(): number;
			getPaddingTop(): number;
			getRight(): number;
			getLeft(): number;
			setLayerType(arg1: number, arg2: android.graphics.Paint): void;
			getLayerType(): number;
			scrollTo(arg1: number, arg2: number): void;
			isInEditMode(): boolean;
			setRight(arg1: number): void;
			setLayerPaint(arg1: android.graphics.Paint): void;
			getDisplay(): android.view.Display;
			setPadding(arg1: number, arg2: number, arg3: number, arg4: number): void;
			getHitRect(arg1: android.graphics.Rect): void;
			postDelayed(arg1: java.lang.IRunnable, arg2: native.Long): boolean;
			computeScroll(): void;
			setActivated(arg1: boolean): void;
			onDragEvent(arg1: android.view.DragEvent): boolean;
			forceLayout(): void;
			findViewById(arg1: number): android.view.View;
			isActivated(): boolean;
			setTag(arg1: number, arg2: any): void;
			setTag(arg1: any): void;
			static resolveSize(arg1: number, arg2: number): number;
			getAnimation(): android.view.animation.Animation;
			getPaddingEnd(): number;
			setAnimation(arg1: android.view.animation.Animation): void;
			measure(arg1: number, arg2: number): void;
			getPivotY(): number;
			setAlpha(arg1: native.Float): void;
			getBottom(): number;
			setBottom(arg1: number): void;
			setScrollY(arg1: number): void;
			getScrollY(): number;
			getScrollX(): number;
			getRotation(): number;
			getRotationY(): number;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			getRotationX(): number;
			setRotationX(arg1: native.Float): void;
			setScrollX(arg1: number): void;
			setRotationY(arg1: native.Float): void;
			setScaleY(arg1: native.Float): void;
			setPivotY(arg1: native.Float): void;
			setRotation(arg1: native.Float): void;
			bringToFront(): void;
			getTop(): number;
			setTop(arg1: number): void;
			getPivotX(): number;
			setScaleX(arg1: native.Float): void;
			setPivotX(arg1: native.Float): void;
			setId(arg1: number): void;
			setY(arg1: native.Float): void;
			static generateViewId(): number;
			setTextDirection(arg1: number): void;
			getTextAlignment(): number;
			setTextAlignment(arg1: number): void;
			setOverScrollMode(arg1: number): void;
			getTextDirection(): number;
			unscheduleDrawable(arg1: android.graphics.drawable.Drawable): void;
			unscheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable): void;
			setBackgroundResource(arg1: number): void;
			setMinimumHeight(arg1: number): void;
			getMinimumWidth(): number;
			setBackgroundDrawable(arg1: android.graphics.drawable.Drawable): void;
			static resolveSizeAndState(arg1: number, arg2: number, arg3: number): number;
			isHardwareAccelerated(): boolean;
			getPaddingStart(): number;
			findViewWithTag(arg1: any): android.view.View;
			static combineMeasuredStates(arg1: number, arg2: number): number;
			getMinimumHeight(): number;
			setMinimumWidth(arg1: number): void;
			invalidateDrawable(arg1: android.graphics.drawable.Drawable): void;
			setPaddingRelative(arg1: number, arg2: number, arg3: number, arg4: number): void;
			getPaddingRight(): number;
			setBackgroundColor(arg1: number): void;
			isPaddingRelative(): boolean;
			getDrawableState(): native.Array<number>;
			scheduleDrawable(arg1: android.graphics.drawable.Drawable, arg2: java.lang.IRunnable, arg3: native.Long): void;
			getPaddingBottom(): number;
			refreshDrawableState(): void;
			getPaddingLeft(): number;
			getLocationInWindow(arg1: native.Array<number>): void;
			getViewTreeObserver(): android.view.ViewTreeObserver;
			startAnimation(arg1: android.view.animation.Animation): void;
			clearAnimation(): void;
			getOverScrollMode(): number;
			playSoundEffect(arg1: number): void;
			getSystemUiVisibility(): number;
			performHapticFeedback(arg1: number): boolean;
			performHapticFeedback(arg1: number, arg2: number): boolean;
			setSystemUiVisibility(arg1: number): void;
			setOnSystemUiVisibilityChangeListener(arg1: android.view.View.IOnSystemUiVisibilityChangeListener): void;
			onWindowSystemUiVisibilityChanged(arg1: number): void;
			toString(): string;
			getParent(): android.view.IViewParent;
			getResources(): android.content.res.Resources;
			getContext(): android.content.Context;
			getId(): number;
			isOpaque(): boolean;
			getHandler(): android.os.Handler;
			getAlpha(): number;
			getBackground(): android.graphics.drawable.Drawable;
			setBackground(arg1: android.graphics.drawable.Drawable): void;
			getHeight(): number;
			getLocationOnScreen(arg1: native.Array<number>): void;
			getWidth(): number;
			getX(): number;
			getY(): number;
			invalidate(arg1: android.graphics.Rect): void;
			invalidate(arg1: number, arg2: number, arg3: number, arg4: number): void;
			invalidate(): void;
			isFocused(): boolean;
			requestFocus(arg1: number): boolean;
			requestFocus(arg1: number, arg2: android.graphics.Rect): boolean;
			requestFocus(): boolean;
			isEnabled(): boolean;
			isFocusable(): boolean;
			layout(arg1: number, arg2: number, arg3: number, arg4: number): void;
			getBaseline(): number;
			hasFocus(): boolean;
			setEnabled(arg1: boolean): void;
			setFocusable(arg1: boolean): void;
			getMatrix(): android.graphics.Matrix;
			getScaleX(): number;
			getScaleY(): number;
			draw(arg1: android.graphics.Canvas): void;
			dispatchKeyEvent(arg1: android.view.KeyEvent): boolean;
			startDrag(arg1: android.content.ClipData, arg2: android.view.View.DragShadowBuilder, arg3: any, arg4: number): boolean;
			getLabelFor(): number;
			setLabelFor(arg1: number): void;
			isSelected(): boolean;
			setSelected(arg1: boolean): void;
			isPressed(): boolean;
			setPressed(arg1: boolean): void;
			static inflate(arg1: android.content.Context, arg2: number, arg3: android.view.ViewGroup): android.view.View;
			isDirty(): boolean;
			post(arg1: java.lang.IRunnable): boolean;
			static getDefaultSize(arg1: number, arg2: number): number;
			getRootView(): android.view.View;
			getTag(): any;
			getTag(arg1: number): any;
		}
		export module View {
			export interface IOnLayoutChangeListener {
				onLayoutChange(arg1: android.view.View, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number): void;
			}
			export class OnSystemUiVisibilityChangeListener implements android.view.View.IOnSystemUiVisibilityChangeListener {
				constructor(implementation: android.view.View.IOnSystemUiVisibilityChangeListener);
				onSystemUiVisibilityChange(arg1: number): void;
			}
			export interface IOnSystemUiVisibilityChangeListener {
				onSystemUiVisibilityChange(arg1: number): void;
			}
			export interface IOnCreateContextMenuListener {
				onCreateContextMenu(arg1: android.view.IContextMenu, arg2: android.view.View, arg3: android.view.ContextMenu.IContextMenuInfo): void;
			}
			export class DragShadowBuilder extends java.lang.Object {
				constructor(arg1: android.view.View);
				constructor();
				static class: java.lang.Class<android.view.View.DragShadowBuilder>;
				onDrawShadow(arg1: android.graphics.Canvas): void;
				onProvideShadowMetrics(arg1: android.graphics.Point, arg2: android.graphics.Point): void;
				getView(): android.view.View;
			}
			export class OnKeyListener implements android.view.View.IOnKeyListener {
				constructor(implementation: android.view.View.IOnKeyListener);
				onKey(arg1: android.view.View, arg2: number, arg3: android.view.KeyEvent): boolean;
			}
			export class BaseSavedState extends android.view.AbsSavedState {
				constructor(arg1: android.os.Parcel);
				constructor(arg1: android.os.IParcelable);
				static CREATOR: android.os.Parcelable.ICreator<android.view.View.BaseSavedState>;
				static class: java.lang.Class<android.view.View.BaseSavedState>;
			}
			export class OnHoverListener implements android.view.View.IOnHoverListener {
				constructor(implementation: android.view.View.IOnHoverListener);
				onHover(arg1: android.view.View, arg2: android.view.MotionEvent): boolean;
			}
			export class MeasureSpec extends java.lang.Object {
				constructor();
				static UNSPECIFIED: number;
				static EXACTLY: number;
				static AT_MOST: number;
				static class: java.lang.Class<android.view.View.MeasureSpec>;
				static getMode(arg1: number): number;
				static makeMeasureSpec(arg1: number, arg2: number): number;
				static toString(arg1: number): string;
				static getSize(arg1: number): number;
				toString(): string;
			}
			export interface IOnAttachStateChangeListener {
				onViewDetachedFromWindow(arg1: android.view.View): void;
				onViewAttachedToWindow(arg1: android.view.View): void;
			}
			export interface IOnClickListener {
				onClick(arg1: android.view.View): void;
			}
			export class OnFocusChangeListener implements android.view.View.IOnFocusChangeListener {
				constructor(implementation: android.view.View.IOnFocusChangeListener);
				onFocusChange(arg1: android.view.View, arg2: boolean): void;
			}
			export class OnLongClickListener implements android.view.View.IOnLongClickListener {
				constructor(implementation: android.view.View.IOnLongClickListener);
				onLongClick(arg1: android.view.View): boolean;
			}
			export class OnAttachStateChangeListener implements android.view.View.IOnAttachStateChangeListener {
				constructor(implementation: android.view.View.IOnAttachStateChangeListener);
				onViewDetachedFromWindow(arg1: android.view.View): void;
				onViewAttachedToWindow(arg1: android.view.View): void;
			}
			export interface IOnHoverListener {
				onHover(arg1: android.view.View, arg2: android.view.MotionEvent): boolean;
			}
			export interface IOnTouchListener {
				onTouch(arg1: android.view.View, arg2: android.view.MotionEvent): boolean;
			}
			export class OnLayoutChangeListener implements android.view.View.IOnLayoutChangeListener {
				constructor(implementation: android.view.View.IOnLayoutChangeListener);
				onLayoutChange(arg1: android.view.View, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number): void;
			}
			export interface IOnLongClickListener {
				onLongClick(arg1: android.view.View): boolean;
			}
			export class OnCreateContextMenuListener implements android.view.View.IOnCreateContextMenuListener {
				constructor(implementation: android.view.View.IOnCreateContextMenuListener);
				onCreateContextMenu(arg1: android.view.IContextMenu, arg2: android.view.View, arg3: android.view.ContextMenu.IContextMenuInfo): void;
			}
			export class OnGenericMotionListener implements android.view.View.IOnGenericMotionListener {
				constructor(implementation: android.view.View.IOnGenericMotionListener);
				onGenericMotion(arg1: android.view.View, arg2: android.view.MotionEvent): boolean;
			}
			export class OnDragListener implements android.view.View.IOnDragListener {
				constructor(implementation: android.view.View.IOnDragListener);
				onDrag(arg1: android.view.View, arg2: android.view.DragEvent): boolean;
			}
			export interface IOnFocusChangeListener {
				onFocusChange(arg1: android.view.View, arg2: boolean): void;
			}
			export class OnClickListener implements android.view.View.IOnClickListener {
				constructor(implementation: android.view.View.IOnClickListener);
				onClick(arg1: android.view.View): void;
			}
			export interface IOnGenericMotionListener {
				onGenericMotion(arg1: android.view.View, arg2: android.view.MotionEvent): boolean;
			}
			export class AccessibilityDelegate extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.view.View.AccessibilityDelegate>;
				onInitializeAccessibilityEvent(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): void;
				sendAccessibilityEventUnchecked(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): void;
				dispatchPopulateAccessibilityEvent(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): boolean;
				onRequestSendAccessibilityEvent(arg1: android.view.ViewGroup, arg2: android.view.View, arg3: android.view.accessibility.AccessibilityEvent): boolean;
				onInitializeAccessibilityNodeInfo(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityNodeInfo): void;
				onPopulateAccessibilityEvent(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): void;
				getAccessibilityNodeProvider(arg1: android.view.View): android.view.accessibility.AccessibilityNodeProvider;
				sendAccessibilityEvent(arg1: android.view.View, arg2: number): void;
				performAccessibilityAction(arg1: android.view.View, arg2: number, arg3: android.os.Bundle): boolean;
			}
			export interface IOnDragListener {
				onDrag(arg1: android.view.View, arg2: android.view.DragEvent): boolean;
			}
			export interface IOnKeyListener {
				onKey(arg1: android.view.View, arg2: number, arg3: android.view.KeyEvent): boolean;
			}
			export class OnTouchListener implements android.view.View.IOnTouchListener {
				constructor(implementation: android.view.View.IOnTouchListener);
				onTouch(arg1: android.view.View, arg2: android.view.MotionEvent): boolean;
			}
		}
		export class LayoutInflater extends java.lang.Object {
			static class: java.lang.Class<android.view.LayoutInflater>;
			Factory2: android.view.LayoutInflater.IFactory2;
			Filter: android.view.LayoutInflater.IFilter;
			Factory: android.view.LayoutInflater.IFactory;
			getFactory2(): android.view.LayoutInflater.IFactory2;
			setFactory2(arg1: android.view.LayoutInflater.IFactory2): void;
			createView(arg1: java.lang.String, arg2: java.lang.String, arg3: android.util.IAttributeSet): android.view.View;
			createView(arg1: string, arg2: string, arg3: android.util.IAttributeSet): android.view.View;
			cloneInContext(arg1: android.content.Context): android.view.LayoutInflater;
			getFactory(): android.view.LayoutInflater.IFactory;
			getContext(): android.content.Context;
			getFilter(): android.view.LayoutInflater.IFilter;
			setFilter(arg1: android.view.LayoutInflater.IFilter): void;
			static from(arg1: android.content.Context): android.view.LayoutInflater;
			inflate(arg1: org.xmlpull.v1.IXmlPullParser, arg2: android.view.ViewGroup, arg3: boolean): android.view.View;
			inflate(arg1: number, arg2: android.view.ViewGroup): android.view.View;
			inflate(arg1: org.xmlpull.v1.IXmlPullParser, arg2: android.view.ViewGroup): android.view.View;
			inflate(arg1: number, arg2: android.view.ViewGroup, arg3: boolean): android.view.View;
			setFactory(arg1: android.view.LayoutInflater.IFactory): void;
		}
		export module LayoutInflater {
			export class Factory2 implements android.view.LayoutInflater.IFactory, android.view.LayoutInflater.IFactory2 {
				constructor(implementation: android.view.LayoutInflater.IFactory2);
				onCreateView(arg1: android.view.View, arg2: java.lang.String, arg3: android.content.Context, arg4: android.util.IAttributeSet): android.view.View;
				onCreateView(arg1: android.view.View, arg2: string, arg3: android.content.Context, arg4: android.util.IAttributeSet): android.view.View;
				onCreateView(arg1: string, arg2: android.content.Context, arg3: android.util.IAttributeSet): android.view.View;
			}
			export class Filter implements android.view.LayoutInflater.IFilter {
				constructor(implementation: android.view.LayoutInflater.IFilter);
				onLoadClass(arg1: java.lang.Class<any>): boolean;
			}
			export interface IFilter {
				onLoadClass(arg1: java.lang.Class<any>): boolean;
			}
			export interface IFactory {
				onCreateView(arg1: string, arg2: android.content.Context, arg3: android.util.IAttributeSet): android.view.View;
			}
			export class Factory implements android.view.LayoutInflater.IFactory {
				constructor(implementation: android.view.LayoutInflater.IFactory);
				onCreateView(arg1: java.lang.String, arg2: android.content.Context, arg3: android.util.IAttributeSet): android.view.View;
				onCreateView(arg1: string, arg2: android.content.Context, arg3: android.util.IAttributeSet): android.view.View;
			}
			export interface IFactory2 extends android.view.LayoutInflater.IFactory {
				onCreateView(arg1: android.view.View, arg2: string, arg3: android.content.Context, arg4: android.util.IAttributeSet): android.view.View;
				onCreateView(arg1: string, arg2: android.content.Context, arg3: android.util.IAttributeSet): android.view.View;
			}
		}
		export class SurfaceView extends android.view.View {
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet);
			constructor(arg1: android.content.Context);
			constructor(arg1: android.content.Context, arg2: android.util.IAttributeSet, arg3: number);
			static class: java.lang.Class<android.view.SurfaceView>;
			setSecure(arg1: boolean): void;
			setVisibility(arg1: number): void;
			setZOrderMediaOverlay(arg1: boolean): void;
			setZOrderOnTop(arg1: boolean): void;
			gatherTransparentRegion(arg1: android.graphics.Region): boolean;
			getHolder(): android.view.ISurfaceHolder;
			draw(arg1: android.graphics.Canvas): void;
		}
		export class InflateException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor();
			static class: java.lang.Class<android.view.InflateException>;
		}
		export class WindowManager implements android.view.IViewManager, android.view.IWindowManager {
			constructor(implementation: android.view.IWindowManager);
			removeViewImmediate(arg1: android.view.View): void;
			getDefaultDisplay(): android.view.Display;
			addView(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
			removeView(arg1: android.view.View): void;
			updateViewLayout(arg1: android.view.View, arg2: android.view.ViewGroup.LayoutParams): void;
		}
		export module WindowManager {
			export class InvalidDisplayException extends java.lang.RuntimeException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.view.WindowManager.InvalidDisplayException>;
			}
			export class BadTokenException extends java.lang.RuntimeException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<android.view.WindowManager.BadTokenException>;
			}
			export class LayoutParams extends android.view.ViewGroup.LayoutParams implements android.os.IParcelable {
				constructor();
				constructor(arg1: android.os.Parcel);
				constructor(arg1: number);
				constructor(arg1: number, arg2: number);
				constructor(arg1: number, arg2: number, arg3: number);
				constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number);
				constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number);
				x: number;
				y: number;
				horizontalWeight: native.Float;
				verticalWeight: native.Float;
				type: number;
				static FIRST_APPLICATION_WINDOW: number;
				static TYPE_BASE_APPLICATION: number;
				static TYPE_APPLICATION: number;
				static TYPE_APPLICATION_STARTING: number;
				static LAST_APPLICATION_WINDOW: number;
				static FIRST_SUB_WINDOW: number;
				static TYPE_APPLICATION_PANEL: number;
				static TYPE_APPLICATION_MEDIA: number;
				static TYPE_APPLICATION_SUB_PANEL: number;
				static TYPE_APPLICATION_ATTACHED_DIALOG: number;
				static LAST_SUB_WINDOW: number;
				static FIRST_SYSTEM_WINDOW: number;
				static TYPE_STATUS_BAR: number;
				static TYPE_SEARCH_BAR: number;
				static TYPE_PHONE: number;
				static TYPE_SYSTEM_ALERT: number;
				static TYPE_KEYGUARD: number;
				static TYPE_TOAST: number;
				static TYPE_SYSTEM_OVERLAY: number;
				static TYPE_PRIORITY_PHONE: number;
				static TYPE_SYSTEM_DIALOG: number;
				static TYPE_KEYGUARD_DIALOG: number;
				static TYPE_SYSTEM_ERROR: number;
				static TYPE_INPUT_METHOD: number;
				static TYPE_INPUT_METHOD_DIALOG: number;
				static TYPE_WALLPAPER: number;
				static TYPE_STATUS_BAR_PANEL: number;
				static LAST_SYSTEM_WINDOW: number;
				static MEMORY_TYPE_NORMAL: number;
				static MEMORY_TYPE_HARDWARE: number;
				static MEMORY_TYPE_GPU: number;
				static MEMORY_TYPE_PUSH_BUFFERS: number;
				memoryType: number;
				static FLAG_ALLOW_LOCK_WHILE_SCREEN_ON: number;
				static FLAG_DIM_BEHIND: number;
				static FLAG_BLUR_BEHIND: number;
				static FLAG_NOT_FOCUSABLE: number;
				static FLAG_NOT_TOUCHABLE: number;
				static FLAG_NOT_TOUCH_MODAL: number;
				static FLAG_TOUCHABLE_WHEN_WAKING: number;
				static FLAG_KEEP_SCREEN_ON: number;
				static FLAG_LAYOUT_IN_SCREEN: number;
				static FLAG_LAYOUT_NO_LIMITS: number;
				static FLAG_FULLSCREEN: number;
				static FLAG_FORCE_NOT_FULLSCREEN: number;
				static FLAG_DITHER: number;
				static FLAG_SECURE: number;
				static FLAG_SCALED: number;
				static FLAG_IGNORE_CHEEK_PRESSES: number;
				static FLAG_LAYOUT_INSET_DECOR: number;
				static FLAG_ALT_FOCUSABLE_IM: number;
				static FLAG_WATCH_OUTSIDE_TOUCH: number;
				static FLAG_SHOW_WHEN_LOCKED: number;
				static FLAG_SHOW_WALLPAPER: number;
				static FLAG_TURN_SCREEN_ON: number;
				static FLAG_DISMISS_KEYGUARD: number;
				static FLAG_SPLIT_TOUCH: number;
				static FLAG_HARDWARE_ACCELERATED: number;
				flags: number;
				static SOFT_INPUT_MASK_STATE: number;
				static SOFT_INPUT_STATE_UNSPECIFIED: number;
				static SOFT_INPUT_STATE_UNCHANGED: number;
				static SOFT_INPUT_STATE_HIDDEN: number;
				static SOFT_INPUT_STATE_ALWAYS_HIDDEN: number;
				static SOFT_INPUT_STATE_VISIBLE: number;
				static SOFT_INPUT_STATE_ALWAYS_VISIBLE: number;
				static SOFT_INPUT_MASK_ADJUST: number;
				static SOFT_INPUT_ADJUST_UNSPECIFIED: number;
				static SOFT_INPUT_ADJUST_RESIZE: number;
				static SOFT_INPUT_ADJUST_PAN: number;
				static SOFT_INPUT_ADJUST_NOTHING: number;
				static SOFT_INPUT_IS_FORWARD_NAVIGATION: number;
				softInputMode: number;
				gravity: number;
				horizontalMargin: native.Float;
				verticalMargin: native.Float;
				format: number;
				windowAnimations: number;
				alpha: native.Float;
				dimAmount: native.Float;
				static BRIGHTNESS_OVERRIDE_NONE: native.Float;
				static BRIGHTNESS_OVERRIDE_OFF: native.Float;
				static BRIGHTNESS_OVERRIDE_FULL: native.Float;
				screenBrightness: native.Float;
				buttonBrightness: native.Float;
				token: android.os.IIBinder;
				packageName: java.lang.String;
				screenOrientation: number;
				systemUiVisibility: number;
				static CREATOR: android.os.Parcelable.ICreator<android.view.WindowManager.LayoutParams>;
				static LAYOUT_CHANGED: number;
				static TYPE_CHANGED: number;
				static FLAGS_CHANGED: number;
				static FORMAT_CHANGED: number;
				static ANIMATION_CHANGED: number;
				static DIM_AMOUNT_CHANGED: number;
				static TITLE_CHANGED: number;
				static ALPHA_CHANGED: number;
				static MEMORY_TYPE_CHANGED: number;
				static SOFT_INPUT_MODE_CHANGED: number;
				static SCREEN_ORIENTATION_CHANGED: number;
				static SCREEN_BRIGHTNESS_CHANGED: number;
				static class: java.lang.Class<android.view.WindowManager.LayoutParams>;
				Title: java.lang.ICharSequence;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				copyFrom(arg1: android.view.WindowManager.LayoutParams): number;
				static mayUseInputMethod(arg1: number): boolean;
				toString(): string;
				debug(arg1: java.lang.String): string;
				debug(arg1: string): string;
				getTitle(): java.lang.ICharSequence;
				setTitle(arg1: java.lang.ICharSequence): void;
				setTitle(arg1: string): void;
			}
		}
		export interface IViewParent {
			requestLayout(): void;
			focusSearch(arg1: android.view.View, arg2: number): android.view.View;
			requestChildFocus(arg1: android.view.View, arg2: android.view.View): void;
			clearChildFocus(arg1: android.view.View): void;
			requestDisallowInterceptTouchEvent(arg1: boolean): void;
			invalidateChildInParent(arg1: native.Array<number>, arg2: android.graphics.Rect): android.view.IViewParent;
			focusableViewAvailable(arg1: android.view.View): void;
			recomputeViewAttributes(arg1: android.view.View): void;
			showContextMenuForChild(arg1: android.view.View): boolean;
			startActionModeForChild(arg1: android.view.View, arg2: android.view.ActionMode.ICallback): android.view.ActionMode;
			requestSendAccessibilityEvent(arg1: android.view.View, arg2: android.view.accessibility.AccessibilityEvent): boolean;
			requestChildRectangleOnScreen(arg1: android.view.View, arg2: android.graphics.Rect, arg3: boolean): boolean;
			createContextMenu(arg1: android.view.IContextMenu): void;
			isLayoutRequested(): boolean;
			bringChildToFront(arg1: android.view.View): void;
			getChildVisibleRect(arg1: android.view.View, arg2: android.graphics.Rect, arg3: android.graphics.Point): boolean;
			invalidateChild(arg1: android.view.View, arg2: android.graphics.Rect): void;
			requestFitSystemWindows(): void;
			getParentForAccessibility(): android.view.IViewParent;
			requestTransparentRegion(arg1: android.view.View): void;
			childDrawableStateChanged(arg1: android.view.View): void;
			getParent(): android.view.IViewParent;
		}
		export class ScaleGestureDetector extends java.lang.Object {
			constructor(arg1: android.content.Context, arg2: android.view.ScaleGestureDetector.IOnScaleGestureListener);
			static class: java.lang.Class<android.view.ScaleGestureDetector>;
			onTouchEvent(arg1: android.view.MotionEvent): boolean;
			getEventTime(): any;
			getFocusY(): number;
			getTimeDelta(): any;
			getFocusX(): number;
			getCurrentSpanX(): number;
			getCurrentSpan(): number;
			getPreviousSpan(): number;
			getCurrentSpanY(): number;
			getPreviousSpanX(): number;
			getScaleFactor(): number;
			getPreviousSpanY(): number;
			isInProgress(): boolean;
		}
		export module ScaleGestureDetector {
			export interface IOnScaleGestureListener {
				onScaleBegin(arg1: android.view.ScaleGestureDetector): boolean;
				onScale(arg1: android.view.ScaleGestureDetector): boolean;
				onScaleEnd(arg1: android.view.ScaleGestureDetector): void;
			}
			export class OnScaleGestureListener implements android.view.ScaleGestureDetector.IOnScaleGestureListener {
				constructor(implementation: android.view.ScaleGestureDetector.IOnScaleGestureListener);
				onScaleBegin(arg1: android.view.ScaleGestureDetector): boolean;
				onScale(arg1: android.view.ScaleGestureDetector): boolean;
				onScaleEnd(arg1: android.view.ScaleGestureDetector): void;
			}
			export class SimpleOnScaleGestureListener extends java.lang.Object implements android.view.ScaleGestureDetector.IOnScaleGestureListener {
				constructor();
				static class: java.lang.Class<android.view.ScaleGestureDetector.SimpleOnScaleGestureListener>;
				onScaleBegin(arg1: android.view.ScaleGestureDetector): boolean;
				onScale(arg1: android.view.ScaleGestureDetector): boolean;
				onScaleEnd(arg1: android.view.ScaleGestureDetector): void;
			}
		}
		export module inputmethod {
			export class InputMethod implements android.view.inputmethod.IInputMethod {
				constructor(implementation: android.view.inputmethod.IInputMethod);
				static SERVICE_INTERFACE: java.lang.String;
				static SERVICE_META_DATA: java.lang.String;
				static SHOW_EXPLICIT: number;
				static SHOW_FORCED: number;
				startInput(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.EditorInfo): void;
				showSoftInput(arg1: number, arg2: android.os.ResultReceiver): void;
				hideSoftInput(arg1: number, arg2: android.os.ResultReceiver): void;
				bindInput(arg1: android.view.inputmethod.InputBinding): void;
				unbindInput(): void;
				attachToken(arg1: android.os.IIBinder): void;
				createSession(arg1: android.view.inputmethod.InputMethod.ISessionCallback): void;
				restartInput(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.EditorInfo): void;
				revokeSession(arg1: android.view.inputmethod.IInputMethodSession): void;
				setSessionEnabled(arg1: android.view.inputmethod.IInputMethodSession, arg2: boolean): void;
				changeInputMethodSubtype(arg1: android.view.inputmethod.InputMethodSubtype): void;
			}
			export module InputMethod {
				export interface ISessionCallback {
					sessionCreated(arg1: android.view.inputmethod.IInputMethodSession): void;
				}
				export class SessionCallback implements android.view.inputmethod.InputMethod.ISessionCallback {
					constructor(implementation: android.view.inputmethod.InputMethod.ISessionCallback);
					sessionCreated(arg1: android.view.inputmethod.IInputMethodSession): void;
				}
			}
			export class InputMethodSession implements android.view.inputmethod.IInputMethodSession {
				constructor(implementation: android.view.inputmethod.IInputMethodSession);
				dispatchTrackballEvent(arg1: number, arg2: android.view.MotionEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				dispatchGenericMotionEvent(arg1: number, arg2: android.view.MotionEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				finishInput(): void;
				viewClicked(arg1: boolean): void;
				displayCompletions(arg1: native.Array<android.view.inputmethod.CompletionInfo>): void;
				updateExtractedText(arg1: number, arg2: android.view.inputmethod.ExtractedText): void;
				appPrivateCommand(arg1: java.lang.String, arg2: android.os.Bundle): void;
				appPrivateCommand(arg1: string, arg2: android.os.Bundle): void;
				toggleSoftInput(arg1: number, arg2: number): void;
				updateSelection(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
				dispatchKeyEvent(arg1: number, arg2: android.view.KeyEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				updateCursor(arg1: android.graphics.Rect): void;
			}
			export module InputMethodSession {
				export interface IEventCallback {
					finishedEvent(arg1: number, arg2: boolean): void;
				}
				export class EventCallback implements android.view.inputmethod.InputMethodSession.IEventCallback {
					constructor(implementation: android.view.inputmethod.InputMethodSession.IEventCallback);
					finishedEvent(arg1: number, arg2: boolean): void;
				}
			}
			export interface IInputConnection {
				setSelection(arg1: number, arg2: number): boolean;
				beginBatchEdit(): boolean;
				endBatchEdit(): boolean;
				commitText(arg1: string, arg2: number): boolean;
				sendKeyEvent(arg1: android.view.KeyEvent): boolean;
				getExtractedText(arg1: android.view.inputmethod.ExtractedTextRequest, arg2: number): android.view.inputmethod.ExtractedText;
				deleteSurroundingText(arg1: number, arg2: number): boolean;
				setComposingText(arg1: string, arg2: number): boolean;
				setComposingRegion(arg1: number, arg2: number): boolean;
				finishComposingText(): boolean;
				commitCompletion(arg1: android.view.inputmethod.CompletionInfo): boolean;
				commitCorrection(arg1: android.view.inputmethod.CorrectionInfo): boolean;
				getTextBeforeCursor(arg1: number, arg2: number): java.lang.ICharSequence;
				getCursorCapsMode(arg1: number): number;
				getTextAfterCursor(arg1: number, arg2: number): java.lang.ICharSequence;
				reportFullscreenMode(arg1: boolean): boolean;
				performPrivateCommand(arg1: string, arg2: android.os.Bundle): boolean;
				clearMetaKeyStates(arg1: number): boolean;
				performEditorAction(arg1: number): boolean;
				performContextMenuAction(arg1: number): boolean;
				getSelectedText(arg1: number): java.lang.ICharSequence;
			}
			export module IInputConnection {
				var GET_TEXT_WITH_STYLES: number;
				var GET_EXTRACTED_TEXT_MONITOR: number;
			}
			export interface IInputMethodSession {
				dispatchTrackballEvent(arg1: number, arg2: android.view.MotionEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				dispatchGenericMotionEvent(arg1: number, arg2: android.view.MotionEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				finishInput(): void;
				viewClicked(arg1: boolean): void;
				displayCompletions(arg1: native.Array<android.view.inputmethod.CompletionInfo>): void;
				updateExtractedText(arg1: number, arg2: android.view.inputmethod.ExtractedText): void;
				appPrivateCommand(arg1: string, arg2: android.os.Bundle): void;
				toggleSoftInput(arg1: number, arg2: number): void;
				updateSelection(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
				dispatchKeyEvent(arg1: number, arg2: android.view.KeyEvent, arg3: android.view.inputmethod.InputMethodSession.IEventCallback): void;
				updateCursor(arg1: android.graphics.Rect): void;
			}
			export class ExtractedText extends java.lang.Object implements android.os.IParcelable {
				constructor();
				text: java.lang.ICharSequence;
				startOffset: number;
				partialStartOffset: number;
				partialEndOffset: number;
				selectionStart: number;
				selectionEnd: number;
				static FLAG_SINGLE_LINE: number;
				static FLAG_SELECTING: number;
				flags: number;
				static CREATOR: android.os.Parcelable.ICreator<android.view.inputmethod.ExtractedText>;
				static class: java.lang.Class<android.view.inputmethod.ExtractedText>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
			}
			export class InputMethodInfo extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: android.content.Context, arg2: android.content.pm.ResolveInfo);
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.ICharSequence, arg4: java.lang.String);
				constructor(arg1: string, arg2: string, arg3: string, arg4: string);
				static CREATOR: android.os.Parcelable.ICreator<android.view.inputmethod.InputMethodInfo>;
				static class: java.lang.Class<android.view.inputmethod.InputMethodInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getServiceInfo(): android.content.pm.ServiceInfo;
				loadLabel(arg1: android.content.pm.PackageManager): java.lang.ICharSequence;
				getSubtypeAt(arg1: number): android.view.inputmethod.InputMethodSubtype;
				loadIcon(arg1: android.content.pm.PackageManager): android.graphics.drawable.Drawable;
				getSettingsActivity(): string;
				getSubtypeCount(): number;
				getServiceName(): string;
				getIsDefaultResourceId(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getId(): string;
				getPackageName(): string;
				getComponent(): android.content.ComponentName;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
			export class InputMethodSubtype extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: number, arg2: number, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: boolean, arg7: boolean, arg8: number);
				constructor(arg1: number, arg2: number, arg3: string, arg4: string, arg5: string, arg6: boolean, arg7: boolean, arg8: number);
				constructor(arg1: number, arg2: number, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: boolean, arg7: boolean);
				constructor(arg1: number, arg2: number, arg3: string, arg4: string, arg5: string, arg6: boolean, arg7: boolean);
				static CREATOR: android.os.Parcelable.ICreator<android.view.inputmethod.InputMethodSubtype>;
				static class: java.lang.Class<android.view.inputmethod.InputMethodSubtype>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getMode(): string;
				isAuxiliary(): boolean;
				getNameResId(): number;
				getIconResId(): number;
				getExtraValue(): string;
				overridesImplicitlyEnabledSubtype(): boolean;
				getExtraValueOf(arg1: java.lang.String): string;
				getExtraValueOf(arg1: string): string;
				containsExtraValueKey(arg1: java.lang.String): boolean;
				containsExtraValueKey(arg1: string): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				getDisplayName(arg1: android.content.Context, arg2: java.lang.String, arg3: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				getDisplayName(arg1: android.content.Context, arg2: string, arg3: android.content.pm.ApplicationInfo): java.lang.ICharSequence;
				getLocale(): string;
			}
			export class InputBinding extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: android.view.inputmethod.IInputConnection, arg2: android.os.IIBinder, arg3: number, arg4: number);
				constructor(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.InputBinding);
				static CREATOR: android.os.Parcelable.ICreator<android.view.inputmethod.InputBinding>;
				static class: java.lang.Class<android.view.inputmethod.InputBinding>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getPid(): number;
				getUid(): number;
				getConnectionToken(): android.os.IIBinder;
				toString(): string;
				getConnection(): android.view.inputmethod.IInputConnection;
			}
			export class ExtractedTextRequest extends java.lang.Object implements android.os.IParcelable {
				constructor();
				token: number;
				flags: number;
				hintMaxLines: number;
				hintMaxChars: number;
				static CREATOR: android.os.Parcelable.ICreator<android.view.inputmethod.ExtractedTextRequest>;
				static class: java.lang.Class<android.view.inputmethod.ExtractedTextRequest>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
			}
			export class InputConnection implements android.view.inputmethod.IInputConnection {
				constructor(implementation: android.view.inputmethod.IInputConnection);
				static GET_TEXT_WITH_STYLES: number;
				static GET_EXTRACTED_TEXT_MONITOR: number;
				setSelection(arg1: number, arg2: number): boolean;
				beginBatchEdit(): boolean;
				endBatchEdit(): boolean;
				commitText(arg1: java.lang.ICharSequence, arg2: number): boolean;
				commitText(arg1: string, arg2: number): boolean;
				sendKeyEvent(arg1: android.view.KeyEvent): boolean;
				getExtractedText(arg1: android.view.inputmethod.ExtractedTextRequest, arg2: number): android.view.inputmethod.ExtractedText;
				deleteSurroundingText(arg1: number, arg2: number): boolean;
				setComposingText(arg1: java.lang.ICharSequence, arg2: number): boolean;
				setComposingText(arg1: string, arg2: number): boolean;
				setComposingRegion(arg1: number, arg2: number): boolean;
				finishComposingText(): boolean;
				commitCompletion(arg1: android.view.inputmethod.CompletionInfo): boolean;
				commitCorrection(arg1: android.view.inputmethod.CorrectionInfo): boolean;
				getTextBeforeCursor(arg1: number, arg2: number): java.lang.ICharSequence;
				getCursorCapsMode(arg1: number): number;
				getTextAfterCursor(arg1: number, arg2: number): java.lang.ICharSequence;
				reportFullscreenMode(arg1: boolean): boolean;
				performPrivateCommand(arg1: java.lang.String, arg2: android.os.Bundle): boolean;
				performPrivateCommand(arg1: string, arg2: android.os.Bundle): boolean;
				clearMetaKeyStates(arg1: number): boolean;
				performEditorAction(arg1: number): boolean;
				performContextMenuAction(arg1: number): boolean;
				getSelectedText(arg1: number): java.lang.ICharSequence;
			}
			export class CorrectionInfo extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: number, arg2: java.lang.ICharSequence, arg3: java.lang.ICharSequence);
				constructor(arg1: number, arg2: string, arg3: string);
				static CREATOR: android.os.Parcelable.ICreator<android.view.inputmethod.CorrectionInfo>;
				static class: java.lang.Class<android.view.inputmethod.CorrectionInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getNewText(): java.lang.ICharSequence;
				getOldText(): java.lang.ICharSequence;
				toString(): string;
				getOffset(): number;
			}
			export class BaseInputConnection extends java.lang.Object implements android.view.inputmethod.IInputConnection {
				constructor(arg1: android.view.View, arg2: boolean);
				static class: java.lang.Class<android.view.inputmethod.BaseInputConnection>;
				setSelection(arg1: number, arg2: number): boolean;
				beginBatchEdit(): boolean;
				endBatchEdit(): boolean;
				commitText(arg1: java.lang.ICharSequence, arg2: number): boolean;
				commitText(arg1: string, arg2: number): boolean;
				sendKeyEvent(arg1: android.view.KeyEvent): boolean;
				getEditable(): android.text.IEditable;
				static setComposingSpans(arg1: android.text.ISpannable): void;
				static getComposingSpanStart(arg1: android.text.ISpannable): number;
				static removeComposingSpans(arg1: android.text.ISpannable): void;
				static getComposingSpanEnd(arg1: android.text.ISpannable): number;
				getExtractedText(arg1: android.view.inputmethod.ExtractedTextRequest, arg2: number): android.view.inputmethod.ExtractedText;
				deleteSurroundingText(arg1: number, arg2: number): boolean;
				setComposingText(arg1: java.lang.ICharSequence, arg2: number): boolean;
				setComposingText(arg1: string, arg2: number): boolean;
				setComposingRegion(arg1: number, arg2: number): boolean;
				finishComposingText(): boolean;
				commitCompletion(arg1: android.view.inputmethod.CompletionInfo): boolean;
				commitCorrection(arg1: android.view.inputmethod.CorrectionInfo): boolean;
				getTextBeforeCursor(arg1: number, arg2: number): java.lang.ICharSequence;
				getCursorCapsMode(arg1: number): number;
				getTextAfterCursor(arg1: number, arg2: number): java.lang.ICharSequence;
				reportFullscreenMode(arg1: boolean): boolean;
				performPrivateCommand(arg1: java.lang.String, arg2: android.os.Bundle): boolean;
				performPrivateCommand(arg1: string, arg2: android.os.Bundle): boolean;
				clearMetaKeyStates(arg1: number): boolean;
				performEditorAction(arg1: number): boolean;
				performContextMenuAction(arg1: number): boolean;
				getSelectedText(arg1: number): java.lang.ICharSequence;
			}
			export interface IInputMethod {
				startInput(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.EditorInfo): void;
				showSoftInput(arg1: number, arg2: android.os.ResultReceiver): void;
				hideSoftInput(arg1: number, arg2: android.os.ResultReceiver): void;
				bindInput(arg1: android.view.inputmethod.InputBinding): void;
				unbindInput(): void;
				attachToken(arg1: android.os.IIBinder): void;
				createSession(arg1: android.view.inputmethod.InputMethod.ISessionCallback): void;
				restartInput(arg1: android.view.inputmethod.IInputConnection, arg2: android.view.inputmethod.EditorInfo): void;
				revokeSession(arg1: android.view.inputmethod.IInputMethodSession): void;
				setSessionEnabled(arg1: android.view.inputmethod.IInputMethodSession, arg2: boolean): void;
				changeInputMethodSubtype(arg1: android.view.inputmethod.InputMethodSubtype): void;
			}
			export module IInputMethod {
				var SERVICE_INTERFACE: java.lang.String;
				var SERVICE_META_DATA: java.lang.String;
				var SHOW_EXPLICIT: number;
				var SHOW_FORCED: number;
			}
			export class InputConnectionWrapper extends java.lang.Object implements android.view.inputmethod.IInputConnection {
				constructor(arg1: android.view.inputmethod.IInputConnection, arg2: boolean);
				static class: java.lang.Class<android.view.inputmethod.InputConnectionWrapper>;
				setSelection(arg1: number, arg2: number): boolean;
				beginBatchEdit(): boolean;
				endBatchEdit(): boolean;
				commitText(arg1: java.lang.ICharSequence, arg2: number): boolean;
				commitText(arg1: string, arg2: number): boolean;
				sendKeyEvent(arg1: android.view.KeyEvent): boolean;
				getExtractedText(arg1: android.view.inputmethod.ExtractedTextRequest, arg2: number): android.view.inputmethod.ExtractedText;
				deleteSurroundingText(arg1: number, arg2: number): boolean;
				setComposingText(arg1: java.lang.ICharSequence, arg2: number): boolean;
				setComposingText(arg1: string, arg2: number): boolean;
				setComposingRegion(arg1: number, arg2: number): boolean;
				finishComposingText(): boolean;
				commitCompletion(arg1: android.view.inputmethod.CompletionInfo): boolean;
				commitCorrection(arg1: android.view.inputmethod.CorrectionInfo): boolean;
				getTextBeforeCursor(arg1: number, arg2: number): java.lang.ICharSequence;
				getCursorCapsMode(arg1: number): number;
				getTextAfterCursor(arg1: number, arg2: number): java.lang.ICharSequence;
				reportFullscreenMode(arg1: boolean): boolean;
				performPrivateCommand(arg1: java.lang.String, arg2: android.os.Bundle): boolean;
				performPrivateCommand(arg1: string, arg2: android.os.Bundle): boolean;
				clearMetaKeyStates(arg1: number): boolean;
				performEditorAction(arg1: number): boolean;
				performContextMenuAction(arg1: number): boolean;
				setTarget(arg1: android.view.inputmethod.IInputConnection): void;
				getSelectedText(arg1: number): java.lang.ICharSequence;
			}
			export class CompletionInfo extends java.lang.Object implements android.os.IParcelable {
				constructor(arg1: native.Long, arg2: number, arg3: java.lang.ICharSequence);
				constructor(arg1: native.Long, arg2: number, arg3: string);
				constructor(arg1: native.Long, arg2: number, arg3: java.lang.ICharSequence, arg4: java.lang.ICharSequence);
				constructor(arg1: native.Long, arg2: number, arg3: string, arg4: string);
				static CREATOR: android.os.Parcelable.ICreator<android.view.inputmethod.CompletionInfo>;
				static class: java.lang.Class<android.view.inputmethod.CompletionInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				toString(): string;
				getId(): any;
				getText(): java.lang.ICharSequence;
				getLabel(): java.lang.ICharSequence;
				getPosition(): number;
			}
			export class InputMethodManager extends java.lang.Object {
				static SHOW_IMPLICIT: number;
				static SHOW_FORCED: number;
				static RESULT_UNCHANGED_SHOWN: number;
				static RESULT_UNCHANGED_HIDDEN: number;
				static RESULT_SHOWN: number;
				static RESULT_HIDDEN: number;
				static HIDE_IMPLICIT_ONLY: number;
				static HIDE_NOT_ALWAYS: number;
				static class: java.lang.Class<android.view.inputmethod.InputMethodManager>;
				CurrentInputMethodSubtype: android.view.inputmethod.InputMethodSubtype;
				showSoftInput(arg1: android.view.View, arg2: number, arg3: android.os.ResultReceiver): boolean;
				showSoftInput(arg1: android.view.View, arg2: number): boolean;
				restartInput(arg1: android.view.View): void;
				viewClicked(arg1: android.view.View): void;
				getEnabledInputMethodSubtypeList(arg1: android.view.inputmethod.InputMethodInfo, arg2: boolean): java.util.IList<android.view.inputmethod.InputMethodSubtype>;
				showInputMethodAndSubtypeEnabler(arg1: java.lang.String): void;
				showInputMethodAndSubtypeEnabler(arg1: string): void;
				getShortcutInputMethodsAndSubtypes(): java.util.IMap<android.view.inputmethod.InputMethodInfo, java.util.IList<android.view.inputmethod.InputMethodSubtype>>;
				setAdditionalInputMethodSubtypes(arg1: java.lang.String, arg2: native.Array<android.view.inputmethod.InputMethodSubtype>): void;
				setAdditionalInputMethodSubtypes(arg1: string, arg2: native.Array<android.view.inputmethod.InputMethodSubtype>): void;
				displayCompletions(arg1: android.view.View, arg2: native.Array<android.view.inputmethod.CompletionInfo>): void;
				updateExtractedText(arg1: android.view.View, arg2: number, arg3: android.view.inputmethod.ExtractedText): void;
				toggleSoftInput(arg1: number, arg2: number): void;
				showStatusIcon(arg1: android.os.IIBinder, arg2: java.lang.String, arg3: number): void;
				showStatusIcon(arg1: android.os.IIBinder, arg2: string, arg3: number): void;
				hideStatusIcon(arg1: android.os.IIBinder): void;
				isAcceptingText(): boolean;
				isFullscreenMode(): boolean;
				getInputMethodList(): java.util.IList<android.view.inputmethod.InputMethodInfo>;
				updateSelection(arg1: android.view.View, arg2: number, arg3: number, arg4: number, arg5: number): void;
				isWatchingCursor(arg1: android.view.View): boolean;
				showInputMethodPicker(): void;
				sendAppPrivateCommand(arg1: android.view.View, arg2: java.lang.String, arg3: android.os.Bundle): void;
				sendAppPrivateCommand(arg1: android.view.View, arg2: string, arg3: android.os.Bundle): void;
				setInputMethod(arg1: android.os.IIBinder, arg2: java.lang.String): void;
				setInputMethod(arg1: android.os.IIBinder, arg2: string): void;
				setInputMethodAndSubtype(arg1: android.os.IIBinder, arg2: java.lang.String, arg3: android.view.inputmethod.InputMethodSubtype): void;
				setInputMethodAndSubtype(arg1: android.os.IIBinder, arg2: string, arg3: android.view.inputmethod.InputMethodSubtype): void;
				hideSoftInputFromInputMethod(arg1: android.os.IIBinder, arg2: number): void;
				hideSoftInputFromWindow(arg1: android.os.IIBinder, arg2: number, arg3: android.os.ResultReceiver): boolean;
				hideSoftInputFromWindow(arg1: android.os.IIBinder, arg2: number): boolean;
				showSoftInputFromInputMethod(arg1: android.os.IIBinder, arg2: number): void;
				getCurrentInputMethodSubtype(): android.view.inputmethod.InputMethodSubtype;
				setCurrentInputMethodSubtype(arg1: android.view.inputmethod.InputMethodSubtype): boolean;
				getEnabledInputMethodList(): java.util.IList<android.view.inputmethod.InputMethodInfo>;
				toggleSoftInputFromWindow(arg1: android.os.IIBinder, arg2: number, arg3: number): void;
				switchToNextInputMethod(arg1: android.os.IIBinder, arg2: boolean): boolean;
				switchToLastInputMethod(arg1: android.os.IIBinder): boolean;
				getLastInputMethodSubtype(): android.view.inputmethod.InputMethodSubtype;
				isActive(arg1: android.view.View): boolean;
				isActive(): boolean;
				updateCursor(arg1: android.view.View, arg2: number, arg3: number, arg4: number, arg5: number): void;
			}
			export class EditorInfo extends java.lang.Object implements android.text.IInputType, android.os.IParcelable {
				constructor();
				inputType: number;
				static IME_MASK_ACTION: number;
				static IME_ACTION_UNSPECIFIED: number;
				static IME_ACTION_NONE: number;
				static IME_ACTION_GO: number;
				static IME_ACTION_SEARCH: number;
				static IME_ACTION_SEND: number;
				static IME_ACTION_NEXT: number;
				static IME_ACTION_DONE: number;
				static IME_ACTION_PREVIOUS: number;
				static IME_FLAG_NO_FULLSCREEN: number;
				static IME_FLAG_NAVIGATE_PREVIOUS: number;
				static IME_FLAG_NAVIGATE_NEXT: number;
				static IME_FLAG_NO_EXTRACT_UI: number;
				static IME_FLAG_NO_ACCESSORY_ACTION: number;
				static IME_FLAG_NO_ENTER_ACTION: number;
				static IME_FLAG_FORCE_ASCII: number;
				static IME_NULL: number;
				imeOptions: number;
				privateImeOptions: java.lang.String;
				actionLabel: java.lang.ICharSequence;
				actionId: number;
				initialSelStart: number;
				initialSelEnd: number;
				initialCapsMode: number;
				hintText: java.lang.ICharSequence;
				label: java.lang.ICharSequence;
				packageName: java.lang.String;
				fieldId: number;
				fieldName: java.lang.String;
				extras: android.os.Bundle;
				static CREATOR: android.os.Parcelable.ICreator<android.view.inputmethod.EditorInfo>;
				static class: java.lang.Class<android.view.inputmethod.EditorInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				makeCompatible(arg1: number): void;
				dump(arg1: android.util.IPrinter, arg2: java.lang.String): void;
				dump(arg1: android.util.IPrinter, arg2: string): void;
			}
		}
		export class ActionMode extends java.lang.Object {
			constructor();
			static class: java.lang.Class<android.view.ActionMode>;
			Subtitle: java.lang.ICharSequence;
			TitleOptionalHint: boolean;
			CustomView: android.view.View;
			Tag: any;
			Title: java.lang.ICharSequence;
			setTag(arg1: any): void;
			getMenuInflater(): android.view.MenuInflater;
			getSubtitle(): java.lang.ICharSequence;
			setSubtitle(arg1: java.lang.ICharSequence): void;
			setSubtitle(arg1: string): void;
			setSubtitle(arg1: number): void;
			setCustomView(arg1: android.view.View): void;
			getCustomView(): android.view.View;
			setTitleOptionalHint(arg1: boolean): void;
			getTitleOptionalHint(): boolean;
			isTitleOptional(): boolean;
			getTitle(): java.lang.ICharSequence;
			setTitle(arg1: number): void;
			setTitle(arg1: java.lang.ICharSequence): void;
			setTitle(arg1: string): void;
			invalidate(): void;
			finish(): void;
			getMenu(): android.view.IMenu;
			getTag(): any;
		}
		export module ActionMode {
			export interface ICallback {
				onDestroyActionMode(arg1: android.view.ActionMode): void;
				onCreateActionMode(arg1: android.view.ActionMode, arg2: android.view.IMenu): boolean;
				onActionItemClicked(arg1: android.view.ActionMode, arg2: android.view.IMenuItem): boolean;
				onPrepareActionMode(arg1: android.view.ActionMode, arg2: android.view.IMenu): boolean;
			}
			export class Callback implements android.view.ActionMode.ICallback {
				constructor(implementation: android.view.ActionMode.ICallback);
				onDestroyActionMode(arg1: android.view.ActionMode): void;
				onCreateActionMode(arg1: android.view.ActionMode, arg2: android.view.IMenu): boolean;
				onActionItemClicked(arg1: android.view.ActionMode, arg2: android.view.IMenuItem): boolean;
				onPrepareActionMode(arg1: android.view.ActionMode, arg2: android.view.IMenu): boolean;
			}
		}
		export class AbsSavedState extends java.lang.Object implements android.os.IParcelable {
			static EMPTY_STATE: android.view.AbsSavedState;
			static CREATOR: android.os.Parcelable.ICreator<android.view.AbsSavedState>;
			static class: java.lang.Class<android.view.AbsSavedState>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getSuperState(): android.os.IParcelable;
		}
		export interface IContextMenu extends android.view.IMenu {
			setHeaderTitle(arg1: number): android.view.IContextMenu;
			setHeaderTitle(arg1: string): android.view.IContextMenu;
			setHeaderView(arg1: android.view.View): android.view.IContextMenu;
			clearHeader(): void;
			setHeaderIcon(arg1: number): android.view.IContextMenu;
			setHeaderIcon(arg1: android.graphics.drawable.Drawable): android.view.IContextMenu;
			hasVisibleItems(): boolean;
			addIntentOptions(arg1: number, arg2: number, arg3: number, arg4: android.content.ComponentName, arg5: native.Array<android.content.Intent>, arg6: android.content.Intent, arg7: number, arg8: native.Array<android.view.IMenuItem>): number;
			setGroupEnabled(arg1: number, arg2: boolean): void;
			setGroupVisible(arg1: number, arg2: boolean): void;
			performShortcut(arg1: number, arg2: android.view.KeyEvent, arg3: number): boolean;
			setGroupCheckable(arg1: number, arg2: boolean, arg3: boolean): void;
			performIdentifierAction(arg1: number, arg2: number): boolean;
			removeGroup(arg1: number): void;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: number): android.view.ISubMenu;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: string): android.view.ISubMenu;
			addSubMenu(arg1: number): android.view.ISubMenu;
			addSubMenu(arg1: string): android.view.ISubMenu;
			findItem(arg1: number): android.view.IMenuItem;
			isShortcutKey(arg1: number, arg2: android.view.KeyEvent): boolean;
			setQwertyMode(arg1: boolean): void;
			add(arg1: string): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: number): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: string): android.view.IMenuItem;
			add(arg1: number): android.view.IMenuItem;
			size(): number;
			clear(): void;
			close(): void;
			getItem(arg1: number): android.view.IMenuItem;
			removeItem(arg1: number): void;
		}
		export interface ISubMenu extends android.view.IMenu {
			setHeaderTitle(arg1: number): android.view.ISubMenu;
			setHeaderTitle(arg1: string): android.view.ISubMenu;
			setHeaderView(arg1: android.view.View): android.view.ISubMenu;
			clearHeader(): void;
			setHeaderIcon(arg1: android.graphics.drawable.Drawable): android.view.ISubMenu;
			setHeaderIcon(arg1: number): android.view.ISubMenu;
			getItem(): android.view.IMenuItem;
			setIcon(arg1: android.graphics.drawable.Drawable): android.view.ISubMenu;
			setIcon(arg1: number): android.view.ISubMenu;
			hasVisibleItems(): boolean;
			addIntentOptions(arg1: number, arg2: number, arg3: number, arg4: android.content.ComponentName, arg5: native.Array<android.content.Intent>, arg6: android.content.Intent, arg7: number, arg8: native.Array<android.view.IMenuItem>): number;
			setGroupEnabled(arg1: number, arg2: boolean): void;
			setGroupVisible(arg1: number, arg2: boolean): void;
			performShortcut(arg1: number, arg2: android.view.KeyEvent, arg3: number): boolean;
			setGroupCheckable(arg1: number, arg2: boolean, arg3: boolean): void;
			performIdentifierAction(arg1: number, arg2: number): boolean;
			removeGroup(arg1: number): void;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: number): android.view.ISubMenu;
			addSubMenu(arg1: number, arg2: number, arg3: number, arg4: string): android.view.ISubMenu;
			addSubMenu(arg1: number): android.view.ISubMenu;
			addSubMenu(arg1: string): android.view.ISubMenu;
			findItem(arg1: number): android.view.IMenuItem;
			isShortcutKey(arg1: number, arg2: android.view.KeyEvent): boolean;
			setQwertyMode(arg1: boolean): void;
			add(arg1: string): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: number): android.view.IMenuItem;
			add(arg1: number, arg2: number, arg3: number, arg4: string): android.view.IMenuItem;
			add(arg1: number): android.view.IMenuItem;
			size(): number;
			clear(): void;
			close(): void;
			getItem(arg1: number): android.view.IMenuItem;
			removeItem(arg1: number): void;
		}
		export class SoundEffectConstants extends java.lang.Object {
			static CLICK: number;
			static NAVIGATION_LEFT: number;
			static NAVIGATION_UP: number;
			static NAVIGATION_RIGHT: number;
			static NAVIGATION_DOWN: number;
			static class: java.lang.Class<android.view.SoundEffectConstants>;
			static getContantForFocusDirection(arg1: number): number;
		}
		export class InputDevice extends java.lang.Object implements android.os.IParcelable {
			static SOURCE_CLASS_MASK: number;
			static SOURCE_CLASS_BUTTON: number;
			static SOURCE_CLASS_POINTER: number;
			static SOURCE_CLASS_TRACKBALL: number;
			static SOURCE_CLASS_POSITION: number;
			static SOURCE_CLASS_JOYSTICK: number;
			static SOURCE_UNKNOWN: number;
			static SOURCE_KEYBOARD: number;
			static SOURCE_DPAD: number;
			static SOURCE_GAMEPAD: number;
			static SOURCE_TOUCHSCREEN: number;
			static SOURCE_MOUSE: number;
			static SOURCE_STYLUS: number;
			static SOURCE_TRACKBALL: number;
			static SOURCE_TOUCHPAD: number;
			static SOURCE_JOYSTICK: number;
			static SOURCE_ANY: number;
			static MOTION_RANGE_X: number;
			static MOTION_RANGE_Y: number;
			static MOTION_RANGE_PRESSURE: number;
			static MOTION_RANGE_SIZE: number;
			static MOTION_RANGE_TOUCH_MAJOR: number;
			static MOTION_RANGE_TOUCH_MINOR: number;
			static MOTION_RANGE_TOOL_MAJOR: number;
			static MOTION_RANGE_TOOL_MINOR: number;
			static MOTION_RANGE_ORIENTATION: number;
			static KEYBOARD_TYPE_NONE: number;
			static KEYBOARD_TYPE_NON_ALPHABETIC: number;
			static KEYBOARD_TYPE_ALPHABETIC: number;
			static CREATOR: android.os.Parcelable.ICreator<android.view.InputDevice>;
			static class: java.lang.Class<android.view.InputDevice>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			isVirtual(): boolean;
			getMotionRange(arg1: number): android.view.InputDevice.MotionRange;
			getMotionRange(arg1: number, arg2: number): android.view.InputDevice.MotionRange;
			getMotionRanges(): java.util.IList<android.view.InputDevice.MotionRange>;
			getKeyboardType(): number;
			getKeyCharacterMap(): android.view.KeyCharacterMap;
			static getDeviceIds(): native.Array<number>;
			getVibrator(): android.os.Vibrator;
			toString(): string;
			getName(): string;
			getDescriptor(): string;
			getId(): number;
			static getDevice(arg1: number): android.view.InputDevice;
			getSources(): number;
		}
		export module InputDevice {
			export class MotionRange extends java.lang.Object {
				static class: java.lang.Class<android.view.InputDevice.MotionRange>;
				getMin(): number;
				getMax(): number;
				getRange(): number;
				getFlat(): number;
				getFuzz(): number;
				getSource(): number;
				getAxis(): number;
			}
		}
		export class MenuItem implements android.view.IMenuItem {
			constructor(implementation: android.view.IMenuItem);
			static SHOW_AS_ACTION_NEVER: number;
			static SHOW_AS_ACTION_IF_ROOM: number;
			static SHOW_AS_ACTION_ALWAYS: number;
			static SHOW_AS_ACTION_WITH_TEXT: number;
			static SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;
			AlphabeticShortcut: string;
			Intent: android.content.Intent;
			ActionView: android.view.View;
			Title: java.lang.ICharSequence;
			TitleCondensed: java.lang.ICharSequence;
			NumericShortcut: string;
			ActionProvider: android.view.ActionProvider;
			Icon: android.graphics.drawable.Drawable;
			getOrder(): number;
			getGroupId(): number;
			setIntent(arg1: android.content.Intent): android.view.IMenuItem;
			setOnMenuItemClickListener(arg1: android.view.MenuItem.IOnMenuItemClickListener): android.view.IMenuItem;
			isChecked(): boolean;
			setChecked(arg1: boolean): android.view.IMenuItem;
			getItemId(): number;
			hasSubMenu(): boolean;
			getIntent(): android.content.Intent;
			setCheckable(arg1: boolean): android.view.IMenuItem;
			isCheckable(): boolean;
			setAlphabeticShortcut(arg1: string): android.view.IMenuItem;
			setShowAsAction(arg1: number): void;
			setActionProvider(arg1: android.view.ActionProvider): android.view.IMenuItem;
			getTitleCondensed(): java.lang.ICharSequence;
			getActionProvider(): android.view.ActionProvider;
			isActionViewExpanded(): boolean;
			setTitleCondensed(arg1: java.lang.ICharSequence): android.view.IMenuItem;
			setTitleCondensed(arg1: string): android.view.IMenuItem;
			getAlphabeticShortcut(): string;
			setNumericShortcut(arg1: string): android.view.IMenuItem;
			expandActionView(): boolean;
			setShowAsActionFlags(arg1: number): android.view.IMenuItem;
			getNumericShortcut(): string;
			collapseActionView(): boolean;
			setOnActionExpandListener(arg1: android.view.MenuItem.IOnActionExpandListener): android.view.IMenuItem;
			getSubMenu(): android.view.ISubMenu;
			getActionView(): android.view.View;
			getMenuInfo(): android.view.ContextMenu.IContextMenuInfo;
			setActionView(arg1: number): android.view.IMenuItem;
			setActionView(arg1: android.view.View): android.view.IMenuItem;
			getTitle(): java.lang.ICharSequence;
			setTitle(arg1: number): android.view.IMenuItem;
			setTitle(arg1: java.lang.ICharSequence): android.view.IMenuItem;
			setTitle(arg1: string): android.view.IMenuItem;
			isVisible(): boolean;
			setVisible(arg1: boolean): android.view.IMenuItem;
			isEnabled(): boolean;
			setEnabled(arg1: boolean): android.view.IMenuItem;
			setShortcut(arg1: string, arg2: string): android.view.IMenuItem;
			getIcon(): android.graphics.drawable.Drawable;
			setIcon(arg1: number): android.view.IMenuItem;
			setIcon(arg1: android.graphics.drawable.Drawable): android.view.IMenuItem;
		}
		export module MenuItem {
			export class OnActionExpandListener implements android.view.MenuItem.IOnActionExpandListener {
				constructor(implementation: android.view.MenuItem.IOnActionExpandListener);
				onMenuItemActionCollapse(arg1: android.view.IMenuItem): boolean;
				onMenuItemActionExpand(arg1: android.view.IMenuItem): boolean;
			}
			export class OnMenuItemClickListener implements android.view.MenuItem.IOnMenuItemClickListener {
				constructor(implementation: android.view.MenuItem.IOnMenuItemClickListener);
				onMenuItemClick(arg1: android.view.IMenuItem): boolean;
			}
			export interface IOnMenuItemClickListener {
				onMenuItemClick(arg1: android.view.IMenuItem): boolean;
			}
			export interface IOnActionExpandListener {
				onMenuItemActionCollapse(arg1: android.view.IMenuItem): boolean;
				onMenuItemActionExpand(arg1: android.view.IMenuItem): boolean;
			}
		}
		export interface ICollapsibleActionView {
			onActionViewCollapsed(): void;
			onActionViewExpanded(): void;
		}
		export class CollapsibleActionView implements android.view.ICollapsibleActionView {
			constructor(implementation: android.view.ICollapsibleActionView);
			onActionViewCollapsed(): void;
			onActionViewExpanded(): void;
		}
		export class ContextThemeWrapper extends android.content.ContextWrapper {
			constructor(arg1: android.content.Context, arg2: number);
			constructor();
			static class: java.lang.Class<android.view.ContextThemeWrapper>;
			getSystemService(arg1: java.lang.String): any;
			getSystemService(arg1: string): any;
			setTheme(arg1: number): void;
			applyOverrideConfiguration(arg1: android.content.res.Configuration): void;
			getResources(): android.content.res.Resources;
			getTheme(): android.content.res.Resources.Theme;
		}
		export class ActionProvider extends java.lang.Object {
			constructor(arg1: android.content.Context);
			static class: java.lang.Class<android.view.ActionProvider>;
			onPrepareSubMenu(arg1: android.view.ISubMenu): void;
			onCreateActionView(): android.view.View;
			onCreateActionView(arg1: android.view.IMenuItem): android.view.View;
			refreshVisibility(): void;
			setVisibilityListener(arg1: android.view.ActionProvider.IVisibilityListener): void;
			hasSubMenu(): boolean;
			onPerformDefaultAction(): boolean;
			overridesItemVisibility(): boolean;
			isVisible(): boolean;
		}
		export module ActionProvider {
			export interface IVisibilityListener {
				onActionProviderVisibilityChanged(arg1: boolean): void;
			}
			export class VisibilityListener implements android.view.ActionProvider.IVisibilityListener {
				constructor(implementation: android.view.ActionProvider.IVisibilityListener);
				onActionProviderVisibilityChanged(arg1: boolean): void;
			}
		}
		export class DragEvent extends java.lang.Object implements android.os.IParcelable {
			static ACTION_DRAG_STARTED: number;
			static ACTION_DRAG_LOCATION: number;
			static ACTION_DROP: number;
			static ACTION_DRAG_ENDED: number;
			static ACTION_DRAG_ENTERED: number;
			static ACTION_DRAG_EXITED: number;
			static CREATOR: android.os.Parcelable.ICreator<android.view.DragEvent>;
			static class: java.lang.Class<android.view.DragEvent>;
			writeToParcel(arg1: android.os.Parcel, arg2: number): void;
			describeContents(): number;
			getClipDescription(): android.content.ClipDescription;
			getClipData(): android.content.ClipData;
			getResult(): boolean;
			getLocalState(): any;
			toString(): string;
			getX(): number;
			getY(): number;
			getAction(): number;
		}
	}
	export module media {
		export class ToneGenerator extends java.lang.Object {
			constructor(arg1: number, arg2: number);
			static TONE_DTMF_0: number;
			static TONE_DTMF_1: number;
			static TONE_DTMF_2: number;
			static TONE_DTMF_3: number;
			static TONE_DTMF_4: number;
			static TONE_DTMF_5: number;
			static TONE_DTMF_6: number;
			static TONE_DTMF_7: number;
			static TONE_DTMF_8: number;
			static TONE_DTMF_9: number;
			static TONE_DTMF_S: number;
			static TONE_DTMF_P: number;
			static TONE_DTMF_A: number;
			static TONE_DTMF_B: number;
			static TONE_DTMF_C: number;
			static TONE_DTMF_D: number;
			static TONE_SUP_DIAL: number;
			static TONE_SUP_BUSY: number;
			static TONE_SUP_CONGESTION: number;
			static TONE_SUP_RADIO_ACK: number;
			static TONE_SUP_RADIO_NOTAVAIL: number;
			static TONE_SUP_ERROR: number;
			static TONE_SUP_CALL_WAITING: number;
			static TONE_SUP_RINGTONE: number;
			static TONE_PROP_BEEP: number;
			static TONE_PROP_ACK: number;
			static TONE_PROP_NACK: number;
			static TONE_PROP_PROMPT: number;
			static TONE_PROP_BEEP2: number;
			static TONE_SUP_INTERCEPT: number;
			static TONE_SUP_INTERCEPT_ABBREV: number;
			static TONE_SUP_CONGESTION_ABBREV: number;
			static TONE_SUP_CONFIRM: number;
			static TONE_SUP_PIP: number;
			static TONE_CDMA_DIAL_TONE_LITE: number;
			static TONE_CDMA_NETWORK_USA_RINGBACK: number;
			static TONE_CDMA_INTERCEPT: number;
			static TONE_CDMA_ABBR_INTERCEPT: number;
			static TONE_CDMA_REORDER: number;
			static TONE_CDMA_ABBR_REORDER: number;
			static TONE_CDMA_NETWORK_BUSY: number;
			static TONE_CDMA_CONFIRM: number;
			static TONE_CDMA_ANSWER: number;
			static TONE_CDMA_NETWORK_CALLWAITING: number;
			static TONE_CDMA_PIP: number;
			static TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL: number;
			static TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP: number;
			static TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI: number;
			static TONE_CDMA_CALL_SIGNAL_ISDN_PAT3: number;
			static TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING: number;
			static TONE_CDMA_CALL_SIGNAL_ISDN_PAT5: number;
			static TONE_CDMA_CALL_SIGNAL_ISDN_PAT6: number;
			static TONE_CDMA_CALL_SIGNAL_ISDN_PAT7: number;
			static TONE_CDMA_HIGH_L: number;
			static TONE_CDMA_MED_L: number;
			static TONE_CDMA_LOW_L: number;
			static TONE_CDMA_HIGH_SS: number;
			static TONE_CDMA_MED_SS: number;
			static TONE_CDMA_LOW_SS: number;
			static TONE_CDMA_HIGH_SSL: number;
			static TONE_CDMA_MED_SSL: number;
			static TONE_CDMA_LOW_SSL: number;
			static TONE_CDMA_HIGH_SS_2: number;
			static TONE_CDMA_MED_SS_2: number;
			static TONE_CDMA_LOW_SS_2: number;
			static TONE_CDMA_HIGH_SLS: number;
			static TONE_CDMA_MED_SLS: number;
			static TONE_CDMA_LOW_SLS: number;
			static TONE_CDMA_HIGH_S_X4: number;
			static TONE_CDMA_MED_S_X4: number;
			static TONE_CDMA_LOW_S_X4: number;
			static TONE_CDMA_HIGH_PBX_L: number;
			static TONE_CDMA_MED_PBX_L: number;
			static TONE_CDMA_LOW_PBX_L: number;
			static TONE_CDMA_HIGH_PBX_SS: number;
			static TONE_CDMA_MED_PBX_SS: number;
			static TONE_CDMA_LOW_PBX_SS: number;
			static TONE_CDMA_HIGH_PBX_SSL: number;
			static TONE_CDMA_MED_PBX_SSL: number;
			static TONE_CDMA_LOW_PBX_SSL: number;
			static TONE_CDMA_HIGH_PBX_SLS: number;
			static TONE_CDMA_MED_PBX_SLS: number;
			static TONE_CDMA_LOW_PBX_SLS: number;
			static TONE_CDMA_HIGH_PBX_S_X4: number;
			static TONE_CDMA_MED_PBX_S_X4: number;
			static TONE_CDMA_LOW_PBX_S_X4: number;
			static TONE_CDMA_ALERT_NETWORK_LITE: number;
			static TONE_CDMA_ALERT_AUTOREDIAL_LITE: number;
			static TONE_CDMA_ONE_MIN_BEEP: number;
			static TONE_CDMA_KEYPAD_VOLUME_KEY_LITE: number;
			static TONE_CDMA_PRESSHOLDKEY_LITE: number;
			static TONE_CDMA_ALERT_INCALL_LITE: number;
			static TONE_CDMA_EMERGENCY_RINGBACK: number;
			static TONE_CDMA_ALERT_CALL_GUARD: number;
			static TONE_CDMA_SOFT_ERROR_LITE: number;
			static TONE_CDMA_CALLDROP_LITE: number;
			static TONE_CDMA_NETWORK_BUSY_ONE_SHOT: number;
			static TONE_CDMA_ABBR_ALERT: number;
			static TONE_CDMA_SIGNAL_OFF: number;
			static MAX_VOLUME: number;
			static MIN_VOLUME: number;
			static class: java.lang.Class<android.media.ToneGenerator>;
			getAudioSessionId(): number;
			stopTone(): void;
			startTone(arg1: number): boolean;
			startTone(arg1: number, arg2: number): boolean;
			release(): void;
		}
		export class CamcorderProfile extends java.lang.Object {
			static QUALITY_LOW: number;
			static QUALITY_HIGH: number;
			static QUALITY_QCIF: number;
			static QUALITY_CIF: number;
			static QUALITY_480P: number;
			static QUALITY_720P: number;
			static QUALITY_1080P: number;
			static QUALITY_QVGA: number;
			static QUALITY_TIME_LAPSE_LOW: number;
			static QUALITY_TIME_LAPSE_HIGH: number;
			static QUALITY_TIME_LAPSE_QCIF: number;
			static QUALITY_TIME_LAPSE_CIF: number;
			static QUALITY_TIME_LAPSE_480P: number;
			static QUALITY_TIME_LAPSE_720P: number;
			static QUALITY_TIME_LAPSE_1080P: number;
			static QUALITY_TIME_LAPSE_QVGA: number;
			duration: number;
			quality: number;
			fileFormat: number;
			videoCodec: number;
			videoBitRate: number;
			videoFrameRate: number;
			videoFrameWidth: number;
			videoFrameHeight: number;
			audioCodec: number;
			audioBitRate: number;
			audioSampleRate: number;
			audioChannels: number;
			static class: java.lang.Class<android.media.CamcorderProfile>;
			static hasProfile(arg1: number, arg2: number): boolean;
			static hasProfile(arg1: number): boolean;
			static get(arg1: number): android.media.CamcorderProfile;
			static get(arg1: number, arg2: number): android.media.CamcorderProfile;
		}
		export class RemoteControlClient extends java.lang.Object {
			constructor(arg1: android.app.PendingIntent, arg2: android.os.Looper);
			constructor(arg1: android.app.PendingIntent);
			static PLAYSTATE_STOPPED: number;
			static PLAYSTATE_PAUSED: number;
			static PLAYSTATE_PLAYING: number;
			static PLAYSTATE_FAST_FORWARDING: number;
			static PLAYSTATE_REWINDING: number;
			static PLAYSTATE_SKIPPING_FORWARDS: number;
			static PLAYSTATE_SKIPPING_BACKWARDS: number;
			static PLAYSTATE_BUFFERING: number;
			static PLAYSTATE_ERROR: number;
			static FLAG_KEY_MEDIA_PREVIOUS: number;
			static FLAG_KEY_MEDIA_REWIND: number;
			static FLAG_KEY_MEDIA_PLAY: number;
			static FLAG_KEY_MEDIA_PLAY_PAUSE: number;
			static FLAG_KEY_MEDIA_PAUSE: number;
			static FLAG_KEY_MEDIA_STOP: number;
			static FLAG_KEY_MEDIA_FAST_FORWARD: number;
			static FLAG_KEY_MEDIA_NEXT: number;
			static class: java.lang.Class<android.media.RemoteControlClient>;
			setPlaybackState(arg1: number): void;
			setTransportControlFlags(arg1: number): void;
			editMetadata(arg1: boolean): android.media.RemoteControlClient.MetadataEditor;
		}
		export module RemoteControlClient {
			export class MetadataEditor extends java.lang.Object {
				static BITMAP_KEY_ARTWORK: number;
				static class: java.lang.Class<android.media.RemoteControlClient.MetadataEditor>;
				apply(): void;
				putString(arg1: number, arg2: java.lang.String): android.media.RemoteControlClient.MetadataEditor;
				putString(arg1: number, arg2: string): android.media.RemoteControlClient.MetadataEditor;
				putBitmap(arg1: number, arg2: android.graphics.Bitmap): android.media.RemoteControlClient.MetadataEditor;
				clear(): void;
				putLong(arg1: number, arg2: native.Long): android.media.RemoteControlClient.MetadataEditor;
			}
		}
		export class FaceDetector extends java.lang.Object {
			constructor(arg1: number, arg2: number, arg3: number);
			static class: java.lang.Class<android.media.FaceDetector>;
			findFaces(arg1: android.graphics.Bitmap, arg2: native.Array<android.media.FaceDetector.Face>): number;
		}
		export module FaceDetector {
			export class Face extends java.lang.Object {
				static CONFIDENCE_THRESHOLD: native.Float;
				static EULER_X: number;
				static EULER_Y: number;
				static EULER_Z: number;
				static class: java.lang.Class<android.media.FaceDetector.Face>;
				pose(arg1: number): number;
				eyesDistance(): number;
				confidence(): number;
				getMidPoint(arg1: android.graphics.PointF): void;
			}
		}
		export class MediaPlayer extends java.lang.Object {
			constructor();
			static VIDEO_SCALING_MODE_SCALE_TO_FIT: number;
			static VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING: number;
			static MEDIA_MIMETYPE_TEXT_SUBRIP: java.lang.String;
			static MEDIA_ERROR_UNKNOWN: number;
			static MEDIA_ERROR_SERVER_DIED: number;
			static MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK: number;
			static MEDIA_ERROR_IO: number;
			static MEDIA_ERROR_MALFORMED: number;
			static MEDIA_ERROR_UNSUPPORTED: number;
			static MEDIA_ERROR_TIMED_OUT: number;
			static MEDIA_INFO_UNKNOWN: number;
			static MEDIA_INFO_VIDEO_RENDERING_START: number;
			static MEDIA_INFO_VIDEO_TRACK_LAGGING: number;
			static MEDIA_INFO_BUFFERING_START: number;
			static MEDIA_INFO_BUFFERING_END: number;
			static MEDIA_INFO_BAD_INTERLEAVING: number;
			static MEDIA_INFO_NOT_SEEKABLE: number;
			static MEDIA_INFO_METADATA_UPDATE: number;
			static class: java.lang.Class<android.media.MediaPlayer>;
			AudioSessionId: number;
			setOnPreparedListener(arg1: android.media.MediaPlayer.IOnPreparedListener): void;
			setOnErrorListener(arg1: android.media.MediaPlayer.IOnErrorListener): void;
			setOnInfoListener(arg1: android.media.MediaPlayer.IOnInfoListener): void;
			isPlaying(): boolean;
			getDuration(): number;
			seekTo(arg1: number): void;
			getCurrentPosition(): number;
			pause(): void;
			setOnCompletionListener(arg1: android.media.MediaPlayer.IOnCompletionListener): void;
			setSurface(arg1: android.view.Surface): void;
			setVideoScalingMode(arg1: number): void;
			getAudioSessionId(): number;
			setAuxEffectSendLevel(arg1: native.Float): void;
			addTimedTextSource(arg1: java.io.FileDescriptor, arg2: java.lang.String): void;
			addTimedTextSource(arg1: java.io.FileDescriptor, arg2: string): void;
			addTimedTextSource(arg1: java.io.FileDescriptor, arg2: native.Long, arg3: native.Long, arg4: java.lang.String): void;
			addTimedTextSource(arg1: java.io.FileDescriptor, arg2: native.Long, arg3: native.Long, arg4: string): void;
			addTimedTextSource(arg1: android.content.Context, arg2: android.net.Uri, arg3: java.lang.String): void;
			addTimedTextSource(arg1: android.content.Context, arg2: android.net.Uri, arg3: string): void;
			addTimedTextSource(arg1: java.lang.String, arg2: java.lang.String): void;
			addTimedTextSource(arg1: string, arg2: string): void;
			setNextMediaPlayer(arg1: android.media.MediaPlayer): void;
			getVideoHeight(): number;
			setAudioSessionId(arg1: number): void;
			attachAuxEffect(arg1: number): void;
			setAudioStreamType(arg1: number): void;
			setOnVideoSizeChangedListener(arg1: android.media.MediaPlayer.IOnVideoSizeChangedListener): void;
			setScreenOnWhilePlaying(arg1: boolean): void;
			setOnTimedTextListener(arg1: android.media.MediaPlayer.IOnTimedTextListener): void;
			setOnBufferingUpdateListener(arg1: android.media.MediaPlayer.IOnBufferingUpdateListener): void;
			setOnSeekCompleteListener(arg1: android.media.MediaPlayer.IOnSeekCompleteListener): void;
			setLooping(arg1: boolean): void;
			isLooping(): boolean;
			getTrackInfo(): native.Array<android.media.MediaPlayer.TrackInfo>;
			selectTrack(arg1: number): void;
			deselectTrack(arg1: number): void;
			getVideoWidth(): number;
			prepareAsync(): void;
			setDisplay(arg1: android.view.ISurfaceHolder): void;
			setDataSource(arg1: android.content.Context, arg2: android.net.Uri, arg3: java.util.IMap<string, string>): void;
			setDataSource(arg1: java.io.FileDescriptor): void;
			setDataSource(arg1: java.lang.String): void;
			setDataSource(arg1: string): void;
			setDataSource(arg1: android.content.Context, arg2: android.net.Uri): void;
			setDataSource(arg1: java.io.FileDescriptor, arg2: native.Long, arg3: native.Long): void;
			setWakeMode(arg1: android.content.Context, arg2: number): void;
			setVolume(arg1: native.Float, arg2: native.Float): void;
			start(): void;
			stop(): void;
			prepare(): void;
			reset(): void;
			static create(arg1: android.content.Context, arg2: android.net.Uri): android.media.MediaPlayer;
			static create(arg1: android.content.Context, arg2: android.net.Uri, arg3: android.view.ISurfaceHolder): android.media.MediaPlayer;
			static create(arg1: android.content.Context, arg2: number): android.media.MediaPlayer;
			release(): void;
		}
		export module MediaPlayer {
			export interface IOnInfoListener {
				onInfo(arg1: android.media.MediaPlayer, arg2: number, arg3: number): boolean;
			}
			export interface IOnVideoSizeChangedListener {
				onVideoSizeChanged(arg1: android.media.MediaPlayer, arg2: number, arg3: number): void;
			}
			export class OnErrorListener implements android.media.MediaPlayer.IOnErrorListener {
				constructor(implementation: android.media.MediaPlayer.IOnErrorListener);
				onError(arg1: android.media.MediaPlayer, arg2: number, arg3: number): boolean;
			}
			export class OnInfoListener implements android.media.MediaPlayer.IOnInfoListener {
				constructor(implementation: android.media.MediaPlayer.IOnInfoListener);
				onInfo(arg1: android.media.MediaPlayer, arg2: number, arg3: number): boolean;
			}
			export class OnTimedTextListener implements android.media.MediaPlayer.IOnTimedTextListener {
				constructor(implementation: android.media.MediaPlayer.IOnTimedTextListener);
				onTimedText(arg1: android.media.MediaPlayer, arg2: android.media.TimedText): void;
			}
			export interface IOnPreparedListener {
				onPrepared(arg1: android.media.MediaPlayer): void;
			}
			export interface IOnBufferingUpdateListener {
				onBufferingUpdate(arg1: android.media.MediaPlayer, arg2: number): void;
			}
			export interface IOnTimedTextListener {
				onTimedText(arg1: android.media.MediaPlayer, arg2: android.media.TimedText): void;
			}
			export class OnPreparedListener implements android.media.MediaPlayer.IOnPreparedListener {
				constructor(implementation: android.media.MediaPlayer.IOnPreparedListener);
				onPrepared(arg1: android.media.MediaPlayer): void;
			}
			export interface IOnSeekCompleteListener {
				onSeekComplete(arg1: android.media.MediaPlayer): void;
			}
			export class OnVideoSizeChangedListener implements android.media.MediaPlayer.IOnVideoSizeChangedListener {
				constructor(implementation: android.media.MediaPlayer.IOnVideoSizeChangedListener);
				onVideoSizeChanged(arg1: android.media.MediaPlayer, arg2: number, arg3: number): void;
			}
			export interface IOnErrorListener {
				onError(arg1: android.media.MediaPlayer, arg2: number, arg3: number): boolean;
			}
			export class OnBufferingUpdateListener implements android.media.MediaPlayer.IOnBufferingUpdateListener {
				constructor(implementation: android.media.MediaPlayer.IOnBufferingUpdateListener);
				onBufferingUpdate(arg1: android.media.MediaPlayer, arg2: number): void;
			}
			export interface IOnCompletionListener {
				onCompletion(arg1: android.media.MediaPlayer): void;
			}
			export class TrackInfo extends java.lang.Object implements android.os.IParcelable {
				static MEDIA_TRACK_TYPE_UNKNOWN: number;
				static MEDIA_TRACK_TYPE_VIDEO: number;
				static MEDIA_TRACK_TYPE_AUDIO: number;
				static MEDIA_TRACK_TYPE_TIMEDTEXT: number;
				static class: java.lang.Class<android.media.MediaPlayer.TrackInfo>;
				writeToParcel(arg1: android.os.Parcel, arg2: number): void;
				describeContents(): number;
				getTrackType(): number;
				getLanguage(): string;
			}
			export class OnSeekCompleteListener implements android.media.MediaPlayer.IOnSeekCompleteListener {
				constructor(implementation: android.media.MediaPlayer.IOnSeekCompleteListener);
				onSeekComplete(arg1: android.media.MediaPlayer): void;
			}
			export class OnCompletionListener implements android.media.MediaPlayer.IOnCompletionListener {
				constructor(implementation: android.media.MediaPlayer.IOnCompletionListener);
				onCompletion(arg1: android.media.MediaPlayer): void;
			}
		}
		export class MediaCodecList extends java.lang.Object {
			static class: java.lang.Class<android.media.MediaCodecList>;
			static getCodecInfoAt(arg1: number): android.media.MediaCodecInfo;
			static getCodecCount(): number;
		}
		export class RingtoneManager extends java.lang.Object {
			constructor(arg1: android.app.Activity);
			constructor(arg1: android.content.Context);
			static TYPE_RINGTONE: number;
			static TYPE_NOTIFICATION: number;
			static TYPE_ALARM: number;
			static TYPE_ALL: number;
			static ACTION_RINGTONE_PICKER: java.lang.String;
			static EXTRA_RINGTONE_SHOW_DEFAULT: java.lang.String;
			static EXTRA_RINGTONE_SHOW_SILENT: java.lang.String;
			static EXTRA_RINGTONE_INCLUDE_DRM: java.lang.String;
			static EXTRA_RINGTONE_EXISTING_URI: java.lang.String;
			static EXTRA_RINGTONE_DEFAULT_URI: java.lang.String;
			static EXTRA_RINGTONE_TYPE: java.lang.String;
			static EXTRA_RINGTONE_TITLE: java.lang.String;
			static EXTRA_RINGTONE_PICKED_URI: java.lang.String;
			static ID_COLUMN_INDEX: number;
			static TITLE_COLUMN_INDEX: number;
			static URI_COLUMN_INDEX: number;
			static class: java.lang.Class<android.media.RingtoneManager>;
			IncludeDrm: boolean;
			StopPreviousRingtone: boolean;
			static isDefault(arg1: android.net.Uri): boolean;
			inferStreamType(): number;
			stopPreviousRingtone(): void;
			getRingtoneUri(arg1: number): android.net.Uri;
			getRingtonePosition(arg1: android.net.Uri): number;
			static getValidRingtoneUri(arg1: android.content.Context): android.net.Uri;
			static setActualDefaultRingtoneUri(arg1: android.content.Context, arg2: number, arg3: android.net.Uri): void;
			getStopPreviousRingtone(): boolean;
			static getActualDefaultRingtoneUri(arg1: android.content.Context, arg2: number): android.net.Uri;
			setStopPreviousRingtone(arg1: boolean): void;
			setIncludeDrm(arg1: boolean): void;
			getIncludeDrm(): boolean;
			static getDefaultUri(arg1: number): android.net.Uri;
			static getRingtone(arg1: android.content.Context, arg2: android.net.Uri): android.media.Ringtone;
			getRingtone(arg1: number): android.media.Ringtone;
			getCursor(): android.database.ICursor;
			setType(arg1: number): void;
			static getDefaultType(arg1: android.net.Uri): number;
		}
		export class MediaScannerConnection extends java.lang.Object implements android.content.IServiceConnection {
			constructor(arg1: android.content.Context, arg2: android.media.MediaScannerConnection.IMediaScannerConnectionClient);
			static class: java.lang.Class<android.media.MediaScannerConnection>;
			onServiceConnected(arg1: android.content.ComponentName, arg2: android.os.IIBinder): void;
			onServiceDisconnected(arg1: android.content.ComponentName): void;
			scanFile(arg1: java.lang.String, arg2: java.lang.String): void;
			scanFile(arg1: string, arg2: string): void;
			static scanFile(arg1: android.content.Context, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: android.media.MediaScannerConnection.IOnScanCompletedListener): void;
			connect(): void;
			disconnect(): void;
			isConnected(): boolean;
		}
		export module MediaScannerConnection {
			export class MediaScannerConnectionClient implements android.media.MediaScannerConnection.IOnScanCompletedListener, android.media.MediaScannerConnection.IMediaScannerConnectionClient {
				constructor(implementation: android.media.MediaScannerConnection.IMediaScannerConnectionClient);
				onScanCompleted(arg1: java.lang.String, arg2: android.net.Uri): void;
				onScanCompleted(arg1: string, arg2: android.net.Uri): void;
				onMediaScannerConnected(): void;
			}
			export class OnScanCompletedListener implements android.media.MediaScannerConnection.IOnScanCompletedListener {
				constructor(implementation: android.media.MediaScannerConnection.IOnScanCompletedListener);
				onScanCompleted(arg1: java.lang.String, arg2: android.net.Uri): void;
				onScanCompleted(arg1: string, arg2: android.net.Uri): void;
			}
			export interface IOnScanCompletedListener {
				onScanCompleted(arg1: string, arg2: android.net.Uri): void;
			}
			export interface IMediaScannerConnectionClient extends android.media.MediaScannerConnection.IOnScanCompletedListener {
				onScanCompleted(arg1: string, arg2: android.net.Uri): void;
				onMediaScannerConnected(): void;
			}
		}
		export class SoundPool extends java.lang.Object {
			constructor(arg1: number, arg2: number, arg3: number);
			static class: java.lang.Class<android.media.SoundPool>;
			pause(arg1: number): void;
			setOnLoadCompleteListener(arg1: android.media.SoundPool.IOnLoadCompleteListener): void;
			autoResume(): void;
			setRate(arg1: number, arg2: native.Float): void;
			setLoop(arg1: number, arg2: number): void;
			autoPause(): void;
			setVolume(arg1: number, arg2: native.Float, arg3: native.Float): void;
			load(arg1: java.io.FileDescriptor, arg2: native.Long, arg3: native.Long, arg4: number): number;
			load(arg1: android.content.res.AssetFileDescriptor, arg2: number): number;
			load(arg1: android.content.Context, arg2: number, arg3: number): number;
			load(arg1: java.lang.String, arg2: number): number;
			load(arg1: string, arg2: number): number;
			setPriority(arg1: number, arg2: number): void;
			resume(arg1: number): void;
			stop(arg1: number): void;
			unload(arg1: number): boolean;
			release(): void;
			play(arg1: number, arg2: native.Float, arg3: native.Float, arg4: number, arg5: number, arg6: native.Float): number;
		}
		export module SoundPool {
			export class OnLoadCompleteListener implements android.media.SoundPool.IOnLoadCompleteListener {
				constructor(implementation: android.media.SoundPool.IOnLoadCompleteListener);
				onLoadComplete(arg1: android.media.SoundPool, arg2: number, arg3: number): void;
			}
			export interface IOnLoadCompleteListener {
				onLoadComplete(arg1: android.media.SoundPool, arg2: number, arg3: number): void;
			}
		}
		export class ThumbnailUtils extends java.lang.Object {
			constructor();
			static OPTIONS_RECYCLE_INPUT: number;
			static class: java.lang.Class<android.media.ThumbnailUtils>;
			static createVideoThumbnail(arg1: java.lang.String, arg2: number): android.graphics.Bitmap;
			static createVideoThumbnail(arg1: string, arg2: number): android.graphics.Bitmap;
			static extractThumbnail(arg1: android.graphics.Bitmap, arg2: number, arg3: number, arg4: number): android.graphics.Bitmap;
			static extractThumbnail(arg1: android.graphics.Bitmap, arg2: number, arg3: number): android.graphics.Bitmap;
		}
		export class AudioFormat extends java.lang.Object {
			constructor();
			static ENCODING_INVALID: number;
			static ENCODING_DEFAULT: number;
			static ENCODING_PCM_16BIT: number;
			static ENCODING_PCM_8BIT: number;
			static CHANNEL_CONFIGURATION_INVALID: number;
			static CHANNEL_CONFIGURATION_DEFAULT: number;
			static CHANNEL_CONFIGURATION_MONO: number;
			static CHANNEL_CONFIGURATION_STEREO: number;
			static CHANNEL_INVALID: number;
			static CHANNEL_OUT_DEFAULT: number;
			static CHANNEL_OUT_FRONT_LEFT: number;
			static CHANNEL_OUT_FRONT_RIGHT: number;
			static CHANNEL_OUT_FRONT_CENTER: number;
			static CHANNEL_OUT_LOW_FREQUENCY: number;
			static CHANNEL_OUT_BACK_LEFT: number;
			static CHANNEL_OUT_BACK_RIGHT: number;
			static CHANNEL_OUT_FRONT_LEFT_OF_CENTER: number;
			static CHANNEL_OUT_FRONT_RIGHT_OF_CENTER: number;
			static CHANNEL_OUT_BACK_CENTER: number;
			static CHANNEL_OUT_MONO: number;
			static CHANNEL_OUT_STEREO: number;
			static CHANNEL_OUT_QUAD: number;
			static CHANNEL_OUT_SURROUND: number;
			static CHANNEL_OUT_5POINT1: number;
			static CHANNEL_OUT_7POINT1: number;
			static CHANNEL_IN_DEFAULT: number;
			static CHANNEL_IN_LEFT: number;
			static CHANNEL_IN_RIGHT: number;
			static CHANNEL_IN_FRONT: number;
			static CHANNEL_IN_BACK: number;
			static CHANNEL_IN_LEFT_PROCESSED: number;
			static CHANNEL_IN_RIGHT_PROCESSED: number;
			static CHANNEL_IN_FRONT_PROCESSED: number;
			static CHANNEL_IN_BACK_PROCESSED: number;
			static CHANNEL_IN_PRESSURE: number;
			static CHANNEL_IN_X_AXIS: number;
			static CHANNEL_IN_Y_AXIS: number;
			static CHANNEL_IN_Z_AXIS: number;
			static CHANNEL_IN_VOICE_UPLINK: number;
			static CHANNEL_IN_VOICE_DNLINK: number;
			static CHANNEL_IN_MONO: number;
			static CHANNEL_IN_STEREO: number;
			static class: java.lang.Class<android.media.AudioFormat>;
		}
		export class MediaMetadataRetriever extends java.lang.Object {
			constructor();
			static OPTION_PREVIOUS_SYNC: number;
			static OPTION_NEXT_SYNC: number;
			static OPTION_CLOSEST_SYNC: number;
			static OPTION_CLOSEST: number;
			static METADATA_KEY_CD_TRACK_NUMBER: number;
			static METADATA_KEY_ALBUM: number;
			static METADATA_KEY_ARTIST: number;
			static METADATA_KEY_AUTHOR: number;
			static METADATA_KEY_COMPOSER: number;
			static METADATA_KEY_DATE: number;
			static METADATA_KEY_GENRE: number;
			static METADATA_KEY_TITLE: number;
			static METADATA_KEY_YEAR: number;
			static METADATA_KEY_DURATION: number;
			static METADATA_KEY_NUM_TRACKS: number;
			static METADATA_KEY_WRITER: number;
			static METADATA_KEY_MIMETYPE: number;
			static METADATA_KEY_ALBUMARTIST: number;
			static METADATA_KEY_DISC_NUMBER: number;
			static METADATA_KEY_COMPILATION: number;
			static METADATA_KEY_HAS_AUDIO: number;
			static METADATA_KEY_HAS_VIDEO: number;
			static METADATA_KEY_VIDEO_WIDTH: number;
			static METADATA_KEY_VIDEO_HEIGHT: number;
			static METADATA_KEY_BITRATE: number;
			static METADATA_KEY_LOCATION: number;
			static METADATA_KEY_VIDEO_ROTATION: number;
			static class: java.lang.Class<android.media.MediaMetadataRetriever>;
			extractMetadata(arg1: number): string;
			getEmbeddedPicture(): native.Array<native.Byte>;
			getFrameAtTime(): android.graphics.Bitmap;
			getFrameAtTime(arg1: native.Long, arg2: number): android.graphics.Bitmap;
			getFrameAtTime(arg1: native.Long): android.graphics.Bitmap;
			setDataSource(arg1: android.content.Context, arg2: android.net.Uri): void;
			setDataSource(arg1: java.lang.String): void;
			setDataSource(arg1: string): void;
			setDataSource(arg1: java.lang.String, arg2: java.util.IMap<string, string>): void;
			setDataSource(arg1: string, arg2: java.util.IMap<string, string>): void;
			setDataSource(arg1: java.io.FileDescriptor, arg2: native.Long, arg3: native.Long): void;
			setDataSource(arg1: java.io.FileDescriptor): void;
			release(): void;
		}
		export class MediaRecorder extends java.lang.Object {
			constructor();
			static MEDIA_RECORDER_ERROR_UNKNOWN: number;
			static MEDIA_ERROR_SERVER_DIED: number;
			static MEDIA_RECORDER_INFO_UNKNOWN: number;
			static MEDIA_RECORDER_INFO_MAX_DURATION_REACHED: number;
			static MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED: number;
			static class: java.lang.Class<android.media.MediaRecorder>;
			setOnErrorListener(arg1: android.media.MediaRecorder.IOnErrorListener): void;
			setOnInfoListener(arg1: android.media.MediaRecorder.IOnInfoListener): void;
			setPreviewDisplay(arg1: android.view.Surface): void;
			setAudioSource(arg1: number): void;
			static getAudioSourceMax(): number;
			setVideoSource(arg1: number): void;
			setCaptureRate(arg1: native.Double): void;
			setCaptureRate(arg1: number): void;
			setOrientationHint(arg1: number): void;
			setMaxDuration(arg1: number): void;
			setOutputFormat(arg1: number): void;
			setMaxFileSize(arg1: native.Long): void;
			setVideoFrameRate(arg1: number): void;
			setAudioChannels(arg1: number): void;
			setAudioSamplingRate(arg1: number): void;
			setVideoEncoder(arg1: number): void;
			setAudioEncoder(arg1: number): void;
			getMaxAmplitude(): number;
			setVideoEncodingBitRate(arg1: number): void;
			setAudioEncodingBitRate(arg1: number): void;
			setCamera(arg1: android.hardware.Camera): void;
			setVideoSize(arg1: number, arg2: number): void;
			setProfile(arg1: android.media.CamcorderProfile): void;
			setOutputFile(arg1: java.lang.String): void;
			setOutputFile(arg1: string): void;
			setOutputFile(arg1: java.io.FileDescriptor): void;
			start(): void;
			stop(): void;
			prepare(): void;
			reset(): void;
			release(): void;
			setLocation(arg1: native.Float, arg2: native.Float): void;
		}
		export module MediaRecorder {
			export interface IOnInfoListener {
				onInfo(arg1: android.media.MediaRecorder, arg2: number, arg3: number): void;
			}
			export class OnErrorListener implements android.media.MediaRecorder.IOnErrorListener {
				constructor(implementation: android.media.MediaRecorder.IOnErrorListener);
				onError(arg1: android.media.MediaRecorder, arg2: number, arg3: number): void;
			}
			export class OnInfoListener implements android.media.MediaRecorder.IOnInfoListener {
				constructor(implementation: android.media.MediaRecorder.IOnInfoListener);
				onInfo(arg1: android.media.MediaRecorder, arg2: number, arg3: number): void;
			}
			export class OutputFormat extends java.lang.Object {
				static DEFAULT: number;
				static THREE_GPP: number;
				static MPEG_4: number;
				static RAW_AMR: number;
				static AMR_NB: number;
				static AMR_WB: number;
				static AAC_ADTS: number;
				static class: java.lang.Class<android.media.MediaRecorder.OutputFormat>;
			}
			export class AudioEncoder extends java.lang.Object {
				static DEFAULT: number;
				static AMR_NB: number;
				static AMR_WB: number;
				static AAC: number;
				static HE_AAC: number;
				static AAC_ELD: number;
				static class: java.lang.Class<android.media.MediaRecorder.AudioEncoder>;
			}
			export class VideoEncoder extends java.lang.Object {
				static DEFAULT: number;
				static H263: number;
				static H264: number;
				static MPEG_4_SP: number;
				static class: java.lang.Class<android.media.MediaRecorder.VideoEncoder>;
			}
			export class VideoSource extends java.lang.Object {
				static DEFAULT: number;
				static CAMERA: number;
				static class: java.lang.Class<android.media.MediaRecorder.VideoSource>;
			}
			export class AudioSource extends java.lang.Object {
				static DEFAULT: number;
				static MIC: number;
				static VOICE_UPLINK: number;
				static VOICE_DOWNLINK: number;
				static VOICE_CALL: number;
				static CAMCORDER: number;
				static VOICE_RECOGNITION: number;
				static VOICE_COMMUNICATION: number;
				static class: java.lang.Class<android.media.MediaRecorder.AudioSource>;
			}
			export interface IOnErrorListener {
				onError(arg1: android.media.MediaRecorder, arg2: number, arg3: number): void;
			}
		}
		export class MediaCryptoException extends java.lang.Exception {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.media.MediaCryptoException>;
		}
		export class MediaFormat extends java.lang.Object {
			constructor();
			static KEY_MIME: java.lang.String;
			static KEY_SAMPLE_RATE: java.lang.String;
			static KEY_CHANNEL_COUNT: java.lang.String;
			static KEY_WIDTH: java.lang.String;
			static KEY_HEIGHT: java.lang.String;
			static KEY_MAX_INPUT_SIZE: java.lang.String;
			static KEY_BIT_RATE: java.lang.String;
			static KEY_COLOR_FORMAT: java.lang.String;
			static KEY_FRAME_RATE: java.lang.String;
			static KEY_I_FRAME_INTERVAL: java.lang.String;
			static KEY_DURATION: java.lang.String;
			static KEY_IS_ADTS: java.lang.String;
			static KEY_CHANNEL_MASK: java.lang.String;
			static KEY_AAC_PROFILE: java.lang.String;
			static KEY_FLAC_COMPRESSION_LEVEL: java.lang.String;
			static class: java.lang.Class<android.media.MediaFormat>;
			static createAudioFormat(arg1: java.lang.String, arg2: number, arg3: number): android.media.MediaFormat;
			static createAudioFormat(arg1: string, arg2: number, arg3: number): android.media.MediaFormat;
			static createVideoFormat(arg1: java.lang.String, arg2: number, arg3: number): android.media.MediaFormat;
			static createVideoFormat(arg1: string, arg2: number, arg3: number): android.media.MediaFormat;
			setByteBuffer(arg1: java.lang.String, arg2: java.nio.ByteBuffer): void;
			setByteBuffer(arg1: string, arg2: java.nio.ByteBuffer): void;
			setInteger(arg1: java.lang.String, arg2: number): void;
			setInteger(arg1: string, arg2: number): void;
			toString(): string;
			containsKey(arg1: java.lang.String): boolean;
			containsKey(arg1: string): boolean;
			getFloat(arg1: java.lang.String): number;
			getFloat(arg1: string): number;
			getLong(arg1: java.lang.String): any;
			getLong(arg1: string): any;
			setFloat(arg1: java.lang.String, arg2: native.Float): void;
			setFloat(arg1: string, arg2: native.Float): void;
			setLong(arg1: java.lang.String, arg2: native.Long): void;
			setLong(arg1: string, arg2: native.Long): void;
			getInteger(arg1: java.lang.String): number;
			getInteger(arg1: string): number;
			getByteBuffer(arg1: java.lang.String): java.nio.ByteBuffer;
			getByteBuffer(arg1: string): java.nio.ByteBuffer;
			getString(arg1: java.lang.String): string;
			getString(arg1: string): string;
			setString(arg1: java.lang.String, arg2: java.lang.String): void;
			setString(arg1: string, arg2: string): void;
		}
		export module audiofx {
			export class Visualizer extends java.lang.Object {
				constructor(arg1: number);
				static STATE_UNINITIALIZED: number;
				static STATE_INITIALIZED: number;
				static STATE_ENABLED: number;
				static SCALING_MODE_NORMALIZED: number;
				static SCALING_MODE_AS_PLAYED: number;
				static SUCCESS: number;
				static ERROR: number;
				static ALREADY_EXISTS: number;
				static ERROR_NO_INIT: number;
				static ERROR_BAD_VALUE: number;
				static ERROR_INVALID_OPERATION: number;
				static ERROR_NO_MEMORY: number;
				static ERROR_DEAD_OBJECT: number;
				static class: java.lang.Class<android.media.audiofx.Visualizer>;
				Enabled: boolean;
				CaptureSize: number;
				ScalingMode: number;
				static getMaxCaptureRate(): number;
				setScalingMode(arg1: number): number;
				getCaptureSize(): number;
				getSamplingRate(): number;
				static getCaptureSizeRange(): native.Array<number>;
				getScalingMode(): number;
				setCaptureSize(arg1: number): number;
				setDataCaptureListener(arg1: android.media.audiofx.Visualizer.IOnDataCaptureListener, arg2: number, arg3: boolean, arg4: boolean): number;
				getFft(arg1: native.Array<native.Byte>): number;
				getEnabled(): boolean;
				getWaveForm(arg1: native.Array<native.Byte>): number;
				release(): void;
				setEnabled(arg1: boolean): number;
			}
			export module Visualizer {
				export interface IOnDataCaptureListener {
					onWaveFormDataCapture(arg1: android.media.audiofx.Visualizer, arg2: native.Array<native.Byte>, arg3: number): void;
					onFftDataCapture(arg1: android.media.audiofx.Visualizer, arg2: native.Array<native.Byte>, arg3: number): void;
				}
				export class OnDataCaptureListener implements android.media.audiofx.Visualizer.IOnDataCaptureListener {
					constructor(implementation: android.media.audiofx.Visualizer.IOnDataCaptureListener);
					onWaveFormDataCapture(arg1: android.media.audiofx.Visualizer, arg2: native.Array<native.Byte>, arg3: number): void;
					onFftDataCapture(arg1: android.media.audiofx.Visualizer, arg2: native.Array<native.Byte>, arg3: number): void;
				}
			}
			export class AutomaticGainControl extends android.media.audiofx.AudioEffect {
				static class: java.lang.Class<android.media.audiofx.AutomaticGainControl>;
				static create(arg1: number): android.media.audiofx.AutomaticGainControl;
				static isAvailable(): boolean;
			}
			export class NoiseSuppressor extends android.media.audiofx.AudioEffect {
				static class: java.lang.Class<android.media.audiofx.NoiseSuppressor>;
				static create(arg1: number): android.media.audiofx.NoiseSuppressor;
				static isAvailable(): boolean;
			}
			export class AcousticEchoCanceler extends android.media.audiofx.AudioEffect {
				static class: java.lang.Class<android.media.audiofx.AcousticEchoCanceler>;
				static create(arg1: number): android.media.audiofx.AcousticEchoCanceler;
				static isAvailable(): boolean;
			}
			export class BassBoost extends android.media.audiofx.AudioEffect {
				constructor(arg1: number, arg2: number);
				static PARAM_STRENGTH_SUPPORTED: number;
				static PARAM_STRENGTH: number;
				static class: java.lang.Class<android.media.audiofx.BassBoost>;
				Properties: android.media.audiofx.BassBoost.Settings;
				setParameterListener(arg1: android.media.audiofx.BassBoost.IOnParameterChangeListener): void;
				getRoundedStrength(): number;
				getStrengthSupported(): boolean;
				getProperties(): android.media.audiofx.BassBoost.Settings;
				setProperties(arg1: android.media.audiofx.BassBoost.Settings): void;
				setStrength(arg1: native.Short): void;
			}
			export module BassBoost {
				export class OnParameterChangeListener implements android.media.audiofx.BassBoost.IOnParameterChangeListener {
					constructor(implementation: android.media.audiofx.BassBoost.IOnParameterChangeListener);
					onParameterChange(arg1: android.media.audiofx.BassBoost, arg2: number, arg3: number, arg4: native.Short): void;
				}
				export class Settings extends java.lang.Object {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					strength: native.Short;
					static class: java.lang.Class<android.media.audiofx.BassBoost.Settings>;
					toString(): string;
				}
				export interface IOnParameterChangeListener {
					onParameterChange(arg1: android.media.audiofx.BassBoost, arg2: number, arg3: number, arg4: native.Short): void;
				}
			}
			export class Virtualizer extends android.media.audiofx.AudioEffect {
				constructor(arg1: number, arg2: number);
				static PARAM_STRENGTH_SUPPORTED: number;
				static PARAM_STRENGTH: number;
				static class: java.lang.Class<android.media.audiofx.Virtualizer>;
				Properties: android.media.audiofx.Virtualizer.Settings;
				setParameterListener(arg1: android.media.audiofx.Virtualizer.IOnParameterChangeListener): void;
				getRoundedStrength(): number;
				getStrengthSupported(): boolean;
				getProperties(): android.media.audiofx.Virtualizer.Settings;
				setProperties(arg1: android.media.audiofx.Virtualizer.Settings): void;
				setStrength(arg1: native.Short): void;
			}
			export module Virtualizer {
				export class OnParameterChangeListener implements android.media.audiofx.Virtualizer.IOnParameterChangeListener {
					constructor(implementation: android.media.audiofx.Virtualizer.IOnParameterChangeListener);
					onParameterChange(arg1: android.media.audiofx.Virtualizer, arg2: number, arg3: number, arg4: native.Short): void;
				}
				export class Settings extends java.lang.Object {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					strength: native.Short;
					static class: java.lang.Class<android.media.audiofx.Virtualizer.Settings>;
					toString(): string;
				}
				export interface IOnParameterChangeListener {
					onParameterChange(arg1: android.media.audiofx.Virtualizer, arg2: number, arg3: number, arg4: native.Short): void;
				}
			}
			export class AudioEffect extends java.lang.Object {
				static SUCCESS: number;
				static ERROR: number;
				static ALREADY_EXISTS: number;
				static ERROR_NO_INIT: number;
				static ERROR_BAD_VALUE: number;
				static ERROR_INVALID_OPERATION: number;
				static ERROR_NO_MEMORY: number;
				static ERROR_DEAD_OBJECT: number;
				static EFFECT_INSERT: java.lang.String;
				static EFFECT_AUXILIARY: java.lang.String;
				static ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL: java.lang.String;
				static ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION: java.lang.String;
				static ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION: java.lang.String;
				static EXTRA_AUDIO_SESSION: java.lang.String;
				static EXTRA_PACKAGE_NAME: java.lang.String;
				static EXTRA_CONTENT_TYPE: java.lang.String;
				static CONTENT_TYPE_MUSIC: number;
				static CONTENT_TYPE_MOVIE: number;
				static CONTENT_TYPE_GAME: number;
				static CONTENT_TYPE_VOICE: number;
				static class: java.lang.Class<android.media.audiofx.AudioEffect>;
				Enabled: boolean;
				setEnableStatusListener(arg1: android.media.audiofx.AudioEffect.IOnEnableStatusChangeListener): void;
				setControlStatusListener(arg1: android.media.audiofx.AudioEffect.IOnControlStatusChangeListener): void;
				static queryEffects(): native.Array<android.media.audiofx.AudioEffect.Descriptor>;
				getEnabled(): boolean;
				hasControl(): boolean;
				getDescriptor(): android.media.audiofx.AudioEffect.Descriptor;
				getId(): number;
				release(): void;
				setEnabled(arg1: boolean): number;
			}
			export module AudioEffect {
				export class OnControlStatusChangeListener implements android.media.audiofx.AudioEffect.IOnControlStatusChangeListener {
					constructor(implementation: android.media.audiofx.AudioEffect.IOnControlStatusChangeListener);
					onControlStatusChange(arg1: android.media.audiofx.AudioEffect, arg2: boolean): void;
				}
				export class Descriptor extends java.lang.Object {
					constructor();
					constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String);
					constructor(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string);
					type: java.util.UUID;
					uuid: java.util.UUID;
					connectMode: java.lang.String;
					name: java.lang.String;
					implementor: java.lang.String;
					static class: java.lang.Class<android.media.audiofx.AudioEffect.Descriptor>;
				}
				export class OnEnableStatusChangeListener implements android.media.audiofx.AudioEffect.IOnEnableStatusChangeListener {
					constructor(implementation: android.media.audiofx.AudioEffect.IOnEnableStatusChangeListener);
					onEnableStatusChange(arg1: android.media.audiofx.AudioEffect, arg2: boolean): void;
				}
				export interface IOnControlStatusChangeListener {
					onControlStatusChange(arg1: android.media.audiofx.AudioEffect, arg2: boolean): void;
				}
				export interface IOnEnableStatusChangeListener {
					onEnableStatusChange(arg1: android.media.audiofx.AudioEffect, arg2: boolean): void;
				}
			}
			export class Equalizer extends android.media.audiofx.AudioEffect {
				constructor(arg1: number, arg2: number);
				static PARAM_NUM_BANDS: number;
				static PARAM_LEVEL_RANGE: number;
				static PARAM_BAND_LEVEL: number;
				static PARAM_CENTER_FREQ: number;
				static PARAM_BAND_FREQ_RANGE: number;
				static PARAM_GET_BAND: number;
				static PARAM_CURRENT_PRESET: number;
				static PARAM_GET_NUM_OF_PRESETS: number;
				static PARAM_GET_PRESET_NAME: number;
				static PARAM_STRING_SIZE_MAX: number;
				static class: java.lang.Class<android.media.audiofx.Equalizer>;
				Properties: android.media.audiofx.Equalizer.Settings;
				setParameterListener(arg1: android.media.audiofx.Equalizer.IOnParameterChangeListener): void;
				getCurrentPreset(): number;
				getNumberOfPresets(): number;
				getNumberOfBands(): number;
				getBandLevelRange(): native.Array<native.Short>;
				getBandFreqRange(arg1: native.Short): native.Array<number>;
				getBandLevel(arg1: native.Short): number;
				getBand(arg1: number): number;
				getPresetName(arg1: native.Short): string;
				setBandLevel(arg1: native.Short, arg2: native.Short): void;
				getCenterFreq(arg1: native.Short): number;
				usePreset(arg1: native.Short): void;
				getProperties(): android.media.audiofx.Equalizer.Settings;
				setProperties(arg1: android.media.audiofx.Equalizer.Settings): void;
			}
			export module Equalizer {
				export class OnParameterChangeListener implements android.media.audiofx.Equalizer.IOnParameterChangeListener {
					constructor(implementation: android.media.audiofx.Equalizer.IOnParameterChangeListener);
					onParameterChange(arg1: android.media.audiofx.Equalizer, arg2: number, arg3: number, arg4: number, arg5: number): void;
				}
				export class Settings extends java.lang.Object {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					curPreset: native.Short;
					numBands: native.Short;
					bandLevels: native.Array<native.Short>;
					static class: java.lang.Class<android.media.audiofx.Equalizer.Settings>;
					toString(): string;
				}
				export interface IOnParameterChangeListener {
					onParameterChange(arg1: android.media.audiofx.Equalizer, arg2: number, arg3: number, arg4: number, arg5: number): void;
				}
			}
			export class PresetReverb extends android.media.audiofx.AudioEffect {
				constructor(arg1: number, arg2: number);
				static PARAM_PRESET: number;
				static PRESET_NONE: native.Short;
				static PRESET_SMALLROOM: native.Short;
				static PRESET_MEDIUMROOM: native.Short;
				static PRESET_LARGEROOM: native.Short;
				static PRESET_MEDIUMHALL: native.Short;
				static PRESET_LARGEHALL: native.Short;
				static PRESET_PLATE: native.Short;
				static class: java.lang.Class<android.media.audiofx.PresetReverb>;
				Properties: android.media.audiofx.PresetReverb.Settings;
				setParameterListener(arg1: android.media.audiofx.PresetReverb.IOnParameterChangeListener): void;
				setPreset(arg1: native.Short): void;
				getPreset(): number;
				getProperties(): android.media.audiofx.PresetReverb.Settings;
				setProperties(arg1: android.media.audiofx.PresetReverb.Settings): void;
			}
			export module PresetReverb {
				export class OnParameterChangeListener implements android.media.audiofx.PresetReverb.IOnParameterChangeListener {
					constructor(implementation: android.media.audiofx.PresetReverb.IOnParameterChangeListener);
					onParameterChange(arg1: android.media.audiofx.PresetReverb, arg2: number, arg3: number, arg4: native.Short): void;
				}
				export class Settings extends java.lang.Object {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					preset: native.Short;
					static class: java.lang.Class<android.media.audiofx.PresetReverb.Settings>;
					toString(): string;
				}
				export interface IOnParameterChangeListener {
					onParameterChange(arg1: android.media.audiofx.PresetReverb, arg2: number, arg3: number, arg4: native.Short): void;
				}
			}
			export class EnvironmentalReverb extends android.media.audiofx.AudioEffect {
				constructor(arg1: number, arg2: number);
				static PARAM_ROOM_LEVEL: number;
				static PARAM_ROOM_HF_LEVEL: number;
				static PARAM_DECAY_TIME: number;
				static PARAM_DECAY_HF_RATIO: number;
				static PARAM_REFLECTIONS_LEVEL: number;
				static PARAM_REFLECTIONS_DELAY: number;
				static PARAM_REVERB_LEVEL: number;
				static PARAM_REVERB_DELAY: number;
				static PARAM_DIFFUSION: number;
				static PARAM_DENSITY: number;
				static class: java.lang.Class<android.media.audiofx.EnvironmentalReverb>;
				DecayTime: number;
				ReverbDelay: number;
				ReflectionsDelay: number;
				Properties: android.media.audiofx.EnvironmentalReverb.Settings;
				setReflectionsLevel(arg1: native.Short): void;
				getReflectionsLevel(): number;
				setDecayHFRatio(arg1: native.Short): void;
				setReverbLevel(arg1: native.Short): void;
				getReflectionsDelay(): number;
				getRoomHFLevel(): number;
				setReverbDelay(arg1: number): void;
				setRoomHFLevel(arg1: native.Short): void;
				setReflectionsDelay(arg1: number): void;
				getDecayHFRatio(): number;
				getReverbLevel(): number;
				getReverbDelay(): number;
				setParameterListener(arg1: android.media.audiofx.EnvironmentalReverb.IOnParameterChangeListener): void;
				setRoomLevel(arg1: native.Short): void;
				getRoomLevel(): number;
				getDecayTime(): number;
				setDensity(arg1: native.Short): void;
				getDiffusion(): number;
				setDecayTime(arg1: number): void;
				getDensity(): number;
				setDiffusion(arg1: native.Short): void;
				getProperties(): android.media.audiofx.EnvironmentalReverb.Settings;
				setProperties(arg1: android.media.audiofx.EnvironmentalReverb.Settings): void;
			}
			export module EnvironmentalReverb {
				export class OnParameterChangeListener implements android.media.audiofx.EnvironmentalReverb.IOnParameterChangeListener {
					constructor(implementation: android.media.audiofx.EnvironmentalReverb.IOnParameterChangeListener);
					onParameterChange(arg1: android.media.audiofx.EnvironmentalReverb, arg2: number, arg3: number, arg4: number): void;
				}
				export class Settings extends java.lang.Object {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					roomLevel: native.Short;
					roomHFLevel: native.Short;
					decayTime: number;
					decayHFRatio: native.Short;
					reflectionsLevel: native.Short;
					reflectionsDelay: number;
					reverbLevel: native.Short;
					reverbDelay: number;
					diffusion: native.Short;
					density: native.Short;
					static class: java.lang.Class<android.media.audiofx.EnvironmentalReverb.Settings>;
					toString(): string;
				}
				export interface IOnParameterChangeListener {
					onParameterChange(arg1: android.media.audiofx.EnvironmentalReverb, arg2: number, arg3: number, arg4: number): void;
				}
			}
		}
		export class MediaCodec extends java.lang.Object {
			static BUFFER_FLAG_SYNC_FRAME: number;
			static BUFFER_FLAG_CODEC_CONFIG: number;
			static BUFFER_FLAG_END_OF_STREAM: number;
			static CONFIGURE_FLAG_ENCODE: number;
			static CRYPTO_MODE_UNENCRYPTED: number;
			static CRYPTO_MODE_AES_CTR: number;
			static INFO_TRY_AGAIN_LATER: number;
			static INFO_OUTPUT_FORMAT_CHANGED: number;
			static INFO_OUTPUT_BUFFERS_CHANGED: number;
			static VIDEO_SCALING_MODE_SCALE_TO_FIT: number;
			static VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING: number;
			static class: java.lang.Class<android.media.MediaCodec>;
			configure(arg1: android.media.MediaFormat, arg2: android.view.Surface, arg3: android.media.MediaCrypto, arg4: number): void;
			setVideoScalingMode(arg1: number): void;
			queueInputBuffer(arg1: number, arg2: number, arg3: number, arg4: native.Long, arg5: number): void;
			releaseOutputBuffer(arg1: number, arg2: boolean): void;
			getInputBuffers(): native.Array<java.nio.ByteBuffer>;
			dequeueOutputBuffer(arg1: android.media.MediaCodec.BufferInfo, arg2: native.Long): number;
			getOutputBuffers(): native.Array<java.nio.ByteBuffer>;
			static createEncoderByType(arg1: java.lang.String): android.media.MediaCodec;
			static createEncoderByType(arg1: string): android.media.MediaCodec;
			getOutputFormat(): android.media.MediaFormat;
			static createDecoderByType(arg1: java.lang.String): android.media.MediaCodec;
			static createDecoderByType(arg1: string): android.media.MediaCodec;
			static createByCodecName(arg1: java.lang.String): android.media.MediaCodec;
			static createByCodecName(arg1: string): android.media.MediaCodec;
			dequeueInputBuffer(arg1: native.Long): number;
			queueSecureInputBuffer(arg1: number, arg2: number, arg3: android.media.MediaCodec.CryptoInfo, arg4: native.Long, arg5: number): void;
			start(): void;
			stop(): void;
			flush(): void;
			release(): void;
		}
		export module MediaCodec {
			export class CryptoException extends java.lang.RuntimeException {
				constructor(arg1: number, arg2: java.lang.String);
				constructor(arg1: number, arg2: string);
				static class: java.lang.Class<android.media.MediaCodec.CryptoException>;
				getErrorCode(): number;
			}
			export class CryptoInfo extends java.lang.Object {
				constructor();
				numSubSamples: number;
				numBytesOfClearData: native.Array<number>;
				numBytesOfEncryptedData: native.Array<number>;
				key: native.Array<native.Byte>;
				iv: native.Array<native.Byte>;
				mode: number;
				static class: java.lang.Class<android.media.MediaCodec.CryptoInfo>;
				set(arg1: number, arg2: native.Array<number>, arg3: native.Array<number>, arg4: native.Array<native.Byte>, arg5: native.Array<native.Byte>, arg6: number): void;
			}
			export class BufferInfo extends java.lang.Object {
				constructor();
				offset: number;
				size: number;
				presentationTimeUs: native.Long;
				flags: number;
				static class: java.lang.Class<android.media.MediaCodec.BufferInfo>;
				set(arg1: number, arg2: number, arg3: native.Long, arg4: number): void;
			}
		}
		export class CameraProfile extends java.lang.Object {
			constructor();
			static QUALITY_LOW: number;
			static QUALITY_MEDIUM: number;
			static QUALITY_HIGH: number;
			static class: java.lang.Class<android.media.CameraProfile>;
			static getJpegEncodingQualityParameter(arg1: number): number;
			static getJpegEncodingQualityParameter(arg1: number, arg2: number): number;
		}
		export class AudioTrack extends java.lang.Object {
			constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number);
			constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number);
			static PLAYSTATE_STOPPED: number;
			static PLAYSTATE_PAUSED: number;
			static PLAYSTATE_PLAYING: number;
			static MODE_STATIC: number;
			static MODE_STREAM: number;
			static STATE_UNINITIALIZED: number;
			static STATE_INITIALIZED: number;
			static STATE_NO_STATIC_DATA: number;
			static SUCCESS: number;
			static ERROR: number;
			static ERROR_BAD_VALUE: number;
			static ERROR_INVALID_OPERATION: number;
			static class: java.lang.Class<android.media.AudioTrack>;
			PlaybackRate: number;
			PositionNotificationPeriod: number;
			NotificationMarkerPosition: number;
			PlaybackHeadPosition: number;
			pause(): void;
			getAudioSessionId(): number;
			setAuxEffectSendLevel(arg1: native.Float): number;
			getPlaybackRate(): number;
			getAudioFormat(): number;
			setStereoVolume(arg1: native.Float, arg2: native.Float): number;
			setPlaybackRate(arg1: number): number;
			getChannelCount(): number;
			attachAuxEffect(arg1: number): number;
			reloadStaticData(): number;
			setPlaybackPositionUpdateListener(arg1: android.media.AudioTrack.IOnPlaybackPositionUpdateListener): void;
			setPlaybackPositionUpdateListener(arg1: android.media.AudioTrack.IOnPlaybackPositionUpdateListener, arg2: android.os.Handler): void;
			getChannelConfiguration(): number;
			static getNativeOutputSampleRate(arg1: number): number;
			getPositionNotificationPeriod(): number;
			setNotificationMarkerPosition(arg1: number): number;
			getNotificationMarkerPosition(): number;
			setPositionNotificationPeriod(arg1: number): number;
			setPlaybackHeadPosition(arg1: number): number;
			getPlaybackHeadPosition(): number;
			getSampleRate(): number;
			getStreamType(): number;
			setLoopPoints(arg1: number, arg2: number, arg3: number): number;
			static getMaxVolume(): number;
			getPlayState(): number;
			static getMinVolume(): number;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			getState(): number;
			stop(): void;
			flush(): void;
			release(): void;
			play(): void;
			static getMinBufferSize(arg1: number, arg2: number, arg3: number): number;
		}
		export module AudioTrack {
			export class OnPlaybackPositionUpdateListener implements android.media.AudioTrack.IOnPlaybackPositionUpdateListener {
				constructor(implementation: android.media.AudioTrack.IOnPlaybackPositionUpdateListener);
				onMarkerReached(arg1: android.media.AudioTrack): void;
				onPeriodicNotification(arg1: android.media.AudioTrack): void;
			}
			export interface IOnPlaybackPositionUpdateListener {
				onMarkerReached(arg1: android.media.AudioTrack): void;
				onPeriodicNotification(arg1: android.media.AudioTrack): void;
			}
		}
		export class TimedText extends java.lang.Object {
			static class: java.lang.Class<android.media.TimedText>;
			getBounds(): android.graphics.Rect;
			getText(): string;
		}
		export class MediaActionSound extends java.lang.Object {
			constructor();
			static SHUTTER_CLICK: number;
			static FOCUS_COMPLETE: number;
			static START_VIDEO_RECORDING: number;
			static STOP_VIDEO_RECORDING: number;
			static class: java.lang.Class<android.media.MediaActionSound>;
			load(arg1: number): void;
			release(): void;
			play(arg1: number): void;
		}
		export class JetPlayer extends java.lang.Object {
			static class: java.lang.Class<android.media.JetPlayer>;
			pause(): boolean;
			queueJetSegment(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: native.Byte): boolean;
			setEventListener(arg1: android.media.JetPlayer.IOnJetEventListener): void;
			setEventListener(arg1: android.media.JetPlayer.IOnJetEventListener, arg2: android.os.Handler): void;
			queueJetSegmentMuteArray(arg1: number, arg2: number, arg3: number, arg4: number, arg5: native.Array<boolean>, arg6: native.Byte): boolean;
			setMuteFlags(arg1: number, arg2: boolean): boolean;
			loadJetFile(arg1: android.content.res.AssetFileDescriptor): boolean;
			loadJetFile(arg1: java.lang.String): boolean;
			loadJetFile(arg1: string): boolean;
			static getMaxTracks(): number;
			static getJetPlayer(): android.media.JetPlayer;
			setMuteArray(arg1: native.Array<boolean>, arg2: boolean): boolean;
			setMuteFlag(arg1: number, arg2: boolean, arg3: boolean): boolean;
			closeJetFile(): boolean;
			triggerClip(arg1: number): boolean;
			clearQueue(): boolean;
			clone(): any;
			release(): void;
			play(): boolean;
		}
		export module JetPlayer {
			export interface IOnJetEventListener {
				onJetUserIdUpdate(arg1: android.media.JetPlayer, arg2: number, arg3: number): void;
				onJetPauseUpdate(arg1: android.media.JetPlayer, arg2: number): void;
				onJetNumQueuedSegmentUpdate(arg1: android.media.JetPlayer, arg2: number): void;
				onJetEvent(arg1: android.media.JetPlayer, arg2: native.Short, arg3: native.Byte, arg4: native.Byte, arg5: native.Byte, arg6: native.Byte): void;
			}
			export class OnJetEventListener implements android.media.JetPlayer.IOnJetEventListener {
				constructor(implementation: android.media.JetPlayer.IOnJetEventListener);
				onJetUserIdUpdate(arg1: android.media.JetPlayer, arg2: number, arg3: number): void;
				onJetPauseUpdate(arg1: android.media.JetPlayer, arg2: number): void;
				onJetNumQueuedSegmentUpdate(arg1: android.media.JetPlayer, arg2: number): void;
				onJetEvent(arg1: android.media.JetPlayer, arg2: native.Short, arg3: native.Byte, arg4: native.Byte, arg5: native.Byte, arg6: native.Byte): void;
			}
		}
		export class MediaCodecInfo extends java.lang.Object {
			static class: java.lang.Class<android.media.MediaCodecInfo>;
			getSupportedTypes(): native.Array<java.lang.String>;
			getCapabilitiesForType(arg1: java.lang.String): android.media.MediaCodecInfo.CodecCapabilities;
			getCapabilitiesForType(arg1: string): android.media.MediaCodecInfo.CodecCapabilities;
			isEncoder(): boolean;
			getName(): string;
		}
		export module MediaCodecInfo {
			export class CodecProfileLevel extends java.lang.Object {
				constructor();
				static AVCProfileBaseline: number;
				static AVCProfileMain: number;
				static AVCProfileExtended: number;
				static AVCProfileHigh: number;
				static AVCProfileHigh10: number;
				static AVCProfileHigh422: number;
				static AVCProfileHigh444: number;
				static AVCLevel1: number;
				static AVCLevel1b: number;
				static AVCLevel11: number;
				static AVCLevel12: number;
				static AVCLevel13: number;
				static AVCLevel2: number;
				static AVCLevel21: number;
				static AVCLevel22: number;
				static AVCLevel3: number;
				static AVCLevel31: number;
				static AVCLevel32: number;
				static AVCLevel4: number;
				static AVCLevel41: number;
				static AVCLevel42: number;
				static AVCLevel5: number;
				static AVCLevel51: number;
				static H263ProfileBaseline: number;
				static H263ProfileH320Coding: number;
				static H263ProfileBackwardCompatible: number;
				static H263ProfileISWV2: number;
				static H263ProfileISWV3: number;
				static H263ProfileHighCompression: number;
				static H263ProfileInternet: number;
				static H263ProfileInterlace: number;
				static H263ProfileHighLatency: number;
				static H263Level10: number;
				static H263Level20: number;
				static H263Level30: number;
				static H263Level40: number;
				static H263Level45: number;
				static H263Level50: number;
				static H263Level60: number;
				static H263Level70: number;
				static MPEG4ProfileSimple: number;
				static MPEG4ProfileSimpleScalable: number;
				static MPEG4ProfileCore: number;
				static MPEG4ProfileMain: number;
				static MPEG4ProfileNbit: number;
				static MPEG4ProfileScalableTexture: number;
				static MPEG4ProfileSimpleFace: number;
				static MPEG4ProfileSimpleFBA: number;
				static MPEG4ProfileBasicAnimated: number;
				static MPEG4ProfileHybrid: number;
				static MPEG4ProfileAdvancedRealTime: number;
				static MPEG4ProfileCoreScalable: number;
				static MPEG4ProfileAdvancedCoding: number;
				static MPEG4ProfileAdvancedCore: number;
				static MPEG4ProfileAdvancedScalable: number;
				static MPEG4ProfileAdvancedSimple: number;
				static MPEG4Level0: number;
				static MPEG4Level0b: number;
				static MPEG4Level1: number;
				static MPEG4Level2: number;
				static MPEG4Level3: number;
				static MPEG4Level4: number;
				static MPEG4Level4a: number;
				static MPEG4Level5: number;
				static AACObjectMain: number;
				static AACObjectLC: number;
				static AACObjectSSR: number;
				static AACObjectLTP: number;
				static AACObjectHE: number;
				static AACObjectScalable: number;
				static AACObjectERLC: number;
				static AACObjectLD: number;
				static AACObjectHE_PS: number;
				static AACObjectELD: number;
				profile: number;
				level: number;
				static class: java.lang.Class<android.media.MediaCodecInfo.CodecProfileLevel>;
			}
			export class CodecCapabilities extends java.lang.Object {
				constructor();
				profileLevels: native.Array<android.media.MediaCodecInfo.CodecProfileLevel>;
				static COLOR_FormatMonochrome: number;
				static COLOR_Format8bitRGB332: number;
				static COLOR_Format12bitRGB444: number;
				static COLOR_Format16bitARGB4444: number;
				static COLOR_Format16bitARGB1555: number;
				static COLOR_Format16bitRGB565: number;
				static COLOR_Format16bitBGR565: number;
				static COLOR_Format18bitRGB666: number;
				static COLOR_Format18bitARGB1665: number;
				static COLOR_Format19bitARGB1666: number;
				static COLOR_Format24bitRGB888: number;
				static COLOR_Format24bitBGR888: number;
				static COLOR_Format24bitARGB1887: number;
				static COLOR_Format25bitARGB1888: number;
				static COLOR_Format32bitBGRA8888: number;
				static COLOR_Format32bitARGB8888: number;
				static COLOR_FormatYUV411Planar: number;
				static COLOR_FormatYUV411PackedPlanar: number;
				static COLOR_FormatYUV420Planar: number;
				static COLOR_FormatYUV420PackedPlanar: number;
				static COLOR_FormatYUV420SemiPlanar: number;
				static COLOR_FormatYUV422Planar: number;
				static COLOR_FormatYUV422PackedPlanar: number;
				static COLOR_FormatYUV422SemiPlanar: number;
				static COLOR_FormatYCbYCr: number;
				static COLOR_FormatYCrYCb: number;
				static COLOR_FormatCbYCrY: number;
				static COLOR_FormatCrYCbY: number;
				static COLOR_FormatYUV444Interleaved: number;
				static COLOR_FormatRawBayer8bit: number;
				static COLOR_FormatRawBayer10bit: number;
				static COLOR_FormatRawBayer8bitcompressed: number;
				static COLOR_FormatL2: number;
				static COLOR_FormatL4: number;
				static COLOR_FormatL8: number;
				static COLOR_FormatL16: number;
				static COLOR_FormatL24: number;
				static COLOR_FormatL32: number;
				static COLOR_FormatYUV420PackedSemiPlanar: number;
				static COLOR_FormatYUV422PackedSemiPlanar: number;
				static COLOR_Format18BitBGR666: number;
				static COLOR_Format24BitARGB6666: number;
				static COLOR_Format24BitABGR6666: number;
				static COLOR_TI_FormatYUV420PackedSemiPlanar: number;
				static COLOR_QCOM_FormatYUV420SemiPlanar: number;
				colorFormats: native.Array<number>;
				static class: java.lang.Class<android.media.MediaCodecInfo.CodecCapabilities>;
			}
		}
		export class MediaRouter extends java.lang.Object {
			static ROUTE_TYPE_LIVE_AUDIO: number;
			static ROUTE_TYPE_LIVE_VIDEO: number;
			static ROUTE_TYPE_USER: number;
			static class: java.lang.Class<android.media.MediaRouter>;
			addCallback(arg1: number, arg2: android.media.MediaRouter.Callback): void;
			removeCallback(arg1: android.media.MediaRouter.Callback): void;
			removeUserRoute(arg1: android.media.MediaRouter.UserRouteInfo): void;
			getSelectedRoute(arg1: number): android.media.MediaRouter.RouteInfo;
			clearUserRoutes(): void;
			createUserRoute(arg1: android.media.MediaRouter.RouteCategory): android.media.MediaRouter.UserRouteInfo;
			createRouteCategory(arg1: number, arg2: boolean): android.media.MediaRouter.RouteCategory;
			createRouteCategory(arg1: java.lang.ICharSequence, arg2: boolean): android.media.MediaRouter.RouteCategory;
			createRouteCategory(arg1: string, arg2: boolean): android.media.MediaRouter.RouteCategory;
			getCategoryCount(): number;
			getCategoryAt(arg1: number): android.media.MediaRouter.RouteCategory;
			getRouteCount(): number;
			addUserRoute(arg1: android.media.MediaRouter.UserRouteInfo): void;
			selectRoute(arg1: number, arg2: android.media.MediaRouter.RouteInfo): void;
			getRouteAt(arg1: number): android.media.MediaRouter.RouteInfo;
		}
		export module MediaRouter {
			export class VolumeCallback extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.media.MediaRouter.VolumeCallback>;
				onVolumeUpdateRequest(arg1: android.media.MediaRouter.RouteInfo, arg2: number): void;
				onVolumeSetRequest(arg1: android.media.MediaRouter.RouteInfo, arg2: number): void;
			}
			export class SimpleCallback extends android.media.MediaRouter.Callback {
				constructor();
				static class: java.lang.Class<android.media.MediaRouter.SimpleCallback>;
				onRouteChanged(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
				onRouteGrouped(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo, arg3: android.media.MediaRouter.RouteGroup, arg4: number): void;
				onRouteSelected(arg1: android.media.MediaRouter, arg2: number, arg3: android.media.MediaRouter.RouteInfo): void;
				onRouteUngrouped(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo, arg3: android.media.MediaRouter.RouteGroup): void;
				onRouteUnselected(arg1: android.media.MediaRouter, arg2: number, arg3: android.media.MediaRouter.RouteInfo): void;
				onRouteRemoved(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
				onRouteVolumeChanged(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
				onRouteAdded(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
			}
			export class UserRouteInfo extends android.media.MediaRouter.RouteInfo {
				static class: java.lang.Class<android.media.MediaRouter.UserRouteInfo>;
				RemoteControlClient: android.media.RemoteControlClient;
				setIconDrawable(arg1: android.graphics.drawable.Drawable): void;
				setIconResource(arg1: number): void;
				setVolumeCallback(arg1: android.media.MediaRouter.VolumeCallback): void;
				setPlaybackStream(arg1: number): void;
				setPlaybackType(arg1: number): void;
				setVolumeHandling(arg1: number): void;
				requestSetVolume(arg1: number): void;
				requestUpdateVolume(arg1: number): void;
				setRemoteControlClient(arg1: android.media.RemoteControlClient): void;
				getRemoteControlClient(): android.media.RemoteControlClient;
				setVolumeMax(arg1: number): void;
				setVolume(arg1: number): void;
				setName(arg1: java.lang.ICharSequence): void;
				setName(arg1: string): void;
				setName(arg1: number): void;
				setStatus(arg1: java.lang.ICharSequence): void;
				setStatus(arg1: string): void;
			}
			export class RouteInfo extends java.lang.Object {
				static PLAYBACK_TYPE_LOCAL: number;
				static PLAYBACK_TYPE_REMOTE: number;
				static PLAYBACK_VOLUME_FIXED: number;
				static PLAYBACK_VOLUME_VARIABLE: number;
				static class: java.lang.Class<android.media.MediaRouter.RouteInfo>;
				Tag: any;
				setTag(arg1: any): void;
				getCategory(): android.media.MediaRouter.RouteCategory;
				getIconDrawable(): android.graphics.drawable.Drawable;
				getSupportedTypes(): number;
				getPlaybackType(): number;
				getPlaybackStream(): number;
				requestSetVolume(arg1: number): void;
				getVolumeHandling(): number;
				requestUpdateVolume(arg1: number): void;
				getPresentationDisplay(): android.view.Display;
				getVolume(): number;
				getVolumeMax(): number;
				toString(): string;
				getName(arg1: android.content.Context): java.lang.ICharSequence;
				getName(): java.lang.ICharSequence;
				isEnabled(): boolean;
				getGroup(): android.media.MediaRouter.RouteGroup;
				getStatus(): java.lang.ICharSequence;
				getTag(): any;
			}
			export class Callback extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.media.MediaRouter.Callback>;
				onRouteChanged(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
				onRouteGrouped(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo, arg3: android.media.MediaRouter.RouteGroup, arg4: number): void;
				onRouteSelected(arg1: android.media.MediaRouter, arg2: number, arg3: android.media.MediaRouter.RouteInfo): void;
				onRouteUngrouped(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo, arg3: android.media.MediaRouter.RouteGroup): void;
				onRouteUnselected(arg1: android.media.MediaRouter, arg2: number, arg3: android.media.MediaRouter.RouteInfo): void;
				onRouteRemoved(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
				onRouteVolumeChanged(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
				onRoutePresentationDisplayChanged(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
				onRouteAdded(arg1: android.media.MediaRouter, arg2: android.media.MediaRouter.RouteInfo): void;
			}
			export class RouteGroup extends android.media.MediaRouter.RouteInfo {
				static class: java.lang.Class<android.media.MediaRouter.RouteGroup>;
				addRoute(arg1: android.media.MediaRouter.RouteInfo, arg2: number): void;
				addRoute(arg1: android.media.MediaRouter.RouteInfo): void;
				setIconDrawable(arg1: android.graphics.drawable.Drawable): void;
				setIconResource(arg1: number): void;
				requestSetVolume(arg1: number): void;
				requestUpdateVolume(arg1: number): void;
				removeRoute(arg1: android.media.MediaRouter.RouteInfo): void;
				removeRoute(arg1: number): void;
				getRouteCount(): number;
				getRouteAt(arg1: number): android.media.MediaRouter.RouteInfo;
				toString(): string;
			}
			export class RouteCategory extends java.lang.Object {
				static class: java.lang.Class<android.media.MediaRouter.RouteCategory>;
				getSupportedTypes(): number;
				getRoutes(arg1: java.util.IList<android.media.MediaRouter.RouteInfo>): java.util.IList<android.media.MediaRouter.RouteInfo>;
				isGroupable(): boolean;
				toString(): string;
				getName(): java.lang.ICharSequence;
				getName(arg1: android.content.Context): java.lang.ICharSequence;
			}
		}
		export class AudioRecord extends java.lang.Object {
			constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number);
			static STATE_UNINITIALIZED: number;
			static STATE_INITIALIZED: number;
			static RECORDSTATE_STOPPED: number;
			static RECORDSTATE_RECORDING: number;
			static SUCCESS: number;
			static ERROR: number;
			static ERROR_BAD_VALUE: number;
			static ERROR_INVALID_OPERATION: number;
			static class: java.lang.Class<android.media.AudioRecord>;
			NotificationMarkerPosition: number;
			PositionNotificationPeriod: number;
			getAudioSessionId(): number;
			getAudioFormat(): number;
			getChannelCount(): number;
			getAudioSource(): number;
			getRecordingState(): number;
			startRecording(arg1: android.media.MediaSyncEvent): void;
			startRecording(): void;
			setRecordPositionUpdateListener(arg1: android.media.AudioRecord.IOnRecordPositionUpdateListener, arg2: android.os.Handler): void;
			setRecordPositionUpdateListener(arg1: android.media.AudioRecord.IOnRecordPositionUpdateListener): void;
			getChannelConfiguration(): number;
			getPositionNotificationPeriod(): number;
			setNotificationMarkerPosition(arg1: number): number;
			getNotificationMarkerPosition(): number;
			setPositionNotificationPeriod(arg1: number): number;
			getSampleRate(): number;
			getState(): number;
			stop(): void;
			read(arg1: java.nio.ByteBuffer, arg2: number): number;
			read(arg1: native.Array<native.Short>, arg2: number, arg3: number): number;
			release(): void;
			static getMinBufferSize(arg1: number, arg2: number, arg3: number): number;
		}
		export module AudioRecord {
			export interface IOnRecordPositionUpdateListener {
				onMarkerReached(arg1: android.media.AudioRecord): void;
				onPeriodicNotification(arg1: android.media.AudioRecord): void;
			}
			export class OnRecordPositionUpdateListener implements android.media.AudioRecord.IOnRecordPositionUpdateListener {
				constructor(implementation: android.media.AudioRecord.IOnRecordPositionUpdateListener);
				onMarkerReached(arg1: android.media.AudioRecord): void;
				onPeriodicNotification(arg1: android.media.AudioRecord): void;
			}
		}
		export module effect {
			export class EffectUpdateListener implements android.media.effect.IEffectUpdateListener {
				constructor(implementation: android.media.effect.IEffectUpdateListener);
				onEffectUpdated(arg1: android.media.effect.Effect, arg2: any): void;
			}
			export class EffectFactory extends java.lang.Object {
				static EFFECT_BRIGHTNESS: java.lang.String;
				static EFFECT_CONTRAST: java.lang.String;
				static EFFECT_FISHEYE: java.lang.String;
				static EFFECT_BACKDROPPER: java.lang.String;
				static EFFECT_AUTOFIX: java.lang.String;
				static EFFECT_BLACKWHITE: java.lang.String;
				static EFFECT_CROP: java.lang.String;
				static EFFECT_CROSSPROCESS: java.lang.String;
				static EFFECT_DOCUMENTARY: java.lang.String;
				static EFFECT_BITMAPOVERLAY: java.lang.String;
				static EFFECT_DUOTONE: java.lang.String;
				static EFFECT_FILLLIGHT: java.lang.String;
				static EFFECT_FLIP: java.lang.String;
				static EFFECT_GRAIN: java.lang.String;
				static EFFECT_GRAYSCALE: java.lang.String;
				static EFFECT_LOMOISH: java.lang.String;
				static EFFECT_NEGATIVE: java.lang.String;
				static EFFECT_POSTERIZE: java.lang.String;
				static EFFECT_REDEYE: java.lang.String;
				static EFFECT_ROTATE: java.lang.String;
				static EFFECT_SATURATE: java.lang.String;
				static EFFECT_SEPIA: java.lang.String;
				static EFFECT_SHARPEN: java.lang.String;
				static EFFECT_STRAIGHTEN: java.lang.String;
				static EFFECT_TEMPERATURE: java.lang.String;
				static EFFECT_TINT: java.lang.String;
				static EFFECT_VIGNETTE: java.lang.String;
				static class: java.lang.Class<android.media.effect.EffectFactory>;
				static isEffectSupported(arg1: java.lang.String): boolean;
				static isEffectSupported(arg1: string): boolean;
				createEffect(arg1: java.lang.String): android.media.effect.Effect;
				createEffect(arg1: string): android.media.effect.Effect;
			}
			export class Effect extends java.lang.Object {
				constructor();
				static class: java.lang.Class<android.media.effect.Effect>;
				apply(arg1: number, arg2: number, arg3: number, arg4: number): void;
				setUpdateListener(arg1: android.media.effect.IEffectUpdateListener): void;
				getName(): string;
				release(): void;
				setParameter(arg1: java.lang.String, arg2: any): void;
				setParameter(arg1: string, arg2: any): void;
			}
			export class EffectContext extends java.lang.Object {
				static class: java.lang.Class<android.media.effect.EffectContext>;
				static createWithCurrentGlContext(): android.media.effect.EffectContext;
				getFactory(): android.media.effect.EffectFactory;
				release(): void;
			}
			export interface IEffectUpdateListener {
				onEffectUpdated(arg1: android.media.effect.Effect, arg2: any): void;
			}
		}
		export class Ringtone extends java.lang.Object {
			static class: java.lang.Class<android.media.Ringtone>;
			StreamType: number;
			isPlaying(): boolean;
			getStreamType(): number;
			setStreamType(arg1: number): void;
			stop(): void;
			getTitle(arg1: android.content.Context): string;
			play(): void;
		}
		export class MediaCrypto extends java.lang.Object {
			constructor(arg1: java.util.UUID, arg2: native.Array<native.Byte>);
			static class: java.lang.Class<android.media.MediaCrypto>;
			requiresSecureDecoderComponent(arg1: java.lang.String): boolean;
			requiresSecureDecoderComponent(arg1: string): boolean;
			static isCryptoSchemeSupported(arg1: java.util.UUID): boolean;
			release(): void;
		}
		export class AudioManager extends java.lang.Object {
			static ACTION_AUDIO_BECOMING_NOISY: java.lang.String;
			static RINGER_MODE_CHANGED_ACTION: java.lang.String;
			static EXTRA_RINGER_MODE: java.lang.String;
			static VIBRATE_SETTING_CHANGED_ACTION: java.lang.String;
			static EXTRA_VIBRATE_SETTING: java.lang.String;
			static EXTRA_VIBRATE_TYPE: java.lang.String;
			static STREAM_VOICE_CALL: number;
			static STREAM_SYSTEM: number;
			static STREAM_RING: number;
			static STREAM_MUSIC: number;
			static STREAM_ALARM: number;
			static STREAM_NOTIFICATION: number;
			static STREAM_DTMF: number;
			static NUM_STREAMS: number;
			static ADJUST_RAISE: number;
			static ADJUST_LOWER: number;
			static ADJUST_SAME: number;
			static FLAG_SHOW_UI: number;
			static FLAG_ALLOW_RINGER_MODES: number;
			static FLAG_PLAY_SOUND: number;
			static FLAG_REMOVE_SOUND_AND_VIBRATE: number;
			static FLAG_VIBRATE: number;
			static RINGER_MODE_SILENT: number;
			static RINGER_MODE_VIBRATE: number;
			static RINGER_MODE_NORMAL: number;
			static VIBRATE_TYPE_RINGER: number;
			static VIBRATE_TYPE_NOTIFICATION: number;
			static VIBRATE_SETTING_OFF: number;
			static VIBRATE_SETTING_ON: number;
			static VIBRATE_SETTING_ONLY_SILENT: number;
			static USE_DEFAULT_STREAM_TYPE: number;
			static ACTION_SCO_AUDIO_STATE_CHANGED: java.lang.String;
			static ACTION_SCO_AUDIO_STATE_UPDATED: java.lang.String;
			static EXTRA_SCO_AUDIO_STATE: java.lang.String;
			static EXTRA_SCO_AUDIO_PREVIOUS_STATE: java.lang.String;
			static SCO_AUDIO_STATE_DISCONNECTED: number;
			static SCO_AUDIO_STATE_CONNECTED: number;
			static SCO_AUDIO_STATE_CONNECTING: number;
			static SCO_AUDIO_STATE_ERROR: number;
			static MODE_INVALID: number;
			static MODE_CURRENT: number;
			static MODE_NORMAL: number;
			static MODE_RINGTONE: number;
			static MODE_IN_CALL: number;
			static MODE_IN_COMMUNICATION: number;
			static ROUTE_EARPIECE: number;
			static ROUTE_SPEAKER: number;
			static ROUTE_BLUETOOTH: number;
			static ROUTE_BLUETOOTH_SCO: number;
			static ROUTE_HEADSET: number;
			static ROUTE_BLUETOOTH_A2DP: number;
			static ROUTE_ALL: number;
			static FX_KEY_CLICK: number;
			static FX_FOCUS_NAVIGATION_UP: number;
			static FX_FOCUS_NAVIGATION_DOWN: number;
			static FX_FOCUS_NAVIGATION_LEFT: number;
			static FX_FOCUS_NAVIGATION_RIGHT: number;
			static FX_KEYPRESS_STANDARD: number;
			static FX_KEYPRESS_SPACEBAR: number;
			static FX_KEYPRESS_DELETE: number;
			static FX_KEYPRESS_RETURN: number;
			static AUDIOFOCUS_GAIN: number;
			static AUDIOFOCUS_GAIN_TRANSIENT: number;
			static AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK: number;
			static AUDIOFOCUS_LOSS: number;
			static AUDIOFOCUS_LOSS_TRANSIENT: number;
			static AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK: number;
			static AUDIOFOCUS_REQUEST_FAILED: number;
			static AUDIOFOCUS_REQUEST_GRANTED: number;
			static PROPERTY_OUTPUT_SAMPLE_RATE: java.lang.String;
			static PROPERTY_OUTPUT_FRAMES_PER_BUFFER: java.lang.String;
			static class: java.lang.Class<android.media.AudioManager>;
			RingerMode: number;
			Mode: number;
			getMode(): number;
			setMode(arg1: number): void;
			playSoundEffect(arg1: number): void;
			playSoundEffect(arg1: number, arg2: native.Float): void;
			adjustStreamVolume(arg1: number, arg2: number, arg3: number): void;
			isBluetoothScoOn(): boolean;
			isWiredHeadsetOn(): boolean;
			stopBluetoothSco(): void;
			isMicrophoneMute(): boolean;
			isBluetoothA2dpOn(): boolean;
			loadSoundEffects(): void;
			requestAudioFocus(arg1: android.media.AudioManager.IOnAudioFocusChangeListener, arg2: number, arg3: number): number;
			getStreamVolume(arg1: number): number;
			setMicrophoneMute(arg1: boolean): void;
			abandonAudioFocus(arg1: android.media.AudioManager.IOnAudioFocusChangeListener): number;
			setStreamVolume(arg1: number, arg2: number, arg3: number): void;
			unloadSoundEffects(): void;
			startBluetoothSco(): void;
			setWiredHeadsetOn(arg1: boolean): void;
			setSpeakerphoneOn(arg1: boolean): void;
			setBluetoothA2dpOn(arg1: boolean): void;
			setBluetoothScoOn(arg1: boolean): void;
			setVibrateSetting(arg1: number, arg2: number): void;
			getVibrateSetting(arg1: number): number;
			isSpeakerphoneOn(): boolean;
			getStreamMaxVolume(arg1: number): number;
			isBluetoothScoAvailableOffCall(): boolean;
			registerMediaButtonEventReceiver(arg1: android.content.ComponentName): void;
			unregisterMediaButtonEventReceiver(arg1: android.content.ComponentName): void;
			adjustSuggestedStreamVolume(arg1: number, arg2: number, arg3: number): void;
			registerRemoteControlClient(arg1: android.media.RemoteControlClient): void;
			unregisterRemoteControlClient(arg1: android.media.RemoteControlClient): void;
			setStreamMute(arg1: number, arg2: boolean): void;
			getRouting(arg1: number): number;
			setStreamSolo(arg1: number, arg2: boolean): void;
			getRingerMode(): number;
			isMusicActive(): boolean;
			setRingerMode(arg1: number): void;
			adjustVolume(arg1: number, arg2: number): void;
			shouldVibrate(arg1: number): boolean;
			setRouting(arg1: number, arg2: number, arg3: number): void;
			getProperty(arg1: java.lang.String): string;
			getProperty(arg1: string): string;
			getParameters(arg1: java.lang.String): string;
			getParameters(arg1: string): string;
			setParameters(arg1: java.lang.String): void;
			setParameters(arg1: string): void;
		}
		export module AudioManager {
			export class OnAudioFocusChangeListener implements android.media.AudioManager.IOnAudioFocusChangeListener {
				constructor(implementation: android.media.AudioManager.IOnAudioFocusChangeListener);
				onAudioFocusChange(arg1: number): void;
			}
			export interface IOnAudioFocusChangeListener {
				onAudioFocusChange(arg1: number): void;
			}
		}
		export class MediaExtractor extends java.lang.Object {
			constructor();
			static SEEK_TO_PREVIOUS_SYNC: number;
			static SEEK_TO_NEXT_SYNC: number;
			static SEEK_TO_CLOSEST_SYNC: number;
			static SAMPLE_FLAG_SYNC: number;
			static SAMPLE_FLAG_ENCRYPTED: number;
			static class: java.lang.Class<android.media.MediaExtractor>;
			seekTo(arg1: native.Long, arg2: number): void;
			advance(): boolean;
			getSampleCryptoInfo(arg1: android.media.MediaCodec.CryptoInfo): boolean;
			getTrackFormat(arg1: number): android.media.MediaFormat;
			getSampleFlags(): number;
			getSampleTrackIndex(): number;
			getCachedDuration(): any;
			readSampleData(arg1: java.nio.ByteBuffer, arg2: number): number;
			hasCacheReachedEndOfStream(): boolean;
			selectTrack(arg1: number): void;
			setDataSource(arg1: java.lang.String): void;
			setDataSource(arg1: string): void;
			setDataSource(arg1: java.io.FileDescriptor, arg2: native.Long, arg3: native.Long): void;
			setDataSource(arg1: java.lang.String, arg2: java.util.IMap<string, string>): void;
			setDataSource(arg1: string, arg2: java.util.IMap<string, string>): void;
			setDataSource(arg1: android.content.Context, arg2: android.net.Uri, arg3: java.util.IMap<string, string>): void;
			setDataSource(arg1: java.io.FileDescriptor): void;
			unselectTrack(arg1: number): void;
			getTrackCount(): number;
			getSampleTime(): any;
			release(): void;
		}
		export class AsyncPlayer extends java.lang.Object {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.media.AsyncPlayer>;
			stop(): void;
			play(arg1: android.content.Context, arg2: android.net.Uri, arg3: boolean, arg4: number): void;
		}
		export class MediaSyncEvent extends java.lang.Object {
			static SYNC_EVENT_NONE: number;
			static SYNC_EVENT_PRESENTATION_COMPLETE: number;
			static class: java.lang.Class<android.media.MediaSyncEvent>;
			AudioSessionId: number;
			getAudioSessionId(): number;
			setAudioSessionId(arg1: number): android.media.MediaSyncEvent;
			getType(): number;
			static createEvent(arg1: number): android.media.MediaSyncEvent;
		}
		export class ExifInterface extends java.lang.Object {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static TAG_ORIENTATION: java.lang.String;
			static TAG_DATETIME: java.lang.String;
			static TAG_MAKE: java.lang.String;
			static TAG_MODEL: java.lang.String;
			static TAG_FLASH: java.lang.String;
			static TAG_IMAGE_WIDTH: java.lang.String;
			static TAG_IMAGE_LENGTH: java.lang.String;
			static TAG_GPS_LATITUDE: java.lang.String;
			static TAG_GPS_LONGITUDE: java.lang.String;
			static TAG_GPS_LATITUDE_REF: java.lang.String;
			static TAG_GPS_LONGITUDE_REF: java.lang.String;
			static TAG_EXPOSURE_TIME: java.lang.String;
			static TAG_APERTURE: java.lang.String;
			static TAG_ISO: java.lang.String;
			static TAG_GPS_ALTITUDE: java.lang.String;
			static TAG_GPS_ALTITUDE_REF: java.lang.String;
			static TAG_GPS_TIMESTAMP: java.lang.String;
			static TAG_GPS_DATESTAMP: java.lang.String;
			static TAG_WHITE_BALANCE: java.lang.String;
			static TAG_FOCAL_LENGTH: java.lang.String;
			static TAG_GPS_PROCESSING_METHOD: java.lang.String;
			static ORIENTATION_UNDEFINED: number;
			static ORIENTATION_NORMAL: number;
			static ORIENTATION_FLIP_HORIZONTAL: number;
			static ORIENTATION_ROTATE_180: number;
			static ORIENTATION_FLIP_VERTICAL: number;
			static ORIENTATION_TRANSPOSE: number;
			static ORIENTATION_ROTATE_90: number;
			static ORIENTATION_TRANSVERSE: number;
			static ORIENTATION_ROTATE_270: number;
			static WHITEBALANCE_AUTO: number;
			static WHITEBALANCE_MANUAL: number;
			static class: java.lang.Class<android.media.ExifInterface>;
			getAltitude(arg1: native.Double): any;
			getAltitude(arg1: number): any;
			getThumbnail(): native.Array<native.Byte>;
			saveAttributes(): void;
			getAttributeDouble(arg1: java.lang.String, arg2: native.Double): any;
			getAttributeDouble(arg1: string, arg2: number): any;
			getAttributeInt(arg1: java.lang.String, arg2: number): number;
			getAttributeInt(arg1: string, arg2: number): number;
			hasThumbnail(): boolean;
			getLatLong(arg1: native.Array<native.Float>): boolean;
			getAttribute(arg1: java.lang.String): string;
			getAttribute(arg1: string): string;
			setAttribute(arg1: java.lang.String, arg2: java.lang.String): void;
			setAttribute(arg1: string, arg2: string): void;
		}
	}
	export module util {
		export class Config extends java.lang.Object {
			static DEBUG: boolean;
			static RELEASE: boolean;
			static PROFILE: boolean;
			static LOGV: boolean;
			static LOGD: boolean;
			static class: java.lang.Class<android.util.Config>;
		}
		export class Pair<F, S> extends java.lang.Object {
			constructor(arg1: F, arg2: S);
			first: F;
			second: S;
			static class: java.lang.Class<android.util.Pair<any, any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			static create<A, B>(arg1: A, arg2: B): android.util.Pair<A, B>;
		}
		export class TimeUtils extends java.lang.Object {
			static class: java.lang.Class<android.util.TimeUtils>;
			static getTimeZoneDatabaseVersion(): string;
			static getTimeZone(arg1: number, arg2: boolean, arg3: native.Long, arg4: java.lang.String): java.util.TimeZone;
			static getTimeZone(arg1: number, arg2: boolean, arg3: native.Long, arg4: string): java.util.TimeZone;
		}
		export class Base64InputStream extends java.io.FilterInputStream {
			constructor(arg1: java.io.InputStream, arg2: number);
			static class: java.lang.Class<android.util.Base64InputStream>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			read(arg1: native.Array<native.Byte>): number;
		}
		export class DebugUtils extends java.lang.Object {
			static class: java.lang.Class<android.util.DebugUtils>;
			static isObjectSelected(arg1: any): boolean;
		}
		export class Property<T, V> extends java.lang.Object {
			constructor(arg1: java.lang.Class<V>, arg2: java.lang.String);
			constructor(arg1: java.lang.Class<V>, arg2: string);
			static class: java.lang.Class<android.util.Property<any, any>>;
			getName(): string;
			get(arg1: T): V;
			getType(): java.lang.Class<V>;
			set(arg1: T, arg2: V): void;
			isReadOnly(): boolean;
			static of<T, V>(arg1: java.lang.Class<T>, arg2: java.lang.Class<V>, arg3: java.lang.String): android.util.Property<T, V>;
			static of<T, V>(arg1: java.lang.Class<T>, arg2: java.lang.Class<V>, arg3: string): android.util.Property<T, V>;
		}
		export class SparseIntArray extends java.lang.Object implements java.lang.ICloneable {
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<android.util.SparseIntArray>;
			removeAt(arg1: number): void;
			keyAt(arg1: number): number;
			indexOfValue(arg1: number): number;
			valueAt(arg1: number): number;
			indexOfKey(arg1: number): number;
			clone(): android.util.SparseIntArray;
			append(arg1: number, arg2: number): void;
			get(arg1: number): number;
			get(arg1: number, arg2: number): number;
			size(): number;
			put(arg1: number, arg2: number): void;
			clear(): void;
			delete(arg1: number): void;
		}
		export class TypedValue extends java.lang.Object {
			constructor();
			static TYPE_NULL: number;
			static TYPE_REFERENCE: number;
			static TYPE_ATTRIBUTE: number;
			static TYPE_STRING: number;
			static TYPE_FLOAT: number;
			static TYPE_DIMENSION: number;
			static TYPE_FRACTION: number;
			static TYPE_FIRST_INT: number;
			static TYPE_INT_DEC: number;
			static TYPE_INT_HEX: number;
			static TYPE_INT_BOOLEAN: number;
			static TYPE_FIRST_COLOR_INT: number;
			static TYPE_INT_COLOR_ARGB8: number;
			static TYPE_INT_COLOR_RGB8: number;
			static TYPE_INT_COLOR_ARGB4: number;
			static TYPE_INT_COLOR_RGB4: number;
			static TYPE_LAST_COLOR_INT: number;
			static TYPE_LAST_INT: number;
			static COMPLEX_UNIT_SHIFT: number;
			static COMPLEX_UNIT_MASK: number;
			static COMPLEX_UNIT_PX: number;
			static COMPLEX_UNIT_DIP: number;
			static COMPLEX_UNIT_SP: number;
			static COMPLEX_UNIT_PT: number;
			static COMPLEX_UNIT_IN: number;
			static COMPLEX_UNIT_MM: number;
			static COMPLEX_UNIT_FRACTION: number;
			static COMPLEX_UNIT_FRACTION_PARENT: number;
			static COMPLEX_RADIX_SHIFT: number;
			static COMPLEX_RADIX_MASK: number;
			static COMPLEX_RADIX_23p0: number;
			static COMPLEX_RADIX_16p7: number;
			static COMPLEX_RADIX_8p15: number;
			static COMPLEX_RADIX_0p23: number;
			static COMPLEX_MANTISSA_SHIFT: number;
			static COMPLEX_MANTISSA_MASK: number;
			static DENSITY_DEFAULT: number;
			static DENSITY_NONE: number;
			type: number;
			string: java.lang.ICharSequence;
			data: number;
			assetCookie: number;
			resourceId: number;
			changingConfigurations: number;
			density: number;
			static class: java.lang.Class<android.util.TypedValue>;
			static complexToFloat(arg1: number): number;
			static complexToFraction(arg1: number, arg2: native.Float, arg3: native.Float): number;
			coerceToString(): java.lang.ICharSequence;
			static coerceToString(arg1: number, arg2: number): string;
			static applyDimension(arg1: number, arg2: native.Float, arg3: android.util.DisplayMetrics): number;
			static complexToDimension(arg1: number, arg2: android.util.DisplayMetrics): number;
			setTo(arg1: android.util.TypedValue): void;
			static complexToDimensionNoisy(arg1: number, arg2: android.util.DisplayMetrics): number;
			static complexToDimensionPixelSize(arg1: number, arg2: android.util.DisplayMetrics): number;
			static complexToDimensionPixelOffset(arg1: number, arg2: android.util.DisplayMetrics): number;
			getFraction(arg1: native.Float, arg2: native.Float): number;
			toString(): string;
			getFloat(): number;
			getDimension(arg1: android.util.DisplayMetrics): number;
		}
		export class LruCache<K, V> extends java.lang.Object {
			constructor(arg1: number);
			static class: java.lang.Class<android.util.LruCache<any, any>>;
			putCount(): number;
			evictAll(): void;
			hitCount(): number;
			evictionCount(): number;
			snapshot(): java.util.IMap<K, V>;
			createCount(): number;
			missCount(): number;
			toString(): string;
			get(arg1: K): V;
			size(): number;
			put(arg1: K, arg2: V): V;
			remove(arg1: K): V;
			trimToSize(arg1: number): void;
			maxSize(): number;
		}
		export class Base64 extends java.lang.Object {
			static DEFAULT: number;
			static NO_PADDING: number;
			static NO_WRAP: number;
			static CRLF: number;
			static URL_SAFE: number;
			static NO_CLOSE: number;
			static class: java.lang.Class<android.util.Base64>;
			static encodeToString(arg1: native.Array<native.Byte>, arg2: number): string;
			static encodeToString(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: number): string;
			static decode(arg1: java.lang.String, arg2: number): native.Array<native.Byte>;
			static decode(arg1: string, arg2: number): native.Array<native.Byte>;
			static decode(arg1: native.Array<native.Byte>, arg2: number): native.Array<native.Byte>;
			static decode(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: number): native.Array<native.Byte>;
			static encode(arg1: native.Array<native.Byte>, arg2: number): native.Array<native.Byte>;
			static encode(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: number): native.Array<native.Byte>;
		}
		export class TimeFormatException extends java.lang.RuntimeException {
			static class: java.lang.Class<android.util.TimeFormatException>;
		}
		export class Log extends java.lang.Object {
			static VERBOSE: number;
			static DEBUG: number;
			static INFO: number;
			static WARN: number;
			static ERROR: number;
			static ASSERT: number;
			static class: java.lang.Class<android.util.Log>;
			static w(arg1: java.lang.String, arg2: java.lang.String): number;
			static w(arg1: string, arg2: string): number;
			static w(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable): number;
			static w(arg1: string, arg2: string, arg3: java.lang.Throwable): number;
			static w(arg1: java.lang.String, arg2: java.lang.Throwable): number;
			static w(arg1: string, arg2: java.lang.Throwable): number;
			static getStackTraceString(arg1: java.lang.Throwable): string;
			static wtf(arg1: java.lang.String, arg2: java.lang.Throwable): number;
			static wtf(arg1: string, arg2: java.lang.Throwable): number;
			static wtf(arg1: java.lang.String, arg2: java.lang.String): number;
			static wtf(arg1: string, arg2: string): number;
			static wtf(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable): number;
			static wtf(arg1: string, arg2: string, arg3: java.lang.Throwable): number;
			static d(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable): number;
			static d(arg1: string, arg2: string, arg3: java.lang.Throwable): number;
			static d(arg1: java.lang.String, arg2: java.lang.String): number;
			static d(arg1: string, arg2: string): number;
			static println(arg1: number, arg2: java.lang.String, arg3: java.lang.String): number;
			static println(arg1: number, arg2: string, arg3: string): number;
			static isLoggable(arg1: java.lang.String, arg2: number): boolean;
			static isLoggable(arg1: string, arg2: number): boolean;
			static v(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable): number;
			static v(arg1: string, arg2: string, arg3: java.lang.Throwable): number;
			static v(arg1: java.lang.String, arg2: java.lang.String): number;
			static v(arg1: string, arg2: string): number;
			static i(arg1: java.lang.String, arg2: java.lang.String): number;
			static i(arg1: string, arg2: string): number;
			static i(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable): number;
			static i(arg1: string, arg2: string, arg3: java.lang.Throwable): number;
			static e(arg1: java.lang.String, arg2: java.lang.String): number;
			static e(arg1: string, arg2: string): number;
			static e(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable): number;
			static e(arg1: string, arg2: string, arg3: java.lang.Throwable): number;
		}
		export class StateSet extends java.lang.Object {
			static WILD_CARD: native.Array<number>;
			static NOTHING: native.Array<number>;
			static class: java.lang.Class<android.util.StateSet>;
			static stateSetMatches(arg1: native.Array<number>, arg2: native.Array<number>): boolean;
			static stateSetMatches(arg1: native.Array<number>, arg2: number): boolean;
			static trimStateSet(arg1: native.Array<number>, arg2: number): native.Array<number>;
			static isWildCard(arg1: native.Array<number>): boolean;
			static dump(arg1: native.Array<number>): string;
		}
		export class Base64OutputStream extends java.io.FilterOutputStream {
			constructor(arg1: java.io.OutputStream, arg2: number);
			static class: java.lang.Class<android.util.Base64OutputStream>;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			close(): void;
			write(arg1: native.Array<native.Byte>): void;
		}
		export class AttributeSet implements android.util.IAttributeSet {
			constructor(implementation: android.util.IAttributeSet);
			getAttributeListValue(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<java.lang.String>, arg4: number): number;
			getAttributeListValue(arg1: string, arg2: string, arg3: native.Array<java.lang.String>, arg4: number): number;
			getAttributeListValue(arg1: number, arg2: native.Array<java.lang.String>, arg3: number): number;
			getAttributeIntValue(arg1: java.lang.String, arg2: java.lang.String, arg3: number): number;
			getAttributeIntValue(arg1: string, arg2: string, arg3: number): number;
			getAttributeIntValue(arg1: number, arg2: number): number;
			getClassAttribute(): string;
			getAttributeName(arg1: number): string;
			getStyleAttribute(): number;
			getIdAttribute(): string;
			getAttributeValue(arg1: number): string;
			getAttributeValue(arg1: java.lang.String, arg2: java.lang.String): string;
			getAttributeValue(arg1: string, arg2: string): string;
			getPositionDescription(): string;
			getAttributeUnsignedIntValue(arg1: number, arg2: number): number;
			getAttributeUnsignedIntValue(arg1: java.lang.String, arg2: java.lang.String, arg3: number): number;
			getAttributeUnsignedIntValue(arg1: string, arg2: string, arg3: number): number;
			getAttributeBooleanValue(arg1: java.lang.String, arg2: java.lang.String, arg3: boolean): boolean;
			getAttributeBooleanValue(arg1: string, arg2: string, arg3: boolean): boolean;
			getAttributeBooleanValue(arg1: number, arg2: boolean): boolean;
			getIdAttributeResourceValue(arg1: number): number;
			getAttributeResourceValue(arg1: java.lang.String, arg2: java.lang.String, arg3: number): number;
			getAttributeResourceValue(arg1: string, arg2: string, arg3: number): number;
			getAttributeResourceValue(arg1: number, arg2: number): number;
			getAttributeFloatValue(arg1: number, arg2: native.Float): number;
			getAttributeFloatValue(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Float): number;
			getAttributeFloatValue(arg1: string, arg2: string, arg3: native.Float): number;
			getAttributeNameResource(arg1: number): number;
			getAttributeCount(): number;
		}
		export class MalformedJsonException extends java.io.IOException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.util.MalformedJsonException>;
		}
		export class LongSparseArray<E> extends java.lang.Object implements java.lang.ICloneable {
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<android.util.LongSparseArray<any>>;
			removeAt(arg1: number): void;
			keyAt(arg1: number): any;
			indexOfValue(arg1: E): number;
			valueAt(arg1: number): E;
			indexOfKey(arg1: native.Long): number;
			clone(): android.util.LongSparseArray<E>;
			append(arg1: native.Long, arg2: E): void;
			get(arg1: native.Long, arg2: E): E;
			get(arg1: native.Long): E;
			size(): number;
			put(arg1: native.Long, arg2: E): void;
			remove(arg1: native.Long): void;
			clear(): void;
			delete(arg1: native.Long): void;
			setValueAt(arg1: number, arg2: E): void;
		}
		export class AtomicFile extends java.lang.Object {
			constructor(arg1: java.io.File);
			static class: java.lang.Class<android.util.AtomicFile>;
			finishWrite(arg1: java.io.FileOutputStream): void;
			startWrite(): java.io.FileOutputStream;
			failWrite(arg1: java.io.FileOutputStream): void;
			openRead(): java.io.FileInputStream;
			getBaseFile(): java.io.File;
			delete(): void;
			readFully(): native.Array<native.Byte>;
		}
		export class EventLog extends java.lang.Object {
			static class: java.lang.Class<android.util.EventLog>;
			static readEvents(arg1: native.Array<number>, arg2: java.util.ICollection<android.util.EventLog.Event>): void;
			static getTagCode(arg1: java.lang.String): number;
			static getTagCode(arg1: string): number;
			static writeEvent(arg1: number, arg2: java.lang.String): number;
			static writeEvent(arg1: number, arg2: string): number;
			static writeEvent(arg1: number, arg2: native.Array<any>): number;
			static writeEvent(arg1: number, arg2: native.Long): number;
			static writeEvent(arg1: number, arg2: number): number;
			static getTagName(arg1: number): string;
		}
		export module EventLog {
			export class Event extends java.lang.Object {
				static class: java.lang.Class<android.util.EventLog.Event>;
				getThreadId(): number;
				getProcessId(): number;
				getTimeNanos(): any;
				getData(): any;
				getTag(): number;
			}
		}
		export interface IAttributeSet {
			getAttributeListValue(arg1: string, arg2: string, arg3: native.Array<java.lang.String>, arg4: number): number;
			getAttributeListValue(arg1: number, arg2: native.Array<java.lang.String>, arg3: number): number;
			getAttributeIntValue(arg1: string, arg2: string, arg3: number): number;
			getAttributeIntValue(arg1: number, arg2: number): number;
			getClassAttribute(): string;
			getAttributeName(arg1: number): string;
			getStyleAttribute(): number;
			getIdAttribute(): string;
			getAttributeValue(arg1: number): string;
			getAttributeValue(arg1: string, arg2: string): string;
			getPositionDescription(): string;
			getAttributeUnsignedIntValue(arg1: number, arg2: number): number;
			getAttributeUnsignedIntValue(arg1: string, arg2: string, arg3: number): number;
			getAttributeBooleanValue(arg1: string, arg2: string, arg3: boolean): boolean;
			getAttributeBooleanValue(arg1: number, arg2: boolean): boolean;
			getIdAttributeResourceValue(arg1: number): number;
			getAttributeResourceValue(arg1: string, arg2: string, arg3: number): number;
			getAttributeResourceValue(arg1: number, arg2: number): number;
			getAttributeFloatValue(arg1: number, arg2: native.Float): number;
			getAttributeFloatValue(arg1: string, arg2: string, arg3: native.Float): number;
			getAttributeNameResource(arg1: number): number;
			getAttributeCount(): number;
		}
		export class PrintWriterPrinter extends java.lang.Object implements android.util.IPrinter {
			constructor(arg1: java.io.PrintWriter);
			static class: java.lang.Class<android.util.PrintWriterPrinter>;
			println(arg1: java.lang.String): void;
			println(arg1: string): void;
		}
		export class MonthDisplayHelper extends java.lang.Object {
			constructor(arg1: number, arg2: number, arg3: number);
			constructor(arg1: number, arg2: number);
			static class: java.lang.Class<android.util.MonthDisplayHelper>;
			getDigitsForRow(arg1: number): native.Array<number>;
			getFirstDayOfMonth(): number;
			isWithinCurrentMonth(arg1: number, arg2: number): boolean;
			getWeekStartDay(): number;
			getNumberOfDaysInMonth(): number;
			getDayAt(arg1: number, arg2: number): number;
			getRowOf(arg1: number): number;
			getColumnOf(arg1: number): number;
			nextMonth(): void;
			previousMonth(): void;
			getOffset(): number;
			getMonth(): number;
			getYear(): number;
		}
		export class JsonWriter extends java.lang.Object implements java.io.ICloseable {
			constructor(arg1: java.io.Writer);
			static class: java.lang.Class<android.util.JsonWriter>;
			beginArray(): android.util.JsonWriter;
			nullValue(): android.util.JsonWriter;
			endArray(): android.util.JsonWriter;
			endObject(): android.util.JsonWriter;
			beginObject(): android.util.JsonWriter;
			setIndent(arg1: java.lang.String): void;
			setIndent(arg1: string): void;
			value(arg1: boolean): android.util.JsonWriter;
			value(arg1: java.lang.Number): android.util.JsonWriter;
			value(arg1: java.lang.String): android.util.JsonWriter;
			value(arg1: string): android.util.JsonWriter;
			value(arg1: native.Double): android.util.JsonWriter;
			value(arg1: number): android.util.JsonWriter;
			value(arg1: native.Long): android.util.JsonWriter;
			name(arg1: java.lang.String): android.util.JsonWriter;
			name(arg1: string): android.util.JsonWriter;
			close(): void;
			flush(): void;
			isLenient(): boolean;
			setLenient(arg1: boolean): void;
		}
		export class EventLogTags extends java.lang.Object {
			constructor();
			constructor(arg1: java.io.BufferedReader);
			static class: java.lang.Class<android.util.EventLogTags>;
			get(arg1: number): android.util.EventLogTags.Description;
			get(arg1: java.lang.String): android.util.EventLogTags.Description;
			get(arg1: string): android.util.EventLogTags.Description;
		}
		export module EventLogTags {
			export class Description extends java.lang.Object {
				mTag: number;
				mName: java.lang.String;
				static class: java.lang.Class<android.util.EventLogTags.Description>;
			}
		}
		export class TimingLogger extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<android.util.TimingLogger>;
			dumpToLog(): void;
			addSplit(arg1: java.lang.String): void;
			addSplit(arg1: string): void;
			reset(arg1: java.lang.String, arg2: java.lang.String): void;
			reset(arg1: string, arg2: string): void;
			reset(): void;
		}
		export class AndroidException extends java.lang.Exception {
			constructor(arg1: java.lang.Exception);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<android.util.AndroidException>;
		}
		export class SparseBooleanArray extends java.lang.Object implements java.lang.ICloneable {
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<android.util.SparseBooleanArray>;
			keyAt(arg1: number): number;
			indexOfValue(arg1: boolean): number;
			valueAt(arg1: number): boolean;
			indexOfKey(arg1: number): number;
			clone(): android.util.SparseBooleanArray;
			append(arg1: number, arg2: boolean): void;
			get(arg1: number): boolean;
			get(arg1: number, arg2: boolean): boolean;
			size(): number;
			put(arg1: number, arg2: boolean): void;
			clear(): void;
			delete(arg1: number): void;
		}
		export class AndroidRuntimeException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.Exception);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<android.util.AndroidRuntimeException>;
		}
		export interface IPrinter {
			println(arg1: string): void;
		}
		export class Patterns extends java.lang.Object {
			static TOP_LEVEL_DOMAIN_STR: java.lang.String;
			static TOP_LEVEL_DOMAIN: java.util.regex.Pattern;
			static TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL: java.lang.String;
			static GOOD_IRI_CHAR: java.lang.String;
			static WEB_URL: java.util.regex.Pattern;
			static IP_ADDRESS: java.util.regex.Pattern;
			static DOMAIN_NAME: java.util.regex.Pattern;
			static EMAIL_ADDRESS: java.util.regex.Pattern;
			static PHONE: java.util.regex.Pattern;
			static class: java.lang.Class<android.util.Patterns>;
			static digitsAndPlusOnly(arg1: java.util.regex.Matcher): string;
			static concatGroups(arg1: java.util.regex.Matcher): string;
		}
		export class SparseArray<E> extends java.lang.Object implements java.lang.ICloneable {
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<android.util.SparseArray<any>>;
			removeAt(arg1: number): void;
			keyAt(arg1: number): number;
			indexOfValue(arg1: E): number;
			valueAt(arg1: number): E;
			indexOfKey(arg1: number): number;
			clone(): android.util.SparseArray<E>;
			append(arg1: number, arg2: E): void;
			get(arg1: number, arg2: E): E;
			get(arg1: number): E;
			size(): number;
			put(arg1: number, arg2: E): void;
			remove(arg1: number): void;
			clear(): void;
			delete(arg1: number): void;
			setValueAt(arg1: number, arg2: E): void;
		}
		export class StringBuilderPrinter extends java.lang.Object implements android.util.IPrinter {
			constructor(arg1: java.lang.StringBuilder);
			static class: java.lang.Class<android.util.StringBuilderPrinter>;
			println(arg1: java.lang.String): void;
			println(arg1: string): void;
		}
		export class Xml extends java.lang.Object {
			static FEATURE_RELAXED: java.lang.String;
			static class: java.lang.Class<android.util.Xml>;
			static findEncodingByName(arg1: java.lang.String): android.util.Xml.Encoding;
			static findEncodingByName(arg1: string): android.util.Xml.Encoding;
			static asAttributeSet(arg1: org.xmlpull.v1.IXmlPullParser): android.util.IAttributeSet;
			static newSerializer(): org.xmlpull.v1.IXmlSerializer;
			static newPullParser(): org.xmlpull.v1.IXmlPullParser;
			static parse(arg1: java.io.InputStream, arg2: android.util.Xml.Encoding, arg3: org.xml.sax.IContentHandler): void;
			static parse(arg1: java.lang.String, arg2: org.xml.sax.IContentHandler): void;
			static parse(arg1: string, arg2: org.xml.sax.IContentHandler): void;
			static parse(arg1: java.io.Reader, arg2: org.xml.sax.IContentHandler): void;
		}
		export module Xml {
			export enum Encoding {
				ISO_8859_1,
				US_ASCII,
				UTF_16,
				UTF_8
			}
			export module Encoding {
				export function valueOf(arg1: java.lang.String): android.util.Xml.Encoding;
				export function valueOf(arg1: string): android.util.Xml.Encoding;
				export function values(): native.Array<android.util.Xml.Encoding>;
			}
		}
		export class NoSuchPropertyException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.util.NoSuchPropertyException>;
		}
		export class FloatMath extends java.lang.Object {
			static class: java.lang.Class<android.util.FloatMath>;
			static ceil(arg1: native.Float): number;
			static cos(arg1: native.Float): number;
			static exp(arg1: native.Float): number;
			static floor(arg1: native.Float): number;
			static hypot(arg1: native.Float, arg2: native.Float): number;
			static pow(arg1: native.Float, arg2: native.Float): number;
			static sin(arg1: native.Float): number;
			static sqrt(arg1: native.Float): number;
		}
		export class JsonReader extends java.lang.Object implements java.io.ICloseable {
			constructor(arg1: java.io.Reader);
			static class: java.lang.Class<android.util.JsonReader>;
			beginArray(): void;
			nextNull(): void;
			endArray(): void;
			skipValue(): void;
			endObject(): void;
			nextString(): string;
			beginObject(): void;
			toString(): string;
			hasNext(): boolean;
			close(): void;
			peek(): android.util.JsonToken;
			nextInt(): number;
			nextDouble(): any;
			nextName(): string;
			nextBoolean(): boolean;
			nextLong(): any;
			isLenient(): boolean;
			setLenient(arg1: boolean): void;
		}
		export class Printer implements android.util.IPrinter {
			constructor(implementation: android.util.IPrinter);
			println(arg1: java.lang.String): void;
			println(arg1: string): void;
		}
		export class Base64DataException extends java.io.IOException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<android.util.Base64DataException>;
		}
		export enum JsonToken {
			BEGIN_ARRAY,
			BEGIN_OBJECT,
			BOOLEAN,
			END_ARRAY,
			END_DOCUMENT,
			END_OBJECT,
			NAME,
			NULL,
			NUMBER,
			STRING
		}
		export module JsonToken {
			export function valueOf(arg1: java.lang.String): android.util.JsonToken;
			export function valueOf(arg1: string): android.util.JsonToken;
			export function values(): native.Array<android.util.JsonToken>;
		}
		export class PrintStreamPrinter extends java.lang.Object implements android.util.IPrinter {
			constructor(arg1: java.io.PrintStream);
			static class: java.lang.Class<android.util.PrintStreamPrinter>;
			println(arg1: java.lang.String): void;
			println(arg1: string): void;
		}
		export class DisplayMetrics extends java.lang.Object {
			constructor();
			static DENSITY_LOW: number;
			static DENSITY_MEDIUM: number;
			static DENSITY_TV: number;
			static DENSITY_HIGH: number;
			static DENSITY_XHIGH: number;
			static DENSITY_XXHIGH: number;
			static DENSITY_DEFAULT: number;
			widthPixels: number;
			heightPixels: number;
			density: native.Float;
			densityDpi: number;
			scaledDensity: native.Float;
			xdpi: native.Float;
			ydpi: native.Float;
			static class: java.lang.Class<android.util.DisplayMetrics>;
			setTo(arg1: android.util.DisplayMetrics): void;
			setToDefaults(): void;
			hashCode(): number;
			equals(arg1: android.util.DisplayMetrics): boolean;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export class LogPrinter extends java.lang.Object implements android.util.IPrinter {
			constructor(arg1: number, arg2: java.lang.String);
			constructor(arg1: number, arg2: string);
			static class: java.lang.Class<android.util.LogPrinter>;
			println(arg1: java.lang.String): void;
			println(arg1: string): void;
		}
	}
}
declare module native {
	export class Double {
		static class: java.lang.Class<native.Double>;
		private __native_Double: any;
	}
	export class Float {
		static class: java.lang.Class<native.Float>;
		private __native_Float: any;
	}
	export class Byte {
		static class: java.lang.Class<native.Byte>;
		private __native_Byte: any;
	}
	export class Long {
		static class: java.lang.Class<native.Long>;
		private __native_Long: any;
	}
	export class Array<T> {
		length: number;
		[index: number]: T;
	}
	export class Short {
		static class: java.lang.Class<native.Short>;
		private __native_Short: any;
	}
}
declare module javax {
	export module sql {
		export class RowSetReader implements javax.sql.IRowSetReader {
			constructor(implementation: javax.sql.IRowSetReader);
			readData(arg1: javax.sql.IRowSetInternal): void;
		}
		export class RowSetListener implements java.util.IEventListener, javax.sql.IRowSetListener {
			constructor(implementation: javax.sql.IRowSetListener);
			cursorMoved(arg1: javax.sql.RowSetEvent): void;
			rowChanged(arg1: javax.sql.RowSetEvent): void;
			rowSetChanged(arg1: javax.sql.RowSetEvent): void;
		}
		export interface IConnectionPoolDataSource extends javax.sql.ICommonDataSource {
			getPooledConnection(): javax.sql.IPooledConnection;
			getPooledConnection(arg1: string, arg2: string): javax.sql.IPooledConnection;
			getLogWriter(): java.io.PrintWriter;
			getLoginTimeout(): number;
			setLogWriter(arg1: java.io.PrintWriter): void;
			setLoginTimeout(arg1: number): void;
			getParentLogger(): java.util.logging.Logger;
		}
		export interface IRowSetWriter {
			writeData(arg1: javax.sql.IRowSetInternal): boolean;
		}
		export interface IConnectionEventListener extends java.util.IEventListener {
			connectionClosed(arg1: javax.sql.ConnectionEvent): void;
			connectionErrorOccurred(arg1: javax.sql.ConnectionEvent): void;
		}
		export class ConnectionPoolDataSource implements javax.sql.ICommonDataSource, javax.sql.IConnectionPoolDataSource {
			constructor(implementation: javax.sql.IConnectionPoolDataSource);
			LogWriter: java.io.PrintWriter;
			LoginTimeout: number;
			getPooledConnection(): javax.sql.IPooledConnection;
			getPooledConnection(arg1: java.lang.String, arg2: java.lang.String): javax.sql.IPooledConnection;
			getPooledConnection(arg1: string, arg2: string): javax.sql.IPooledConnection;
			getLogWriter(): java.io.PrintWriter;
			getLoginTimeout(): number;
			setLogWriter(arg1: java.io.PrintWriter): void;
			setLoginTimeout(arg1: number): void;
			getParentLogger(): java.util.logging.Logger;
		}
		export class PooledConnection implements javax.sql.IPooledConnection {
			constructor(implementation: javax.sql.IPooledConnection);
			addConnectionEventListener(arg1: javax.sql.IConnectionEventListener): void;
			addStatementEventListener(arg1: javax.sql.IStatementEventListener): void;
			removeConnectionEventListener(arg1: javax.sql.IConnectionEventListener): void;
			removeStatementEventListener(arg1: javax.sql.IStatementEventListener): void;
			close(): void;
			getConnection(): java.sql.IConnection;
		}
		export class RowSetMetaData implements java.sql.IResultSetMetaData, javax.sql.IRowSetMetaData {
			constructor(implementation: javax.sql.IRowSetMetaData);
			ColumnCount: number;
			setScale(arg1: number, arg2: number): void;
			setAutoIncrement(arg1: number, arg2: boolean): void;
			setCaseSensitive(arg1: number, arg2: boolean): void;
			setCatalogName(arg1: number, arg2: java.lang.String): void;
			setCatalogName(arg1: number, arg2: string): void;
			setColumnDisplaySize(arg1: number, arg2: number): void;
			setColumnLabel(arg1: number, arg2: java.lang.String): void;
			setColumnLabel(arg1: number, arg2: string): void;
			setColumnName(arg1: number, arg2: java.lang.String): void;
			setColumnName(arg1: number, arg2: string): void;
			setColumnType(arg1: number, arg2: number): void;
			setColumnTypeName(arg1: number, arg2: java.lang.String): void;
			setColumnTypeName(arg1: number, arg2: string): void;
			setNullable(arg1: number, arg2: number): void;
			setPrecision(arg1: number, arg2: number): void;
			setSchemaName(arg1: number, arg2: java.lang.String): void;
			setSchemaName(arg1: number, arg2: string): void;
			setSearchable(arg1: number, arg2: boolean): void;
			setSigned(arg1: number, arg2: boolean): void;
			setTableName(arg1: number, arg2: java.lang.String): void;
			setTableName(arg1: number, arg2: string): void;
			setCurrency(arg1: number, arg2: boolean): void;
			setColumnCount(arg1: number): void;
			getPrecision(arg1: number): number;
			getScale(arg1: number): number;
			isNullable(arg1: number): number;
			isSigned(arg1: number): boolean;
			getCatalogName(arg1: number): string;
			getColumnClassName(arg1: number): string;
			getColumnDisplaySize(arg1: number): number;
			getColumnLabel(arg1: number): string;
			getColumnType(arg1: number): number;
			getColumnTypeName(arg1: number): string;
			getSchemaName(arg1: number): string;
			getTableName(arg1: number): string;
			isAutoIncrement(arg1: number): boolean;
			isCaseSensitive(arg1: number): boolean;
			isCurrency(arg1: number): boolean;
			isDefinitelyWritable(arg1: number): boolean;
			isSearchable(arg1: number): boolean;
			isWritable(arg1: number): boolean;
			isReadOnly(arg1: number): boolean;
			getColumnCount(): number;
			getColumnName(arg1: number): string;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export interface IRowSet extends java.sql.IResultSet {
			setBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBytes(arg1: string, arg2: native.Array<native.Byte>): void;
			setBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getTransactionIsolation(): number;
			getTypeMap(): java.util.IMap<string, java.lang.Class<any>>;
			setTransactionIsolation(arg1: number): void;
			setTypeMap(arg1: java.util.IMap<string, java.lang.Class<any>>): void;
			clearParameters(): void;
			setArray(arg1: number, arg2: java.sql.IArray): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBigDecimal(arg1: string, arg2: java.math.BigDecimal): void;
			setBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			setBlob(arg1: number, arg2: java.io.InputStream): void;
			setBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: number, arg2: java.sql.IBlob): void;
			setBlob(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: string, arg2: java.io.InputStream): void;
			setBlob(arg1: string, arg2: java.sql.IBlob): void;
			setClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: number, arg2: java.sql.IClob): void;
			setClob(arg1: number, arg2: java.io.Reader): void;
			setClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: string, arg2: java.sql.IClob): void;
			setClob(arg1: string, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: string, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: string, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: number, arg2: java.sql.INClob): void;
			setNClob(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: string, arg2: java.sql.INClob): void;
			setNString(arg1: number, arg2: string): void;
			setNString(arg1: string, arg2: string): void;
			setNull(arg1: number, arg2: number): void;
			setNull(arg1: string, arg2: number): void;
			setNull(arg1: number, arg2: number, arg3: string): void;
			setNull(arg1: string, arg2: number, arg3: string): void;
			setRef(arg1: number, arg2: java.sql.IRef): void;
			setRowId(arg1: number, arg2: java.sql.IRowId): void;
			setRowId(arg1: string, arg2: java.sql.IRowId): void;
			setSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			setSQLXML(arg1: string, arg2: java.sql.ISQLXML): void;
			getMaxFieldSize(): number;
			getMaxRows(): number;
			getQueryTimeout(): number;
			setEscapeProcessing(arg1: boolean): void;
			setMaxFieldSize(arg1: number): void;
			setMaxRows(arg1: number): void;
			setQueryTimeout(arg1: number): void;
			getUrl(): string;
			setPassword(arg1: string): void;
			addRowSetListener(arg1: javax.sql.IRowSetListener): void;
			getCommand(): string;
			getDataSourceName(): string;
			getEscapeProcessing(): boolean;
			removeRowSetListener(arg1: javax.sql.IRowSetListener): void;
			setConcurrency(arg1: number): void;
			setDataSourceName(arg1: string): void;
			setUsername(arg1: string): void;
			setUrl(arg1: string): void;
			getUsername(): string;
			setReadOnly(arg1: boolean): void;
			setBoolean(arg1: number, arg2: boolean): void;
			setBoolean(arg1: string, arg2: boolean): void;
			setByte(arg1: string, arg2: native.Byte): void;
			setByte(arg1: number, arg2: native.Byte): void;
			setDouble(arg1: string, arg2: number): void;
			setDouble(arg1: number, arg2: number): void;
			setFloat(arg1: number, arg2: native.Float): void;
			setFloat(arg1: string, arg2: native.Float): void;
			setInt(arg1: number, arg2: number): void;
			setInt(arg1: string, arg2: number): void;
			setLong(arg1: number, arg2: native.Long): void;
			setLong(arg1: string, arg2: native.Long): void;
			setShort(arg1: number, arg2: native.Short): void;
			setShort(arg1: string, arg2: native.Short): void;
			isReadOnly(): boolean;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: string, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: string, arg2: java.sql.Timestamp): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			setURL(arg1: number, arg2: java.net.URL): void;
			execute(): void;
			setType(arg1: number): void;
			setTime(arg1: number, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: string, arg2: java.sql.Time): void;
			setTime(arg1: string, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: number, arg2: java.sql.Time): void;
			setObject(arg1: string, arg2: any, arg3: number): void;
			setObject(arg1: string, arg2: any): void;
			setObject(arg1: string, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: number, arg2: any, arg3: number): void;
			setObject(arg1: number, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: number, arg2: any): void;
			getPassword(): string;
			setDate(arg1: string, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: string, arg2: java.sql.Date): void;
			setDate(arg1: number, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: number, arg2: java.sql.Date): void;
			setCommand(arg1: string): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader, arg3: number): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			setString(arg1: number, arg2: string): void;
			setString(arg1: string, arg2: string): void;
			getBinaryStream(arg1: number): java.io.InputStream;
			getBinaryStream(arg1: string): java.io.InputStream;
			clearWarnings(): void;
			getHoldability(): number;
			getMetaData(): java.sql.IResultSetMetaData;
			getWarnings(): java.sql.SQLWarning;
			getFetchDirection(): number;
			getFetchSize(): number;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			absolute(arg1: number): boolean;
			afterLast(): void;
			beforeFirst(): void;
			cancelRowUpdates(): void;
			deleteRow(): void;
			getAsciiStream(arg1: string): java.io.InputStream;
			getAsciiStream(arg1: number): java.io.InputStream;
			getBlob(arg1: number): java.sql.IBlob;
			getBlob(arg1: string): java.sql.IBlob;
			getClob(arg1: string): java.sql.IClob;
			getClob(arg1: number): java.sql.IClob;
			getConcurrency(): number;
			getCursorName(): string;
			getNCharacterStream(arg1: string): java.io.Reader;
			getNCharacterStream(arg1: number): java.io.Reader;
			getNClob(arg1: string): java.sql.INClob;
			getNClob(arg1: number): java.sql.INClob;
			getNString(arg1: string): string;
			getNString(arg1: number): string;
			getRowId(arg1: string): java.sql.IRowId;
			getRowId(arg1: number): java.sql.IRowId;
			getSQLXML(arg1: number): java.sql.ISQLXML;
			getSQLXML(arg1: string): java.sql.ISQLXML;
			getStatement(): java.sql.IStatement;
			getUnicodeStream(arg1: number): java.io.InputStream;
			getUnicodeStream(arg1: string): java.io.InputStream;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			moveToCurrentRow(): void;
			moveToInsertRow(): void;
			refreshRow(): void;
			relative(arg1: number): boolean;
			rowDeleted(): boolean;
			rowInserted(): boolean;
			rowUpdated(): boolean;
			updateArray(arg1: string, arg2: java.sql.IArray): void;
			updateArray(arg1: number, arg2: java.sql.IArray): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			updateBigDecimal(arg1: string, arg2: java.math.BigDecimal): void;
			updateBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			updateBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: string, arg2: java.sql.IBlob): void;
			updateBlob(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: number, arg2: java.io.InputStream): void;
			updateBlob(arg1: number, arg2: java.sql.IBlob): void;
			updateBlob(arg1: string, arg2: java.io.InputStream): void;
			updateBoolean(arg1: number, arg2: boolean): void;
			updateBoolean(arg1: string, arg2: boolean): void;
			updateByte(arg1: string, arg2: native.Byte): void;
			updateByte(arg1: number, arg2: native.Byte): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: string, arg2: java.io.Reader): void;
			updateClob(arg1: number, arg2: java.sql.IClob): void;
			updateClob(arg1: number, arg2: java.io.Reader): void;
			updateClob(arg1: string, arg2: java.sql.IClob): void;
			updateClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateDate(arg1: number, arg2: java.sql.Date): void;
			updateDate(arg1: string, arg2: java.sql.Date): void;
			updateDouble(arg1: number, arg2: number): void;
			updateDouble(arg1: string, arg2: number): void;
			updateFloat(arg1: string, arg2: native.Float): void;
			updateFloat(arg1: number, arg2: native.Float): void;
			updateInt(arg1: string, arg2: number): void;
			updateInt(arg1: number, arg2: number): void;
			updateLong(arg1: string, arg2: native.Long): void;
			updateLong(arg1: number, arg2: native.Long): void;
			updateNCharacterStream(arg1: string, arg2: java.io.Reader): void;
			updateNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: string, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.sql.INClob): void;
			updateNClob(arg1: string, arg2: java.sql.INClob): void;
			updateNString(arg1: number, arg2: string): void;
			updateNString(arg1: string, arg2: string): void;
			updateNull(arg1: number): void;
			updateNull(arg1: string): void;
			updateObject(arg1: number, arg2: any): void;
			updateObject(arg1: string, arg2: any, arg3: number): void;
			updateObject(arg1: string, arg2: any): void;
			updateObject(arg1: number, arg2: any, arg3: number): void;
			updateRef(arg1: string, arg2: java.sql.IRef): void;
			updateRef(arg1: number, arg2: java.sql.IRef): void;
			updateRow(): void;
			updateRowId(arg1: number, arg2: java.sql.IRowId): void;
			updateRowId(arg1: string, arg2: java.sql.IRowId): void;
			updateSQLXML(arg1: string, arg2: java.sql.ISQLXML): void;
			updateSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			updateShort(arg1: string, arg2: native.Short): void;
			updateShort(arg1: number, arg2: native.Short): void;
			updateString(arg1: string, arg2: string): void;
			updateString(arg1: number, arg2: string): void;
			updateTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			updateTimestamp(arg1: string, arg2: java.sql.Timestamp): void;
			wasNull(): boolean;
			getBytes(arg1: number): native.Array<native.Byte>;
			getBytes(arg1: string): native.Array<native.Byte>;
			getArray(arg1: number): java.sql.IArray;
			getArray(arg1: string): java.sql.IArray;
			next(): boolean;
			getURL(arg1: string): java.net.URL;
			getURL(arg1: number): java.net.URL;
			close(): void;
			getBoolean(arg1: number): boolean;
			getBoolean(arg1: string): boolean;
			getByte(arg1: string): number;
			getByte(arg1: number): number;
			getDouble(arg1: string): any;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getFloat(arg1: string): number;
			getInt(arg1: string): number;
			getInt(arg1: number): number;
			getLong(arg1: string): any;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getShort(arg1: string): number;
			getType(): number;
			previous(): boolean;
			getObject(arg1: number): any;
			getObject(arg1: string): any;
			getObject<T>(arg1: number, arg2: java.lang.Class<T>): T;
			getObject<T>(arg1: string, arg2: java.lang.Class<T>): T;
			getObject(arg1: string, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getObject(arg1: number, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getString(arg1: number): string;
			getString(arg1: string): string;
			getRef(arg1: string): java.sql.IRef;
			getRef(arg1: number): java.sql.IRef;
			getDate(arg1: string): java.sql.Date;
			getDate(arg1: string, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number): java.sql.Date;
			getTime(arg1: number, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: string, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: number): java.sql.Time;
			getTime(arg1: string): java.sql.Time;
			first(): boolean;
			last(): boolean;
			isClosed(): boolean;
			getTimestamp(arg1: number, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: string, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: number): java.sql.Timestamp;
			getTimestamp(arg1: string): java.sql.Timestamp;
			updateTime(arg1: number, arg2: java.sql.Time): void;
			updateTime(arg1: string, arg2: java.sql.Time): void;
			getBigDecimal(arg1: number): java.math.BigDecimal;
			getBigDecimal(arg1: string, arg2: number): java.math.BigDecimal;
			getBigDecimal(arg1: string): java.math.BigDecimal;
			getBigDecimal(arg1: number, arg2: number): java.math.BigDecimal;
			updateBytes(arg1: string, arg2: native.Array<native.Byte>): void;
			updateBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getRow(): number;
			getCharacterStream(arg1: string): java.io.Reader;
			getCharacterStream(arg1: number): java.io.Reader;
			findColumn(arg1: string): number;
			insertRow(): void;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class RowSet implements java.sql.IResultSet, javax.sql.IRowSet {
			constructor(implementation: javax.sql.IRowSet);
			Command: string;
			QueryTimeout: number;
			Type: number;
			FetchSize: number;
			Password: string;
			FetchDirection: number;
			DataSourceName: string;
			Url: string;
			EscapeProcessing: boolean;
			Concurrency: number;
			TypeMap: java.util.IMap<string, java.lang.Class<any>>;
			MaxFieldSize: number;
			Username: string;
			MaxRows: number;
			TransactionIsolation: number;
			setBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			setBinaryStream(arg1: java.lang.String, arg2: java.io.InputStream): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream): void;
			setBinaryStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBytes(arg1: java.lang.String, arg2: native.Array<native.Byte>): void;
			setBytes(arg1: string, arg2: native.Array<native.Byte>): void;
			setBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getTransactionIsolation(): number;
			getTypeMap(): java.util.IMap<string, java.lang.Class<any>>;
			setTransactionIsolation(arg1: number): void;
			setTypeMap(arg1: java.util.IMap<string, java.lang.Class<any>>): void;
			clearParameters(): void;
			setArray(arg1: number, arg2: java.sql.IArray): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: number): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			setAsciiStream(arg1: java.lang.String, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBigDecimal(arg1: java.lang.String, arg2: java.math.BigDecimal): void;
			setBigDecimal(arg1: string, arg2: java.math.BigDecimal): void;
			setBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			setBlob(arg1: number, arg2: java.io.InputStream): void;
			setBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: number, arg2: java.sql.IBlob): void;
			setBlob(arg1: java.lang.String, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: java.lang.String, arg2: java.io.InputStream): void;
			setBlob(arg1: string, arg2: java.io.InputStream): void;
			setBlob(arg1: java.lang.String, arg2: java.sql.IBlob): void;
			setBlob(arg1: string, arg2: java.sql.IBlob): void;
			setClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: number, arg2: java.sql.IClob): void;
			setClob(arg1: number, arg2: java.io.Reader): void;
			setClob(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: java.lang.String, arg2: java.sql.IClob): void;
			setClob(arg1: string, arg2: java.sql.IClob): void;
			setClob(arg1: java.lang.String, arg2: java.io.Reader): void;
			setClob(arg1: string, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: java.lang.String, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: string, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: java.lang.String, arg2: java.io.Reader): void;
			setNClob(arg1: string, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: number, arg2: java.sql.INClob): void;
			setNClob(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: java.lang.String, arg2: java.sql.INClob): void;
			setNClob(arg1: string, arg2: java.sql.INClob): void;
			setNString(arg1: number, arg2: java.lang.String): void;
			setNString(arg1: number, arg2: string): void;
			setNString(arg1: java.lang.String, arg2: java.lang.String): void;
			setNString(arg1: string, arg2: string): void;
			setNull(arg1: number, arg2: number): void;
			setNull(arg1: java.lang.String, arg2: number): void;
			setNull(arg1: string, arg2: number): void;
			setNull(arg1: number, arg2: number, arg3: java.lang.String): void;
			setNull(arg1: number, arg2: number, arg3: string): void;
			setNull(arg1: java.lang.String, arg2: number, arg3: java.lang.String): void;
			setNull(arg1: string, arg2: number, arg3: string): void;
			setRef(arg1: number, arg2: java.sql.IRef): void;
			setRowId(arg1: number, arg2: java.sql.IRowId): void;
			setRowId(arg1: java.lang.String, arg2: java.sql.IRowId): void;
			setRowId(arg1: string, arg2: java.sql.IRowId): void;
			setSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			setSQLXML(arg1: java.lang.String, arg2: java.sql.ISQLXML): void;
			setSQLXML(arg1: string, arg2: java.sql.ISQLXML): void;
			getMaxFieldSize(): number;
			getMaxRows(): number;
			getQueryTimeout(): number;
			setEscapeProcessing(arg1: boolean): void;
			setMaxFieldSize(arg1: number): void;
			setMaxRows(arg1: number): void;
			setQueryTimeout(arg1: number): void;
			getUrl(): string;
			setPassword(arg1: java.lang.String): void;
			setPassword(arg1: string): void;
			addRowSetListener(arg1: javax.sql.IRowSetListener): void;
			getCommand(): string;
			getDataSourceName(): string;
			getEscapeProcessing(): boolean;
			removeRowSetListener(arg1: javax.sql.IRowSetListener): void;
			setConcurrency(arg1: number): void;
			setDataSourceName(arg1: java.lang.String): void;
			setDataSourceName(arg1: string): void;
			setUsername(arg1: java.lang.String): void;
			setUsername(arg1: string): void;
			setUrl(arg1: java.lang.String): void;
			setUrl(arg1: string): void;
			getUsername(): string;
			setReadOnly(arg1: boolean): void;
			setBoolean(arg1: number, arg2: boolean): void;
			setBoolean(arg1: java.lang.String, arg2: boolean): void;
			setBoolean(arg1: string, arg2: boolean): void;
			setByte(arg1: java.lang.String, arg2: native.Byte): void;
			setByte(arg1: string, arg2: native.Byte): void;
			setByte(arg1: number, arg2: native.Byte): void;
			setDouble(arg1: java.lang.String, arg2: native.Double): void;
			setDouble(arg1: string, arg2: number): void;
			setDouble(arg1: number, arg2: native.Double): void;
			setDouble(arg1: number, arg2: number): void;
			setFloat(arg1: number, arg2: native.Float): void;
			setFloat(arg1: java.lang.String, arg2: native.Float): void;
			setFloat(arg1: string, arg2: native.Float): void;
			setInt(arg1: number, arg2: number): void;
			setInt(arg1: java.lang.String, arg2: number): void;
			setInt(arg1: string, arg2: number): void;
			setLong(arg1: number, arg2: native.Long): void;
			setLong(arg1: java.lang.String, arg2: native.Long): void;
			setLong(arg1: string, arg2: native.Long): void;
			setShort(arg1: number, arg2: native.Short): void;
			setShort(arg1: java.lang.String, arg2: native.Short): void;
			setShort(arg1: string, arg2: native.Short): void;
			isReadOnly(): boolean;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: java.lang.String, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: string, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: java.lang.String, arg2: java.sql.Timestamp): void;
			setTimestamp(arg1: string, arg2: java.sql.Timestamp): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			setURL(arg1: number, arg2: java.net.URL): void;
			execute(): void;
			setType(arg1: number): void;
			setTime(arg1: number, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: java.lang.String, arg2: java.sql.Time): void;
			setTime(arg1: string, arg2: java.sql.Time): void;
			setTime(arg1: java.lang.String, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: string, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: number, arg2: java.sql.Time): void;
			setObject(arg1: java.lang.String, arg2: any, arg3: number): void;
			setObject(arg1: string, arg2: any, arg3: number): void;
			setObject(arg1: java.lang.String, arg2: any): void;
			setObject(arg1: string, arg2: any): void;
			setObject(arg1: java.lang.String, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: string, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: number, arg2: any, arg3: number): void;
			setObject(arg1: number, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: number, arg2: any): void;
			getPassword(): string;
			setDate(arg1: java.lang.String, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: string, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: java.lang.String, arg2: java.sql.Date): void;
			setDate(arg1: string, arg2: java.sql.Date): void;
			setDate(arg1: number, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: number, arg2: java.sql.Date): void;
			setCommand(arg1: java.lang.String): void;
			setCommand(arg1: string): void;
			setCharacterStream(arg1: java.lang.String, arg2: java.io.Reader, arg3: number): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader, arg3: number): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setCharacterStream(arg1: java.lang.String, arg2: java.io.Reader): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			setString(arg1: number, arg2: java.lang.String): void;
			setString(arg1: number, arg2: string): void;
			setString(arg1: java.lang.String, arg2: java.lang.String): void;
			setString(arg1: string, arg2: string): void;
			getBinaryStream(arg1: number): java.io.InputStream;
			getBinaryStream(arg1: string): java.io.InputStream;
			clearWarnings(): void;
			getHoldability(): number;
			getMetaData(): java.sql.IResultSetMetaData;
			getWarnings(): java.sql.SQLWarning;
			getFetchDirection(): number;
			getFetchSize(): number;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			absolute(arg1: number): boolean;
			afterLast(): void;
			beforeFirst(): void;
			cancelRowUpdates(): void;
			deleteRow(): void;
			getAsciiStream(arg1: string): java.io.InputStream;
			getAsciiStream(arg1: number): java.io.InputStream;
			getBlob(arg1: number): java.sql.IBlob;
			getBlob(arg1: string): java.sql.IBlob;
			getClob(arg1: string): java.sql.IClob;
			getClob(arg1: number): java.sql.IClob;
			getConcurrency(): number;
			getCursorName(): string;
			getNCharacterStream(arg1: string): java.io.Reader;
			getNCharacterStream(arg1: number): java.io.Reader;
			getNClob(arg1: string): java.sql.INClob;
			getNClob(arg1: number): java.sql.INClob;
			getNString(arg1: string): string;
			getNString(arg1: number): string;
			getRowId(arg1: string): java.sql.IRowId;
			getRowId(arg1: number): java.sql.IRowId;
			getSQLXML(arg1: number): java.sql.ISQLXML;
			getSQLXML(arg1: string): java.sql.ISQLXML;
			getStatement(): java.sql.IStatement;
			getUnicodeStream(arg1: number): java.io.InputStream;
			getUnicodeStream(arg1: string): java.io.InputStream;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			moveToCurrentRow(): void;
			moveToInsertRow(): void;
			refreshRow(): void;
			relative(arg1: number): boolean;
			rowDeleted(): boolean;
			rowInserted(): boolean;
			rowUpdated(): boolean;
			updateArray(arg1: string, arg2: java.sql.IArray): void;
			updateArray(arg1: number, arg2: java.sql.IArray): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			updateBigDecimal(arg1: string, arg2: java.math.BigDecimal): void;
			updateBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			updateBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: string, arg2: java.sql.IBlob): void;
			updateBlob(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: number, arg2: java.io.InputStream): void;
			updateBlob(arg1: number, arg2: java.sql.IBlob): void;
			updateBlob(arg1: string, arg2: java.io.InputStream): void;
			updateBoolean(arg1: number, arg2: boolean): void;
			updateBoolean(arg1: string, arg2: boolean): void;
			updateByte(arg1: string, arg2: native.Byte): void;
			updateByte(arg1: number, arg2: native.Byte): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: string, arg2: java.io.Reader): void;
			updateClob(arg1: number, arg2: java.sql.IClob): void;
			updateClob(arg1: number, arg2: java.io.Reader): void;
			updateClob(arg1: string, arg2: java.sql.IClob): void;
			updateClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateDate(arg1: number, arg2: java.sql.Date): void;
			updateDate(arg1: string, arg2: java.sql.Date): void;
			updateDouble(arg1: number, arg2: number): void;
			updateDouble(arg1: string, arg2: number): void;
			updateFloat(arg1: string, arg2: native.Float): void;
			updateFloat(arg1: number, arg2: native.Float): void;
			updateInt(arg1: string, arg2: number): void;
			updateInt(arg1: number, arg2: number): void;
			updateLong(arg1: string, arg2: native.Long): void;
			updateLong(arg1: number, arg2: native.Long): void;
			updateNCharacterStream(arg1: string, arg2: java.io.Reader): void;
			updateNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: string, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.sql.INClob): void;
			updateNClob(arg1: string, arg2: java.sql.INClob): void;
			updateNString(arg1: number, arg2: string): void;
			updateNString(arg1: string, arg2: string): void;
			updateNull(arg1: number): void;
			updateNull(arg1: string): void;
			updateObject(arg1: number, arg2: any): void;
			updateObject(arg1: string, arg2: any, arg3: number): void;
			updateObject(arg1: string, arg2: any): void;
			updateObject(arg1: number, arg2: any, arg3: number): void;
			updateRef(arg1: string, arg2: java.sql.IRef): void;
			updateRef(arg1: number, arg2: java.sql.IRef): void;
			updateRow(): void;
			updateRowId(arg1: number, arg2: java.sql.IRowId): void;
			updateRowId(arg1: string, arg2: java.sql.IRowId): void;
			updateSQLXML(arg1: string, arg2: java.sql.ISQLXML): void;
			updateSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			updateShort(arg1: string, arg2: native.Short): void;
			updateShort(arg1: number, arg2: native.Short): void;
			updateString(arg1: string, arg2: string): void;
			updateString(arg1: number, arg2: string): void;
			updateTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			updateTimestamp(arg1: string, arg2: java.sql.Timestamp): void;
			wasNull(): boolean;
			getBytes(arg1: number): native.Array<native.Byte>;
			getBytes(arg1: string): native.Array<native.Byte>;
			getArray(arg1: number): java.sql.IArray;
			getArray(arg1: string): java.sql.IArray;
			next(): boolean;
			getURL(arg1: string): java.net.URL;
			getURL(arg1: number): java.net.URL;
			close(): void;
			getBoolean(arg1: number): boolean;
			getBoolean(arg1: string): boolean;
			getByte(arg1: string): number;
			getByte(arg1: number): number;
			getDouble(arg1: string): any;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getFloat(arg1: string): number;
			getInt(arg1: string): number;
			getInt(arg1: number): number;
			getLong(arg1: string): any;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getShort(arg1: string): number;
			getType(): number;
			previous(): boolean;
			getObject(arg1: number): any;
			getObject(arg1: string): any;
			getObject<T>(arg1: number, arg2: java.lang.Class<T>): T;
			getObject<T>(arg1: string, arg2: java.lang.Class<T>): T;
			getObject(arg1: string, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getObject(arg1: number, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getString(arg1: number): string;
			getString(arg1: string): string;
			getRef(arg1: string): java.sql.IRef;
			getRef(arg1: number): java.sql.IRef;
			getDate(arg1: string): java.sql.Date;
			getDate(arg1: string, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number): java.sql.Date;
			getTime(arg1: number, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: string, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: number): java.sql.Time;
			getTime(arg1: string): java.sql.Time;
			first(): boolean;
			last(): boolean;
			isClosed(): boolean;
			getTimestamp(arg1: number, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: string, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: number): java.sql.Timestamp;
			getTimestamp(arg1: string): java.sql.Timestamp;
			updateTime(arg1: number, arg2: java.sql.Time): void;
			updateTime(arg1: string, arg2: java.sql.Time): void;
			getBigDecimal(arg1: number): java.math.BigDecimal;
			getBigDecimal(arg1: string, arg2: number): java.math.BigDecimal;
			getBigDecimal(arg1: string): java.math.BigDecimal;
			getBigDecimal(arg1: number, arg2: number): java.math.BigDecimal;
			updateBytes(arg1: string, arg2: native.Array<native.Byte>): void;
			updateBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getRow(): number;
			getCharacterStream(arg1: string): java.io.Reader;
			getCharacterStream(arg1: number): java.io.Reader;
			findColumn(arg1: string): number;
			insertRow(): void;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export interface IStatementEventListener extends java.util.IEventListener {
			statementClosed(arg1: javax.sql.StatementEvent): void;
			statementErrorOccurred(arg1: javax.sql.StatementEvent): void;
		}
		export class DataSource implements javax.sql.ICommonDataSource, java.sql.IWrapper, javax.sql.IDataSource {
			constructor(implementation: javax.sql.IDataSource);
			LogWriter: java.io.PrintWriter;
			LoginTimeout: number;
			getConnection(): java.sql.IConnection;
			getConnection(arg1: java.lang.String, arg2: java.lang.String): java.sql.IConnection;
			getConnection(arg1: string, arg2: string): java.sql.IConnection;
			getLogWriter(): java.io.PrintWriter;
			getLoginTimeout(): number;
			setLogWriter(arg1: java.io.PrintWriter): void;
			setLoginTimeout(arg1: number): void;
			getParentLogger(): java.util.logging.Logger;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class ConnectionEventListener implements java.util.IEventListener, javax.sql.IConnectionEventListener {
			constructor(implementation: javax.sql.IConnectionEventListener);
			connectionClosed(arg1: javax.sql.ConnectionEvent): void;
			connectionErrorOccurred(arg1: javax.sql.ConnectionEvent): void;
		}
		export class RowSetEvent extends java.util.EventObject {
			constructor(arg1: javax.sql.IRowSet);
			static class: java.lang.Class<javax.sql.RowSetEvent>;
		}
		export class StatementEventListener implements java.util.IEventListener, javax.sql.IStatementEventListener {
			constructor(implementation: javax.sql.IStatementEventListener);
			statementClosed(arg1: javax.sql.StatementEvent): void;
			statementErrorOccurred(arg1: javax.sql.StatementEvent): void;
		}
		export class StatementEvent extends java.util.EventObject {
			constructor(arg1: javax.sql.IPooledConnection, arg2: java.sql.IPreparedStatement, arg3: java.sql.SQLException);
			constructor(arg1: javax.sql.IPooledConnection, arg2: java.sql.IPreparedStatement);
			static class: java.lang.Class<javax.sql.StatementEvent>;
			getStatement(): java.sql.IPreparedStatement;
			getSQLException(): java.sql.SQLException;
		}
		export interface IRowSetMetaData extends java.sql.IResultSetMetaData {
			setScale(arg1: number, arg2: number): void;
			setAutoIncrement(arg1: number, arg2: boolean): void;
			setCaseSensitive(arg1: number, arg2: boolean): void;
			setCatalogName(arg1: number, arg2: string): void;
			setColumnDisplaySize(arg1: number, arg2: number): void;
			setColumnLabel(arg1: number, arg2: string): void;
			setColumnName(arg1: number, arg2: string): void;
			setColumnType(arg1: number, arg2: number): void;
			setColumnTypeName(arg1: number, arg2: string): void;
			setNullable(arg1: number, arg2: number): void;
			setPrecision(arg1: number, arg2: number): void;
			setSchemaName(arg1: number, arg2: string): void;
			setSearchable(arg1: number, arg2: boolean): void;
			setSigned(arg1: number, arg2: boolean): void;
			setTableName(arg1: number, arg2: string): void;
			setCurrency(arg1: number, arg2: boolean): void;
			setColumnCount(arg1: number): void;
			getPrecision(arg1: number): number;
			getScale(arg1: number): number;
			isNullable(arg1: number): number;
			isSigned(arg1: number): boolean;
			getCatalogName(arg1: number): string;
			getColumnClassName(arg1: number): string;
			getColumnDisplaySize(arg1: number): number;
			getColumnLabel(arg1: number): string;
			getColumnType(arg1: number): number;
			getColumnTypeName(arg1: number): string;
			getSchemaName(arg1: number): string;
			getTableName(arg1: number): string;
			isAutoIncrement(arg1: number): boolean;
			isCaseSensitive(arg1: number): boolean;
			isCurrency(arg1: number): boolean;
			isDefinitelyWritable(arg1: number): boolean;
			isSearchable(arg1: number): boolean;
			isWritable(arg1: number): boolean;
			isReadOnly(arg1: number): boolean;
			getColumnCount(): number;
			getColumnName(arg1: number): string;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class RowSetWriter implements javax.sql.IRowSetWriter {
			constructor(implementation: javax.sql.IRowSetWriter);
			writeData(arg1: javax.sql.IRowSetInternal): boolean;
		}
		export interface IRowSetListener extends java.util.IEventListener {
			cursorMoved(arg1: javax.sql.RowSetEvent): void;
			rowChanged(arg1: javax.sql.RowSetEvent): void;
			rowSetChanged(arg1: javax.sql.RowSetEvent): void;
		}
		export interface IRowSetReader {
			readData(arg1: javax.sql.IRowSetInternal): void;
		}
		export interface ICommonDataSource {
			getLogWriter(): java.io.PrintWriter;
			getLoginTimeout(): number;
			setLogWriter(arg1: java.io.PrintWriter): void;
			setLoginTimeout(arg1: number): void;
			getParentLogger(): java.util.logging.Logger;
		}
		export interface IPooledConnection {
			addConnectionEventListener(arg1: javax.sql.IConnectionEventListener): void;
			addStatementEventListener(arg1: javax.sql.IStatementEventListener): void;
			removeConnectionEventListener(arg1: javax.sql.IConnectionEventListener): void;
			removeStatementEventListener(arg1: javax.sql.IStatementEventListener): void;
			close(): void;
			getConnection(): java.sql.IConnection;
		}
		export interface IDataSource extends javax.sql.ICommonDataSource, java.sql.IWrapper {
			getConnection(): java.sql.IConnection;
			getConnection(arg1: string, arg2: string): java.sql.IConnection;
			getLogWriter(): java.io.PrintWriter;
			getLoginTimeout(): number;
			setLogWriter(arg1: java.io.PrintWriter): void;
			setLoginTimeout(arg1: number): void;
			getParentLogger(): java.util.logging.Logger;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export interface IRowSetInternal {
			getOriginalRow(): java.sql.IResultSet;
			setMetaData(arg1: javax.sql.IRowSetMetaData): void;
			getOriginal(): java.sql.IResultSet;
			getConnection(): java.sql.IConnection;
			getParams(): native.Array<any>;
		}
		export class ConnectionEvent extends java.util.EventObject {
			constructor(arg1: javax.sql.IPooledConnection, arg2: java.sql.SQLException);
			constructor(arg1: javax.sql.IPooledConnection);
			static class: java.lang.Class<javax.sql.ConnectionEvent>;
			getSQLException(): java.sql.SQLException;
		}
		export class CommonDataSource implements javax.sql.ICommonDataSource {
			constructor(implementation: javax.sql.ICommonDataSource);
			LogWriter: java.io.PrintWriter;
			LoginTimeout: number;
			getLogWriter(): java.io.PrintWriter;
			getLoginTimeout(): number;
			setLogWriter(arg1: java.io.PrintWriter): void;
			setLoginTimeout(arg1: number): void;
			getParentLogger(): java.util.logging.Logger;
		}
		export class RowSetInternal implements javax.sql.IRowSetInternal {
			constructor(implementation: javax.sql.IRowSetInternal);
			getOriginalRow(): java.sql.IResultSet;
			setMetaData(arg1: javax.sql.IRowSetMetaData): void;
			getOriginal(): java.sql.IResultSet;
			getConnection(): java.sql.IConnection;
			getParams(): native.Array<any>;
		}
	}
	export module microedition {
		export module khronos {
			export module opengles {
				export interface IGL10Ext extends javax.microedition.khronos.opengles.IGL {
					glQueryMatrixxOES(arg1: native.Array<number>, arg2: number, arg3: native.Array<number>, arg4: number): number;
					glQueryMatrixxOES(arg1: java.nio.IntBuffer, arg2: java.nio.IntBuffer): number;
				}
				export interface IGL {
					__javax_microedition_khronos_opengles_IGL?: any;
				}
				export class GL11Ext implements javax.microedition.khronos.opengles.IGL, javax.microedition.khronos.opengles.IGL11Ext {
					constructor(implementation: javax.microedition.khronos.opengles.IGL11Ext);
					static GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES: number;
					static GL_MATRIX_INDEX_ARRAY_OES: number;
					static GL_MATRIX_INDEX_ARRAY_POINTER_OES: number;
					static GL_MATRIX_INDEX_ARRAY_SIZE_OES: number;
					static GL_MATRIX_INDEX_ARRAY_STRIDE_OES: number;
					static GL_MATRIX_INDEX_ARRAY_TYPE_OES: number;
					static GL_MATRIX_PALETTE_OES: number;
					static GL_MAX_PALETTE_MATRICES_OES: number;
					static GL_MAX_VERTEX_UNITS_OES: number;
					static GL_TEXTURE_CROP_RECT_OES: number;
					static GL_WEIGHT_ARRAY_BUFFER_BINDING_OES: number;
					static GL_WEIGHT_ARRAY_OES: number;
					static GL_WEIGHT_ARRAY_POINTER_OES: number;
					static GL_WEIGHT_ARRAY_SIZE_OES: number;
					static GL_WEIGHT_ARRAY_STRIDE_OES: number;
					static GL_WEIGHT_ARRAY_TYPE_OES: number;
					glDrawTexsvOES(arg1: native.Array<native.Short>, arg2: number): void;
					glDrawTexsvOES(arg1: java.nio.ShortBuffer): void;
					glDrawTexxvOES(arg1: native.Array<number>, arg2: number): void;
					glDrawTexxvOES(arg1: java.nio.IntBuffer): void;
					glDrawTexfvOES(arg1: java.nio.FloatBuffer): void;
					glDrawTexfvOES(arg1: native.Array<native.Float>, arg2: number): void;
					glDrawTexivOES(arg1: java.nio.IntBuffer): void;
					glDrawTexivOES(arg1: native.Array<number>, arg2: number): void;
					glLoadPaletteFromModelViewMatrixOES(): void;
					glCurrentPaletteMatrixOES(arg1: number): void;
					glMatrixIndexPointerOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glMatrixIndexPointerOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glDrawTexiOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glDrawTexfOES(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
					glDrawTexxOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glDrawTexsOES(arg1: native.Short, arg2: native.Short, arg3: native.Short, arg4: native.Short, arg5: native.Short): void;
					glEnable(arg1: number): void;
					glWeightPointerOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glWeightPointerOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glEnableClientState(arg1: number): void;
				}
				export interface IGL11 extends javax.microedition.khronos.opengles.IGL10 {
					glGetBufferParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetBufferParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glIsEnabled(arg1: number): boolean;
					glIsTexture(arg1: number): boolean;
					glIsBuffer(arg1: number): boolean;
					glGetFixedv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetFixedv(arg1: number, arg2: java.nio.IntBuffer): void;
					glGetTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetLightxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetLightxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glColor4ub(arg1: native.Byte, arg2: native.Byte, arg3: native.Byte, arg4: native.Byte): void;
					glClipPlanef(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glClipPlanef(arg1: number, arg2: java.nio.FloatBuffer): void;
					glTexEnviv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexEnviv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexEnvi(arg1: number, arg2: number, arg3: number): void;
					glGetLightfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glGetLightfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glClipPlanex(arg1: number, arg2: java.nio.IntBuffer): void;
					glClipPlanex(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetTexEnviv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexEnviv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glBindBuffer(arg1: number, arg2: number): void;
					glGetBooleanv(arg1: number, arg2: native.Array<boolean>, arg3: number): void;
					glGetBooleanv(arg1: number, arg2: java.nio.IntBuffer): void;
					glBufferData(arg1: number, arg2: number, arg3: java.nio.Buffer, arg4: number): void;
					glGenBuffers(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenBuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetFloatv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glGetFloatv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glNormalPointer(arg1: number, arg2: number, arg3: number): void;
					glGetClipPlanef(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glGetClipPlanef(arg1: number, arg2: java.nio.FloatBuffer): void;
					glGetClipPlanex(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetClipPlanex(arg1: number, arg2: java.nio.IntBuffer): void;
					glGetMaterialfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glGetMaterialfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glGetMaterialxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetMaterialxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetTexParameterxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetTexParameterxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glPointParameterf(arg1: number, arg2: native.Float): void;
					glPointParameterfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glPointParameterfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glPointParameterx(arg1: number, arg2: number): void;
					glTexParameterxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexParameterxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glPointParameterxv(arg1: number, arg2: java.nio.IntBuffer): void;
					glPointParameterxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glPointSizePointerOES(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
					glDrawElements(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glBufferSubData(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glDeleteBuffers(arg1: number, arg2: java.nio.IntBuffer): void;
					glDeleteBuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexParameterfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexParameteri(arg1: number, arg2: number, arg3: number): void;
					glTexParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glGetTexParameterfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glGetTexParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetTexParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glColorPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glGetPointerv(arg1: number, arg2: native.Array<java.nio.Buffer>): void;
					glCompressedTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glCompressedTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.nio.Buffer): void;
					glStencilFunc(arg1: number, arg2: number, arg3: number): void;
					glReadPixels(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: java.nio.Buffer): void;
					glTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glStencilOp(arg1: number, arg2: number, arg3: number): void;
					glHint(arg1: number, arg2: number): void;
					glLineWidth(arg1: native.Float): void;
					glScissor(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glPixelStorei(arg1: number, arg2: number): void;
					glStencilMask(arg1: number): void;
					glViewport(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glColor4f(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glAlphaFunc(arg1: number, arg2: native.Float): void;
					glClearColorx(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glAlphaFuncx(arg1: number, arg2: number): void;
					glClearDepthx(arg1: number): void;
					glLoadMatrixx(arg1: java.nio.IntBuffer): void;
					glLoadMatrixx(arg1: native.Array<number>, arg2: number): void;
					glLogicOp(arg1: number): void;
					glFrustumx(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
					glLightModelx(arg1: number, arg2: number): void;
					glDepthRangex(arg1: number, arg2: number): void;
					glFogfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glFogfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glMaterialfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glMaterialfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glLineWidthx(arg1: number): void;
					glMaterialxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glMaterialxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glMultMatrixf(arg1: java.nio.FloatBuffer): void;
					glMultMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
					glMultMatrixx(arg1: java.nio.IntBuffer): void;
					glMultMatrixx(arg1: native.Array<number>, arg2: number): void;
					glFrustumf(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
					glLightx(arg1: number, arg2: number, arg3: number): void;
					glLightModelf(arg1: number, arg2: native.Float): void;
					glMaterialx(arg1: number, arg2: number, arg3: number): void;
					glNormal3f(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glFogf(arg1: number, arg2: native.Float): void;
					glNormal3x(arg1: number, arg2: number, arg3: number): void;
					glOrthof(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
					glOrthox(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
					glMaterialf(arg1: number, arg2: number, arg3: native.Float): void;
					glFogxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glFogxv(arg1: number, arg2: java.nio.IntBuffer): void;
					glLightfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glLightfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glPointSize(arg1: native.Float): void;
					glPointSizex(arg1: number): void;
					glPopMatrix(): void;
					glMatrixMode(arg1: number): void;
					glFogx(arg1: number, arg2: number): void;
					glColor4x(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glLightf(arg1: number, arg2: number, arg3: native.Float): void;
					glLightxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glLightxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glLoadMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
					glLoadMatrixf(arg1: java.nio.FloatBuffer): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexEnvf(arg1: number, arg2: number, arg3: native.Float): void;
					glTranslatef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glScalex(arg1: number, arg2: number, arg3: number): void;
					glShadeModel(arg1: number): void;
					glRotatex(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTranslatex(arg1: number, arg2: number, arg3: number): void;
					glRotatef(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glPushMatrix(): void;
					glTexEnvx(arg1: number, arg2: number, arg3: number): void;
					glScalef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glColorMask(arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean): void;
					glBlendFunc(arg1: number, arg2: number): void;
					glEnable(arg1: number): void;
					glBindTexture(arg1: number, arg2: number): void;
					glClearColor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glClearDepthf(arg1: native.Float): void;
					glDepthMask(arg1: boolean): void;
					glCullFace(arg1: number): void;
					glDepthFunc(arg1: number): void;
					glFrontFace(arg1: number): void;
					glGenTextures(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glClear(arg1: number): void;
					glDepthRangef(arg1: native.Float, arg2: native.Float): void;
					glFinish(): void;
					glGetError(): number;
					glGetIntegerv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetIntegerv(arg1: number, arg2: java.nio.IntBuffer): void;
					glDisable(arg1: number): void;
					glGetString(arg1: number): string;
					glFlush(): void;
					glDrawArrays(arg1: number, arg2: number, arg3: number): void;
					glTexParameterx(arg1: number, arg2: number, arg3: number): void;
					glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glLoadIdentity(): void;
					glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glSampleCoveragex(arg1: number, arg2: boolean): void;
					glMultiTexCoord4x(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glMultiTexCoord4f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
					glPolygonOffsetx(arg1: number, arg2: number): void;
					glNormalPointer(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
					glDrawElements(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glActiveTexture(arg1: number): void;
					glClearStencil(arg1: number): void;
					glCopyTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glCopyTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glDeleteTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glDeleteTextures(arg1: number, arg2: java.nio.IntBuffer): void;
					glTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glSampleCoverage(arg1: native.Float, arg2: boolean): void;
					glPolygonOffset(arg1: native.Float, arg2: native.Float): void;
					glTexParameterf(arg1: number, arg2: number, arg3: native.Float): void;
					glClientActiveTexture(arg1: number): void;
					glColorPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glDisableClientState(arg1: number): void;
					glEnableClientState(arg1: number): void;
					glLightModelfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glLightModelfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glLightModelxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glLightModelxv(arg1: number, arg2: java.nio.IntBuffer): void;
				}
				export module IGL11 {
					var GL_ACTIVE_TEXTURE: number;
					var GL_ADD_SIGNED: number;
					var GL_ALPHA_SCALE: number;
					var GL_ALPHA_TEST_FUNC: number;
					var GL_ALPHA_TEST_REF: number;
					var GL_ARRAY_BUFFER: number;
					var GL_ARRAY_BUFFER_BINDING: number;
					var GL_BLEND_DST: number;
					var GL_BLEND_SRC: number;
					var GL_BUFFER_ACCESS: number;
					var GL_BUFFER_SIZE: number;
					var GL_BUFFER_USAGE: number;
					var GL_CLIENT_ACTIVE_TEXTURE: number;
					var GL_CLIP_PLANE0: number;
					var GL_CLIP_PLANE1: number;
					var GL_CLIP_PLANE2: number;
					var GL_CLIP_PLANE3: number;
					var GL_CLIP_PLANE4: number;
					var GL_CLIP_PLANE5: number;
					var GL_COLOR_ARRAY_BUFFER_BINDING: number;
					var GL_COLOR_ARRAY_POINTER: number;
					var GL_COLOR_ARRAY_SIZE: number;
					var GL_COLOR_ARRAY_STRIDE: number;
					var GL_COLOR_ARRAY_TYPE: number;
					var GL_COLOR_CLEAR_VALUE: number;
					var GL_COLOR_WRITEMASK: number;
					var GL_COMBINE: number;
					var GL_COMBINE_ALPHA: number;
					var GL_COMBINE_RGB: number;
					var GL_CONSTANT: number;
					var GL_COORD_REPLACE_OES: number;
					var GL_CULL_FACE_MODE: number;
					var GL_CURRENT_COLOR: number;
					var GL_CURRENT_NORMAL: number;
					var GL_CURRENT_TEXTURE_COORDS: number;
					var GL_DEPTH_CLEAR_VALUE: number;
					var GL_DEPTH_FUNC: number;
					var GL_DEPTH_RANGE: number;
					var GL_DEPTH_WRITEMASK: number;
					var GL_DOT3_RGB: number;
					var GL_DOT3_RGBA: number;
					var GL_DYNAMIC_DRAW: number;
					var GL_ELEMENT_ARRAY_BUFFER: number;
					var GL_ELEMENT_ARRAY_BUFFER_BINDING: number;
					var GL_FRONT_FACE: number;
					var GL_GENERATE_MIPMAP: number;
					var GL_GENERATE_MIPMAP_HINT: number;
					var GL_INTERPOLATE: number;
					var GL_LINE_WIDTH: number;
					var GL_LOGIC_OP_MODE: number;
					var GL_MATRIX_MODE: number;
					var GL_MAX_CLIP_PLANES: number;
					var GL_MODELVIEW_MATRIX: number;
					var GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES: number;
					var GL_MODELVIEW_STACK_DEPTH: number;
					var GL_NORMAL_ARRAY_BUFFER_BINDING: number;
					var GL_NORMAL_ARRAY_POINTER: number;
					var GL_NORMAL_ARRAY_STRIDE: number;
					var GL_NORMAL_ARRAY_TYPE: number;
					var GL_OPERAND0_ALPHA: number;
					var GL_OPERAND0_RGB: number;
					var GL_OPERAND1_ALPHA: number;
					var GL_OPERAND1_RGB: number;
					var GL_OPERAND2_ALPHA: number;
					var GL_OPERAND2_RGB: number;
					var GL_POINT_DISTANCE_ATTENUATION: number;
					var GL_POINT_FADE_THRESHOLD_SIZE: number;
					var GL_POINT_SIZE: number;
					var GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES: number;
					var GL_POINT_SIZE_ARRAY_OES: number;
					var GL_POINT_SIZE_ARRAY_POINTER_OES: number;
					var GL_POINT_SIZE_ARRAY_STRIDE_OES: number;
					var GL_POINT_SIZE_ARRAY_TYPE_OES: number;
					var GL_POINT_SIZE_MAX: number;
					var GL_POINT_SIZE_MIN: number;
					var GL_POINT_SPRITE_OES: number;
					var GL_POLYGON_OFFSET_FACTOR: number;
					var GL_POLYGON_OFFSET_UNITS: number;
					var GL_PREVIOUS: number;
					var GL_PRIMARY_COLOR: number;
					var GL_PROJECTION_MATRIX: number;
					var GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES: number;
					var GL_PROJECTION_STACK_DEPTH: number;
					var GL_RGB_SCALE: number;
					var GL_SAMPLE_BUFFERS: number;
					var GL_SAMPLE_COVERAGE_INVERT: number;
					var GL_SAMPLE_COVERAGE_VALUE: number;
					var GL_SAMPLES: number;
					var GL_SCISSOR_BOX: number;
					var GL_SHADE_MODEL: number;
					var GL_SRC0_ALPHA: number;
					var GL_SRC0_RGB: number;
					var GL_SRC1_ALPHA: number;
					var GL_SRC1_RGB: number;
					var GL_SRC2_ALPHA: number;
					var GL_SRC2_RGB: number;
					var GL_STATIC_DRAW: number;
					var GL_STENCIL_CLEAR_VALUE: number;
					var GL_STENCIL_FAIL: number;
					var GL_STENCIL_FUNC: number;
					var GL_STENCIL_PASS_DEPTH_FAIL: number;
					var GL_STENCIL_PASS_DEPTH_PASS: number;
					var GL_STENCIL_REF: number;
					var GL_STENCIL_VALUE_MASK: number;
					var GL_STENCIL_WRITEMASK: number;
					var GL_SUBTRACT: number;
					var GL_TEXTURE_BINDING_2D: number;
					var GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING: number;
					var GL_TEXTURE_COORD_ARRAY_POINTER: number;
					var GL_TEXTURE_COORD_ARRAY_SIZE: number;
					var GL_TEXTURE_COORD_ARRAY_STRIDE: number;
					var GL_TEXTURE_COORD_ARRAY_TYPE: number;
					var GL_TEXTURE_MATRIX: number;
					var GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES: number;
					var GL_TEXTURE_STACK_DEPTH: number;
					var GL_VERTEX_ARRAY_BUFFER_BINDING: number;
					var GL_VERTEX_ARRAY_POINTER: number;
					var GL_VERTEX_ARRAY_SIZE: number;
					var GL_VERTEX_ARRAY_STRIDE: number;
					var GL_VERTEX_ARRAY_TYPE: number;
					var GL_VIEWPORT: number;
					var GL_WRITE_ONLY: number;
				}
				export interface IGL11Ext extends javax.microedition.khronos.opengles.IGL {
					glDrawTexsvOES(arg1: native.Array<native.Short>, arg2: number): void;
					glDrawTexsvOES(arg1: java.nio.ShortBuffer): void;
					glDrawTexxvOES(arg1: native.Array<number>, arg2: number): void;
					glDrawTexxvOES(arg1: java.nio.IntBuffer): void;
					glDrawTexfvOES(arg1: java.nio.FloatBuffer): void;
					glDrawTexfvOES(arg1: native.Array<native.Float>, arg2: number): void;
					glDrawTexivOES(arg1: java.nio.IntBuffer): void;
					glDrawTexivOES(arg1: native.Array<number>, arg2: number): void;
					glLoadPaletteFromModelViewMatrixOES(): void;
					glCurrentPaletteMatrixOES(arg1: number): void;
					glMatrixIndexPointerOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glMatrixIndexPointerOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glDrawTexiOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glDrawTexfOES(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
					glDrawTexxOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glDrawTexsOES(arg1: native.Short, arg2: native.Short, arg3: native.Short, arg4: native.Short, arg5: native.Short): void;
					glEnable(arg1: number): void;
					glWeightPointerOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glWeightPointerOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glEnableClientState(arg1: number): void;
				}
				export module IGL11Ext {
					var GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES: number;
					var GL_MATRIX_INDEX_ARRAY_OES: number;
					var GL_MATRIX_INDEX_ARRAY_POINTER_OES: number;
					var GL_MATRIX_INDEX_ARRAY_SIZE_OES: number;
					var GL_MATRIX_INDEX_ARRAY_STRIDE_OES: number;
					var GL_MATRIX_INDEX_ARRAY_TYPE_OES: number;
					var GL_MATRIX_PALETTE_OES: number;
					var GL_MAX_PALETTE_MATRICES_OES: number;
					var GL_MAX_VERTEX_UNITS_OES: number;
					var GL_TEXTURE_CROP_RECT_OES: number;
					var GL_WEIGHT_ARRAY_BUFFER_BINDING_OES: number;
					var GL_WEIGHT_ARRAY_OES: number;
					var GL_WEIGHT_ARRAY_POINTER_OES: number;
					var GL_WEIGHT_ARRAY_SIZE_OES: number;
					var GL_WEIGHT_ARRAY_STRIDE_OES: number;
					var GL_WEIGHT_ARRAY_TYPE_OES: number;
				}
				export interface IGL11ExtensionPack extends javax.microedition.khronos.opengles.IGL {
					glGetRenderbufferParameterivOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetRenderbufferParameterivOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetFramebufferAttachmentParameterivOES(arg1: number, arg2: number, arg3: number, arg4: native.Array<number>, arg5: number): void;
					glGetFramebufferAttachmentParameterivOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.IntBuffer): void;
					glRenderbufferStorageOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glDeleteRenderbuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glDeleteRenderbuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
					glFramebufferTexture2DOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glDeleteFramebuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
					glDeleteFramebuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glFramebufferRenderbufferOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glCheckFramebufferStatusOES(arg1: number): number;
					glCompressedTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.nio.Buffer): void;
					glBlendEquationSeparate(arg1: number, arg2: number): void;
					glStencilOp(arg1: number, arg2: number, arg3: number): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexEnvf(arg1: number, arg2: number, arg3: native.Float): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexEnvx(arg1: number, arg2: number, arg3: number): void;
					glEnable(arg1: number): void;
					glBindTexture(arg1: number, arg2: number): void;
					glGetIntegerv(arg1: number, arg2: java.nio.IntBuffer): void;
					glGetIntegerv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glBindFramebufferOES(arg1: number, arg2: number): void;
					glBindRenderbufferOES(arg1: number, arg2: number): void;
					glGenRenderbuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGenRenderbuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenFramebuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGenFramebuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenerateMipmapOES(arg1: number): void;
					glIsFramebufferOES(arg1: number): boolean;
					glIsRenderbufferOES(arg1: number): boolean;
					glBlendEquation(arg1: number): void;
					glBlendFuncSeparate(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glCopyTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glTexParameterf(arg1: number, arg2: number, arg3: native.Float): void;
					glTexGenxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexGenxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexGenfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glGetTexGenfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glGetTexGenxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexGenxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetTexGeniv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexGeniv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexGenf(arg1: number, arg2: number, arg3: native.Float): void;
					glTexGeni(arg1: number, arg2: number, arg3: number): void;
					glTexGenfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexGenfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexGeniv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexGeniv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexGenx(arg1: number, arg2: number, arg3: number): void;
				}
				export module IGL11ExtensionPack {
					var GL_BLEND_DST_ALPHA: number;
					var GL_BLEND_DST_RGB: number;
					var GL_BLEND_EQUATION: number;
					var GL_BLEND_EQUATION_ALPHA: number;
					var GL_BLEND_EQUATION_RGB: number;
					var GL_BLEND_SRC_ALPHA: number;
					var GL_BLEND_SRC_RGB: number;
					var GL_COLOR_ATTACHMENT0_OES: number;
					var GL_COLOR_ATTACHMENT1_OES: number;
					var GL_COLOR_ATTACHMENT2_OES: number;
					var GL_COLOR_ATTACHMENT3_OES: number;
					var GL_COLOR_ATTACHMENT4_OES: number;
					var GL_COLOR_ATTACHMENT5_OES: number;
					var GL_COLOR_ATTACHMENT6_OES: number;
					var GL_COLOR_ATTACHMENT7_OES: number;
					var GL_COLOR_ATTACHMENT8_OES: number;
					var GL_COLOR_ATTACHMENT9_OES: number;
					var GL_COLOR_ATTACHMENT10_OES: number;
					var GL_COLOR_ATTACHMENT11_OES: number;
					var GL_COLOR_ATTACHMENT12_OES: number;
					var GL_COLOR_ATTACHMENT13_OES: number;
					var GL_COLOR_ATTACHMENT14_OES: number;
					var GL_COLOR_ATTACHMENT15_OES: number;
					var GL_DECR_WRAP: number;
					var GL_DEPTH_ATTACHMENT_OES: number;
					var GL_DEPTH_COMPONENT: number;
					var GL_DEPTH_COMPONENT16: number;
					var GL_DEPTH_COMPONENT24: number;
					var GL_DEPTH_COMPONENT32: number;
					var GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES: number;
					var GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES: number;
					var GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES: number;
					var GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES: number;
					var GL_FRAMEBUFFER_BINDING_OES: number;
					var GL_FRAMEBUFFER_COMPLETE_OES: number;
					var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES: number;
					var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES: number;
					var GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES: number;
					var GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES: number;
					var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES: number;
					var GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES: number;
					var GL_FRAMEBUFFER_OES: number;
					var GL_FRAMEBUFFER_UNSUPPORTED_OES: number;
					var GL_FUNC_ADD: number;
					var GL_FUNC_REVERSE_SUBTRACT: number;
					var GL_FUNC_SUBTRACT: number;
					var GL_INCR_WRAP: number;
					var GL_INVALID_FRAMEBUFFER_OPERATION_OES: number;
					var GL_MAX_COLOR_ATTACHMENTS_OES: number;
					var GL_MAX_CUBE_MAP_TEXTURE_SIZE: number;
					var GL_MAX_RENDERBUFFER_SIZE_OES: number;
					var GL_MIRRORED_REPEAT: number;
					var GL_NORMAL_MAP: number;
					var GL_REFLECTION_MAP: number;
					var GL_RENDERBUFFER_ALPHA_SIZE_OES: number;
					var GL_RENDERBUFFER_BINDING_OES: number;
					var GL_RENDERBUFFER_BLUE_SIZE_OES: number;
					var GL_RENDERBUFFER_DEPTH_SIZE_OES: number;
					var GL_RENDERBUFFER_GREEN_SIZE_OES: number;
					var GL_RENDERBUFFER_HEIGHT_OES: number;
					var GL_RENDERBUFFER_INTERNAL_FORMAT_OES: number;
					var GL_RENDERBUFFER_OES: number;
					var GL_RENDERBUFFER_RED_SIZE_OES: number;
					var GL_RENDERBUFFER_STENCIL_SIZE_OES: number;
					var GL_RENDERBUFFER_WIDTH_OES: number;
					var GL_RGB5_A1: number;
					var GL_RGB565_OES: number;
					var GL_RGB8: number;
					var GL_RGBA4: number;
					var GL_RGBA8: number;
					var GL_STENCIL_ATTACHMENT_OES: number;
					var GL_STENCIL_INDEX: number;
					var GL_STENCIL_INDEX1_OES: number;
					var GL_STENCIL_INDEX4_OES: number;
					var GL_STENCIL_INDEX8_OES: number;
					var GL_STR: number;
					var GL_TEXTURE_BINDING_CUBE_MAP: number;
					var GL_TEXTURE_CUBE_MAP: number;
					var GL_TEXTURE_CUBE_MAP_NEGATIVE_X: number;
					var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: number;
					var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: number;
					var GL_TEXTURE_CUBE_MAP_POSITIVE_X: number;
					var GL_TEXTURE_CUBE_MAP_POSITIVE_Y: number;
					var GL_TEXTURE_CUBE_MAP_POSITIVE_Z: number;
					var GL_TEXTURE_GEN_MODE: number;
					var GL_TEXTURE_GEN_STR: number;
				}
				export class GL10 implements javax.microedition.khronos.opengles.IGL, javax.microedition.khronos.opengles.IGL10 {
					constructor(implementation: javax.microedition.khronos.opengles.IGL10);
					static GL_ADD: number;
					static GL_ALIASED_LINE_WIDTH_RANGE: number;
					static GL_ALIASED_POINT_SIZE_RANGE: number;
					static GL_ALPHA: number;
					static GL_ALPHA_BITS: number;
					static GL_ALPHA_TEST: number;
					static GL_ALWAYS: number;
					static GL_AMBIENT: number;
					static GL_AMBIENT_AND_DIFFUSE: number;
					static GL_AND: number;
					static GL_AND_INVERTED: number;
					static GL_AND_REVERSE: number;
					static GL_BACK: number;
					static GL_BLEND: number;
					static GL_BLUE_BITS: number;
					static GL_BYTE: number;
					static GL_CCW: number;
					static GL_CLAMP_TO_EDGE: number;
					static GL_CLEAR: number;
					static GL_COLOR_ARRAY: number;
					static GL_COLOR_BUFFER_BIT: number;
					static GL_COLOR_LOGIC_OP: number;
					static GL_COLOR_MATERIAL: number;
					static GL_COMPRESSED_TEXTURE_FORMATS: number;
					static GL_CONSTANT_ATTENUATION: number;
					static GL_COPY: number;
					static GL_COPY_INVERTED: number;
					static GL_CULL_FACE: number;
					static GL_CW: number;
					static GL_DECAL: number;
					static GL_DECR: number;
					static GL_DEPTH_BITS: number;
					static GL_DEPTH_BUFFER_BIT: number;
					static GL_DEPTH_TEST: number;
					static GL_DIFFUSE: number;
					static GL_DITHER: number;
					static GL_DONT_CARE: number;
					static GL_DST_ALPHA: number;
					static GL_DST_COLOR: number;
					static GL_EMISSION: number;
					static GL_EQUAL: number;
					static GL_EQUIV: number;
					static GL_EXP: number;
					static GL_EXP2: number;
					static GL_EXTENSIONS: number;
					static GL_FALSE: number;
					static GL_FASTEST: number;
					static GL_FIXED: number;
					static GL_FLAT: number;
					static GL_FLOAT: number;
					static GL_FOG: number;
					static GL_FOG_COLOR: number;
					static GL_FOG_DENSITY: number;
					static GL_FOG_END: number;
					static GL_FOG_HINT: number;
					static GL_FOG_MODE: number;
					static GL_FOG_START: number;
					static GL_FRONT: number;
					static GL_FRONT_AND_BACK: number;
					static GL_GEQUAL: number;
					static GL_GREATER: number;
					static GL_GREEN_BITS: number;
					static GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES: number;
					static GL_IMPLEMENTATION_COLOR_READ_TYPE_OES: number;
					static GL_INCR: number;
					static GL_INVALID_ENUM: number;
					static GL_INVALID_OPERATION: number;
					static GL_INVALID_VALUE: number;
					static GL_INVERT: number;
					static GL_KEEP: number;
					static GL_LEQUAL: number;
					static GL_LESS: number;
					static GL_LIGHT_MODEL_AMBIENT: number;
					static GL_LIGHT_MODEL_TWO_SIDE: number;
					static GL_LIGHT0: number;
					static GL_LIGHT1: number;
					static GL_LIGHT2: number;
					static GL_LIGHT3: number;
					static GL_LIGHT4: number;
					static GL_LIGHT5: number;
					static GL_LIGHT6: number;
					static GL_LIGHT7: number;
					static GL_LIGHTING: number;
					static GL_LINE_LOOP: number;
					static GL_LINE_SMOOTH: number;
					static GL_LINE_SMOOTH_HINT: number;
					static GL_LINE_STRIP: number;
					static GL_LINEAR: number;
					static GL_LINEAR_ATTENUATION: number;
					static GL_LINEAR_MIPMAP_LINEAR: number;
					static GL_LINEAR_MIPMAP_NEAREST: number;
					static GL_LINES: number;
					static GL_LUMINANCE: number;
					static GL_LUMINANCE_ALPHA: number;
					static GL_MAX_ELEMENTS_INDICES: number;
					static GL_MAX_ELEMENTS_VERTICES: number;
					static GL_MAX_LIGHTS: number;
					static GL_MAX_MODELVIEW_STACK_DEPTH: number;
					static GL_MAX_PROJECTION_STACK_DEPTH: number;
					static GL_MAX_TEXTURE_SIZE: number;
					static GL_MAX_TEXTURE_STACK_DEPTH: number;
					static GL_MAX_TEXTURE_UNITS: number;
					static GL_MAX_VIEWPORT_DIMS: number;
					static GL_MODELVIEW: number;
					static GL_MODULATE: number;
					static GL_MULTISAMPLE: number;
					static GL_NAND: number;
					static GL_NEAREST: number;
					static GL_NEAREST_MIPMAP_LINEAR: number;
					static GL_NEAREST_MIPMAP_NEAREST: number;
					static GL_NEVER: number;
					static GL_NICEST: number;
					static GL_NO_ERROR: number;
					static GL_NOOP: number;
					static GL_NOR: number;
					static GL_NORMAL_ARRAY: number;
					static GL_NORMALIZE: number;
					static GL_NOTEQUAL: number;
					static GL_NUM_COMPRESSED_TEXTURE_FORMATS: number;
					static GL_ONE: number;
					static GL_ONE_MINUS_DST_ALPHA: number;
					static GL_ONE_MINUS_DST_COLOR: number;
					static GL_ONE_MINUS_SRC_ALPHA: number;
					static GL_ONE_MINUS_SRC_COLOR: number;
					static GL_OR: number;
					static GL_OR_INVERTED: number;
					static GL_OR_REVERSE: number;
					static GL_OUT_OF_MEMORY: number;
					static GL_PACK_ALIGNMENT: number;
					static GL_PALETTE4_R5_G6_B5_OES: number;
					static GL_PALETTE4_RGB5_A1_OES: number;
					static GL_PALETTE4_RGB8_OES: number;
					static GL_PALETTE4_RGBA4_OES: number;
					static GL_PALETTE4_RGBA8_OES: number;
					static GL_PALETTE8_R5_G6_B5_OES: number;
					static GL_PALETTE8_RGB5_A1_OES: number;
					static GL_PALETTE8_RGB8_OES: number;
					static GL_PALETTE8_RGBA4_OES: number;
					static GL_PALETTE8_RGBA8_OES: number;
					static GL_PERSPECTIVE_CORRECTION_HINT: number;
					static GL_POINT_SMOOTH: number;
					static GL_POINT_SMOOTH_HINT: number;
					static GL_POINTS: number;
					static GL_POINT_FADE_THRESHOLD_SIZE: number;
					static GL_POINT_SIZE: number;
					static GL_POLYGON_OFFSET_FILL: number;
					static GL_POLYGON_SMOOTH_HINT: number;
					static GL_POSITION: number;
					static GL_PROJECTION: number;
					static GL_QUADRATIC_ATTENUATION: number;
					static GL_RED_BITS: number;
					static GL_RENDERER: number;
					static GL_REPEAT: number;
					static GL_REPLACE: number;
					static GL_RESCALE_NORMAL: number;
					static GL_RGB: number;
					static GL_RGBA: number;
					static GL_SAMPLE_ALPHA_TO_COVERAGE: number;
					static GL_SAMPLE_ALPHA_TO_ONE: number;
					static GL_SAMPLE_COVERAGE: number;
					static GL_SCISSOR_TEST: number;
					static GL_SET: number;
					static GL_SHININESS: number;
					static GL_SHORT: number;
					static GL_SMOOTH: number;
					static GL_SMOOTH_LINE_WIDTH_RANGE: number;
					static GL_SMOOTH_POINT_SIZE_RANGE: number;
					static GL_SPECULAR: number;
					static GL_SPOT_CUTOFF: number;
					static GL_SPOT_DIRECTION: number;
					static GL_SPOT_EXPONENT: number;
					static GL_SRC_ALPHA: number;
					static GL_SRC_ALPHA_SATURATE: number;
					static GL_SRC_COLOR: number;
					static GL_STACK_OVERFLOW: number;
					static GL_STACK_UNDERFLOW: number;
					static GL_STENCIL_BITS: number;
					static GL_STENCIL_BUFFER_BIT: number;
					static GL_STENCIL_TEST: number;
					static GL_SUBPIXEL_BITS: number;
					static GL_TEXTURE: number;
					static GL_TEXTURE_2D: number;
					static GL_TEXTURE_COORD_ARRAY: number;
					static GL_TEXTURE_ENV: number;
					static GL_TEXTURE_ENV_COLOR: number;
					static GL_TEXTURE_ENV_MODE: number;
					static GL_TEXTURE_MAG_FILTER: number;
					static GL_TEXTURE_MIN_FILTER: number;
					static GL_TEXTURE_WRAP_S: number;
					static GL_TEXTURE_WRAP_T: number;
					static GL_TEXTURE0: number;
					static GL_TEXTURE1: number;
					static GL_TEXTURE2: number;
					static GL_TEXTURE3: number;
					static GL_TEXTURE4: number;
					static GL_TEXTURE5: number;
					static GL_TEXTURE6: number;
					static GL_TEXTURE7: number;
					static GL_TEXTURE8: number;
					static GL_TEXTURE9: number;
					static GL_TEXTURE10: number;
					static GL_TEXTURE11: number;
					static GL_TEXTURE12: number;
					static GL_TEXTURE13: number;
					static GL_TEXTURE14: number;
					static GL_TEXTURE15: number;
					static GL_TEXTURE16: number;
					static GL_TEXTURE17: number;
					static GL_TEXTURE18: number;
					static GL_TEXTURE19: number;
					static GL_TEXTURE20: number;
					static GL_TEXTURE21: number;
					static GL_TEXTURE22: number;
					static GL_TEXTURE23: number;
					static GL_TEXTURE24: number;
					static GL_TEXTURE25: number;
					static GL_TEXTURE26: number;
					static GL_TEXTURE27: number;
					static GL_TEXTURE28: number;
					static GL_TEXTURE29: number;
					static GL_TEXTURE30: number;
					static GL_TEXTURE31: number;
					static GL_TRIANGLE_FAN: number;
					static GL_TRIANGLE_STRIP: number;
					static GL_TRIANGLES: number;
					static GL_TRUE: number;
					static GL_UNPACK_ALIGNMENT: number;
					static GL_UNSIGNED_BYTE: number;
					static GL_UNSIGNED_SHORT: number;
					static GL_UNSIGNED_SHORT_4_4_4_4: number;
					static GL_UNSIGNED_SHORT_5_5_5_1: number;
					static GL_UNSIGNED_SHORT_5_6_5: number;
					static GL_VENDOR: number;
					static GL_VERSION: number;
					static GL_VERTEX_ARRAY: number;
					static GL_XOR: number;
					static GL_ZERO: number;
					glCompressedTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glCompressedTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.nio.Buffer): void;
					glStencilFunc(arg1: number, arg2: number, arg3: number): void;
					glReadPixels(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: java.nio.Buffer): void;
					glTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glStencilOp(arg1: number, arg2: number, arg3: number): void;
					glHint(arg1: number, arg2: number): void;
					glLineWidth(arg1: native.Float): void;
					glScissor(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glPixelStorei(arg1: number, arg2: number): void;
					glStencilMask(arg1: number): void;
					glViewport(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glColor4f(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glAlphaFunc(arg1: number, arg2: native.Float): void;
					glClearColorx(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glAlphaFuncx(arg1: number, arg2: number): void;
					glClearDepthx(arg1: number): void;
					glLoadMatrixx(arg1: java.nio.IntBuffer): void;
					glLoadMatrixx(arg1: native.Array<number>, arg2: number): void;
					glLogicOp(arg1: number): void;
					glFrustumx(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
					glLightModelx(arg1: number, arg2: number): void;
					glDepthRangex(arg1: number, arg2: number): void;
					glFogfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glFogfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glMaterialfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glMaterialfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glLineWidthx(arg1: number): void;
					glMaterialxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glMaterialxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glMultMatrixf(arg1: java.nio.FloatBuffer): void;
					glMultMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
					glMultMatrixx(arg1: java.nio.IntBuffer): void;
					glMultMatrixx(arg1: native.Array<number>, arg2: number): void;
					glFrustumf(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
					glLightx(arg1: number, arg2: number, arg3: number): void;
					glLightModelf(arg1: number, arg2: native.Float): void;
					glMaterialx(arg1: number, arg2: number, arg3: number): void;
					glNormal3f(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glFogf(arg1: number, arg2: native.Float): void;
					glNormal3x(arg1: number, arg2: number, arg3: number): void;
					glOrthof(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
					glOrthox(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
					glMaterialf(arg1: number, arg2: number, arg3: native.Float): void;
					glFogxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glFogxv(arg1: number, arg2: java.nio.IntBuffer): void;
					glLightfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glLightfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glPointSize(arg1: native.Float): void;
					glPointSizex(arg1: number): void;
					glPopMatrix(): void;
					glMatrixMode(arg1: number): void;
					glFogx(arg1: number, arg2: number): void;
					glColor4x(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glLightf(arg1: number, arg2: number, arg3: native.Float): void;
					glLightxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glLightxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glLoadMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
					glLoadMatrixf(arg1: java.nio.FloatBuffer): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexEnvf(arg1: number, arg2: number, arg3: native.Float): void;
					glTranslatef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glScalex(arg1: number, arg2: number, arg3: number): void;
					glShadeModel(arg1: number): void;
					glRotatex(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTranslatex(arg1: number, arg2: number, arg3: number): void;
					glRotatef(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glPushMatrix(): void;
					glTexEnvx(arg1: number, arg2: number, arg3: number): void;
					glScalef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glColorMask(arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean): void;
					glBlendFunc(arg1: number, arg2: number): void;
					glEnable(arg1: number): void;
					glBindTexture(arg1: number, arg2: number): void;
					glClearColor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glClearDepthf(arg1: native.Float): void;
					glDepthMask(arg1: boolean): void;
					glCullFace(arg1: number): void;
					glDepthFunc(arg1: number): void;
					glFrontFace(arg1: number): void;
					glGenTextures(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glClear(arg1: number): void;
					glDepthRangef(arg1: native.Float, arg2: native.Float): void;
					glFinish(): void;
					glGetError(): number;
					glGetIntegerv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetIntegerv(arg1: number, arg2: java.nio.IntBuffer): void;
					glDisable(arg1: number): void;
					glGetString(arg1: number): string;
					glFlush(): void;
					glDrawArrays(arg1: number, arg2: number, arg3: number): void;
					glTexParameterx(arg1: number, arg2: number, arg3: number): void;
					glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glLoadIdentity(): void;
					glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glSampleCoveragex(arg1: number, arg2: boolean): void;
					glMultiTexCoord4x(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glMultiTexCoord4f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
					glPolygonOffsetx(arg1: number, arg2: number): void;
					glNormalPointer(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
					glDrawElements(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glActiveTexture(arg1: number): void;
					glClearStencil(arg1: number): void;
					glCopyTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glCopyTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glDeleteTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glDeleteTextures(arg1: number, arg2: java.nio.IntBuffer): void;
					glTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glSampleCoverage(arg1: native.Float, arg2: boolean): void;
					glPolygonOffset(arg1: native.Float, arg2: native.Float): void;
					glTexParameterf(arg1: number, arg2: number, arg3: native.Float): void;
					glClientActiveTexture(arg1: number): void;
					glColorPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glDisableClientState(arg1: number): void;
					glEnableClientState(arg1: number): void;
					glLightModelfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glLightModelfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glLightModelxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glLightModelxv(arg1: number, arg2: java.nio.IntBuffer): void;
				}
				export class GL implements javax.microedition.khronos.opengles.IGL {
					constructor(implementation: javax.microedition.khronos.opengles.IGL);
				}
				export class GL10Ext implements javax.microedition.khronos.opengles.IGL, javax.microedition.khronos.opengles.IGL10Ext {
					constructor(implementation: javax.microedition.khronos.opengles.IGL10Ext);
					glQueryMatrixxOES(arg1: native.Array<number>, arg2: number, arg3: native.Array<number>, arg4: number): number;
					glQueryMatrixxOES(arg1: java.nio.IntBuffer, arg2: java.nio.IntBuffer): number;
				}
				export class GL11 implements javax.microedition.khronos.opengles.IGL10, javax.microedition.khronos.opengles.IGL11 {
					constructor(implementation: javax.microedition.khronos.opengles.IGL11);
					static GL_ACTIVE_TEXTURE: number;
					static GL_ADD_SIGNED: number;
					static GL_ALPHA_SCALE: number;
					static GL_ALPHA_TEST_FUNC: number;
					static GL_ALPHA_TEST_REF: number;
					static GL_ARRAY_BUFFER: number;
					static GL_ARRAY_BUFFER_BINDING: number;
					static GL_BLEND_DST: number;
					static GL_BLEND_SRC: number;
					static GL_BUFFER_ACCESS: number;
					static GL_BUFFER_SIZE: number;
					static GL_BUFFER_USAGE: number;
					static GL_CLIENT_ACTIVE_TEXTURE: number;
					static GL_CLIP_PLANE0: number;
					static GL_CLIP_PLANE1: number;
					static GL_CLIP_PLANE2: number;
					static GL_CLIP_PLANE3: number;
					static GL_CLIP_PLANE4: number;
					static GL_CLIP_PLANE5: number;
					static GL_COLOR_ARRAY_BUFFER_BINDING: number;
					static GL_COLOR_ARRAY_POINTER: number;
					static GL_COLOR_ARRAY_SIZE: number;
					static GL_COLOR_ARRAY_STRIDE: number;
					static GL_COLOR_ARRAY_TYPE: number;
					static GL_COLOR_CLEAR_VALUE: number;
					static GL_COLOR_WRITEMASK: number;
					static GL_COMBINE: number;
					static GL_COMBINE_ALPHA: number;
					static GL_COMBINE_RGB: number;
					static GL_CONSTANT: number;
					static GL_COORD_REPLACE_OES: number;
					static GL_CULL_FACE_MODE: number;
					static GL_CURRENT_COLOR: number;
					static GL_CURRENT_NORMAL: number;
					static GL_CURRENT_TEXTURE_COORDS: number;
					static GL_DEPTH_CLEAR_VALUE: number;
					static GL_DEPTH_FUNC: number;
					static GL_DEPTH_RANGE: number;
					static GL_DEPTH_WRITEMASK: number;
					static GL_DOT3_RGB: number;
					static GL_DOT3_RGBA: number;
					static GL_DYNAMIC_DRAW: number;
					static GL_ELEMENT_ARRAY_BUFFER: number;
					static GL_ELEMENT_ARRAY_BUFFER_BINDING: number;
					static GL_FRONT_FACE: number;
					static GL_GENERATE_MIPMAP: number;
					static GL_GENERATE_MIPMAP_HINT: number;
					static GL_INTERPOLATE: number;
					static GL_LINE_WIDTH: number;
					static GL_LOGIC_OP_MODE: number;
					static GL_MATRIX_MODE: number;
					static GL_MAX_CLIP_PLANES: number;
					static GL_MODELVIEW_MATRIX: number;
					static GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES: number;
					static GL_MODELVIEW_STACK_DEPTH: number;
					static GL_NORMAL_ARRAY_BUFFER_BINDING: number;
					static GL_NORMAL_ARRAY_POINTER: number;
					static GL_NORMAL_ARRAY_STRIDE: number;
					static GL_NORMAL_ARRAY_TYPE: number;
					static GL_OPERAND0_ALPHA: number;
					static GL_OPERAND0_RGB: number;
					static GL_OPERAND1_ALPHA: number;
					static GL_OPERAND1_RGB: number;
					static GL_OPERAND2_ALPHA: number;
					static GL_OPERAND2_RGB: number;
					static GL_POINT_DISTANCE_ATTENUATION: number;
					static GL_POINT_FADE_THRESHOLD_SIZE: number;
					static GL_POINT_SIZE: number;
					static GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES: number;
					static GL_POINT_SIZE_ARRAY_OES: number;
					static GL_POINT_SIZE_ARRAY_POINTER_OES: number;
					static GL_POINT_SIZE_ARRAY_STRIDE_OES: number;
					static GL_POINT_SIZE_ARRAY_TYPE_OES: number;
					static GL_POINT_SIZE_MAX: number;
					static GL_POINT_SIZE_MIN: number;
					static GL_POINT_SPRITE_OES: number;
					static GL_POLYGON_OFFSET_FACTOR: number;
					static GL_POLYGON_OFFSET_UNITS: number;
					static GL_PREVIOUS: number;
					static GL_PRIMARY_COLOR: number;
					static GL_PROJECTION_MATRIX: number;
					static GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES: number;
					static GL_PROJECTION_STACK_DEPTH: number;
					static GL_RGB_SCALE: number;
					static GL_SAMPLE_BUFFERS: number;
					static GL_SAMPLE_COVERAGE_INVERT: number;
					static GL_SAMPLE_COVERAGE_VALUE: number;
					static GL_SAMPLES: number;
					static GL_SCISSOR_BOX: number;
					static GL_SHADE_MODEL: number;
					static GL_SRC0_ALPHA: number;
					static GL_SRC0_RGB: number;
					static GL_SRC1_ALPHA: number;
					static GL_SRC1_RGB: number;
					static GL_SRC2_ALPHA: number;
					static GL_SRC2_RGB: number;
					static GL_STATIC_DRAW: number;
					static GL_STENCIL_CLEAR_VALUE: number;
					static GL_STENCIL_FAIL: number;
					static GL_STENCIL_FUNC: number;
					static GL_STENCIL_PASS_DEPTH_FAIL: number;
					static GL_STENCIL_PASS_DEPTH_PASS: number;
					static GL_STENCIL_REF: number;
					static GL_STENCIL_VALUE_MASK: number;
					static GL_STENCIL_WRITEMASK: number;
					static GL_SUBTRACT: number;
					static GL_TEXTURE_BINDING_2D: number;
					static GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING: number;
					static GL_TEXTURE_COORD_ARRAY_POINTER: number;
					static GL_TEXTURE_COORD_ARRAY_SIZE: number;
					static GL_TEXTURE_COORD_ARRAY_STRIDE: number;
					static GL_TEXTURE_COORD_ARRAY_TYPE: number;
					static GL_TEXTURE_MATRIX: number;
					static GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES: number;
					static GL_TEXTURE_STACK_DEPTH: number;
					static GL_VERTEX_ARRAY_BUFFER_BINDING: number;
					static GL_VERTEX_ARRAY_POINTER: number;
					static GL_VERTEX_ARRAY_SIZE: number;
					static GL_VERTEX_ARRAY_STRIDE: number;
					static GL_VERTEX_ARRAY_TYPE: number;
					static GL_VIEWPORT: number;
					static GL_WRITE_ONLY: number;
					glGetBufferParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetBufferParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glIsEnabled(arg1: number): boolean;
					glIsTexture(arg1: number): boolean;
					glIsBuffer(arg1: number): boolean;
					glGetFixedv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetFixedv(arg1: number, arg2: java.nio.IntBuffer): void;
					glGetTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetLightxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetLightxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glColor4ub(arg1: native.Byte, arg2: native.Byte, arg3: native.Byte, arg4: native.Byte): void;
					glClipPlanef(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glClipPlanef(arg1: number, arg2: java.nio.FloatBuffer): void;
					glTexEnviv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexEnviv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexEnvi(arg1: number, arg2: number, arg3: number): void;
					glGetLightfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glGetLightfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glClipPlanex(arg1: number, arg2: java.nio.IntBuffer): void;
					glClipPlanex(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetTexEnviv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexEnviv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glBindBuffer(arg1: number, arg2: number): void;
					glGetBooleanv(arg1: number, arg2: native.Array<boolean>, arg3: number): void;
					glGetBooleanv(arg1: number, arg2: java.nio.IntBuffer): void;
					glBufferData(arg1: number, arg2: number, arg3: java.nio.Buffer, arg4: number): void;
					glGenBuffers(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenBuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetFloatv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glGetFloatv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glNormalPointer(arg1: number, arg2: number, arg3: number): void;
					glGetClipPlanef(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glGetClipPlanef(arg1: number, arg2: java.nio.FloatBuffer): void;
					glGetClipPlanex(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetClipPlanex(arg1: number, arg2: java.nio.IntBuffer): void;
					glGetMaterialfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glGetMaterialfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glGetMaterialxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetMaterialxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetTexParameterxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetTexParameterxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glPointParameterf(arg1: number, arg2: native.Float): void;
					glPointParameterfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glPointParameterfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glPointParameterx(arg1: number, arg2: number): void;
					glTexParameterxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexParameterxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glPointParameterxv(arg1: number, arg2: java.nio.IntBuffer): void;
					glPointParameterxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glPointSizePointerOES(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
					glDrawElements(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glBufferSubData(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glDeleteBuffers(arg1: number, arg2: java.nio.IntBuffer): void;
					glDeleteBuffers(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexParameterfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexParameteri(arg1: number, arg2: number, arg3: number): void;
					glTexParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexParameterfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glGetTexParameterfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glGetTexParameteriv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetTexParameteriv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glColorPointer(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glGetPointerv(arg1: number, arg2: native.Array<java.nio.Buffer>): void;
					glCompressedTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glCompressedTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.nio.Buffer): void;
					glStencilFunc(arg1: number, arg2: number, arg3: number): void;
					glReadPixels(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: java.nio.Buffer): void;
					glTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glStencilOp(arg1: number, arg2: number, arg3: number): void;
					glHint(arg1: number, arg2: number): void;
					glLineWidth(arg1: native.Float): void;
					glScissor(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glPixelStorei(arg1: number, arg2: number): void;
					glStencilMask(arg1: number): void;
					glViewport(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glColor4f(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glAlphaFunc(arg1: number, arg2: native.Float): void;
					glClearColorx(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glAlphaFuncx(arg1: number, arg2: number): void;
					glClearDepthx(arg1: number): void;
					glLoadMatrixx(arg1: java.nio.IntBuffer): void;
					glLoadMatrixx(arg1: native.Array<number>, arg2: number): void;
					glLogicOp(arg1: number): void;
					glFrustumx(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
					glLightModelx(arg1: number, arg2: number): void;
					glDepthRangex(arg1: number, arg2: number): void;
					glFogfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glFogfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glMaterialfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glMaterialfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glLineWidthx(arg1: number): void;
					glMaterialxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glMaterialxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glMultMatrixf(arg1: java.nio.FloatBuffer): void;
					glMultMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
					glMultMatrixx(arg1: java.nio.IntBuffer): void;
					glMultMatrixx(arg1: native.Array<number>, arg2: number): void;
					glFrustumf(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
					glLightx(arg1: number, arg2: number, arg3: number): void;
					glLightModelf(arg1: number, arg2: native.Float): void;
					glMaterialx(arg1: number, arg2: number, arg3: number): void;
					glNormal3f(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glFogf(arg1: number, arg2: native.Float): void;
					glNormal3x(arg1: number, arg2: number, arg3: number): void;
					glOrthof(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
					glOrthox(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
					glMaterialf(arg1: number, arg2: number, arg3: native.Float): void;
					glFogxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glFogxv(arg1: number, arg2: java.nio.IntBuffer): void;
					glLightfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glLightfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glPointSize(arg1: native.Float): void;
					glPointSizex(arg1: number): void;
					glPopMatrix(): void;
					glMatrixMode(arg1: number): void;
					glFogx(arg1: number, arg2: number): void;
					glColor4x(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glLightf(arg1: number, arg2: number, arg3: native.Float): void;
					glLightxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glLightxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glLoadMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
					glLoadMatrixf(arg1: java.nio.FloatBuffer): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexEnvf(arg1: number, arg2: number, arg3: native.Float): void;
					glTranslatef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glScalex(arg1: number, arg2: number, arg3: number): void;
					glShadeModel(arg1: number): void;
					glRotatex(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTranslatex(arg1: number, arg2: number, arg3: number): void;
					glRotatef(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glPushMatrix(): void;
					glTexEnvx(arg1: number, arg2: number, arg3: number): void;
					glScalef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glColorMask(arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean): void;
					glBlendFunc(arg1: number, arg2: number): void;
					glEnable(arg1: number): void;
					glBindTexture(arg1: number, arg2: number): void;
					glClearColor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glClearDepthf(arg1: native.Float): void;
					glDepthMask(arg1: boolean): void;
					glCullFace(arg1: number): void;
					glDepthFunc(arg1: number): void;
					glFrontFace(arg1: number): void;
					glGenTextures(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glClear(arg1: number): void;
					glDepthRangef(arg1: native.Float, arg2: native.Float): void;
					glFinish(): void;
					glGetError(): number;
					glGetIntegerv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetIntegerv(arg1: number, arg2: java.nio.IntBuffer): void;
					glDisable(arg1: number): void;
					glGetString(arg1: number): string;
					glFlush(): void;
					glDrawArrays(arg1: number, arg2: number, arg3: number): void;
					glTexParameterx(arg1: number, arg2: number, arg3: number): void;
					glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glLoadIdentity(): void;
					glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glSampleCoveragex(arg1: number, arg2: boolean): void;
					glMultiTexCoord4x(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glMultiTexCoord4f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
					glPolygonOffsetx(arg1: number, arg2: number): void;
					glNormalPointer(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
					glDrawElements(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glActiveTexture(arg1: number): void;
					glClearStencil(arg1: number): void;
					glCopyTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glCopyTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glDeleteTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glDeleteTextures(arg1: number, arg2: java.nio.IntBuffer): void;
					glTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glSampleCoverage(arg1: native.Float, arg2: boolean): void;
					glPolygonOffset(arg1: native.Float, arg2: native.Float): void;
					glTexParameterf(arg1: number, arg2: number, arg3: native.Float): void;
					glClientActiveTexture(arg1: number): void;
					glColorPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glDisableClientState(arg1: number): void;
					glEnableClientState(arg1: number): void;
					glLightModelfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glLightModelfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glLightModelxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glLightModelxv(arg1: number, arg2: java.nio.IntBuffer): void;
				}
				export interface IGL10 extends javax.microedition.khronos.opengles.IGL {
					glCompressedTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glCompressedTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.nio.Buffer): void;
					glStencilFunc(arg1: number, arg2: number, arg3: number): void;
					glReadPixels(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: java.nio.Buffer): void;
					glTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glStencilOp(arg1: number, arg2: number, arg3: number): void;
					glHint(arg1: number, arg2: number): void;
					glLineWidth(arg1: native.Float): void;
					glScissor(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glPixelStorei(arg1: number, arg2: number): void;
					glStencilMask(arg1: number): void;
					glViewport(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glColor4f(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glAlphaFunc(arg1: number, arg2: native.Float): void;
					glClearColorx(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glAlphaFuncx(arg1: number, arg2: number): void;
					glClearDepthx(arg1: number): void;
					glLoadMatrixx(arg1: java.nio.IntBuffer): void;
					glLoadMatrixx(arg1: native.Array<number>, arg2: number): void;
					glLogicOp(arg1: number): void;
					glFrustumx(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
					glLightModelx(arg1: number, arg2: number): void;
					glDepthRangex(arg1: number, arg2: number): void;
					glFogfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glFogfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glMaterialfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glMaterialfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glLineWidthx(arg1: number): void;
					glMaterialxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glMaterialxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glMultMatrixf(arg1: java.nio.FloatBuffer): void;
					glMultMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
					glMultMatrixx(arg1: java.nio.IntBuffer): void;
					glMultMatrixx(arg1: native.Array<number>, arg2: number): void;
					glFrustumf(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
					glLightx(arg1: number, arg2: number, arg3: number): void;
					glLightModelf(arg1: number, arg2: native.Float): void;
					glMaterialx(arg1: number, arg2: number, arg3: number): void;
					glNormal3f(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glFogf(arg1: number, arg2: native.Float): void;
					glNormal3x(arg1: number, arg2: number, arg3: number): void;
					glOrthof(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float, arg6: native.Float): void;
					glOrthox(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
					glMaterialf(arg1: number, arg2: number, arg3: native.Float): void;
					glFogxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glFogxv(arg1: number, arg2: java.nio.IntBuffer): void;
					glLightfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glLightfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glPointSize(arg1: native.Float): void;
					glPointSizex(arg1: number): void;
					glPopMatrix(): void;
					glMatrixMode(arg1: number): void;
					glFogx(arg1: number, arg2: number): void;
					glColor4x(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glLightf(arg1: number, arg2: number, arg3: native.Float): void;
					glLightxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glLightxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glLoadMatrixf(arg1: native.Array<native.Float>, arg2: number): void;
					glLoadMatrixf(arg1: java.nio.FloatBuffer): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexEnvf(arg1: number, arg2: number, arg3: native.Float): void;
					glTranslatef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glScalex(arg1: number, arg2: number, arg3: number): void;
					glShadeModel(arg1: number): void;
					glRotatex(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTranslatex(arg1: number, arg2: number, arg3: number): void;
					glRotatef(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glPushMatrix(): void;
					glTexEnvx(arg1: number, arg2: number, arg3: number): void;
					glScalef(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
					glColorMask(arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean): void;
					glBlendFunc(arg1: number, arg2: number): void;
					glEnable(arg1: number): void;
					glBindTexture(arg1: number, arg2: number): void;
					glClearColor(arg1: native.Float, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
					glClearDepthf(arg1: native.Float): void;
					glDepthMask(arg1: boolean): void;
					glCullFace(arg1: number): void;
					glDepthFunc(arg1: number): void;
					glFrontFace(arg1: number): void;
					glGenTextures(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glClear(arg1: number): void;
					glDepthRangef(arg1: native.Float, arg2: native.Float): void;
					glFinish(): void;
					glGetError(): number;
					glGetIntegerv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGetIntegerv(arg1: number, arg2: java.nio.IntBuffer): void;
					glDisable(arg1: number): void;
					glGetString(arg1: number): string;
					glFlush(): void;
					glDrawArrays(arg1: number, arg2: number, arg3: number): void;
					glTexParameterx(arg1: number, arg2: number, arg3: number): void;
					glVertexPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glLoadIdentity(): void;
					glTexCoordPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glSampleCoveragex(arg1: number, arg2: boolean): void;
					glMultiTexCoord4x(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glMultiTexCoord4f(arg1: number, arg2: native.Float, arg3: native.Float, arg4: native.Float, arg5: native.Float): void;
					glPolygonOffsetx(arg1: number, arg2: number): void;
					glNormalPointer(arg1: number, arg2: number, arg3: java.nio.Buffer): void;
					glDrawElements(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glActiveTexture(arg1: number): void;
					glClearStencil(arg1: number): void;
					glCopyTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glCopyTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glDeleteTextures(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glDeleteTextures(arg1: number, arg2: java.nio.IntBuffer): void;
					glTexSubImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: java.nio.Buffer): void;
					glSampleCoverage(arg1: native.Float, arg2: boolean): void;
					glPolygonOffset(arg1: native.Float, arg2: native.Float): void;
					glTexParameterf(arg1: number, arg2: number, arg3: native.Float): void;
					glClientActiveTexture(arg1: number): void;
					glColorPointer(arg1: number, arg2: number, arg3: number, arg4: java.nio.Buffer): void;
					glDisableClientState(arg1: number): void;
					glEnableClientState(arg1: number): void;
					glLightModelfv(arg1: number, arg2: java.nio.FloatBuffer): void;
					glLightModelfv(arg1: number, arg2: native.Array<native.Float>, arg3: number): void;
					glLightModelxv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glLightModelxv(arg1: number, arg2: java.nio.IntBuffer): void;
				}
				export module IGL10 {
					var GL_ADD: number;
					var GL_ALIASED_LINE_WIDTH_RANGE: number;
					var GL_ALIASED_POINT_SIZE_RANGE: number;
					var GL_ALPHA: number;
					var GL_ALPHA_BITS: number;
					var GL_ALPHA_TEST: number;
					var GL_ALWAYS: number;
					var GL_AMBIENT: number;
					var GL_AMBIENT_AND_DIFFUSE: number;
					var GL_AND: number;
					var GL_AND_INVERTED: number;
					var GL_AND_REVERSE: number;
					var GL_BACK: number;
					var GL_BLEND: number;
					var GL_BLUE_BITS: number;
					var GL_BYTE: number;
					var GL_CCW: number;
					var GL_CLAMP_TO_EDGE: number;
					var GL_CLEAR: number;
					var GL_COLOR_ARRAY: number;
					var GL_COLOR_BUFFER_BIT: number;
					var GL_COLOR_LOGIC_OP: number;
					var GL_COLOR_MATERIAL: number;
					var GL_COMPRESSED_TEXTURE_FORMATS: number;
					var GL_CONSTANT_ATTENUATION: number;
					var GL_COPY: number;
					var GL_COPY_INVERTED: number;
					var GL_CULL_FACE: number;
					var GL_CW: number;
					var GL_DECAL: number;
					var GL_DECR: number;
					var GL_DEPTH_BITS: number;
					var GL_DEPTH_BUFFER_BIT: number;
					var GL_DEPTH_TEST: number;
					var GL_DIFFUSE: number;
					var GL_DITHER: number;
					var GL_DONT_CARE: number;
					var GL_DST_ALPHA: number;
					var GL_DST_COLOR: number;
					var GL_EMISSION: number;
					var GL_EQUAL: number;
					var GL_EQUIV: number;
					var GL_EXP: number;
					var GL_EXP2: number;
					var GL_EXTENSIONS: number;
					var GL_FALSE: number;
					var GL_FASTEST: number;
					var GL_FIXED: number;
					var GL_FLAT: number;
					var GL_FLOAT: number;
					var GL_FOG: number;
					var GL_FOG_COLOR: number;
					var GL_FOG_DENSITY: number;
					var GL_FOG_END: number;
					var GL_FOG_HINT: number;
					var GL_FOG_MODE: number;
					var GL_FOG_START: number;
					var GL_FRONT: number;
					var GL_FRONT_AND_BACK: number;
					var GL_GEQUAL: number;
					var GL_GREATER: number;
					var GL_GREEN_BITS: number;
					var GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES: number;
					var GL_IMPLEMENTATION_COLOR_READ_TYPE_OES: number;
					var GL_INCR: number;
					var GL_INVALID_ENUM: number;
					var GL_INVALID_OPERATION: number;
					var GL_INVALID_VALUE: number;
					var GL_INVERT: number;
					var GL_KEEP: number;
					var GL_LEQUAL: number;
					var GL_LESS: number;
					var GL_LIGHT_MODEL_AMBIENT: number;
					var GL_LIGHT_MODEL_TWO_SIDE: number;
					var GL_LIGHT0: number;
					var GL_LIGHT1: number;
					var GL_LIGHT2: number;
					var GL_LIGHT3: number;
					var GL_LIGHT4: number;
					var GL_LIGHT5: number;
					var GL_LIGHT6: number;
					var GL_LIGHT7: number;
					var GL_LIGHTING: number;
					var GL_LINE_LOOP: number;
					var GL_LINE_SMOOTH: number;
					var GL_LINE_SMOOTH_HINT: number;
					var GL_LINE_STRIP: number;
					var GL_LINEAR: number;
					var GL_LINEAR_ATTENUATION: number;
					var GL_LINEAR_MIPMAP_LINEAR: number;
					var GL_LINEAR_MIPMAP_NEAREST: number;
					var GL_LINES: number;
					var GL_LUMINANCE: number;
					var GL_LUMINANCE_ALPHA: number;
					var GL_MAX_ELEMENTS_INDICES: number;
					var GL_MAX_ELEMENTS_VERTICES: number;
					var GL_MAX_LIGHTS: number;
					var GL_MAX_MODELVIEW_STACK_DEPTH: number;
					var GL_MAX_PROJECTION_STACK_DEPTH: number;
					var GL_MAX_TEXTURE_SIZE: number;
					var GL_MAX_TEXTURE_STACK_DEPTH: number;
					var GL_MAX_TEXTURE_UNITS: number;
					var GL_MAX_VIEWPORT_DIMS: number;
					var GL_MODELVIEW: number;
					var GL_MODULATE: number;
					var GL_MULTISAMPLE: number;
					var GL_NAND: number;
					var GL_NEAREST: number;
					var GL_NEAREST_MIPMAP_LINEAR: number;
					var GL_NEAREST_MIPMAP_NEAREST: number;
					var GL_NEVER: number;
					var GL_NICEST: number;
					var GL_NO_ERROR: number;
					var GL_NOOP: number;
					var GL_NOR: number;
					var GL_NORMAL_ARRAY: number;
					var GL_NORMALIZE: number;
					var GL_NOTEQUAL: number;
					var GL_NUM_COMPRESSED_TEXTURE_FORMATS: number;
					var GL_ONE: number;
					var GL_ONE_MINUS_DST_ALPHA: number;
					var GL_ONE_MINUS_DST_COLOR: number;
					var GL_ONE_MINUS_SRC_ALPHA: number;
					var GL_ONE_MINUS_SRC_COLOR: number;
					var GL_OR: number;
					var GL_OR_INVERTED: number;
					var GL_OR_REVERSE: number;
					var GL_OUT_OF_MEMORY: number;
					var GL_PACK_ALIGNMENT: number;
					var GL_PALETTE4_R5_G6_B5_OES: number;
					var GL_PALETTE4_RGB5_A1_OES: number;
					var GL_PALETTE4_RGB8_OES: number;
					var GL_PALETTE4_RGBA4_OES: number;
					var GL_PALETTE4_RGBA8_OES: number;
					var GL_PALETTE8_R5_G6_B5_OES: number;
					var GL_PALETTE8_RGB5_A1_OES: number;
					var GL_PALETTE8_RGB8_OES: number;
					var GL_PALETTE8_RGBA4_OES: number;
					var GL_PALETTE8_RGBA8_OES: number;
					var GL_PERSPECTIVE_CORRECTION_HINT: number;
					var GL_POINT_SMOOTH: number;
					var GL_POINT_SMOOTH_HINT: number;
					var GL_POINTS: number;
					var GL_POINT_FADE_THRESHOLD_SIZE: number;
					var GL_POINT_SIZE: number;
					var GL_POLYGON_OFFSET_FILL: number;
					var GL_POLYGON_SMOOTH_HINT: number;
					var GL_POSITION: number;
					var GL_PROJECTION: number;
					var GL_QUADRATIC_ATTENUATION: number;
					var GL_RED_BITS: number;
					var GL_RENDERER: number;
					var GL_REPEAT: number;
					var GL_REPLACE: number;
					var GL_RESCALE_NORMAL: number;
					var GL_RGB: number;
					var GL_RGBA: number;
					var GL_SAMPLE_ALPHA_TO_COVERAGE: number;
					var GL_SAMPLE_ALPHA_TO_ONE: number;
					var GL_SAMPLE_COVERAGE: number;
					var GL_SCISSOR_TEST: number;
					var GL_SET: number;
					var GL_SHININESS: number;
					var GL_SHORT: number;
					var GL_SMOOTH: number;
					var GL_SMOOTH_LINE_WIDTH_RANGE: number;
					var GL_SMOOTH_POINT_SIZE_RANGE: number;
					var GL_SPECULAR: number;
					var GL_SPOT_CUTOFF: number;
					var GL_SPOT_DIRECTION: number;
					var GL_SPOT_EXPONENT: number;
					var GL_SRC_ALPHA: number;
					var GL_SRC_ALPHA_SATURATE: number;
					var GL_SRC_COLOR: number;
					var GL_STACK_OVERFLOW: number;
					var GL_STACK_UNDERFLOW: number;
					var GL_STENCIL_BITS: number;
					var GL_STENCIL_BUFFER_BIT: number;
					var GL_STENCIL_TEST: number;
					var GL_SUBPIXEL_BITS: number;
					var GL_TEXTURE: number;
					var GL_TEXTURE_2D: number;
					var GL_TEXTURE_COORD_ARRAY: number;
					var GL_TEXTURE_ENV: number;
					var GL_TEXTURE_ENV_COLOR: number;
					var GL_TEXTURE_ENV_MODE: number;
					var GL_TEXTURE_MAG_FILTER: number;
					var GL_TEXTURE_MIN_FILTER: number;
					var GL_TEXTURE_WRAP_S: number;
					var GL_TEXTURE_WRAP_T: number;
					var GL_TEXTURE0: number;
					var GL_TEXTURE1: number;
					var GL_TEXTURE2: number;
					var GL_TEXTURE3: number;
					var GL_TEXTURE4: number;
					var GL_TEXTURE5: number;
					var GL_TEXTURE6: number;
					var GL_TEXTURE7: number;
					var GL_TEXTURE8: number;
					var GL_TEXTURE9: number;
					var GL_TEXTURE10: number;
					var GL_TEXTURE11: number;
					var GL_TEXTURE12: number;
					var GL_TEXTURE13: number;
					var GL_TEXTURE14: number;
					var GL_TEXTURE15: number;
					var GL_TEXTURE16: number;
					var GL_TEXTURE17: number;
					var GL_TEXTURE18: number;
					var GL_TEXTURE19: number;
					var GL_TEXTURE20: number;
					var GL_TEXTURE21: number;
					var GL_TEXTURE22: number;
					var GL_TEXTURE23: number;
					var GL_TEXTURE24: number;
					var GL_TEXTURE25: number;
					var GL_TEXTURE26: number;
					var GL_TEXTURE27: number;
					var GL_TEXTURE28: number;
					var GL_TEXTURE29: number;
					var GL_TEXTURE30: number;
					var GL_TEXTURE31: number;
					var GL_TRIANGLE_FAN: number;
					var GL_TRIANGLE_STRIP: number;
					var GL_TRIANGLES: number;
					var GL_TRUE: number;
					var GL_UNPACK_ALIGNMENT: number;
					var GL_UNSIGNED_BYTE: number;
					var GL_UNSIGNED_SHORT: number;
					var GL_UNSIGNED_SHORT_4_4_4_4: number;
					var GL_UNSIGNED_SHORT_5_5_5_1: number;
					var GL_UNSIGNED_SHORT_5_6_5: number;
					var GL_VENDOR: number;
					var GL_VERSION: number;
					var GL_VERTEX_ARRAY: number;
					var GL_XOR: number;
					var GL_ZERO: number;
				}
				export class GL11ExtensionPack implements javax.microedition.khronos.opengles.IGL, javax.microedition.khronos.opengles.IGL11ExtensionPack {
					constructor(implementation: javax.microedition.khronos.opengles.IGL11ExtensionPack);
					static GL_BLEND_DST_ALPHA: number;
					static GL_BLEND_DST_RGB: number;
					static GL_BLEND_EQUATION: number;
					static GL_BLEND_EQUATION_ALPHA: number;
					static GL_BLEND_EQUATION_RGB: number;
					static GL_BLEND_SRC_ALPHA: number;
					static GL_BLEND_SRC_RGB: number;
					static GL_COLOR_ATTACHMENT0_OES: number;
					static GL_COLOR_ATTACHMENT1_OES: number;
					static GL_COLOR_ATTACHMENT2_OES: number;
					static GL_COLOR_ATTACHMENT3_OES: number;
					static GL_COLOR_ATTACHMENT4_OES: number;
					static GL_COLOR_ATTACHMENT5_OES: number;
					static GL_COLOR_ATTACHMENT6_OES: number;
					static GL_COLOR_ATTACHMENT7_OES: number;
					static GL_COLOR_ATTACHMENT8_OES: number;
					static GL_COLOR_ATTACHMENT9_OES: number;
					static GL_COLOR_ATTACHMENT10_OES: number;
					static GL_COLOR_ATTACHMENT11_OES: number;
					static GL_COLOR_ATTACHMENT12_OES: number;
					static GL_COLOR_ATTACHMENT13_OES: number;
					static GL_COLOR_ATTACHMENT14_OES: number;
					static GL_COLOR_ATTACHMENT15_OES: number;
					static GL_DECR_WRAP: number;
					static GL_DEPTH_ATTACHMENT_OES: number;
					static GL_DEPTH_COMPONENT: number;
					static GL_DEPTH_COMPONENT16: number;
					static GL_DEPTH_COMPONENT24: number;
					static GL_DEPTH_COMPONENT32: number;
					static GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES: number;
					static GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES: number;
					static GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES: number;
					static GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES: number;
					static GL_FRAMEBUFFER_BINDING_OES: number;
					static GL_FRAMEBUFFER_COMPLETE_OES: number;
					static GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES: number;
					static GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES: number;
					static GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES: number;
					static GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES: number;
					static GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES: number;
					static GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES: number;
					static GL_FRAMEBUFFER_OES: number;
					static GL_FRAMEBUFFER_UNSUPPORTED_OES: number;
					static GL_FUNC_ADD: number;
					static GL_FUNC_REVERSE_SUBTRACT: number;
					static GL_FUNC_SUBTRACT: number;
					static GL_INCR_WRAP: number;
					static GL_INVALID_FRAMEBUFFER_OPERATION_OES: number;
					static GL_MAX_COLOR_ATTACHMENTS_OES: number;
					static GL_MAX_CUBE_MAP_TEXTURE_SIZE: number;
					static GL_MAX_RENDERBUFFER_SIZE_OES: number;
					static GL_MIRRORED_REPEAT: number;
					static GL_NORMAL_MAP: number;
					static GL_REFLECTION_MAP: number;
					static GL_RENDERBUFFER_ALPHA_SIZE_OES: number;
					static GL_RENDERBUFFER_BINDING_OES: number;
					static GL_RENDERBUFFER_BLUE_SIZE_OES: number;
					static GL_RENDERBUFFER_DEPTH_SIZE_OES: number;
					static GL_RENDERBUFFER_GREEN_SIZE_OES: number;
					static GL_RENDERBUFFER_HEIGHT_OES: number;
					static GL_RENDERBUFFER_INTERNAL_FORMAT_OES: number;
					static GL_RENDERBUFFER_OES: number;
					static GL_RENDERBUFFER_RED_SIZE_OES: number;
					static GL_RENDERBUFFER_STENCIL_SIZE_OES: number;
					static GL_RENDERBUFFER_WIDTH_OES: number;
					static GL_RGB5_A1: number;
					static GL_RGB565_OES: number;
					static GL_RGB8: number;
					static GL_RGBA4: number;
					static GL_RGBA8: number;
					static GL_STENCIL_ATTACHMENT_OES: number;
					static GL_STENCIL_INDEX: number;
					static GL_STENCIL_INDEX1_OES: number;
					static GL_STENCIL_INDEX4_OES: number;
					static GL_STENCIL_INDEX8_OES: number;
					static GL_STR: number;
					static GL_TEXTURE_BINDING_CUBE_MAP: number;
					static GL_TEXTURE_CUBE_MAP: number;
					static GL_TEXTURE_CUBE_MAP_NEGATIVE_X: number;
					static GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: number;
					static GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: number;
					static GL_TEXTURE_CUBE_MAP_POSITIVE_X: number;
					static GL_TEXTURE_CUBE_MAP_POSITIVE_Y: number;
					static GL_TEXTURE_CUBE_MAP_POSITIVE_Z: number;
					static GL_TEXTURE_GEN_MODE: number;
					static GL_TEXTURE_GEN_STR: number;
					glGetRenderbufferParameterivOES(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetRenderbufferParameterivOES(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetFramebufferAttachmentParameterivOES(arg1: number, arg2: number, arg3: number, arg4: native.Array<number>, arg5: number): void;
					glGetFramebufferAttachmentParameterivOES(arg1: number, arg2: number, arg3: number, arg4: java.nio.IntBuffer): void;
					glRenderbufferStorageOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glDeleteRenderbuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glDeleteRenderbuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
					glFramebufferTexture2DOES(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
					glDeleteFramebuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
					glDeleteFramebuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glFramebufferRenderbufferOES(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glCheckFramebufferStatusOES(arg1: number): number;
					glCompressedTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: java.nio.Buffer): void;
					glBlendEquationSeparate(arg1: number, arg2: number): void;
					glStencilOp(arg1: number, arg2: number, arg3: number): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexEnvfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexEnvf(arg1: number, arg2: number, arg3: native.Float): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexEnvxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexEnvx(arg1: number, arg2: number, arg3: number): void;
					glEnable(arg1: number): void;
					glBindTexture(arg1: number, arg2: number): void;
					glGetIntegerv(arg1: number, arg2: java.nio.IntBuffer): void;
					glGetIntegerv(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glBindFramebufferOES(arg1: number, arg2: number): void;
					glBindRenderbufferOES(arg1: number, arg2: number): void;
					glGenRenderbuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGenRenderbuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenFramebuffersOES(arg1: number, arg2: native.Array<number>, arg3: number): void;
					glGenFramebuffersOES(arg1: number, arg2: java.nio.IntBuffer): void;
					glGenerateMipmapOES(arg1: number): void;
					glIsFramebufferOES(arg1: number): boolean;
					glIsRenderbufferOES(arg1: number): boolean;
					glBlendEquation(arg1: number): void;
					glBlendFuncSeparate(arg1: number, arg2: number, arg3: number, arg4: number): void;
					glCopyTexImage2D(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
					glTexParameterf(arg1: number, arg2: number, arg3: native.Float): void;
					glTexGenxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexGenxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexGenfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glGetTexGenfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glGetTexGenxv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexGenxv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glGetTexGeniv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glGetTexGeniv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexGenf(arg1: number, arg2: number, arg3: native.Float): void;
					glTexGeni(arg1: number, arg2: number, arg3: number): void;
					glTexGenfv(arg1: number, arg2: number, arg3: java.nio.FloatBuffer): void;
					glTexGenfv(arg1: number, arg2: number, arg3: native.Array<native.Float>, arg4: number): void;
					glTexGeniv(arg1: number, arg2: number, arg3: java.nio.IntBuffer): void;
					glTexGeniv(arg1: number, arg2: number, arg3: native.Array<number>, arg4: number): void;
					glTexGenx(arg1: number, arg2: number, arg3: number): void;
				}
			}
			export module egl {
				export interface IEGL {
					__javax_microedition_khronos_egl_IEGL?: any;
				}
				export class EGL implements javax.microedition.khronos.egl.IEGL {
					constructor(implementation: javax.microedition.khronos.egl.IEGL);
				}
				export class EGL10 implements javax.microedition.khronos.egl.IEGL, javax.microedition.khronos.egl.IEGL10 {
					constructor(implementation: javax.microedition.khronos.egl.IEGL10);
					static EGL_SUCCESS: number;
					static EGL_NOT_INITIALIZED: number;
					static EGL_BAD_ACCESS: number;
					static EGL_BAD_ALLOC: number;
					static EGL_BAD_ATTRIBUTE: number;
					static EGL_BAD_CONFIG: number;
					static EGL_BAD_CONTEXT: number;
					static EGL_BAD_CURRENT_SURFACE: number;
					static EGL_BAD_DISPLAY: number;
					static EGL_BAD_MATCH: number;
					static EGL_BAD_NATIVE_PIXMAP: number;
					static EGL_BAD_NATIVE_WINDOW: number;
					static EGL_BAD_PARAMETER: number;
					static EGL_BAD_SURFACE: number;
					static EGL_BUFFER_SIZE: number;
					static EGL_ALPHA_SIZE: number;
					static EGL_BLUE_SIZE: number;
					static EGL_GREEN_SIZE: number;
					static EGL_RED_SIZE: number;
					static EGL_DEPTH_SIZE: number;
					static EGL_STENCIL_SIZE: number;
					static EGL_CONFIG_CAVEAT: number;
					static EGL_CONFIG_ID: number;
					static EGL_LEVEL: number;
					static EGL_MAX_PBUFFER_HEIGHT: number;
					static EGL_MAX_PBUFFER_PIXELS: number;
					static EGL_MAX_PBUFFER_WIDTH: number;
					static EGL_NATIVE_RENDERABLE: number;
					static EGL_NATIVE_VISUAL_ID: number;
					static EGL_NATIVE_VISUAL_TYPE: number;
					static EGL_SAMPLES: number;
					static EGL_SAMPLE_BUFFERS: number;
					static EGL_SURFACE_TYPE: number;
					static EGL_TRANSPARENT_TYPE: number;
					static EGL_TRANSPARENT_BLUE_VALUE: number;
					static EGL_TRANSPARENT_GREEN_VALUE: number;
					static EGL_TRANSPARENT_RED_VALUE: number;
					static EGL_NONE: number;
					static EGL_LUMINANCE_SIZE: number;
					static EGL_ALPHA_MASK_SIZE: number;
					static EGL_COLOR_BUFFER_TYPE: number;
					static EGL_RENDERABLE_TYPE: number;
					static EGL_SLOW_CONFIG: number;
					static EGL_NON_CONFORMANT_CONFIG: number;
					static EGL_TRANSPARENT_RGB: number;
					static EGL_RGB_BUFFER: number;
					static EGL_LUMINANCE_BUFFER: number;
					static EGL_VENDOR: number;
					static EGL_VERSION: number;
					static EGL_EXTENSIONS: number;
					static EGL_HEIGHT: number;
					static EGL_WIDTH: number;
					static EGL_LARGEST_PBUFFER: number;
					static EGL_RENDER_BUFFER: number;
					static EGL_COLORSPACE: number;
					static EGL_ALPHA_FORMAT: number;
					static EGL_HORIZONTAL_RESOLUTION: number;
					static EGL_VERTICAL_RESOLUTION: number;
					static EGL_PIXEL_ASPECT_RATIO: number;
					static EGL_SINGLE_BUFFER: number;
					static EGL_CORE_NATIVE_ENGINE: number;
					static EGL_DRAW: number;
					static EGL_READ: number;
					static EGL_DONT_CARE: number;
					static EGL_PBUFFER_BIT: number;
					static EGL_PIXMAP_BIT: number;
					static EGL_WINDOW_BIT: number;
					static EGL_DEFAULT_DISPLAY: any;
					static EGL_NO_DISPLAY: javax.microedition.khronos.egl.EGLDisplay;
					static EGL_NO_CONTEXT: javax.microedition.khronos.egl.EGLContext;
					static EGL_NO_SURFACE: javax.microedition.khronos.egl.EGLSurface;
					eglQueryContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLContext, arg3: number, arg4: native.Array<number>): boolean;
					eglSwapBuffers(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface): boolean;
					eglDestroySurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface): boolean;
					eglQuerySurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: number, arg4: native.Array<number>): boolean;
					eglCreateContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: javax.microedition.khronos.egl.EGLContext, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLContext;
					eglQueryString(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: number): string;
					eglDestroyContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLContext): boolean;
					eglChooseConfig(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<number>, arg3: native.Array<javax.microedition.khronos.egl.EGLConfig>, arg4: number, arg5: native.Array<number>): boolean;
					eglGetConfigAttrib(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: number, arg4: native.Array<number>): boolean;
					eglMakeCurrent(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: javax.microedition.khronos.egl.EGLSurface, arg4: javax.microedition.khronos.egl.EGLContext): boolean;
					eglGetCurrentContext(): javax.microedition.khronos.egl.EGLContext;
					eglGetCurrentSurface(arg1: number): javax.microedition.khronos.egl.EGLSurface;
					eglGetCurrentDisplay(): javax.microedition.khronos.egl.EGLDisplay;
					eglCopyBuffers(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: any): boolean;
					eglCreatePbufferSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglCreateWindowSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: any, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglCreatePixmapSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: any, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglInitialize(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<number>): boolean;
					eglGetDisplay(arg1: any): javax.microedition.khronos.egl.EGLDisplay;
					eglGetError(): number;
					eglWaitNative(arg1: number, arg2: any): boolean;
					eglGetConfigs(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<javax.microedition.khronos.egl.EGLConfig>, arg3: number, arg4: native.Array<number>): boolean;
					eglTerminate(arg1: javax.microedition.khronos.egl.EGLDisplay): boolean;
					eglWaitGL(): boolean;
				}
				export interface IEGL10 extends javax.microedition.khronos.egl.IEGL {
					eglQueryContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLContext, arg3: number, arg4: native.Array<number>): boolean;
					eglSwapBuffers(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface): boolean;
					eglDestroySurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface): boolean;
					eglQuerySurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: number, arg4: native.Array<number>): boolean;
					eglCreateContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: javax.microedition.khronos.egl.EGLContext, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLContext;
					eglQueryString(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: number): string;
					eglDestroyContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLContext): boolean;
					eglChooseConfig(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<number>, arg3: native.Array<javax.microedition.khronos.egl.EGLConfig>, arg4: number, arg5: native.Array<number>): boolean;
					eglGetConfigAttrib(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: number, arg4: native.Array<number>): boolean;
					eglMakeCurrent(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: javax.microedition.khronos.egl.EGLSurface, arg4: javax.microedition.khronos.egl.EGLContext): boolean;
					eglGetCurrentContext(): javax.microedition.khronos.egl.EGLContext;
					eglGetCurrentSurface(arg1: number): javax.microedition.khronos.egl.EGLSurface;
					eglGetCurrentDisplay(): javax.microedition.khronos.egl.EGLDisplay;
					eglCopyBuffers(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: any): boolean;
					eglCreatePbufferSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglCreateWindowSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: any, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglCreatePixmapSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: any, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglInitialize(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<number>): boolean;
					eglGetDisplay(arg1: any): javax.microedition.khronos.egl.EGLDisplay;
					eglGetError(): number;
					eglWaitNative(arg1: number, arg2: any): boolean;
					eglGetConfigs(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<javax.microedition.khronos.egl.EGLConfig>, arg3: number, arg4: native.Array<number>): boolean;
					eglTerminate(arg1: javax.microedition.khronos.egl.EGLDisplay): boolean;
					eglWaitGL(): boolean;
				}
				export module IEGL10 {
					var EGL_SUCCESS: number;
					var EGL_NOT_INITIALIZED: number;
					var EGL_BAD_ACCESS: number;
					var EGL_BAD_ALLOC: number;
					var EGL_BAD_ATTRIBUTE: number;
					var EGL_BAD_CONFIG: number;
					var EGL_BAD_CONTEXT: number;
					var EGL_BAD_CURRENT_SURFACE: number;
					var EGL_BAD_DISPLAY: number;
					var EGL_BAD_MATCH: number;
					var EGL_BAD_NATIVE_PIXMAP: number;
					var EGL_BAD_NATIVE_WINDOW: number;
					var EGL_BAD_PARAMETER: number;
					var EGL_BAD_SURFACE: number;
					var EGL_BUFFER_SIZE: number;
					var EGL_ALPHA_SIZE: number;
					var EGL_BLUE_SIZE: number;
					var EGL_GREEN_SIZE: number;
					var EGL_RED_SIZE: number;
					var EGL_DEPTH_SIZE: number;
					var EGL_STENCIL_SIZE: number;
					var EGL_CONFIG_CAVEAT: number;
					var EGL_CONFIG_ID: number;
					var EGL_LEVEL: number;
					var EGL_MAX_PBUFFER_HEIGHT: number;
					var EGL_MAX_PBUFFER_PIXELS: number;
					var EGL_MAX_PBUFFER_WIDTH: number;
					var EGL_NATIVE_RENDERABLE: number;
					var EGL_NATIVE_VISUAL_ID: number;
					var EGL_NATIVE_VISUAL_TYPE: number;
					var EGL_SAMPLES: number;
					var EGL_SAMPLE_BUFFERS: number;
					var EGL_SURFACE_TYPE: number;
					var EGL_TRANSPARENT_TYPE: number;
					var EGL_TRANSPARENT_BLUE_VALUE: number;
					var EGL_TRANSPARENT_GREEN_VALUE: number;
					var EGL_TRANSPARENT_RED_VALUE: number;
					var EGL_NONE: number;
					var EGL_LUMINANCE_SIZE: number;
					var EGL_ALPHA_MASK_SIZE: number;
					var EGL_COLOR_BUFFER_TYPE: number;
					var EGL_RENDERABLE_TYPE: number;
					var EGL_SLOW_CONFIG: number;
					var EGL_NON_CONFORMANT_CONFIG: number;
					var EGL_TRANSPARENT_RGB: number;
					var EGL_RGB_BUFFER: number;
					var EGL_LUMINANCE_BUFFER: number;
					var EGL_VENDOR: number;
					var EGL_VERSION: number;
					var EGL_EXTENSIONS: number;
					var EGL_HEIGHT: number;
					var EGL_WIDTH: number;
					var EGL_LARGEST_PBUFFER: number;
					var EGL_RENDER_BUFFER: number;
					var EGL_COLORSPACE: number;
					var EGL_ALPHA_FORMAT: number;
					var EGL_HORIZONTAL_RESOLUTION: number;
					var EGL_VERTICAL_RESOLUTION: number;
					var EGL_PIXEL_ASPECT_RATIO: number;
					var EGL_SINGLE_BUFFER: number;
					var EGL_CORE_NATIVE_ENGINE: number;
					var EGL_DRAW: number;
					var EGL_READ: number;
					var EGL_DONT_CARE: number;
					var EGL_PBUFFER_BIT: number;
					var EGL_PIXMAP_BIT: number;
					var EGL_WINDOW_BIT: number;
					var EGL_DEFAULT_DISPLAY: any;
					var EGL_NO_DISPLAY: javax.microedition.khronos.egl.EGLDisplay;
					var EGL_NO_CONTEXT: javax.microedition.khronos.egl.EGLContext;
					var EGL_NO_SURFACE: javax.microedition.khronos.egl.EGLSurface;
				}
				export interface IEGL11 extends javax.microedition.khronos.egl.IEGL10 {
					eglQueryContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLContext, arg3: number, arg4: native.Array<number>): boolean;
					eglSwapBuffers(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface): boolean;
					eglDestroySurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface): boolean;
					eglQuerySurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: number, arg4: native.Array<number>): boolean;
					eglCreateContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: javax.microedition.khronos.egl.EGLContext, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLContext;
					eglQueryString(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: number): string;
					eglDestroyContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLContext): boolean;
					eglChooseConfig(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<number>, arg3: native.Array<javax.microedition.khronos.egl.EGLConfig>, arg4: number, arg5: native.Array<number>): boolean;
					eglGetConfigAttrib(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: number, arg4: native.Array<number>): boolean;
					eglMakeCurrent(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: javax.microedition.khronos.egl.EGLSurface, arg4: javax.microedition.khronos.egl.EGLContext): boolean;
					eglGetCurrentContext(): javax.microedition.khronos.egl.EGLContext;
					eglGetCurrentSurface(arg1: number): javax.microedition.khronos.egl.EGLSurface;
					eglGetCurrentDisplay(): javax.microedition.khronos.egl.EGLDisplay;
					eglCopyBuffers(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: any): boolean;
					eglCreatePbufferSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglCreateWindowSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: any, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglCreatePixmapSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: any, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglInitialize(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<number>): boolean;
					eglGetDisplay(arg1: any): javax.microedition.khronos.egl.EGLDisplay;
					eglGetError(): number;
					eglWaitNative(arg1: number, arg2: any): boolean;
					eglGetConfigs(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<javax.microedition.khronos.egl.EGLConfig>, arg3: number, arg4: native.Array<number>): boolean;
					eglTerminate(arg1: javax.microedition.khronos.egl.EGLDisplay): boolean;
					eglWaitGL(): boolean;
				}
				export module IEGL11 {
					var EGL_CONTEXT_LOST: number;
				}
				export class EGLDisplay extends java.lang.Object {
					constructor();
					static class: java.lang.Class<javax.microedition.khronos.egl.EGLDisplay>;
				}
				export class EGL11 implements javax.microedition.khronos.egl.IEGL10, javax.microedition.khronos.egl.IEGL11 {
					constructor(implementation: javax.microedition.khronos.egl.IEGL11);
					static EGL_CONTEXT_LOST: number;
					eglQueryContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLContext, arg3: number, arg4: native.Array<number>): boolean;
					eglSwapBuffers(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface): boolean;
					eglDestroySurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface): boolean;
					eglQuerySurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: number, arg4: native.Array<number>): boolean;
					eglCreateContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: javax.microedition.khronos.egl.EGLContext, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLContext;
					eglQueryString(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: number): string;
					eglDestroyContext(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLContext): boolean;
					eglChooseConfig(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<number>, arg3: native.Array<javax.microedition.khronos.egl.EGLConfig>, arg4: number, arg5: native.Array<number>): boolean;
					eglGetConfigAttrib(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: number, arg4: native.Array<number>): boolean;
					eglMakeCurrent(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: javax.microedition.khronos.egl.EGLSurface, arg4: javax.microedition.khronos.egl.EGLContext): boolean;
					eglGetCurrentContext(): javax.microedition.khronos.egl.EGLContext;
					eglGetCurrentSurface(arg1: number): javax.microedition.khronos.egl.EGLSurface;
					eglGetCurrentDisplay(): javax.microedition.khronos.egl.EGLDisplay;
					eglCopyBuffers(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLSurface, arg3: any): boolean;
					eglCreatePbufferSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglCreateWindowSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: any, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglCreatePixmapSurface(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: javax.microedition.khronos.egl.EGLConfig, arg3: any, arg4: native.Array<number>): javax.microedition.khronos.egl.EGLSurface;
					eglInitialize(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<number>): boolean;
					eglGetDisplay(arg1: any): javax.microedition.khronos.egl.EGLDisplay;
					eglGetError(): number;
					eglWaitNative(arg1: number, arg2: any): boolean;
					eglGetConfigs(arg1: javax.microedition.khronos.egl.EGLDisplay, arg2: native.Array<javax.microedition.khronos.egl.EGLConfig>, arg3: number, arg4: native.Array<number>): boolean;
					eglTerminate(arg1: javax.microedition.khronos.egl.EGLDisplay): boolean;
					eglWaitGL(): boolean;
				}
				export class EGLContext extends java.lang.Object {
					constructor();
					static class: java.lang.Class<javax.microedition.khronos.egl.EGLContext>;
					getGL(): javax.microedition.khronos.opengles.IGL;
					static getEGL(): javax.microedition.khronos.egl.IEGL;
				}
				export class EGLConfig extends java.lang.Object {
					constructor();
					static class: java.lang.Class<javax.microedition.khronos.egl.EGLConfig>;
				}
				export class EGLSurface extends java.lang.Object {
					constructor();
					static class: java.lang.Class<javax.microedition.khronos.egl.EGLSurface>;
				}
			}
		}
	}
	export module xml {
		export module transform {
			export class SourceLocator implements javax.xml.transform.ISourceLocator {
				constructor(implementation: javax.xml.transform.ISourceLocator);
				getLineNumber(): number;
				getPublicId(): string;
				getSystemId(): string;
				getColumnNumber(): number;
			}
			export class Result implements javax.xml.transform.IResult {
				constructor(implementation: javax.xml.transform.IResult);
				static PI_DISABLE_OUTPUT_ESCAPING: java.lang.String;
				static PI_ENABLE_OUTPUT_ESCAPING: java.lang.String;
				SystemId: string;
				getSystemId(): string;
				setSystemId(arg1: java.lang.String): void;
				setSystemId(arg1: string): void;
			}
			export interface ISource {
				getSystemId(): string;
				setSystemId(arg1: string): void;
			}
			export module stream {
				export class StreamSource extends java.lang.Object implements javax.xml.transform.ISource {
					constructor();
					constructor(arg1: java.io.File);
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.io.InputStream);
					constructor(arg1: java.io.InputStream, arg2: java.lang.String);
					constructor(arg1: java.io.InputStream, arg2: string);
					constructor(arg1: java.io.Reader);
					constructor(arg1: java.io.Reader, arg2: java.lang.String);
					constructor(arg1: java.io.Reader, arg2: string);
					static FEATURE: java.lang.String;
					static class: java.lang.Class<javax.xml.transform.stream.StreamSource>;
					SystemId: string;
					PublicId: string;
					Reader: java.io.Reader;
					InputStream: java.io.InputStream;
					getReader(): java.io.Reader;
					setReader(arg1: java.io.Reader): void;
					getInputStream(): java.io.InputStream;
					setInputStream(arg1: java.io.InputStream): void;
					getPublicId(): string;
					getSystemId(): string;
					setPublicId(arg1: java.lang.String): void;
					setPublicId(arg1: string): void;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
					setSystemId(arg1: java.io.File): void;
				}
				export class StreamResult extends java.lang.Object implements javax.xml.transform.IResult {
					constructor();
					constructor(arg1: java.io.File);
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.io.Writer);
					constructor(arg1: java.io.OutputStream);
					static FEATURE: java.lang.String;
					static class: java.lang.Class<javax.xml.transform.stream.StreamResult>;
					SystemId: string;
					Writer: java.io.Writer;
					OutputStream: java.io.OutputStream;
					setOutputStream(arg1: java.io.OutputStream): void;
					getWriter(): java.io.Writer;
					setWriter(arg1: java.io.Writer): void;
					getOutputStream(): java.io.OutputStream;
					getSystemId(): string;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
					setSystemId(arg1: java.io.File): void;
				}
			}
			export class TransformerFactory extends java.lang.Object {
				static class: java.lang.Class<javax.xml.transform.TransformerFactory>;
				URIResolver: javax.xml.transform.IURIResolver;
				ErrorListener: javax.xml.transform.IErrorListener;
				newTransformer(arg1: javax.xml.transform.ISource): javax.xml.transform.Transformer;
				newTransformer(): javax.xml.transform.Transformer;
				getAssociatedStylesheet(arg1: javax.xml.transform.ISource, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): javax.xml.transform.ISource;
				getAssociatedStylesheet(arg1: javax.xml.transform.ISource, arg2: string, arg3: string, arg4: string): javax.xml.transform.ISource;
				getErrorListener(): javax.xml.transform.IErrorListener;
				getURIResolver(): javax.xml.transform.IURIResolver;
				newTemplates(arg1: javax.xml.transform.ISource): javax.xml.transform.ITemplates;
				setErrorListener(arg1: javax.xml.transform.IErrorListener): void;
				setURIResolver(arg1: javax.xml.transform.IURIResolver): void;
				static newInstance(): javax.xml.transform.TransformerFactory;
				static newInstance(arg1: java.lang.String, arg2: java.lang.ClassLoader): javax.xml.transform.TransformerFactory;
				static newInstance(arg1: string, arg2: java.lang.ClassLoader): javax.xml.transform.TransformerFactory;
				getAttribute(arg1: java.lang.String): any;
				getAttribute(arg1: string): any;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				setAttribute(arg1: java.lang.String, arg2: any): void;
				setAttribute(arg1: string, arg2: any): void;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
			}
			export class URIResolver implements javax.xml.transform.IURIResolver {
				constructor(implementation: javax.xml.transform.IURIResolver);
				resolve(arg1: java.lang.String, arg2: java.lang.String): javax.xml.transform.ISource;
				resolve(arg1: string, arg2: string): javax.xml.transform.ISource;
			}
			export interface IResult {
				getSystemId(): string;
				setSystemId(arg1: string): void;
			}
			export module IResult {
				var PI_DISABLE_OUTPUT_ESCAPING: java.lang.String;
				var PI_ENABLE_OUTPUT_ESCAPING: java.lang.String;
			}
			export module dom {
				export class DOMLocator implements javax.xml.transform.ISourceLocator, javax.xml.transform.dom.IDOMLocator {
					constructor(implementation: javax.xml.transform.dom.IDOMLocator);
					getOriginatingNode(): org.w3c.dom.INode;
					getLineNumber(): number;
					getPublicId(): string;
					getSystemId(): string;
					getColumnNumber(): number;
				}
				export class DOMResult extends java.lang.Object implements javax.xml.transform.IResult {
					constructor(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode, arg3: java.lang.String);
					constructor(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode, arg3: string);
					constructor();
					constructor(arg1: org.w3c.dom.INode);
					constructor(arg1: org.w3c.dom.INode, arg2: java.lang.String);
					constructor(arg1: org.w3c.dom.INode, arg2: string);
					constructor(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode);
					static FEATURE: java.lang.String;
					static class: java.lang.Class<javax.xml.transform.dom.DOMResult>;
					SystemId: string;
					Node: org.w3c.dom.INode;
					NextSibling: org.w3c.dom.INode;
					setNextSibling(arg1: org.w3c.dom.INode): void;
					setNode(arg1: org.w3c.dom.INode): void;
					getNextSibling(): org.w3c.dom.INode;
					getSystemId(): string;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
					getNode(): org.w3c.dom.INode;
				}
				export class DOMSource extends java.lang.Object implements javax.xml.transform.ISource {
					constructor();
					constructor(arg1: org.w3c.dom.INode, arg2: java.lang.String);
					constructor(arg1: org.w3c.dom.INode, arg2: string);
					constructor(arg1: org.w3c.dom.INode);
					static FEATURE: java.lang.String;
					static class: java.lang.Class<javax.xml.transform.dom.DOMSource>;
					SystemId: string;
					Node: org.w3c.dom.INode;
					setNode(arg1: org.w3c.dom.INode): void;
					getSystemId(): string;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
					getNode(): org.w3c.dom.INode;
				}
				export interface IDOMLocator extends javax.xml.transform.ISourceLocator {
					getOriginatingNode(): org.w3c.dom.INode;
					getLineNumber(): number;
					getPublicId(): string;
					getSystemId(): string;
					getColumnNumber(): number;
				}
			}
			export class TransformerConfigurationException extends javax.xml.transform.TransformerException {
				constructor(arg1: java.lang.String, arg2: javax.xml.transform.ISourceLocator, arg3: java.lang.Throwable);
				constructor(arg1: string, arg2: javax.xml.transform.ISourceLocator, arg3: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: javax.xml.transform.ISourceLocator);
				constructor(arg1: string, arg2: javax.xml.transform.ISourceLocator);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<javax.xml.transform.TransformerConfigurationException>;
			}
			export class ErrorListener implements javax.xml.transform.IErrorListener {
				constructor(implementation: javax.xml.transform.IErrorListener);
				error(arg1: javax.xml.transform.TransformerException): void;
				warning(arg1: javax.xml.transform.TransformerException): void;
				fatalError(arg1: javax.xml.transform.TransformerException): void;
			}
			export interface ITemplates {
				newTransformer(): javax.xml.transform.Transformer;
				getOutputProperties(): java.util.Properties;
			}
			export class Templates implements javax.xml.transform.ITemplates {
				constructor(implementation: javax.xml.transform.ITemplates);
				newTransformer(): javax.xml.transform.Transformer;
				getOutputProperties(): java.util.Properties;
			}
			export interface IErrorListener {
				error(arg1: javax.xml.transform.TransformerException): void;
				warning(arg1: javax.xml.transform.TransformerException): void;
				fatalError(arg1: javax.xml.transform.TransformerException): void;
			}
			export class TransformerException extends java.lang.Exception {
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: javax.xml.transform.ISourceLocator);
				constructor(arg1: string, arg2: javax.xml.transform.ISourceLocator);
				constructor(arg1: java.lang.String, arg2: javax.xml.transform.ISourceLocator, arg3: java.lang.Throwable);
				constructor(arg1: string, arg2: javax.xml.transform.ISourceLocator, arg3: java.lang.Throwable);
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.xml.transform.TransformerException>;
				Locator: javax.xml.transform.ISourceLocator;
				getLocationAsString(): string;
				getLocator(): javax.xml.transform.ISourceLocator;
				getMessageAndLocation(): string;
				setLocator(arg1: javax.xml.transform.ISourceLocator): void;
				getCause(): java.lang.Throwable;
				initCause(arg1: java.lang.Throwable): java.lang.Throwable;
				printStackTrace(arg1: java.io.PrintStream): void;
				printStackTrace(): void;
				printStackTrace(arg1: java.io.PrintWriter): void;
				getException(): java.lang.Throwable;
			}
			export class Source implements javax.xml.transform.ISource {
				constructor(implementation: javax.xml.transform.ISource);
				SystemId: string;
				getSystemId(): string;
				setSystemId(arg1: java.lang.String): void;
				setSystemId(arg1: string): void;
			}
			export class TransformerFactoryConfigurationError extends java.lang.Error {
				constructor(arg1: java.lang.Exception, arg2: java.lang.String);
				constructor(arg1: java.lang.Exception, arg2: string);
				constructor(arg1: java.lang.Exception);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<javax.xml.transform.TransformerFactoryConfigurationError>;
				getCause(): java.lang.Throwable;
				getMessage(): string;
				getException(): java.lang.Exception;
			}
			export module sax {
				export class SAXResult extends java.lang.Object implements javax.xml.transform.IResult {
					constructor();
					constructor(arg1: org.xml.sax.IContentHandler);
					static FEATURE: java.lang.String;
					static class: java.lang.Class<javax.xml.transform.sax.SAXResult>;
					SystemId: string;
					Handler: org.xml.sax.IContentHandler;
					LexicalHandler: org.xml.sax.ext.ILexicalHandler;
					getLexicalHandler(): org.xml.sax.ext.ILexicalHandler;
					setHandler(arg1: org.xml.sax.IContentHandler): void;
					setLexicalHandler(arg1: org.xml.sax.ext.ILexicalHandler): void;
					getHandler(): org.xml.sax.IContentHandler;
					getSystemId(): string;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
				}
				export interface ITransformerHandler extends org.xml.sax.IContentHandler, org.xml.sax.ext.ILexicalHandler, org.xml.sax.IDTDHandler {
					setResult(arg1: javax.xml.transform.IResult): void;
					getTransformer(): javax.xml.transform.Transformer;
					getSystemId(): string;
					setSystemId(arg1: string): void;
					characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
					endDocument(): void;
					endElement(arg1: string, arg2: string, arg3: string): void;
					endPrefixMapping(arg1: string): void;
					ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
					processingInstruction(arg1: string, arg2: string): void;
					setDocumentLocator(arg1: org.xml.sax.ILocator): void;
					skippedEntity(arg1: string): void;
					startDocument(): void;
					startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
					startPrefixMapping(arg1: string, arg2: string): void;
					endCDATA(): void;
					endDTD(): void;
					endEntity(arg1: string): void;
					startCDATA(): void;
					startDTD(arg1: string, arg2: string, arg3: string): void;
					startEntity(arg1: string): void;
					comment(arg1: native.Array<string>, arg2: number, arg3: number): void;
					notationDecl(arg1: string, arg2: string, arg3: string): void;
					unparsedEntityDecl(arg1: string, arg2: string, arg3: string, arg4: string): void;
				}
				export interface ITemplatesHandler extends org.xml.sax.IContentHandler {
					getTemplates(): javax.xml.transform.ITemplates;
					getSystemId(): string;
					setSystemId(arg1: string): void;
					characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
					endDocument(): void;
					endElement(arg1: string, arg2: string, arg3: string): void;
					endPrefixMapping(arg1: string): void;
					ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
					processingInstruction(arg1: string, arg2: string): void;
					setDocumentLocator(arg1: org.xml.sax.ILocator): void;
					skippedEntity(arg1: string): void;
					startDocument(): void;
					startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
					startPrefixMapping(arg1: string, arg2: string): void;
				}
				export class SAXSource extends java.lang.Object implements javax.xml.transform.ISource {
					constructor();
					constructor(arg1: org.xml.sax.IXMLReader, arg2: org.xml.sax.InputSource);
					constructor(arg1: org.xml.sax.InputSource);
					static FEATURE: java.lang.String;
					static class: java.lang.Class<javax.xml.transform.sax.SAXSource>;
					SystemId: string;
					XMLReader: org.xml.sax.IXMLReader;
					InputSource: org.xml.sax.InputSource;
					getInputSource(): org.xml.sax.InputSource;
					getXMLReader(): org.xml.sax.IXMLReader;
					setInputSource(arg1: org.xml.sax.InputSource): void;
					setXMLReader(arg1: org.xml.sax.IXMLReader): void;
					static sourceToInputSource(arg1: javax.xml.transform.ISource): org.xml.sax.InputSource;
					getSystemId(): string;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
				}
				export class TransformerHandler implements org.xml.sax.IContentHandler, org.xml.sax.ext.ILexicalHandler, org.xml.sax.IDTDHandler, javax.xml.transform.sax.ITransformerHandler {
					constructor(implementation: javax.xml.transform.sax.ITransformerHandler);
					SystemId: string;
					setResult(arg1: javax.xml.transform.IResult): void;
					getTransformer(): javax.xml.transform.Transformer;
					getSystemId(): string;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
					characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
					endDocument(): void;
					endElement(arg1: string, arg2: string, arg3: string): void;
					endPrefixMapping(arg1: string): void;
					ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
					processingInstruction(arg1: string, arg2: string): void;
					setDocumentLocator(arg1: org.xml.sax.ILocator): void;
					skippedEntity(arg1: string): void;
					startDocument(): void;
					startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
					startPrefixMapping(arg1: string, arg2: string): void;
					endCDATA(): void;
					endDTD(): void;
					endEntity(arg1: string): void;
					startCDATA(): void;
					startDTD(arg1: string, arg2: string, arg3: string): void;
					startEntity(arg1: string): void;
					comment(arg1: native.Array<string>, arg2: number, arg3: number): void;
					notationDecl(arg1: string, arg2: string, arg3: string): void;
					unparsedEntityDecl(arg1: string, arg2: string, arg3: string, arg4: string): void;
				}
				export class SAXTransformerFactory extends javax.xml.transform.TransformerFactory {
					static FEATURE: java.lang.String;
					static FEATURE_XMLFILTER: java.lang.String;
					static class: java.lang.Class<javax.xml.transform.sax.SAXTransformerFactory>;
					newTemplatesHandler(): javax.xml.transform.sax.ITemplatesHandler;
					newTransformerHandler(): javax.xml.transform.sax.ITransformerHandler;
					newTransformerHandler(arg1: javax.xml.transform.ITemplates): javax.xml.transform.sax.ITransformerHandler;
					newTransformerHandler(arg1: javax.xml.transform.ISource): javax.xml.transform.sax.ITransformerHandler;
					newXMLFilter(arg1: javax.xml.transform.ISource): org.xml.sax.IXMLFilter;
					newXMLFilter(arg1: javax.xml.transform.ITemplates): org.xml.sax.IXMLFilter;
				}
				export class TemplatesHandler implements org.xml.sax.IContentHandler, javax.xml.transform.sax.ITemplatesHandler {
					constructor(implementation: javax.xml.transform.sax.ITemplatesHandler);
					SystemId: string;
					getTemplates(): javax.xml.transform.ITemplates;
					getSystemId(): string;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
					characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
					endDocument(): void;
					endElement(arg1: string, arg2: string, arg3: string): void;
					endPrefixMapping(arg1: string): void;
					ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
					processingInstruction(arg1: string, arg2: string): void;
					setDocumentLocator(arg1: org.xml.sax.ILocator): void;
					skippedEntity(arg1: string): void;
					startDocument(): void;
					startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
					startPrefixMapping(arg1: string, arg2: string): void;
				}
			}
			export class OutputKeys extends java.lang.Object {
				static METHOD: java.lang.String;
				static VERSION: java.lang.String;
				static ENCODING: java.lang.String;
				static OMIT_XML_DECLARATION: java.lang.String;
				static STANDALONE: java.lang.String;
				static DOCTYPE_PUBLIC: java.lang.String;
				static DOCTYPE_SYSTEM: java.lang.String;
				static CDATA_SECTION_ELEMENTS: java.lang.String;
				static INDENT: java.lang.String;
				static MEDIA_TYPE: java.lang.String;
				static class: java.lang.Class<javax.xml.transform.OutputKeys>;
			}
			export interface IURIResolver {
				resolve(arg1: string, arg2: string): javax.xml.transform.ISource;
			}
			export interface ISourceLocator {
				getLineNumber(): number;
				getPublicId(): string;
				getSystemId(): string;
				getColumnNumber(): number;
			}
			export class Transformer extends java.lang.Object {
				static class: java.lang.Class<javax.xml.transform.Transformer>;
				URIResolver: javax.xml.transform.IURIResolver;
				ErrorListener: javax.xml.transform.IErrorListener;
				OutputProperties: java.util.Properties;
				clearParameters(): void;
				setOutputProperty(arg1: java.lang.String, arg2: java.lang.String): void;
				setOutputProperty(arg1: string, arg2: string): void;
				getOutputProperties(): java.util.Properties;
				getErrorListener(): javax.xml.transform.IErrorListener;
				getURIResolver(): javax.xml.transform.IURIResolver;
				setErrorListener(arg1: javax.xml.transform.IErrorListener): void;
				setURIResolver(arg1: javax.xml.transform.IURIResolver): void;
				getOutputProperty(arg1: java.lang.String): string;
				getOutputProperty(arg1: string): string;
				setOutputProperties(arg1: java.util.Properties): void;
				transform(arg1: javax.xml.transform.ISource, arg2: javax.xml.transform.IResult): void;
				reset(): void;
				getParameter(arg1: java.lang.String): any;
				getParameter(arg1: string): any;
				setParameter(arg1: java.lang.String, arg2: any): void;
				setParameter(arg1: string, arg2: any): void;
			}
		}
		export module validation {
			export class SchemaFactory extends java.lang.Object {
				static class: java.lang.Class<javax.xml.validation.SchemaFactory>;
				ResourceResolver: org.w3c.dom.ls.ILSResourceResolver;
				ErrorHandler: org.xml.sax.IErrorHandler;
				getErrorHandler(): org.xml.sax.IErrorHandler;
				getResourceResolver(): org.w3c.dom.ls.ILSResourceResolver;
				isSchemaLanguageSupported(arg1: java.lang.String): boolean;
				isSchemaLanguageSupported(arg1: string): boolean;
				newSchema(arg1: java.io.File): javax.xml.validation.Schema;
				newSchema(arg1: javax.xml.transform.ISource): javax.xml.validation.Schema;
				newSchema(): javax.xml.validation.Schema;
				newSchema(arg1: native.Array<javax.xml.transform.ISource>): javax.xml.validation.Schema;
				newSchema(arg1: java.net.URL): javax.xml.validation.Schema;
				setResourceResolver(arg1: org.w3c.dom.ls.ILSResourceResolver): void;
				static newInstance(arg1: java.lang.String): javax.xml.validation.SchemaFactory;
				static newInstance(arg1: string): javax.xml.validation.SchemaFactory;
				static newInstance(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.ClassLoader): javax.xml.validation.SchemaFactory;
				static newInstance(arg1: string, arg2: string, arg3: java.lang.ClassLoader): javax.xml.validation.SchemaFactory;
				getProperty(arg1: java.lang.String): any;
				getProperty(arg1: string): any;
				setProperty(arg1: java.lang.String, arg2: any): void;
				setProperty(arg1: string, arg2: any): void;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
			export class SchemaFactoryLoader extends java.lang.Object {
				static class: java.lang.Class<javax.xml.validation.SchemaFactoryLoader>;
				newFactory(arg1: java.lang.String): javax.xml.validation.SchemaFactory;
				newFactory(arg1: string): javax.xml.validation.SchemaFactory;
			}
			export class ValidatorHandler extends java.lang.Object implements org.xml.sax.IContentHandler {
				static class: java.lang.Class<javax.xml.validation.ValidatorHandler>;
				ContentHandler: org.xml.sax.IContentHandler;
				ResourceResolver: org.w3c.dom.ls.ILSResourceResolver;
				ErrorHandler: org.xml.sax.IErrorHandler;
				getErrorHandler(): org.xml.sax.IErrorHandler;
				getResourceResolver(): org.w3c.dom.ls.ILSResourceResolver;
				setResourceResolver(arg1: org.w3c.dom.ls.ILSResourceResolver): void;
				getTypeInfoProvider(): javax.xml.validation.TypeInfoProvider;
				setContentHandler(arg1: org.xml.sax.IContentHandler): void;
				getProperty(arg1: java.lang.String): any;
				getProperty(arg1: string): any;
				setProperty(arg1: java.lang.String, arg2: any): void;
				setProperty(arg1: string, arg2: any): void;
				getContentHandler(): org.xml.sax.IContentHandler;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
				characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
				endDocument(): void;
				endElement(arg1: string, arg2: string, arg3: string): void;
				endPrefixMapping(arg1: string): void;
				ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
				processingInstruction(arg1: string, arg2: string): void;
				setDocumentLocator(arg1: org.xml.sax.ILocator): void;
				skippedEntity(arg1: string): void;
				startDocument(): void;
				startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
				startPrefixMapping(arg1: string, arg2: string): void;
			}
			export class Schema extends java.lang.Object {
				static class: java.lang.Class<javax.xml.validation.Schema>;
				newValidator(): javax.xml.validation.Validator;
				newValidatorHandler(): javax.xml.validation.ValidatorHandler;
			}
			export class Validator extends java.lang.Object {
				static class: java.lang.Class<javax.xml.validation.Validator>;
				ResourceResolver: org.w3c.dom.ls.ILSResourceResolver;
				ErrorHandler: org.xml.sax.IErrorHandler;
				getErrorHandler(): org.xml.sax.IErrorHandler;
				getResourceResolver(): org.w3c.dom.ls.ILSResourceResolver;
				setResourceResolver(arg1: org.w3c.dom.ls.ILSResourceResolver): void;
				getProperty(arg1: java.lang.String): any;
				getProperty(arg1: string): any;
				setProperty(arg1: java.lang.String, arg2: any): void;
				setProperty(arg1: string, arg2: any): void;
				reset(): void;
				validate(arg1: javax.xml.transform.ISource, arg2: javax.xml.transform.IResult): void;
				validate(arg1: javax.xml.transform.ISource): void;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
			export class TypeInfoProvider extends java.lang.Object {
				static class: java.lang.Class<javax.xml.validation.TypeInfoProvider>;
				isSpecified(arg1: number): boolean;
				getAttributeTypeInfo(arg1: number): org.w3c.dom.ITypeInfo;
				getElementTypeInfo(): org.w3c.dom.ITypeInfo;
				isIdAttribute(arg1: number): boolean;
			}
		}
		export class XMLConstants extends java.lang.Object {
			static NULL_NS_URI: java.lang.String;
			static DEFAULT_NS_PREFIX: java.lang.String;
			static XML_NS_URI: java.lang.String;
			static XML_NS_PREFIX: java.lang.String;
			static XMLNS_ATTRIBUTE_NS_URI: java.lang.String;
			static XMLNS_ATTRIBUTE: java.lang.String;
			static W3C_XML_SCHEMA_NS_URI: java.lang.String;
			static W3C_XML_SCHEMA_INSTANCE_NS_URI: java.lang.String;
			static W3C_XPATH_DATATYPE_NS_URI: java.lang.String;
			static XML_DTD_NS_URI: java.lang.String;
			static RELAXNG_NS_URI: java.lang.String;
			static FEATURE_SECURE_PROCESSING: java.lang.String;
			static ACCESS_EXTERNAL_DTD: java.lang.String;
			static ACCESS_EXTERNAL_SCHEMA: java.lang.String;
			static ACCESS_EXTERNAL_STYLESHEET: java.lang.String;
			static class: java.lang.Class<javax.xml.XMLConstants>;
		}
		export module parsers {
			export class SAXParserFactory extends java.lang.Object {
				static class: java.lang.Class<javax.xml.parsers.SAXParserFactory>;
				Schema: javax.xml.validation.Schema;
				newSAXParser(): javax.xml.parsers.SAXParser;
				static newInstance(arg1: java.lang.String, arg2: java.lang.ClassLoader): javax.xml.parsers.SAXParserFactory;
				static newInstance(arg1: string, arg2: java.lang.ClassLoader): javax.xml.parsers.SAXParserFactory;
				static newInstance(): javax.xml.parsers.SAXParserFactory;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				getSchema(): javax.xml.validation.Schema;
				isNamespaceAware(): boolean;
				isValidating(): boolean;
				isXIncludeAware(): boolean;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				setNamespaceAware(arg1: boolean): void;
				setSchema(arg1: javax.xml.validation.Schema): void;
				setValidating(arg1: boolean): void;
				setXIncludeAware(arg1: boolean): void;
			}
			export class DocumentBuilderFactory extends java.lang.Object {
				static class: java.lang.Class<javax.xml.parsers.DocumentBuilderFactory>;
				Schema: javax.xml.validation.Schema;
				static newInstance(arg1: java.lang.String, arg2: java.lang.ClassLoader): javax.xml.parsers.DocumentBuilderFactory;
				static newInstance(arg1: string, arg2: java.lang.ClassLoader): javax.xml.parsers.DocumentBuilderFactory;
				static newInstance(): javax.xml.parsers.DocumentBuilderFactory;
				getAttribute(arg1: java.lang.String): any;
				getAttribute(arg1: string): any;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				getSchema(): javax.xml.validation.Schema;
				isCoalescing(): boolean;
				isExpandEntityReferences(): boolean;
				isIgnoringComments(): boolean;
				isIgnoringElementContentWhitespace(): boolean;
				isNamespaceAware(): boolean;
				isValidating(): boolean;
				isXIncludeAware(): boolean;
				newDocumentBuilder(): javax.xml.parsers.DocumentBuilder;
				setAttribute(arg1: java.lang.String, arg2: any): void;
				setAttribute(arg1: string, arg2: any): void;
				setCoalescing(arg1: boolean): void;
				setExpandEntityReferences(arg1: boolean): void;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				setIgnoringComments(arg1: boolean): void;
				setIgnoringElementContentWhitespace(arg1: boolean): void;
				setNamespaceAware(arg1: boolean): void;
				setSchema(arg1: javax.xml.validation.Schema): void;
				setValidating(arg1: boolean): void;
				setXIncludeAware(arg1: boolean): void;
			}
			export class DocumentBuilder extends java.lang.Object {
				static class: java.lang.Class<javax.xml.parsers.DocumentBuilder>;
				reset(): void;
				parse(arg1: java.io.File): org.w3c.dom.IDocument;
				parse(arg1: java.lang.String): org.w3c.dom.IDocument;
				parse(arg1: string): org.w3c.dom.IDocument;
				parse(arg1: org.xml.sax.InputSource): org.w3c.dom.IDocument;
				parse(arg1: java.io.InputStream, arg2: java.lang.String): org.w3c.dom.IDocument;
				parse(arg1: java.io.InputStream, arg2: string): org.w3c.dom.IDocument;
				parse(arg1: java.io.InputStream): org.w3c.dom.IDocument;
				getSchema(): javax.xml.validation.Schema;
				isNamespaceAware(): boolean;
				isValidating(): boolean;
				isXIncludeAware(): boolean;
				getDOMImplementation(): org.w3c.dom.IDOMImplementation;
				newDocument(): org.w3c.dom.IDocument;
				setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
			export class FactoryConfigurationError extends java.lang.Error {
				constructor(arg1: java.lang.Exception, arg2: java.lang.String);
				constructor(arg1: java.lang.Exception, arg2: string);
				constructor(arg1: java.lang.Exception);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<javax.xml.parsers.FactoryConfigurationError>;
				getCause(): java.lang.Throwable;
				getMessage(): string;
				getException(): java.lang.Exception;
			}
			export class ParserConfigurationException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.xml.parsers.ParserConfigurationException>;
			}
			export class SAXParser extends java.lang.Object {
				static class: java.lang.Class<javax.xml.parsers.SAXParser>;
				getXMLReader(): org.xml.sax.IXMLReader;
				getParser(): org.xml.sax.IParser;
				getProperty(arg1: java.lang.String): any;
				getProperty(arg1: string): any;
				setProperty(arg1: java.lang.String, arg2: any): void;
				setProperty(arg1: string, arg2: any): void;
				reset(): void;
				parse(arg1: java.io.File, arg2: org.xml.sax.helpers.DefaultHandler): void;
				parse(arg1: org.xml.sax.InputSource, arg2: org.xml.sax.HandlerBase): void;
				parse(arg1: org.xml.sax.InputSource, arg2: org.xml.sax.helpers.DefaultHandler): void;
				parse(arg1: java.io.InputStream, arg2: org.xml.sax.helpers.DefaultHandler, arg3: java.lang.String): void;
				parse(arg1: java.io.InputStream, arg2: org.xml.sax.helpers.DefaultHandler, arg3: string): void;
				parse(arg1: java.io.InputStream, arg2: org.xml.sax.helpers.DefaultHandler): void;
				parse(arg1: java.io.InputStream, arg2: org.xml.sax.HandlerBase): void;
				parse(arg1: java.io.InputStream, arg2: org.xml.sax.HandlerBase, arg3: java.lang.String): void;
				parse(arg1: java.io.InputStream, arg2: org.xml.sax.HandlerBase, arg3: string): void;
				parse(arg1: java.io.File, arg2: org.xml.sax.HandlerBase): void;
				parse(arg1: java.lang.String, arg2: org.xml.sax.helpers.DefaultHandler): void;
				parse(arg1: string, arg2: org.xml.sax.helpers.DefaultHandler): void;
				parse(arg1: java.lang.String, arg2: org.xml.sax.HandlerBase): void;
				parse(arg1: string, arg2: org.xml.sax.HandlerBase): void;
				getSchema(): javax.xml.validation.Schema;
				isNamespaceAware(): boolean;
				isValidating(): boolean;
				isXIncludeAware(): boolean;
			}
		}
		export module datatype {
			export class XMLGregorianCalendar extends java.lang.Object implements java.lang.ICloneable {
				constructor();
				static class: java.lang.Class<javax.xml.datatype.XMLGregorianCalendar>;
				Second: number;
				Day: number;
				Month: number;
				FractionalSecond: java.math.BigDecimal;
				Year: number;
				Hour: number;
				Millisecond: number;
				Minute: number;
				Timezone: number;
				getEon(): java.math.BigInteger;
				getEonAndYear(): java.math.BigInteger;
				getFractionalSecond(): java.math.BigDecimal;
				getHour(): number;
				getMillisecond(): number;
				getMinute(): number;
				getSecond(): number;
				getTimezone(): number;
				getXMLSchemaType(): javax.xml.namespace.QName;
				setDay(arg1: number): void;
				setFractionalSecond(arg1: java.math.BigDecimal): void;
				setHour(arg1: number): void;
				setMillisecond(arg1: number): void;
				setMinute(arg1: number): void;
				setSecond(arg1: number): void;
				setTimezone(arg1: number): void;
				toGregorianCalendar(arg1: java.util.TimeZone, arg2: java.util.Locale, arg3: javax.xml.datatype.XMLGregorianCalendar): java.util.GregorianCalendar;
				toGregorianCalendar(): java.util.GregorianCalendar;
				toXMLFormat(): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				clone(): any;
				toString(): string;
				add(arg1: javax.xml.datatype.Duration): void;
				compare(arg1: javax.xml.datatype.XMLGregorianCalendar): number;
				clear(): void;
				normalize(): javax.xml.datatype.XMLGregorianCalendar;
				reset(): void;
				getTimeZone(arg1: number): java.util.TimeZone;
				isValid(): boolean;
				setTime(arg1: number, arg2: number, arg3: number): void;
				setTime(arg1: number, arg2: number, arg3: number, arg4: java.math.BigDecimal): void;
				setTime(arg1: number, arg2: number, arg3: number, arg4: number): void;
				getMonth(): number;
				getYear(): number;
				getDay(): number;
				setMonth(arg1: number): void;
				setYear(arg1: number): void;
				setYear(arg1: java.math.BigInteger): void;
			}
			export class Duration extends java.lang.Object {
				constructor();
				static class: java.lang.Class<javax.xml.datatype.Duration>;
				getXMLSchemaType(): javax.xml.namespace.QName;
				addTo(arg1: java.util.Date): void;
				addTo(arg1: java.util.Calendar): void;
				getDays(): number;
				getSign(): number;
				getYears(): number;
				isLongerThan(arg1: javax.xml.datatype.Duration): boolean;
				isShorterThan(arg1: javax.xml.datatype.Duration): boolean;
				normalizeWith(arg1: java.util.Calendar): javax.xml.datatype.Duration;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				add(arg1: javax.xml.datatype.Duration): javax.xml.datatype.Duration;
				compare(arg1: javax.xml.datatype.Duration): number;
				getField(arg1: javax.xml.datatype.DatatypeConstants.Field): java.lang.Number;
				isSet(arg1: javax.xml.datatype.DatatypeConstants.Field): boolean;
				subtract(arg1: javax.xml.datatype.Duration): javax.xml.datatype.Duration;
				getHours(): number;
				getMinutes(): number;
				getSeconds(): number;
				getTimeInMillis(arg1: java.util.Date): any;
				getTimeInMillis(arg1: java.util.Calendar): any;
				getMonths(): number;
				multiply(arg1: java.math.BigDecimal): javax.xml.datatype.Duration;
				multiply(arg1: number): javax.xml.datatype.Duration;
				negate(): javax.xml.datatype.Duration;
			}
			export class DatatypeFactory extends java.lang.Object {
				static DATATYPEFACTORY_PROPERTY: java.lang.String;
				static DATATYPEFACTORY_IMPLEMENTATION_CLASS: java.lang.String;
				static class: java.lang.Class<javax.xml.datatype.DatatypeFactory>;
				newDuration(arg1: boolean, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): javax.xml.datatype.Duration;
				newDuration(arg1: native.Long): javax.xml.datatype.Duration;
				newDuration(arg1: java.lang.String): javax.xml.datatype.Duration;
				newDuration(arg1: string): javax.xml.datatype.Duration;
				newDuration(arg1: boolean, arg2: java.math.BigInteger, arg3: java.math.BigInteger, arg4: java.math.BigInteger, arg5: java.math.BigInteger, arg6: java.math.BigInteger, arg7: java.math.BigDecimal): javax.xml.datatype.Duration;
				newDurationDayTime(arg1: native.Long): javax.xml.datatype.Duration;
				newDurationDayTime(arg1: java.lang.String): javax.xml.datatype.Duration;
				newDurationDayTime(arg1: string): javax.xml.datatype.Duration;
				newDurationDayTime(arg1: boolean, arg2: java.math.BigInteger, arg3: java.math.BigInteger, arg4: java.math.BigInteger, arg5: java.math.BigInteger): javax.xml.datatype.Duration;
				newDurationDayTime(arg1: boolean, arg2: number, arg3: number, arg4: number, arg5: number): javax.xml.datatype.Duration;
				newDurationYearMonth(arg1: java.lang.String): javax.xml.datatype.Duration;
				newDurationYearMonth(arg1: string): javax.xml.datatype.Duration;
				newDurationYearMonth(arg1: boolean, arg2: number, arg3: number): javax.xml.datatype.Duration;
				newDurationYearMonth(arg1: boolean, arg2: java.math.BigInteger, arg3: java.math.BigInteger): javax.xml.datatype.Duration;
				newDurationYearMonth(arg1: native.Long): javax.xml.datatype.Duration;
				newXMLGregorianCalendar(arg1: java.lang.String): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendar(arg1: string): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendar(arg1: java.util.GregorianCalendar): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendar(arg1: java.math.BigInteger, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: java.math.BigDecimal, arg8: number): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendar(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendar(): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendarDate(arg1: number, arg2: number, arg3: number, arg4: number): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendarTime(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendarTime(arg1: number, arg2: number, arg3: number, arg4: number): javax.xml.datatype.XMLGregorianCalendar;
				newXMLGregorianCalendarTime(arg1: number, arg2: number, arg3: number, arg4: java.math.BigDecimal, arg5: number): javax.xml.datatype.XMLGregorianCalendar;
				static newInstance(arg1: java.lang.String, arg2: java.lang.ClassLoader): javax.xml.datatype.DatatypeFactory;
				static newInstance(arg1: string, arg2: java.lang.ClassLoader): javax.xml.datatype.DatatypeFactory;
				static newInstance(): javax.xml.datatype.DatatypeFactory;
			}
			export class DatatypeConstants extends java.lang.Object {
				static JANUARY: number;
				static FEBRUARY: number;
				static MARCH: number;
				static APRIL: number;
				static MAY: number;
				static JUNE: number;
				static JULY: number;
				static AUGUST: number;
				static SEPTEMBER: number;
				static OCTOBER: number;
				static NOVEMBER: number;
				static DECEMBER: number;
				static LESSER: number;
				static EQUAL: number;
				static GREATER: number;
				static INDETERMINATE: number;
				static FIELD_UNDEFINED: number;
				static YEARS: javax.xml.datatype.DatatypeConstants.Field;
				static MONTHS: javax.xml.datatype.DatatypeConstants.Field;
				static DAYS: javax.xml.datatype.DatatypeConstants.Field;
				static HOURS: javax.xml.datatype.DatatypeConstants.Field;
				static MINUTES: javax.xml.datatype.DatatypeConstants.Field;
				static SECONDS: javax.xml.datatype.DatatypeConstants.Field;
				static DATETIME: javax.xml.namespace.QName;
				static TIME: javax.xml.namespace.QName;
				static DATE: javax.xml.namespace.QName;
				static GYEARMONTH: javax.xml.namespace.QName;
				static GMONTHDAY: javax.xml.namespace.QName;
				static GYEAR: javax.xml.namespace.QName;
				static GMONTH: javax.xml.namespace.QName;
				static GDAY: javax.xml.namespace.QName;
				static DURATION: javax.xml.namespace.QName;
				static DURATION_DAYTIME: javax.xml.namespace.QName;
				static DURATION_YEARMONTH: javax.xml.namespace.QName;
				static MAX_TIMEZONE_OFFSET: number;
				static MIN_TIMEZONE_OFFSET: number;
				static class: java.lang.Class<javax.xml.datatype.DatatypeConstants>;
			}
			export module DatatypeConstants {
				export class Field extends java.lang.Object {
					static class: java.lang.Class<javax.xml.datatype.DatatypeConstants.Field>;
					toString(): string;
					getId(): number;
				}
			}
			export class DatatypeConfigurationException extends java.lang.Exception {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<javax.xml.datatype.DatatypeConfigurationException>;
			}
		}
		export module namespace {
			export interface INamespaceContext {
				getPrefixes(arg1: string): java.util.IIterator<any>;
				getNamespaceURI(arg1: string): string;
				getPrefix(arg1: string): string;
			}
			export class QName extends java.lang.Object implements java.io.ISerializable {
				constructor(arg1: java.lang.String, arg2: java.lang.String);
				constructor(arg1: string, arg2: string);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
				constructor(arg1: string, arg2: string, arg3: string);
				static class: java.lang.Class<javax.xml.namespace.QName>;
				getLocalPart(): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				static valueOf(arg1: java.lang.String): javax.xml.namespace.QName;
				static valueOf(arg1: string): javax.xml.namespace.QName;
				getNamespaceURI(): string;
				getPrefix(): string;
			}
			export class NamespaceContext implements javax.xml.namespace.INamespaceContext {
				constructor(implementation: javax.xml.namespace.INamespaceContext);
				getPrefixes(arg1: java.lang.String): java.util.IIterator<any>;
				getPrefixes(arg1: string): java.util.IIterator<any>;
				getNamespaceURI(arg1: java.lang.String): string;
				getNamespaceURI(arg1: string): string;
				getPrefix(arg1: java.lang.String): string;
				getPrefix(arg1: string): string;
			}
		}
		export module xpath {
			export interface IXPathVariableResolver {
				resolveVariable(arg1: javax.xml.namespace.QName): any;
			}
			export class XPathException extends java.lang.Exception {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.Throwable);
				static class: java.lang.Class<javax.xml.xpath.XPathException>;
				getCause(): java.lang.Throwable;
				printStackTrace(arg1: java.io.PrintWriter): void;
				printStackTrace(): void;
				printStackTrace(arg1: java.io.PrintStream): void;
			}
			export interface IXPath {
				setXPathFunctionResolver(arg1: javax.xml.xpath.IXPathFunctionResolver): void;
				setXPathVariableResolver(arg1: javax.xml.xpath.IXPathVariableResolver): void;
				getNamespaceContext(): javax.xml.namespace.INamespaceContext;
				getXPathFunctionResolver(): javax.xml.xpath.IXPathFunctionResolver;
				getXPathVariableResolver(): javax.xml.xpath.IXPathVariableResolver;
				setNamespaceContext(arg1: javax.xml.namespace.INamespaceContext): void;
				compile(arg1: string): javax.xml.xpath.IXPathExpression;
				reset(): void;
				evaluate(arg1: string, arg2: org.xml.sax.InputSource): string;
				evaluate(arg1: string, arg2: org.xml.sax.InputSource, arg3: javax.xml.namespace.QName): any;
				evaluate(arg1: string, arg2: any): string;
				evaluate(arg1: string, arg2: any, arg3: javax.xml.namespace.QName): any;
			}
			export interface IXPathFunction {
				evaluate(arg1: java.util.IList<any>): any;
			}
			export class XPathConstants extends java.lang.Object {
				static NUMBER: javax.xml.namespace.QName;
				static STRING: javax.xml.namespace.QName;
				static BOOLEAN: javax.xml.namespace.QName;
				static NODESET: javax.xml.namespace.QName;
				static NODE: javax.xml.namespace.QName;
				static DOM_OBJECT_MODEL: java.lang.String;
				static class: java.lang.Class<javax.xml.xpath.XPathConstants>;
			}
			export class XPathVariableResolver implements javax.xml.xpath.IXPathVariableResolver {
				constructor(implementation: javax.xml.xpath.IXPathVariableResolver);
				resolveVariable(arg1: javax.xml.namespace.QName): any;
			}
			export class XPathFactoryConfigurationException extends javax.xml.xpath.XPathException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.Throwable);
				static class: java.lang.Class<javax.xml.xpath.XPathFactoryConfigurationException>;
			}
			export class XPathExpressionException extends javax.xml.xpath.XPathException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.Throwable);
				static class: java.lang.Class<javax.xml.xpath.XPathExpressionException>;
			}
			export class XPathFunction implements javax.xml.xpath.IXPathFunction {
				constructor(implementation: javax.xml.xpath.IXPathFunction);
				evaluate(arg1: java.util.IList<any>): any;
			}
			export interface IXPathExpression {
				evaluate(arg1: org.xml.sax.InputSource): string;
				evaluate(arg1: org.xml.sax.InputSource, arg2: javax.xml.namespace.QName): any;
				evaluate(arg1: any): string;
				evaluate(arg1: any, arg2: javax.xml.namespace.QName): any;
			}
			export class XPathExpression implements javax.xml.xpath.IXPathExpression {
				constructor(implementation: javax.xml.xpath.IXPathExpression);
				evaluate(arg1: org.xml.sax.InputSource): string;
				evaluate(arg1: org.xml.sax.InputSource, arg2: javax.xml.namespace.QName): any;
				evaluate(arg1: any): string;
				evaluate(arg1: any, arg2: javax.xml.namespace.QName): any;
			}
			export interface IXPathFunctionResolver {
				resolveFunction(arg1: javax.xml.namespace.QName, arg2: number): javax.xml.xpath.IXPathFunction;
			}
			export class XPath implements javax.xml.xpath.IXPath {
				constructor(implementation: javax.xml.xpath.IXPath);
				XPathVariableResolver: javax.xml.xpath.IXPathVariableResolver;
				NamespaceContext: javax.xml.namespace.INamespaceContext;
				XPathFunctionResolver: javax.xml.xpath.IXPathFunctionResolver;
				setXPathFunctionResolver(arg1: javax.xml.xpath.IXPathFunctionResolver): void;
				setXPathVariableResolver(arg1: javax.xml.xpath.IXPathVariableResolver): void;
				getNamespaceContext(): javax.xml.namespace.INamespaceContext;
				getXPathFunctionResolver(): javax.xml.xpath.IXPathFunctionResolver;
				getXPathVariableResolver(): javax.xml.xpath.IXPathVariableResolver;
				setNamespaceContext(arg1: javax.xml.namespace.INamespaceContext): void;
				compile(arg1: java.lang.String): javax.xml.xpath.IXPathExpression;
				compile(arg1: string): javax.xml.xpath.IXPathExpression;
				reset(): void;
				evaluate(arg1: java.lang.String, arg2: org.xml.sax.InputSource): string;
				evaluate(arg1: string, arg2: org.xml.sax.InputSource): string;
				evaluate(arg1: java.lang.String, arg2: org.xml.sax.InputSource, arg3: javax.xml.namespace.QName): any;
				evaluate(arg1: string, arg2: org.xml.sax.InputSource, arg3: javax.xml.namespace.QName): any;
				evaluate(arg1: java.lang.String, arg2: any): string;
				evaluate(arg1: string, arg2: any): string;
				evaluate(arg1: java.lang.String, arg2: any, arg3: javax.xml.namespace.QName): any;
				evaluate(arg1: string, arg2: any, arg3: javax.xml.namespace.QName): any;
			}
			export class XPathFactory extends java.lang.Object {
				static DEFAULT_PROPERTY_NAME: java.lang.String;
				static DEFAULT_OBJECT_MODEL_URI: java.lang.String;
				static class: java.lang.Class<javax.xml.xpath.XPathFactory>;
				isObjectModelSupported(arg1: java.lang.String): boolean;
				isObjectModelSupported(arg1: string): boolean;
				newXPath(): javax.xml.xpath.IXPath;
				setXPathFunctionResolver(arg1: javax.xml.xpath.IXPathFunctionResolver): void;
				setXPathVariableResolver(arg1: javax.xml.xpath.IXPathVariableResolver): void;
				static newInstance(arg1: java.lang.String): javax.xml.xpath.XPathFactory;
				static newInstance(arg1: string): javax.xml.xpath.XPathFactory;
				static newInstance(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.ClassLoader): javax.xml.xpath.XPathFactory;
				static newInstance(arg1: string, arg2: string, arg3: java.lang.ClassLoader): javax.xml.xpath.XPathFactory;
				static newInstance(): javax.xml.xpath.XPathFactory;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
			}
			export class XPathFunctionResolver implements javax.xml.xpath.IXPathFunctionResolver {
				constructor(implementation: javax.xml.xpath.IXPathFunctionResolver);
				resolveFunction(arg1: javax.xml.namespace.QName, arg2: number): javax.xml.xpath.IXPathFunction;
			}
			export class XPathFunctionException extends javax.xml.xpath.XPathExpressionException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.Throwable);
				static class: java.lang.Class<javax.xml.xpath.XPathFunctionException>;
			}
		}
	}
	export module security {
		export module cert {
			export class CertificateExpiredException extends javax.security.cert.CertificateException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.security.cert.CertificateExpiredException>;
			}
			export class CertificateNotYetValidException extends javax.security.cert.CertificateException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.security.cert.CertificateNotYetValidException>;
			}
			export class X509Certificate extends javax.security.cert.Certificate {
				constructor();
				static class: java.lang.Class<javax.security.cert.X509Certificate>;
				checkValidity(arg1: java.util.Date): void;
				checkValidity(): void;
				getSigAlgName(): string;
				getSigAlgOID(): string;
				getSigAlgParams(): native.Array<native.Byte>;
				getNotAfter(): java.util.Date;
				getNotBefore(): java.util.Date;
				static getInstance(arg1: native.Array<native.Byte>): javax.security.cert.X509Certificate;
				static getInstance(arg1: java.io.InputStream): javax.security.cert.X509Certificate;
				getIssuerDN(): java.security.IPrincipal;
				getSubjectDN(): java.security.IPrincipal;
				getVersion(): number;
				getSerialNumber(): java.math.BigInteger;
			}
			export class CertificateEncodingException extends javax.security.cert.CertificateException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.security.cert.CertificateEncodingException>;
			}
			export class CertificateParsingException extends javax.security.cert.CertificateException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.security.cert.CertificateParsingException>;
			}
			export class Certificate extends java.lang.Object {
				constructor();
				static class: java.lang.Class<javax.security.cert.Certificate>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getEncoded(): native.Array<native.Byte>;
				getPublicKey(): java.security.IPublicKey;
				verify(arg1: java.security.IPublicKey, arg2: java.lang.String): void;
				verify(arg1: java.security.IPublicKey, arg2: string): void;
				verify(arg1: java.security.IPublicKey): void;
			}
			export class CertificateException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.security.cert.CertificateException>;
			}
		}
		export module auth {
			export class DestroyFailedException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.security.auth.DestroyFailedException>;
			}
			export class SubjectDomainCombiner extends java.lang.Object implements java.security.IDomainCombiner {
				constructor(arg1: javax.security.auth.Subject);
				static class: java.lang.Class<javax.security.auth.SubjectDomainCombiner>;
				getSubject(): javax.security.auth.Subject;
				combine(arg1: native.Array<java.security.ProtectionDomain>, arg2: native.Array<java.security.ProtectionDomain>): native.Array<java.security.ProtectionDomain>;
			}
			export class Subject extends java.lang.Object implements java.io.ISerializable {
				constructor();
				constructor(arg1: boolean, arg2: java.util.ISet<any>, arg3: java.util.ISet<any>, arg4: java.util.ISet<any>);
				static class: java.lang.Class<javax.security.auth.Subject>;
				static getSubject(arg1: java.security.AccessControlContext): javax.security.auth.Subject;
				static doAs<T>(arg1: javax.security.auth.Subject, arg2: java.security.IPrivilegedExceptionAction<T>): T;
				static doAs<T>(arg1: javax.security.auth.Subject, arg2: java.security.IPrivilegedAction<T>): T;
				static doAsPrivileged<T>(arg1: javax.security.auth.Subject, arg2: java.security.IPrivilegedAction<T>, arg3: java.security.AccessControlContext): T;
				static doAsPrivileged<T>(arg1: javax.security.auth.Subject, arg2: java.security.IPrivilegedExceptionAction<T>, arg3: java.security.AccessControlContext): T;
				getPrivateCredentials(): java.util.ISet<any>;
				getPrivateCredentials<T>(arg1: java.lang.Class<T>): java.util.ISet<T>;
				getPublicCredentials(): java.util.ISet<any>;
				getPublicCredentials<T>(arg1: java.lang.Class<T>): java.util.ISet<T>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getPrincipals<T extends java.security.IPrincipal>(arg1: java.lang.Class<T>): java.util.ISet<T>;
				getPrincipals(): java.util.ISet<java.security.IPrincipal>;
				setReadOnly(): void;
				isReadOnly(): boolean;
			}
			export module callback {
				export interface ICallback {
				}
				export class UnsupportedCallbackException extends java.lang.Exception {
					constructor(arg1: javax.security.auth.callback.ICallback, arg2: java.lang.String);
					constructor(arg1: javax.security.auth.callback.ICallback, arg2: string);
					constructor(arg1: javax.security.auth.callback.ICallback);
					static class: java.lang.Class<javax.security.auth.callback.UnsupportedCallbackException>;
					getCallback(): javax.security.auth.callback.ICallback;
				}
				export class Callback implements javax.security.auth.callback.ICallback {
					constructor(implementation: javax.security.auth.callback.ICallback);
				}
				export class PasswordCallback extends java.lang.Object implements javax.security.auth.callback.ICallback, java.io.ISerializable {
					constructor(arg1: java.lang.String, arg2: boolean);
					constructor(arg1: string, arg2: boolean);
					static class: java.lang.Class<javax.security.auth.callback.PasswordCallback>;
					Password: native.Array<string>;
					clearPassword(): void;
					getPrompt(): string;
					setPassword(arg1: native.Array<string>): void;
					isEchoOn(): boolean;
					getPassword(): native.Array<string>;
				}
				export class CallbackHandler implements javax.security.auth.callback.ICallbackHandler {
					constructor(implementation: javax.security.auth.callback.ICallbackHandler);
					handle(arg1: native.Array<javax.security.auth.callback.ICallback>): void;
				}
				export interface ICallbackHandler {
					handle(arg1: native.Array<javax.security.auth.callback.ICallback>): void;
				}
			}
			export class Destroyable implements javax.security.auth.IDestroyable {
				constructor(implementation: javax.security.auth.IDestroyable);
				destroy(): void;
				isDestroyed(): boolean;
			}
			export interface IDestroyable {
				destroy(): void;
				isDestroyed(): boolean;
			}
			export class AuthPermission extends java.security.BasicPermission {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.String);
				constructor(arg1: string, arg2: string);
				static class: java.lang.Class<javax.security.auth.AuthPermission>;
			}
			export class PrivateCredentialPermission extends java.security.Permission {
				constructor(arg1: java.lang.String, arg2: java.lang.String);
				constructor(arg1: string, arg2: string);
				static class: java.lang.Class<javax.security.auth.PrivateCredentialPermission>;
				getCredentialClass(): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				getActions(): string;
				getPrincipals(): native.Array<native.Array<java.lang.String>>;
				implies(arg1: java.security.Permission): boolean;
				newPermissionCollection(): java.security.PermissionCollection;
			}
			export module login {
				export class LoginException extends java.security.GeneralSecurityException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static class: java.lang.Class<javax.security.auth.login.LoginException>;
				}
			}
			export module x500 {
				export class X500Principal extends java.lang.Object implements java.security.IPrincipal, java.io.ISerializable {
					constructor(arg1: java.io.InputStream);
					constructor(arg1: native.Array<native.Byte>);
					constructor(arg1: java.lang.String, arg2: java.util.IMap<string, string>);
					constructor(arg1: string, arg2: java.util.IMap<string, string>);
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static RFC1779: java.lang.String;
					static RFC2253: java.lang.String;
					static CANONICAL: java.lang.String;
					static class: java.lang.Class<javax.security.auth.x500.X500Principal>;
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					getName(arg1: java.lang.String): string;
					getName(arg1: string): string;
					getName(arg1: java.lang.String, arg2: java.util.IMap<string, string>): string;
					getName(arg1: string, arg2: java.util.IMap<string, string>): string;
					getName(): string;
					getEncoded(): native.Array<native.Byte>;
				}
			}
		}
	}
	export module crypto {
		export module spec {
			export class RC2ParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: number);
				constructor(arg1: number, arg2: native.Array<native.Byte>, arg3: number);
				constructor(arg1: number, arg2: native.Array<native.Byte>);
				static class: java.lang.Class<javax.crypto.spec.RC2ParameterSpec>;
				getEffectiveKeyBits(): number;
				getIV(): native.Array<native.Byte>;
				hashCode(): number;
				equals(arg1: any): boolean;
			}
			export class DHGenParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: number, arg2: number);
				static class: java.lang.Class<javax.crypto.spec.DHGenParameterSpec>;
				getPrimeSize(): number;
				getExponentSize(): number;
			}
			export class PBEKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: native.Array<string>);
				constructor(arg1: native.Array<string>, arg2: native.Array<native.Byte>, arg3: number);
				constructor(arg1: native.Array<string>, arg2: native.Array<native.Byte>, arg3: number, arg4: number);
				static class: java.lang.Class<javax.crypto.spec.PBEKeySpec>;
				clearPassword(): void;
				getSalt(): native.Array<native.Byte>;
				getIterationCount(): number;
				getKeyLength(): number;
				getPassword(): native.Array<string>;
			}
			export class PSource extends java.lang.Object {
				static class: java.lang.Class<javax.crypto.spec.PSource>;
				getAlgorithm(): string;
			}
			export module PSource {
				export class PSpecified extends javax.crypto.spec.PSource {
					constructor(arg1: native.Array<native.Byte>);
					static DEFAULT: javax.crypto.spec.PSource.PSpecified;
					static class: java.lang.Class<javax.crypto.spec.PSource.PSpecified>;
					getValue(): native.Array<native.Byte>;
				}
			}
			export class OAEPParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.security.spec.IAlgorithmParameterSpec, arg4: javax.crypto.spec.PSource);
				constructor(arg1: string, arg2: string, arg3: java.security.spec.IAlgorithmParameterSpec, arg4: javax.crypto.spec.PSource);
				static DEFAULT: javax.crypto.spec.OAEPParameterSpec;
				static class: java.lang.Class<javax.crypto.spec.OAEPParameterSpec>;
				getDigestAlgorithm(): string;
				getMGFAlgorithm(): string;
				getMGFParameters(): java.security.spec.IAlgorithmParameterSpec;
				getPSource(): javax.crypto.spec.PSource;
			}
			export class DESedeKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: native.Array<native.Byte>);
				constructor(arg1: native.Array<native.Byte>, arg2: number);
				static DES_EDE_KEY_LEN: number;
				static class: java.lang.Class<javax.crypto.spec.DESedeKeySpec>;
				static isParityAdjusted(arg1: native.Array<native.Byte>, arg2: number): boolean;
				getKey(): native.Array<native.Byte>;
			}
			export class PBEParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: native.Array<native.Byte>, arg2: number);
				static class: java.lang.Class<javax.crypto.spec.PBEParameterSpec>;
				getSalt(): native.Array<native.Byte>;
				getIterationCount(): number;
			}
			export class DHPublicKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger);
				static class: java.lang.Class<javax.crypto.spec.DHPublicKeySpec>;
				getY(): java.math.BigInteger;
				getG(): java.math.BigInteger;
				getP(): java.math.BigInteger;
			}
			export class DESKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: native.Array<native.Byte>);
				constructor(arg1: native.Array<native.Byte>, arg2: number);
				static DES_KEY_LEN: number;
				static class: java.lang.Class<javax.crypto.spec.DESKeySpec>;
				static isParityAdjusted(arg1: native.Array<native.Byte>, arg2: number): boolean;
				static isWeak(arg1: native.Array<native.Byte>, arg2: number): boolean;
				getKey(): native.Array<native.Byte>;
			}
			export class DHPrivateKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger);
				static class: java.lang.Class<javax.crypto.spec.DHPrivateKeySpec>;
				getX(): java.math.BigInteger;
				getG(): java.math.BigInteger;
				getP(): java.math.BigInteger;
			}
			export class SecretKeySpec extends java.lang.Object implements java.security.spec.IKeySpec, javax.crypto.ISecretKey {
				constructor(arg1: native.Array<native.Byte>, arg2: java.lang.String);
				constructor(arg1: native.Array<native.Byte>, arg2: string);
				constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: java.lang.String);
				constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: string);
				static class: java.lang.Class<javax.crypto.spec.SecretKeySpec>;
				hashCode(): number;
				equals(arg1: any): boolean;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export class DHParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger);
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: number);
				static class: java.lang.Class<javax.crypto.spec.DHParameterSpec>;
				getL(): number;
				getG(): java.math.BigInteger;
				getP(): java.math.BigInteger;
			}
			export class RC5ParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: number, arg2: number, arg3: number);
				constructor(arg1: number, arg2: number, arg3: number, arg4: native.Array<native.Byte>);
				constructor(arg1: number, arg2: number, arg3: number, arg4: native.Array<native.Byte>, arg5: number);
				static class: java.lang.Class<javax.crypto.spec.RC5ParameterSpec>;
				getIV(): native.Array<native.Byte>;
				getRounds(): number;
				getWordSize(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				getVersion(): number;
			}
			export class IvParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number);
				constructor(arg1: native.Array<native.Byte>);
				static class: java.lang.Class<javax.crypto.spec.IvParameterSpec>;
				getIV(): native.Array<native.Byte>;
			}
		}
		export class CipherOutputStream extends java.io.FilterOutputStream {
			constructor(arg1: java.io.OutputStream, arg2: javax.crypto.Cipher);
			static class: java.lang.Class<javax.crypto.CipherOutputStream>;
			write(arg1: native.Array<native.Byte>): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			close(): void;
			flush(): void;
		}
		export class NullCipher extends javax.crypto.Cipher {
			constructor();
			static class: java.lang.Class<javax.crypto.NullCipher>;
		}
		export class IllegalBlockSizeException extends java.security.GeneralSecurityException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<javax.crypto.IllegalBlockSizeException>;
		}
		export class SecretKeyFactorySpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<javax.crypto.SecretKeyFactorySpi>;
		}
		export class ShortBufferException extends java.security.GeneralSecurityException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<javax.crypto.ShortBufferException>;
		}
		export class KeyAgreement extends java.lang.Object {
			static class: java.lang.Class<javax.crypto.KeyAgreement>;
			doPhase(arg1: java.security.IKey, arg2: boolean): java.security.IKey;
			generateSecret(arg1: native.Array<native.Byte>, arg2: number): number;
			generateSecret(): native.Array<native.Byte>;
			generateSecret(arg1: java.lang.String): javax.crypto.ISecretKey;
			generateSecret(arg1: string): javax.crypto.ISecretKey;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.crypto.KeyAgreement;
			static getInstance(arg1: string, arg2: string): javax.crypto.KeyAgreement;
			static getInstance(arg1: java.lang.String): javax.crypto.KeyAgreement;
			static getInstance(arg1: string): javax.crypto.KeyAgreement;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.crypto.KeyAgreement;
			static getInstance(arg1: string, arg2: java.security.Provider): javax.crypto.KeyAgreement;
			init(arg1: java.security.IKey, arg2: java.security.spec.IAlgorithmParameterSpec): void;
			init(arg1: java.security.IKey, arg2: java.security.spec.IAlgorithmParameterSpec, arg3: java.security.SecureRandom): void;
			init(arg1: java.security.IKey, arg2: java.security.SecureRandom): void;
			init(arg1: java.security.IKey): void;
			getProvider(): java.security.Provider;
			getAlgorithm(): string;
		}
		export class ExemptionMechanismException extends java.security.GeneralSecurityException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<javax.crypto.ExemptionMechanismException>;
		}
		export class SealedObject extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.io.ISerializable, arg2: javax.crypto.Cipher);
			constructor(arg1: string, arg2: javax.crypto.Cipher);
			static class: java.lang.Class<javax.crypto.SealedObject>;
			getObject(arg1: javax.crypto.Cipher): any;
			getObject(arg1: java.security.IKey, arg2: java.lang.String): any;
			getObject(arg1: java.security.IKey, arg2: string): any;
			getObject(arg1: java.security.IKey): any;
			getAlgorithm(): string;
		}
		export class Cipher extends java.lang.Object {
			static ENCRYPT_MODE: number;
			static DECRYPT_MODE: number;
			static WRAP_MODE: number;
			static UNWRAP_MODE: number;
			static PUBLIC_KEY: number;
			static PRIVATE_KEY: number;
			static SECRET_KEY: number;
			static class: java.lang.Class<javax.crypto.Cipher>;
			getBlockSize(): number;
			getOutputSize(arg1: number): number;
			doFinal(arg1: native.Array<native.Byte>, arg2: number, arg3: number): native.Array<native.Byte>;
			doFinal(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: native.Array<native.Byte>): number;
			doFinal(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: native.Array<native.Byte>, arg5: number): number;
			doFinal(arg1: java.nio.ByteBuffer, arg2: java.nio.ByteBuffer): number;
			doFinal(arg1: native.Array<native.Byte>, arg2: number): number;
			doFinal(): native.Array<native.Byte>;
			doFinal(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
			getIV(): native.Array<native.Byte>;
			getExemptionMechanism(): javax.crypto.ExemptionMechanism;
			static getMaxAllowedKeyLength(arg1: java.lang.String): number;
			static getMaxAllowedKeyLength(arg1: string): number;
			static getMaxAllowedParameterSpec(arg1: java.lang.String): java.security.spec.IAlgorithmParameterSpec;
			static getMaxAllowedParameterSpec(arg1: string): java.security.spec.IAlgorithmParameterSpec;
			updateAAD(arg1: java.nio.ByteBuffer): void;
			updateAAD(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			updateAAD(arg1: native.Array<native.Byte>): void;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.crypto.Cipher;
			static getInstance(arg1: string, arg2: java.security.Provider): javax.crypto.Cipher;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.crypto.Cipher;
			static getInstance(arg1: string, arg2: string): javax.crypto.Cipher;
			static getInstance(arg1: java.lang.String): javax.crypto.Cipher;
			static getInstance(arg1: string): javax.crypto.Cipher;
			init(arg1: number, arg2: java.security.IKey, arg3: java.security.spec.IAlgorithmParameterSpec): void;
			init(arg1: number, arg2: java.security.IKey, arg3: java.security.AlgorithmParameters): void;
			init(arg1: number, arg2: java.security.IKey, arg3: java.security.SecureRandom): void;
			init(arg1: number, arg2: java.security.IKey): void;
			init(arg1: number, arg2: java.security.IKey, arg3: java.security.spec.IAlgorithmParameterSpec, arg4: java.security.SecureRandom): void;
			init(arg1: number, arg2: java.security.IKey, arg3: java.security.AlgorithmParameters, arg4: java.security.SecureRandom): void;
			init(arg1: number, arg2: java.security.cert.Certificate, arg3: java.security.SecureRandom): void;
			init(arg1: number, arg2: java.security.cert.Certificate): void;
			wrap(arg1: java.security.IKey): native.Array<native.Byte>;
			unwrap(arg1: native.Array<native.Byte>, arg2: java.lang.String, arg3: number): java.security.IKey;
			unwrap(arg1: native.Array<native.Byte>, arg2: string, arg3: number): java.security.IKey;
			getParameters(): java.security.AlgorithmParameters;
			getProvider(): java.security.Provider;
			update(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: native.Array<native.Byte>, arg5: number): number;
			update(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: native.Array<native.Byte>): number;
			update(arg1: java.nio.ByteBuffer, arg2: java.nio.ByteBuffer): number;
			update(arg1: native.Array<native.Byte>, arg2: number, arg3: number): native.Array<native.Byte>;
			update(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
			getAlgorithm(): string;
		}
		export class NoSuchPaddingException extends java.security.GeneralSecurityException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<javax.crypto.NoSuchPaddingException>;
		}
		export class KeyGeneratorSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<javax.crypto.KeyGeneratorSpi>;
		}
		export interface ISecretKey extends java.security.IKey {
			getEncoded(): native.Array<native.Byte>;
			getFormat(): string;
			getAlgorithm(): string;
		}
		export module ISecretKey {
			var serialVersionUID: native.Long;
		}
		export class MacSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<javax.crypto.MacSpi>;
			clone(): any;
		}
		export class BadPaddingException extends java.security.GeneralSecurityException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<javax.crypto.BadPaddingException>;
		}
		export class CipherSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<javax.crypto.CipherSpi>;
		}
		export class KeyAgreementSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<javax.crypto.KeyAgreementSpi>;
		}
		export class ExemptionMechanism extends java.lang.Object {
			static class: java.lang.Class<javax.crypto.ExemptionMechanism>;
			isCryptoAllowed(arg1: java.security.IKey): boolean;
			getOutputSize(arg1: number): number;
			genExemptionBlob(): native.Array<native.Byte>;
			genExemptionBlob(arg1: native.Array<native.Byte>, arg2: number): number;
			genExemptionBlob(arg1: native.Array<native.Byte>): number;
			getName(): string;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.crypto.ExemptionMechanism;
			static getInstance(arg1: string, arg2: java.security.Provider): javax.crypto.ExemptionMechanism;
			static getInstance(arg1: java.lang.String): javax.crypto.ExemptionMechanism;
			static getInstance(arg1: string): javax.crypto.ExemptionMechanism;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.crypto.ExemptionMechanism;
			static getInstance(arg1: string, arg2: string): javax.crypto.ExemptionMechanism;
			init(arg1: java.security.IKey): void;
			init(arg1: java.security.IKey, arg2: java.security.spec.IAlgorithmParameterSpec): void;
			init(arg1: java.security.IKey, arg2: java.security.AlgorithmParameters): void;
			getProvider(): java.security.Provider;
		}
		export class Mac extends java.lang.Object implements java.lang.ICloneable {
			static class: java.lang.Class<javax.crypto.Mac>;
			getMacLength(): number;
			doFinal(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
			doFinal(arg1: native.Array<native.Byte>, arg2: number): void;
			doFinal(): native.Array<native.Byte>;
			clone(): any;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.crypto.Mac;
			static getInstance(arg1: string, arg2: string): javax.crypto.Mac;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.crypto.Mac;
			static getInstance(arg1: string, arg2: java.security.Provider): javax.crypto.Mac;
			static getInstance(arg1: java.lang.String): javax.crypto.Mac;
			static getInstance(arg1: string): javax.crypto.Mac;
			init(arg1: java.security.IKey, arg2: java.security.spec.IAlgorithmParameterSpec): void;
			init(arg1: java.security.IKey): void;
			reset(): void;
			getProvider(): java.security.Provider;
			update(arg1: java.nio.ByteBuffer): void;
			update(arg1: native.Byte): void;
			update(arg1: native.Array<native.Byte>): void;
			update(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			getAlgorithm(): string;
		}
		export class KeyGenerator extends java.lang.Object {
			static class: java.lang.Class<javax.crypto.KeyGenerator>;
			generateKey(): javax.crypto.ISecretKey;
			static getInstance(arg1: java.lang.String): javax.crypto.KeyGenerator;
			static getInstance(arg1: string): javax.crypto.KeyGenerator;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.crypto.KeyGenerator;
			static getInstance(arg1: string, arg2: java.security.Provider): javax.crypto.KeyGenerator;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.crypto.KeyGenerator;
			static getInstance(arg1: string, arg2: string): javax.crypto.KeyGenerator;
			init(arg1: java.security.spec.IAlgorithmParameterSpec, arg2: java.security.SecureRandom): void;
			init(arg1: number, arg2: java.security.SecureRandom): void;
			init(arg1: number): void;
			init(arg1: java.security.spec.IAlgorithmParameterSpec): void;
			init(arg1: java.security.SecureRandom): void;
			getProvider(): java.security.Provider;
			getAlgorithm(): string;
		}
		export class SecretKeyFactory extends java.lang.Object {
			static class: java.lang.Class<javax.crypto.SecretKeyFactory>;
			getKeySpec(arg1: javax.crypto.ISecretKey, arg2: java.lang.Class<any>): java.security.spec.IKeySpec;
			translateKey(arg1: javax.crypto.ISecretKey): javax.crypto.ISecretKey;
			generateSecret(arg1: java.security.spec.IKeySpec): javax.crypto.ISecretKey;
			static getInstance(arg1: java.lang.String): javax.crypto.SecretKeyFactory;
			static getInstance(arg1: string): javax.crypto.SecretKeyFactory;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.crypto.SecretKeyFactory;
			static getInstance(arg1: string, arg2: string): javax.crypto.SecretKeyFactory;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.crypto.SecretKeyFactory;
			static getInstance(arg1: string, arg2: java.security.Provider): javax.crypto.SecretKeyFactory;
			getProvider(): java.security.Provider;
			getAlgorithm(): string;
		}
		export module interfaces {
			export class DHPrivateKey implements javax.crypto.interfaces.IDHKey, java.security.IPrivateKey, javax.crypto.interfaces.IDHPrivateKey {
				constructor(implementation: javax.crypto.interfaces.IDHPrivateKey);
				static serialVersionUID: native.Long;
				getX(): java.math.BigInteger;
				getParams(): javax.crypto.spec.DHParameterSpec;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export interface IDHKey {
				getParams(): javax.crypto.spec.DHParameterSpec;
			}
			export class DHKey implements javax.crypto.interfaces.IDHKey {
				constructor(implementation: javax.crypto.interfaces.IDHKey);
				getParams(): javax.crypto.spec.DHParameterSpec;
			}
			export class DHPublicKey implements javax.crypto.interfaces.IDHKey, java.security.IPublicKey, javax.crypto.interfaces.IDHPublicKey {
				constructor(implementation: javax.crypto.interfaces.IDHPublicKey);
				static serialVersionUID: native.Long;
				getY(): java.math.BigInteger;
				getParams(): javax.crypto.spec.DHParameterSpec;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export class PBEKey implements javax.crypto.ISecretKey, javax.crypto.interfaces.IPBEKey {
				constructor(implementation: javax.crypto.interfaces.IPBEKey);
				static serialVersionUID: native.Long;
				getSalt(): native.Array<native.Byte>;
				getIterationCount(): number;
				getPassword(): native.Array<string>;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export interface IDHPrivateKey extends javax.crypto.interfaces.IDHKey, java.security.IPrivateKey {
				getX(): java.math.BigInteger;
				getParams(): javax.crypto.spec.DHParameterSpec;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export module IDHPrivateKey {
				var serialVersionUID: native.Long;
			}
			export interface IPBEKey extends javax.crypto.ISecretKey {
				getSalt(): native.Array<native.Byte>;
				getIterationCount(): number;
				getPassword(): native.Array<string>;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export module IPBEKey {
				var serialVersionUID: native.Long;
			}
			export interface IDHPublicKey extends javax.crypto.interfaces.IDHKey, java.security.IPublicKey {
				getY(): java.math.BigInteger;
				getParams(): javax.crypto.spec.DHParameterSpec;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export module IDHPublicKey {
				var serialVersionUID: native.Long;
			}
		}
		export class SecretKey implements java.security.IKey, javax.crypto.ISecretKey {
			constructor(implementation: javax.crypto.ISecretKey);
			static serialVersionUID: native.Long;
			getEncoded(): native.Array<native.Byte>;
			getFormat(): string;
			getAlgorithm(): string;
		}
		export class EncryptedPrivateKeyInfo extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: native.Array<native.Byte>);
			constructor(arg1: string, arg2: native.Array<native.Byte>);
			constructor(arg1: native.Array<native.Byte>);
			constructor(arg1: java.security.AlgorithmParameters, arg2: native.Array<native.Byte>);
			static class: java.lang.Class<javax.crypto.EncryptedPrivateKeyInfo>;
			getKeySpec(arg1: javax.crypto.Cipher): java.security.spec.PKCS8EncodedKeySpec;
			getKeySpec(arg1: java.security.IKey, arg2: java.security.Provider): java.security.spec.PKCS8EncodedKeySpec;
			getKeySpec(arg1: java.security.IKey, arg2: java.lang.String): java.security.spec.PKCS8EncodedKeySpec;
			getKeySpec(arg1: java.security.IKey, arg2: string): java.security.spec.PKCS8EncodedKeySpec;
			getKeySpec(arg1: java.security.IKey): java.security.spec.PKCS8EncodedKeySpec;
			getAlgName(): string;
			getAlgParameters(): java.security.AlgorithmParameters;
			getEncryptedData(): native.Array<native.Byte>;
			getEncoded(): native.Array<native.Byte>;
		}
		export class CipherInputStream extends java.io.FilterInputStream {
			constructor(arg1: java.io.InputStream, arg2: javax.crypto.Cipher);
			static class: java.lang.Class<javax.crypto.CipherInputStream>;
			close(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			read(arg1: native.Array<native.Byte>): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
		}
		export class ExemptionMechanismSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<javax.crypto.ExemptionMechanismSpi>;
		}
	}
	export module net {
		export class SocketFactory extends java.lang.Object {
			static class: java.lang.Class<javax.net.SocketFactory>;
			createSocket(arg1: java.net.InetAddress, arg2: number): java.net.Socket;
			createSocket(arg1: java.lang.String, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
			createSocket(arg1: string, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
			createSocket(arg1: java.net.InetAddress, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
			createSocket(arg1: java.lang.String, arg2: number): java.net.Socket;
			createSocket(arg1: string, arg2: number): java.net.Socket;
			createSocket(): java.net.Socket;
			static getDefault(): javax.net.SocketFactory;
		}
		export class ServerSocketFactory extends java.lang.Object {
			static class: java.lang.Class<javax.net.ServerSocketFactory>;
			createServerSocket(arg1: number, arg2: number): java.net.ServerSocket;
			createServerSocket(arg1: number, arg2: number, arg3: java.net.InetAddress): java.net.ServerSocket;
			createServerSocket(): java.net.ServerSocket;
			createServerSocket(arg1: number): java.net.ServerSocket;
			static getDefault(): javax.net.ServerSocketFactory;
		}
		export module ssl {
			export class SSLServerSocket extends java.net.ServerSocket {
				static class: java.lang.Class<javax.net.ssl.SSLServerSocket>;
				SSLParameters: javax.net.ssl.SSLParameters;
				EnabledCipherSuites: native.Array<java.lang.String>;
				UseClientMode: boolean;
				EnableSessionCreation: boolean;
				NeedClientAuth: boolean;
				WantClientAuth: boolean;
				EnabledProtocols: native.Array<java.lang.String>;
				getEnableSessionCreation(): boolean;
				getEnabledCipherSuites(): native.Array<java.lang.String>;
				getEnabledProtocols(): native.Array<java.lang.String>;
				getNeedClientAuth(): boolean;
				getSSLParameters(): javax.net.ssl.SSLParameters;
				getSupportedProtocols(): native.Array<java.lang.String>;
				getUseClientMode(): boolean;
				getWantClientAuth(): boolean;
				setEnableSessionCreation(arg1: boolean): void;
				setEnabledCipherSuites(arg1: native.Array<java.lang.String>): void;
				setEnabledProtocols(arg1: native.Array<java.lang.String>): void;
				setNeedClientAuth(arg1: boolean): void;
				setSSLParameters(arg1: javax.net.ssl.SSLParameters): void;
				setUseClientMode(arg1: boolean): void;
				setWantClientAuth(arg1: boolean): void;
				getSupportedCipherSuites(): native.Array<java.lang.String>;
			}
			export class TrustManagerFactorySpi extends java.lang.Object {
				constructor();
				static class: java.lang.Class<javax.net.ssl.TrustManagerFactorySpi>;
			}
			export class SSLSessionContext implements javax.net.ssl.ISSLSessionContext {
				constructor(implementation: javax.net.ssl.ISSLSessionContext);
				SessionTimeout: number;
				SessionCacheSize: number;
				getSession(arg1: native.Array<native.Byte>): javax.net.ssl.ISSLSession;
				getIds(): java.util.IEnumeration<native.Array<native.Byte>>;
				getSessionCacheSize(): number;
				getSessionTimeout(): number;
				setSessionCacheSize(arg1: number): void;
				setSessionTimeout(arg1: number): void;
			}
			export class SSLEngineResult extends java.lang.Object {
				constructor(arg1: javax.net.ssl.SSLEngineResult.Status, arg2: javax.net.ssl.SSLEngineResult.HandshakeStatus, arg3: number, arg4: number);
				static class: java.lang.Class<javax.net.ssl.SSLEngineResult>;
				bytesConsumed(): number;
				bytesProduced(): number;
				getHandshakeStatus(): javax.net.ssl.SSLEngineResult.HandshakeStatus;
				toString(): string;
				getStatus(): javax.net.ssl.SSLEngineResult.Status;
			}
			export module SSLEngineResult {
				export enum Status {
					BUFFER_UNDERFLOW,
					BUFFER_OVERFLOW,
					OK,
					CLOSED
				}
				export module Status {
					export function valueOf(arg1: java.lang.String): javax.net.ssl.SSLEngineResult.Status;
					export function valueOf(arg1: string): javax.net.ssl.SSLEngineResult.Status;
					export function values(): native.Array<javax.net.ssl.SSLEngineResult.Status>;
				}
				export enum HandshakeStatus {
					NOT_HANDSHAKING,
					FINISHED,
					NEED_TASK,
					NEED_WRAP,
					NEED_UNWRAP
				}
				export module HandshakeStatus {
					export function valueOf(arg1: java.lang.String): javax.net.ssl.SSLEngineResult.HandshakeStatus;
					export function valueOf(arg1: string): javax.net.ssl.SSLEngineResult.HandshakeStatus;
					export function values(): native.Array<javax.net.ssl.SSLEngineResult.HandshakeStatus>;
				}
			}
			export interface ISSLSessionContext {
				getSession(arg1: native.Array<native.Byte>): javax.net.ssl.ISSLSession;
				getIds(): java.util.IEnumeration<native.Array<native.Byte>>;
				getSessionCacheSize(): number;
				getSessionTimeout(): number;
				setSessionCacheSize(arg1: number): void;
				setSessionTimeout(arg1: number): void;
			}
			export class X509ExtendedKeyManager extends java.lang.Object implements javax.net.ssl.IX509KeyManager {
				static class: java.lang.Class<javax.net.ssl.X509ExtendedKeyManager>;
				chooseEngineClientAlias(arg1: native.Array<java.lang.String>, arg2: native.Array<java.security.IPrincipal>, arg3: javax.net.ssl.SSLEngine): string;
				chooseEngineServerAlias(arg1: java.lang.String, arg2: native.Array<java.security.IPrincipal>, arg3: javax.net.ssl.SSLEngine): string;
				chooseEngineServerAlias(arg1: string, arg2: native.Array<java.security.IPrincipal>, arg3: javax.net.ssl.SSLEngine): string;
				getPrivateKey(arg1: string): java.security.IPrivateKey;
				chooseClientAlias(arg1: native.Array<java.lang.String>, arg2: native.Array<java.security.IPrincipal>, arg3: java.net.Socket): string;
				chooseServerAlias(arg1: string, arg2: native.Array<java.security.IPrincipal>, arg3: java.net.Socket): string;
				getClientAliases(arg1: string, arg2: native.Array<java.security.IPrincipal>): native.Array<java.lang.String>;
				getServerAliases(arg1: string, arg2: native.Array<java.security.IPrincipal>): native.Array<java.lang.String>;
				getCertificateChain(arg1: string): native.Array<java.security.cert.X509Certificate>;
			}
			export class SSLException extends java.io.IOException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.Throwable);
				static class: java.lang.Class<javax.net.ssl.SSLException>;
			}
			export class SSLEngine extends java.lang.Object {
				static class: java.lang.Class<javax.net.ssl.SSLEngine>;
				NeedClientAuth: boolean;
				EnabledProtocols: native.Array<java.lang.String>;
				EnabledCipherSuites: native.Array<java.lang.String>;
				SSLParameters: javax.net.ssl.SSLParameters;
				UseClientMode: boolean;
				EnableSessionCreation: boolean;
				WantClientAuth: boolean;
				beginHandshake(): void;
				closeInbound(): void;
				closeOutbound(): void;
				getDelegatedTask(): java.lang.IRunnable;
				getEnableSessionCreation(): boolean;
				getEnabledCipherSuites(): native.Array<java.lang.String>;
				getEnabledProtocols(): native.Array<java.lang.String>;
				getHandshakeSession(): javax.net.ssl.ISSLSession;
				getHandshakeStatus(): javax.net.ssl.SSLEngineResult.HandshakeStatus;
				getNeedClientAuth(): boolean;
				getPeerHost(): string;
				getPeerPort(): number;
				getSSLParameters(): javax.net.ssl.SSLParameters;
				getSession(): javax.net.ssl.ISSLSession;
				getSupportedProtocols(): native.Array<java.lang.String>;
				getUseClientMode(): boolean;
				getWantClientAuth(): boolean;
				isInboundDone(): boolean;
				isOutboundDone(): boolean;
				setEnableSessionCreation(arg1: boolean): void;
				setEnabledCipherSuites(arg1: native.Array<java.lang.String>): void;
				setEnabledProtocols(arg1: native.Array<java.lang.String>): void;
				setNeedClientAuth(arg1: boolean): void;
				setSSLParameters(arg1: javax.net.ssl.SSLParameters): void;
				setUseClientMode(arg1: boolean): void;
				setWantClientAuth(arg1: boolean): void;
				getSupportedCipherSuites(): native.Array<java.lang.String>;
				wrap(arg1: native.Array<java.nio.ByteBuffer>, arg2: java.nio.ByteBuffer): javax.net.ssl.SSLEngineResult;
				wrap(arg1: java.nio.ByteBuffer, arg2: java.nio.ByteBuffer): javax.net.ssl.SSLEngineResult;
				wrap(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number, arg4: java.nio.ByteBuffer): javax.net.ssl.SSLEngineResult;
				unwrap(arg1: java.nio.ByteBuffer, arg2: native.Array<java.nio.ByteBuffer>, arg3: number, arg4: number): javax.net.ssl.SSLEngineResult;
				unwrap(arg1: java.nio.ByteBuffer, arg2: native.Array<java.nio.ByteBuffer>): javax.net.ssl.SSLEngineResult;
				unwrap(arg1: java.nio.ByteBuffer, arg2: java.nio.ByteBuffer): javax.net.ssl.SSLEngineResult;
			}
			export class TrustManager implements javax.net.ssl.ITrustManager {
				constructor(implementation: javax.net.ssl.ITrustManager);
			}
			export class SSLHandshakeException extends javax.net.ssl.SSLException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.net.ssl.SSLHandshakeException>;
			}
			export class SSLSessionBindingListener implements java.util.IEventListener, javax.net.ssl.ISSLSessionBindingListener {
				constructor(implementation: javax.net.ssl.ISSLSessionBindingListener);
				valueBound(arg1: javax.net.ssl.SSLSessionBindingEvent): void;
				valueUnbound(arg1: javax.net.ssl.SSLSessionBindingEvent): void;
			}
			export class SSLParameters extends java.lang.Object {
				constructor();
				constructor(arg1: native.Array<java.lang.String>);
				constructor(arg1: native.Array<java.lang.String>, arg2: native.Array<java.lang.String>);
				static class: java.lang.Class<javax.net.ssl.SSLParameters>;
				EndpointIdentificationAlgorithm: string;
				Protocols: native.Array<java.lang.String>;
				NeedClientAuth: boolean;
				WantClientAuth: boolean;
				CipherSuites: native.Array<java.lang.String>;
				getCipherSuites(): native.Array<java.lang.String>;
				getNeedClientAuth(): boolean;
				getProtocols(): native.Array<java.lang.String>;
				getWantClientAuth(): boolean;
				setCipherSuites(arg1: native.Array<java.lang.String>): void;
				setNeedClientAuth(arg1: boolean): void;
				setProtocols(arg1: native.Array<java.lang.String>): void;
				setWantClientAuth(arg1: boolean): void;
				getEndpointIdentificationAlgorithm(): string;
				setEndpointIdentificationAlgorithm(arg1: java.lang.String): void;
				setEndpointIdentificationAlgorithm(arg1: string): void;
			}
			export interface IHostnameVerifier {
				verify(arg1: string, arg2: javax.net.ssl.ISSLSession): boolean;
			}
			export class X509TrustManager implements javax.net.ssl.ITrustManager, javax.net.ssl.IX509TrustManager {
				constructor(implementation: javax.net.ssl.IX509TrustManager);
				checkClientTrusted(arg1: native.Array<java.security.cert.X509Certificate>, arg2: java.lang.String): void;
				checkClientTrusted(arg1: native.Array<java.security.cert.X509Certificate>, arg2: string): void;
				getAcceptedIssuers(): native.Array<java.security.cert.X509Certificate>;
				checkServerTrusted(arg1: native.Array<java.security.cert.X509Certificate>, arg2: java.lang.String): void;
				checkServerTrusted(arg1: native.Array<java.security.cert.X509Certificate>, arg2: string): void;
			}
			export class KeyManagerFactorySpi extends java.lang.Object {
				constructor();
				static class: java.lang.Class<javax.net.ssl.KeyManagerFactorySpi>;
			}
			export class SSLSessionBindingEvent extends java.util.EventObject {
				constructor(arg1: javax.net.ssl.ISSLSession, arg2: java.lang.String);
				constructor(arg1: javax.net.ssl.ISSLSession, arg2: string);
				static class: java.lang.Class<javax.net.ssl.SSLSessionBindingEvent>;
				getSession(): javax.net.ssl.ISSLSession;
				getName(): string;
			}
			export class HandshakeCompletedEvent extends java.util.EventObject {
				constructor(arg1: javax.net.ssl.SSLSocket, arg2: javax.net.ssl.ISSLSession);
				static class: java.lang.Class<javax.net.ssl.HandshakeCompletedEvent>;
				getCipherSuite(): string;
				getLocalPrincipal(): java.security.IPrincipal;
				getPeerPrincipal(): java.security.IPrincipal;
				getSession(): javax.net.ssl.ISSLSession;
				getLocalCertificates(): native.Array<java.security.cert.Certificate>;
				getPeerCertificateChain(): native.Array<javax.security.cert.X509Certificate>;
				getPeerCertificates(): native.Array<java.security.cert.Certificate>;
				getSocket(): javax.net.ssl.SSLSocket;
			}
			export class SSLSession implements javax.net.ssl.ISSLSession {
				constructor(implementation: javax.net.ssl.ISSLSession);
				getCipherSuite(): string;
				getLocalPrincipal(): java.security.IPrincipal;
				getPeerPrincipal(): java.security.IPrincipal;
				getPeerHost(): string;
				getPeerPort(): number;
				getApplicationBufferSize(): number;
				getCreationTime(): any;
				getLastAccessedTime(): any;
				getLocalCertificates(): native.Array<java.security.cert.Certificate>;
				getPacketBufferSize(): number;
				getPeerCertificateChain(): native.Array<javax.security.cert.X509Certificate>;
				getPeerCertificates(): native.Array<java.security.cert.Certificate>;
				getSessionContext(): javax.net.ssl.ISSLSessionContext;
				getValueNames(): native.Array<java.lang.String>;
				removeValue(arg1: java.lang.String): void;
				removeValue(arg1: string): void;
				getValue(arg1: java.lang.String): any;
				getValue(arg1: string): any;
				getId(): native.Array<native.Byte>;
				getProtocol(): string;
				invalidate(): void;
				isValid(): boolean;
				putValue(arg1: java.lang.String, arg2: any): void;
				putValue(arg1: string, arg2: any): void;
			}
			export interface IX509KeyManager extends javax.net.ssl.IKeyManager {
				getPrivateKey(arg1: string): java.security.IPrivateKey;
				chooseClientAlias(arg1: native.Array<java.lang.String>, arg2: native.Array<java.security.IPrincipal>, arg3: java.net.Socket): string;
				chooseServerAlias(arg1: string, arg2: native.Array<java.security.IPrincipal>, arg3: java.net.Socket): string;
				getClientAliases(arg1: string, arg2: native.Array<java.security.IPrincipal>): native.Array<java.lang.String>;
				getServerAliases(arg1: string, arg2: native.Array<java.security.IPrincipal>): native.Array<java.lang.String>;
				getCertificateChain(arg1: string): native.Array<java.security.cert.X509Certificate>;
			}
			export interface ISSLSession {
				getCipherSuite(): string;
				getLocalPrincipal(): java.security.IPrincipal;
				getPeerPrincipal(): java.security.IPrincipal;
				getPeerHost(): string;
				getPeerPort(): number;
				getApplicationBufferSize(): number;
				getCreationTime(): any;
				getLastAccessedTime(): any;
				getLocalCertificates(): native.Array<java.security.cert.Certificate>;
				getPacketBufferSize(): number;
				getPeerCertificateChain(): native.Array<javax.security.cert.X509Certificate>;
				getPeerCertificates(): native.Array<java.security.cert.Certificate>;
				getSessionContext(): javax.net.ssl.ISSLSessionContext;
				getValueNames(): native.Array<java.lang.String>;
				removeValue(arg1: string): void;
				getValue(arg1: string): any;
				getId(): native.Array<native.Byte>;
				getProtocol(): string;
				invalidate(): void;
				isValid(): boolean;
				putValue(arg1: string, arg2: any): void;
			}
			export class SSLKeyException extends javax.net.ssl.SSLException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.net.ssl.SSLKeyException>;
			}
			export class HandshakeCompletedListener implements java.util.IEventListener, javax.net.ssl.IHandshakeCompletedListener {
				constructor(implementation: javax.net.ssl.IHandshakeCompletedListener);
				handshakeCompleted(arg1: javax.net.ssl.HandshakeCompletedEvent): void;
			}
			export interface IKeyManager {
			}
			export class HostnameVerifier implements javax.net.ssl.IHostnameVerifier {
				constructor(implementation: javax.net.ssl.IHostnameVerifier);
				verify(arg1: java.lang.String, arg2: javax.net.ssl.ISSLSession): boolean;
				verify(arg1: string, arg2: javax.net.ssl.ISSLSession): boolean;
			}
			export class SSLSocket extends java.net.Socket {
				static class: java.lang.Class<javax.net.ssl.SSLSocket>;
				SSLParameters: javax.net.ssl.SSLParameters;
				EnabledCipherSuites: native.Array<java.lang.String>;
				UseClientMode: boolean;
				EnableSessionCreation: boolean;
				NeedClientAuth: boolean;
				WantClientAuth: boolean;
				EnabledProtocols: native.Array<java.lang.String>;
				getEnableSessionCreation(): boolean;
				getEnabledCipherSuites(): native.Array<java.lang.String>;
				getEnabledProtocols(): native.Array<java.lang.String>;
				getHandshakeSession(): javax.net.ssl.ISSLSession;
				getNeedClientAuth(): boolean;
				getSSLParameters(): javax.net.ssl.SSLParameters;
				getSession(): javax.net.ssl.ISSLSession;
				getSupportedProtocols(): native.Array<java.lang.String>;
				getUseClientMode(): boolean;
				getWantClientAuth(): boolean;
				setEnableSessionCreation(arg1: boolean): void;
				setEnabledCipherSuites(arg1: native.Array<java.lang.String>): void;
				setEnabledProtocols(arg1: native.Array<java.lang.String>): void;
				setNeedClientAuth(arg1: boolean): void;
				setSSLParameters(arg1: javax.net.ssl.SSLParameters): void;
				setUseClientMode(arg1: boolean): void;
				setWantClientAuth(arg1: boolean): void;
				addHandshakeCompletedListener(arg1: javax.net.ssl.IHandshakeCompletedListener): void;
				removeHandshakeCompletedListener(arg1: javax.net.ssl.IHandshakeCompletedListener): void;
				startHandshake(): void;
				getSupportedCipherSuites(): native.Array<java.lang.String>;
			}
			export interface IX509TrustManager extends javax.net.ssl.ITrustManager {
				checkClientTrusted(arg1: native.Array<java.security.cert.X509Certificate>, arg2: string): void;
				getAcceptedIssuers(): native.Array<java.security.cert.X509Certificate>;
				checkServerTrusted(arg1: native.Array<java.security.cert.X509Certificate>, arg2: string): void;
			}
			export class SSLProtocolException extends javax.net.ssl.SSLException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.net.ssl.SSLProtocolException>;
			}
			export class SSLPermission extends java.security.BasicPermission {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.String);
				constructor(arg1: string, arg2: string);
				static class: java.lang.Class<javax.net.ssl.SSLPermission>;
			}
			export class HttpsURLConnection extends java.net.HttpURLConnection {
				static class: java.lang.Class<javax.net.ssl.HttpsURLConnection>;
				SSLSocketFactory: javax.net.ssl.SSLSocketFactory;
				HostnameVerifier: javax.net.ssl.IHostnameVerifier;
				getCipherSuite(): string;
				getLocalPrincipal(): java.security.IPrincipal;
				getPeerPrincipal(): java.security.IPrincipal;
				static getDefaultHostnameVerifier(): javax.net.ssl.IHostnameVerifier;
				static getDefaultSSLSocketFactory(): javax.net.ssl.SSLSocketFactory;
				getSSLSocketFactory(): javax.net.ssl.SSLSocketFactory;
				getServerCertificates(): native.Array<java.security.cert.Certificate>;
				static setDefaultHostnameVerifier(arg1: javax.net.ssl.IHostnameVerifier): void;
				static setDefaultSSLSocketFactory(arg1: javax.net.ssl.SSLSocketFactory): void;
				setSSLSocketFactory(arg1: javax.net.ssl.SSLSocketFactory): void;
				getLocalCertificates(): native.Array<java.security.cert.Certificate>;
				setHostnameVerifier(arg1: javax.net.ssl.IHostnameVerifier): void;
				getHostnameVerifier(): javax.net.ssl.IHostnameVerifier;
			}
			export class SSLPeerUnverifiedException extends javax.net.ssl.SSLException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<javax.net.ssl.SSLPeerUnverifiedException>;
			}
			export class KeyStoreBuilderParameters extends java.lang.Object implements javax.net.ssl.IManagerFactoryParameters {
				constructor(arg1: java.security.KeyStore.Builder);
				constructor(arg1: java.util.IList<java.security.KeyStore.Builder>);
				static class: java.lang.Class<javax.net.ssl.KeyStoreBuilderParameters>;
				getParameters(): java.util.IList<java.security.KeyStore.Builder>;
			}
			export interface IHandshakeCompletedListener extends java.util.IEventListener {
				handshakeCompleted(arg1: javax.net.ssl.HandshakeCompletedEvent): void;
			}
			export interface IManagerFactoryParameters {
			}
			export class CertPathTrustManagerParameters extends java.lang.Object implements javax.net.ssl.IManagerFactoryParameters {
				constructor(arg1: java.security.cert.ICertPathParameters);
				static class: java.lang.Class<javax.net.ssl.CertPathTrustManagerParameters>;
				getParameters(): java.security.cert.ICertPathParameters;
			}
			export class KeyManager implements javax.net.ssl.IKeyManager {
				constructor(implementation: javax.net.ssl.IKeyManager);
			}
			export class SSLSocketFactory extends javax.net.SocketFactory {
				constructor();
				static class: java.lang.Class<javax.net.ssl.SSLSocketFactory>;
				getSupportedCipherSuites(): native.Array<java.lang.String>;
				getDefaultCipherSuites(): native.Array<java.lang.String>;
				createSocket(arg1: java.net.Socket, arg2: java.lang.String, arg3: number, arg4: boolean): java.net.Socket;
				createSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: boolean): java.net.Socket;
				static getDefault(): javax.net.SocketFactory;
				createSocket(arg1: java.net.InetAddress, arg2: number): java.net.Socket;
				createSocket(arg1: java.lang.String, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
				createSocket(arg1: string, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
				createSocket(arg1: java.net.InetAddress, arg2: number, arg3: java.net.InetAddress, arg4: number): java.net.Socket;
				createSocket(arg1: java.lang.String, arg2: number): java.net.Socket;
				createSocket(arg1: string, arg2: number): java.net.Socket;
				createSocket(): java.net.Socket;
			}
			export class SSLContextSpi extends java.lang.Object {
				constructor();
				static class: java.lang.Class<javax.net.ssl.SSLContextSpi>;
			}
			export class SSLContext extends java.lang.Object {
				static class: java.lang.Class<javax.net.ssl.SSLContext>;
				getSocketFactory(): javax.net.ssl.SSLSocketFactory;
				getServerSocketFactory(): javax.net.ssl.SSLServerSocketFactory;
				createSSLEngine(): javax.net.ssl.SSLEngine;
				createSSLEngine(arg1: java.lang.String, arg2: number): javax.net.ssl.SSLEngine;
				createSSLEngine(arg1: string, arg2: number): javax.net.ssl.SSLEngine;
				getClientSessionContext(): javax.net.ssl.ISSLSessionContext;
				getDefaultSSLParameters(): javax.net.ssl.SSLParameters;
				getServerSessionContext(): javax.net.ssl.ISSLSessionContext;
				getSupportedSSLParameters(): javax.net.ssl.SSLParameters;
				static getDefault(): javax.net.ssl.SSLContext;
				static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.net.ssl.SSLContext;
				static getInstance(arg1: string, arg2: string): javax.net.ssl.SSLContext;
				static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.net.ssl.SSLContext;
				static getInstance(arg1: string, arg2: java.security.Provider): javax.net.ssl.SSLContext;
				static getInstance(arg1: java.lang.String): javax.net.ssl.SSLContext;
				static getInstance(arg1: string): javax.net.ssl.SSLContext;
				init(arg1: native.Array<javax.net.ssl.IKeyManager>, arg2: native.Array<javax.net.ssl.ITrustManager>, arg3: java.security.SecureRandom): void;
				getProtocol(): string;
				static setDefault(arg1: javax.net.ssl.SSLContext): void;
				getProvider(): java.security.Provider;
			}
			export class SSLServerSocketFactory extends javax.net.ServerSocketFactory {
				static class: java.lang.Class<javax.net.ssl.SSLServerSocketFactory>;
				getSupportedCipherSuites(): native.Array<java.lang.String>;
				getDefaultCipherSuites(): native.Array<java.lang.String>;
				static getDefault(): javax.net.ServerSocketFactory;
			}
			export class TrustManagerFactory extends java.lang.Object {
				static class: java.lang.Class<javax.net.ssl.TrustManagerFactory>;
				static getDefaultAlgorithm(): string;
				getTrustManagers(): native.Array<javax.net.ssl.ITrustManager>;
				static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.net.ssl.TrustManagerFactory;
				static getInstance(arg1: string, arg2: java.security.Provider): javax.net.ssl.TrustManagerFactory;
				static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.net.ssl.TrustManagerFactory;
				static getInstance(arg1: string, arg2: string): javax.net.ssl.TrustManagerFactory;
				static getInstance(arg1: java.lang.String): javax.net.ssl.TrustManagerFactory;
				static getInstance(arg1: string): javax.net.ssl.TrustManagerFactory;
				init(arg1: javax.net.ssl.IManagerFactoryParameters): void;
				init(arg1: java.security.KeyStore): void;
				getProvider(): java.security.Provider;
				getAlgorithm(): string;
			}
			export interface ITrustManager {
			}
			export class KeyManagerFactory extends java.lang.Object {
				static class: java.lang.Class<javax.net.ssl.KeyManagerFactory>;
				getKeyManagers(): native.Array<javax.net.ssl.IKeyManager>;
				static getDefaultAlgorithm(): string;
				static getInstance(arg1: java.lang.String, arg2: java.security.Provider): javax.net.ssl.KeyManagerFactory;
				static getInstance(arg1: string, arg2: java.security.Provider): javax.net.ssl.KeyManagerFactory;
				static getInstance(arg1: java.lang.String, arg2: java.lang.String): javax.net.ssl.KeyManagerFactory;
				static getInstance(arg1: string, arg2: string): javax.net.ssl.KeyManagerFactory;
				static getInstance(arg1: java.lang.String): javax.net.ssl.KeyManagerFactory;
				static getInstance(arg1: string): javax.net.ssl.KeyManagerFactory;
				init(arg1: javax.net.ssl.IManagerFactoryParameters): void;
				init(arg1: java.security.KeyStore, arg2: native.Array<string>): void;
				getProvider(): java.security.Provider;
				getAlgorithm(): string;
			}
			export interface ISSLSessionBindingListener extends java.util.IEventListener {
				valueBound(arg1: javax.net.ssl.SSLSessionBindingEvent): void;
				valueUnbound(arg1: javax.net.ssl.SSLSessionBindingEvent): void;
			}
			export class ManagerFactoryParameters implements javax.net.ssl.IManagerFactoryParameters {
				constructor(implementation: javax.net.ssl.IManagerFactoryParameters);
			}
			export class X509KeyManager implements javax.net.ssl.IKeyManager, javax.net.ssl.IX509KeyManager {
				constructor(implementation: javax.net.ssl.IX509KeyManager);
				getPrivateKey(arg1: java.lang.String): java.security.IPrivateKey;
				getPrivateKey(arg1: string): java.security.IPrivateKey;
				chooseClientAlias(arg1: native.Array<java.lang.String>, arg2: native.Array<java.security.IPrincipal>, arg3: java.net.Socket): string;
				chooseServerAlias(arg1: java.lang.String, arg2: native.Array<java.security.IPrincipal>, arg3: java.net.Socket): string;
				chooseServerAlias(arg1: string, arg2: native.Array<java.security.IPrincipal>, arg3: java.net.Socket): string;
				getClientAliases(arg1: java.lang.String, arg2: native.Array<java.security.IPrincipal>): native.Array<java.lang.String>;
				getClientAliases(arg1: string, arg2: native.Array<java.security.IPrincipal>): native.Array<java.lang.String>;
				getServerAliases(arg1: java.lang.String, arg2: native.Array<java.security.IPrincipal>): native.Array<java.lang.String>;
				getServerAliases(arg1: string, arg2: native.Array<java.security.IPrincipal>): native.Array<java.lang.String>;
				getCertificateChain(arg1: java.lang.String): native.Array<java.security.cert.X509Certificate>;
				getCertificateChain(arg1: string): native.Array<java.security.cert.X509Certificate>;
			}
		}
	}
}
declare module java {
	export module math {
		export class MathContext extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: number);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: number, arg2: java.math.RoundingMode);
			static UNLIMITED: java.math.MathContext;
			static DECIMAL32: java.math.MathContext;
			static DECIMAL64: java.math.MathContext;
			static DECIMAL128: java.math.MathContext;
			static class: java.lang.Class<java.math.MathContext>;
			getPrecision(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getRoundingMode(): java.math.RoundingMode;
		}
		export class BigDecimal extends java.lang.Number implements java.lang.IComparable<java.math.BigDecimal> {
			constructor(arg1: java.math.BigInteger, arg2: number, arg3: java.math.MathContext);
			constructor(arg1: java.math.BigInteger, arg2: java.math.MathContext);
			constructor(arg1: java.math.BigInteger);
			constructor(arg1: native.Double, arg2: java.math.MathContext);
			constructor(arg1: number, arg2: java.math.MathContext);
			constructor(arg1: native.Long, arg2: java.math.MathContext);
			constructor(arg1: native.Long);
			constructor(arg1: number);
			constructor(arg1: native.Array<string>, arg2: java.math.MathContext);
			constructor(arg1: native.Array<string>);
			constructor(arg1: native.Array<string>, arg2: number, arg3: number, arg4: java.math.MathContext);
			constructor(arg1: native.Array<string>, arg2: number, arg3: number);
			constructor(arg1: java.math.BigInteger, arg2: number);
			constructor(arg1: native.Double);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.math.MathContext);
			constructor(arg1: string, arg2: java.math.MathContext);
			static ZERO: java.math.BigDecimal;
			static ONE: java.math.BigDecimal;
			static TEN: java.math.BigDecimal;
			static ROUND_UP: number;
			static ROUND_DOWN: number;
			static ROUND_CEILING: number;
			static ROUND_FLOOR: number;
			static ROUND_HALF_UP: number;
			static ROUND_HALF_DOWN: number;
			static ROUND_HALF_EVEN: number;
			static ROUND_UNNECESSARY: number;
			static class: java.lang.Class<java.math.BigDecimal>;
			byteValueExact(): number;
			divideToIntegralValue(arg1: java.math.BigDecimal): java.math.BigDecimal;
			divideToIntegralValue(arg1: java.math.BigDecimal, arg2: java.math.MathContext): java.math.BigDecimal;
			intValueExact(): number;
			longValueExact(): any;
			movePointLeft(arg1: number): java.math.BigDecimal;
			movePointRight(arg1: number): java.math.BigDecimal;
			plus(arg1: java.math.MathContext): java.math.BigDecimal;
			plus(): java.math.BigDecimal;
			precision(): number;
			setScale(arg1: number, arg2: number): java.math.BigDecimal;
			setScale(arg1: number, arg2: java.math.RoundingMode): java.math.BigDecimal;
			setScale(arg1: number): java.math.BigDecimal;
			shortValueExact(): number;
			stripTrailingZeros(): java.math.BigDecimal;
			toBigIntegerExact(): java.math.BigInteger;
			toEngineeringString(): string;
			toPlainString(): string;
			unscaledValue(): java.math.BigInteger;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			add(arg1: java.math.BigDecimal, arg2: java.math.MathContext): java.math.BigDecimal;
			add(arg1: java.math.BigDecimal): java.math.BigDecimal;
			compareTo(arg1: java.math.BigDecimal): number;
			compareTo(arg1: any): number;
			min(arg1: java.math.BigDecimal): java.math.BigDecimal;
			static valueOf(arg1: native.Long, arg2: number): java.math.BigDecimal;
			static valueOf(arg1: native.Double): java.math.BigDecimal;
			static valueOf(arg1: number): java.math.BigDecimal;
			static valueOf(arg1: native.Long): java.math.BigDecimal;
			max(arg1: java.math.BigDecimal): java.math.BigDecimal;
			longValue(): any;
			intValue(): number;
			abs(arg1: java.math.MathContext): java.math.BigDecimal;
			abs(): java.math.BigDecimal;
			doubleValue(): any;
			floatValue(): number;
			signum(): number;
			pow(arg1: number): java.math.BigDecimal;
			pow(arg1: number, arg2: java.math.MathContext): java.math.BigDecimal;
			round(arg1: java.math.MathContext): java.math.BigDecimal;
			ulp(): java.math.BigDecimal;
			scale(): number;
			subtract(arg1: java.math.BigDecimal): java.math.BigDecimal;
			subtract(arg1: java.math.BigDecimal, arg2: java.math.MathContext): java.math.BigDecimal;
			divide(arg1: java.math.BigDecimal): java.math.BigDecimal;
			divide(arg1: java.math.BigDecimal, arg2: java.math.RoundingMode): java.math.BigDecimal;
			divide(arg1: java.math.BigDecimal, arg2: number, arg3: java.math.RoundingMode): java.math.BigDecimal;
			divide(arg1: java.math.BigDecimal, arg2: number): java.math.BigDecimal;
			divide(arg1: java.math.BigDecimal, arg2: number, arg3: number): java.math.BigDecimal;
			divide(arg1: java.math.BigDecimal, arg2: java.math.MathContext): java.math.BigDecimal;
			multiply(arg1: java.math.BigDecimal, arg2: java.math.MathContext): java.math.BigDecimal;
			multiply(arg1: java.math.BigDecimal): java.math.BigDecimal;
			negate(): java.math.BigDecimal;
			negate(arg1: java.math.MathContext): java.math.BigDecimal;
			scaleByPowerOfTen(arg1: number): java.math.BigDecimal;
			divideAndRemainder(arg1: java.math.BigDecimal): native.Array<java.math.BigDecimal>;
			divideAndRemainder(arg1: java.math.BigDecimal, arg2: java.math.MathContext): native.Array<java.math.BigDecimal>;
			remainder(arg1: java.math.BigDecimal): java.math.BigDecimal;
			remainder(arg1: java.math.BigDecimal, arg2: java.math.MathContext): java.math.BigDecimal;
			toBigInteger(): java.math.BigInteger;
		}
		export class BigInteger extends java.lang.Number implements java.lang.IComparable<java.math.BigInteger> {
			constructor(arg1: native.Array<native.Byte>);
			constructor(arg1: number, arg2: number, arg3: java.util.Random);
			constructor(arg1: number, arg2: java.util.Random);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			constructor(arg1: number, arg2: native.Array<native.Byte>);
			static ZERO: java.math.BigInteger;
			static ONE: java.math.BigInteger;
			static TEN: java.math.BigInteger;
			static class: java.lang.Class<java.math.BigInteger>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			toString(arg1: number): string;
			add(arg1: java.math.BigInteger): java.math.BigInteger;
			compareTo(arg1: java.math.BigInteger): number;
			compareTo(arg1: any): number;
			min(arg1: java.math.BigInteger): java.math.BigInteger;
			static valueOf(arg1: native.Long): java.math.BigInteger;
			max(arg1: java.math.BigInteger): java.math.BigInteger;
			longValue(): any;
			intValue(): number;
			abs(): java.math.BigInteger;
			doubleValue(): any;
			floatValue(): number;
			bitCount(): number;
			signum(): number;
			pow(arg1: number): java.math.BigInteger;
			toByteArray(): native.Array<native.Byte>;
			and(arg1: java.math.BigInteger): java.math.BigInteger;
			andNot(arg1: java.math.BigInteger): java.math.BigInteger;
			or(arg1: java.math.BigInteger): java.math.BigInteger;
			xor(arg1: java.math.BigInteger): java.math.BigInteger;
			testBit(arg1: number): boolean;
			subtract(arg1: java.math.BigInteger): java.math.BigInteger;
			mod(arg1: java.math.BigInteger): java.math.BigInteger;
			bitLength(): number;
			divide(arg1: java.math.BigInteger): java.math.BigInteger;
			multiply(arg1: java.math.BigInteger): java.math.BigInteger;
			negate(): java.math.BigInteger;
			gcd(arg1: java.math.BigInteger): java.math.BigInteger;
			clearBit(arg1: number): java.math.BigInteger;
			divideAndRemainder(arg1: java.math.BigInteger): native.Array<java.math.BigInteger>;
			flipBit(arg1: number): java.math.BigInteger;
			getLowestSetBit(): number;
			isProbablePrime(arg1: number): boolean;
			modInverse(arg1: java.math.BigInteger): java.math.BigInteger;
			modPow(arg1: java.math.BigInteger, arg2: java.math.BigInteger): java.math.BigInteger;
			nextProbablePrime(): java.math.BigInteger;
			not(): java.math.BigInteger;
			static probablePrime(arg1: number, arg2: java.util.Random): java.math.BigInteger;
			remainder(arg1: java.math.BigInteger): java.math.BigInteger;
			setBit(arg1: number): java.math.BigInteger;
			shiftLeft(arg1: number): java.math.BigInteger;
			shiftRight(arg1: number): java.math.BigInteger;
		}
		export enum RoundingMode {
			UP,
			DOWN,
			CEILING,
			FLOOR,
			HALF_UP,
			HALF_DOWN,
			HALF_EVEN,
			UNNECESSARY
		}
		export module RoundingMode {
			export function valueOf(arg1: java.lang.String): java.math.RoundingMode;
			export function valueOf(arg1: string): java.math.RoundingMode;
			export function valueOf(arg1: number): java.math.RoundingMode;
			export function values(): native.Array<java.math.RoundingMode>;
		}
	}
	export module text {
		export class SimpleDateFormat extends java.text.DateFormat {
			constructor(arg1: java.lang.String, arg2: java.text.DateFormatSymbols);
			constructor(arg1: string, arg2: java.text.DateFormatSymbols);
			constructor(arg1: java.lang.String, arg2: java.util.Locale);
			constructor(arg1: string, arg2: java.util.Locale);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.text.SimpleDateFormat>;
			DateFormatSymbols: java.text.DateFormatSymbols;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			format(arg1: java.util.Date, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			parse(arg1: java.lang.String, arg2: java.text.ParsePosition): java.util.Date;
			parse(arg1: string, arg2: java.text.ParsePosition): java.util.Date;
			applyPattern(arg1: java.lang.String): void;
			applyPattern(arg1: string): void;
			formatToCharacterIterator(arg1: any): java.text.IAttributedCharacterIterator;
			toPattern(): string;
			applyLocalizedPattern(arg1: java.lang.String): void;
			applyLocalizedPattern(arg1: string): void;
			get2DigitYearStart(): java.util.Date;
			getDateFormatSymbols(): java.text.DateFormatSymbols;
			set2DigitYearStart(arg1: java.util.Date): void;
			setDateFormatSymbols(arg1: java.text.DateFormatSymbols): void;
			toLocalizedPattern(): string;
			format(arg1: any, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: java.util.Date): string;
			parse(arg1: java.lang.String): java.util.Date;
			parse(arg1: string): java.util.Date;
			format(arg1: any): string;
		}
		export class Format extends java.lang.Object implements java.io.ISerializable, java.lang.ICloneable {
			static class: java.lang.Class<java.text.Format>;
			clone(): any;
			format(arg1: any, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: any): string;
			formatToCharacterIterator(arg1: any): java.text.IAttributedCharacterIterator;
			parseObject(arg1: java.lang.String, arg2: java.text.ParsePosition): any;
			parseObject(arg1: string, arg2: java.text.ParsePosition): any;
			parseObject(arg1: java.lang.String): any;
			parseObject(arg1: string): any;
		}
		export module Format {
			export class Field extends java.text.AttributedCharacterIterator.Attribute {
				static class: java.lang.Class<java.text.Format.Field>;
			}
		}
		export interface ICharacterIterator extends java.lang.ICloneable {
			clone(): any;
			next(): string;
			previous(): string;
			getIndex(): number;
			current(): string;
			getBeginIndex(): number;
			getEndIndex(): number;
			setIndex(arg1: number): string;
			first(): string;
			last(): string;
		}
		export module ICharacterIterator {
			var DONE: string;
		}
		export class CollationElementIterator extends java.lang.Object {
			static NULLORDER: number;
			static class: java.lang.Class<java.text.CollationElementIterator>;
			Offset: number;
			next(): number;
			reset(): void;
			previous(): number;
			getOffset(): number;
			setOffset(arg1: number): void;
			setText(arg1: java.text.ICharacterIterator): void;
			setText(arg1: java.lang.String): void;
			setText(arg1: string): void;
			static primaryOrder(arg1: number): number;
			static secondaryOrder(arg1: number): number;
			static tertiaryOrder(arg1: number): number;
			getMaxExpansion(arg1: number): number;
		}
		export class ParseException extends java.lang.Exception {
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			static class: java.lang.Class<java.text.ParseException>;
			getErrorOffset(): number;
		}
		export interface IAttributedCharacterIterator extends java.text.ICharacterIterator {
			getAllAttributeKeys(): java.util.ISet<java.text.AttributedCharacterIterator.Attribute>;
			getRunLimit(): number;
			getRunLimit(arg1: java.text.AttributedCharacterIterator.Attribute): number;
			getRunLimit(arg1: java.util.ISet<any>): number;
			getRunStart(): number;
			getRunStart(arg1: java.text.AttributedCharacterIterator.Attribute): number;
			getRunStart(arg1: java.util.ISet<any>): number;
			getAttributes(): java.util.IMap<java.text.AttributedCharacterIterator.Attribute, any>;
			getAttribute(arg1: java.text.AttributedCharacterIterator.Attribute): any;
			clone(): any;
			next(): string;
			previous(): string;
			getIndex(): number;
			current(): string;
			getBeginIndex(): number;
			getEndIndex(): number;
			setIndex(arg1: number): string;
			first(): string;
			last(): string;
		}
		export class Bidi extends java.lang.Object {
			constructor(arg1: java.text.IAttributedCharacterIterator);
			constructor(arg1: native.Array<string>, arg2: number, arg3: native.Array<native.Byte>, arg4: number, arg5: number, arg6: number);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			static DIRECTION_LEFT_TO_RIGHT: number;
			static DIRECTION_RIGHT_TO_LEFT: number;
			static DIRECTION_DEFAULT_LEFT_TO_RIGHT: number;
			static DIRECTION_DEFAULT_RIGHT_TO_LEFT: number;
			static class: java.lang.Class<java.text.Bidi>;
			getRunLimit(arg1: number): number;
			getRunStart(arg1: number): number;
			baseIsLeftToRight(): boolean;
			createLineBidi(arg1: number, arg2: number): java.text.Bidi;
			getBaseLevel(): number;
			getLevelAt(arg1: number): number;
			getRunCount(): number;
			getRunLevel(arg1: number): number;
			isMixed(): boolean;
			isRightToLeft(): boolean;
			static reorderVisually(arg1: native.Array<native.Byte>, arg2: number, arg3: native.Array<any>, arg4: number, arg5: number): void;
			static requiresBidi(arg1: native.Array<string>, arg2: number, arg3: number): boolean;
			toString(): string;
			getLength(): number;
			isLeftToRight(): boolean;
		}
		export class DecimalFormat extends java.text.NumberFormat {
			constructor(arg1: java.lang.String, arg2: java.text.DecimalFormatSymbols);
			constructor(arg1: string, arg2: java.text.DecimalFormatSymbols);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.text.DecimalFormat>;
			PositivePrefix: string;
			MinimumIntegerDigits: number;
			GroupingSize: number;
			MinimumFractionDigits: number;
			RoundingMode: java.math.RoundingMode;
			MaximumIntegerDigits: number;
			NegativePrefix: string;
			PositiveSuffix: string;
			MaximumFractionDigits: number;
			NegativeSuffix: string;
			DecimalFormatSymbols: java.text.DecimalFormatSymbols;
			Currency: java.util.Currency;
			Multiplier: number;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			format(arg1: any, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: native.Double, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: number, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: native.Long, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			parse(arg1: java.lang.String, arg2: java.text.ParsePosition): java.lang.Number;
			parse(arg1: string, arg2: java.text.ParsePosition): java.lang.Number;
			applyPattern(arg1: java.lang.String): void;
			applyPattern(arg1: string): void;
			formatToCharacterIterator(arg1: any): java.text.IAttributedCharacterIterator;
			toPattern(): string;
			applyLocalizedPattern(arg1: java.lang.String): void;
			applyLocalizedPattern(arg1: string): void;
			getDecimalFormatSymbols(): java.text.DecimalFormatSymbols;
			setMaximumIntegerDigits(arg1: number): void;
			setMinimumIntegerDigits(arg1: number): void;
			toLocalizedPattern(): string;
			getCurrency(): java.util.Currency;
			getMaximumFractionDigits(): number;
			getMaximumIntegerDigits(): number;
			getMinimumFractionDigits(): number;
			getMinimumIntegerDigits(): number;
			getRoundingMode(): java.math.RoundingMode;
			setCurrency(arg1: java.util.Currency): void;
			setDecimalSeparatorAlwaysShown(arg1: boolean): void;
			setMaximumFractionDigits(arg1: number): void;
			setMinimumFractionDigits(arg1: number): void;
			setRoundingMode(arg1: java.math.RoundingMode): void;
			getGroupingSize(): number;
			getMultiplier(): number;
			getNegativePrefix(): string;
			getNegativeSuffix(): string;
			getPositivePrefix(): string;
			getPositiveSuffix(): string;
			isDecimalSeparatorAlwaysShown(): boolean;
			isParseBigDecimal(): boolean;
			setDecimalFormatSymbols(arg1: java.text.DecimalFormatSymbols): void;
			setGroupingSize(arg1: number): void;
			setMultiplier(arg1: number): void;
			setNegativePrefix(arg1: java.lang.String): void;
			setNegativePrefix(arg1: string): void;
			setNegativeSuffix(arg1: java.lang.String): void;
			setNegativeSuffix(arg1: string): void;
			setParseBigDecimal(arg1: boolean): void;
			setPositivePrefix(arg1: java.lang.String): void;
			setPositivePrefix(arg1: string): void;
			setPositiveSuffix(arg1: java.lang.String): void;
			setPositiveSuffix(arg1: string): void;
			format(arg1: native.Double): string;
			format(arg1: number): string;
			format(arg1: native.Long): string;
			parse(arg1: java.lang.String): java.lang.Number;
			parse(arg1: string): java.lang.Number;
			format(arg1: any): string;
		}
		export class StringCharacterIterator extends java.lang.Object implements java.text.ICharacterIterator {
			constructor(arg1: java.lang.String, arg2: number, arg3: number, arg4: number);
			constructor(arg1: string, arg2: number, arg3: number, arg4: number);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.text.StringCharacterIterator>;
			Index: number;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			next(): string;
			previous(): string;
			getIndex(): number;
			setText(arg1: java.lang.String): void;
			setText(arg1: string): void;
			current(): string;
			getBeginIndex(): number;
			getEndIndex(): number;
			setIndex(arg1: number): string;
			first(): string;
			last(): string;
		}
		export class DateFormatSymbols extends java.lang.Object implements java.io.ISerializable, java.lang.ICloneable {
			constructor();
			constructor(arg1: java.util.Locale);
			static class: java.lang.Class<java.text.DateFormatSymbols>;
			LocalPatternChars: string;
			AmPmStrings: native.Array<java.lang.String>;
			Weekdays: native.Array<java.lang.String>;
			ShortMonths: native.Array<java.lang.String>;
			ZoneStrings: native.Array<native.Array<java.lang.String>>;
			Months: native.Array<java.lang.String>;
			ShortWeekdays: native.Array<java.lang.String>;
			Eras: native.Array<java.lang.String>;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			static getInstance(arg1: java.util.Locale): java.text.DateFormatSymbols;
			static getInstance(): java.text.DateFormatSymbols;
			static getAvailableLocales(): native.Array<java.util.Locale>;
			getEras(): native.Array<java.lang.String>;
			setEras(arg1: native.Array<java.lang.String>): void;
			getZoneStrings(): native.Array<native.Array<java.lang.String>>;
			getAmPmStrings(): native.Array<java.lang.String>;
			getLocalPatternChars(): string;
			getMonths(): native.Array<java.lang.String>;
			getShortMonths(): native.Array<java.lang.String>;
			getShortWeekdays(): native.Array<java.lang.String>;
			getWeekdays(): native.Array<java.lang.String>;
			setAmPmStrings(arg1: native.Array<java.lang.String>): void;
			setLocalPatternChars(arg1: java.lang.String): void;
			setLocalPatternChars(arg1: string): void;
			setMonths(arg1: native.Array<java.lang.String>): void;
			setShortMonths(arg1: native.Array<java.lang.String>): void;
			setShortWeekdays(arg1: native.Array<java.lang.String>): void;
			setWeekdays(arg1: native.Array<java.lang.String>): void;
			setZoneStrings(arg1: native.Array<native.Array<java.lang.String>>): void;
		}
		export class CollationKey extends java.lang.Object implements java.lang.IComparable<java.text.CollationKey> {
			static class: java.lang.Class<java.text.CollationKey>;
			getSourceString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.text.CollationKey): number;
			toByteArray(): native.Array<native.Byte>;
		}
		export class MessageFormat extends java.text.Format {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.util.Locale);
			constructor(arg1: string, arg2: java.util.Locale);
			static class: java.lang.Class<java.text.MessageFormat>;
			FormatsByArgumentIndex: native.Array<java.text.Format>;
			Formats: native.Array<java.text.Format>;
			Locale: java.util.Locale;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			format(arg1: native.Array<any>, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			static format(arg1: java.lang.String, arg2: native.Array<any>): string;
			static format(arg1: string, arg2: native.Array<any>): string;
			format(arg1: any, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			parse(arg1: java.lang.String, arg2: java.text.ParsePosition): native.Array<any>;
			parse(arg1: string, arg2: java.text.ParsePosition): native.Array<any>;
			parse(arg1: java.lang.String): native.Array<any>;
			parse(arg1: string): native.Array<any>;
			getLocale(): java.util.Locale;
			setLocale(arg1: java.util.Locale): void;
			getFormats(): native.Array<java.text.Format>;
			setFormat(arg1: number, arg2: java.text.Format): void;
			applyPattern(arg1: java.lang.String): void;
			applyPattern(arg1: string): void;
			formatToCharacterIterator(arg1: any): java.text.IAttributedCharacterIterator;
			getFormatsByArgumentIndex(): native.Array<java.text.Format>;
			parseObject(arg1: java.lang.String, arg2: java.text.ParsePosition): any;
			parseObject(arg1: string, arg2: java.text.ParsePosition): any;
			setFormatByArgumentIndex(arg1: number, arg2: java.text.Format): void;
			setFormats(arg1: native.Array<java.text.Format>): void;
			setFormatsByArgumentIndex(arg1: native.Array<java.text.Format>): void;
			toPattern(): string;
			format(arg1: any): string;
			parseObject(arg1: java.lang.String): any;
			parseObject(arg1: string): any;
		}
		export module MessageFormat {
			export class Field extends java.text.Format.Field {
				static ARGUMENT: java.text.MessageFormat.Field;
				static class: java.lang.Class<java.text.MessageFormat.Field>;
			}
		}
		export class AttributedCharacterIterator implements java.text.ICharacterIterator, java.text.IAttributedCharacterIterator {
			constructor(implementation: java.text.IAttributedCharacterIterator);
			Index: number;
			getAllAttributeKeys(): java.util.ISet<java.text.AttributedCharacterIterator.Attribute>;
			getRunLimit(): number;
			getRunLimit(arg1: java.text.AttributedCharacterIterator.Attribute): number;
			getRunLimit(arg1: java.util.ISet<any>): number;
			getRunStart(): number;
			getRunStart(arg1: java.text.AttributedCharacterIterator.Attribute): number;
			getRunStart(arg1: java.util.ISet<any>): number;
			getAttributes(): java.util.IMap<java.text.AttributedCharacterIterator.Attribute, any>;
			getAttribute(arg1: java.text.AttributedCharacterIterator.Attribute): any;
			clone(): any;
			next(): string;
			previous(): string;
			getIndex(): number;
			current(): string;
			getBeginIndex(): number;
			getEndIndex(): number;
			setIndex(arg1: number): string;
			first(): string;
			last(): string;
		}
		export module AttributedCharacterIterator {
			export class Attribute extends java.lang.Object implements java.io.ISerializable {
				static LANGUAGE: java.text.AttributedCharacterIterator.Attribute;
				static READING: java.text.AttributedCharacterIterator.Attribute;
				static INPUT_METHOD_SEGMENT: java.text.AttributedCharacterIterator.Attribute;
				static class: java.lang.Class<java.text.AttributedCharacterIterator.Attribute>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
			}
		}
		export class ParsePosition extends java.lang.Object {
			constructor(arg1: number);
			static class: java.lang.Class<java.text.ParsePosition>;
			Index: number;
			ErrorIndex: number;
			getErrorIndex(): number;
			setErrorIndex(arg1: number): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getIndex(): number;
			setIndex(arg1: number): void;
		}
		export class NumberFormat extends java.text.Format {
			static INTEGER_FIELD: number;
			static FRACTION_FIELD: number;
			static class: java.lang.Class<java.text.NumberFormat>;
			MaximumIntegerDigits: number;
			MaximumFractionDigits: number;
			MinimumIntegerDigits: number;
			MinimumFractionDigits: number;
			RoundingMode: java.math.RoundingMode;
			Currency: java.util.Currency;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			format(arg1: any, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: native.Long, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: native.Double, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: number, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: native.Double): string;
			format(arg1: number): string;
			format(arg1: native.Long): string;
			static getInstance(): java.text.NumberFormat;
			static getInstance(arg1: java.util.Locale): java.text.NumberFormat;
			parse(arg1: java.lang.String, arg2: java.text.ParsePosition): java.lang.Number;
			parse(arg1: string, arg2: java.text.ParsePosition): java.lang.Number;
			parse(arg1: java.lang.String): java.lang.Number;
			parse(arg1: string): java.lang.Number;
			static getAvailableLocales(): native.Array<java.util.Locale>;
			static getCurrencyInstance(): java.text.NumberFormat;
			static getCurrencyInstance(arg1: java.util.Locale): java.text.NumberFormat;
			static getIntegerInstance(): java.text.NumberFormat;
			static getIntegerInstance(arg1: java.util.Locale): java.text.NumberFormat;
			static getPercentInstance(): java.text.NumberFormat;
			static getPercentInstance(arg1: java.util.Locale): java.text.NumberFormat;
			parseObject(arg1: java.lang.String, arg2: java.text.ParsePosition): any;
			parseObject(arg1: string, arg2: java.text.ParsePosition): any;
			setGroupingUsed(arg1: boolean): void;
			setMaximumIntegerDigits(arg1: number): void;
			setMinimumIntegerDigits(arg1: number): void;
			getCurrency(): java.util.Currency;
			getMaximumFractionDigits(): number;
			getMaximumIntegerDigits(): number;
			getMinimumFractionDigits(): number;
			getMinimumIntegerDigits(): number;
			static getNumberInstance(): java.text.NumberFormat;
			static getNumberInstance(arg1: java.util.Locale): java.text.NumberFormat;
			getRoundingMode(): java.math.RoundingMode;
			isGroupingUsed(): boolean;
			isParseIntegerOnly(): boolean;
			setCurrency(arg1: java.util.Currency): void;
			setMaximumFractionDigits(arg1: number): void;
			setMinimumFractionDigits(arg1: number): void;
			setParseIntegerOnly(arg1: boolean): void;
			setRoundingMode(arg1: java.math.RoundingMode): void;
			format(arg1: any): string;
			parseObject(arg1: java.lang.String): any;
			parseObject(arg1: string): any;
		}
		export module NumberFormat {
			export class Field extends java.text.Format.Field {
				static INTEGER: java.text.NumberFormat.Field;
				static FRACTION: java.text.NumberFormat.Field;
				static EXPONENT: java.text.NumberFormat.Field;
				static DECIMAL_SEPARATOR: java.text.NumberFormat.Field;
				static SIGN: java.text.NumberFormat.Field;
				static GROUPING_SEPARATOR: java.text.NumberFormat.Field;
				static EXPONENT_SYMBOL: java.text.NumberFormat.Field;
				static PERCENT: java.text.NumberFormat.Field;
				static PERMILLE: java.text.NumberFormat.Field;
				static CURRENCY: java.text.NumberFormat.Field;
				static EXPONENT_SIGN: java.text.NumberFormat.Field;
				static class: java.lang.Class<java.text.NumberFormat.Field>;
			}
		}
		export class DateFormat extends java.text.Format {
			static ERA_FIELD: number;
			static YEAR_FIELD: number;
			static MONTH_FIELD: number;
			static DATE_FIELD: number;
			static HOUR_OF_DAY1_FIELD: number;
			static HOUR_OF_DAY0_FIELD: number;
			static MINUTE_FIELD: number;
			static SECOND_FIELD: number;
			static MILLISECOND_FIELD: number;
			static DAY_OF_WEEK_FIELD: number;
			static DAY_OF_YEAR_FIELD: number;
			static DAY_OF_WEEK_IN_MONTH_FIELD: number;
			static WEEK_OF_YEAR_FIELD: number;
			static WEEK_OF_MONTH_FIELD: number;
			static AM_PM_FIELD: number;
			static HOUR1_FIELD: number;
			static HOUR0_FIELD: number;
			static TIMEZONE_FIELD: number;
			static FULL: number;
			static LONG: number;
			static MEDIUM: number;
			static SHORT: number;
			static DEFAULT: number;
			static class: java.lang.Class<java.text.DateFormat>;
			NumberFormat: java.text.NumberFormat;
			Calendar: java.util.Calendar;
			TimeZone: java.util.TimeZone;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			format(arg1: java.util.Date, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: any, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: java.util.Date): string;
			static getInstance(): java.text.DateFormat;
			parse(arg1: java.lang.String, arg2: java.text.ParsePosition): java.util.Date;
			parse(arg1: string, arg2: java.text.ParsePosition): java.util.Date;
			parse(arg1: java.lang.String): java.util.Date;
			parse(arg1: string): java.util.Date;
			static getAvailableLocales(): native.Array<java.util.Locale>;
			getTimeZone(): java.util.TimeZone;
			setTimeZone(arg1: java.util.TimeZone): void;
			static getDateTimeInstance(arg1: number, arg2: number, arg3: java.util.Locale): java.text.DateFormat;
			static getDateTimeInstance(arg1: number, arg2: number): java.text.DateFormat;
			static getDateTimeInstance(): java.text.DateFormat;
			static getDateInstance(): java.text.DateFormat;
			static getDateInstance(arg1: number, arg2: java.util.Locale): java.text.DateFormat;
			static getDateInstance(arg1: number): java.text.DateFormat;
			static getTimeInstance(arg1: number): java.text.DateFormat;
			static getTimeInstance(arg1: number, arg2: java.util.Locale): java.text.DateFormat;
			static getTimeInstance(): java.text.DateFormat;
			parseObject(arg1: java.lang.String, arg2: java.text.ParsePosition): any;
			parseObject(arg1: string, arg2: java.text.ParsePosition): any;
			isLenient(): boolean;
			getCalendar(): java.util.Calendar;
			getNumberFormat(): java.text.NumberFormat;
			setCalendar(arg1: java.util.Calendar): void;
			setLenient(arg1: boolean): void;
			setNumberFormat(arg1: java.text.NumberFormat): void;
			format(arg1: any): string;
			parseObject(arg1: java.lang.String): any;
			parseObject(arg1: string): any;
		}
		export module DateFormat {
			export class Field extends java.text.Format.Field {
				static ERA: java.text.DateFormat.Field;
				static YEAR: java.text.DateFormat.Field;
				static MONTH: java.text.DateFormat.Field;
				static DAY_OF_MONTH: java.text.DateFormat.Field;
				static HOUR_OF_DAY1: java.text.DateFormat.Field;
				static HOUR_OF_DAY0: java.text.DateFormat.Field;
				static MINUTE: java.text.DateFormat.Field;
				static SECOND: java.text.DateFormat.Field;
				static MILLISECOND: java.text.DateFormat.Field;
				static DAY_OF_WEEK: java.text.DateFormat.Field;
				static DAY_OF_YEAR: java.text.DateFormat.Field;
				static DAY_OF_WEEK_IN_MONTH: java.text.DateFormat.Field;
				static WEEK_OF_YEAR: java.text.DateFormat.Field;
				static WEEK_OF_MONTH: java.text.DateFormat.Field;
				static AM_PM: java.text.DateFormat.Field;
				static HOUR1: java.text.DateFormat.Field;
				static HOUR0: java.text.DateFormat.Field;
				static TIME_ZONE: java.text.DateFormat.Field;
				static class: java.lang.Class<java.text.DateFormat.Field>;
				getCalendarField(): number;
				static ofCalendarField(arg1: number): java.text.DateFormat.Field;
			}
		}
		export class FieldPosition extends java.lang.Object {
			constructor(arg1: java.text.Format.Field, arg2: number);
			constructor(arg1: java.text.Format.Field);
			constructor(arg1: number);
			static class: java.lang.Class<java.text.FieldPosition>;
			EndIndex: number;
			BeginIndex: number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getField(): number;
			getBeginIndex(): number;
			getEndIndex(): number;
			getFieldAttribute(): java.text.Format.Field;
			setBeginIndex(arg1: number): void;
			setEndIndex(arg1: number): void;
		}
		export class CharacterIterator implements java.lang.ICloneable, java.text.ICharacterIterator {
			constructor(implementation: java.text.ICharacterIterator);
			static DONE: string;
			Index: number;
			clone(): any;
			next(): string;
			previous(): string;
			getIndex(): number;
			current(): string;
			getBeginIndex(): number;
			getEndIndex(): number;
			setIndex(arg1: number): string;
			first(): string;
			last(): string;
		}
		export class Normalizer extends java.lang.Object {
			static class: java.lang.Class<java.text.Normalizer>;
			static normalize(arg1: java.lang.ICharSequence, arg2: java.text.Normalizer.Form): string;
			static normalize(arg1: string, arg2: java.text.Normalizer.Form): string;
			static isNormalized(arg1: java.lang.ICharSequence, arg2: java.text.Normalizer.Form): boolean;
			static isNormalized(arg1: string, arg2: java.text.Normalizer.Form): boolean;
		}
		export module Normalizer {
			export enum Form {
				NFD,
				NFC,
				NFKD,
				NFKC
			}
			export module Form {
				export function valueOf(arg1: java.lang.String): java.text.Normalizer.Form;
				export function valueOf(arg1: string): java.text.Normalizer.Form;
				export function values(): native.Array<java.text.Normalizer.Form>;
			}
		}
		export class Annotation extends java.lang.Object {
			constructor(arg1: any);
			static class: java.lang.Class<java.text.Annotation>;
			toString(): string;
			getValue(): any;
		}
		export class AttributedString extends java.lang.Object {
			constructor(arg1: java.text.IAttributedCharacterIterator, arg2: number, arg3: number);
			constructor(arg1: java.text.IAttributedCharacterIterator, arg2: number, arg3: number, arg4: native.Array<java.text.AttributedCharacterIterator.Attribute>);
			constructor(arg1: java.text.IAttributedCharacterIterator);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.util.IMap<any, any>);
			constructor(arg1: string, arg2: java.util.IMap<any, any>);
			static class: java.lang.Class<java.text.AttributedString>;
			getIterator(): java.text.IAttributedCharacterIterator;
			getIterator(arg1: native.Array<java.text.AttributedCharacterIterator.Attribute>, arg2: number, arg3: number): java.text.IAttributedCharacterIterator;
			getIterator(arg1: native.Array<java.text.AttributedCharacterIterator.Attribute>): java.text.IAttributedCharacterIterator;
			addAttribute(arg1: java.text.AttributedCharacterIterator.Attribute, arg2: any, arg3: number, arg4: number): void;
			addAttribute(arg1: java.text.AttributedCharacterIterator.Attribute, arg2: any): void;
			addAttributes(arg1: java.util.IMap<any, any>, arg2: number, arg3: number): void;
		}
		export class DecimalFormatSymbols extends java.lang.Object implements java.lang.ICloneable, java.io.ISerializable {
			constructor();
			constructor(arg1: java.util.Locale);
			static class: java.lang.Class<java.text.DecimalFormatSymbols>;
			PerMill: string;
			MonetaryDecimalSeparator: string;
			PatternSeparator: string;
			MinusSign: string;
			NaN: string;
			ExponentSeparator: string;
			ZeroDigit: string;
			GroupingSeparator: string;
			InternationalCurrencySymbol: string;
			DecimalSeparator: string;
			Digit: string;
			Infinity: string;
			Percent: string;
			Currency: java.util.Currency;
			CurrencySymbol: string;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			static getInstance(): java.text.DecimalFormatSymbols;
			static getInstance(arg1: java.util.Locale): java.text.DecimalFormatSymbols;
			static getAvailableLocales(): native.Array<java.util.Locale>;
			getMinusSign(): string;
			getZeroDigit(): string;
			getCurrency(): java.util.Currency;
			setCurrency(arg1: java.util.Currency): void;
			getCurrencySymbol(): string;
			getDecimalSeparator(): string;
			getDigit(): string;
			getExponentSeparator(): string;
			getGroupingSeparator(): string;
			getInfinity(): string;
			getInternationalCurrencySymbol(): string;
			getMonetaryDecimalSeparator(): string;
			getNaN(): string;
			getPatternSeparator(): string;
			getPerMill(): string;
			getPercent(): string;
			setCurrencySymbol(arg1: java.lang.String): void;
			setCurrencySymbol(arg1: string): void;
			setDecimalSeparator(arg1: string): void;
			setDigit(arg1: string): void;
			setExponentSeparator(arg1: java.lang.String): void;
			setExponentSeparator(arg1: string): void;
			setGroupingSeparator(arg1: string): void;
			setInfinity(arg1: java.lang.String): void;
			setInfinity(arg1: string): void;
			setInternationalCurrencySymbol(arg1: java.lang.String): void;
			setInternationalCurrencySymbol(arg1: string): void;
			setMinusSign(arg1: string): void;
			setMonetaryDecimalSeparator(arg1: string): void;
			setNaN(arg1: java.lang.String): void;
			setNaN(arg1: string): void;
			setPatternSeparator(arg1: string): void;
			setPerMill(arg1: string): void;
			setPercent(arg1: string): void;
			setZeroDigit(arg1: string): void;
		}
		export class RuleBasedCollator extends java.text.Collator {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.text.RuleBasedCollator>;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			compare(arg1: java.lang.String, arg2: java.lang.String): number;
			compare(arg1: string, arg2: string): number;
			getCollationKey(arg1: java.lang.String): java.text.CollationKey;
			getCollationKey(arg1: string): java.text.CollationKey;
			getCollationElementIterator(arg1: java.text.ICharacterIterator): java.text.CollationElementIterator;
			getCollationElementIterator(arg1: java.lang.String): java.text.CollationElementIterator;
			getCollationElementIterator(arg1: string): java.text.CollationElementIterator;
			getRules(): string;
			equals(arg1: java.lang.String, arg2: java.lang.String): boolean;
			equals(arg1: string, arg2: string): boolean;
			compare(arg1: any, arg2: any): number;
		}
		export class ChoiceFormat extends java.text.NumberFormat {
			constructor(arg1: native.Array<native.Double>, arg2: native.Array<java.lang.String>);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.text.ChoiceFormat>;
			getLimits(): native.Array<native.Double>;
			static previousDouble(arg1: native.Double): any;
			static previousDouble(arg1: number): any;
			setChoices(arg1: native.Array<native.Double>, arg2: native.Array<java.lang.String>): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			format(arg1: native.Long, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: native.Double, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: number, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			static nextDouble(arg1: native.Double, arg2: boolean): any;
			static nextDouble(arg1: number, arg2: boolean): any;
			static nextDouble(arg1: native.Double): any;
			static nextDouble(arg1: number): any;
			parse(arg1: java.lang.String, arg2: java.text.ParsePosition): java.lang.Number;
			parse(arg1: string, arg2: java.text.ParsePosition): java.lang.Number;
			getFormats(): native.Array<any>;
			applyPattern(arg1: java.lang.String): void;
			applyPattern(arg1: string): void;
			toPattern(): string;
			format(arg1: any, arg2: java.lang.StringBuffer, arg3: java.text.FieldPosition): java.lang.StringBuffer;
			format(arg1: native.Double): string;
			format(arg1: number): string;
			format(arg1: native.Long): string;
			parse(arg1: java.lang.String): java.lang.Number;
			parse(arg1: string): java.lang.Number;
			format(arg1: any): string;
		}
		export class BreakIterator extends java.lang.Object implements java.lang.ICloneable {
			static DONE: number;
			static class: java.lang.Class<java.text.BreakIterator>;
			Text: java.text.ICharacterIterator;
			static getCharacterInstance(arg1: java.util.Locale): java.text.BreakIterator;
			static getCharacterInstance(): java.text.BreakIterator;
			isBoundary(arg1: number): boolean;
			clone(): any;
			next(arg1: number): number;
			next(): number;
			previous(): number;
			static getAvailableLocales(): native.Array<java.util.Locale>;
			getText(): java.text.ICharacterIterator;
			setText(arg1: java.lang.String): void;
			setText(arg1: string): void;
			setText(arg1: java.text.ICharacterIterator): void;
			current(): number;
			first(): number;
			last(): number;
			following(arg1: number): number;
			static getLineInstance(): java.text.BreakIterator;
			static getLineInstance(arg1: java.util.Locale): java.text.BreakIterator;
			static getWordInstance(arg1: java.util.Locale): java.text.BreakIterator;
			static getWordInstance(): java.text.BreakIterator;
			preceding(arg1: number): number;
			static getSentenceInstance(): java.text.BreakIterator;
			static getSentenceInstance(arg1: java.util.Locale): java.text.BreakIterator;
		}
		export class Collator extends java.lang.Object implements java.util.IComparator<any>, java.lang.ICloneable {
			static PRIMARY: number;
			static SECONDARY: number;
			static TERTIARY: number;
			static IDENTICAL: number;
			static NO_DECOMPOSITION: number;
			static CANONICAL_DECOMPOSITION: number;
			static FULL_DECOMPOSITION: number;
			static class: java.lang.Class<java.text.Collator>;
			Strength: number;
			Decomposition: number;
			hashCode(): number;
			equals(arg1: any): boolean;
			equals(arg1: java.lang.String, arg2: java.lang.String): boolean;
			equals(arg1: string, arg2: string): boolean;
			clone(): any;
			compare(arg1: any, arg2: any): number;
			compare(arg1: java.lang.String, arg2: java.lang.String): number;
			compare(arg1: string, arg2: string): number;
			static getInstance(arg1: java.util.Locale): java.text.Collator;
			static getInstance(): java.text.Collator;
			static getAvailableLocales(): native.Array<java.util.Locale>;
			getCollationKey(arg1: java.lang.String): java.text.CollationKey;
			getCollationKey(arg1: string): java.text.CollationKey;
			getDecomposition(): number;
			getStrength(): number;
			setDecomposition(arg1: number): void;
			setStrength(arg1: number): void;
		}
	}
	export module awt {
		export module font {
			export class NumericShaper extends java.lang.Object implements java.io.ISerializable {
				static EUROPEAN: number;
				static ARABIC: number;
				static EASTERN_ARABIC: number;
				static DEVANAGARI: number;
				static BENGALI: number;
				static GURMUKHI: number;
				static GUJARATI: number;
				static ORIYA: number;
				static TAMIL: number;
				static TELUGU: number;
				static KANNADA: number;
				static MALAYALAM: number;
				static THAI: number;
				static LAO: number;
				static TIBETAN: number;
				static MYANMAR: number;
				static ETHIOPIC: number;
				static KHMER: number;
				static MONGOLIAN: number;
				static ALL_RANGES: number;
				static class: java.lang.Class<java.awt.font.NumericShaper>;
				static getContextualShaper(arg1: number): java.awt.font.NumericShaper;
				static getContextualShaper(arg1: number, arg2: number): java.awt.font.NumericShaper;
				getRanges(): number;
				static getShaper(arg1: number): java.awt.font.NumericShaper;
				isContextual(): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				shape(arg1: native.Array<string>, arg2: number, arg3: number): void;
				shape(arg1: native.Array<string>, arg2: number, arg3: number, arg4: number): void;
			}
			export class TextAttribute extends java.text.AttributedCharacterIterator.Attribute {
				static FAMILY: java.awt.font.TextAttribute;
				static WEIGHT: java.awt.font.TextAttribute;
				static WEIGHT_EXTRA_LIGHT: java.lang.Float;
				static WEIGHT_LIGHT: java.lang.Float;
				static WEIGHT_DEMILIGHT: java.lang.Float;
				static WEIGHT_REGULAR: java.lang.Float;
				static WEIGHT_SEMIBOLD: java.lang.Float;
				static WEIGHT_MEDIUM: java.lang.Float;
				static WEIGHT_DEMIBOLD: java.lang.Float;
				static WEIGHT_BOLD: java.lang.Float;
				static WEIGHT_HEAVY: java.lang.Float;
				static WEIGHT_EXTRABOLD: java.lang.Float;
				static WEIGHT_ULTRABOLD: java.lang.Float;
				static WIDTH: java.awt.font.TextAttribute;
				static WIDTH_CONDENSED: java.lang.Float;
				static WIDTH_SEMI_CONDENSED: java.lang.Float;
				static WIDTH_REGULAR: java.lang.Float;
				static WIDTH_SEMI_EXTENDED: java.lang.Float;
				static WIDTH_EXTENDED: java.lang.Float;
				static POSTURE: java.awt.font.TextAttribute;
				static POSTURE_REGULAR: java.lang.Float;
				static POSTURE_OBLIQUE: java.lang.Float;
				static SIZE: java.awt.font.TextAttribute;
				static TRANSFORM: java.awt.font.TextAttribute;
				static SUPERSCRIPT: java.awt.font.TextAttribute;
				static SUPERSCRIPT_SUPER: java.lang.Integer;
				static SUPERSCRIPT_SUB: java.lang.Integer;
				static FONT: java.awt.font.TextAttribute;
				static CHAR_REPLACEMENT: java.awt.font.TextAttribute;
				static FOREGROUND: java.awt.font.TextAttribute;
				static BACKGROUND: java.awt.font.TextAttribute;
				static UNDERLINE: java.awt.font.TextAttribute;
				static UNDERLINE_ON: java.lang.Integer;
				static STRIKETHROUGH: java.awt.font.TextAttribute;
				static STRIKETHROUGH_ON: java.lang.Boolean;
				static RUN_DIRECTION: java.awt.font.TextAttribute;
				static RUN_DIRECTION_LTR: java.lang.Boolean;
				static RUN_DIRECTION_RTL: java.lang.Boolean;
				static BIDI_EMBEDDING: java.awt.font.TextAttribute;
				static JUSTIFICATION: java.awt.font.TextAttribute;
				static JUSTIFICATION_FULL: java.lang.Float;
				static JUSTIFICATION_NONE: java.lang.Float;
				static INPUT_METHOD_HIGHLIGHT: java.awt.font.TextAttribute;
				static INPUT_METHOD_UNDERLINE: java.awt.font.TextAttribute;
				static UNDERLINE_LOW_ONE_PIXEL: java.lang.Integer;
				static UNDERLINE_LOW_TWO_PIXEL: java.lang.Integer;
				static UNDERLINE_LOW_DOTTED: java.lang.Integer;
				static UNDERLINE_LOW_GRAY: java.lang.Integer;
				static UNDERLINE_LOW_DASHED: java.lang.Integer;
				static SWAP_COLORS: java.awt.font.TextAttribute;
				static SWAP_COLORS_ON: java.lang.Boolean;
				static NUMERIC_SHAPING: java.awt.font.TextAttribute;
				static KERNING: java.awt.font.TextAttribute;
				static KERNING_ON: java.lang.Integer;
				static LIGATURES: java.awt.font.TextAttribute;
				static LIGATURES_ON: java.lang.Integer;
				static TRACKING: java.awt.font.TextAttribute;
				static TRACKING_TIGHT: java.lang.Float;
				static TRACKING_LOOSE: java.lang.Float;
				static class: java.lang.Class<java.awt.font.TextAttribute>;
			}
		}
	}
	export module sql {
		export class Types extends java.lang.Object {
			static BIT: number;
			static TINYINT: number;
			static SMALLINT: number;
			static INTEGER: number;
			static BIGINT: number;
			static FLOAT: number;
			static REAL: number;
			static DOUBLE: number;
			static NUMERIC: number;
			static DECIMAL: number;
			static CHAR: number;
			static VARCHAR: number;
			static LONGVARCHAR: number;
			static DATE: number;
			static TIME: number;
			static TIMESTAMP: number;
			static BINARY: number;
			static VARBINARY: number;
			static LONGVARBINARY: number;
			static NULL: number;
			static OTHER: number;
			static JAVA_OBJECT: number;
			static DISTINCT: number;
			static STRUCT: number;
			static ARRAY: number;
			static BLOB: number;
			static CLOB: number;
			static REF: number;
			static DATALINK: number;
			static BOOLEAN: number;
			static ROWID: number;
			static NCHAR: number;
			static NVARCHAR: number;
			static LONGNVARCHAR: number;
			static NCLOB: number;
			static SQLXML: number;
			static class: java.lang.Class<java.sql.Types>;
		}
		export class Savepoint implements java.sql.ISavepoint {
			constructor(implementation: java.sql.ISavepoint);
			getSavepointId(): number;
			getSavepointName(): string;
		}
		export interface IResultSetMetaData extends java.sql.IWrapper {
			getPrecision(arg1: number): number;
			getScale(arg1: number): number;
			isNullable(arg1: number): number;
			isSigned(arg1: number): boolean;
			getCatalogName(arg1: number): string;
			getColumnClassName(arg1: number): string;
			getColumnDisplaySize(arg1: number): number;
			getColumnLabel(arg1: number): string;
			getColumnType(arg1: number): number;
			getColumnTypeName(arg1: number): string;
			getSchemaName(arg1: number): string;
			getTableName(arg1: number): string;
			isAutoIncrement(arg1: number): boolean;
			isCaseSensitive(arg1: number): boolean;
			isCurrency(arg1: number): boolean;
			isDefinitelyWritable(arg1: number): boolean;
			isSearchable(arg1: number): boolean;
			isWritable(arg1: number): boolean;
			isReadOnly(arg1: number): boolean;
			getColumnCount(): number;
			getColumnName(arg1: number): string;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export module IResultSetMetaData {
			var columnNoNulls: number;
			var columnNullable: number;
			var columnNullableUnknown: number;
		}
		export class ResultSet implements java.sql.IWrapper, java.sql.IResultSet {
			constructor(implementation: java.sql.IResultSet);
			static FETCH_FORWARD: number;
			static FETCH_REVERSE: number;
			static FETCH_UNKNOWN: number;
			static TYPE_FORWARD_ONLY: number;
			static TYPE_SCROLL_INSENSITIVE: number;
			static TYPE_SCROLL_SENSITIVE: number;
			static CONCUR_READ_ONLY: number;
			static CONCUR_UPDATABLE: number;
			static HOLD_CURSORS_OVER_COMMIT: number;
			static CLOSE_CURSORS_AT_COMMIT: number;
			FetchSize: number;
			FetchDirection: number;
			getBinaryStream(arg1: number): java.io.InputStream;
			getBinaryStream(arg1: java.lang.String): java.io.InputStream;
			getBinaryStream(arg1: string): java.io.InputStream;
			clearWarnings(): void;
			getHoldability(): number;
			getMetaData(): java.sql.IResultSetMetaData;
			getWarnings(): java.sql.SQLWarning;
			getFetchDirection(): number;
			getFetchSize(): number;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			absolute(arg1: number): boolean;
			afterLast(): void;
			beforeFirst(): void;
			cancelRowUpdates(): void;
			deleteRow(): void;
			getAsciiStream(arg1: java.lang.String): java.io.InputStream;
			getAsciiStream(arg1: string): java.io.InputStream;
			getAsciiStream(arg1: number): java.io.InputStream;
			getBlob(arg1: number): java.sql.IBlob;
			getBlob(arg1: java.lang.String): java.sql.IBlob;
			getBlob(arg1: string): java.sql.IBlob;
			getClob(arg1: java.lang.String): java.sql.IClob;
			getClob(arg1: string): java.sql.IClob;
			getClob(arg1: number): java.sql.IClob;
			getConcurrency(): number;
			getCursorName(): string;
			getNCharacterStream(arg1: java.lang.String): java.io.Reader;
			getNCharacterStream(arg1: string): java.io.Reader;
			getNCharacterStream(arg1: number): java.io.Reader;
			getNClob(arg1: java.lang.String): java.sql.INClob;
			getNClob(arg1: string): java.sql.INClob;
			getNClob(arg1: number): java.sql.INClob;
			getNString(arg1: java.lang.String): string;
			getNString(arg1: string): string;
			getNString(arg1: number): string;
			getRowId(arg1: java.lang.String): java.sql.IRowId;
			getRowId(arg1: string): java.sql.IRowId;
			getRowId(arg1: number): java.sql.IRowId;
			getSQLXML(arg1: number): java.sql.ISQLXML;
			getSQLXML(arg1: java.lang.String): java.sql.ISQLXML;
			getSQLXML(arg1: string): java.sql.ISQLXML;
			getStatement(): java.sql.IStatement;
			getUnicodeStream(arg1: number): java.io.InputStream;
			getUnicodeStream(arg1: java.lang.String): java.io.InputStream;
			getUnicodeStream(arg1: string): java.io.InputStream;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			moveToCurrentRow(): void;
			moveToInsertRow(): void;
			refreshRow(): void;
			relative(arg1: number): boolean;
			rowDeleted(): boolean;
			rowInserted(): boolean;
			rowUpdated(): boolean;
			updateArray(arg1: java.lang.String, arg2: java.sql.IArray): void;
			updateArray(arg1: string, arg2: java.sql.IArray): void;
			updateArray(arg1: number, arg2: java.sql.IArray): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: java.lang.String, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			updateAsciiStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: number): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			updateBigDecimal(arg1: java.lang.String, arg2: java.math.BigDecimal): void;
			updateBigDecimal(arg1: string, arg2: java.math.BigDecimal): void;
			updateBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			updateBinaryStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: java.lang.String, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: number): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			updateBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: java.lang.String, arg2: java.sql.IBlob): void;
			updateBlob(arg1: string, arg2: java.sql.IBlob): void;
			updateBlob(arg1: java.lang.String, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: number, arg2: java.io.InputStream): void;
			updateBlob(arg1: number, arg2: java.sql.IBlob): void;
			updateBlob(arg1: java.lang.String, arg2: java.io.InputStream): void;
			updateBlob(arg1: string, arg2: java.io.InputStream): void;
			updateBoolean(arg1: number, arg2: boolean): void;
			updateBoolean(arg1: java.lang.String, arg2: boolean): void;
			updateBoolean(arg1: string, arg2: boolean): void;
			updateByte(arg1: java.lang.String, arg2: native.Byte): void;
			updateByte(arg1: string, arg2: native.Byte): void;
			updateByte(arg1: number, arg2: native.Byte): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: java.lang.String, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: java.lang.String, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateCharacterStream(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: java.lang.String, arg2: java.io.Reader): void;
			updateClob(arg1: string, arg2: java.io.Reader): void;
			updateClob(arg1: number, arg2: java.sql.IClob): void;
			updateClob(arg1: number, arg2: java.io.Reader): void;
			updateClob(arg1: java.lang.String, arg2: java.sql.IClob): void;
			updateClob(arg1: string, arg2: java.sql.IClob): void;
			updateClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateDate(arg1: number, arg2: java.sql.Date): void;
			updateDate(arg1: java.lang.String, arg2: java.sql.Date): void;
			updateDate(arg1: string, arg2: java.sql.Date): void;
			updateDouble(arg1: number, arg2: native.Double): void;
			updateDouble(arg1: number, arg2: number): void;
			updateDouble(arg1: java.lang.String, arg2: native.Double): void;
			updateDouble(arg1: string, arg2: number): void;
			updateFloat(arg1: java.lang.String, arg2: native.Float): void;
			updateFloat(arg1: string, arg2: native.Float): void;
			updateFloat(arg1: number, arg2: native.Float): void;
			updateInt(arg1: java.lang.String, arg2: number): void;
			updateInt(arg1: string, arg2: number): void;
			updateInt(arg1: number, arg2: number): void;
			updateLong(arg1: java.lang.String, arg2: native.Long): void;
			updateLong(arg1: string, arg2: native.Long): void;
			updateLong(arg1: number, arg2: native.Long): void;
			updateNCharacterStream(arg1: java.lang.String, arg2: java.io.Reader): void;
			updateNCharacterStream(arg1: string, arg2: java.io.Reader): void;
			updateNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: java.lang.String, arg2: java.io.Reader): void;
			updateNClob(arg1: string, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.sql.INClob): void;
			updateNClob(arg1: java.lang.String, arg2: java.sql.INClob): void;
			updateNClob(arg1: string, arg2: java.sql.INClob): void;
			updateNString(arg1: number, arg2: java.lang.String): void;
			updateNString(arg1: number, arg2: string): void;
			updateNString(arg1: java.lang.String, arg2: java.lang.String): void;
			updateNString(arg1: string, arg2: string): void;
			updateNull(arg1: number): void;
			updateNull(arg1: java.lang.String): void;
			updateNull(arg1: string): void;
			updateObject(arg1: number, arg2: any): void;
			updateObject(arg1: java.lang.String, arg2: any, arg3: number): void;
			updateObject(arg1: string, arg2: any, arg3: number): void;
			updateObject(arg1: java.lang.String, arg2: any): void;
			updateObject(arg1: string, arg2: any): void;
			updateObject(arg1: number, arg2: any, arg3: number): void;
			updateRef(arg1: java.lang.String, arg2: java.sql.IRef): void;
			updateRef(arg1: string, arg2: java.sql.IRef): void;
			updateRef(arg1: number, arg2: java.sql.IRef): void;
			updateRow(): void;
			updateRowId(arg1: number, arg2: java.sql.IRowId): void;
			updateRowId(arg1: java.lang.String, arg2: java.sql.IRowId): void;
			updateRowId(arg1: string, arg2: java.sql.IRowId): void;
			updateSQLXML(arg1: java.lang.String, arg2: java.sql.ISQLXML): void;
			updateSQLXML(arg1: string, arg2: java.sql.ISQLXML): void;
			updateSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			updateShort(arg1: java.lang.String, arg2: native.Short): void;
			updateShort(arg1: string, arg2: native.Short): void;
			updateShort(arg1: number, arg2: native.Short): void;
			updateString(arg1: java.lang.String, arg2: java.lang.String): void;
			updateString(arg1: string, arg2: string): void;
			updateString(arg1: number, arg2: java.lang.String): void;
			updateString(arg1: number, arg2: string): void;
			updateTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			updateTimestamp(arg1: java.lang.String, arg2: java.sql.Timestamp): void;
			updateTimestamp(arg1: string, arg2: java.sql.Timestamp): void;
			wasNull(): boolean;
			getBytes(arg1: number): native.Array<native.Byte>;
			getBytes(arg1: java.lang.String): native.Array<native.Byte>;
			getBytes(arg1: string): native.Array<native.Byte>;
			getArray(arg1: number): java.sql.IArray;
			getArray(arg1: java.lang.String): java.sql.IArray;
			getArray(arg1: string): java.sql.IArray;
			next(): boolean;
			getURL(arg1: java.lang.String): java.net.URL;
			getURL(arg1: string): java.net.URL;
			getURL(arg1: number): java.net.URL;
			close(): void;
			getBoolean(arg1: number): boolean;
			getBoolean(arg1: java.lang.String): boolean;
			getBoolean(arg1: string): boolean;
			getByte(arg1: java.lang.String): number;
			getByte(arg1: string): number;
			getByte(arg1: number): number;
			getDouble(arg1: java.lang.String): any;
			getDouble(arg1: string): any;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getFloat(arg1: java.lang.String): number;
			getFloat(arg1: string): number;
			getInt(arg1: java.lang.String): number;
			getInt(arg1: string): number;
			getInt(arg1: number): number;
			getLong(arg1: java.lang.String): any;
			getLong(arg1: string): any;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getShort(arg1: java.lang.String): number;
			getShort(arg1: string): number;
			getType(): number;
			previous(): boolean;
			getObject(arg1: number): any;
			getObject(arg1: java.lang.String): any;
			getObject(arg1: string): any;
			getObject<T>(arg1: number, arg2: java.lang.Class<T>): T;
			getObject<T>(arg1: java.lang.String, arg2: java.lang.Class<T>): T;
			getObject<T>(arg1: string, arg2: java.lang.Class<T>): T;
			getObject(arg1: java.lang.String, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getObject(arg1: string, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getObject(arg1: number, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getString(arg1: number): string;
			getString(arg1: java.lang.String): string;
			getString(arg1: string): string;
			getRef(arg1: java.lang.String): java.sql.IRef;
			getRef(arg1: string): java.sql.IRef;
			getRef(arg1: number): java.sql.IRef;
			getDate(arg1: java.lang.String): java.sql.Date;
			getDate(arg1: string): java.sql.Date;
			getDate(arg1: java.lang.String, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: string, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number): java.sql.Date;
			getTime(arg1: number, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: java.lang.String, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: string, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: number): java.sql.Time;
			getTime(arg1: java.lang.String): java.sql.Time;
			getTime(arg1: string): java.sql.Time;
			first(): boolean;
			last(): boolean;
			isClosed(): boolean;
			getTimestamp(arg1: number, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: java.lang.String, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: string, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: number): java.sql.Timestamp;
			getTimestamp(arg1: java.lang.String): java.sql.Timestamp;
			getTimestamp(arg1: string): java.sql.Timestamp;
			updateTime(arg1: number, arg2: java.sql.Time): void;
			updateTime(arg1: java.lang.String, arg2: java.sql.Time): void;
			updateTime(arg1: string, arg2: java.sql.Time): void;
			getBigDecimal(arg1: number): java.math.BigDecimal;
			getBigDecimal(arg1: java.lang.String, arg2: number): java.math.BigDecimal;
			getBigDecimal(arg1: string, arg2: number): java.math.BigDecimal;
			getBigDecimal(arg1: java.lang.String): java.math.BigDecimal;
			getBigDecimal(arg1: string): java.math.BigDecimal;
			getBigDecimal(arg1: number, arg2: number): java.math.BigDecimal;
			updateBytes(arg1: java.lang.String, arg2: native.Array<native.Byte>): void;
			updateBytes(arg1: string, arg2: native.Array<native.Byte>): void;
			updateBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getRow(): number;
			getCharacterStream(arg1: java.lang.String): java.io.Reader;
			getCharacterStream(arg1: string): java.io.Reader;
			getCharacterStream(arg1: number): java.io.Reader;
			findColumn(arg1: java.lang.String): number;
			findColumn(arg1: string): number;
			insertRow(): void;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class SQLDataException extends java.sql.SQLNonTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLDataException>;
		}
		export class Array implements java.sql.IArray {
			constructor(implementation: java.sql.IArray);
			getBaseTypeName(): string;
			getResultSet(): java.sql.IResultSet;
			getResultSet(arg1: java.util.IMap<string, java.lang.Class<any>>): java.sql.IResultSet;
			getResultSet(arg1: native.Long, arg2: number): java.sql.IResultSet;
			getResultSet(arg1: native.Long, arg2: number, arg3: java.util.IMap<string, java.lang.Class<any>>): java.sql.IResultSet;
			getArray(arg1: native.Long, arg2: number, arg3: java.util.IMap<string, java.lang.Class<any>>): any;
			getArray(): any;
			getArray(arg1: java.util.IMap<string, java.lang.Class<any>>): any;
			getArray(arg1: native.Long, arg2: number): any;
			free(): void;
			getBaseType(): number;
		}
		export class Clob implements java.sql.IClob {
			constructor(implementation: java.sql.IClob);
			setAsciiStream(arg1: native.Long): java.io.OutputStream;
			getAsciiStream(): java.io.InputStream;
			getSubString(arg1: native.Long, arg2: number): string;
			length(): any;
			position(arg1: java.lang.String, arg2: native.Long): any;
			position(arg1: string, arg2: native.Long): any;
			position(arg1: java.sql.IClob, arg2: native.Long): any;
			truncate(arg1: native.Long): void;
			free(): void;
			getCharacterStream(): java.io.Reader;
			getCharacterStream(arg1: native.Long, arg2: native.Long): java.io.Reader;
			setCharacterStream(arg1: native.Long): java.io.Writer;
			setString(arg1: native.Long, arg2: java.lang.String): number;
			setString(arg1: native.Long, arg2: string): number;
			setString(arg1: native.Long, arg2: java.lang.String, arg3: number, arg4: number): number;
			setString(arg1: native.Long, arg2: string, arg3: number, arg4: number): number;
		}
		export class SQLData implements java.sql.ISQLData {
			constructor(implementation: java.sql.ISQLData);
			getSQLTypeName(): string;
			readSQL(arg1: java.sql.ISQLInput, arg2: java.lang.String): void;
			readSQL(arg1: java.sql.ISQLInput, arg2: string): void;
			writeSQL(arg1: java.sql.ISQLOutput): void;
		}
		export interface INClob extends java.sql.IClob {
			setAsciiStream(arg1: native.Long): java.io.OutputStream;
			getAsciiStream(): java.io.InputStream;
			getSubString(arg1: native.Long, arg2: number): string;
			length(): any;
			position(arg1: string, arg2: native.Long): any;
			position(arg1: java.sql.IClob, arg2: native.Long): any;
			truncate(arg1: native.Long): void;
			free(): void;
			getCharacterStream(): java.io.Reader;
			getCharacterStream(arg1: native.Long, arg2: native.Long): java.io.Reader;
			setCharacterStream(arg1: native.Long): java.io.Writer;
			setString(arg1: native.Long, arg2: string): number;
			setString(arg1: native.Long, arg2: string, arg3: number, arg4: number): number;
		}
		export class SQLTransientException extends java.sql.SQLException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLTransientException>;
		}
		export class Driver implements java.sql.IDriver {
			constructor(implementation: java.sql.IDriver);
			acceptsURL(arg1: java.lang.String): boolean;
			acceptsURL(arg1: string): boolean;
			getParentLogger(): java.util.logging.Logger;
			getPropertyInfo(arg1: java.lang.String, arg2: java.util.Properties): native.Array<java.sql.DriverPropertyInfo>;
			getPropertyInfo(arg1: string, arg2: java.util.Properties): native.Array<java.sql.DriverPropertyInfo>;
			jdbcCompliant(): boolean;
			connect(arg1: java.lang.String, arg2: java.util.Properties): java.sql.IConnection;
			connect(arg1: string, arg2: java.util.Properties): java.sql.IConnection;
			getMajorVersion(): number;
			getMinorVersion(): number;
		}
		export class DataTruncation extends java.sql.SQLWarning {
			constructor(arg1: number, arg2: boolean, arg3: boolean, arg4: number, arg5: number);
			constructor(arg1: number, arg2: boolean, arg3: boolean, arg4: number, arg5: number, arg6: java.lang.Throwable);
			static class: java.lang.Class<java.sql.DataTruncation>;
			getDataSize(): number;
			getRead(): boolean;
			getTransferSize(): number;
			getIndex(): number;
			getParameter(): boolean;
		}
		export class SQLOutput implements java.sql.ISQLOutput {
			constructor(implementation: java.sql.ISQLOutput);
			writeAsciiStream(arg1: java.io.InputStream): void;
			writeBigDecimal(arg1: java.math.BigDecimal): void;
			writeBinaryStream(arg1: java.io.InputStream): void;
			writeBlob(arg1: java.sql.IBlob): void;
			writeCharacterStream(arg1: java.io.Reader): void;
			writeClob(arg1: java.sql.IClob): void;
			writeDate(arg1: java.sql.Date): void;
			writeNClob(arg1: java.sql.INClob): void;
			writeNString(arg1: java.lang.String): void;
			writeNString(arg1: string): void;
			writeRef(arg1: java.sql.IRef): void;
			writeRowId(arg1: java.sql.IRowId): void;
			writeSQLXML(arg1: java.sql.ISQLXML): void;
			writeStruct(arg1: java.sql.IStruct): void;
			writeTime(arg1: java.sql.Time): void;
			writeTimestamp(arg1: java.sql.Timestamp): void;
			writeURL(arg1: java.net.URL): void;
			writeObject(arg1: java.sql.ISQLData): void;
			writeInt(arg1: number): void;
			writeBytes(arg1: native.Array<native.Byte>): void;
			writeByte(arg1: native.Byte): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: native.Short): void;
			writeFloat(arg1: native.Float): void;
			writeArray(arg1: java.sql.IArray): void;
			writeBoolean(arg1: boolean): void;
			writeDouble(arg1: native.Double): void;
			writeDouble(arg1: number): void;
			writeString(arg1: java.lang.String): void;
			writeString(arg1: string): void;
		}
		export class ParameterMetaData implements java.sql.IWrapper, java.sql.IParameterMetaData {
			constructor(implementation: java.sql.IParameterMetaData);
			static parameterNoNulls: number;
			static parameterNullable: number;
			static parameterNullableUnknown: number;
			static parameterModeUnknown: number;
			static parameterModeIn: number;
			static parameterModeInOut: number;
			static parameterModeOut: number;
			getParameterClassName(arg1: number): string;
			getParameterCount(): number;
			getParameterMode(arg1: number): number;
			getParameterType(arg1: number): number;
			getParameterTypeName(arg1: number): string;
			getPrecision(arg1: number): number;
			getScale(arg1: number): number;
			isNullable(arg1: number): number;
			isSigned(arg1: number): boolean;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export interface ISQLXML {
			getBinaryStream(): java.io.InputStream;
			setBinaryStream(): java.io.OutputStream;
			setResult<T extends javax.xml.transform.IResult>(arg1: java.lang.Class<T>): T;
			getString(): string;
			getSource<T extends javax.xml.transform.ISource>(arg1: java.lang.Class<T>): T;
			free(): void;
			getCharacterStream(): java.io.Reader;
			setCharacterStream(): java.io.Writer;
			setString(arg1: string): void;
		}
		export class Date extends java.util.Date {
			constructor(arg1: number, arg2: number, arg3: number);
			constructor(arg1: native.Long);
			static class: java.lang.Class<java.sql.Date>;
			Seconds: number;
			Hours: number;
			Minutes: number;
			toString(): string;
			static valueOf(arg1: java.lang.String): java.sql.Date;
			static valueOf(arg1: string): java.sql.Date;
			setTime(arg1: native.Long): void;
			getHours(): number;
			getMinutes(): number;
			getSeconds(): number;
			setHours(arg1: number): void;
			setMinutes(arg1: number): void;
			setSeconds(arg1: number): void;
		}
		export interface IArray {
			getBaseTypeName(): string;
			getResultSet(): java.sql.IResultSet;
			getResultSet(arg1: java.util.IMap<string, java.lang.Class<any>>): java.sql.IResultSet;
			getResultSet(arg1: native.Long, arg2: number): java.sql.IResultSet;
			getResultSet(arg1: native.Long, arg2: number, arg3: java.util.IMap<string, java.lang.Class<any>>): java.sql.IResultSet;
			getArray(arg1: native.Long, arg2: number, arg3: java.util.IMap<string, java.lang.Class<any>>): any;
			getArray(): any;
			getArray(arg1: java.util.IMap<string, java.lang.Class<any>>): any;
			getArray(arg1: native.Long, arg2: number): any;
			free(): void;
			getBaseType(): number;
		}
		export interface IResultSet extends java.sql.IWrapper {
			getBinaryStream(arg1: number): java.io.InputStream;
			getBinaryStream(arg1: string): java.io.InputStream;
			clearWarnings(): void;
			getHoldability(): number;
			getMetaData(): java.sql.IResultSetMetaData;
			getWarnings(): java.sql.SQLWarning;
			getFetchDirection(): number;
			getFetchSize(): number;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			absolute(arg1: number): boolean;
			afterLast(): void;
			beforeFirst(): void;
			cancelRowUpdates(): void;
			deleteRow(): void;
			getAsciiStream(arg1: string): java.io.InputStream;
			getAsciiStream(arg1: number): java.io.InputStream;
			getBlob(arg1: number): java.sql.IBlob;
			getBlob(arg1: string): java.sql.IBlob;
			getClob(arg1: string): java.sql.IClob;
			getClob(arg1: number): java.sql.IClob;
			getConcurrency(): number;
			getCursorName(): string;
			getNCharacterStream(arg1: string): java.io.Reader;
			getNCharacterStream(arg1: number): java.io.Reader;
			getNClob(arg1: string): java.sql.INClob;
			getNClob(arg1: number): java.sql.INClob;
			getNString(arg1: string): string;
			getNString(arg1: number): string;
			getRowId(arg1: string): java.sql.IRowId;
			getRowId(arg1: number): java.sql.IRowId;
			getSQLXML(arg1: number): java.sql.ISQLXML;
			getSQLXML(arg1: string): java.sql.ISQLXML;
			getStatement(): java.sql.IStatement;
			getUnicodeStream(arg1: number): java.io.InputStream;
			getUnicodeStream(arg1: string): java.io.InputStream;
			isAfterLast(): boolean;
			isBeforeFirst(): boolean;
			isFirst(): boolean;
			isLast(): boolean;
			moveToCurrentRow(): void;
			moveToInsertRow(): void;
			refreshRow(): void;
			relative(arg1: number): boolean;
			rowDeleted(): boolean;
			rowInserted(): boolean;
			rowUpdated(): boolean;
			updateArray(arg1: string, arg2: java.sql.IArray): void;
			updateArray(arg1: number, arg2: java.sql.IArray): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			updateAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			updateBigDecimal(arg1: string, arg2: java.math.BigDecimal): void;
			updateBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			updateBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream): void;
			updateBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			updateBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: string, arg2: java.sql.IBlob): void;
			updateBlob(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			updateBlob(arg1: number, arg2: java.io.InputStream): void;
			updateBlob(arg1: number, arg2: java.sql.IBlob): void;
			updateBlob(arg1: string, arg2: java.io.InputStream): void;
			updateBoolean(arg1: number, arg2: boolean): void;
			updateBoolean(arg1: string, arg2: boolean): void;
			updateByte(arg1: string, arg2: native.Byte): void;
			updateByte(arg1: number, arg2: native.Byte): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader, arg3: number): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader): void;
			updateCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: string, arg2: java.io.Reader): void;
			updateClob(arg1: number, arg2: java.sql.IClob): void;
			updateClob(arg1: number, arg2: java.io.Reader): void;
			updateClob(arg1: string, arg2: java.sql.IClob): void;
			updateClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateDate(arg1: number, arg2: java.sql.Date): void;
			updateDate(arg1: string, arg2: java.sql.Date): void;
			updateDouble(arg1: number, arg2: number): void;
			updateDouble(arg1: string, arg2: number): void;
			updateFloat(arg1: string, arg2: native.Float): void;
			updateFloat(arg1: number, arg2: native.Float): void;
			updateInt(arg1: string, arg2: number): void;
			updateInt(arg1: number, arg2: number): void;
			updateLong(arg1: string, arg2: native.Long): void;
			updateLong(arg1: number, arg2: native.Long): void;
			updateNCharacterStream(arg1: string, arg2: java.io.Reader): void;
			updateNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			updateNClob(arg1: string, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.io.Reader): void;
			updateNClob(arg1: number, arg2: java.sql.INClob): void;
			updateNClob(arg1: string, arg2: java.sql.INClob): void;
			updateNString(arg1: number, arg2: string): void;
			updateNString(arg1: string, arg2: string): void;
			updateNull(arg1: number): void;
			updateNull(arg1: string): void;
			updateObject(arg1: number, arg2: any): void;
			updateObject(arg1: string, arg2: any, arg3: number): void;
			updateObject(arg1: string, arg2: any): void;
			updateObject(arg1: number, arg2: any, arg3: number): void;
			updateRef(arg1: string, arg2: java.sql.IRef): void;
			updateRef(arg1: number, arg2: java.sql.IRef): void;
			updateRow(): void;
			updateRowId(arg1: number, arg2: java.sql.IRowId): void;
			updateRowId(arg1: string, arg2: java.sql.IRowId): void;
			updateSQLXML(arg1: string, arg2: java.sql.ISQLXML): void;
			updateSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			updateShort(arg1: string, arg2: native.Short): void;
			updateShort(arg1: number, arg2: native.Short): void;
			updateString(arg1: string, arg2: string): void;
			updateString(arg1: number, arg2: string): void;
			updateTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			updateTimestamp(arg1: string, arg2: java.sql.Timestamp): void;
			wasNull(): boolean;
			getBytes(arg1: number): native.Array<native.Byte>;
			getBytes(arg1: string): native.Array<native.Byte>;
			getArray(arg1: number): java.sql.IArray;
			getArray(arg1: string): java.sql.IArray;
			next(): boolean;
			getURL(arg1: string): java.net.URL;
			getURL(arg1: number): java.net.URL;
			close(): void;
			getBoolean(arg1: number): boolean;
			getBoolean(arg1: string): boolean;
			getByte(arg1: string): number;
			getByte(arg1: number): number;
			getDouble(arg1: string): any;
			getDouble(arg1: number): any;
			getFloat(arg1: number): number;
			getFloat(arg1: string): number;
			getInt(arg1: string): number;
			getInt(arg1: number): number;
			getLong(arg1: string): any;
			getLong(arg1: number): any;
			getShort(arg1: number): number;
			getShort(arg1: string): number;
			getType(): number;
			previous(): boolean;
			getObject(arg1: number): any;
			getObject(arg1: string): any;
			getObject<T>(arg1: number, arg2: java.lang.Class<T>): T;
			getObject<T>(arg1: string, arg2: java.lang.Class<T>): T;
			getObject(arg1: string, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getObject(arg1: number, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getString(arg1: number): string;
			getString(arg1: string): string;
			getRef(arg1: string): java.sql.IRef;
			getRef(arg1: number): java.sql.IRef;
			getDate(arg1: string): java.sql.Date;
			getDate(arg1: string, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number): java.sql.Date;
			getTime(arg1: number, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: string, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: number): java.sql.Time;
			getTime(arg1: string): java.sql.Time;
			first(): boolean;
			last(): boolean;
			isClosed(): boolean;
			getTimestamp(arg1: number, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: string, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: number): java.sql.Timestamp;
			getTimestamp(arg1: string): java.sql.Timestamp;
			updateTime(arg1: number, arg2: java.sql.Time): void;
			updateTime(arg1: string, arg2: java.sql.Time): void;
			getBigDecimal(arg1: number): java.math.BigDecimal;
			getBigDecimal(arg1: string, arg2: number): java.math.BigDecimal;
			getBigDecimal(arg1: string): java.math.BigDecimal;
			getBigDecimal(arg1: number, arg2: number): java.math.BigDecimal;
			updateBytes(arg1: string, arg2: native.Array<native.Byte>): void;
			updateBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getRow(): number;
			getCharacterStream(arg1: string): java.io.Reader;
			getCharacterStream(arg1: number): java.io.Reader;
			findColumn(arg1: string): number;
			insertRow(): void;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export module IResultSet {
			var FETCH_FORWARD: number;
			var FETCH_REVERSE: number;
			var FETCH_UNKNOWN: number;
			var TYPE_FORWARD_ONLY: number;
			var TYPE_SCROLL_INSENSITIVE: number;
			var TYPE_SCROLL_SENSITIVE: number;
			var CONCUR_READ_ONLY: number;
			var CONCUR_UPDATABLE: number;
			var HOLD_CURSORS_OVER_COMMIT: number;
			var CLOSE_CURSORS_AT_COMMIT: number;
		}
		export interface ICallableStatement extends java.sql.IPreparedStatement {
			setBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream): void;
			setBytes(arg1: string, arg2: native.Array<native.Byte>): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			setBigDecimal(arg1: string, arg2: java.math.BigDecimal): void;
			setBlob(arg1: string, arg2: java.io.InputStream): void;
			setBlob(arg1: string, arg2: java.sql.IBlob): void;
			setBlob(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			setClob(arg1: string, arg2: java.sql.IClob): void;
			setClob(arg1: string, arg2: java.io.Reader): void;
			setClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: string, arg2: java.io.Reader): void;
			setNClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: string, arg2: java.sql.INClob): void;
			setNClob(arg1: string, arg2: java.io.Reader): void;
			setNString(arg1: string, arg2: string): void;
			setNull(arg1: string, arg2: number): void;
			setNull(arg1: string, arg2: number, arg3: string): void;
			setRowId(arg1: string, arg2: java.sql.IRowId): void;
			setSQLXML(arg1: string, arg2: java.sql.ISQLXML): void;
			getBlob(arg1: string): java.sql.IBlob;
			getBlob(arg1: number): java.sql.IBlob;
			getClob(arg1: string): java.sql.IClob;
			getClob(arg1: number): java.sql.IClob;
			getNCharacterStream(arg1: string): java.io.Reader;
			getNCharacterStream(arg1: number): java.io.Reader;
			getNClob(arg1: string): java.sql.INClob;
			getNClob(arg1: number): java.sql.INClob;
			getNString(arg1: number): string;
			getNString(arg1: string): string;
			getRowId(arg1: string): java.sql.IRowId;
			getRowId(arg1: number): java.sql.IRowId;
			getSQLXML(arg1: string): java.sql.ISQLXML;
			getSQLXML(arg1: number): java.sql.ISQLXML;
			wasNull(): boolean;
			registerOutParameter(arg1: string, arg2: number, arg3: number): void;
			registerOutParameter(arg1: string, arg2: number): void;
			registerOutParameter(arg1: number, arg2: number): void;
			registerOutParameter(arg1: string, arg2: number, arg3: string): void;
			registerOutParameter(arg1: number, arg2: number, arg3: number): void;
			registerOutParameter(arg1: number, arg2: number, arg3: string): void;
			getBytes(arg1: number): native.Array<native.Byte>;
			getBytes(arg1: string): native.Array<native.Byte>;
			getArray(arg1: string): java.sql.IArray;
			getArray(arg1: number): java.sql.IArray;
			getURL(arg1: string): java.net.URL;
			getURL(arg1: number): java.net.URL;
			getBoolean(arg1: string): boolean;
			getBoolean(arg1: number): boolean;
			getByte(arg1: number): number;
			getByte(arg1: string): number;
			getDouble(arg1: string): any;
			getDouble(arg1: number): any;
			getFloat(arg1: string): number;
			getFloat(arg1: number): number;
			getInt(arg1: string): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getLong(arg1: string): any;
			getShort(arg1: number): number;
			getShort(arg1: string): number;
			setBoolean(arg1: string, arg2: boolean): void;
			setByte(arg1: string, arg2: native.Byte): void;
			setDouble(arg1: string, arg2: number): void;
			setFloat(arg1: string, arg2: native.Float): void;
			setInt(arg1: string, arg2: number): void;
			setLong(arg1: string, arg2: native.Long): void;
			setShort(arg1: string, arg2: native.Short): void;
			getObject<T>(arg1: number, arg2: java.lang.Class<T>): T;
			getObject(arg1: string): any;
			getObject(arg1: number, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getObject(arg1: number): any;
			getObject<T>(arg1: string, arg2: java.lang.Class<T>): T;
			getObject(arg1: string, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			setTimestamp(arg1: string, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: string, arg2: java.sql.Timestamp): void;
			getString(arg1: number): string;
			getString(arg1: string): string;
			getRef(arg1: number): java.sql.IRef;
			getRef(arg1: string): java.sql.IRef;
			setURL(arg1: string, arg2: java.net.URL): void;
			getDate(arg1: number, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number): java.sql.Date;
			getDate(arg1: string, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: string): java.sql.Date;
			getTime(arg1: number): java.sql.Time;
			getTime(arg1: number, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: string, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: string): java.sql.Time;
			setTime(arg1: string, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: string, arg2: java.sql.Time): void;
			setObject(arg1: string, arg2: any): void;
			setObject(arg1: string, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: string, arg2: any, arg3: number): void;
			getTimestamp(arg1: string, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: number): java.sql.Timestamp;
			getTimestamp(arg1: number, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: string): java.sql.Timestamp;
			setDate(arg1: string, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: string, arg2: java.sql.Date): void;
			getBigDecimal(arg1: number, arg2: number): java.math.BigDecimal;
			getBigDecimal(arg1: string): java.math.BigDecimal;
			getBigDecimal(arg1: number): java.math.BigDecimal;
			getCharacterStream(arg1: string): java.io.Reader;
			getCharacterStream(arg1: number): java.io.Reader;
			setCharacterStream(arg1: string, arg2: java.io.Reader): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader, arg3: number): void;
			setString(arg1: string, arg2: string): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			setBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getMetaData(): java.sql.IResultSetMetaData;
			addBatch(): void;
			clearParameters(): void;
			executeQuery(): java.sql.IResultSet;
			executeUpdate(): number;
			getParameterMetaData(): java.sql.IParameterMetaData;
			setArray(arg1: number, arg2: java.sql.IArray): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			setBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: number, arg2: java.sql.IBlob): void;
			setBlob(arg1: number, arg2: java.io.InputStream): void;
			setClob(arg1: number, arg2: java.sql.IClob): void;
			setClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: number, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.sql.INClob): void;
			setNClob(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNString(arg1: number, arg2: string): void;
			setNull(arg1: number, arg2: number, arg3: string): void;
			setNull(arg1: number, arg2: number): void;
			setRef(arg1: number, arg2: java.sql.IRef): void;
			setRowId(arg1: number, arg2: java.sql.IRowId): void;
			setSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			setUnicodeStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBoolean(arg1: number, arg2: boolean): void;
			setByte(arg1: number, arg2: native.Byte): void;
			setDouble(arg1: number, arg2: number): void;
			setFloat(arg1: number, arg2: native.Float): void;
			setInt(arg1: number, arg2: number): void;
			setLong(arg1: number, arg2: native.Long): void;
			setShort(arg1: number, arg2: native.Short): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			setURL(arg1: number, arg2: java.net.URL): void;
			execute(): boolean;
			setTime(arg1: number, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: number, arg2: java.sql.Time): void;
			setObject(arg1: number, arg2: any, arg3: number): void;
			setObject(arg1: number, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: number, arg2: any): void;
			setDate(arg1: number, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: number, arg2: java.sql.Date): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setString(arg1: number, arg2: string): void;
			getResultSet(): java.sql.IResultSet;
			clearWarnings(): void;
			getWarnings(): java.sql.SQLWarning;
			addBatch(arg1: string): void;
			executeQuery(arg1: string): java.sql.IResultSet;
			executeUpdate(arg1: string, arg2: native.Array<java.lang.String>): number;
			executeUpdate(arg1: string): number;
			executeUpdate(arg1: string, arg2: number): number;
			clearBatch(): void;
			closeOnCompletion(): void;
			executeBatch(): native.Array<number>;
			getFetchDirection(): number;
			getFetchSize(): number;
			getGeneratedKeys(): java.sql.IResultSet;
			getMaxFieldSize(): number;
			getMaxRows(): number;
			getMoreResults(arg1: number): boolean;
			getMoreResults(): boolean;
			getQueryTimeout(): number;
			getResultSetConcurrency(): number;
			getResultSetHoldability(): number;
			getResultSetType(): number;
			getUpdateCount(): number;
			isCloseOnCompletion(): boolean;
			isPoolable(): boolean;
			setCursorName(arg1: string): void;
			setEscapeProcessing(arg1: boolean): void;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			setMaxFieldSize(arg1: number): void;
			setMaxRows(arg1: number): void;
			setPoolable(arg1: boolean): void;
			setQueryTimeout(arg1: number): void;
			close(): void;
			getConnection(): java.sql.IConnection;
			execute(arg1: string): boolean;
			execute(arg1: string, arg2: native.Array<number>): boolean;
			execute(arg1: string, arg2: number): boolean;
			cancel(): void;
			isClosed(): boolean;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class SQLInput implements java.sql.ISQLInput {
			constructor(implementation: java.sql.ISQLInput);
			wasNull(): boolean;
			readAsciiStream(): java.io.InputStream;
			readBigDecimal(): java.math.BigDecimal;
			readBinaryStream(): java.io.InputStream;
			readBlob(): java.sql.IBlob;
			readCharacterStream(): java.io.Reader;
			readClob(): java.sql.IClob;
			readDate(): java.sql.Date;
			readNClob(): java.sql.INClob;
			readNString(): string;
			readRef(): java.sql.IRef;
			readRowId(): java.sql.IRowId;
			readSQLXML(): java.sql.ISQLXML;
			readTime(): java.sql.Time;
			readTimestamp(): java.sql.Timestamp;
			readURL(): java.net.URL;
			readObject(): any;
			readInt(): number;
			readBytes(): native.Array<native.Byte>;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			readFloat(): number;
			readArray(): java.sql.IArray;
			readBoolean(): boolean;
			readDouble(): any;
			readString(): string;
		}
		export class SQLTimeoutException extends java.sql.SQLTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLTimeoutException>;
		}
		export class SQLTransientConnectionException extends java.sql.SQLTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLTransientConnectionException>;
		}
		export interface ISQLData {
			getSQLTypeName(): string;
			readSQL(arg1: java.sql.ISQLInput, arg2: string): void;
			writeSQL(arg1: java.sql.ISQLOutput): void;
		}
		export class Blob implements java.sql.IBlob {
			constructor(implementation: java.sql.IBlob);
			getBinaryStream(): java.io.InputStream;
			getBinaryStream(arg1: native.Long, arg2: native.Long): java.io.InputStream;
			setBinaryStream(arg1: native.Long): java.io.OutputStream;
			setBytes(arg1: native.Long, arg2: native.Array<native.Byte>): number;
			setBytes(arg1: native.Long, arg2: native.Array<native.Byte>, arg3: number, arg4: number): number;
			getBytes(arg1: native.Long, arg2: number): native.Array<native.Byte>;
			length(): any;
			position(arg1: java.sql.IBlob, arg2: native.Long): any;
			position(arg1: native.Array<native.Byte>, arg2: native.Long): any;
			truncate(arg1: native.Long): void;
			free(): void;
		}
		export class RowId implements java.sql.IRowId {
			constructor(implementation: java.sql.IRowId);
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getBytes(): native.Array<native.Byte>;
		}
		export interface IParameterMetaData extends java.sql.IWrapper {
			getParameterClassName(arg1: number): string;
			getParameterCount(): number;
			getParameterMode(arg1: number): number;
			getParameterType(arg1: number): number;
			getParameterTypeName(arg1: number): string;
			getPrecision(arg1: number): number;
			getScale(arg1: number): number;
			isNullable(arg1: number): number;
			isSigned(arg1: number): boolean;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export module IParameterMetaData {
			var parameterNoNulls: number;
			var parameterNullable: number;
			var parameterNullableUnknown: number;
			var parameterModeUnknown: number;
			var parameterModeIn: number;
			var parameterModeInOut: number;
			var parameterModeOut: number;
		}
		export class SQLTransactionRollbackException extends java.sql.SQLTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLTransactionRollbackException>;
		}
		export interface IRef {
			getBaseTypeName(): string;
			getObject(): any;
			getObject(arg1: java.util.IMap<string, java.lang.Class<any>>): any;
			setObject(arg1: any): void;
		}
		export class DriverPropertyInfo extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			name: java.lang.String;
			description: java.lang.String;
			required: boolean;
			value: java.lang.String;
			choices: native.Array<java.lang.String>;
			static class: java.lang.Class<java.sql.DriverPropertyInfo>;
		}
		export enum ClientInfoStatus {
			REASON_UNKNOWN,
			REASON_UNKNOWN_PROPERTY,
			REASON_VALUE_INVALID,
			REASON_VALUE_TRUNCATED
		}
		export module ClientInfoStatus {
			export function valueOf(arg1: java.lang.String): java.sql.ClientInfoStatus;
			export function valueOf(arg1: string): java.sql.ClientInfoStatus;
			export function values(): native.Array<java.sql.ClientInfoStatus>;
		}
		export interface IDriver {
			acceptsURL(arg1: string): boolean;
			getParentLogger(): java.util.logging.Logger;
			getPropertyInfo(arg1: string, arg2: java.util.Properties): native.Array<java.sql.DriverPropertyInfo>;
			jdbcCompliant(): boolean;
			connect(arg1: string, arg2: java.util.Properties): java.sql.IConnection;
			getMajorVersion(): number;
			getMinorVersion(): number;
		}
		export class SQLException extends java.lang.Exception implements java.lang.IIterable<java.lang.Throwable> {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.Throwable);
			constructor();
			static class: java.lang.Class<java.sql.SQLException>;
			NextException: java.sql.SQLException;
			getErrorCode(): number;
			getNextException(): java.sql.SQLException;
			getSQLState(): string;
			setNextException(arg1: java.sql.SQLException): void;
			iterator(): java.util.IIterator<java.lang.Throwable>;
		}
		export interface IConnection extends java.sql.IWrapper {
			clearWarnings(): void;
			createArrayOf(arg1: string, arg2: native.Array<any>): java.sql.IArray;
			createBlob(): java.sql.IBlob;
			createClob(): java.sql.IClob;
			createNClob(): java.sql.INClob;
			createSQLXML(): java.sql.ISQLXML;
			createStatement(arg1: number, arg2: number, arg3: number): java.sql.IStatement;
			createStatement(): java.sql.IStatement;
			createStatement(arg1: number, arg2: number): java.sql.IStatement;
			createStruct(arg1: string, arg2: native.Array<any>): java.sql.IStruct;
			getAutoCommit(): boolean;
			getCatalog(): string;
			getClientInfo(): java.util.Properties;
			getClientInfo(arg1: string): string;
			getHoldability(): number;
			getMetaData(): java.sql.IDatabaseMetaData;
			getNetworkTimeout(): number;
			getTransactionIsolation(): number;
			getTypeMap(): java.util.IMap<string, java.lang.Class<any>>;
			getWarnings(): java.sql.SQLWarning;
			nativeSQL(arg1: string): string;
			prepareCall(arg1: string, arg2: number, arg3: number, arg4: number): java.sql.ICallableStatement;
			prepareCall(arg1: string): java.sql.ICallableStatement;
			prepareCall(arg1: string, arg2: number, arg3: number): java.sql.ICallableStatement;
			prepareStatement(arg1: string, arg2: number): java.sql.IPreparedStatement;
			prepareStatement(arg1: string, arg2: number, arg3: number, arg4: number): java.sql.IPreparedStatement;
			prepareStatement(arg1: string, arg2: native.Array<number>): java.sql.IPreparedStatement;
			prepareStatement(arg1: string): java.sql.IPreparedStatement;
			prepareStatement(arg1: string, arg2: number, arg3: number): java.sql.IPreparedStatement;
			releaseSavepoint(arg1: java.sql.ISavepoint): void;
			rollback(arg1: java.sql.ISavepoint): void;
			rollback(): void;
			setAutoCommit(arg1: boolean): void;
			setCatalog(arg1: string): void;
			setClientInfo(arg1: string, arg2: string): void;
			setClientInfo(arg1: java.util.Properties): void;
			setHoldability(arg1: number): void;
			setNetworkTimeout(arg1: java.util.concurrent.IExecutor, arg2: number): void;
			setSavepoint(): java.sql.ISavepoint;
			setSavepoint(arg1: string): java.sql.ISavepoint;
			setTransactionIsolation(arg1: number): void;
			setTypeMap(arg1: java.util.IMap<string, java.lang.Class<any>>): void;
			setReadOnly(arg1: boolean): void;
			close(): void;
			isReadOnly(): boolean;
			isValid(arg1: number): boolean;
			isClosed(): boolean;
			abort(arg1: java.util.concurrent.IExecutor): void;
			getSchema(): string;
			setSchema(arg1: string): void;
			commit(): void;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export module IConnection {
			var TRANSACTION_NONE: number;
			var TRANSACTION_READ_UNCOMMITTED: number;
			var TRANSACTION_READ_COMMITTED: number;
			var TRANSACTION_REPEATABLE_READ: number;
			var TRANSACTION_SERIALIZABLE: number;
		}
		export class SQLWarning extends java.sql.SQLException {
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			constructor(arg1: java.lang.Throwable);
			static class: java.lang.Class<java.sql.SQLWarning>;
			NextWarning: java.sql.SQLWarning;
			getNextWarning(): java.sql.SQLWarning;
			setNextWarning(arg1: java.sql.SQLWarning): void;
		}
		export class Struct implements java.sql.IStruct {
			constructor(implementation: java.sql.IStruct);
			getSQLTypeName(): string;
			getAttributes(): native.Array<any>;
			getAttributes(arg1: java.util.IMap<string, java.lang.Class<any>>): native.Array<any>;
		}
		export interface IRowId {
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getBytes(): native.Array<native.Byte>;
		}
		export class SQLInvalidAuthorizationSpecException extends java.sql.SQLNonTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLInvalidAuthorizationSpecException>;
		}
		export class SQLIntegrityConstraintViolationException extends java.sql.SQLNonTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLIntegrityConstraintViolationException>;
		}
		export class SQLXML implements java.sql.ISQLXML {
			constructor(implementation: java.sql.ISQLXML);
			String: string;
			getBinaryStream(): java.io.InputStream;
			setBinaryStream(): java.io.OutputStream;
			setResult<T extends javax.xml.transform.IResult>(arg1: java.lang.Class<T>): T;
			getString(): string;
			getSource<T extends javax.xml.transform.ISource>(arg1: java.lang.Class<T>): T;
			free(): void;
			getCharacterStream(): java.io.Reader;
			setCharacterStream(): java.io.Writer;
			setString(arg1: java.lang.String): void;
			setString(arg1: string): void;
		}
		export interface IStatement extends java.sql.IWrapper {
			getResultSet(): java.sql.IResultSet;
			clearWarnings(): void;
			getWarnings(): java.sql.SQLWarning;
			addBatch(arg1: string): void;
			executeQuery(arg1: string): java.sql.IResultSet;
			executeUpdate(arg1: string, arg2: native.Array<java.lang.String>): number;
			executeUpdate(arg1: string): number;
			executeUpdate(arg1: string, arg2: number): number;
			clearBatch(): void;
			closeOnCompletion(): void;
			executeBatch(): native.Array<number>;
			getFetchDirection(): number;
			getFetchSize(): number;
			getGeneratedKeys(): java.sql.IResultSet;
			getMaxFieldSize(): number;
			getMaxRows(): number;
			getMoreResults(arg1: number): boolean;
			getMoreResults(): boolean;
			getQueryTimeout(): number;
			getResultSetConcurrency(): number;
			getResultSetHoldability(): number;
			getResultSetType(): number;
			getUpdateCount(): number;
			isCloseOnCompletion(): boolean;
			isPoolable(): boolean;
			setCursorName(arg1: string): void;
			setEscapeProcessing(arg1: boolean): void;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			setMaxFieldSize(arg1: number): void;
			setMaxRows(arg1: number): void;
			setPoolable(arg1: boolean): void;
			setQueryTimeout(arg1: number): void;
			close(): void;
			getConnection(): java.sql.IConnection;
			execute(arg1: string): boolean;
			execute(arg1: string, arg2: native.Array<number>): boolean;
			execute(arg1: string, arg2: number): boolean;
			cancel(): void;
			isClosed(): boolean;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export module IStatement {
			var CLOSE_CURRENT_RESULT: number;
			var KEEP_CURRENT_RESULT: number;
			var CLOSE_ALL_RESULTS: number;
			var SUCCESS_NO_INFO: number;
			var EXECUTE_FAILED: number;
			var RETURN_GENERATED_KEYS: number;
			var NO_GENERATED_KEYS: number;
		}
		export class BatchUpdateException extends java.sql.SQLException {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<number>, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: native.Array<number>, arg4: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: native.Array<number>, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: native.Array<number>, arg3: java.lang.Throwable);
			constructor(arg1: native.Array<number>, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: native.Array<number>, arg5: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: native.Array<number>, arg5: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: native.Array<number>);
			constructor(arg1: string, arg2: string, arg3: number, arg4: native.Array<number>);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<number>);
			constructor(arg1: string, arg2: string, arg3: native.Array<number>);
			constructor(arg1: java.lang.String, arg2: native.Array<number>);
			constructor(arg1: string, arg2: native.Array<number>);
			constructor(arg1: native.Array<number>);
			constructor();
			constructor(arg1: java.lang.Throwable);
			static class: java.lang.Class<java.sql.BatchUpdateException>;
			getUpdateCounts(): native.Array<number>;
		}
		export class CallableStatement implements java.sql.IPreparedStatement, java.sql.ICallableStatement {
			constructor(implementation: java.sql.ICallableStatement);
			QueryTimeout: number;
			FetchSize: number;
			FetchDirection: number;
			MaxFieldSize: number;
			MaxRows: number;
			setBinaryStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: native.Long): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			setBinaryStream(arg1: java.lang.String, arg2: java.io.InputStream): void;
			setBinaryStream(arg1: string, arg2: java.io.InputStream): void;
			setBytes(arg1: java.lang.String, arg2: native.Array<native.Byte>): void;
			setBytes(arg1: string, arg2: native.Array<native.Byte>): void;
			setAsciiStream(arg1: java.lang.String, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: native.Long): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			setAsciiStream(arg1: java.lang.String, arg2: java.io.InputStream, arg3: number): void;
			setAsciiStream(arg1: string, arg2: java.io.InputStream, arg3: number): void;
			setBigDecimal(arg1: java.lang.String, arg2: java.math.BigDecimal): void;
			setBigDecimal(arg1: string, arg2: java.math.BigDecimal): void;
			setBlob(arg1: java.lang.String, arg2: java.io.InputStream): void;
			setBlob(arg1: string, arg2: java.io.InputStream): void;
			setBlob(arg1: java.lang.String, arg2: java.sql.IBlob): void;
			setBlob(arg1: string, arg2: java.sql.IBlob): void;
			setBlob(arg1: java.lang.String, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: string, arg2: java.io.InputStream, arg3: native.Long): void;
			setClob(arg1: java.lang.String, arg2: java.sql.IClob): void;
			setClob(arg1: string, arg2: java.sql.IClob): void;
			setClob(arg1: java.lang.String, arg2: java.io.Reader): void;
			setClob(arg1: string, arg2: java.io.Reader): void;
			setClob(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: java.lang.String, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: string, arg2: java.io.Reader): void;
			setNClob(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setNClob(arg1: java.lang.String, arg2: java.sql.INClob): void;
			setNClob(arg1: string, arg2: java.sql.INClob): void;
			setNClob(arg1: java.lang.String, arg2: java.io.Reader): void;
			setNClob(arg1: string, arg2: java.io.Reader): void;
			setNString(arg1: java.lang.String, arg2: java.lang.String): void;
			setNString(arg1: string, arg2: string): void;
			setNull(arg1: java.lang.String, arg2: number): void;
			setNull(arg1: string, arg2: number): void;
			setNull(arg1: java.lang.String, arg2: number, arg3: java.lang.String): void;
			setNull(arg1: string, arg2: number, arg3: string): void;
			setRowId(arg1: java.lang.String, arg2: java.sql.IRowId): void;
			setRowId(arg1: string, arg2: java.sql.IRowId): void;
			setSQLXML(arg1: java.lang.String, arg2: java.sql.ISQLXML): void;
			setSQLXML(arg1: string, arg2: java.sql.ISQLXML): void;
			getBlob(arg1: java.lang.String): java.sql.IBlob;
			getBlob(arg1: string): java.sql.IBlob;
			getBlob(arg1: number): java.sql.IBlob;
			getClob(arg1: java.lang.String): java.sql.IClob;
			getClob(arg1: string): java.sql.IClob;
			getClob(arg1: number): java.sql.IClob;
			getNCharacterStream(arg1: java.lang.String): java.io.Reader;
			getNCharacterStream(arg1: string): java.io.Reader;
			getNCharacterStream(arg1: number): java.io.Reader;
			getNClob(arg1: java.lang.String): java.sql.INClob;
			getNClob(arg1: string): java.sql.INClob;
			getNClob(arg1: number): java.sql.INClob;
			getNString(arg1: number): string;
			getNString(arg1: java.lang.String): string;
			getNString(arg1: string): string;
			getRowId(arg1: java.lang.String): java.sql.IRowId;
			getRowId(arg1: string): java.sql.IRowId;
			getRowId(arg1: number): java.sql.IRowId;
			getSQLXML(arg1: java.lang.String): java.sql.ISQLXML;
			getSQLXML(arg1: string): java.sql.ISQLXML;
			getSQLXML(arg1: number): java.sql.ISQLXML;
			wasNull(): boolean;
			registerOutParameter(arg1: java.lang.String, arg2: number, arg3: number): void;
			registerOutParameter(arg1: string, arg2: number, arg3: number): void;
			registerOutParameter(arg1: java.lang.String, arg2: number): void;
			registerOutParameter(arg1: string, arg2: number): void;
			registerOutParameter(arg1: number, arg2: number): void;
			registerOutParameter(arg1: java.lang.String, arg2: number, arg3: java.lang.String): void;
			registerOutParameter(arg1: string, arg2: number, arg3: string): void;
			registerOutParameter(arg1: number, arg2: number, arg3: number): void;
			registerOutParameter(arg1: number, arg2: number, arg3: java.lang.String): void;
			registerOutParameter(arg1: number, arg2: number, arg3: string): void;
			getBytes(arg1: number): native.Array<native.Byte>;
			getBytes(arg1: java.lang.String): native.Array<native.Byte>;
			getBytes(arg1: string): native.Array<native.Byte>;
			getArray(arg1: java.lang.String): java.sql.IArray;
			getArray(arg1: string): java.sql.IArray;
			getArray(arg1: number): java.sql.IArray;
			getURL(arg1: java.lang.String): java.net.URL;
			getURL(arg1: string): java.net.URL;
			getURL(arg1: number): java.net.URL;
			getBoolean(arg1: java.lang.String): boolean;
			getBoolean(arg1: string): boolean;
			getBoolean(arg1: number): boolean;
			getByte(arg1: number): number;
			getByte(arg1: java.lang.String): number;
			getByte(arg1: string): number;
			getDouble(arg1: java.lang.String): any;
			getDouble(arg1: string): any;
			getDouble(arg1: number): any;
			getFloat(arg1: java.lang.String): number;
			getFloat(arg1: string): number;
			getFloat(arg1: number): number;
			getInt(arg1: java.lang.String): number;
			getInt(arg1: string): number;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getLong(arg1: java.lang.String): any;
			getLong(arg1: string): any;
			getShort(arg1: number): number;
			getShort(arg1: java.lang.String): number;
			getShort(arg1: string): number;
			setBoolean(arg1: java.lang.String, arg2: boolean): void;
			setBoolean(arg1: string, arg2: boolean): void;
			setByte(arg1: java.lang.String, arg2: native.Byte): void;
			setByte(arg1: string, arg2: native.Byte): void;
			setDouble(arg1: java.lang.String, arg2: native.Double): void;
			setDouble(arg1: string, arg2: number): void;
			setFloat(arg1: java.lang.String, arg2: native.Float): void;
			setFloat(arg1: string, arg2: native.Float): void;
			setInt(arg1: java.lang.String, arg2: number): void;
			setInt(arg1: string, arg2: number): void;
			setLong(arg1: java.lang.String, arg2: native.Long): void;
			setLong(arg1: string, arg2: native.Long): void;
			setShort(arg1: java.lang.String, arg2: native.Short): void;
			setShort(arg1: string, arg2: native.Short): void;
			getObject<T>(arg1: number, arg2: java.lang.Class<T>): T;
			getObject(arg1: java.lang.String): any;
			getObject(arg1: string): any;
			getObject(arg1: number, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getObject(arg1: number): any;
			getObject<T>(arg1: java.lang.String, arg2: java.lang.Class<T>): T;
			getObject<T>(arg1: string, arg2: java.lang.Class<T>): T;
			getObject(arg1: java.lang.String, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			getObject(arg1: string, arg2: java.util.IMap<string, java.lang.Class<any>>): any;
			setTimestamp(arg1: java.lang.String, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: string, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: java.lang.String, arg2: java.sql.Timestamp): void;
			setTimestamp(arg1: string, arg2: java.sql.Timestamp): void;
			getString(arg1: number): string;
			getString(arg1: java.lang.String): string;
			getString(arg1: string): string;
			getRef(arg1: number): java.sql.IRef;
			getRef(arg1: java.lang.String): java.sql.IRef;
			getRef(arg1: string): java.sql.IRef;
			setURL(arg1: java.lang.String, arg2: java.net.URL): void;
			setURL(arg1: string, arg2: java.net.URL): void;
			getDate(arg1: number, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: number): java.sql.Date;
			getDate(arg1: java.lang.String, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: string, arg2: java.util.Calendar): java.sql.Date;
			getDate(arg1: java.lang.String): java.sql.Date;
			getDate(arg1: string): java.sql.Date;
			getTime(arg1: number): java.sql.Time;
			getTime(arg1: number, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: java.lang.String, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: string, arg2: java.util.Calendar): java.sql.Time;
			getTime(arg1: java.lang.String): java.sql.Time;
			getTime(arg1: string): java.sql.Time;
			setTime(arg1: java.lang.String, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: string, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: java.lang.String, arg2: java.sql.Time): void;
			setTime(arg1: string, arg2: java.sql.Time): void;
			setObject(arg1: java.lang.String, arg2: any): void;
			setObject(arg1: string, arg2: any): void;
			setObject(arg1: java.lang.String, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: string, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: java.lang.String, arg2: any, arg3: number): void;
			setObject(arg1: string, arg2: any, arg3: number): void;
			getTimestamp(arg1: java.lang.String, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: string, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: number): java.sql.Timestamp;
			getTimestamp(arg1: number, arg2: java.util.Calendar): java.sql.Timestamp;
			getTimestamp(arg1: java.lang.String): java.sql.Timestamp;
			getTimestamp(arg1: string): java.sql.Timestamp;
			setDate(arg1: java.lang.String, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: string, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: java.lang.String, arg2: java.sql.Date): void;
			setDate(arg1: string, arg2: java.sql.Date): void;
			getBigDecimal(arg1: number, arg2: number): java.math.BigDecimal;
			getBigDecimal(arg1: java.lang.String): java.math.BigDecimal;
			getBigDecimal(arg1: string): java.math.BigDecimal;
			getBigDecimal(arg1: number): java.math.BigDecimal;
			getCharacterStream(arg1: java.lang.String): java.io.Reader;
			getCharacterStream(arg1: string): java.io.Reader;
			getCharacterStream(arg1: number): java.io.Reader;
			setCharacterStream(arg1: java.lang.String, arg2: java.io.Reader): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader): void;
			setCharacterStream(arg1: java.lang.String, arg2: java.io.Reader, arg3: native.Long): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader, arg3: native.Long): void;
			setCharacterStream(arg1: java.lang.String, arg2: java.io.Reader, arg3: number): void;
			setCharacterStream(arg1: string, arg2: java.io.Reader, arg3: number): void;
			setString(arg1: java.lang.String, arg2: java.lang.String): void;
			setString(arg1: string, arg2: string): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			setBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getMetaData(): java.sql.IResultSetMetaData;
			addBatch(): void;
			clearParameters(): void;
			executeQuery(): java.sql.IResultSet;
			executeUpdate(): number;
			getParameterMetaData(): java.sql.IParameterMetaData;
			setArray(arg1: number, arg2: java.sql.IArray): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			setBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: number, arg2: java.sql.IBlob): void;
			setBlob(arg1: number, arg2: java.io.InputStream): void;
			setClob(arg1: number, arg2: java.sql.IClob): void;
			setClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: number, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.sql.INClob): void;
			setNClob(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNString(arg1: number, arg2: string): void;
			setNull(arg1: number, arg2: number, arg3: string): void;
			setNull(arg1: number, arg2: number): void;
			setRef(arg1: number, arg2: java.sql.IRef): void;
			setRowId(arg1: number, arg2: java.sql.IRowId): void;
			setSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			setUnicodeStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBoolean(arg1: number, arg2: boolean): void;
			setByte(arg1: number, arg2: native.Byte): void;
			setDouble(arg1: number, arg2: number): void;
			setFloat(arg1: number, arg2: native.Float): void;
			setInt(arg1: number, arg2: number): void;
			setLong(arg1: number, arg2: native.Long): void;
			setShort(arg1: number, arg2: native.Short): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			setURL(arg1: number, arg2: java.net.URL): void;
			execute(): boolean;
			setTime(arg1: number, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: number, arg2: java.sql.Time): void;
			setObject(arg1: number, arg2: any, arg3: number): void;
			setObject(arg1: number, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: number, arg2: any): void;
			setDate(arg1: number, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: number, arg2: java.sql.Date): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setString(arg1: number, arg2: string): void;
			getResultSet(): java.sql.IResultSet;
			clearWarnings(): void;
			getWarnings(): java.sql.SQLWarning;
			addBatch(arg1: string): void;
			executeQuery(arg1: string): java.sql.IResultSet;
			executeUpdate(arg1: string, arg2: native.Array<java.lang.String>): number;
			executeUpdate(arg1: string): number;
			executeUpdate(arg1: string, arg2: number): number;
			clearBatch(): void;
			closeOnCompletion(): void;
			executeBatch(): native.Array<number>;
			getFetchDirection(): number;
			getFetchSize(): number;
			getGeneratedKeys(): java.sql.IResultSet;
			getMaxFieldSize(): number;
			getMaxRows(): number;
			getMoreResults(arg1: number): boolean;
			getMoreResults(): boolean;
			getQueryTimeout(): number;
			getResultSetConcurrency(): number;
			getResultSetHoldability(): number;
			getResultSetType(): number;
			getUpdateCount(): number;
			isCloseOnCompletion(): boolean;
			isPoolable(): boolean;
			setCursorName(arg1: string): void;
			setEscapeProcessing(arg1: boolean): void;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			setMaxFieldSize(arg1: number): void;
			setMaxRows(arg1: number): void;
			setPoolable(arg1: boolean): void;
			setQueryTimeout(arg1: number): void;
			close(): void;
			getConnection(): java.sql.IConnection;
			execute(arg1: string): boolean;
			execute(arg1: string, arg2: native.Array<number>): boolean;
			execute(arg1: string, arg2: number): boolean;
			cancel(): void;
			isClosed(): boolean;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class Statement implements java.sql.IWrapper, java.sql.IStatement {
			constructor(implementation: java.sql.IStatement);
			static CLOSE_CURRENT_RESULT: number;
			static KEEP_CURRENT_RESULT: number;
			static CLOSE_ALL_RESULTS: number;
			static SUCCESS_NO_INFO: number;
			static EXECUTE_FAILED: number;
			static RETURN_GENERATED_KEYS: number;
			static NO_GENERATED_KEYS: number;
			QueryTimeout: number;
			FetchSize: number;
			FetchDirection: number;
			MaxFieldSize: number;
			MaxRows: number;
			getResultSet(): java.sql.IResultSet;
			clearWarnings(): void;
			getWarnings(): java.sql.SQLWarning;
			addBatch(arg1: java.lang.String): void;
			addBatch(arg1: string): void;
			executeQuery(arg1: java.lang.String): java.sql.IResultSet;
			executeQuery(arg1: string): java.sql.IResultSet;
			executeUpdate(arg1: java.lang.String, arg2: native.Array<java.lang.String>): number;
			executeUpdate(arg1: string, arg2: native.Array<java.lang.String>): number;
			executeUpdate(arg1: java.lang.String): number;
			executeUpdate(arg1: string): number;
			executeUpdate(arg1: java.lang.String, arg2: number): number;
			executeUpdate(arg1: string, arg2: number): number;
			clearBatch(): void;
			closeOnCompletion(): void;
			executeBatch(): native.Array<number>;
			getFetchDirection(): number;
			getFetchSize(): number;
			getGeneratedKeys(): java.sql.IResultSet;
			getMaxFieldSize(): number;
			getMaxRows(): number;
			getMoreResults(arg1: number): boolean;
			getMoreResults(): boolean;
			getQueryTimeout(): number;
			getResultSetConcurrency(): number;
			getResultSetHoldability(): number;
			getResultSetType(): number;
			getUpdateCount(): number;
			isCloseOnCompletion(): boolean;
			isPoolable(): boolean;
			setCursorName(arg1: java.lang.String): void;
			setCursorName(arg1: string): void;
			setEscapeProcessing(arg1: boolean): void;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			setMaxFieldSize(arg1: number): void;
			setMaxRows(arg1: number): void;
			setPoolable(arg1: boolean): void;
			setQueryTimeout(arg1: number): void;
			close(): void;
			getConnection(): java.sql.IConnection;
			execute(arg1: java.lang.String): boolean;
			execute(arg1: string): boolean;
			execute(arg1: java.lang.String, arg2: native.Array<number>): boolean;
			execute(arg1: string, arg2: native.Array<number>): boolean;
			execute(arg1: java.lang.String, arg2: number): boolean;
			execute(arg1: string, arg2: number): boolean;
			cancel(): void;
			isClosed(): boolean;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class Wrapper implements java.sql.IWrapper {
			constructor(implementation: java.sql.IWrapper);
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class SQLRecoverableException extends java.sql.SQLException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLRecoverableException>;
		}
		export class SQLNonTransientException extends java.sql.SQLException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLNonTransientException>;
		}
		export class Connection implements java.sql.IWrapper, java.sql.IConnection {
			constructor(implementation: java.sql.IConnection);
			static TRANSACTION_NONE: number;
			static TRANSACTION_READ_UNCOMMITTED: number;
			static TRANSACTION_READ_COMMITTED: number;
			static TRANSACTION_REPEATABLE_READ: number;
			static TRANSACTION_SERIALIZABLE: number;
			AutoCommit: boolean;
			Holdability: number;
			ClientInfo: java.util.Properties;
			Schema: string;
			Catalog: string;
			TypeMap: java.util.IMap<string, java.lang.Class<any>>;
			TransactionIsolation: number;
			clearWarnings(): void;
			createArrayOf(arg1: java.lang.String, arg2: native.Array<any>): java.sql.IArray;
			createArrayOf(arg1: string, arg2: native.Array<any>): java.sql.IArray;
			createBlob(): java.sql.IBlob;
			createClob(): java.sql.IClob;
			createNClob(): java.sql.INClob;
			createSQLXML(): java.sql.ISQLXML;
			createStatement(arg1: number, arg2: number, arg3: number): java.sql.IStatement;
			createStatement(): java.sql.IStatement;
			createStatement(arg1: number, arg2: number): java.sql.IStatement;
			createStruct(arg1: java.lang.String, arg2: native.Array<any>): java.sql.IStruct;
			createStruct(arg1: string, arg2: native.Array<any>): java.sql.IStruct;
			getAutoCommit(): boolean;
			getCatalog(): string;
			getClientInfo(): java.util.Properties;
			getClientInfo(arg1: java.lang.String): string;
			getClientInfo(arg1: string): string;
			getHoldability(): number;
			getMetaData(): java.sql.IDatabaseMetaData;
			getNetworkTimeout(): number;
			getTransactionIsolation(): number;
			getTypeMap(): java.util.IMap<string, java.lang.Class<any>>;
			getWarnings(): java.sql.SQLWarning;
			nativeSQL(arg1: java.lang.String): string;
			nativeSQL(arg1: string): string;
			prepareCall(arg1: java.lang.String, arg2: number, arg3: number, arg4: number): java.sql.ICallableStatement;
			prepareCall(arg1: string, arg2: number, arg3: number, arg4: number): java.sql.ICallableStatement;
			prepareCall(arg1: java.lang.String): java.sql.ICallableStatement;
			prepareCall(arg1: string): java.sql.ICallableStatement;
			prepareCall(arg1: java.lang.String, arg2: number, arg3: number): java.sql.ICallableStatement;
			prepareCall(arg1: string, arg2: number, arg3: number): java.sql.ICallableStatement;
			prepareStatement(arg1: java.lang.String, arg2: number): java.sql.IPreparedStatement;
			prepareStatement(arg1: string, arg2: number): java.sql.IPreparedStatement;
			prepareStatement(arg1: java.lang.String, arg2: number, arg3: number, arg4: number): java.sql.IPreparedStatement;
			prepareStatement(arg1: string, arg2: number, arg3: number, arg4: number): java.sql.IPreparedStatement;
			prepareStatement(arg1: java.lang.String, arg2: native.Array<number>): java.sql.IPreparedStatement;
			prepareStatement(arg1: string, arg2: native.Array<number>): java.sql.IPreparedStatement;
			prepareStatement(arg1: java.lang.String): java.sql.IPreparedStatement;
			prepareStatement(arg1: string): java.sql.IPreparedStatement;
			prepareStatement(arg1: java.lang.String, arg2: number, arg3: number): java.sql.IPreparedStatement;
			prepareStatement(arg1: string, arg2: number, arg3: number): java.sql.IPreparedStatement;
			releaseSavepoint(arg1: java.sql.ISavepoint): void;
			rollback(arg1: java.sql.ISavepoint): void;
			rollback(): void;
			setAutoCommit(arg1: boolean): void;
			setCatalog(arg1: java.lang.String): void;
			setCatalog(arg1: string): void;
			setClientInfo(arg1: java.lang.String, arg2: java.lang.String): void;
			setClientInfo(arg1: string, arg2: string): void;
			setClientInfo(arg1: java.util.Properties): void;
			setHoldability(arg1: number): void;
			setNetworkTimeout(arg1: java.util.concurrent.IExecutor, arg2: number): void;
			setSavepoint(): java.sql.ISavepoint;
			setSavepoint(arg1: java.lang.String): java.sql.ISavepoint;
			setSavepoint(arg1: string): java.sql.ISavepoint;
			setTransactionIsolation(arg1: number): void;
			setTypeMap(arg1: java.util.IMap<string, java.lang.Class<any>>): void;
			setReadOnly(arg1: boolean): void;
			close(): void;
			isReadOnly(): boolean;
			isValid(arg1: number): boolean;
			isClosed(): boolean;
			abort(arg1: java.util.concurrent.IExecutor): void;
			getSchema(): string;
			setSchema(arg1: java.lang.String): void;
			setSchema(arg1: string): void;
			commit(): void;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class SQLSyntaxErrorException extends java.sql.SQLNonTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLSyntaxErrorException>;
		}
		export class DriverManager extends java.lang.Object {
			static class: java.lang.Class<java.sql.DriverManager>;
			static getLogStream(): java.io.PrintStream;
			static getLogWriter(): java.io.PrintWriter;
			static getLoginTimeout(): number;
			static registerDriver(arg1: java.sql.IDriver): void;
			static setLogStream(arg1: java.io.PrintStream): void;
			static setLogWriter(arg1: java.io.PrintWriter): void;
			static setLoginTimeout(arg1: number): void;
			static println(arg1: java.lang.String): void;
			static println(arg1: string): void;
			static deregisterDriver(arg1: java.sql.IDriver): void;
			static getConnection(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IConnection;
			static getConnection(arg1: string, arg2: string, arg3: string): java.sql.IConnection;
			static getConnection(arg1: java.lang.String, arg2: java.util.Properties): java.sql.IConnection;
			static getConnection(arg1: string, arg2: java.util.Properties): java.sql.IConnection;
			static getConnection(arg1: java.lang.String): java.sql.IConnection;
			static getConnection(arg1: string): java.sql.IConnection;
			static getDriver(arg1: java.lang.String): java.sql.IDriver;
			static getDriver(arg1: string): java.sql.IDriver;
			static getDrivers(): java.util.IEnumeration<java.sql.IDriver>;
		}
		export class Time extends java.util.Date {
			constructor(arg1: number, arg2: number, arg3: number);
			constructor(arg1: native.Long);
			static class: java.lang.Class<java.sql.Time>;
			Year: number;
			Date: number;
			Month: number;
			toString(): string;
			static valueOf(arg1: java.lang.String): java.sql.Time;
			static valueOf(arg1: string): java.sql.Time;
			getDate(): number;
			setTime(arg1: native.Long): void;
			getMonth(): number;
			getYear(): number;
			getDay(): number;
			setDate(arg1: number): void;
			setMonth(arg1: number): void;
			setYear(arg1: number): void;
		}
		export class SQLClientInfoException extends java.sql.SQLException {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.util.IMap<string, java.sql.ClientInfoStatus>);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.util.IMap<string, java.sql.ClientInfoStatus>);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.util.IMap<string, java.sql.ClientInfoStatus>, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.util.IMap<string, java.sql.ClientInfoStatus>, arg4: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.util.IMap<string, java.sql.ClientInfoStatus>);
			constructor(arg1: string, arg2: string, arg3: java.util.IMap<string, java.sql.ClientInfoStatus>);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.util.IMap<string, java.sql.ClientInfoStatus>, arg5: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.util.IMap<string, java.sql.ClientInfoStatus>, arg5: java.lang.Throwable);
			constructor();
			constructor(arg1: java.util.IMap<string, java.sql.ClientInfoStatus>);
			constructor(arg1: java.util.IMap<string, java.sql.ClientInfoStatus>, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.util.IMap<string, java.sql.ClientInfoStatus>);
			constructor(arg1: string, arg2: java.util.IMap<string, java.sql.ClientInfoStatus>);
			constructor(arg1: java.lang.String, arg2: java.util.IMap<string, java.sql.ClientInfoStatus>, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: java.util.IMap<string, java.sql.ClientInfoStatus>, arg3: java.lang.Throwable);
			static class: java.lang.Class<java.sql.SQLClientInfoException>;
			getFailedProperties(): java.util.IMap<string, java.sql.ClientInfoStatus>;
		}
		export class ResultSetMetaData implements java.sql.IWrapper, java.sql.IResultSetMetaData {
			constructor(implementation: java.sql.IResultSetMetaData);
			static columnNoNulls: number;
			static columnNullable: number;
			static columnNullableUnknown: number;
			getPrecision(arg1: number): number;
			getScale(arg1: number): number;
			isNullable(arg1: number): number;
			isSigned(arg1: number): boolean;
			getCatalogName(arg1: number): string;
			getColumnClassName(arg1: number): string;
			getColumnDisplaySize(arg1: number): number;
			getColumnLabel(arg1: number): string;
			getColumnType(arg1: number): number;
			getColumnTypeName(arg1: number): string;
			getSchemaName(arg1: number): string;
			getTableName(arg1: number): string;
			isAutoIncrement(arg1: number): boolean;
			isCaseSensitive(arg1: number): boolean;
			isCurrency(arg1: number): boolean;
			isDefinitelyWritable(arg1: number): boolean;
			isSearchable(arg1: number): boolean;
			isWritable(arg1: number): boolean;
			isReadOnly(arg1: number): boolean;
			getColumnCount(): number;
			getColumnName(arg1: number): string;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export enum RowIdLifetime {
			ROWID_UNSUPPORTED,
			ROWID_VALID_OTHER,
			ROWID_VALID_SESSION,
			ROWID_VALID_TRANSACTION,
			ROWID_VALID_FOREVER
		}
		export module RowIdLifetime {
			export function valueOf(arg1: java.lang.String): java.sql.RowIdLifetime;
			export function valueOf(arg1: string): java.sql.RowIdLifetime;
			export function values(): native.Array<java.sql.RowIdLifetime>;
		}
		export class Ref implements java.sql.IRef {
			constructor(implementation: java.sql.IRef);
			Object: any;
			getBaseTypeName(): string;
			getObject(): any;
			getObject(arg1: java.util.IMap<string, java.lang.Class<any>>): any;
			setObject(arg1: any): void;
		}
		export class SQLFeatureNotSupportedException extends java.sql.SQLNonTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLFeatureNotSupportedException>;
		}
		export interface IWrapper {
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export interface IClob {
			setAsciiStream(arg1: native.Long): java.io.OutputStream;
			getAsciiStream(): java.io.InputStream;
			getSubString(arg1: native.Long, arg2: number): string;
			length(): any;
			position(arg1: string, arg2: native.Long): any;
			position(arg1: java.sql.IClob, arg2: native.Long): any;
			truncate(arg1: native.Long): void;
			free(): void;
			getCharacterStream(): java.io.Reader;
			getCharacterStream(arg1: native.Long, arg2: native.Long): java.io.Reader;
			setCharacterStream(arg1: native.Long): java.io.Writer;
			setString(arg1: native.Long, arg2: string): number;
			setString(arg1: native.Long, arg2: string, arg3: number, arg4: number): number;
		}
		export class SQLPermission extends java.security.BasicPermission {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.sql.SQLPermission>;
		}
		export interface ISavepoint {
			getSavepointId(): number;
			getSavepointName(): string;
		}
		export interface IDatabaseMetaData extends java.sql.IWrapper {
			getResultSetHoldability(): number;
			allProceduresAreCallable(): boolean;
			allTablesAreSelectable(): boolean;
			autoCommitFailureClosesAllResultSets(): boolean;
			dataDefinitionCausesTransactionCommit(): boolean;
			dataDefinitionIgnoredInTransactions(): boolean;
			deletesAreDetected(arg1: number): boolean;
			doesMaxRowSizeIncludeBlobs(): boolean;
			generatedKeyAlwaysReturned(): boolean;
			getBestRowIdentifier(arg1: string, arg2: string, arg3: string, arg4: number, arg5: boolean): java.sql.IResultSet;
			getCatalogSeparator(): string;
			getCatalogTerm(): string;
			getCatalogs(): java.sql.IResultSet;
			getClientInfoProperties(): java.sql.IResultSet;
			getColumnPrivileges(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getCrossReference(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string): java.sql.IResultSet;
			getDatabaseMajorVersion(): number;
			getDatabaseMinorVersion(): number;
			getDatabaseProductName(): string;
			getDatabaseProductVersion(): string;
			getDefaultTransactionIsolation(): number;
			getDriverMajorVersion(): number;
			getDriverMinorVersion(): number;
			getDriverName(): string;
			getDriverVersion(): string;
			getExportedKeys(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getExtraNameCharacters(): string;
			getFunctionColumns(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getFunctions(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getIdentifierQuoteString(): string;
			getImportedKeys(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getIndexInfo(arg1: string, arg2: string, arg3: string, arg4: boolean, arg5: boolean): java.sql.IResultSet;
			getJDBCMajorVersion(): number;
			getJDBCMinorVersion(): number;
			getMaxBinaryLiteralLength(): number;
			getMaxCatalogNameLength(): number;
			getMaxCharLiteralLength(): number;
			getMaxColumnNameLength(): number;
			getMaxColumnsInGroupBy(): number;
			getMaxColumnsInIndex(): number;
			getMaxColumnsInOrderBy(): number;
			getMaxColumnsInSelect(): number;
			getMaxColumnsInTable(): number;
			getMaxConnections(): number;
			getMaxCursorNameLength(): number;
			getMaxIndexLength(): number;
			getMaxProcedureNameLength(): number;
			getMaxRowSize(): number;
			getMaxSchemaNameLength(): number;
			getMaxStatementLength(): number;
			getMaxStatements(): number;
			getMaxTableNameLength(): number;
			getMaxTablesInSelect(): number;
			getMaxUserNameLength(): number;
			getNumericFunctions(): string;
			getPrimaryKeys(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getProcedureColumns(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getProcedureTerm(): string;
			getProcedures(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getPseudoColumns(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getRowIdLifetime(): java.sql.RowIdLifetime;
			getSQLKeywords(): string;
			getSQLStateType(): number;
			getSchemaTerm(): string;
			getSchemas(arg1: string, arg2: string): java.sql.IResultSet;
			getSchemas(): java.sql.IResultSet;
			getSearchStringEscape(): string;
			getStringFunctions(): string;
			getSuperTables(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getSuperTypes(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getSystemFunctions(): string;
			getTablePrivileges(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getTableTypes(): java.sql.IResultSet;
			getTimeDateFunctions(): string;
			getTypeInfo(): java.sql.IResultSet;
			getUDTs(arg1: string, arg2: string, arg3: string, arg4: native.Array<number>): java.sql.IResultSet;
			getVersionColumns(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			insertsAreDetected(arg1: number): boolean;
			isCatalogAtStart(): boolean;
			locatorsUpdateCopy(): boolean;
			nullPlusNonNullIsNull(): boolean;
			nullsAreSortedAtEnd(): boolean;
			nullsAreSortedAtStart(): boolean;
			nullsAreSortedHigh(): boolean;
			nullsAreSortedLow(): boolean;
			othersDeletesAreVisible(arg1: number): boolean;
			othersInsertsAreVisible(arg1: number): boolean;
			othersUpdatesAreVisible(arg1: number): boolean;
			ownDeletesAreVisible(arg1: number): boolean;
			ownInsertsAreVisible(arg1: number): boolean;
			ownUpdatesAreVisible(arg1: number): boolean;
			storesLowerCaseIdentifiers(): boolean;
			storesLowerCaseQuotedIdentifiers(): boolean;
			storesMixedCaseIdentifiers(): boolean;
			storesMixedCaseQuotedIdentifiers(): boolean;
			storesUpperCaseIdentifiers(): boolean;
			storesUpperCaseQuotedIdentifiers(): boolean;
			supportsANSI92EntryLevelSQL(): boolean;
			supportsANSI92FullSQL(): boolean;
			supportsANSI92IntermediateSQL(): boolean;
			supportsAlterTableWithAddColumn(): boolean;
			supportsAlterTableWithDropColumn(): boolean;
			supportsBatchUpdates(): boolean;
			supportsCatalogsInDataManipulation(): boolean;
			supportsCatalogsInIndexDefinitions(): boolean;
			supportsCatalogsInPrivilegeDefinitions(): boolean;
			supportsCatalogsInProcedureCalls(): boolean;
			supportsCatalogsInTableDefinitions(): boolean;
			supportsColumnAliasing(): boolean;
			supportsConvert(): boolean;
			supportsConvert(arg1: number, arg2: number): boolean;
			supportsCoreSQLGrammar(): boolean;
			supportsCorrelatedSubqueries(): boolean;
			supportsDataDefinitionAndDataManipulationTransactions(): boolean;
			supportsDataManipulationTransactionsOnly(): boolean;
			supportsDifferentTableCorrelationNames(): boolean;
			supportsExpressionsInOrderBy(): boolean;
			supportsExtendedSQLGrammar(): boolean;
			supportsFullOuterJoins(): boolean;
			supportsGetGeneratedKeys(): boolean;
			supportsGroupBy(): boolean;
			supportsGroupByBeyondSelect(): boolean;
			supportsGroupByUnrelated(): boolean;
			supportsIntegrityEnhancementFacility(): boolean;
			supportsLikeEscapeClause(): boolean;
			supportsLimitedOuterJoins(): boolean;
			supportsMinimumSQLGrammar(): boolean;
			supportsMixedCaseIdentifiers(): boolean;
			supportsMixedCaseQuotedIdentifiers(): boolean;
			supportsMultipleOpenResults(): boolean;
			supportsMultipleResultSets(): boolean;
			supportsMultipleTransactions(): boolean;
			supportsNamedParameters(): boolean;
			supportsNonNullableColumns(): boolean;
			supportsOpenCursorsAcrossCommit(): boolean;
			supportsOpenCursorsAcrossRollback(): boolean;
			supportsOpenStatementsAcrossCommit(): boolean;
			supportsOpenStatementsAcrossRollback(): boolean;
			supportsOrderByUnrelated(): boolean;
			supportsOuterJoins(): boolean;
			supportsPositionedDelete(): boolean;
			supportsPositionedUpdate(): boolean;
			supportsResultSetConcurrency(arg1: number, arg2: number): boolean;
			supportsResultSetHoldability(arg1: number): boolean;
			supportsResultSetType(arg1: number): boolean;
			supportsSavepoints(): boolean;
			supportsSchemasInDataManipulation(): boolean;
			supportsSchemasInIndexDefinitions(): boolean;
			supportsSchemasInPrivilegeDefinitions(): boolean;
			supportsSchemasInProcedureCalls(): boolean;
			supportsSchemasInTableDefinitions(): boolean;
			supportsSelectForUpdate(): boolean;
			supportsStatementPooling(): boolean;
			supportsStoredFunctionsUsingCallSyntax(): boolean;
			supportsStoredProcedures(): boolean;
			supportsSubqueriesInComparisons(): boolean;
			supportsSubqueriesInExists(): boolean;
			supportsSubqueriesInIns(): boolean;
			supportsSubqueriesInQuantifieds(): boolean;
			supportsTableCorrelationNames(): boolean;
			supportsTransactionIsolationLevel(arg1: number): boolean;
			supportsTransactions(): boolean;
			supportsUnion(): boolean;
			supportsUnionAll(): boolean;
			updatesAreDetected(arg1: number): boolean;
			usesLocalFilePerTable(): boolean;
			usesLocalFiles(): boolean;
			getURL(): string;
			getConnection(): java.sql.IConnection;
			isReadOnly(): boolean;
			getAttributes(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getColumns(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getUserName(): string;
			getTables(arg1: string, arg2: string, arg3: string, arg4: native.Array<java.lang.String>): java.sql.IResultSet;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export module IDatabaseMetaData {
			var procedureResultUnknown: number;
			var procedureNoResult: number;
			var procedureReturnsResult: number;
			var procedureColumnUnknown: number;
			var procedureColumnIn: number;
			var procedureColumnInOut: number;
			var procedureColumnOut: number;
			var procedureColumnReturn: number;
			var procedureColumnResult: number;
			var procedureNoNulls: number;
			var procedureNullable: number;
			var procedureNullableUnknown: number;
			var columnNoNulls: number;
			var columnNullable: number;
			var columnNullableUnknown: number;
			var bestRowTemporary: number;
			var bestRowTransaction: number;
			var bestRowSession: number;
			var bestRowUnknown: number;
			var bestRowNotPseudo: number;
			var bestRowPseudo: number;
			var versionColumnUnknown: number;
			var versionColumnNotPseudo: number;
			var versionColumnPseudo: number;
			var importedKeyCascade: number;
			var importedKeyRestrict: number;
			var importedKeySetNull: number;
			var importedKeyNoAction: number;
			var importedKeySetDefault: number;
			var importedKeyInitiallyDeferred: number;
			var importedKeyInitiallyImmediate: number;
			var importedKeyNotDeferrable: number;
			var typeNoNulls: number;
			var typeNullable: number;
			var typeNullableUnknown: number;
			var typePredNone: number;
			var typePredChar: number;
			var typePredBasic: number;
			var typeSearchable: number;
			var tableIndexStatistic: native.Short;
			var tableIndexClustered: native.Short;
			var tableIndexHashed: native.Short;
			var tableIndexOther: native.Short;
			var attributeNoNulls: native.Short;
			var attributeNullable: native.Short;
			var attributeNullableUnknown: native.Short;
			var sqlStateXOpen: number;
			var sqlStateSQL: number;
			var sqlStateSQL99: number;
			var functionColumnUnknown: number;
			var functionColumnIn: number;
			var functionColumnInOut: number;
			var functionColumnOut: number;
			var functionReturn: number;
			var functionColumnResult: number;
			var functionNoNulls: number;
			var functionNullable: number;
			var functionNullableUnknown: number;
			var functionResultUnknown: number;
			var functionNoTable: number;
			var functionReturnsTable: number;
		}
		export interface IPreparedStatement extends java.sql.IStatement {
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			setBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getMetaData(): java.sql.IResultSetMetaData;
			addBatch(): void;
			clearParameters(): void;
			executeQuery(): java.sql.IResultSet;
			executeUpdate(): number;
			getParameterMetaData(): java.sql.IParameterMetaData;
			setArray(arg1: number, arg2: java.sql.IArray): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			setBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: number, arg2: java.sql.IBlob): void;
			setBlob(arg1: number, arg2: java.io.InputStream): void;
			setClob(arg1: number, arg2: java.sql.IClob): void;
			setClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: number, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.sql.INClob): void;
			setNClob(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNString(arg1: number, arg2: string): void;
			setNull(arg1: number, arg2: number, arg3: string): void;
			setNull(arg1: number, arg2: number): void;
			setRef(arg1: number, arg2: java.sql.IRef): void;
			setRowId(arg1: number, arg2: java.sql.IRowId): void;
			setSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			setUnicodeStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBoolean(arg1: number, arg2: boolean): void;
			setByte(arg1: number, arg2: native.Byte): void;
			setDouble(arg1: number, arg2: number): void;
			setFloat(arg1: number, arg2: native.Float): void;
			setInt(arg1: number, arg2: number): void;
			setLong(arg1: number, arg2: native.Long): void;
			setShort(arg1: number, arg2: native.Short): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			setURL(arg1: number, arg2: java.net.URL): void;
			execute(): boolean;
			setTime(arg1: number, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: number, arg2: java.sql.Time): void;
			setObject(arg1: number, arg2: any, arg3: number): void;
			setObject(arg1: number, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: number, arg2: any): void;
			setDate(arg1: number, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: number, arg2: java.sql.Date): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setString(arg1: number, arg2: string): void;
			getResultSet(): java.sql.IResultSet;
			clearWarnings(): void;
			getWarnings(): java.sql.SQLWarning;
			addBatch(arg1: string): void;
			executeQuery(arg1: string): java.sql.IResultSet;
			executeUpdate(arg1: string, arg2: native.Array<java.lang.String>): number;
			executeUpdate(arg1: string): number;
			executeUpdate(arg1: string, arg2: number): number;
			clearBatch(): void;
			closeOnCompletion(): void;
			executeBatch(): native.Array<number>;
			getFetchDirection(): number;
			getFetchSize(): number;
			getGeneratedKeys(): java.sql.IResultSet;
			getMaxFieldSize(): number;
			getMaxRows(): number;
			getMoreResults(arg1: number): boolean;
			getMoreResults(): boolean;
			getQueryTimeout(): number;
			getResultSetConcurrency(): number;
			getResultSetHoldability(): number;
			getResultSetType(): number;
			getUpdateCount(): number;
			isCloseOnCompletion(): boolean;
			isPoolable(): boolean;
			setCursorName(arg1: string): void;
			setEscapeProcessing(arg1: boolean): void;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			setMaxFieldSize(arg1: number): void;
			setMaxRows(arg1: number): void;
			setPoolable(arg1: boolean): void;
			setQueryTimeout(arg1: number): void;
			close(): void;
			getConnection(): java.sql.IConnection;
			execute(arg1: string): boolean;
			execute(arg1: string, arg2: native.Array<number>): boolean;
			execute(arg1: string, arg2: number): boolean;
			cancel(): void;
			isClosed(): boolean;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class Timestamp extends java.util.Date {
			constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number);
			constructor(arg1: native.Long);
			static class: java.lang.Class<java.sql.Timestamp>;
			Nanos: number;
			getNanos(): number;
			setNanos(arg1: number): void;
			hashCode(): number;
			equals(arg1: java.sql.Timestamp): boolean;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.sql.Timestamp): number;
			compareTo(arg1: java.util.Date): number;
			static valueOf(arg1: java.lang.String): java.sql.Timestamp;
			static valueOf(arg1: string): java.sql.Timestamp;
			after(arg1: java.sql.Timestamp): boolean;
			before(arg1: java.sql.Timestamp): boolean;
			getTime(): any;
			setTime(arg1: native.Long): void;
			after(arg1: java.util.Date): boolean;
			before(arg1: java.util.Date): boolean;
		}
		export class NClob implements java.sql.IClob, java.sql.INClob {
			constructor(implementation: java.sql.INClob);
			setAsciiStream(arg1: native.Long): java.io.OutputStream;
			getAsciiStream(): java.io.InputStream;
			getSubString(arg1: native.Long, arg2: number): string;
			length(): any;
			position(arg1: string, arg2: native.Long): any;
			position(arg1: java.sql.IClob, arg2: native.Long): any;
			truncate(arg1: native.Long): void;
			free(): void;
			getCharacterStream(): java.io.Reader;
			getCharacterStream(arg1: native.Long, arg2: native.Long): java.io.Reader;
			setCharacterStream(arg1: native.Long): java.io.Writer;
			setString(arg1: native.Long, arg2: string): number;
			setString(arg1: native.Long, arg2: string, arg3: number, arg4: number): number;
		}
		export interface ISQLInput {
			wasNull(): boolean;
			readAsciiStream(): java.io.InputStream;
			readBigDecimal(): java.math.BigDecimal;
			readBinaryStream(): java.io.InputStream;
			readBlob(): java.sql.IBlob;
			readCharacterStream(): java.io.Reader;
			readClob(): java.sql.IClob;
			readDate(): java.sql.Date;
			readNClob(): java.sql.INClob;
			readNString(): string;
			readRef(): java.sql.IRef;
			readRowId(): java.sql.IRowId;
			readSQLXML(): java.sql.ISQLXML;
			readTime(): java.sql.Time;
			readTimestamp(): java.sql.Timestamp;
			readURL(): java.net.URL;
			readObject(): any;
			readInt(): number;
			readBytes(): native.Array<native.Byte>;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			readFloat(): number;
			readArray(): java.sql.IArray;
			readBoolean(): boolean;
			readDouble(): any;
			readString(): string;
		}
		export interface IBlob {
			getBinaryStream(): java.io.InputStream;
			getBinaryStream(arg1: native.Long, arg2: native.Long): java.io.InputStream;
			setBinaryStream(arg1: native.Long): java.io.OutputStream;
			setBytes(arg1: native.Long, arg2: native.Array<native.Byte>): number;
			setBytes(arg1: native.Long, arg2: native.Array<native.Byte>, arg3: number, arg4: number): number;
			getBytes(arg1: native.Long, arg2: number): native.Array<native.Byte>;
			length(): any;
			position(arg1: java.sql.IBlob, arg2: native.Long): any;
			position(arg1: native.Array<native.Byte>, arg2: native.Long): any;
			truncate(arg1: native.Long): void;
			free(): void;
		}
		export class DatabaseMetaData implements java.sql.IWrapper, java.sql.IDatabaseMetaData {
			constructor(implementation: java.sql.IDatabaseMetaData);
			static procedureResultUnknown: number;
			static procedureNoResult: number;
			static procedureReturnsResult: number;
			static procedureColumnUnknown: number;
			static procedureColumnIn: number;
			static procedureColumnInOut: number;
			static procedureColumnOut: number;
			static procedureColumnReturn: number;
			static procedureColumnResult: number;
			static procedureNoNulls: number;
			static procedureNullable: number;
			static procedureNullableUnknown: number;
			static columnNoNulls: number;
			static columnNullable: number;
			static columnNullableUnknown: number;
			static bestRowTemporary: number;
			static bestRowTransaction: number;
			static bestRowSession: number;
			static bestRowUnknown: number;
			static bestRowNotPseudo: number;
			static bestRowPseudo: number;
			static versionColumnUnknown: number;
			static versionColumnNotPseudo: number;
			static versionColumnPseudo: number;
			static importedKeyCascade: number;
			static importedKeyRestrict: number;
			static importedKeySetNull: number;
			static importedKeyNoAction: number;
			static importedKeySetDefault: number;
			static importedKeyInitiallyDeferred: number;
			static importedKeyInitiallyImmediate: number;
			static importedKeyNotDeferrable: number;
			static typeNoNulls: number;
			static typeNullable: number;
			static typeNullableUnknown: number;
			static typePredNone: number;
			static typePredChar: number;
			static typePredBasic: number;
			static typeSearchable: number;
			static tableIndexStatistic: native.Short;
			static tableIndexClustered: native.Short;
			static tableIndexHashed: native.Short;
			static tableIndexOther: native.Short;
			static attributeNoNulls: native.Short;
			static attributeNullable: native.Short;
			static attributeNullableUnknown: native.Short;
			static sqlStateXOpen: number;
			static sqlStateSQL: number;
			static sqlStateSQL99: number;
			static functionColumnUnknown: number;
			static functionColumnIn: number;
			static functionColumnInOut: number;
			static functionColumnOut: number;
			static functionReturn: number;
			static functionColumnResult: number;
			static functionNoNulls: number;
			static functionNullable: number;
			static functionNullableUnknown: number;
			static functionResultUnknown: number;
			static functionNoTable: number;
			static functionReturnsTable: number;
			getResultSetHoldability(): number;
			allProceduresAreCallable(): boolean;
			allTablesAreSelectable(): boolean;
			autoCommitFailureClosesAllResultSets(): boolean;
			dataDefinitionCausesTransactionCommit(): boolean;
			dataDefinitionIgnoredInTransactions(): boolean;
			deletesAreDetected(arg1: number): boolean;
			doesMaxRowSizeIncludeBlobs(): boolean;
			generatedKeyAlwaysReturned(): boolean;
			getBestRowIdentifier(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: boolean): java.sql.IResultSet;
			getBestRowIdentifier(arg1: string, arg2: string, arg3: string, arg4: number, arg5: boolean): java.sql.IResultSet;
			getCatalogSeparator(): string;
			getCatalogTerm(): string;
			getCatalogs(): java.sql.IResultSet;
			getClientInfoProperties(): java.sql.IResultSet;
			getColumnPrivileges(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): java.sql.IResultSet;
			getColumnPrivileges(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getCrossReference(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String): java.sql.IResultSet;
			getCrossReference(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string): java.sql.IResultSet;
			getDatabaseMajorVersion(): number;
			getDatabaseMinorVersion(): number;
			getDatabaseProductName(): string;
			getDatabaseProductVersion(): string;
			getDefaultTransactionIsolation(): number;
			getDriverMajorVersion(): number;
			getDriverMinorVersion(): number;
			getDriverName(): string;
			getDriverVersion(): string;
			getExportedKeys(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getExportedKeys(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getExtraNameCharacters(): string;
			getFunctionColumns(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): java.sql.IResultSet;
			getFunctionColumns(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getFunctions(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getFunctions(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getIdentifierQuoteString(): string;
			getImportedKeys(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getImportedKeys(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getIndexInfo(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: boolean, arg5: boolean): java.sql.IResultSet;
			getIndexInfo(arg1: string, arg2: string, arg3: string, arg4: boolean, arg5: boolean): java.sql.IResultSet;
			getJDBCMajorVersion(): number;
			getJDBCMinorVersion(): number;
			getMaxBinaryLiteralLength(): number;
			getMaxCatalogNameLength(): number;
			getMaxCharLiteralLength(): number;
			getMaxColumnNameLength(): number;
			getMaxColumnsInGroupBy(): number;
			getMaxColumnsInIndex(): number;
			getMaxColumnsInOrderBy(): number;
			getMaxColumnsInSelect(): number;
			getMaxColumnsInTable(): number;
			getMaxConnections(): number;
			getMaxCursorNameLength(): number;
			getMaxIndexLength(): number;
			getMaxProcedureNameLength(): number;
			getMaxRowSize(): number;
			getMaxSchemaNameLength(): number;
			getMaxStatementLength(): number;
			getMaxStatements(): number;
			getMaxTableNameLength(): number;
			getMaxTablesInSelect(): number;
			getMaxUserNameLength(): number;
			getNumericFunctions(): string;
			getPrimaryKeys(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getPrimaryKeys(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getProcedureColumns(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): java.sql.IResultSet;
			getProcedureColumns(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getProcedureTerm(): string;
			getProcedures(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getProcedures(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getPseudoColumns(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): java.sql.IResultSet;
			getPseudoColumns(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getRowIdLifetime(): java.sql.RowIdLifetime;
			getSQLKeywords(): string;
			getSQLStateType(): number;
			getSchemaTerm(): string;
			getSchemas(arg1: java.lang.String, arg2: java.lang.String): java.sql.IResultSet;
			getSchemas(arg1: string, arg2: string): java.sql.IResultSet;
			getSchemas(): java.sql.IResultSet;
			getSearchStringEscape(): string;
			getStringFunctions(): string;
			getSuperTables(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getSuperTables(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getSuperTypes(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getSuperTypes(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getSystemFunctions(): string;
			getTablePrivileges(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getTablePrivileges(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			getTableTypes(): java.sql.IResultSet;
			getTimeDateFunctions(): string;
			getTypeInfo(): java.sql.IResultSet;
			getUDTs(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: native.Array<number>): java.sql.IResultSet;
			getUDTs(arg1: string, arg2: string, arg3: string, arg4: native.Array<number>): java.sql.IResultSet;
			getVersionColumns(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): java.sql.IResultSet;
			getVersionColumns(arg1: string, arg2: string, arg3: string): java.sql.IResultSet;
			insertsAreDetected(arg1: number): boolean;
			isCatalogAtStart(): boolean;
			locatorsUpdateCopy(): boolean;
			nullPlusNonNullIsNull(): boolean;
			nullsAreSortedAtEnd(): boolean;
			nullsAreSortedAtStart(): boolean;
			nullsAreSortedHigh(): boolean;
			nullsAreSortedLow(): boolean;
			othersDeletesAreVisible(arg1: number): boolean;
			othersInsertsAreVisible(arg1: number): boolean;
			othersUpdatesAreVisible(arg1: number): boolean;
			ownDeletesAreVisible(arg1: number): boolean;
			ownInsertsAreVisible(arg1: number): boolean;
			ownUpdatesAreVisible(arg1: number): boolean;
			storesLowerCaseIdentifiers(): boolean;
			storesLowerCaseQuotedIdentifiers(): boolean;
			storesMixedCaseIdentifiers(): boolean;
			storesMixedCaseQuotedIdentifiers(): boolean;
			storesUpperCaseIdentifiers(): boolean;
			storesUpperCaseQuotedIdentifiers(): boolean;
			supportsANSI92EntryLevelSQL(): boolean;
			supportsANSI92FullSQL(): boolean;
			supportsANSI92IntermediateSQL(): boolean;
			supportsAlterTableWithAddColumn(): boolean;
			supportsAlterTableWithDropColumn(): boolean;
			supportsBatchUpdates(): boolean;
			supportsCatalogsInDataManipulation(): boolean;
			supportsCatalogsInIndexDefinitions(): boolean;
			supportsCatalogsInPrivilegeDefinitions(): boolean;
			supportsCatalogsInProcedureCalls(): boolean;
			supportsCatalogsInTableDefinitions(): boolean;
			supportsColumnAliasing(): boolean;
			supportsConvert(): boolean;
			supportsConvert(arg1: number, arg2: number): boolean;
			supportsCoreSQLGrammar(): boolean;
			supportsCorrelatedSubqueries(): boolean;
			supportsDataDefinitionAndDataManipulationTransactions(): boolean;
			supportsDataManipulationTransactionsOnly(): boolean;
			supportsDifferentTableCorrelationNames(): boolean;
			supportsExpressionsInOrderBy(): boolean;
			supportsExtendedSQLGrammar(): boolean;
			supportsFullOuterJoins(): boolean;
			supportsGetGeneratedKeys(): boolean;
			supportsGroupBy(): boolean;
			supportsGroupByBeyondSelect(): boolean;
			supportsGroupByUnrelated(): boolean;
			supportsIntegrityEnhancementFacility(): boolean;
			supportsLikeEscapeClause(): boolean;
			supportsLimitedOuterJoins(): boolean;
			supportsMinimumSQLGrammar(): boolean;
			supportsMixedCaseIdentifiers(): boolean;
			supportsMixedCaseQuotedIdentifiers(): boolean;
			supportsMultipleOpenResults(): boolean;
			supportsMultipleResultSets(): boolean;
			supportsMultipleTransactions(): boolean;
			supportsNamedParameters(): boolean;
			supportsNonNullableColumns(): boolean;
			supportsOpenCursorsAcrossCommit(): boolean;
			supportsOpenCursorsAcrossRollback(): boolean;
			supportsOpenStatementsAcrossCommit(): boolean;
			supportsOpenStatementsAcrossRollback(): boolean;
			supportsOrderByUnrelated(): boolean;
			supportsOuterJoins(): boolean;
			supportsPositionedDelete(): boolean;
			supportsPositionedUpdate(): boolean;
			supportsResultSetConcurrency(arg1: number, arg2: number): boolean;
			supportsResultSetHoldability(arg1: number): boolean;
			supportsResultSetType(arg1: number): boolean;
			supportsSavepoints(): boolean;
			supportsSchemasInDataManipulation(): boolean;
			supportsSchemasInIndexDefinitions(): boolean;
			supportsSchemasInPrivilegeDefinitions(): boolean;
			supportsSchemasInProcedureCalls(): boolean;
			supportsSchemasInTableDefinitions(): boolean;
			supportsSelectForUpdate(): boolean;
			supportsStatementPooling(): boolean;
			supportsStoredFunctionsUsingCallSyntax(): boolean;
			supportsStoredProcedures(): boolean;
			supportsSubqueriesInComparisons(): boolean;
			supportsSubqueriesInExists(): boolean;
			supportsSubqueriesInIns(): boolean;
			supportsSubqueriesInQuantifieds(): boolean;
			supportsTableCorrelationNames(): boolean;
			supportsTransactionIsolationLevel(arg1: number): boolean;
			supportsTransactions(): boolean;
			supportsUnion(): boolean;
			supportsUnionAll(): boolean;
			updatesAreDetected(arg1: number): boolean;
			usesLocalFilePerTable(): boolean;
			usesLocalFiles(): boolean;
			getURL(): string;
			getConnection(): java.sql.IConnection;
			isReadOnly(): boolean;
			getAttributes(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): java.sql.IResultSet;
			getAttributes(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getColumns(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): java.sql.IResultSet;
			getColumns(arg1: string, arg2: string, arg3: string, arg4: string): java.sql.IResultSet;
			getUserName(): string;
			getTables(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: native.Array<java.lang.String>): java.sql.IResultSet;
			getTables(arg1: string, arg2: string, arg3: string, arg4: native.Array<java.lang.String>): java.sql.IResultSet;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export class SQLNonTransientConnectionException extends java.sql.SQLNonTransientException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.Throwable);
			constructor(arg1: string, arg2: string, arg3: number, arg4: java.lang.Throwable);
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			static class: java.lang.Class<java.sql.SQLNonTransientConnectionException>;
		}
		export interface IStruct {
			getSQLTypeName(): string;
			getAttributes(): native.Array<any>;
			getAttributes(arg1: java.util.IMap<string, java.lang.Class<any>>): native.Array<any>;
		}
		export class PreparedStatement implements java.sql.IStatement, java.sql.IPreparedStatement {
			constructor(implementation: java.sql.IPreparedStatement);
			QueryTimeout: number;
			FetchSize: number;
			FetchDirection: number;
			MaxFieldSize: number;
			MaxRows: number;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBinaryStream(arg1: number, arg2: java.io.InputStream): void;
			setBytes(arg1: number, arg2: native.Array<native.Byte>): void;
			getMetaData(): java.sql.IResultSetMetaData;
			addBatch(): void;
			clearParameters(): void;
			executeQuery(): java.sql.IResultSet;
			executeUpdate(): number;
			getParameterMetaData(): java.sql.IParameterMetaData;
			setArray(arg1: number, arg2: java.sql.IArray): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream): void;
			setAsciiStream(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBigDecimal(arg1: number, arg2: java.math.BigDecimal): void;
			setBlob(arg1: number, arg2: java.io.InputStream, arg3: native.Long): void;
			setBlob(arg1: number, arg2: java.sql.IBlob): void;
			setBlob(arg1: number, arg2: java.io.InputStream): void;
			setClob(arg1: number, arg2: java.sql.IClob): void;
			setClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setClob(arg1: number, arg2: java.io.Reader): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.sql.INClob): void;
			setNClob(arg1: number, arg2: java.io.Reader): void;
			setNClob(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setNString(arg1: number, arg2: java.lang.String): void;
			setNString(arg1: number, arg2: string): void;
			setNull(arg1: number, arg2: number, arg3: java.lang.String): void;
			setNull(arg1: number, arg2: number, arg3: string): void;
			setNull(arg1: number, arg2: number): void;
			setRef(arg1: number, arg2: java.sql.IRef): void;
			setRowId(arg1: number, arg2: java.sql.IRowId): void;
			setSQLXML(arg1: number, arg2: java.sql.ISQLXML): void;
			setUnicodeStream(arg1: number, arg2: java.io.InputStream, arg3: number): void;
			setBoolean(arg1: number, arg2: boolean): void;
			setByte(arg1: number, arg2: native.Byte): void;
			setDouble(arg1: number, arg2: native.Double): void;
			setDouble(arg1: number, arg2: number): void;
			setFloat(arg1: number, arg2: native.Float): void;
			setInt(arg1: number, arg2: number): void;
			setLong(arg1: number, arg2: native.Long): void;
			setShort(arg1: number, arg2: native.Short): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp, arg3: java.util.Calendar): void;
			setTimestamp(arg1: number, arg2: java.sql.Timestamp): void;
			setURL(arg1: number, arg2: java.net.URL): void;
			execute(): boolean;
			setTime(arg1: number, arg2: java.sql.Time, arg3: java.util.Calendar): void;
			setTime(arg1: number, arg2: java.sql.Time): void;
			setObject(arg1: number, arg2: any, arg3: number): void;
			setObject(arg1: number, arg2: any, arg3: number, arg4: number): void;
			setObject(arg1: number, arg2: any): void;
			setDate(arg1: number, arg2: java.sql.Date, arg3: java.util.Calendar): void;
			setDate(arg1: number, arg2: java.sql.Date): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: number): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader): void;
			setCharacterStream(arg1: number, arg2: java.io.Reader, arg3: native.Long): void;
			setString(arg1: number, arg2: java.lang.String): void;
			setString(arg1: number, arg2: string): void;
			getResultSet(): java.sql.IResultSet;
			clearWarnings(): void;
			getWarnings(): java.sql.SQLWarning;
			addBatch(arg1: string): void;
			executeQuery(arg1: string): java.sql.IResultSet;
			executeUpdate(arg1: string, arg2: native.Array<java.lang.String>): number;
			executeUpdate(arg1: string): number;
			executeUpdate(arg1: string, arg2: number): number;
			clearBatch(): void;
			closeOnCompletion(): void;
			executeBatch(): native.Array<number>;
			getFetchDirection(): number;
			getFetchSize(): number;
			getGeneratedKeys(): java.sql.IResultSet;
			getMaxFieldSize(): number;
			getMaxRows(): number;
			getMoreResults(arg1: number): boolean;
			getMoreResults(): boolean;
			getQueryTimeout(): number;
			getResultSetConcurrency(): number;
			getResultSetHoldability(): number;
			getResultSetType(): number;
			getUpdateCount(): number;
			isCloseOnCompletion(): boolean;
			isPoolable(): boolean;
			setCursorName(arg1: string): void;
			setEscapeProcessing(arg1: boolean): void;
			setFetchDirection(arg1: number): void;
			setFetchSize(arg1: number): void;
			setMaxFieldSize(arg1: number): void;
			setMaxRows(arg1: number): void;
			setPoolable(arg1: boolean): void;
			setQueryTimeout(arg1: number): void;
			close(): void;
			getConnection(): java.sql.IConnection;
			execute(arg1: string): boolean;
			execute(arg1: string, arg2: native.Array<number>): boolean;
			execute(arg1: string, arg2: number): boolean;
			cancel(): void;
			isClosed(): boolean;
			isWrapperFor(arg1: java.lang.Class<any>): boolean;
			unwrap<T>(arg1: java.lang.Class<T>): T;
		}
		export interface ISQLOutput {
			writeAsciiStream(arg1: java.io.InputStream): void;
			writeBigDecimal(arg1: java.math.BigDecimal): void;
			writeBinaryStream(arg1: java.io.InputStream): void;
			writeBlob(arg1: java.sql.IBlob): void;
			writeCharacterStream(arg1: java.io.Reader): void;
			writeClob(arg1: java.sql.IClob): void;
			writeDate(arg1: java.sql.Date): void;
			writeNClob(arg1: java.sql.INClob): void;
			writeNString(arg1: string): void;
			writeRef(arg1: java.sql.IRef): void;
			writeRowId(arg1: java.sql.IRowId): void;
			writeSQLXML(arg1: java.sql.ISQLXML): void;
			writeStruct(arg1: java.sql.IStruct): void;
			writeTime(arg1: java.sql.Time): void;
			writeTimestamp(arg1: java.sql.Timestamp): void;
			writeURL(arg1: java.net.URL): void;
			writeObject(arg1: java.sql.ISQLData): void;
			writeInt(arg1: number): void;
			writeBytes(arg1: native.Array<native.Byte>): void;
			writeByte(arg1: native.Byte): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: native.Short): void;
			writeFloat(arg1: native.Float): void;
			writeArray(arg1: java.sql.IArray): void;
			writeBoolean(arg1: boolean): void;
			writeDouble(arg1: number): void;
			writeString(arg1: string): void;
		}
	}
	export module beans {
		export class PropertyChangeListenerProxy extends java.util.EventListenerProxy<java.beans.IPropertyChangeListener> implements java.beans.IPropertyChangeListener {
			constructor(arg1: java.lang.String, arg2: java.beans.IPropertyChangeListener);
			constructor(arg1: string, arg2: java.beans.IPropertyChangeListener);
			static class: java.lang.Class<java.beans.PropertyChangeListenerProxy>;
			getPropertyName(): string;
			propertyChange(arg1: java.beans.PropertyChangeEvent): void;
		}
		export class IndexedPropertyChangeEvent extends java.beans.PropertyChangeEvent {
			constructor(arg1: any, arg2: java.lang.String, arg3: any, arg4: any, arg5: number);
			constructor(arg1: any, arg2: string, arg3: any, arg4: any, arg5: number);
			static class: java.lang.Class<java.beans.IndexedPropertyChangeEvent>;
			getIndex(): number;
		}
		export class PropertyChangeListener implements java.util.IEventListener, java.beans.IPropertyChangeListener {
			constructor(implementation: java.beans.IPropertyChangeListener);
			propertyChange(arg1: java.beans.PropertyChangeEvent): void;
		}
		export interface IPropertyChangeListener extends java.util.IEventListener {
			propertyChange(arg1: java.beans.PropertyChangeEvent): void;
		}
		export class PropertyChangeSupport extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: any);
			static class: java.lang.Class<java.beans.PropertyChangeSupport>;
			firePropertyChange(arg1: java.beans.PropertyChangeEvent): void;
			firePropertyChange(arg1: java.lang.String, arg2: any, arg3: any): void;
			firePropertyChange(arg1: string, arg2: any, arg3: any): void;
			firePropertyChange(arg1: java.lang.String, arg2: number, arg3: number): void;
			firePropertyChange(arg1: string, arg2: number, arg3: number): void;
			firePropertyChange(arg1: java.lang.String, arg2: boolean, arg3: boolean): void;
			firePropertyChange(arg1: string, arg2: boolean, arg3: boolean): void;
			addPropertyChangeListener(arg1: java.lang.String, arg2: java.beans.IPropertyChangeListener): void;
			addPropertyChangeListener(arg1: string, arg2: java.beans.IPropertyChangeListener): void;
			addPropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
			getPropertyChangeListeners(arg1: java.lang.String): native.Array<java.beans.IPropertyChangeListener>;
			getPropertyChangeListeners(arg1: string): native.Array<java.beans.IPropertyChangeListener>;
			getPropertyChangeListeners(): native.Array<java.beans.IPropertyChangeListener>;
			removePropertyChangeListener(arg1: java.lang.String, arg2: java.beans.IPropertyChangeListener): void;
			removePropertyChangeListener(arg1: string, arg2: java.beans.IPropertyChangeListener): void;
			removePropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
			fireIndexedPropertyChange(arg1: java.lang.String, arg2: number, arg3: number, arg4: number): void;
			fireIndexedPropertyChange(arg1: string, arg2: number, arg3: number, arg4: number): void;
			fireIndexedPropertyChange(arg1: java.lang.String, arg2: number, arg3: boolean, arg4: boolean): void;
			fireIndexedPropertyChange(arg1: string, arg2: number, arg3: boolean, arg4: boolean): void;
			fireIndexedPropertyChange(arg1: java.lang.String, arg2: number, arg3: any, arg4: any): void;
			fireIndexedPropertyChange(arg1: string, arg2: number, arg3: any, arg4: any): void;
			hasListeners(arg1: java.lang.String): boolean;
			hasListeners(arg1: string): boolean;
		}
		export class PropertyChangeEvent extends java.util.EventObject {
			constructor(arg1: any, arg2: java.lang.String, arg3: any, arg4: any);
			constructor(arg1: any, arg2: string, arg3: any, arg4: any);
			static class: java.lang.Class<java.beans.PropertyChangeEvent>;
			PropagationId: any;
			toString(): string;
			getNewValue(): any;
			getOldValue(): any;
			getPropertyName(): string;
			getPropagationId(): any;
			setPropagationId(arg1: any): void;
		}
	}
	export module nio {
		export class BufferUnderflowException extends java.lang.RuntimeException {
			constructor();
			static class: java.lang.Class<java.nio.BufferUnderflowException>;
		}
		export class ByteBuffer extends java.nio.Buffer implements java.lang.IComparable<java.nio.ByteBuffer> {
			static class: java.lang.Class<java.nio.ByteBuffer>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: java.nio.ByteBuffer): number;
			compareTo(arg1: any): number;
			get(): number;
			get(arg1: native.Array<native.Byte>, arg2: number, arg3: number): java.nio.ByteBuffer;
			get(arg1: native.Array<native.Byte>): java.nio.ByteBuffer;
			get(arg1: number): number;
			put(arg1: native.Byte): java.nio.ByteBuffer;
			put(arg1: number, arg2: native.Byte): java.nio.ByteBuffer;
			put(arg1: java.nio.ByteBuffer): java.nio.ByteBuffer;
			put(arg1: native.Array<native.Byte>): java.nio.ByteBuffer;
			put(arg1: native.Array<native.Byte>, arg2: number, arg3: number): java.nio.ByteBuffer;
			array(): native.Array<native.Byte>;
			arrayOffset(): number;
			hasArray(): boolean;
			isDirect(): boolean;
			getChar(): string;
			getChar(arg1: number): string;
			getDouble(arg1: number): any;
			getDouble(): any;
			getFloat(): number;
			getFloat(arg1: number): number;
			getInt(): number;
			getInt(arg1: number): number;
			getLong(): any;
			getLong(arg1: number): any;
			getShort(): number;
			getShort(arg1: number): number;
			static wrap(arg1: native.Array<native.Byte>): java.nio.ByteBuffer;
			static wrap(arg1: native.Array<native.Byte>, arg2: number, arg3: number): java.nio.ByteBuffer;
			putChar(arg1: number, arg2: string): java.nio.ByteBuffer;
			putChar(arg1: string): java.nio.ByteBuffer;
			putDouble(arg1: native.Double): java.nio.ByteBuffer;
			putDouble(arg1: number): java.nio.ByteBuffer;
			putDouble(arg1: number, arg2: native.Double): java.nio.ByteBuffer;
			putDouble(arg1: number, arg2: number): java.nio.ByteBuffer;
			putFloat(arg1: native.Float): java.nio.ByteBuffer;
			putFloat(arg1: number, arg2: native.Float): java.nio.ByteBuffer;
			putInt(arg1: number, arg2: number): java.nio.ByteBuffer;
			putInt(arg1: number): java.nio.ByteBuffer;
			putLong(arg1: number, arg2: native.Long): java.nio.ByteBuffer;
			putLong(arg1: native.Long): java.nio.ByteBuffer;
			putShort(arg1: native.Short): java.nio.ByteBuffer;
			putShort(arg1: number, arg2: native.Short): java.nio.ByteBuffer;
			static allocate(arg1: number): java.nio.ByteBuffer;
			duplicate(): java.nio.ByteBuffer;
			static allocateDirect(arg1: number): java.nio.ByteBuffer;
			asCharBuffer(): java.nio.CharBuffer;
			asDoubleBuffer(): java.nio.DoubleBuffer;
			asFloatBuffer(): java.nio.FloatBuffer;
			asIntBuffer(): java.nio.IntBuffer;
			asLongBuffer(): java.nio.LongBuffer;
			asReadOnlyBuffer(): java.nio.ByteBuffer;
			asShortBuffer(): java.nio.ShortBuffer;
			compact(): java.nio.ByteBuffer;
			order(arg1: java.nio.ByteOrder): java.nio.ByteBuffer;
			order(): java.nio.ByteOrder;
			slice(): java.nio.ByteBuffer;
		}
		export module charset {
			export class MalformedInputException extends java.nio.charset.CharacterCodingException {
				constructor(arg1: number);
				static class: java.lang.Class<java.nio.charset.MalformedInputException>;
				getInputLength(): number;
				getMessage(): string;
			}
			export class CharacterCodingException extends java.io.IOException {
				constructor();
				static class: java.lang.Class<java.nio.charset.CharacterCodingException>;
			}
			export class IllegalCharsetNameException extends java.lang.IllegalArgumentException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.nio.charset.IllegalCharsetNameException>;
				getCharsetName(): string;
			}
			export class Charset extends java.lang.Object implements java.lang.IComparable<java.nio.charset.Charset> {
				static class: java.lang.Class<java.nio.charset.Charset>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				compareTo(arg1: any): number;
				compareTo(arg1: java.nio.charset.Charset): number;
				contains(arg1: java.nio.charset.Charset): boolean;
				decode(arg1: java.nio.ByteBuffer): java.nio.CharBuffer;
				encode(arg1: java.lang.String): java.nio.ByteBuffer;
				encode(arg1: string): java.nio.ByteBuffer;
				encode(arg1: java.nio.CharBuffer): java.nio.ByteBuffer;
				static forName(arg1: java.lang.String): java.nio.charset.Charset;
				static forName(arg1: string): java.nio.charset.Charset;
				name(): string;
				isRegistered(): boolean;
				static defaultCharset(): java.nio.charset.Charset;
				static isSupported(arg1: java.lang.String): boolean;
				static isSupported(arg1: string): boolean;
				newEncoder(): java.nio.charset.CharsetEncoder;
				aliases(): java.util.ISet<string>;
				static availableCharsets(): java.util.ISortedMap<string, java.nio.charset.Charset>;
				canEncode(): boolean;
				displayName(arg1: java.util.Locale): string;
				displayName(): string;
				newDecoder(): java.nio.charset.CharsetDecoder;
			}
			export class CoderMalfunctionError extends java.lang.Error {
				constructor(arg1: java.lang.Exception);
				static class: java.lang.Class<java.nio.charset.CoderMalfunctionError>;
			}
			export module spi {
				export class CharsetProvider extends java.lang.Object {
					static class: java.lang.Class<java.nio.charset.spi.CharsetProvider>;
					charsetForName(arg1: java.lang.String): java.nio.charset.Charset;
					charsetForName(arg1: string): java.nio.charset.Charset;
					charsets(): java.util.IIterator<java.nio.charset.Charset>;
				}
			}
			export class UnmappableCharacterException extends java.nio.charset.CharacterCodingException {
				constructor(arg1: number);
				static class: java.lang.Class<java.nio.charset.UnmappableCharacterException>;
				getInputLength(): number;
				getMessage(): string;
			}
			export class CharsetEncoder extends java.lang.Object {
				static class: java.lang.Class<java.nio.charset.CharsetEncoder>;
				charset(): java.nio.charset.Charset;
				encode(arg1: java.nio.CharBuffer, arg2: java.nio.ByteBuffer, arg3: boolean): java.nio.charset.CoderResult;
				encode(arg1: java.nio.CharBuffer): java.nio.ByteBuffer;
				flush(arg1: java.nio.ByteBuffer): java.nio.charset.CoderResult;
				reset(): java.nio.charset.CharsetEncoder;
				onMalformedInput(arg1: java.nio.charset.CodingErrorAction): java.nio.charset.CharsetEncoder;
				onUnmappableCharacter(arg1: java.nio.charset.CodingErrorAction): java.nio.charset.CharsetEncoder;
				canEncode(arg1: string): boolean;
				canEncode(arg1: java.lang.ICharSequence): boolean;
				averageBytesPerChar(): number;
				isLegalReplacement(arg1: native.Array<native.Byte>): boolean;
				malformedInputAction(): java.nio.charset.CodingErrorAction;
				maxBytesPerChar(): number;
				replaceWith(arg1: native.Array<native.Byte>): java.nio.charset.CharsetEncoder;
				replacement(): native.Array<native.Byte>;
				unmappableCharacterAction(): java.nio.charset.CodingErrorAction;
			}
			export class UnsupportedCharsetException extends java.lang.IllegalArgumentException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.nio.charset.UnsupportedCharsetException>;
				getCharsetName(): string;
			}
			export class CodingErrorAction extends java.lang.Object {
				static IGNORE: java.nio.charset.CodingErrorAction;
				static REPLACE: java.nio.charset.CodingErrorAction;
				static REPORT: java.nio.charset.CodingErrorAction;
				static class: java.lang.Class<java.nio.charset.CodingErrorAction>;
				toString(): string;
			}
			export class CharsetDecoder extends java.lang.Object {
				static class: java.lang.Class<java.nio.charset.CharsetDecoder>;
				charset(): java.nio.charset.Charset;
				decode(arg1: java.nio.ByteBuffer): java.nio.CharBuffer;
				decode(arg1: java.nio.ByteBuffer, arg2: java.nio.CharBuffer, arg3: boolean): java.nio.charset.CoderResult;
				flush(arg1: java.nio.CharBuffer): java.nio.charset.CoderResult;
				reset(): java.nio.charset.CharsetDecoder;
				onMalformedInput(arg1: java.nio.charset.CodingErrorAction): java.nio.charset.CharsetDecoder;
				onUnmappableCharacter(arg1: java.nio.charset.CodingErrorAction): java.nio.charset.CharsetDecoder;
				malformedInputAction(): java.nio.charset.CodingErrorAction;
				maxCharsPerByte(): number;
				replaceWith(arg1: java.lang.String): java.nio.charset.CharsetDecoder;
				replaceWith(arg1: string): java.nio.charset.CharsetDecoder;
				replacement(): string;
				unmappableCharacterAction(): java.nio.charset.CodingErrorAction;
				averageCharsPerByte(): number;
				detectedCharset(): java.nio.charset.Charset;
				isAutoDetecting(): boolean;
				isCharsetDetected(): boolean;
			}
			export class CoderResult extends java.lang.Object {
				static UNDERFLOW: java.nio.charset.CoderResult;
				static OVERFLOW: java.nio.charset.CoderResult;
				static class: java.lang.Class<java.nio.charset.CoderResult>;
				toString(): string;
				length(): number;
				throwException(): void;
				isOverflow(): boolean;
				isUnderflow(): boolean;
				static unmappableForLength(arg1: number): java.nio.charset.CoderResult;
				isError(): boolean;
				isMalformed(): boolean;
				isUnmappable(): boolean;
				static malformedForLength(arg1: number): java.nio.charset.CoderResult;
			}
		}
		export module channels {
			export class ByteChannel implements java.nio.channels.IReadableByteChannel, java.nio.channels.IWritableByteChannel, java.nio.channels.IByteChannel {
				constructor(implementation: java.nio.channels.IByteChannel);
				read(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
				write(arg1: java.nio.ByteBuffer): number;
			}
			export class ConnectionPendingException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.ConnectionPendingException>;
			}
			export class AsynchronousCloseException extends java.nio.channels.ClosedChannelException {
				constructor();
				static class: java.lang.Class<java.nio.channels.AsynchronousCloseException>;
			}
			export class Channel implements java.io.ICloseable, java.nio.channels.IChannel {
				constructor(implementation: java.nio.channels.IChannel);
				close(): void;
				isOpen(): boolean;
			}
			export class ClosedByInterruptException extends java.nio.channels.AsynchronousCloseException {
				constructor();
				static class: java.lang.Class<java.nio.channels.ClosedByInterruptException>;
			}
			export class SocketChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.IByteChannel, java.nio.channels.IScatteringByteChannel, java.nio.channels.IGatheringByteChannel {
				static class: java.lang.Class<java.nio.channels.SocketChannel>;
				write(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				write(arg1: native.Array<java.nio.ByteBuffer>): any;
				write(arg1: java.nio.ByteBuffer): number;
				bind(arg1: java.net.SocketAddress): java.nio.channels.SocketChannel;
				static open(): java.nio.channels.SocketChannel;
				static open(arg1: java.net.SocketAddress): java.nio.channels.SocketChannel;
				read(arg1: java.nio.ByteBuffer): number;
				read(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				read(arg1: native.Array<java.nio.ByteBuffer>): any;
				connect(arg1: java.net.SocketAddress): boolean;
				socket(): java.net.Socket;
				shutdownInput(): java.nio.channels.SocketChannel;
				shutdownOutput(): java.nio.channels.SocketChannel;
				isConnected(): boolean;
				finishConnect(): boolean;
				getRemoteAddress(): java.net.SocketAddress;
				isConnectionPending(): boolean;
				validOps(): number;
				close(): void;
				isOpen(): boolean;
			}
			export class Pipe extends java.lang.Object {
				static class: java.lang.Class<java.nio.channels.Pipe>;
				sink(): java.nio.channels.Pipe.SinkChannel;
				static open(): java.nio.channels.Pipe;
				source(): java.nio.channels.Pipe.SourceChannel;
			}
			export module Pipe {
				export class SinkChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.IWritableByteChannel, java.nio.channels.IGatheringByteChannel {
					static class: java.lang.Class<java.nio.channels.Pipe.SinkChannel>;
					validOps(): number;
					write(arg1: java.nio.ByteBuffer): number;
					close(): void;
					isOpen(): boolean;
					write(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
					write(arg1: native.Array<java.nio.ByteBuffer>): any;
				}
				export class SourceChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.IReadableByteChannel, java.nio.channels.IScatteringByteChannel {
					static class: java.lang.Class<java.nio.channels.Pipe.SourceChannel>;
					validOps(): number;
					read(arg1: java.nio.ByteBuffer): number;
					close(): void;
					isOpen(): boolean;
					read(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
					read(arg1: native.Array<java.nio.ByteBuffer>): any;
				}
			}
			export class FileLock extends java.lang.Object {
				static class: java.lang.Class<java.nio.channels.FileLock>;
				acquiredBy(): java.nio.channels.IChannel;
				overlaps(arg1: native.Long, arg2: native.Long): boolean;
				toString(): string;
				size(): any;
				position(): any;
				close(): void;
				channel(): java.nio.channels.FileChannel;
				release(): void;
				isShared(): boolean;
				isValid(): boolean;
			}
			export class AlreadyConnectedException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.AlreadyConnectedException>;
			}
			export class ServerSocketChannel extends java.nio.channels.spi.AbstractSelectableChannel {
				static class: java.lang.Class<java.nio.channels.ServerSocketChannel>;
				bind(arg1: java.net.SocketAddress): java.nio.channels.ServerSocketChannel;
				bind(arg1: java.net.SocketAddress, arg2: number): java.nio.channels.ServerSocketChannel;
				static open(): java.nio.channels.ServerSocketChannel;
				accept(): java.nio.channels.SocketChannel;
				socket(): java.net.ServerSocket;
				validOps(): number;
			}
			export class UnresolvedAddressException extends java.lang.IllegalArgumentException {
				constructor();
				static class: java.lang.Class<java.nio.channels.UnresolvedAddressException>;
			}
			export interface IGatheringByteChannel extends java.nio.channels.IWritableByteChannel {
				write(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				write(arg1: native.Array<java.nio.ByteBuffer>): any;
				write(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
			}
			export class ReadableByteChannel implements java.nio.channels.IChannel, java.nio.channels.IReadableByteChannel {
				constructor(implementation: java.nio.channels.IReadableByteChannel);
				read(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
			}
			export module spi {
				export class AbstractSelectableChannel extends java.nio.channels.SelectableChannel {
					static class: java.lang.Class<java.nio.channels.spi.AbstractSelectableChannel>;
					isRegistered(): boolean;
					register(arg1: java.nio.channels.Selector, arg2: number, arg3: any): java.nio.channels.SelectionKey;
					provider(): java.nio.channels.spi.SelectorProvider;
					configureBlocking(arg1: boolean): java.nio.channels.SelectableChannel;
					blockingLock(): any;
					isBlocking(): boolean;
					keyFor(arg1: java.nio.channels.Selector): java.nio.channels.SelectionKey;
					register(arg1: java.nio.channels.Selector, arg2: number): java.nio.channels.SelectionKey;
				}
				export class AbstractSelector extends java.nio.channels.Selector {
					static class: java.lang.Class<java.nio.channels.spi.AbstractSelector>;
					provider(): java.nio.channels.spi.SelectorProvider;
					close(): void;
					isOpen(): boolean;
				}
				export class AbstractInterruptibleChannel extends java.lang.Object implements java.nio.channels.IChannel, java.nio.channels.IInterruptibleChannel {
					static class: java.lang.Class<java.nio.channels.spi.AbstractInterruptibleChannel>;
					close(): void;
					isOpen(): boolean;
				}
				export class AbstractSelectionKey extends java.nio.channels.SelectionKey {
					static class: java.lang.Class<java.nio.channels.spi.AbstractSelectionKey>;
					isValid(): boolean;
					cancel(): void;
				}
				export class SelectorProvider extends java.lang.Object {
					static class: java.lang.Class<java.nio.channels.spi.SelectorProvider>;
					openDatagramChannel(): java.nio.channels.DatagramChannel;
					openPipe(): java.nio.channels.Pipe;
					openServerSocketChannel(): java.nio.channels.ServerSocketChannel;
					inheritedChannel(): java.nio.channels.IChannel;
					static provider(): java.nio.channels.spi.SelectorProvider;
					openSelector(): java.nio.channels.spi.AbstractSelector;
					openSocketChannel(): java.nio.channels.SocketChannel;
				}
			}
			export interface IChannel extends java.io.ICloseable {
				close(): void;
				isOpen(): boolean;
			}
			export class ClosedChannelException extends java.io.IOException {
				constructor();
				static class: java.lang.Class<java.nio.channels.ClosedChannelException>;
			}
			export class FileChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.IGatheringByteChannel, java.nio.channels.IScatteringByteChannel {
				static class: java.lang.Class<java.nio.channels.FileChannel>;
				size(): any;
				position(): any;
				position(arg1: native.Long): java.nio.channels.FileChannel;
				write(arg1: native.Array<java.nio.ByteBuffer>): any;
				write(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				write(arg1: java.nio.ByteBuffer, arg2: native.Long): number;
				write(arg1: java.nio.ByteBuffer): number;
				lock(arg1: native.Long, arg2: native.Long, arg3: boolean): java.nio.channels.FileLock;
				lock(): java.nio.channels.FileLock;
				truncate(arg1: native.Long): java.nio.channels.FileChannel;
				read(arg1: java.nio.ByteBuffer, arg2: native.Long): number;
				read(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				read(arg1: native.Array<java.nio.ByteBuffer>): any;
				read(arg1: java.nio.ByteBuffer): number;
				map(arg1: java.nio.channels.FileChannel.MapMode, arg2: native.Long, arg3: native.Long): java.nio.MappedByteBuffer;
				tryLock(): java.nio.channels.FileLock;
				tryLock(arg1: native.Long, arg2: native.Long, arg3: boolean): java.nio.channels.FileLock;
				force(arg1: boolean): void;
				transferFrom(arg1: java.nio.channels.IReadableByteChannel, arg2: native.Long, arg3: native.Long): any;
				transferTo(arg1: native.Long, arg2: native.Long, arg3: java.nio.channels.IWritableByteChannel): any;
				close(): void;
				isOpen(): boolean;
			}
			export module FileChannel {
				export class MapMode extends java.lang.Object {
					static READ_ONLY: java.nio.channels.FileChannel.MapMode;
					static READ_WRITE: java.nio.channels.FileChannel.MapMode;
					static PRIVATE: java.nio.channels.FileChannel.MapMode;
					static class: java.lang.Class<java.nio.channels.FileChannel.MapMode>;
					toString(): string;
				}
			}
			export class OverlappingFileLockException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.OverlappingFileLockException>;
			}
			export class IllegalBlockingModeException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.IllegalBlockingModeException>;
			}
			export class FileLockInterruptionException extends java.io.IOException {
				constructor();
				static class: java.lang.Class<java.nio.channels.FileLockInterruptionException>;
			}
			export interface IByteChannel extends java.nio.channels.IReadableByteChannel, java.nio.channels.IWritableByteChannel {
				read(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
				write(arg1: java.nio.ByteBuffer): number;
			}
			export class UnsupportedAddressTypeException extends java.lang.IllegalArgumentException {
				constructor();
				static class: java.lang.Class<java.nio.channels.UnsupportedAddressTypeException>;
			}
			export class NotYetBoundException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.NotYetBoundException>;
			}
			export interface IScatteringByteChannel extends java.nio.channels.IReadableByteChannel {
				read(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				read(arg1: native.Array<java.nio.ByteBuffer>): any;
				read(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
			}
			export class SelectableChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.IChannel {
				static class: java.lang.Class<java.nio.channels.SelectableChannel>;
				isRegistered(): boolean;
				register(arg1: java.nio.channels.Selector, arg2: number, arg3: any): java.nio.channels.SelectionKey;
				register(arg1: java.nio.channels.Selector, arg2: number): java.nio.channels.SelectionKey;
				provider(): java.nio.channels.spi.SelectorProvider;
				configureBlocking(arg1: boolean): java.nio.channels.SelectableChannel;
				validOps(): number;
				blockingLock(): any;
				isBlocking(): boolean;
				keyFor(arg1: java.nio.channels.Selector): java.nio.channels.SelectionKey;
				close(): void;
				isOpen(): boolean;
			}
			export class CancelledKeyException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.CancelledKeyException>;
			}
			export interface IWritableByteChannel extends java.nio.channels.IChannel {
				write(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
			}
			export class ClosedSelectorException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.ClosedSelectorException>;
			}
			export class ScatteringByteChannel implements java.nio.channels.IReadableByteChannel, java.nio.channels.IScatteringByteChannel {
				constructor(implementation: java.nio.channels.IScatteringByteChannel);
				read(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				read(arg1: native.Array<java.nio.ByteBuffer>): any;
				read(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
			}
			export class NonWritableChannelException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.NonWritableChannelException>;
			}
			export class InterruptibleChannel implements java.nio.channels.IChannel, java.nio.channels.IInterruptibleChannel {
				constructor(implementation: java.nio.channels.IInterruptibleChannel);
				close(): void;
				isOpen(): boolean;
			}
			export class NoConnectionPendingException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.NoConnectionPendingException>;
			}
			export class SelectionKey extends java.lang.Object {
				static OP_READ: number;
				static OP_WRITE: number;
				static OP_CONNECT: number;
				static OP_ACCEPT: number;
				static class: java.lang.Class<java.nio.channels.SelectionKey>;
				isWritable(): boolean;
				isAcceptable(): boolean;
				isConnectable(): boolean;
				isReadable(): boolean;
				readyOps(): number;
				channel(): java.nio.channels.SelectableChannel;
				isValid(): boolean;
				cancel(): void;
				attachment(): any;
				attach(arg1: any): any;
				interestOps(arg1: number): java.nio.channels.SelectionKey;
				interestOps(): number;
				selector(): java.nio.channels.Selector;
			}
			export interface IInterruptibleChannel extends java.nio.channels.IChannel {
				close(): void;
				isOpen(): boolean;
			}
			export class Channels extends java.lang.Object {
				static class: java.lang.Class<java.nio.channels.Channels>;
				static newChannel(arg1: java.io.OutputStream): java.nio.channels.IWritableByteChannel;
				static newChannel(arg1: java.io.InputStream): java.nio.channels.IReadableByteChannel;
				static newOutputStream(arg1: java.nio.channels.IWritableByteChannel): java.io.OutputStream;
				static newWriter(arg1: java.nio.channels.IWritableByteChannel, arg2: java.nio.charset.CharsetEncoder, arg3: number): java.io.Writer;
				static newWriter(arg1: java.nio.channels.IWritableByteChannel, arg2: java.lang.String): java.io.Writer;
				static newWriter(arg1: java.nio.channels.IWritableByteChannel, arg2: string): java.io.Writer;
				static newInputStream(arg1: java.nio.channels.IReadableByteChannel): java.io.InputStream;
				static newReader(arg1: java.nio.channels.IReadableByteChannel, arg2: java.lang.String): java.io.Reader;
				static newReader(arg1: java.nio.channels.IReadableByteChannel, arg2: string): java.io.Reader;
				static newReader(arg1: java.nio.channels.IReadableByteChannel, arg2: java.nio.charset.CharsetDecoder, arg3: number): java.io.Reader;
			}
			export class IllegalSelectorException extends java.lang.IllegalArgumentException {
				constructor();
				static class: java.lang.Class<java.nio.channels.IllegalSelectorException>;
			}
			export class NonReadableChannelException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.NonReadableChannelException>;
			}
			export class DatagramChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.IByteChannel, java.nio.channels.IScatteringByteChannel, java.nio.channels.IGatheringByteChannel {
				static class: java.lang.Class<java.nio.channels.DatagramChannel>;
				write(arg1: java.nio.ByteBuffer): number;
				write(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				write(arg1: native.Array<java.nio.ByteBuffer>): any;
				bind(arg1: java.net.SocketAddress): java.nio.channels.DatagramChannel;
				static open(): java.nio.channels.DatagramChannel;
				read(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				read(arg1: native.Array<java.nio.ByteBuffer>): any;
				read(arg1: java.nio.ByteBuffer): number;
				connect(arg1: java.net.SocketAddress): java.nio.channels.DatagramChannel;
				disconnect(): java.nio.channels.DatagramChannel;
				socket(): java.net.DatagramSocket;
				isConnected(): boolean;
				getRemoteAddress(): java.net.SocketAddress;
				validOps(): number;
				receive(arg1: java.nio.ByteBuffer): java.net.SocketAddress;
				send(arg1: java.nio.ByteBuffer, arg2: java.net.SocketAddress): number;
				close(): void;
				isOpen(): boolean;
			}
			export interface IReadableByteChannel extends java.nio.channels.IChannel {
				read(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
			}
			export class GatheringByteChannel implements java.nio.channels.IWritableByteChannel, java.nio.channels.IGatheringByteChannel {
				constructor(implementation: java.nio.channels.IGatheringByteChannel);
				write(arg1: native.Array<java.nio.ByteBuffer>, arg2: number, arg3: number): any;
				write(arg1: native.Array<java.nio.ByteBuffer>): any;
				write(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
			}
			export class NotYetConnectedException extends java.lang.IllegalStateException {
				constructor();
				static class: java.lang.Class<java.nio.channels.NotYetConnectedException>;
			}
			export class WritableByteChannel implements java.nio.channels.IChannel, java.nio.channels.IWritableByteChannel {
				constructor(implementation: java.nio.channels.IWritableByteChannel);
				write(arg1: java.nio.ByteBuffer): number;
				close(): void;
				isOpen(): boolean;
			}
			export class Selector extends java.lang.Object implements java.io.ICloseable {
				static class: java.lang.Class<java.nio.channels.Selector>;
				selectedKeys(): java.util.ISet<java.nio.channels.SelectionKey>;
				provider(): java.nio.channels.spi.SelectorProvider;
				close(): void;
				keys(): java.util.ISet<java.nio.channels.SelectionKey>;
				static open(): java.nio.channels.Selector;
				isOpen(): boolean;
				wakeup(): java.nio.channels.Selector;
				select(arg1: native.Long): number;
				select(): number;
				selectNow(): number;
			}
		}
		export class FloatBuffer extends java.nio.Buffer implements java.lang.IComparable<java.nio.FloatBuffer> {
			static class: java.lang.Class<java.nio.FloatBuffer>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.nio.FloatBuffer): number;
			get(arg1: native.Array<native.Float>): java.nio.FloatBuffer;
			get(): number;
			get(arg1: native.Array<native.Float>, arg2: number, arg3: number): java.nio.FloatBuffer;
			get(arg1: number): number;
			put(arg1: native.Array<native.Float>, arg2: number, arg3: number): java.nio.FloatBuffer;
			put(arg1: native.Array<native.Float>): java.nio.FloatBuffer;
			put(arg1: native.Float): java.nio.FloatBuffer;
			put(arg1: number, arg2: native.Float): java.nio.FloatBuffer;
			put(arg1: java.nio.FloatBuffer): java.nio.FloatBuffer;
			array(): native.Array<native.Float>;
			arrayOffset(): number;
			hasArray(): boolean;
			isDirect(): boolean;
			static wrap(arg1: native.Array<native.Float>): java.nio.FloatBuffer;
			static wrap(arg1: native.Array<native.Float>, arg2: number, arg3: number): java.nio.FloatBuffer;
			static allocate(arg1: number): java.nio.FloatBuffer;
			duplicate(): java.nio.FloatBuffer;
			asReadOnlyBuffer(): java.nio.FloatBuffer;
			compact(): java.nio.FloatBuffer;
			order(): java.nio.ByteOrder;
			slice(): java.nio.FloatBuffer;
		}
		export class Buffer extends java.lang.Object {
			static class: java.lang.Class<java.nio.Buffer>;
			array(): any;
			arrayOffset(): number;
			hasArray(): boolean;
			isDirect(): boolean;
			position(arg1: number): java.nio.Buffer;
			position(): number;
			remaining(): number;
			clear(): java.nio.Buffer;
			capacity(): number;
			flip(): java.nio.Buffer;
			hasRemaining(): boolean;
			isReadOnly(): boolean;
			limit(arg1: number): java.nio.Buffer;
			limit(): number;
			mark(): java.nio.Buffer;
			reset(): java.nio.Buffer;
			rewind(): java.nio.Buffer;
		}
		export class DoubleBuffer extends java.nio.Buffer implements java.lang.IComparable<java.nio.DoubleBuffer> {
			static class: java.lang.Class<java.nio.DoubleBuffer>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.nio.DoubleBuffer): number;
			get(arg1: native.Array<native.Double>): java.nio.DoubleBuffer;
			get(): any;
			get(arg1: native.Array<native.Double>, arg2: number, arg3: number): java.nio.DoubleBuffer;
			get(arg1: number): any;
			put(arg1: native.Array<native.Double>, arg2: number, arg3: number): java.nio.DoubleBuffer;
			put(arg1: native.Array<native.Double>): java.nio.DoubleBuffer;
			put(arg1: native.Double): java.nio.DoubleBuffer;
			put(arg1: number): java.nio.DoubleBuffer;
			put(arg1: number, arg2: native.Double): java.nio.DoubleBuffer;
			put(arg1: number, arg2: number): java.nio.DoubleBuffer;
			put(arg1: java.nio.DoubleBuffer): java.nio.DoubleBuffer;
			array(): native.Array<native.Double>;
			arrayOffset(): number;
			hasArray(): boolean;
			isDirect(): boolean;
			static wrap(arg1: native.Array<native.Double>): java.nio.DoubleBuffer;
			static wrap(arg1: native.Array<native.Double>, arg2: number, arg3: number): java.nio.DoubleBuffer;
			static allocate(arg1: number): java.nio.DoubleBuffer;
			duplicate(): java.nio.DoubleBuffer;
			asReadOnlyBuffer(): java.nio.DoubleBuffer;
			compact(): java.nio.DoubleBuffer;
			order(): java.nio.ByteOrder;
			slice(): java.nio.DoubleBuffer;
		}
		export class BufferOverflowException extends java.lang.RuntimeException {
			constructor();
			static class: java.lang.Class<java.nio.BufferOverflowException>;
		}
		export class CharBuffer extends java.nio.Buffer implements java.lang.IComparable<java.nio.CharBuffer>, java.lang.IAppendable, java.lang.ICharSequence, java.lang.IReadable {
			static class: java.lang.Class<java.nio.CharBuffer>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			append(arg1: string): java.nio.CharBuffer;
			append(arg1: java.lang.ICharSequence): java.nio.CharBuffer;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.nio.CharBuffer;
			append(arg1: string, arg2: number, arg3: number): java.nio.CharBuffer;
			charAt(arg1: number): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.nio.CharBuffer): number;
			get(arg1: number): string;
			get(arg1: native.Array<string>): java.nio.CharBuffer;
			get(): string;
			get(arg1: native.Array<string>, arg2: number, arg3: number): java.nio.CharBuffer;
			length(): number;
			subSequence(arg1: number, arg2: number): java.nio.CharBuffer;
			put(arg1: java.lang.String): java.nio.CharBuffer;
			put(arg1: string): java.nio.CharBuffer;
			put(arg1: java.lang.String, arg2: number, arg3: number): java.nio.CharBuffer;
			put(arg1: string, arg2: number, arg3: number): java.nio.CharBuffer;
			put(arg1: number, arg2: string): java.nio.CharBuffer;
			put(arg1: native.Array<string>): java.nio.CharBuffer;
			put(arg1: native.Array<string>, arg2: number, arg3: number): java.nio.CharBuffer;
			put(arg1: java.nio.CharBuffer): java.nio.CharBuffer;
			array(): native.Array<string>;
			arrayOffset(): number;
			hasArray(): boolean;
			isDirect(): boolean;
			static wrap(arg1: native.Array<string>): java.nio.CharBuffer;
			static wrap(arg1: native.Array<string>, arg2: number, arg3: number): java.nio.CharBuffer;
			static wrap(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.nio.CharBuffer;
			static wrap(arg1: string, arg2: number, arg3: number): java.nio.CharBuffer;
			static wrap(arg1: java.lang.ICharSequence): java.nio.CharBuffer;
			static wrap(arg1: string): java.nio.CharBuffer;
			read(arg1: java.nio.CharBuffer): number;
			static allocate(arg1: number): java.nio.CharBuffer;
			duplicate(): java.nio.CharBuffer;
			asReadOnlyBuffer(): java.nio.CharBuffer;
			compact(): java.nio.CharBuffer;
			order(): java.nio.ByteOrder;
			slice(): java.nio.CharBuffer;
		}
		export class ShortBuffer extends java.nio.Buffer implements java.lang.IComparable<java.nio.ShortBuffer> {
			static class: java.lang.Class<java.nio.ShortBuffer>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.nio.ShortBuffer): number;
			get(arg1: native.Array<native.Short>, arg2: number, arg3: number): java.nio.ShortBuffer;
			get(arg1: native.Array<native.Short>): java.nio.ShortBuffer;
			get(arg1: number): number;
			get(): number;
			put(arg1: number, arg2: native.Short): java.nio.ShortBuffer;
			put(arg1: native.Short): java.nio.ShortBuffer;
			put(arg1: native.Array<native.Short>, arg2: number, arg3: number): java.nio.ShortBuffer;
			put(arg1: native.Array<native.Short>): java.nio.ShortBuffer;
			put(arg1: java.nio.ShortBuffer): java.nio.ShortBuffer;
			array(): native.Array<native.Short>;
			arrayOffset(): number;
			hasArray(): boolean;
			isDirect(): boolean;
			static wrap(arg1: native.Array<native.Short>, arg2: number, arg3: number): java.nio.ShortBuffer;
			static wrap(arg1: native.Array<native.Short>): java.nio.ShortBuffer;
			static allocate(arg1: number): java.nio.ShortBuffer;
			duplicate(): java.nio.ShortBuffer;
			asReadOnlyBuffer(): java.nio.ShortBuffer;
			compact(): java.nio.ShortBuffer;
			order(): java.nio.ByteOrder;
			slice(): java.nio.ShortBuffer;
		}
		export class LongBuffer extends java.nio.Buffer implements java.lang.IComparable<java.nio.LongBuffer> {
			static class: java.lang.Class<java.nio.LongBuffer>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.nio.LongBuffer): number;
			get(arg1: native.Array<native.Long>): java.nio.LongBuffer;
			get(): any;
			get(arg1: native.Array<native.Long>, arg2: number, arg3: number): java.nio.LongBuffer;
			get(arg1: number): any;
			put(arg1: native.Array<native.Long>, arg2: number, arg3: number): java.nio.LongBuffer;
			put(arg1: native.Array<native.Long>): java.nio.LongBuffer;
			put(arg1: native.Long): java.nio.LongBuffer;
			put(arg1: number, arg2: native.Long): java.nio.LongBuffer;
			put(arg1: java.nio.LongBuffer): java.nio.LongBuffer;
			array(): native.Array<native.Long>;
			arrayOffset(): number;
			hasArray(): boolean;
			isDirect(): boolean;
			static wrap(arg1: native.Array<native.Long>): java.nio.LongBuffer;
			static wrap(arg1: native.Array<native.Long>, arg2: number, arg3: number): java.nio.LongBuffer;
			static allocate(arg1: number): java.nio.LongBuffer;
			duplicate(): java.nio.LongBuffer;
			asReadOnlyBuffer(): java.nio.LongBuffer;
			compact(): java.nio.LongBuffer;
			order(): java.nio.ByteOrder;
			slice(): java.nio.LongBuffer;
		}
		export class InvalidMarkException extends java.lang.IllegalStateException {
			constructor();
			static class: java.lang.Class<java.nio.InvalidMarkException>;
		}
		export class ByteOrder extends java.lang.Object {
			static BIG_ENDIAN: java.nio.ByteOrder;
			static LITTLE_ENDIAN: java.nio.ByteOrder;
			static class: java.lang.Class<java.nio.ByteOrder>;
			toString(): string;
			static nativeOrder(): java.nio.ByteOrder;
		}
		export class IntBuffer extends java.nio.Buffer implements java.lang.IComparable<java.nio.IntBuffer> {
			static class: java.lang.Class<java.nio.IntBuffer>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.nio.IntBuffer): number;
			get(arg1: native.Array<number>, arg2: number, arg3: number): java.nio.IntBuffer;
			get(arg1: native.Array<number>): java.nio.IntBuffer;
			get(arg1: number): number;
			get(): number;
			put(arg1: number, arg2: number): java.nio.IntBuffer;
			put(arg1: number): java.nio.IntBuffer;
			put(arg1: native.Array<number>, arg2: number, arg3: number): java.nio.IntBuffer;
			put(arg1: native.Array<number>): java.nio.IntBuffer;
			put(arg1: java.nio.IntBuffer): java.nio.IntBuffer;
			array(): native.Array<number>;
			arrayOffset(): number;
			hasArray(): boolean;
			isDirect(): boolean;
			static wrap(arg1: native.Array<number>, arg2: number, arg3: number): java.nio.IntBuffer;
			static wrap(arg1: native.Array<number>): java.nio.IntBuffer;
			static allocate(arg1: number): java.nio.IntBuffer;
			duplicate(): java.nio.IntBuffer;
			asReadOnlyBuffer(): java.nio.IntBuffer;
			compact(): java.nio.IntBuffer;
			order(): java.nio.ByteOrder;
			slice(): java.nio.IntBuffer;
		}
		export class ReadOnlyBufferException extends java.lang.UnsupportedOperationException {
			constructor();
			static class: java.lang.Class<java.nio.ReadOnlyBufferException>;
		}
		export class MappedByteBuffer extends java.nio.ByteBuffer {
			static class: java.lang.Class<java.nio.MappedByteBuffer>;
			load(): java.nio.MappedByteBuffer;
			force(): java.nio.MappedByteBuffer;
			isLoaded(): boolean;
		}
	}
	export module security {
		export class KeyPair extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.security.IPublicKey, arg2: java.security.IPrivateKey);
			static class: java.lang.Class<java.security.KeyPair>;
			getPrivate(): java.security.IPrivateKey;
			getPublic(): java.security.IPublicKey;
		}
		export class KeyFactory extends java.lang.Object {
			static class: java.lang.Class<java.security.KeyFactory>;
			getKeySpec<T extends java.security.spec.IKeySpec>(arg1: java.security.IKey, arg2: java.lang.Class<T>): T;
			translateKey(arg1: java.security.IKey): java.security.IKey;
			generatePrivate(arg1: java.security.spec.IKeySpec): java.security.IPrivateKey;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.KeyFactory;
			static getInstance(arg1: string, arg2: java.security.Provider): java.security.KeyFactory;
			static getInstance(arg1: java.lang.String): java.security.KeyFactory;
			static getInstance(arg1: string): java.security.KeyFactory;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.KeyFactory;
			static getInstance(arg1: string, arg2: string): java.security.KeyFactory;
			getProvider(): java.security.Provider;
			getAlgorithm(): string;
			generatePublic(arg1: java.security.spec.IKeySpec): java.security.IPublicKey;
		}
		export class SignatureException extends java.security.GeneralSecurityException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.SignatureException>;
		}
		export class Key implements java.io.ISerializable, java.security.IKey {
			constructor(implementation: java.security.IKey);
			static serialVersionUID: native.Long;
			getEncoded(): native.Array<native.Byte>;
			getFormat(): string;
			getAlgorithm(): string;
		}
		export class IdentityScope extends java.security.Identity {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.security.IdentityScope);
			constructor(arg1: string, arg2: java.security.IdentityScope);
			static class: java.lang.Class<java.security.IdentityScope>;
			static getSystemScope(): java.security.IdentityScope;
			identities(): java.util.IEnumeration<java.security.Identity>;
			removeIdentity(arg1: java.security.Identity): void;
			addIdentity(arg1: java.security.Identity): void;
			toString(): string;
			size(): number;
			getIdentity(arg1: java.lang.String): java.security.Identity;
			getIdentity(arg1: string): java.security.Identity;
			getIdentity(arg1: java.security.IPublicKey): java.security.Identity;
			getIdentity(arg1: java.security.IPrincipal): java.security.Identity;
			toString(arg1: boolean): string;
		}
		export class Principal implements java.security.IPrincipal {
			constructor(implementation: java.security.IPrincipal);
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getName(): string;
		}
		export class AccessControlException extends java.lang.SecurityException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.security.Permission);
			constructor(arg1: string, arg2: java.security.Permission);
			static class: java.lang.Class<java.security.AccessControlException>;
			getPermission(): java.security.Permission;
		}
		export class SignatureSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.security.SignatureSpi>;
			clone(): any;
		}
		export class KeyManagementException extends java.security.KeyException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.KeyManagementException>;
		}
		export class AlgorithmParameterGenerator extends java.lang.Object {
			static class: java.lang.Class<java.security.AlgorithmParameterGenerator>;
			generateParameters(): java.security.AlgorithmParameters;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.AlgorithmParameterGenerator;
			static getInstance(arg1: string, arg2: java.security.Provider): java.security.AlgorithmParameterGenerator;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.AlgorithmParameterGenerator;
			static getInstance(arg1: string, arg2: string): java.security.AlgorithmParameterGenerator;
			static getInstance(arg1: java.lang.String): java.security.AlgorithmParameterGenerator;
			static getInstance(arg1: string): java.security.AlgorithmParameterGenerator;
			init(arg1: number, arg2: java.security.SecureRandom): void;
			init(arg1: java.security.spec.IAlgorithmParameterSpec): void;
			init(arg1: java.security.spec.IAlgorithmParameterSpec, arg2: java.security.SecureRandom): void;
			init(arg1: number): void;
			getProvider(): java.security.Provider;
			getAlgorithm(): string;
		}
		export class AlgorithmParameterGeneratorSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.security.AlgorithmParameterGeneratorSpi>;
		}
		export interface IPrivilegedAction<T> {
			__java_security_IPrivilegedAction?: any;
			run(): T;
		}
		export module interfaces {
			export class RSAPublicKey implements java.security.IPublicKey, java.security.interfaces.IRSAKey, java.security.interfaces.IRSAPublicKey {
				constructor(implementation: java.security.interfaces.IRSAPublicKey);
				static serialVersionUID: native.Long;
				getPublicExponent(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getModulus(): java.math.BigInteger;
			}
			export class DSAPrivateKey implements java.security.interfaces.IDSAKey, java.security.IPrivateKey, java.security.interfaces.IDSAPrivateKey {
				constructor(implementation: java.security.interfaces.IDSAPrivateKey);
				static serialVersionUID: native.Long;
				getX(): java.math.BigInteger;
				getParams(): java.security.interfaces.IDSAParams;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export class RSAPrivateCrtKey implements java.security.interfaces.IRSAPrivateKey, java.security.interfaces.IRSAPrivateCrtKey {
				constructor(implementation: java.security.interfaces.IRSAPrivateCrtKey);
				static serialVersionUID: native.Long;
				getCrtCoefficient(): java.math.BigInteger;
				getPrimeExponentP(): java.math.BigInteger;
				getPrimeExponentQ(): java.math.BigInteger;
				getPrimeP(): java.math.BigInteger;
				getPrimeQ(): java.math.BigInteger;
				getPublicExponent(): java.math.BigInteger;
				getPrivateExponent(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getModulus(): java.math.BigInteger;
			}
			export interface IDSAKey {
				getParams(): java.security.interfaces.IDSAParams;
			}
			export class DSAKey implements java.security.interfaces.IDSAKey {
				constructor(implementation: java.security.interfaces.IDSAKey);
				getParams(): java.security.interfaces.IDSAParams;
			}
			export interface IRSAPublicKey extends java.security.IPublicKey, java.security.interfaces.IRSAKey {
				getPublicExponent(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getModulus(): java.math.BigInteger;
			}
			export module IRSAPublicKey {
				var serialVersionUID: native.Long;
			}
			export class RSAKey implements java.security.interfaces.IRSAKey {
				constructor(implementation: java.security.interfaces.IRSAKey);
				getModulus(): java.math.BigInteger;
			}
			export interface IECKey {
				getParams(): java.security.spec.ECParameterSpec;
			}
			export interface IRSAPrivateKey extends java.security.IPrivateKey, java.security.interfaces.IRSAKey {
				getPrivateExponent(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getModulus(): java.math.BigInteger;
			}
			export module IRSAPrivateKey {
				var serialVersionUID: native.Long;
			}
			export class RSAPrivateKey implements java.security.IPrivateKey, java.security.interfaces.IRSAKey, java.security.interfaces.IRSAPrivateKey {
				constructor(implementation: java.security.interfaces.IRSAPrivateKey);
				static serialVersionUID: native.Long;
				getPrivateExponent(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getModulus(): java.math.BigInteger;
			}
			export class DSAParams implements java.security.interfaces.IDSAParams {
				constructor(implementation: java.security.interfaces.IDSAParams);
				getG(): java.math.BigInteger;
				getP(): java.math.BigInteger;
				getQ(): java.math.BigInteger;
			}
			export class DSAKeyPairGenerator implements java.security.interfaces.IDSAKeyPairGenerator {
				constructor(implementation: java.security.interfaces.IDSAKeyPairGenerator);
				initialize(arg1: java.security.interfaces.IDSAParams, arg2: java.security.SecureRandom): void;
				initialize(arg1: number, arg2: boolean, arg3: java.security.SecureRandom): void;
			}
			export class RSAMultiPrimePrivateCrtKey implements java.security.interfaces.IRSAPrivateKey, java.security.interfaces.IRSAMultiPrimePrivateCrtKey {
				constructor(implementation: java.security.interfaces.IRSAMultiPrimePrivateCrtKey);
				static serialVersionUID: native.Long;
				getCrtCoefficient(): java.math.BigInteger;
				getPrimeExponentP(): java.math.BigInteger;
				getPrimeExponentQ(): java.math.BigInteger;
				getPrimeP(): java.math.BigInteger;
				getPrimeQ(): java.math.BigInteger;
				getPublicExponent(): java.math.BigInteger;
				getOtherPrimeInfo(): native.Array<java.security.spec.RSAOtherPrimeInfo>;
				getPrivateExponent(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getModulus(): java.math.BigInteger;
			}
			export interface IDSAPrivateKey extends java.security.interfaces.IDSAKey, java.security.IPrivateKey {
				getX(): java.math.BigInteger;
				getParams(): java.security.interfaces.IDSAParams;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export module IDSAPrivateKey {
				var serialVersionUID: native.Long;
			}
			export interface IDSAPublicKey extends java.security.interfaces.IDSAKey, java.security.IPublicKey {
				getY(): java.math.BigInteger;
				getParams(): java.security.interfaces.IDSAParams;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export module IDSAPublicKey {
				var serialVersionUID: native.Long;
			}
			export interface IRSAKey {
				getModulus(): java.math.BigInteger;
			}
			export interface IDSAKeyPairGenerator {
				initialize(arg1: java.security.interfaces.IDSAParams, arg2: java.security.SecureRandom): void;
				initialize(arg1: number, arg2: boolean, arg3: java.security.SecureRandom): void;
			}
			export class DSAPublicKey implements java.security.interfaces.IDSAKey, java.security.IPublicKey, java.security.interfaces.IDSAPublicKey {
				constructor(implementation: java.security.interfaces.IDSAPublicKey);
				static serialVersionUID: native.Long;
				getY(): java.math.BigInteger;
				getParams(): java.security.interfaces.IDSAParams;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
			}
			export class ECPublicKey implements java.security.IPublicKey, java.security.interfaces.IECKey, java.security.interfaces.IECPublicKey {
				constructor(implementation: java.security.interfaces.IECPublicKey);
				static serialVersionUID: native.Long;
				getW(): java.security.spec.ECPoint;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getParams(): java.security.spec.ECParameterSpec;
			}
			export interface IECPrivateKey extends java.security.IPrivateKey, java.security.interfaces.IECKey {
				getS(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getParams(): java.security.spec.ECParameterSpec;
			}
			export module IECPrivateKey {
				var serialVersionUID: native.Long;
			}
			export interface IECPublicKey extends java.security.IPublicKey, java.security.interfaces.IECKey {
				getW(): java.security.spec.ECPoint;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getParams(): java.security.spec.ECParameterSpec;
			}
			export module IECPublicKey {
				var serialVersionUID: native.Long;
			}
			export class ECKey implements java.security.interfaces.IECKey {
				constructor(implementation: java.security.interfaces.IECKey);
				getParams(): java.security.spec.ECParameterSpec;
			}
			export interface IDSAParams {
				getG(): java.math.BigInteger;
				getP(): java.math.BigInteger;
				getQ(): java.math.BigInteger;
			}
			export interface IRSAMultiPrimePrivateCrtKey extends java.security.interfaces.IRSAPrivateKey {
				getCrtCoefficient(): java.math.BigInteger;
				getPrimeExponentP(): java.math.BigInteger;
				getPrimeExponentQ(): java.math.BigInteger;
				getPrimeP(): java.math.BigInteger;
				getPrimeQ(): java.math.BigInteger;
				getPublicExponent(): java.math.BigInteger;
				getOtherPrimeInfo(): native.Array<java.security.spec.RSAOtherPrimeInfo>;
				getPrivateExponent(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getModulus(): java.math.BigInteger;
			}
			export module IRSAMultiPrimePrivateCrtKey {
				var serialVersionUID: native.Long;
			}
			export interface IRSAPrivateCrtKey extends java.security.interfaces.IRSAPrivateKey {
				getCrtCoefficient(): java.math.BigInteger;
				getPrimeExponentP(): java.math.BigInteger;
				getPrimeExponentQ(): java.math.BigInteger;
				getPrimeP(): java.math.BigInteger;
				getPrimeQ(): java.math.BigInteger;
				getPublicExponent(): java.math.BigInteger;
				getPrivateExponent(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getModulus(): java.math.BigInteger;
			}
			export module IRSAPrivateCrtKey {
				var serialVersionUID: native.Long;
			}
			export class ECPrivateKey implements java.security.IPrivateKey, java.security.interfaces.IECKey, java.security.interfaces.IECPrivateKey {
				constructor(implementation: java.security.interfaces.IECPrivateKey);
				static serialVersionUID: native.Long;
				getS(): java.math.BigInteger;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
				getAlgorithm(): string;
				getParams(): java.security.spec.ECParameterSpec;
			}
		}
		export class KeyPairGenerator extends java.security.KeyPairGeneratorSpi {
			static class: java.lang.Class<java.security.KeyPairGenerator>;
			genKeyPair(): java.security.KeyPair;
			generateKeyPair(): java.security.KeyPair;
			static getInstance(arg1: java.lang.String): java.security.KeyPairGenerator;
			static getInstance(arg1: string): java.security.KeyPairGenerator;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.KeyPairGenerator;
			static getInstance(arg1: string, arg2: string): java.security.KeyPairGenerator;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.KeyPairGenerator;
			static getInstance(arg1: string, arg2: java.security.Provider): java.security.KeyPairGenerator;
			initialize(arg1: number): void;
			initialize(arg1: java.security.spec.IAlgorithmParameterSpec, arg2: java.security.SecureRandom): void;
			initialize(arg1: number, arg2: java.security.SecureRandom): void;
			initialize(arg1: java.security.spec.IAlgorithmParameterSpec): void;
			getProvider(): java.security.Provider;
			getAlgorithm(): string;
		}
		export class DigestOutputStream extends java.io.FilterOutputStream {
			constructor(arg1: java.io.OutputStream, arg2: java.security.MessageDigest);
			static class: java.lang.Class<java.security.DigestOutputStream>;
			MessageDigest: java.security.MessageDigest;
			getMessageDigest(): java.security.MessageDigest;
			setMessageDigest(arg1: java.security.MessageDigest): void;
			toString(): string;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			on(arg1: boolean): void;
			write(arg1: native.Array<native.Byte>): void;
		}
		export class AuthProvider extends java.security.Provider {
			static class: java.lang.Class<java.security.AuthProvider>;
			login(arg1: javax.security.auth.Subject, arg2: javax.security.auth.callback.ICallbackHandler): void;
			logout(): void;
			setCallbackHandler(arg1: javax.security.auth.callback.ICallbackHandler): void;
		}
		export class Guard implements java.security.IGuard {
			constructor(implementation: java.security.IGuard);
			checkGuard(arg1: any): void;
		}
		export class GuardedObject extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: any, arg2: java.security.IGuard);
			static class: java.lang.Class<java.security.GuardedObject>;
			getObject(): any;
		}
		export class InvalidParameterException extends java.lang.IllegalArgumentException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.security.InvalidParameterException>;
		}
		export class BasicPermission extends java.security.Permission implements java.io.ISerializable {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.security.BasicPermission>;
			hashCode(): number;
			equals(arg1: any): boolean;
			getActions(): string;
			implies(arg1: java.security.Permission): boolean;
			newPermissionCollection(): java.security.PermissionCollection;
		}
		export class KeyPairGeneratorSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.security.KeyPairGeneratorSpi>;
			generateKeyPair(): java.security.KeyPair;
			initialize(arg1: number, arg2: java.security.SecureRandom): void;
			initialize(arg1: java.security.spec.IAlgorithmParameterSpec, arg2: java.security.SecureRandom): void;
		}
		export class KeyStoreSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.security.KeyStoreSpi>;
			engineAliases(): java.util.IEnumeration<string>;
			engineContainsAlias(arg1: java.lang.String): boolean;
			engineContainsAlias(arg1: string): boolean;
			engineDeleteEntry(arg1: java.lang.String): void;
			engineDeleteEntry(arg1: string): void;
			engineEntryInstanceOf(arg1: java.lang.String, arg2: java.lang.Class<any>): boolean;
			engineEntryInstanceOf(arg1: string, arg2: java.lang.Class<any>): boolean;
			engineGetCertificate(arg1: java.lang.String): java.security.cert.Certificate;
			engineGetCertificate(arg1: string): java.security.cert.Certificate;
			engineGetCertificateAlias(arg1: java.security.cert.Certificate): string;
			engineGetCertificateChain(arg1: java.lang.String): native.Array<java.security.cert.Certificate>;
			engineGetCertificateChain(arg1: string): native.Array<java.security.cert.Certificate>;
			engineGetCreationDate(arg1: java.lang.String): java.util.Date;
			engineGetCreationDate(arg1: string): java.util.Date;
			engineGetEntry(arg1: java.lang.String, arg2: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.IEntry;
			engineGetEntry(arg1: string, arg2: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.IEntry;
			engineGetKey(arg1: java.lang.String, arg2: native.Array<string>): java.security.IKey;
			engineGetKey(arg1: string, arg2: native.Array<string>): java.security.IKey;
			engineIsCertificateEntry(arg1: java.lang.String): boolean;
			engineIsCertificateEntry(arg1: string): boolean;
			engineIsKeyEntry(arg1: java.lang.String): boolean;
			engineIsKeyEntry(arg1: string): boolean;
			engineLoad(arg1: java.security.KeyStore.ILoadStoreParameter): void;
			engineLoad(arg1: java.io.InputStream, arg2: native.Array<string>): void;
			engineSetCertificateEntry(arg1: java.lang.String, arg2: java.security.cert.Certificate): void;
			engineSetCertificateEntry(arg1: string, arg2: java.security.cert.Certificate): void;
			engineSetEntry(arg1: java.lang.String, arg2: java.security.KeyStore.IEntry, arg3: java.security.KeyStore.IProtectionParameter): void;
			engineSetEntry(arg1: string, arg2: java.security.KeyStore.IEntry, arg3: java.security.KeyStore.IProtectionParameter): void;
			engineSetKeyEntry(arg1: java.lang.String, arg2: java.security.IKey, arg3: native.Array<string>, arg4: native.Array<java.security.cert.Certificate>): void;
			engineSetKeyEntry(arg1: string, arg2: java.security.IKey, arg3: native.Array<string>, arg4: native.Array<java.security.cert.Certificate>): void;
			engineSetKeyEntry(arg1: java.lang.String, arg2: native.Array<native.Byte>, arg3: native.Array<java.security.cert.Certificate>): void;
			engineSetKeyEntry(arg1: string, arg2: native.Array<native.Byte>, arg3: native.Array<java.security.cert.Certificate>): void;
			engineSize(): number;
			engineStore(arg1: java.security.KeyStore.ILoadStoreParameter): void;
			engineStore(arg1: java.io.OutputStream, arg2: native.Array<string>): void;
		}
		export interface IKey extends java.io.ISerializable {
			getEncoded(): native.Array<native.Byte>;
			getFormat(): string;
			getAlgorithm(): string;
		}
		export module IKey {
			var serialVersionUID: native.Long;
		}
		export class DigestInputStream extends java.io.FilterInputStream {
			constructor(arg1: java.io.InputStream, arg2: java.security.MessageDigest);
			static class: java.lang.Class<java.security.DigestInputStream>;
			MessageDigest: java.security.MessageDigest;
			getMessageDigest(): java.security.MessageDigest;
			setMessageDigest(arg1: java.security.MessageDigest): void;
			toString(): string;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			on(arg1: boolean): void;
			read(arg1: native.Array<native.Byte>): number;
		}
		export class CodeSource extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.net.URL, arg2: native.Array<java.security.cert.Certificate>);
			static class: java.lang.Class<java.security.CodeSource>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getCertificates(): native.Array<java.security.cert.Certificate>;
			getLocation(): java.net.URL;
			implies(arg1: java.security.CodeSource): boolean;
			getCodeSigners(): native.Array<java.security.CodeSigner>;
		}
		export class Permissions extends java.security.PermissionCollection implements java.io.ISerializable {
			constructor();
			static class: java.lang.Class<java.security.Permissions>;
			add(arg1: java.security.Permission): void;
			elements(): java.util.IEnumeration<java.security.Permission>;
			implies(arg1: java.security.Permission): boolean;
		}
		export class AccessController extends java.lang.Object {
			static class: java.lang.Class<java.security.AccessController>;
			static checkPermission(arg1: java.security.Permission): void;
			static doPrivileged<T>(arg1: java.security.IPrivilegedAction<T>, arg2: java.security.AccessControlContext): T;
			static doPrivileged<T>(arg1: java.security.IPrivilegedExceptionAction<T>, arg2: java.security.AccessControlContext): T;
			static doPrivileged<T>(arg1: java.security.IPrivilegedAction<T>): T;
			static doPrivileged<T>(arg1: java.security.IPrivilegedExceptionAction<T>): T;
			static getContext(): java.security.AccessControlContext;
			static doPrivilegedWithCombiner<T>(arg1: java.security.IPrivilegedExceptionAction<T>): T;
			static doPrivilegedWithCombiner<T>(arg1: java.security.IPrivilegedAction<T>): T;
		}
		export class InvalidAlgorithmParameterException extends java.security.GeneralSecurityException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.InvalidAlgorithmParameterException>;
		}
		export class KeyFactorySpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.security.KeyFactorySpi>;
		}
		export interface IPublicKey extends java.security.IKey {
			getEncoded(): native.Array<native.Byte>;
			getFormat(): string;
			getAlgorithm(): string;
		}
		export module IPublicKey {
			var serialVersionUID: native.Long;
		}
		export class Security extends java.lang.Object {
			static class: java.lang.Class<java.security.Security>;
			static getProperty(arg1: java.lang.String): string;
			static getProperty(arg1: string): string;
			static setProperty(arg1: java.lang.String, arg2: java.lang.String): void;
			static setProperty(arg1: string, arg2: string): void;
			static getProvider(arg1: java.lang.String): java.security.Provider;
			static getProvider(arg1: string): java.security.Provider;
			static addProvider(arg1: java.security.Provider): number;
			static getAlgorithmProperty(arg1: java.lang.String, arg2: java.lang.String): string;
			static getAlgorithmProperty(arg1: string, arg2: string): string;
			static getAlgorithms(arg1: java.lang.String): java.util.ISet<string>;
			static getAlgorithms(arg1: string): java.util.ISet<string>;
			static getProviders(arg1: java.util.IMap<string, string>): native.Array<java.security.Provider>;
			static getProviders(): native.Array<java.security.Provider>;
			static getProviders(arg1: java.lang.String): native.Array<java.security.Provider>;
			static getProviders(arg1: string): native.Array<java.security.Provider>;
			static insertProviderAt(arg1: java.security.Provider, arg2: number): number;
			static removeProvider(arg1: java.lang.String): void;
			static removeProvider(arg1: string): void;
		}
		export class AlgorithmParameters extends java.lang.Object {
			static class: java.lang.Class<java.security.AlgorithmParameters>;
			toString(): string;
			static getInstance(arg1: java.lang.String): java.security.AlgorithmParameters;
			static getInstance(arg1: string): java.security.AlgorithmParameters;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.AlgorithmParameters;
			static getInstance(arg1: string, arg2: java.security.Provider): java.security.AlgorithmParameters;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.AlgorithmParameters;
			static getInstance(arg1: string, arg2: string): java.security.AlgorithmParameters;
			init(arg1: native.Array<native.Byte>): void;
			init(arg1: java.security.spec.IAlgorithmParameterSpec): void;
			init(arg1: native.Array<native.Byte>, arg2: java.lang.String): void;
			init(arg1: native.Array<native.Byte>, arg2: string): void;
			getEncoded(): native.Array<native.Byte>;
			getEncoded(arg1: java.lang.String): native.Array<native.Byte>;
			getEncoded(arg1: string): native.Array<native.Byte>;
			getProvider(): java.security.Provider;
			getAlgorithm(): string;
			getParameterSpec<T extends java.security.spec.IAlgorithmParameterSpec>(arg1: java.lang.Class<T>): T;
		}
		export class PrivilegedActionException extends java.lang.Exception {
			constructor(arg1: java.lang.Exception);
			static class: java.lang.Class<java.security.PrivilegedActionException>;
			toString(): string;
			getCause(): java.lang.Throwable;
			getException(): java.lang.Exception;
		}
		export class PrivilegedExceptionAction<T> implements java.security.IPrivilegedExceptionAction<T> {
			constructor(implementation: java.security.IPrivilegedExceptionAction<T>);
			run(): T;
		}
		export interface IGuard {
			checkGuard(arg1: any): void;
		}
		export class GeneralSecurityException extends java.lang.Exception {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.GeneralSecurityException>;
		}
		export class Policy extends java.lang.Object {
			constructor();
			static UNSUPPORTED_EMPTY_COLLECTION: java.security.PermissionCollection;
			static class: java.lang.Class<java.security.Policy>;
			static getInstance(arg1: java.lang.String, arg2: java.security.Policy.IParameters, arg3: java.security.Provider): java.security.Policy;
			static getInstance(arg1: string, arg2: java.security.Policy.IParameters, arg3: java.security.Provider): java.security.Policy;
			static getInstance(arg1: java.lang.String, arg2: java.security.Policy.IParameters): java.security.Policy;
			static getInstance(arg1: string, arg2: java.security.Policy.IParameters): java.security.Policy;
			static getInstance(arg1: java.lang.String, arg2: java.security.Policy.IParameters, arg3: java.lang.String): java.security.Policy;
			static getInstance(arg1: string, arg2: java.security.Policy.IParameters, arg3: string): java.security.Policy;
			getPermissions(arg1: java.security.CodeSource): java.security.PermissionCollection;
			getPermissions(arg1: java.security.ProtectionDomain): java.security.PermissionCollection;
			implies(arg1: java.security.ProtectionDomain, arg2: java.security.Permission): boolean;
			getType(): string;
			refresh(): void;
			getParameters(): java.security.Policy.IParameters;
			static getPolicy(): java.security.Policy;
			getProvider(): java.security.Provider;
			static setPolicy(arg1: java.security.Policy): void;
		}
		export module Policy {
			export class Parameters implements java.security.Policy.IParameters {
				constructor(implementation: java.security.Policy.IParameters);
			}
			export interface IParameters {
			}
		}
		export class UnrecoverableEntryException extends java.security.GeneralSecurityException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.security.UnrecoverableEntryException>;
		}
		export class Certificate implements java.security.ICertificate {
			constructor(implementation: java.security.ICertificate);
			getGuarantor(): java.security.IPrincipal;
			getPrincipal(): java.security.IPrincipal;
			toString(arg1: boolean): string;
			decode(arg1: java.io.InputStream): void;
			encode(arg1: java.io.OutputStream): void;
			getPublicKey(): java.security.IPublicKey;
			getFormat(): string;
		}
		export class Signer extends java.security.Identity {
			constructor(arg1: java.lang.String, arg2: java.security.IdentityScope);
			constructor(arg1: string, arg2: java.security.IdentityScope);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.security.Signer>;
			getPrivateKey(): java.security.IPrivateKey;
			setKeyPair(arg1: java.security.KeyPair): void;
			toString(): string;
			toString(arg1: boolean): string;
		}
		export class Provider extends java.util.Properties {
			static class: java.lang.Class<java.security.Provider>;
			toString(): string;
			getName(): string;
			get(arg1: any): any;
			entrySet(): java.util.ISet<java.util.Map.IEntry<any, any>>;
			put(arg1: any, arg2: any): any;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<any>;
			getProperty(arg1: java.lang.String): string;
			getProperty(arg1: string): string;
			load(arg1: java.io.InputStream): void;
			remove(arg1: any): any;
			elements(): java.util.IEnumeration<any>;
			clear(): void;
			keySet(): java.util.ISet<any>;
			keys(): java.util.IEnumeration<any>;
			getVersion(): any;
			getInfo(): string;
			getService(arg1: java.lang.String, arg2: java.lang.String): java.security.Provider.Service;
			getService(arg1: string, arg2: string): java.security.Provider.Service;
			getServices(): java.util.ISet<java.security.Provider.Service>;
			getProperty(arg1: java.lang.String, arg2: java.lang.String): string;
			getProperty(arg1: string, arg2: string): string;
			load(arg1: java.io.Reader): void;
		}
		export module Provider {
			export class Service extends java.lang.Object {
				constructor(arg1: java.security.Provider, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.util.IList<string>, arg6: java.util.IMap<string, string>);
				constructor(arg1: java.security.Provider, arg2: string, arg3: string, arg4: string, arg5: java.util.IList<string>, arg6: java.util.IMap<string, string>);
				static class: java.lang.Class<java.security.Provider.Service>;
				toString(): string;
				newInstance(arg1: any): any;
				getType(): string;
				getClassName(): string;
				getProvider(): java.security.Provider;
				getAttribute(arg1: java.lang.String): string;
				getAttribute(arg1: string): string;
				getAlgorithm(): string;
				supportsParameter(arg1: any): boolean;
			}
		}
		export class PrivilegedAction<T> implements java.security.IPrivilegedAction<T> {
			constructor(implementation: java.security.IPrivilegedAction<T>);
			run(): T;
		}
		export class PolicySpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.security.PolicySpi>;
		}
		export class UnresolvedPermission extends java.security.Permission implements java.io.ISerializable {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: native.Array<java.security.cert.Certificate>);
			constructor(arg1: string, arg2: string, arg3: string, arg4: native.Array<java.security.cert.Certificate>);
			static class: java.lang.Class<java.security.UnresolvedPermission>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getActions(): string;
			implies(arg1: java.security.Permission): boolean;
			newPermissionCollection(): java.security.PermissionCollection;
			getUnresolvedActions(): string;
			getUnresolvedCerts(): native.Array<java.security.cert.Certificate>;
			getUnresolvedName(): string;
			getUnresolvedType(): string;
		}
		export module spec {
			export class KeySpec implements java.security.spec.IKeySpec {
				constructor(implementation: java.security.spec.IKeySpec);
			}
			export interface IECField {
				getFieldSize(): number;
			}
			export class PSSParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.security.spec.IAlgorithmParameterSpec, arg4: number, arg5: number);
				constructor(arg1: string, arg2: string, arg3: java.security.spec.IAlgorithmParameterSpec, arg4: number, arg5: number);
				constructor(arg1: number);
				static DEFAULT: java.security.spec.PSSParameterSpec;
				static class: java.lang.Class<java.security.spec.PSSParameterSpec>;
				getDigestAlgorithm(): string;
				getMGFAlgorithm(): string;
				getMGFParameters(): java.security.spec.IAlgorithmParameterSpec;
				getSaltLength(): number;
				getTrailerField(): number;
			}
			export interface IAlgorithmParameterSpec {
			}
			export class ECField implements java.security.spec.IECField {
				constructor(implementation: java.security.spec.IECField);
				getFieldSize(): number;
			}
			export class RSAPrivateKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.RSAPrivateKeySpec>;
				getPrivateExponent(): java.math.BigInteger;
				getModulus(): java.math.BigInteger;
			}
			export class RSAPrivateCrtKeySpec extends java.security.spec.RSAPrivateKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger, arg4: java.math.BigInteger, arg5: java.math.BigInteger, arg6: java.math.BigInteger, arg7: java.math.BigInteger, arg8: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.RSAPrivateCrtKeySpec>;
				getCrtCoefficient(): java.math.BigInteger;
				getPrimeExponentP(): java.math.BigInteger;
				getPrimeExponentQ(): java.math.BigInteger;
				getPrimeP(): java.math.BigInteger;
				getPrimeQ(): java.math.BigInteger;
				getPublicExponent(): java.math.BigInteger;
			}
			export class ECFieldFp extends java.lang.Object implements java.security.spec.IECField {
				constructor(arg1: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.ECFieldFp>;
				getFieldSize(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				getP(): java.math.BigInteger;
			}
			export class ECFieldF2m extends java.lang.Object implements java.security.spec.IECField {
				constructor(arg1: number);
				constructor(arg1: number, arg2: native.Array<number>);
				constructor(arg1: number, arg2: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.ECFieldF2m>;
				getFieldSize(): number;
				getM(): number;
				getMidTermsOfReductionPolynomial(): native.Array<number>;
				getReductionPolynomial(): java.math.BigInteger;
				hashCode(): number;
				equals(arg1: any): boolean;
			}
			export class EllipticCurve extends java.lang.Object {
				constructor(arg1: java.security.spec.IECField, arg2: java.math.BigInteger, arg3: java.math.BigInteger, arg4: native.Array<native.Byte>);
				constructor(arg1: java.security.spec.IECField, arg2: java.math.BigInteger, arg3: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.EllipticCurve>;
				getA(): java.math.BigInteger;
				getB(): java.math.BigInteger;
				getSeed(): native.Array<native.Byte>;
				hashCode(): number;
				equals(arg1: any): boolean;
				getField(): java.security.spec.IECField;
			}
			export class ECPrivateKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.security.spec.ECParameterSpec);
				static class: java.lang.Class<java.security.spec.ECPrivateKeySpec>;
				getS(): java.math.BigInteger;
				getParams(): java.security.spec.ECParameterSpec;
			}
			export class ECPublicKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: java.security.spec.ECPoint, arg2: java.security.spec.ECParameterSpec);
				static class: java.lang.Class<java.security.spec.ECPublicKeySpec>;
				getW(): java.security.spec.ECPoint;
				getParams(): java.security.spec.ECParameterSpec;
			}
			export class DSAPublicKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger, arg4: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.DSAPublicKeySpec>;
				getY(): java.math.BigInteger;
				getG(): java.math.BigInteger;
				getP(): java.math.BigInteger;
				getQ(): java.math.BigInteger;
			}
			export interface IKeySpec {
			}
			export class EncodedKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: native.Array<native.Byte>);
				static class: java.lang.Class<java.security.spec.EncodedKeySpec>;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
			}
			export class ECPoint extends java.lang.Object {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger);
				static POINT_INFINITY: java.security.spec.ECPoint;
				static class: java.lang.Class<java.security.spec.ECPoint>;
				getAffineX(): java.math.BigInteger;
				getAffineY(): java.math.BigInteger;
				hashCode(): number;
				equals(arg1: any): boolean;
			}
			export class MGF1ParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static SHA1: java.security.spec.MGF1ParameterSpec;
				static SHA256: java.security.spec.MGF1ParameterSpec;
				static SHA384: java.security.spec.MGF1ParameterSpec;
				static SHA512: java.security.spec.MGF1ParameterSpec;
				static class: java.lang.Class<java.security.spec.MGF1ParameterSpec>;
				getDigestAlgorithm(): string;
			}
			export class ECGenParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.security.spec.ECGenParameterSpec>;
				getName(): string;
			}
			export class DSAParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec, java.security.interfaces.IDSAParams {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.DSAParameterSpec>;
				getG(): java.math.BigInteger;
				getP(): java.math.BigInteger;
				getQ(): java.math.BigInteger;
			}
			export class DSAPrivateKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger, arg4: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.DSAPrivateKeySpec>;
				getX(): java.math.BigInteger;
				getG(): java.math.BigInteger;
				getP(): java.math.BigInteger;
				getQ(): java.math.BigInteger;
			}
			export class RSAOtherPrimeInfo extends java.lang.Object {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.RSAOtherPrimeInfo>;
				getPrime(): java.math.BigInteger;
				getCrtCoefficient(): java.math.BigInteger;
				getExponent(): java.math.BigInteger;
			}
			export class RSAMultiPrimePrivateCrtKeySpec extends java.security.spec.RSAPrivateKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger, arg3: java.math.BigInteger, arg4: java.math.BigInteger, arg5: java.math.BigInteger, arg6: java.math.BigInteger, arg7: java.math.BigInteger, arg8: java.math.BigInteger, arg9: native.Array<java.security.spec.RSAOtherPrimeInfo>);
				static class: java.lang.Class<java.security.spec.RSAMultiPrimePrivateCrtKeySpec>;
				getCrtCoefficient(): java.math.BigInteger;
				getPrimeExponentP(): java.math.BigInteger;
				getPrimeExponentQ(): java.math.BigInteger;
				getPrimeP(): java.math.BigInteger;
				getPrimeQ(): java.math.BigInteger;
				getPublicExponent(): java.math.BigInteger;
				getOtherPrimeInfo(): native.Array<java.security.spec.RSAOtherPrimeInfo>;
			}
			export class AlgorithmParameterSpec implements java.security.spec.IAlgorithmParameterSpec {
				constructor(implementation: java.security.spec.IAlgorithmParameterSpec);
			}
			export class InvalidKeySpecException extends java.security.GeneralSecurityException {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<java.security.spec.InvalidKeySpecException>;
			}
			export class RSAKeyGenParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: number, arg2: java.math.BigInteger);
				static F0: java.math.BigInteger;
				static F4: java.math.BigInteger;
				static class: java.lang.Class<java.security.spec.RSAKeyGenParameterSpec>;
				getKeysize(): number;
				getPublicExponent(): java.math.BigInteger;
			}
			export class RSAPublicKeySpec extends java.lang.Object implements java.security.spec.IKeySpec {
				constructor(arg1: java.math.BigInteger, arg2: java.math.BigInteger);
				static class: java.lang.Class<java.security.spec.RSAPublicKeySpec>;
				getPublicExponent(): java.math.BigInteger;
				getModulus(): java.math.BigInteger;
			}
			export class InvalidParameterSpecException extends java.security.GeneralSecurityException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.security.spec.InvalidParameterSpecException>;
			}
			export class X509EncodedKeySpec extends java.security.spec.EncodedKeySpec {
				constructor(arg1: native.Array<native.Byte>);
				static class: java.lang.Class<java.security.spec.X509EncodedKeySpec>;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
			}
			export class ECParameterSpec extends java.lang.Object implements java.security.spec.IAlgorithmParameterSpec {
				constructor(arg1: java.security.spec.EllipticCurve, arg2: java.security.spec.ECPoint, arg3: java.math.BigInteger, arg4: number);
				static class: java.lang.Class<java.security.spec.ECParameterSpec>;
				getCofactor(): number;
				getCurve(): java.security.spec.EllipticCurve;
				getGenerator(): java.security.spec.ECPoint;
				getOrder(): java.math.BigInteger;
			}
			export class PKCS8EncodedKeySpec extends java.security.spec.EncodedKeySpec {
				constructor(arg1: native.Array<native.Byte>);
				static class: java.lang.Class<java.security.spec.PKCS8EncodedKeySpec>;
				getEncoded(): native.Array<native.Byte>;
				getFormat(): string;
			}
		}
		export class InvalidKeyException extends java.security.KeyException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.InvalidKeyException>;
		}
		export class NoSuchAlgorithmException extends java.security.GeneralSecurityException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.NoSuchAlgorithmException>;
		}
		export class KeyStoreException extends java.security.GeneralSecurityException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.KeyStoreException>;
		}
		export interface IPrincipal {
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getName(): string;
		}
		export class SecureRandom extends java.util.Random {
			constructor(arg1: native.Array<native.Byte>);
			constructor();
			static class: java.lang.Class<java.security.SecureRandom>;
			generateSeed(arg1: number): native.Array<native.Byte>;
			static getSeed(arg1: number): native.Array<native.Byte>;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.SecureRandom;
			static getInstance(arg1: string, arg2: java.security.Provider): java.security.SecureRandom;
			static getInstance(arg1: java.lang.String): java.security.SecureRandom;
			static getInstance(arg1: string): java.security.SecureRandom;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.SecureRandom;
			static getInstance(arg1: string, arg2: string): java.security.SecureRandom;
			getProvider(): java.security.Provider;
			getAlgorithm(): string;
			nextBytes(arg1: native.Array<native.Byte>): void;
			setSeed(arg1: native.Array<native.Byte>): void;
			setSeed(arg1: native.Long): void;
		}
		export class PrivateKey implements java.security.IKey, java.security.IPrivateKey {
			constructor(implementation: java.security.IPrivateKey);
			static serialVersionUID: native.Long;
			getEncoded(): native.Array<native.Byte>;
			getFormat(): string;
			getAlgorithm(): string;
		}
		export class Signature extends java.security.SignatureSpi {
			static class: java.lang.Class<java.security.Signature>;
			clone(): any;
			toString(): string;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.Signature;
			static getInstance(arg1: string, arg2: java.security.Provider): java.security.Signature;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.Signature;
			static getInstance(arg1: string, arg2: string): java.security.Signature;
			static getInstance(arg1: java.lang.String): java.security.Signature;
			static getInstance(arg1: string): java.security.Signature;
			getParameters(): java.security.AlgorithmParameters;
			getProvider(): java.security.Provider;
			verify(arg1: native.Array<native.Byte>): boolean;
			verify(arg1: native.Array<native.Byte>, arg2: number, arg3: number): boolean;
			update(arg1: java.nio.ByteBuffer): void;
			update(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			update(arg1: native.Array<native.Byte>): void;
			update(arg1: native.Byte): void;
			getAlgorithm(): string;
			getParameter(arg1: java.lang.String): any;
			getParameter(arg1: string): any;
			setParameter(arg1: java.lang.String, arg2: any): void;
			setParameter(arg1: string, arg2: any): void;
			setParameter(arg1: java.security.spec.IAlgorithmParameterSpec): void;
			sign(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			sign(): native.Array<native.Byte>;
			initSign(arg1: java.security.IPrivateKey, arg2: java.security.SecureRandom): void;
			initSign(arg1: java.security.IPrivateKey): void;
			initVerify(arg1: java.security.cert.Certificate): void;
			initVerify(arg1: java.security.IPublicKey): void;
		}
		export class SecureRandomSpi extends java.lang.Object implements java.io.ISerializable {
			constructor();
			static class: java.lang.Class<java.security.SecureRandomSpi>;
		}
		export module cert {
			export class CertificateExpiredException extends java.security.cert.CertificateException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.security.cert.CertificateExpiredException>;
			}
			export class CertPathValidatorException extends java.security.GeneralSecurityException {
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable, arg3: java.security.cert.CertPath, arg4: number);
				constructor(arg1: string, arg2: java.lang.Throwable, arg3: java.security.cert.CertPath, arg4: number);
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				static class: java.lang.Class<java.security.cert.CertPathValidatorException>;
				getCertPath(): java.security.cert.CertPath;
				getIndex(): number;
			}
			export class CertPathBuilderSpi extends java.lang.Object {
				constructor();
				static class: java.lang.Class<java.security.cert.CertPathBuilderSpi>;
				engineBuild(arg1: java.security.cert.ICertPathParameters): java.security.cert.ICertPathBuilderResult;
			}
			export class PKIXBuilderParameters extends java.security.cert.PKIXParameters {
				constructor(arg1: java.util.ISet<java.security.cert.TrustAnchor>, arg2: java.security.cert.ICertSelector);
				constructor(arg1: java.security.KeyStore, arg2: java.security.cert.ICertSelector);
				static class: java.lang.Class<java.security.cert.PKIXBuilderParameters>;
				MaxPathLength: number;
				getMaxPathLength(): number;
				setMaxPathLength(arg1: number): void;
				toString(): string;
			}
			export class CRLSelector implements java.lang.ICloneable, java.security.cert.ICRLSelector {
				constructor(implementation: java.security.cert.ICRLSelector);
				clone(): any;
				match(arg1: java.security.cert.CRL): boolean;
			}
			export class CertificateException extends java.security.GeneralSecurityException {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<java.security.cert.CertificateException>;
			}
			export interface ICertStoreParameters extends java.lang.ICloneable {
				clone(): any;
			}
			export class CertPathValidatorResult implements java.lang.ICloneable, java.security.cert.ICertPathValidatorResult {
				constructor(implementation: java.security.cert.ICertPathValidatorResult);
				clone(): any;
			}
			export class CertStoreParameters implements java.lang.ICloneable, java.security.cert.ICertStoreParameters {
				constructor(implementation: java.security.cert.ICertStoreParameters);
				clone(): any;
			}
			export class CertPathBuilderException extends java.security.GeneralSecurityException {
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<java.security.cert.CertPathBuilderException>;
			}
			export interface ICRLSelector extends java.lang.ICloneable {
				clone(): any;
				match(arg1: java.security.cert.CRL): boolean;
			}
			export class X509CRLEntry extends java.lang.Object implements java.security.cert.IX509Extension {
				constructor();
				static class: java.lang.Class<java.security.cert.X509CRLEntry>;
				getCertificateIssuer(): javax.security.auth.x500.X500Principal;
				getRevocationDate(): java.util.Date;
				hasExtensions(): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getEncoded(): native.Array<native.Byte>;
				getSerialNumber(): java.math.BigInteger;
				getNonCriticalExtensionOIDs(): java.util.ISet<string>;
				hasUnsupportedCriticalExtension(): boolean;
				getExtensionValue(arg1: string): native.Array<native.Byte>;
				getCriticalExtensionOIDs(): java.util.ISet<string>;
			}
			export class PKIXCertPathValidatorResult extends java.lang.Object implements java.security.cert.ICertPathValidatorResult {
				constructor(arg1: java.security.cert.TrustAnchor, arg2: java.security.cert.IPolicyNode, arg3: java.security.IPublicKey);
				static class: java.lang.Class<java.security.cert.PKIXCertPathValidatorResult>;
				getPolicyTree(): java.security.cert.IPolicyNode;
				getTrustAnchor(): java.security.cert.TrustAnchor;
				clone(): any;
				toString(): string;
				getPublicKey(): java.security.IPublicKey;
			}
			export class CRLException extends java.security.GeneralSecurityException {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<java.security.cert.CRLException>;
			}
			export interface IPolicyNode {
				getExpectedPolicies(): java.util.ISet<string>;
				getPolicyQualifiers(): java.util.ISet<any>;
				getValidPolicy(): string;
				isCritical(): boolean;
				getParent(): java.security.cert.IPolicyNode;
				getChildren(): java.util.IIterator<any>;
				getDepth(): number;
			}
			export class CertPath extends java.lang.Object implements java.io.ISerializable {
				static class: java.lang.Class<java.security.cert.CertPath>;
				getEncodings(): java.util.IIterator<string>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getCertificates(): java.util.IList<any>;
				getType(): string;
				getEncoded(arg1: java.lang.String): native.Array<native.Byte>;
				getEncoded(arg1: string): native.Array<native.Byte>;
				getEncoded(): native.Array<native.Byte>;
			}
			export module CertPath {
				export class CertPathRep extends java.lang.Object implements java.io.ISerializable {
					static class: java.lang.Class<java.security.cert.CertPath.CertPathRep>;
				}
			}
			export class CertificateNotYetValidException extends java.security.cert.CertificateException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.security.cert.CertificateNotYetValidException>;
			}
			export class X509Certificate extends java.security.cert.Certificate implements java.security.cert.IX509Extension {
				static class: java.lang.Class<java.security.cert.X509Certificate>;
				checkValidity(arg1: java.util.Date): void;
				checkValidity(): void;
				getExtendedKeyUsage(): java.util.IList<string>;
				getIssuerX500Principal(): javax.security.auth.x500.X500Principal;
				getSubjectAlternativeNames(): java.util.ICollection<java.util.IList<any>>;
				getSigAlgName(): string;
				getSigAlgOID(): string;
				getSigAlgParams(): native.Array<native.Byte>;
				getIssuerAlternativeNames(): java.util.ICollection<java.util.IList<any>>;
				getIssuerUniqueID(): native.Array<boolean>;
				getNotAfter(): java.util.Date;
				getNotBefore(): java.util.Date;
				getSubjectUniqueID(): native.Array<boolean>;
				getTBSCertificate(): native.Array<native.Byte>;
				getSignature(): native.Array<native.Byte>;
				getBasicConstraints(): number;
				getIssuerDN(): java.security.IPrincipal;
				getSubjectDN(): java.security.IPrincipal;
				getSubjectX500Principal(): javax.security.auth.x500.X500Principal;
				getVersion(): number;
				getSerialNumber(): java.math.BigInteger;
				getKeyUsage(): native.Array<boolean>;
				getNonCriticalExtensionOIDs(): java.util.ISet<string>;
				hasUnsupportedCriticalExtension(): boolean;
				getExtensionValue(arg1: string): native.Array<native.Byte>;
				getCriticalExtensionOIDs(): java.util.ISet<string>;
			}
			export interface IX509Extension {
				getNonCriticalExtensionOIDs(): java.util.ISet<string>;
				hasUnsupportedCriticalExtension(): boolean;
				getExtensionValue(arg1: string): native.Array<native.Byte>;
				getCriticalExtensionOIDs(): java.util.ISet<string>;
			}
			export class PKIXCertPathChecker extends java.lang.Object implements java.lang.ICloneable {
				static class: java.lang.Class<java.security.cert.PKIXCertPathChecker>;
				getSupportedExtensions(): java.util.ISet<string>;
				isForwardCheckingSupported(): boolean;
				clone(): any;
				init(arg1: boolean): void;
				check(arg1: java.security.cert.Certificate, arg2: java.util.ICollection<string>): void;
			}
			export interface ICertPathValidatorResult extends java.lang.ICloneable {
				clone(): any;
			}
			export interface ICertPathParameters extends java.lang.ICloneable {
				clone(): any;
			}
			export class CertPathParameters implements java.lang.ICloneable, java.security.cert.ICertPathParameters {
				constructor(implementation: java.security.cert.ICertPathParameters);
				clone(): any;
			}
			export class CertStoreException extends java.security.GeneralSecurityException {
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<java.security.cert.CertStoreException>;
			}
			export class CertPathValidator extends java.lang.Object {
				static class: java.lang.Class<java.security.cert.CertPathValidator>;
				static getInstance(arg1: java.lang.String): java.security.cert.CertPathValidator;
				static getInstance(arg1: string): java.security.cert.CertPathValidator;
				static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.cert.CertPathValidator;
				static getInstance(arg1: string, arg2: java.security.Provider): java.security.cert.CertPathValidator;
				static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.cert.CertPathValidator;
				static getInstance(arg1: string, arg2: string): java.security.cert.CertPathValidator;
				getProvider(): java.security.Provider;
				validate(arg1: java.security.cert.CertPath, arg2: java.security.cert.ICertPathParameters): java.security.cert.ICertPathValidatorResult;
				getAlgorithm(): string;
				static getDefaultType(): string;
			}
			export class CertPathBuilderResult implements java.lang.ICloneable, java.security.cert.ICertPathBuilderResult {
				constructor(implementation: java.security.cert.ICertPathBuilderResult);
				getCertPath(): java.security.cert.CertPath;
				clone(): any;
			}
			export class CertSelector implements java.lang.ICloneable, java.security.cert.ICertSelector {
				constructor(implementation: java.security.cert.ICertSelector);
				clone(): any;
				match(arg1: java.security.cert.Certificate): boolean;
			}
			export class PKIXCertPathBuilderResult extends java.security.cert.PKIXCertPathValidatorResult implements java.security.cert.ICertPathBuilderResult {
				constructor(arg1: java.security.cert.CertPath, arg2: java.security.cert.TrustAnchor, arg3: java.security.cert.IPolicyNode, arg4: java.security.IPublicKey);
				static class: java.lang.Class<java.security.cert.PKIXCertPathBuilderResult>;
				getCertPath(): java.security.cert.CertPath;
				toString(): string;
				clone(): any;
			}
			export class CertificateParsingException extends java.security.cert.CertificateException {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<java.security.cert.CertificateParsingException>;
			}
			export class Certificate extends java.lang.Object implements java.io.ISerializable {
				static class: java.lang.Class<java.security.cert.Certificate>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getType(): string;
				getEncoded(): native.Array<native.Byte>;
				getPublicKey(): java.security.IPublicKey;
				verify(arg1: java.security.IPublicKey, arg2: java.lang.String): void;
				verify(arg1: java.security.IPublicKey, arg2: string): void;
				verify(arg1: java.security.IPublicKey): void;
			}
			export module Certificate {
				export class CertificateRep extends java.lang.Object implements java.io.ISerializable {
					static class: java.lang.Class<java.security.cert.Certificate.CertificateRep>;
				}
			}
			export class CertificateFactorySpi extends java.lang.Object {
				constructor();
				static class: java.lang.Class<java.security.cert.CertificateFactorySpi>;
				engineGenerateCRL(arg1: java.io.InputStream): java.security.cert.CRL;
				engineGenerateCRLs(arg1: java.io.InputStream): java.util.ICollection<any>;
				engineGenerateCertPath(arg1: java.io.InputStream, arg2: java.lang.String): java.security.cert.CertPath;
				engineGenerateCertPath(arg1: java.io.InputStream, arg2: string): java.security.cert.CertPath;
				engineGenerateCertPath(arg1: java.util.IList<any>): java.security.cert.CertPath;
				engineGenerateCertPath(arg1: java.io.InputStream): java.security.cert.CertPath;
				engineGenerateCertificate(arg1: java.io.InputStream): java.security.cert.Certificate;
				engineGenerateCertificates(arg1: java.io.InputStream): java.util.ICollection<any>;
				engineGetCertPathEncodings(): java.util.IIterator<string>;
			}
			export class X509Extension implements java.security.cert.IX509Extension {
				constructor(implementation: java.security.cert.IX509Extension);
				getNonCriticalExtensionOIDs(): java.util.ISet<string>;
				hasUnsupportedCriticalExtension(): boolean;
				getExtensionValue(arg1: java.lang.String): native.Array<native.Byte>;
				getExtensionValue(arg1: string): native.Array<native.Byte>;
				getCriticalExtensionOIDs(): java.util.ISet<string>;
			}
			export class CertStoreSpi extends java.lang.Object {
				constructor(arg1: java.security.cert.ICertStoreParameters);
				static class: java.lang.Class<java.security.cert.CertStoreSpi>;
				engineGetCRLs(arg1: java.security.cert.ICRLSelector): java.util.ICollection<any>;
				engineGetCertificates(arg1: java.security.cert.ICertSelector): java.util.ICollection<any>;
			}
			export class TrustAnchor extends java.lang.Object {
				constructor(arg1: javax.security.auth.x500.X500Principal, arg2: java.security.IPublicKey, arg3: native.Array<native.Byte>);
				constructor(arg1: java.lang.String, arg2: java.security.IPublicKey, arg3: native.Array<native.Byte>);
				constructor(arg1: string, arg2: java.security.IPublicKey, arg3: native.Array<native.Byte>);
				constructor(arg1: java.security.cert.X509Certificate, arg2: native.Array<native.Byte>);
				static class: java.lang.Class<java.security.cert.TrustAnchor>;
				getNameConstraints(): native.Array<native.Byte>;
				getCA(): javax.security.auth.x500.X500Principal;
				getCAName(): string;
				getCAPublicKey(): java.security.IPublicKey;
				getTrustedCert(): java.security.cert.X509Certificate;
				toString(): string;
			}
			export class CertPathBuilder extends java.lang.Object {
				static class: java.lang.Class<java.security.cert.CertPathBuilder>;
				static getInstance(arg1: java.lang.String): java.security.cert.CertPathBuilder;
				static getInstance(arg1: string): java.security.cert.CertPathBuilder;
				static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.cert.CertPathBuilder;
				static getInstance(arg1: string, arg2: java.security.Provider): java.security.cert.CertPathBuilder;
				static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.cert.CertPathBuilder;
				static getInstance(arg1: string, arg2: string): java.security.cert.CertPathBuilder;
				getProvider(): java.security.Provider;
				getAlgorithm(): string;
				build(arg1: java.security.cert.ICertPathParameters): java.security.cert.ICertPathBuilderResult;
				static getDefaultType(): string;
			}
			export interface ICertPathBuilderResult extends java.lang.ICloneable {
				getCertPath(): java.security.cert.CertPath;
				clone(): any;
			}
			export class CertPathValidatorSpi extends java.lang.Object {
				constructor();
				static class: java.lang.Class<java.security.cert.CertPathValidatorSpi>;
				engineValidate(arg1: java.security.cert.CertPath, arg2: java.security.cert.ICertPathParameters): java.security.cert.ICertPathValidatorResult;
			}
			export class X509CRLSelector extends java.lang.Object implements java.security.cert.ICRLSelector {
				constructor();
				static class: java.lang.Class<java.security.cert.X509CRLSelector>;
				DateAndTime: java.util.Date;
				CertificateChecking: java.security.cert.X509Certificate;
				addIssuer(arg1: javax.security.auth.x500.X500Principal): void;
				addIssuerName(arg1: native.Array<native.Byte>): void;
				addIssuerName(arg1: java.lang.String): void;
				addIssuerName(arg1: string): void;
				getCertificateChecking(): java.security.cert.X509Certificate;
				getDateAndTime(): java.util.Date;
				getIssuerNames(): java.util.ICollection<any>;
				getIssuers(): java.util.ICollection<javax.security.auth.x500.X500Principal>;
				getMaxCRL(): java.math.BigInteger;
				getMinCRL(): java.math.BigInteger;
				setCertificateChecking(arg1: java.security.cert.X509Certificate): void;
				setDateAndTime(arg1: java.util.Date): void;
				setIssuerNames(arg1: java.util.ICollection<any>): void;
				setIssuers(arg1: java.util.ICollection<javax.security.auth.x500.X500Principal>): void;
				setMaxCRLNumber(arg1: java.math.BigInteger): void;
				setMinCRLNumber(arg1: java.math.BigInteger): void;
				clone(): any;
				toString(): string;
				match(arg1: java.security.cert.CRL): boolean;
			}
			export class X509CertSelector extends java.lang.Object implements java.security.cert.ICertSelector {
				constructor();
				static class: java.lang.Class<java.security.cert.X509CertSelector>;
				MatchAllSubjectAltNames: boolean;
				SubjectPublicKeyAlgID: string;
				Subject: javax.security.auth.x500.X500Principal;
				SubjectPublicKey: java.security.IPublicKey;
				ExtendedKeyUsage: java.util.ISet<string>;
				KeyUsage: native.Array<boolean>;
				AuthorityKeyIdentifier: native.Array<native.Byte>;
				SerialNumber: java.math.BigInteger;
				SubjectAlternativeNames: java.util.ICollection<java.util.IList<any>>;
				BasicConstraints: number;
				SubjectKeyIdentifier: native.Array<native.Byte>;
				PathToNames: java.util.ICollection<java.util.IList<any>>;
				Policy: java.util.ISet<string>;
				CertificateValid: java.util.Date;
				PrivateKeyValid: java.util.Date;
				Certificate: java.security.cert.X509Certificate;
				NameConstraints: native.Array<native.Byte>;
				addPathToName(arg1: number, arg2: java.lang.String): void;
				addPathToName(arg1: number, arg2: string): void;
				addPathToName(arg1: number, arg2: native.Array<native.Byte>): void;
				addSubjectAlternativeName(arg1: number, arg2: java.lang.String): void;
				addSubjectAlternativeName(arg1: number, arg2: string): void;
				addSubjectAlternativeName(arg1: number, arg2: native.Array<native.Byte>): void;
				getAuthorityKeyIdentifier(): native.Array<native.Byte>;
				getCertificateValid(): java.util.Date;
				getExtendedKeyUsage(): java.util.ISet<string>;
				getIssuer(): javax.security.auth.x500.X500Principal;
				getIssuerAsBytes(): native.Array<native.Byte>;
				getIssuerAsString(): string;
				getMatchAllSubjectAltNames(): boolean;
				getNameConstraints(): native.Array<native.Byte>;
				getPathToNames(): java.util.ICollection<java.util.IList<any>>;
				getPrivateKeyValid(): java.util.Date;
				getSubject(): javax.security.auth.x500.X500Principal;
				getSubjectAlternativeNames(): java.util.ICollection<java.util.IList<any>>;
				getSubjectAsBytes(): native.Array<native.Byte>;
				getSubjectAsString(): string;
				getSubjectKeyIdentifier(): native.Array<native.Byte>;
				getSubjectPublicKey(): java.security.IPublicKey;
				getSubjectPublicKeyAlgID(): string;
				setAuthorityKeyIdentifier(arg1: native.Array<native.Byte>): void;
				setBasicConstraints(arg1: number): void;
				setCertificate(arg1: java.security.cert.X509Certificate): void;
				setCertificateValid(arg1: java.util.Date): void;
				setExtendedKeyUsage(arg1: java.util.ISet<string>): void;
				setIssuer(arg1: native.Array<native.Byte>): void;
				setIssuer(arg1: java.lang.String): void;
				setIssuer(arg1: string): void;
				setIssuer(arg1: javax.security.auth.x500.X500Principal): void;
				setKeyUsage(arg1: native.Array<boolean>): void;
				setMatchAllSubjectAltNames(arg1: boolean): void;
				setNameConstraints(arg1: native.Array<native.Byte>): void;
				setPathToNames(arg1: java.util.ICollection<java.util.IList<any>>): void;
				setPrivateKeyValid(arg1: java.util.Date): void;
				setSerialNumber(arg1: java.math.BigInteger): void;
				setSubject(arg1: javax.security.auth.x500.X500Principal): void;
				setSubject(arg1: native.Array<native.Byte>): void;
				setSubject(arg1: java.lang.String): void;
				setSubject(arg1: string): void;
				setSubjectAlternativeNames(arg1: java.util.ICollection<java.util.IList<any>>): void;
				setSubjectKeyIdentifier(arg1: native.Array<native.Byte>): void;
				setSubjectPublicKey(arg1: native.Array<native.Byte>): void;
				setSubjectPublicKey(arg1: java.security.IPublicKey): void;
				setSubjectPublicKeyAlgID(arg1: java.lang.String): void;
				setSubjectPublicKeyAlgID(arg1: string): void;
				clone(): any;
				toString(): string;
				match(arg1: java.security.cert.Certificate): boolean;
				getBasicConstraints(): number;
				getCertificate(): java.security.cert.X509Certificate;
				getPolicy(): java.util.ISet<string>;
				setPolicy(arg1: java.util.ISet<string>): void;
				getSerialNumber(): java.math.BigInteger;
				getKeyUsage(): native.Array<boolean>;
			}
			export class CertificateFactory extends java.lang.Object {
				static class: java.lang.Class<java.security.cert.CertificateFactory>;
				generateCRL(arg1: java.io.InputStream): java.security.cert.CRL;
				generateCRLs(arg1: java.io.InputStream): java.util.ICollection<any>;
				generateCertificates(arg1: java.io.InputStream): java.util.ICollection<any>;
				getCertPathEncodings(): java.util.IIterator<string>;
				static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.cert.CertificateFactory;
				static getInstance(arg1: string, arg2: string): java.security.cert.CertificateFactory;
				static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.cert.CertificateFactory;
				static getInstance(arg1: string, arg2: java.security.Provider): java.security.cert.CertificateFactory;
				static getInstance(arg1: java.lang.String): java.security.cert.CertificateFactory;
				static getInstance(arg1: string): java.security.cert.CertificateFactory;
				getType(): string;
				generateCertPath(arg1: java.util.IList<any>): java.security.cert.CertPath;
				generateCertPath(arg1: java.io.InputStream, arg2: java.lang.String): java.security.cert.CertPath;
				generateCertPath(arg1: java.io.InputStream, arg2: string): java.security.cert.CertPath;
				generateCertPath(arg1: java.io.InputStream): java.security.cert.CertPath;
				generateCertificate(arg1: java.io.InputStream): java.security.cert.Certificate;
				getProvider(): java.security.Provider;
			}
			export class X509CRL extends java.security.cert.CRL implements java.security.cert.IX509Extension {
				static class: java.lang.Class<java.security.cert.X509CRL>;
				getIssuerX500Principal(): javax.security.auth.x500.X500Principal;
				getNextUpdate(): java.util.Date;
				getRevokedCertificate(arg1: java.math.BigInteger): java.security.cert.X509CRLEntry;
				getRevokedCertificate(arg1: java.security.cert.X509Certificate): java.security.cert.X509CRLEntry;
				getRevokedCertificates(): java.util.ISet<any>;
				getSigAlgName(): string;
				getSigAlgOID(): string;
				getSigAlgParams(): native.Array<native.Byte>;
				getTBSCertList(): native.Array<native.Byte>;
				getThisUpdate(): java.util.Date;
				hashCode(): number;
				equals(arg1: any): boolean;
				getSignature(): native.Array<native.Byte>;
				getEncoded(): native.Array<native.Byte>;
				getIssuerDN(): java.security.IPrincipal;
				verify(arg1: java.security.IPublicKey): void;
				verify(arg1: java.security.IPublicKey, arg2: java.lang.String): void;
				verify(arg1: java.security.IPublicKey, arg2: string): void;
				getVersion(): number;
				getNonCriticalExtensionOIDs(): java.util.ISet<string>;
				hasUnsupportedCriticalExtension(): boolean;
				getExtensionValue(arg1: string): native.Array<native.Byte>;
				getCriticalExtensionOIDs(): java.util.ISet<string>;
			}
			export class CollectionCertStoreParameters extends java.lang.Object implements java.security.cert.ICertStoreParameters {
				constructor(arg1: java.util.ICollection<any>);
				constructor();
				static class: java.lang.Class<java.security.cert.CollectionCertStoreParameters>;
				getCollection(): java.util.ICollection<any>;
				clone(): any;
				toString(): string;
			}
			export interface ICertSelector extends java.lang.ICloneable {
				clone(): any;
				match(arg1: java.security.cert.Certificate): boolean;
			}
			export class CertStore extends java.lang.Object {
				static class: java.lang.Class<java.security.cert.CertStore>;
				getCRLs(arg1: java.security.cert.ICRLSelector): java.util.ICollection<any>;
				getCertStoreParameters(): java.security.cert.ICertStoreParameters;
				static getInstance(arg1: java.lang.String, arg2: java.security.cert.ICertStoreParameters, arg3: java.security.Provider): java.security.cert.CertStore;
				static getInstance(arg1: string, arg2: java.security.cert.ICertStoreParameters, arg3: java.security.Provider): java.security.cert.CertStore;
				static getInstance(arg1: java.lang.String, arg2: java.security.cert.ICertStoreParameters, arg3: java.lang.String): java.security.cert.CertStore;
				static getInstance(arg1: string, arg2: java.security.cert.ICertStoreParameters, arg3: string): java.security.cert.CertStore;
				static getInstance(arg1: java.lang.String, arg2: java.security.cert.ICertStoreParameters): java.security.cert.CertStore;
				static getInstance(arg1: string, arg2: java.security.cert.ICertStoreParameters): java.security.cert.CertStore;
				getCertificates(arg1: java.security.cert.ICertSelector): java.util.ICollection<any>;
				getType(): string;
				getProvider(): java.security.Provider;
				static getDefaultType(): string;
			}
			export class CertificateEncodingException extends java.security.cert.CertificateException {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<java.security.cert.CertificateEncodingException>;
			}
			export class LDAPCertStoreParameters extends java.lang.Object implements java.security.cert.ICertStoreParameters {
				constructor(arg1: java.lang.String, arg2: number);
				constructor(arg1: string, arg2: number);
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.security.cert.LDAPCertStoreParameters>;
				getServerName(): string;
				clone(): any;
				toString(): string;
				getPort(): number;
			}
			export class PolicyNode implements java.security.cert.IPolicyNode {
				constructor(implementation: java.security.cert.IPolicyNode);
				getExpectedPolicies(): java.util.ISet<string>;
				getPolicyQualifiers(): java.util.ISet<any>;
				getValidPolicy(): string;
				isCritical(): boolean;
				getParent(): java.security.cert.IPolicyNode;
				getChildren(): java.util.IIterator<any>;
				getDepth(): number;
			}
			export class PolicyQualifierInfo extends java.lang.Object {
				constructor(arg1: native.Array<native.Byte>);
				static class: java.lang.Class<java.security.cert.PolicyQualifierInfo>;
				getPolicyQualifier(): native.Array<native.Byte>;
				getPolicyQualifierId(): string;
				toString(): string;
				getEncoded(): native.Array<native.Byte>;
			}
			export class PKIXParameters extends java.lang.Object implements java.security.cert.ICertPathParameters {
				constructor(arg1: java.util.ISet<java.security.cert.TrustAnchor>);
				constructor(arg1: java.security.KeyStore);
				static class: java.lang.Class<java.security.cert.PKIXParameters>;
				TrustAnchors: java.util.ISet<java.security.cert.TrustAnchor>;
				TargetCertConstraints: java.security.cert.ICertSelector;
				InitialPolicies: java.util.ISet<string>;
				CertStores: java.util.IList<java.security.cert.CertStore>;
				Date: java.util.Date;
				SigProvider: string;
				PolicyQualifiersRejected: boolean;
				CertPathCheckers: java.util.IList<java.security.cert.PKIXCertPathChecker>;
				addCertPathChecker(arg1: java.security.cert.PKIXCertPathChecker): void;
				addCertStore(arg1: java.security.cert.CertStore): void;
				getCertPathCheckers(): java.util.IList<java.security.cert.PKIXCertPathChecker>;
				getCertStores(): java.util.IList<java.security.cert.CertStore>;
				getInitialPolicies(): java.util.ISet<string>;
				getPolicyQualifiersRejected(): boolean;
				getSigProvider(): string;
				getTargetCertConstraints(): java.security.cert.ICertSelector;
				getTrustAnchors(): java.util.ISet<java.security.cert.TrustAnchor>;
				isAnyPolicyInhibited(): boolean;
				isExplicitPolicyRequired(): boolean;
				isPolicyMappingInhibited(): boolean;
				isRevocationEnabled(): boolean;
				setAnyPolicyInhibited(arg1: boolean): void;
				setCertPathCheckers(arg1: java.util.IList<java.security.cert.PKIXCertPathChecker>): void;
				setCertStores(arg1: java.util.IList<java.security.cert.CertStore>): void;
				setExplicitPolicyRequired(arg1: boolean): void;
				setInitialPolicies(arg1: java.util.ISet<string>): void;
				setPolicyMappingInhibited(arg1: boolean): void;
				setPolicyQualifiersRejected(arg1: boolean): void;
				setRevocationEnabled(arg1: boolean): void;
				setSigProvider(arg1: java.lang.String): void;
				setSigProvider(arg1: string): void;
				setTrustAnchors(arg1: java.util.ISet<java.security.cert.TrustAnchor>): void;
				setTargetCertConstraints(arg1: java.security.cert.ICertSelector): void;
				clone(): any;
				toString(): string;
				getDate(): java.util.Date;
				setDate(arg1: java.util.Date): void;
			}
			export class CRL extends java.lang.Object {
				static class: java.lang.Class<java.security.cert.CRL>;
				isRevoked(arg1: java.security.cert.Certificate): boolean;
				toString(): string;
				getType(): string;
			}
		}
		export class DigestException extends java.security.GeneralSecurityException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.DigestException>;
		}
		export class NoSuchProviderException extends java.security.GeneralSecurityException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.security.NoSuchProviderException>;
		}
		export class AllPermission extends java.security.Permission {
			constructor();
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.security.AllPermission>;
			hashCode(): number;
			equals(arg1: any): boolean;
			getActions(): string;
			implies(arg1: java.security.Permission): boolean;
			newPermissionCollection(): java.security.PermissionCollection;
		}
		export interface IPrivateKey extends java.security.IKey {
			getEncoded(): native.Array<native.Byte>;
			getFormat(): string;
			getAlgorithm(): string;
		}
		export module IPrivateKey {
			var serialVersionUID: native.Long;
		}
		export interface IDomainCombiner {
			combine(arg1: native.Array<java.security.ProtectionDomain>, arg2: native.Array<java.security.ProtectionDomain>): native.Array<java.security.ProtectionDomain>;
		}
		export class UnrecoverableKeyException extends java.security.UnrecoverableEntryException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.security.UnrecoverableKeyException>;
		}
		export class CodeSigner extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.security.cert.CertPath, arg2: java.security.Timestamp);
			static class: java.lang.Class<java.security.CodeSigner>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getSignerCertPath(): java.security.cert.CertPath;
			getTimestamp(): java.security.Timestamp;
		}
		export class AlgorithmParametersSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.security.AlgorithmParametersSpi>;
		}
		export class Permission extends java.lang.Object implements java.security.IGuard, java.io.ISerializable {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.security.Permission>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getName(): string;
			getActions(): string;
			implies(arg1: java.security.Permission): boolean;
			newPermissionCollection(): java.security.PermissionCollection;
			checkGuard(arg1: any): void;
		}
		export class KeyRep extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.security.KeyRep.Type, arg2: java.lang.String, arg3: java.lang.String, arg4: native.Array<native.Byte>);
			constructor(arg1: java.security.KeyRep.Type, arg2: string, arg3: string, arg4: native.Array<native.Byte>);
			static class: java.lang.Class<java.security.KeyRep>;
		}
		export module KeyRep {
			export enum Type {
				SECRET,
				PUBLIC,
				PRIVATE
			}
			export module Type {
				export function valueOf(arg1: java.lang.String): java.security.KeyRep.Type;
				export function valueOf(arg1: string): java.security.KeyRep.Type;
				export function values(): native.Array<java.security.KeyRep.Type>;
			}
		}
		export class MessageDigest extends java.security.MessageDigestSpi {
			static class: java.lang.Class<java.security.MessageDigest>;
			clone(): any;
			toString(): string;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.MessageDigest;
			static getInstance(arg1: string, arg2: string): java.security.MessageDigest;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.MessageDigest;
			static getInstance(arg1: string, arg2: java.security.Provider): java.security.MessageDigest;
			static getInstance(arg1: java.lang.String): java.security.MessageDigest;
			static getInstance(arg1: string): java.security.MessageDigest;
			reset(): void;
			digest(): native.Array<native.Byte>;
			digest(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			digest(arg1: native.Array<native.Byte>): native.Array<native.Byte>;
			getProvider(): java.security.Provider;
			update(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			update(arg1: java.nio.ByteBuffer): void;
			update(arg1: native.Array<native.Byte>): void;
			update(arg1: native.Byte): void;
			getAlgorithm(): string;
			static isEqual(arg1: native.Array<native.Byte>, arg2: native.Array<native.Byte>): boolean;
			getDigestLength(): number;
		}
		export interface ICertificate {
			getGuarantor(): java.security.IPrincipal;
			getPrincipal(): java.security.IPrincipal;
			toString(arg1: boolean): string;
			decode(arg1: java.io.InputStream): void;
			encode(arg1: java.io.OutputStream): void;
			getPublicKey(): java.security.IPublicKey;
			getFormat(): string;
		}
		export module acl {
			export interface IAcl extends java.security.acl.IOwner {
				removeEntry(arg1: java.security.IPrincipal, arg2: java.security.acl.IAclEntry): boolean;
				toString(): string;
				getName(): string;
				checkPermission(arg1: java.security.IPrincipal, arg2: java.security.acl.IPermission): boolean;
				getPermissions(arg1: java.security.IPrincipal): java.util.IEnumeration<java.security.acl.IPermission>;
				setName(arg1: java.security.IPrincipal, arg2: string): void;
				addEntry(arg1: java.security.IPrincipal, arg2: java.security.acl.IAclEntry): boolean;
				entries(): java.util.IEnumeration<java.security.acl.IAclEntry>;
				addOwner(arg1: java.security.IPrincipal, arg2: java.security.IPrincipal): boolean;
				deleteOwner(arg1: java.security.IPrincipal, arg2: java.security.IPrincipal): boolean;
				isOwner(arg1: java.security.IPrincipal): boolean;
			}
			export class Owner implements java.security.acl.IOwner {
				constructor(implementation: java.security.acl.IOwner);
				addOwner(arg1: java.security.IPrincipal, arg2: java.security.IPrincipal): boolean;
				deleteOwner(arg1: java.security.IPrincipal, arg2: java.security.IPrincipal): boolean;
				isOwner(arg1: java.security.IPrincipal): boolean;
			}
			export class LastOwnerException extends java.lang.Exception {
				constructor();
				static class: java.lang.Class<java.security.acl.LastOwnerException>;
			}
			export interface IOwner {
				addOwner(arg1: java.security.IPrincipal, arg2: java.security.IPrincipal): boolean;
				deleteOwner(arg1: java.security.IPrincipal, arg2: java.security.IPrincipal): boolean;
				isOwner(arg1: java.security.IPrincipal): boolean;
			}
			export class Permission implements java.security.acl.IPermission {
				constructor(implementation: java.security.acl.IPermission);
				equals(arg1: any): boolean;
				toString(): string;
			}
			export interface IAclEntry extends java.lang.ICloneable {
				addPermission(arg1: java.security.acl.IPermission): boolean;
				removePermission(arg1: java.security.acl.IPermission): boolean;
				setNegativePermissions(): void;
				setPrincipal(arg1: java.security.IPrincipal): boolean;
				getPrincipal(): java.security.IPrincipal;
				clone(): any;
				toString(): string;
				checkPermission(arg1: java.security.acl.IPermission): boolean;
				permissions(): java.util.IEnumeration<java.security.acl.IPermission>;
				isNegative(): boolean;
			}
			export interface IGroup extends java.security.IPrincipal {
				addMember(arg1: java.security.IPrincipal): boolean;
				isMember(arg1: java.security.IPrincipal): boolean;
				members(): java.util.IEnumeration<any>;
				removeMember(arg1: java.security.IPrincipal): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getName(): string;
			}
			export class AclNotFoundException extends java.lang.Exception {
				constructor();
				static class: java.lang.Class<java.security.acl.AclNotFoundException>;
			}
			export interface IPermission {
				equals(arg1: any): boolean;
				toString(): string;
			}
			export class NotOwnerException extends java.lang.Exception {
				constructor();
				static class: java.lang.Class<java.security.acl.NotOwnerException>;
			}
			export class AclEntry implements java.lang.ICloneable, java.security.acl.IAclEntry {
				constructor(implementation: java.security.acl.IAclEntry);
				Principal: java.security.IPrincipal;
				addPermission(arg1: java.security.acl.IPermission): boolean;
				removePermission(arg1: java.security.acl.IPermission): boolean;
				setNegativePermissions(): void;
				setPrincipal(arg1: java.security.IPrincipal): boolean;
				getPrincipal(): java.security.IPrincipal;
				clone(): any;
				toString(): string;
				checkPermission(arg1: java.security.acl.IPermission): boolean;
				permissions(): java.util.IEnumeration<java.security.acl.IPermission>;
				isNegative(): boolean;
			}
			export class Acl implements java.security.acl.IOwner, java.security.acl.IAcl {
				constructor(implementation: java.security.acl.IAcl);
				removeEntry(arg1: java.security.IPrincipal, arg2: java.security.acl.IAclEntry): boolean;
				toString(): string;
				getName(): string;
				checkPermission(arg1: java.security.IPrincipal, arg2: java.security.acl.IPermission): boolean;
				getPermissions(arg1: java.security.IPrincipal): java.util.IEnumeration<java.security.acl.IPermission>;
				setName(arg1: java.security.IPrincipal, arg2: java.lang.String): void;
				setName(arg1: java.security.IPrincipal, arg2: string): void;
				addEntry(arg1: java.security.IPrincipal, arg2: java.security.acl.IAclEntry): boolean;
				entries(): java.util.IEnumeration<java.security.acl.IAclEntry>;
				addOwner(arg1: java.security.IPrincipal, arg2: java.security.IPrincipal): boolean;
				deleteOwner(arg1: java.security.IPrincipal, arg2: java.security.IPrincipal): boolean;
				isOwner(arg1: java.security.IPrincipal): boolean;
			}
			export class Group implements java.security.IPrincipal, java.security.acl.IGroup {
				constructor(implementation: java.security.acl.IGroup);
				addMember(arg1: java.security.IPrincipal): boolean;
				isMember(arg1: java.security.IPrincipal): boolean;
				members(): java.util.IEnumeration<any>;
				removeMember(arg1: java.security.IPrincipal): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getName(): string;
			}
		}
		export class KeyException extends java.security.GeneralSecurityException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.KeyException>;
		}
		export class PermissionCollection extends java.lang.Object implements java.io.ISerializable {
			constructor();
			static class: java.lang.Class<java.security.PermissionCollection>;
			toString(): string;
			add(arg1: java.security.Permission): void;
			elements(): java.util.IEnumeration<java.security.Permission>;
			implies(arg1: java.security.Permission): boolean;
			setReadOnly(): void;
			isReadOnly(): boolean;
		}
		export class SecurityPermission extends java.security.BasicPermission {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.security.SecurityPermission>;
		}
		export class ProtectionDomain extends java.lang.Object {
			constructor(arg1: java.security.CodeSource, arg2: java.security.PermissionCollection, arg3: java.lang.ClassLoader, arg4: native.Array<java.security.IPrincipal>);
			constructor(arg1: java.security.CodeSource, arg2: java.security.PermissionCollection);
			static class: java.lang.Class<java.security.ProtectionDomain>;
			toString(): string;
			getClassLoader(): java.lang.ClassLoader;
			getCodeSource(): java.security.CodeSource;
			getPermissions(): java.security.PermissionCollection;
			getPrincipals(): native.Array<java.security.IPrincipal>;
			implies(arg1: java.security.Permission): boolean;
		}
		export class SecureClassLoader extends java.lang.ClassLoader {
			static class: java.lang.Class<java.security.SecureClassLoader>;
		}
		export class ProviderException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.security.ProviderException>;
		}
		export class AccessControlContext extends java.lang.Object {
			constructor(arg1: java.security.AccessControlContext, arg2: java.security.IDomainCombiner);
			constructor(arg1: native.Array<java.security.ProtectionDomain>);
			static class: java.lang.Class<java.security.AccessControlContext>;
			hashCode(): number;
			equals(arg1: any): boolean;
			checkPermission(arg1: java.security.Permission): void;
			getDomainCombiner(): java.security.IDomainCombiner;
		}
		export class Timestamp extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.util.Date, arg2: java.security.cert.CertPath);
			static class: java.lang.Class<java.security.Timestamp>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getSignerCertPath(): java.security.cert.CertPath;
			getTimestamp(): java.util.Date;
		}
		export class PublicKey implements java.security.IKey, java.security.IPublicKey {
			constructor(implementation: java.security.IPublicKey);
			static serialVersionUID: native.Long;
			getEncoded(): native.Array<native.Byte>;
			getFormat(): string;
			getAlgorithm(): string;
		}
		export class SignedObject extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.io.ISerializable, arg2: java.security.IPrivateKey, arg3: java.security.Signature);
			constructor(arg1: string, arg2: java.security.IPrivateKey, arg3: java.security.Signature);
			static class: java.lang.Class<java.security.SignedObject>;
			getSignature(): native.Array<native.Byte>;
			getObject(): any;
			verify(arg1: java.security.IPublicKey, arg2: java.security.Signature): boolean;
			getAlgorithm(): string;
		}
		export class Identity extends java.lang.Object implements java.security.IPrincipal, java.io.ISerializable {
			constructor(arg1: java.lang.String, arg2: java.security.IdentityScope);
			constructor(arg1: string, arg2: java.security.IdentityScope);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.security.Identity>;
			PublicKey: java.security.IPublicKey;
			Info: string;
			addCertificate(arg1: java.security.ICertificate): void;
			certificates(): native.Array<java.security.ICertificate>;
			getScope(): java.security.IdentityScope;
			removeCertificate(arg1: java.security.ICertificate): void;
			setInfo(arg1: java.lang.String): void;
			setInfo(arg1: string): void;
			setPublicKey(arg1: java.security.IPublicKey): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(arg1: boolean): string;
			toString(): string;
			getName(): string;
			getPublicKey(): java.security.IPublicKey;
			getInfo(): string;
		}
		export class MessageDigestSpi extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.security.MessageDigestSpi>;
			clone(): any;
		}
		export class KeyStore extends java.lang.Object {
			static class: java.lang.Class<java.security.KeyStore>;
			containsAlias(arg1: java.lang.String): boolean;
			containsAlias(arg1: string): boolean;
			entryInstanceOf(arg1: java.lang.String, arg2: java.lang.Class<any>): boolean;
			entryInstanceOf(arg1: string, arg2: java.lang.Class<any>): boolean;
			getCertificateAlias(arg1: java.security.cert.Certificate): string;
			getCreationDate(arg1: java.lang.String): java.util.Date;
			getCreationDate(arg1: string): java.util.Date;
			isCertificateEntry(arg1: java.lang.String): boolean;
			isCertificateEntry(arg1: string): boolean;
			isKeyEntry(arg1: java.lang.String): boolean;
			isKeyEntry(arg1: string): boolean;
			setCertificateEntry(arg1: java.lang.String, arg2: java.security.cert.Certificate): void;
			setCertificateEntry(arg1: string, arg2: java.security.cert.Certificate): void;
			setKeyEntry(arg1: java.lang.String, arg2: java.security.IKey, arg3: native.Array<string>, arg4: native.Array<java.security.cert.Certificate>): void;
			setKeyEntry(arg1: string, arg2: java.security.IKey, arg3: native.Array<string>, arg4: native.Array<java.security.cert.Certificate>): void;
			setKeyEntry(arg1: java.lang.String, arg2: native.Array<native.Byte>, arg3: native.Array<java.security.cert.Certificate>): void;
			setKeyEntry(arg1: string, arg2: native.Array<native.Byte>, arg3: native.Array<java.security.cert.Certificate>): void;
			size(): number;
			static getInstance(arg1: java.lang.String, arg2: java.lang.String): java.security.KeyStore;
			static getInstance(arg1: string, arg2: string): java.security.KeyStore;
			static getInstance(arg1: java.lang.String): java.security.KeyStore;
			static getInstance(arg1: string): java.security.KeyStore;
			static getInstance(arg1: java.lang.String, arg2: java.security.Provider): java.security.KeyStore;
			static getInstance(arg1: string, arg2: java.security.Provider): java.security.KeyStore;
			getKey(arg1: java.lang.String, arg2: native.Array<string>): java.security.IKey;
			getKey(arg1: string, arg2: native.Array<string>): java.security.IKey;
			load(arg1: java.security.KeyStore.ILoadStoreParameter): void;
			load(arg1: java.io.InputStream, arg2: native.Array<string>): void;
			store(arg1: java.security.KeyStore.ILoadStoreParameter): void;
			store(arg1: java.io.OutputStream, arg2: native.Array<string>): void;
			getType(): string;
			getEntry(arg1: java.lang.String, arg2: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.IEntry;
			getEntry(arg1: string, arg2: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.IEntry;
			aliases(): java.util.IEnumeration<string>;
			getCertificate(arg1: java.lang.String): java.security.cert.Certificate;
			getCertificate(arg1: string): java.security.cert.Certificate;
			getProvider(): java.security.Provider;
			deleteEntry(arg1: java.lang.String): void;
			deleteEntry(arg1: string): void;
			setEntry(arg1: java.lang.String, arg2: java.security.KeyStore.IEntry, arg3: java.security.KeyStore.IProtectionParameter): void;
			setEntry(arg1: string, arg2: java.security.KeyStore.IEntry, arg3: java.security.KeyStore.IProtectionParameter): void;
			getCertificateChain(arg1: java.lang.String): native.Array<java.security.cert.Certificate>;
			getCertificateChain(arg1: string): native.Array<java.security.cert.Certificate>;
			static getDefaultType(): string;
		}
		export module KeyStore {
			export class PasswordProtection extends java.lang.Object implements java.security.KeyStore.IProtectionParameter, javax.security.auth.IDestroyable {
				constructor(arg1: native.Array<string>);
				static class: java.lang.Class<java.security.KeyStore.PasswordProtection>;
				destroy(): void;
				isDestroyed(): boolean;
				getPassword(): native.Array<string>;
			}
			export class Entry implements java.security.KeyStore.IEntry {
				constructor(implementation: java.security.KeyStore.IEntry);
			}
			export interface IProtectionParameter {
			}
			export interface ILoadStoreParameter {
				getProtectionParameter(): java.security.KeyStore.IProtectionParameter;
			}
			export class PrivateKeyEntry extends java.lang.Object implements java.security.KeyStore.IEntry {
				constructor(arg1: java.security.IPrivateKey, arg2: native.Array<java.security.cert.Certificate>);
				static class: java.lang.Class<java.security.KeyStore.PrivateKeyEntry>;
				getPrivateKey(): java.security.IPrivateKey;
				toString(): string;
				getCertificate(): java.security.cert.Certificate;
				getCertificateChain(): native.Array<java.security.cert.Certificate>;
			}
			export class TrustedCertificateEntry extends java.lang.Object implements java.security.KeyStore.IEntry {
				constructor(arg1: java.security.cert.Certificate);
				static class: java.lang.Class<java.security.KeyStore.TrustedCertificateEntry>;
				getTrustedCertificate(): java.security.cert.Certificate;
				toString(): string;
			}
			export class ProtectionParameter implements java.security.KeyStore.IProtectionParameter {
				constructor(implementation: java.security.KeyStore.IProtectionParameter);
			}
			export class Builder extends java.lang.Object {
				static class: java.lang.Class<java.security.KeyStore.Builder>;
				getProtectionParameter(arg1: java.lang.String): java.security.KeyStore.IProtectionParameter;
				getProtectionParameter(arg1: string): java.security.KeyStore.IProtectionParameter;
				static newInstance(arg1: java.lang.String, arg2: java.security.Provider, arg3: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.Builder;
				static newInstance(arg1: string, arg2: java.security.Provider, arg3: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.Builder;
				static newInstance(arg1: java.lang.String, arg2: java.security.Provider, arg3: java.io.File, arg4: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.Builder;
				static newInstance(arg1: string, arg2: java.security.Provider, arg3: java.io.File, arg4: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.Builder;
				static newInstance(arg1: java.security.KeyStore, arg2: java.security.KeyStore.IProtectionParameter): java.security.KeyStore.Builder;
				getKeyStore(): java.security.KeyStore;
			}
			export class CallbackHandlerProtection extends java.lang.Object implements java.security.KeyStore.IProtectionParameter {
				constructor(arg1: javax.security.auth.callback.ICallbackHandler);
				static class: java.lang.Class<java.security.KeyStore.CallbackHandlerProtection>;
				getCallbackHandler(): javax.security.auth.callback.ICallbackHandler;
			}
			export class SecretKeyEntry extends java.lang.Object implements java.security.KeyStore.IEntry {
				constructor(arg1: javax.crypto.ISecretKey);
				static class: java.lang.Class<java.security.KeyStore.SecretKeyEntry>;
				getSecretKey(): javax.crypto.ISecretKey;
				toString(): string;
			}
			export class LoadStoreParameter implements java.security.KeyStore.ILoadStoreParameter {
				constructor(implementation: java.security.KeyStore.ILoadStoreParameter);
				getProtectionParameter(): java.security.KeyStore.IProtectionParameter;
			}
			export interface IEntry {
			}
		}
		export interface IPrivilegedExceptionAction<T> {
			__java_security_IPrivilegedExceptionAction?: any;
			run(): T;
		}
		export class DomainCombiner implements java.security.IDomainCombiner {
			constructor(implementation: java.security.IDomainCombiner);
			combine(arg1: native.Array<java.security.ProtectionDomain>, arg2: native.Array<java.security.ProtectionDomain>): native.Array<java.security.ProtectionDomain>;
		}
	}
	export module net {
		export class UnknownHostException extends java.io.IOException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.net.UnknownHostException>;
		}
		export class HttpCookie extends java.lang.Object implements java.lang.ICloneable {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.net.HttpCookie>;
			Value: string;
			Domain: string;
			Comment: string;
			Path: string;
			CommentURL: string;
			Version: number;
			Portlist: string;
			Discard: boolean;
			Secure: boolean;
			getDomain(): string;
			getPortlist(): string;
			getSecure(): boolean;
			isHttpOnly(): boolean;
			setDomain(arg1: java.lang.String): void;
			setDomain(arg1: string): void;
			setPath(arg1: java.lang.String): void;
			setPath(arg1: string): void;
			setPortlist(arg1: java.lang.String): void;
			setPortlist(arg1: string): void;
			static domainMatches(arg1: java.lang.String, arg2: java.lang.String): boolean;
			static domainMatches(arg1: string, arg2: string): boolean;
			getCommentURL(): string;
			getDiscard(): boolean;
			getMaxAge(): any;
			hasExpired(): boolean;
			setCommentURL(arg1: java.lang.String): void;
			setCommentURL(arg1: string): void;
			setDiscard(arg1: boolean): void;
			setHttpOnly(arg1: boolean): void;
			setMaxAge(arg1: native.Long): void;
			setSecure(arg1: boolean): void;
			setVersion(arg1: number): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			toString(): string;
			getName(): string;
			getValue(): string;
			setValue(arg1: java.lang.String): void;
			setValue(arg1: string): void;
			getPath(): string;
			static parse(arg1: java.lang.String): java.util.IList<java.net.HttpCookie>;
			static parse(arg1: string): java.util.IList<java.net.HttpCookie>;
			getVersion(): number;
			getComment(): string;
			setComment(arg1: java.lang.String): void;
			setComment(arg1: string): void;
		}
		export interface IDatagramSocketImplFactory {
			createDatagramSocketImpl(): java.net.DatagramSocketImpl;
		}
		export class URLClassLoader extends java.security.SecureClassLoader implements java.io.ICloseable {
			constructor(arg1: native.Array<java.net.URL>, arg2: java.lang.ClassLoader, arg3: java.net.IURLStreamHandlerFactory);
			constructor(arg1: native.Array<java.net.URL>);
			constructor(arg1: native.Array<java.net.URL>, arg2: java.lang.ClassLoader);
			static class: java.lang.Class<java.net.URLClassLoader>;
			getResourceAsStream(arg1: java.lang.String): java.io.InputStream;
			getResourceAsStream(arg1: string): java.io.InputStream;
			static newInstance(arg1: native.Array<java.net.URL>): java.net.URLClassLoader;
			static newInstance(arg1: native.Array<java.net.URL>, arg2: java.lang.ClassLoader): java.net.URLClassLoader;
			findResource(arg1: java.lang.String): java.net.URL;
			findResource(arg1: string): java.net.URL;
			findResources(arg1: java.lang.String): java.util.IEnumeration<java.net.URL>;
			findResources(arg1: string): java.util.IEnumeration<java.net.URL>;
			close(): void;
			getURLs(): native.Array<java.net.URL>;
		}
		export class ContentHandlerFactory implements java.net.IContentHandlerFactory {
			constructor(implementation: java.net.IContentHandlerFactory);
			createContentHandler(arg1: java.lang.String): java.net.ContentHandler;
			createContentHandler(arg1: string): java.net.ContentHandler;
		}
		export class UnknownServiceException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.net.UnknownServiceException>;
		}
		export interface ISocketImplFactory {
			createSocketImpl(): java.net.SocketImpl;
		}
		export class Authenticator extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.Authenticator>;
			static setDefault(arg1: java.net.Authenticator): void;
			static requestPasswordAuthentication(arg1: java.lang.String, arg2: java.net.InetAddress, arg3: number, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String, arg7: java.net.URL, arg8: java.net.Authenticator.RequestorType): java.net.PasswordAuthentication;
			static requestPasswordAuthentication(arg1: string, arg2: java.net.InetAddress, arg3: number, arg4: string, arg5: string, arg6: string, arg7: java.net.URL, arg8: java.net.Authenticator.RequestorType): java.net.PasswordAuthentication;
			static requestPasswordAuthentication(arg1: java.lang.String, arg2: java.net.InetAddress, arg3: number, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String): java.net.PasswordAuthentication;
			static requestPasswordAuthentication(arg1: string, arg2: java.net.InetAddress, arg3: number, arg4: string, arg5: string, arg6: string): java.net.PasswordAuthentication;
			static requestPasswordAuthentication(arg1: java.net.InetAddress, arg2: number, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): java.net.PasswordAuthentication;
			static requestPasswordAuthentication(arg1: java.net.InetAddress, arg2: number, arg3: string, arg4: string, arg5: string): java.net.PasswordAuthentication;
		}
		export module Authenticator {
			export enum RequestorType {
				PROXY,
				SERVER
			}
			export module RequestorType {
				export function valueOf(arg1: java.lang.String): java.net.Authenticator.RequestorType;
				export function valueOf(arg1: string): java.net.Authenticator.RequestorType;
				export function values(): native.Array<java.net.Authenticator.RequestorType>;
			}
		}
		export class URLStreamHandler extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.URLStreamHandler>;
		}
		export interface IFileNameMap {
			getContentTypeFor(arg1: string): string;
		}
		export class DatagramSocket extends java.lang.Object implements java.io.ICloseable {
			constructor(arg1: number);
			constructor(arg1: java.net.SocketAddress);
			constructor();
			constructor(arg1: number, arg2: java.net.InetAddress);
			static class: java.lang.Class<java.net.DatagramSocket>;
			TrafficClass: number;
			ReuseAddress: boolean;
			Broadcast: boolean;
			ReceiveBufferSize: number;
			SendBufferSize: number;
			SoTimeout: number;
			close(): void;
			bind(arg1: java.net.SocketAddress): void;
			getChannel(): java.nio.channels.DatagramChannel;
			getPort(): number;
			connect(arg1: java.net.SocketAddress): void;
			connect(arg1: java.net.InetAddress, arg2: number): void;
			disconnect(): void;
			isClosed(): boolean;
			getInetAddress(): java.net.InetAddress;
			getLocalPort(): number;
			getLocalSocketAddress(): java.net.SocketAddress;
			getReceiveBufferSize(): number;
			getReuseAddress(): boolean;
			getSoTimeout(): number;
			isBound(): boolean;
			setReceiveBufferSize(arg1: number): void;
			setReuseAddress(arg1: boolean): void;
			setSoTimeout(arg1: number): void;
			getLocalAddress(): java.net.InetAddress;
			getRemoteSocketAddress(): java.net.SocketAddress;
			getSendBufferSize(): number;
			getTrafficClass(): number;
			isConnected(): boolean;
			setSendBufferSize(arg1: number): void;
			setTrafficClass(arg1: number): void;
			getBroadcast(): boolean;
			receive(arg1: java.net.DatagramPacket): void;
			send(arg1: java.net.DatagramPacket): void;
			setBroadcast(arg1: boolean): void;
			static setDatagramSocketImplFactory(arg1: java.net.IDatagramSocketImplFactory): void;
		}
		export class CookieStore implements java.net.ICookieStore {
			constructor(implementation: java.net.ICookieStore);
			getCookies(): java.util.IList<java.net.HttpCookie>;
			getURIs(): java.util.IList<java.net.URI>;
			add(arg1: java.net.URI, arg2: java.net.HttpCookie): void;
			get(arg1: java.net.URI): java.util.IList<java.net.HttpCookie>;
			remove(arg1: java.net.URI, arg2: java.net.HttpCookie): boolean;
			removeAll(): boolean;
		}
		export class SecureCacheResponse extends java.net.CacheResponse {
			constructor();
			static class: java.lang.Class<java.net.SecureCacheResponse>;
			getCipherSuite(): string;
			getLocalCertificateChain(): java.util.IList<java.security.cert.Certificate>;
			getLocalPrincipal(): java.security.IPrincipal;
			getPeerPrincipal(): java.security.IPrincipal;
			getServerCertificateChain(): java.util.IList<java.security.cert.Certificate>;
		}
		export class SocketPermission extends java.security.Permission implements java.io.ISerializable {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.net.SocketPermission>;
			hashCode(): number;
			equals(arg1: any): boolean;
			getActions(): string;
			implies(arg1: java.security.Permission): boolean;
			newPermissionCollection(): java.security.PermissionCollection;
		}
		export class IDN extends java.lang.Object {
			static ALLOW_UNASSIGNED: number;
			static USE_STD3_ASCII_RULES: number;
			static class: java.lang.Class<java.net.IDN>;
			static toASCII(arg1: java.lang.String, arg2: number): string;
			static toASCII(arg1: string, arg2: number): string;
			static toASCII(arg1: java.lang.String): string;
			static toASCII(arg1: string): string;
			static toUnicode(arg1: java.lang.String, arg2: number): string;
			static toUnicode(arg1: string, arg2: number): string;
			static toUnicode(arg1: java.lang.String): string;
			static toUnicode(arg1: string): string;
		}
		export class URLDecoder extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.URLDecoder>;
			static decode(arg1: java.lang.String): string;
			static decode(arg1: string): string;
			static decode(arg1: java.lang.String, arg2: java.lang.String): string;
			static decode(arg1: string, arg2: string): string;
		}
		export class SocketAddress extends java.lang.Object implements java.io.ISerializable {
			constructor();
			static class: java.lang.Class<java.net.SocketAddress>;
		}
		export class NetworkInterface extends java.lang.Object {
			static class: java.lang.Class<java.net.NetworkInterface>;
			static getByIndex(arg1: number): java.net.NetworkInterface;
			getHardwareAddress(): native.Array<native.Byte>;
			getInterfaceAddresses(): java.util.IList<java.net.InterfaceAddress>;
			getMTU(): number;
			getSubInterfaces(): java.util.IEnumeration<java.net.NetworkInterface>;
			isLoopback(): boolean;
			isPointToPoint(): boolean;
			isUp(): boolean;
			isVirtual(): boolean;
			supportsMulticast(): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getName(): string;
			getParent(): java.net.NetworkInterface;
			getDisplayName(): string;
			static getByName(arg1: java.lang.String): java.net.NetworkInterface;
			static getByName(arg1: string): java.net.NetworkInterface;
			getIndex(): number;
			getInetAddresses(): java.util.IEnumeration<java.net.InetAddress>;
			static getNetworkInterfaces(): java.util.IEnumeration<java.net.NetworkInterface>;
			static getByInetAddress(arg1: java.net.InetAddress): java.net.NetworkInterface;
		}
		export class ResponseCache extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.ResponseCache>;
			get(arg1: java.net.URI, arg2: java.lang.String, arg3: java.util.IMap<string, java.util.IList<string>>): java.net.CacheResponse;
			get(arg1: java.net.URI, arg2: string, arg3: java.util.IMap<string, java.util.IList<string>>): java.net.CacheResponse;
			static getDefault(): java.net.ResponseCache;
			put(arg1: java.net.URI, arg2: java.net.URLConnection): java.net.CacheRequest;
			static setDefault(arg1: java.net.ResponseCache): void;
		}
		export class ServerSocket extends java.lang.Object implements java.io.ICloseable {
			constructor(arg1: number, arg2: number, arg3: java.net.InetAddress);
			constructor(arg1: number, arg2: number);
			constructor(arg1: number);
			constructor();
			static class: java.lang.Class<java.net.ServerSocket>;
			ReuseAddress: boolean;
			ReceiveBufferSize: number;
			SoTimeout: number;
			toString(): string;
			close(): void;
			bind(arg1: java.net.SocketAddress, arg2: number): void;
			bind(arg1: java.net.SocketAddress): void;
			getChannel(): java.nio.channels.ServerSocketChannel;
			accept(): java.net.Socket;
			isClosed(): boolean;
			getInetAddress(): java.net.InetAddress;
			getLocalPort(): number;
			getLocalSocketAddress(): java.net.SocketAddress;
			getReceiveBufferSize(): number;
			getReuseAddress(): boolean;
			getSoTimeout(): number;
			isBound(): boolean;
			setPerformancePreferences(arg1: number, arg2: number, arg3: number): void;
			setReceiveBufferSize(arg1: number): void;
			setReuseAddress(arg1: boolean): void;
			setSoTimeout(arg1: number): void;
			static setSocketFactory(arg1: java.net.ISocketImplFactory): void;
		}
		export class DatagramPacket extends java.lang.Object {
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: java.net.SocketAddress);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: java.net.InetAddress, arg4: number);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: java.net.SocketAddress);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number);
			constructor(arg1: native.Array<native.Byte>, arg2: number);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: java.net.InetAddress, arg5: number);
			static class: java.lang.Class<java.net.DatagramPacket>;
			Data: native.Array<native.Byte>;
			Port: number;
			SocketAddress: java.net.SocketAddress;
			Address: java.net.InetAddress;
			Length: number;
			setLength(arg1: number): void;
			getOffset(): number;
			getAddress(): java.net.InetAddress;
			getLength(): number;
			getPort(): number;
			getData(): native.Array<native.Byte>;
			setData(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			setData(arg1: native.Array<native.Byte>): void;
			setAddress(arg1: java.net.InetAddress): void;
			setPort(arg1: number): void;
			getSocketAddress(): java.net.SocketAddress;
			setSocketAddress(arg1: java.net.SocketAddress): void;
		}
		export class CookieManager extends java.net.CookieHandler {
			constructor(arg1: java.net.ICookieStore, arg2: java.net.ICookiePolicy);
			constructor();
			static class: java.lang.Class<java.net.CookieManager>;
			getCookieStore(): java.net.ICookieStore;
			setCookiePolicy(arg1: java.net.ICookiePolicy): void;
			get(arg1: java.net.URI, arg2: java.util.IMap<string, java.util.IList<string>>): java.util.IMap<string, java.util.IList<string>>;
			put(arg1: java.net.URI, arg2: java.util.IMap<string, java.util.IList<string>>): void;
		}
		export class SocketException extends java.io.IOException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.net.SocketException>;
		}
		export class URISyntaxException extends java.lang.Exception {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
			constructor(arg1: string, arg2: string, arg3: number);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.net.URISyntaxException>;
			getInput(): string;
			getReason(): string;
			getMessage(): string;
			getIndex(): number;
		}
		export class PortUnreachableException extends java.net.SocketException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.net.PortUnreachableException>;
		}
		export interface ICookiePolicy {
			shouldAccept(arg1: java.net.URI, arg2: java.net.HttpCookie): boolean;
		}
		export module ICookiePolicy {
			var ACCEPT_ALL: java.net.ICookiePolicy;
			var ACCEPT_NONE: java.net.ICookiePolicy;
			var ACCEPT_ORIGINAL_SERVER: java.net.ICookiePolicy;
		}
		export class URLEncoder extends java.lang.Object {
			static class: java.lang.Class<java.net.URLEncoder>;
			static encode(arg1: java.lang.String): string;
			static encode(arg1: string): string;
			static encode(arg1: java.lang.String, arg2: java.lang.String): string;
			static encode(arg1: string, arg2: string): string;
		}
		export class CacheResponse extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.CacheResponse>;
			getBody(): java.io.InputStream;
			getHeaders(): java.util.IMap<string, java.util.IList<string>>;
		}
		export class ContentHandler extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.ContentHandler>;
			getContent(arg1: java.net.URLConnection): any;
			getContent(arg1: java.net.URLConnection, arg2: native.Array<java.lang.Class<any>>): any;
		}
		export class HttpURLConnection extends java.net.URLConnection {
			static HTTP_OK: number;
			static HTTP_CREATED: number;
			static HTTP_ACCEPTED: number;
			static HTTP_NOT_AUTHORITATIVE: number;
			static HTTP_NO_CONTENT: number;
			static HTTP_RESET: number;
			static HTTP_PARTIAL: number;
			static HTTP_MULT_CHOICE: number;
			static HTTP_MOVED_PERM: number;
			static HTTP_MOVED_TEMP: number;
			static HTTP_SEE_OTHER: number;
			static HTTP_NOT_MODIFIED: number;
			static HTTP_USE_PROXY: number;
			static HTTP_BAD_REQUEST: number;
			static HTTP_UNAUTHORIZED: number;
			static HTTP_PAYMENT_REQUIRED: number;
			static HTTP_FORBIDDEN: number;
			static HTTP_NOT_FOUND: number;
			static HTTP_BAD_METHOD: number;
			static HTTP_NOT_ACCEPTABLE: number;
			static HTTP_PROXY_AUTH: number;
			static HTTP_CLIENT_TIMEOUT: number;
			static HTTP_CONFLICT: number;
			static HTTP_GONE: number;
			static HTTP_LENGTH_REQUIRED: number;
			static HTTP_PRECON_FAILED: number;
			static HTTP_ENTITY_TOO_LARGE: number;
			static HTTP_REQ_TOO_LONG: number;
			static HTTP_UNSUPPORTED_TYPE: number;
			static HTTP_SERVER_ERROR: number;
			static HTTP_INTERNAL_ERROR: number;
			static HTTP_NOT_IMPLEMENTED: number;
			static HTTP_BAD_GATEWAY: number;
			static HTTP_UNAVAILABLE: number;
			static HTTP_GATEWAY_TIMEOUT: number;
			static HTTP_VERSION: number;
			static class: java.lang.Class<java.net.HttpURLConnection>;
			RequestMethod: string;
			InstanceFollowRedirects: boolean;
			getPermission(): java.security.Permission;
			getResponseCode(): number;
			setRequestMethod(arg1: java.lang.String): void;
			setRequestMethod(arg1: string): void;
			getHeaderField(arg1: number): string;
			getHeaderFieldKey(arg1: number): string;
			getHeaderFieldDate(arg1: java.lang.String, arg2: native.Long): any;
			getHeaderFieldDate(arg1: string, arg2: native.Long): any;
			disconnect(): void;
			getErrorStream(): java.io.InputStream;
			static getFollowRedirects(): boolean;
			getInstanceFollowRedirects(): boolean;
			getRequestMethod(): string;
			getResponseMessage(): string;
			setChunkedStreamingMode(arg1: number): void;
			setFixedLengthStreamingMode(arg1: number): void;
			setFixedLengthStreamingMode(arg1: native.Long): void;
			static setFollowRedirects(arg1: boolean): void;
			setInstanceFollowRedirects(arg1: boolean): void;
			usingProxy(): boolean;
			getHeaderField(arg1: java.lang.String): string;
			getHeaderField(arg1: string): string;
		}
		export class ProtocolException extends java.io.IOException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.net.ProtocolException>;
		}
		export class ConnectException extends java.net.SocketException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.net.ConnectException>;
		}
		export class NoRouteToHostException extends java.net.SocketException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.net.NoRouteToHostException>;
		}
		export class SocketImplFactory implements java.net.ISocketImplFactory {
			constructor(implementation: java.net.ISocketImplFactory);
			createSocketImpl(): java.net.SocketImpl;
		}
		export class Socket extends java.lang.Object implements java.io.ICloseable {
			constructor(arg1: java.lang.String, arg2: number, arg3: java.net.InetAddress, arg4: number);
			constructor(arg1: string, arg2: number, arg3: java.net.InetAddress, arg4: number);
			constructor(arg1: java.net.InetAddress, arg2: number, arg3: java.net.InetAddress, arg4: number);
			constructor(arg1: java.lang.String, arg2: number, arg3: boolean);
			constructor(arg1: string, arg2: number, arg3: boolean);
			constructor(arg1: java.net.InetAddress, arg2: number, arg3: boolean);
			constructor();
			constructor(arg1: java.net.Proxy);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			constructor(arg1: java.net.InetAddress, arg2: number);
			static class: java.lang.Class<java.net.Socket>;
			TcpNoDelay: boolean;
			TrafficClass: number;
			KeepAlive: boolean;
			ReuseAddress: boolean;
			OOBInline: boolean;
			ReceiveBufferSize: number;
			SendBufferSize: number;
			SoTimeout: number;
			toString(): string;
			close(): void;
			bind(arg1: java.net.SocketAddress): void;
			getChannel(): java.nio.channels.SocketChannel;
			getInputStream(): java.io.InputStream;
			getPort(): number;
			connect(arg1: java.net.SocketAddress, arg2: number): void;
			connect(arg1: java.net.SocketAddress): void;
			getOutputStream(): java.io.OutputStream;
			isClosed(): boolean;
			getInetAddress(): java.net.InetAddress;
			getLocalPort(): number;
			getLocalSocketAddress(): java.net.SocketAddress;
			getReceiveBufferSize(): number;
			getReuseAddress(): boolean;
			getSoTimeout(): number;
			isBound(): boolean;
			setPerformancePreferences(arg1: number, arg2: number, arg3: number): void;
			setReceiveBufferSize(arg1: number): void;
			setReuseAddress(arg1: boolean): void;
			setSoTimeout(arg1: number): void;
			sendUrgentData(arg1: number): void;
			shutdownInput(): void;
			shutdownOutput(): void;
			getKeepAlive(): boolean;
			getLocalAddress(): java.net.InetAddress;
			getOOBInline(): boolean;
			getRemoteSocketAddress(): java.net.SocketAddress;
			getSendBufferSize(): number;
			getSoLinger(): number;
			getTcpNoDelay(): boolean;
			getTrafficClass(): number;
			isConnected(): boolean;
			isInputShutdown(): boolean;
			isOutputShutdown(): boolean;
			setKeepAlive(arg1: boolean): void;
			setOOBInline(arg1: boolean): void;
			setSendBufferSize(arg1: number): void;
			setSoLinger(arg1: boolean, arg2: number): void;
			static setSocketImplFactory(arg1: java.net.ISocketImplFactory): void;
			setTcpNoDelay(arg1: boolean): void;
			setTrafficClass(arg1: number): void;
		}
		export class SocketImpl extends java.lang.Object implements java.net.ISocketOptions {
			constructor();
			static class: java.lang.Class<java.net.SocketImpl>;
			toString(): string;
			getOption(arg1: number): any;
			setOption(arg1: number, arg2: any): void;
		}
		export class DatagramSocketImplFactory implements java.net.IDatagramSocketImplFactory {
			constructor(implementation: java.net.IDatagramSocketImplFactory);
			createDatagramSocketImpl(): java.net.DatagramSocketImpl;
		}
		export class JarURLConnection extends java.net.URLConnection {
			static class: java.lang.Class<java.net.JarURLConnection>;
			getCertificates(): native.Array<java.security.cert.Certificate>;
			getAttributes(): java.util.jar.Attributes;
			getJarFile(): java.util.jar.JarFile;
			getJarFileURL(): java.net.URL;
			getMainAttributes(): java.util.jar.Attributes;
			getManifest(): java.util.jar.Manifest;
			getJarEntry(): java.util.jar.JarEntry;
			getEntryName(): string;
		}
		export class HttpRetryException extends java.io.IOException {
			constructor(arg1: java.lang.String, arg2: number, arg3: java.lang.String);
			constructor(arg1: string, arg2: number, arg3: string);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			static class: java.lang.Class<java.net.HttpRetryException>;
			getReason(): string;
			getLocation(): string;
			responseCode(): number;
		}
		export class ProxySelector extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.ProxySelector>;
			static getDefault(): java.net.ProxySelector;
			static setDefault(arg1: java.net.ProxySelector): void;
			select(arg1: java.net.URI): java.util.IList<java.net.Proxy>;
			connectFailed(arg1: java.net.URI, arg2: java.net.SocketAddress, arg3: java.io.IOException): void;
		}
		export class PasswordAuthentication extends java.lang.Object {
			constructor(arg1: java.lang.String, arg2: native.Array<string>);
			constructor(arg1: string, arg2: native.Array<string>);
			static class: java.lang.Class<java.net.PasswordAuthentication>;
			getPassword(): native.Array<string>;
			getUserName(): string;
		}
		export class Proxy extends java.lang.Object {
			constructor(arg1: java.net.Proxy.Type, arg2: java.net.SocketAddress);
			static NO_PROXY: java.net.Proxy;
			static class: java.lang.Class<java.net.Proxy>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			type(): java.net.Proxy.Type;
			address(): java.net.SocketAddress;
		}
		export module Proxy {
			export enum Type {
				DIRECT,
				HTTP,
				SOCKS
			}
			export module Type {
				export function valueOf(arg1: java.lang.String): java.net.Proxy.Type;
				export function valueOf(arg1: string): java.net.Proxy.Type;
				export function values(): native.Array<java.net.Proxy.Type>;
			}
		}
		export class NetPermission extends java.security.BasicPermission {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.net.NetPermission>;
		}
		export class URLStreamHandlerFactory implements java.net.IURLStreamHandlerFactory {
			constructor(implementation: java.net.IURLStreamHandlerFactory);
			createURLStreamHandler(arg1: java.lang.String): java.net.URLStreamHandler;
			createURLStreamHandler(arg1: string): java.net.URLStreamHandler;
		}
		export class Inet4Address extends java.net.InetAddress {
			static class: java.lang.Class<java.net.Inet4Address>;
			hashCode(): number;
			equals(arg1: any): boolean;
			getAddress(): native.Array<native.Byte>;
			getHostAddress(): string;
			isAnyLocalAddress(): boolean;
			isLinkLocalAddress(): boolean;
			isLoopbackAddress(): boolean;
			isMCGlobal(): boolean;
			isMCLinkLocal(): boolean;
			isMCNodeLocal(): boolean;
			isMCOrgLocal(): boolean;
			isMCSiteLocal(): boolean;
			isMulticastAddress(): boolean;
			isSiteLocalAddress(): boolean;
		}
		export class CookieHandler extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.CookieHandler>;
			get(arg1: java.net.URI, arg2: java.util.IMap<string, java.util.IList<string>>): java.util.IMap<string, java.util.IList<string>>;
			static getDefault(): java.net.CookieHandler;
			put(arg1: java.net.URI, arg2: java.util.IMap<string, java.util.IList<string>>): void;
			static setDefault(arg1: java.net.CookieHandler): void;
		}
		export class URL extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.net.URL, arg2: java.lang.String, arg3: java.net.URLStreamHandler);
			constructor(arg1: java.net.URL, arg2: string, arg3: java.net.URLStreamHandler);
			constructor(arg1: java.net.URL, arg2: java.lang.String);
			constructor(arg1: java.net.URL, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: number, arg4: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.String, arg5: java.net.URLStreamHandler);
			constructor(arg1: string, arg2: string, arg3: number, arg4: string, arg5: java.net.URLStreamHandler);
			static class: java.lang.Class<java.net.URL>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			openStream(): java.io.InputStream;
			getPath(): string;
			getAuthority(): string;
			getQuery(): string;
			toURI(): java.net.URI;
			getFile(): string;
			getHost(): string;
			getProtocol(): string;
			openConnection(): java.net.URLConnection;
			openConnection(arg1: java.net.Proxy): java.net.URLConnection;
			getRef(): string;
			getContent(): any;
			getContent(arg1: native.Array<java.lang.Class<any>>): any;
			getDefaultPort(): number;
			getPort(): number;
			getUserInfo(): string;
			sameFile(arg1: java.net.URL): boolean;
			static setURLStreamHandlerFactory(arg1: java.net.IURLStreamHandlerFactory): void;
			toExternalForm(): string;
		}
		export class Inet6Address extends java.net.InetAddress {
			static class: java.lang.Class<java.net.Inet6Address>;
			hashCode(): number;
			equals(arg1: any): boolean;
			getAddress(): native.Array<native.Byte>;
			getHostAddress(): string;
			static getByAddress(arg1: java.lang.String, arg2: native.Array<native.Byte>, arg3: java.net.NetworkInterface): java.net.Inet6Address;
			static getByAddress(arg1: string, arg2: native.Array<native.Byte>, arg3: java.net.NetworkInterface): java.net.Inet6Address;
			static getByAddress(arg1: java.lang.String, arg2: native.Array<native.Byte>, arg3: number): java.net.Inet6Address;
			static getByAddress(arg1: string, arg2: native.Array<native.Byte>, arg3: number): java.net.Inet6Address;
			isAnyLocalAddress(): boolean;
			isLinkLocalAddress(): boolean;
			isLoopbackAddress(): boolean;
			isMCGlobal(): boolean;
			isMCLinkLocal(): boolean;
			isMCNodeLocal(): boolean;
			isMCOrgLocal(): boolean;
			isMCSiteLocal(): boolean;
			isMulticastAddress(): boolean;
			isSiteLocalAddress(): boolean;
			getScopeId(): number;
			getScopedInterface(): java.net.NetworkInterface;
			isIPv4CompatibleAddress(): boolean;
			static getByAddress(arg1: java.lang.String, arg2: native.Array<native.Byte>): java.net.InetAddress;
			static getByAddress(arg1: string, arg2: native.Array<native.Byte>): java.net.InetAddress;
			static getByAddress(arg1: native.Array<native.Byte>): java.net.InetAddress;
		}
		export class FileNameMap implements java.net.IFileNameMap {
			constructor(implementation: java.net.IFileNameMap);
			getContentTypeFor(arg1: java.lang.String): string;
			getContentTypeFor(arg1: string): string;
		}
		export class URI extends java.lang.Object implements java.lang.IComparable<java.net.URI>, java.io.ISerializable {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string, arg4: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: java.lang.String, arg6: java.lang.String, arg7: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string, arg4: number, arg5: string, arg6: string, arg7: string);
			static class: java.lang.Class<java.net.URI>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: java.net.URI): number;
			compareTo(arg1: any): number;
			isAbsolute(): boolean;
			resolve(arg1: java.net.URI): java.net.URI;
			resolve(arg1: java.lang.String): java.net.URI;
			resolve(arg1: string): java.net.URI;
			normalize(): java.net.URI;
			getPath(): string;
			static create(arg1: java.lang.String): java.net.URI;
			static create(arg1: string): java.net.URI;
			getAuthority(): string;
			getFragment(): string;
			getQuery(): string;
			getScheme(): string;
			isOpaque(): boolean;
			toURL(): java.net.URL;
			getHost(): string;
			getPort(): number;
			getUserInfo(): string;
			getRawAuthority(): string;
			getRawFragment(): string;
			getRawPath(): string;
			getRawQuery(): string;
			getRawSchemeSpecificPart(): string;
			getRawUserInfo(): string;
			getSchemeSpecificPart(): string;
			parseServerAuthority(): java.net.URI;
			relativize(arg1: java.net.URI): java.net.URI;
			toASCIIString(): string;
		}
		export class MulticastSocket extends java.net.DatagramSocket {
			constructor(arg1: java.net.SocketAddress);
			constructor(arg1: number);
			constructor();
			static class: java.lang.Class<java.net.MulticastSocket>;
			Interface: java.net.InetAddress;
			TimeToLive: number;
			NetworkInterface: java.net.NetworkInterface;
			LoopbackMode: boolean;
			getTimeToLive(): number;
			send(arg1: java.net.DatagramPacket, arg2: native.Byte): void;
			getInterface(): java.net.InetAddress;
			getLoopbackMode(): boolean;
			getNetworkInterface(): java.net.NetworkInterface;
			getTTL(): number;
			joinGroup(arg1: java.net.InetAddress): void;
			joinGroup(arg1: java.net.SocketAddress, arg2: java.net.NetworkInterface): void;
			leaveGroup(arg1: java.net.InetAddress): void;
			leaveGroup(arg1: java.net.SocketAddress, arg2: java.net.NetworkInterface): void;
			setInterface(arg1: java.net.InetAddress): void;
			setLoopbackMode(arg1: boolean): void;
			setNetworkInterface(arg1: java.net.NetworkInterface): void;
			setTTL(arg1: native.Byte): void;
			setTimeToLive(arg1: number): void;
			send(arg1: java.net.DatagramPacket): void;
		}
		export class MalformedURLException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.net.MalformedURLException>;
		}
		export class CookiePolicy implements java.net.ICookiePolicy {
			constructor(implementation: java.net.ICookiePolicy);
			static ACCEPT_ALL: java.net.ICookiePolicy;
			static ACCEPT_NONE: java.net.ICookiePolicy;
			static ACCEPT_ORIGINAL_SERVER: java.net.ICookiePolicy;
			shouldAccept(arg1: java.net.URI, arg2: java.net.HttpCookie): boolean;
		}
		export class URLConnection extends java.lang.Object {
			static class: java.lang.Class<java.net.URLConnection>;
			AllowUserInteraction: boolean;
			ConnectTimeout: number;
			DoInput: boolean;
			UseCaches: boolean;
			DoOutput: boolean;
			DefaultUseCaches: boolean;
			ReadTimeout: number;
			toString(): string;
			getURL(): java.net.URL;
			getInputStream(): java.io.InputStream;
			getPermission(): java.security.Permission;
			getContent(): any;
			getContent(arg1: native.Array<java.lang.Class<any>>): any;
			connect(): void;
			setRequestProperty(arg1: java.lang.String, arg2: java.lang.String): void;
			setRequestProperty(arg1: string, arg2: string): void;
			getContentLength(): number;
			getContentLengthLong(): any;
			static getFileNameMap(): java.net.IFileNameMap;
			getHeaderField(arg1: number): string;
			getHeaderField(arg1: java.lang.String): string;
			getHeaderField(arg1: string): string;
			getHeaderFieldKey(arg1: number): string;
			getLastModified(): any;
			addRequestProperty(arg1: java.lang.String, arg2: java.lang.String): void;
			addRequestProperty(arg1: string, arg2: string): void;
			getContentType(): string;
			getRequestProperties(): java.util.IMap<string, java.util.IList<string>>;
			getRequestProperty(arg1: java.lang.String): string;
			getRequestProperty(arg1: string): string;
			static guessContentTypeFromName(arg1: java.lang.String): string;
			static guessContentTypeFromName(arg1: string): string;
			static guessContentTypeFromStream(arg1: java.io.InputStream): string;
			getAllowUserInteraction(): boolean;
			getConnectTimeout(): number;
			getContentEncoding(): string;
			getDate(): any;
			static getDefaultAllowUserInteraction(): boolean;
			static getDefaultRequestProperty(arg1: java.lang.String): string;
			static getDefaultRequestProperty(arg1: string): string;
			getDefaultUseCaches(): boolean;
			getDoInput(): boolean;
			getDoOutput(): boolean;
			getExpiration(): any;
			getHeaderFieldDate(arg1: java.lang.String, arg2: native.Long): any;
			getHeaderFieldDate(arg1: string, arg2: native.Long): any;
			getHeaderFieldInt(arg1: java.lang.String, arg2: number): number;
			getHeaderFieldInt(arg1: string, arg2: number): number;
			getHeaderFieldLong(arg1: java.lang.String, arg2: native.Long): any;
			getHeaderFieldLong(arg1: string, arg2: native.Long): any;
			getHeaderFields(): java.util.IMap<string, java.util.IList<string>>;
			getIfModifiedSince(): any;
			getOutputStream(): java.io.OutputStream;
			getReadTimeout(): number;
			getUseCaches(): boolean;
			setAllowUserInteraction(arg1: boolean): void;
			setConnectTimeout(arg1: number): void;
			static setContentHandlerFactory(arg1: java.net.IContentHandlerFactory): void;
			static setDefaultAllowUserInteraction(arg1: boolean): void;
			static setDefaultRequestProperty(arg1: java.lang.String, arg2: java.lang.String): void;
			static setDefaultRequestProperty(arg1: string, arg2: string): void;
			setDefaultUseCaches(arg1: boolean): void;
			setDoInput(arg1: boolean): void;
			setDoOutput(arg1: boolean): void;
			static setFileNameMap(arg1: java.net.IFileNameMap): void;
			setIfModifiedSince(arg1: native.Long): void;
			setReadTimeout(arg1: number): void;
			setUseCaches(arg1: boolean): void;
		}
		export class InterfaceAddress extends java.lang.Object {
			static class: java.lang.Class<java.net.InterfaceAddress>;
			getNetworkPrefixLength(): number;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getAddress(): java.net.InetAddress;
			getBroadcast(): java.net.InetAddress;
		}
		export interface IContentHandlerFactory {
			createContentHandler(arg1: string): java.net.ContentHandler;
		}
		export class SocketOptions implements java.net.ISocketOptions {
			constructor(implementation: java.net.ISocketOptions);
			static TCP_NODELAY: number;
			static SO_BINDADDR: number;
			static SO_REUSEADDR: number;
			static SO_BROADCAST: number;
			static IP_MULTICAST_IF: number;
			static IP_MULTICAST_IF2: number;
			static IP_MULTICAST_LOOP: number;
			static IP_TOS: number;
			static SO_LINGER: number;
			static SO_TIMEOUT: number;
			static SO_SNDBUF: number;
			static SO_RCVBUF: number;
			static SO_KEEPALIVE: number;
			static SO_OOBINLINE: number;
			getOption(arg1: number): any;
			setOption(arg1: number, arg2: any): void;
		}
		export class InetSocketAddress extends java.net.SocketAddress {
			constructor(arg1: java.net.InetAddress, arg2: number);
			constructor(arg1: number);
			constructor(arg1: java.lang.String, arg2: number);
			constructor(arg1: string, arg2: number);
			static class: java.lang.Class<java.net.InetSocketAddress>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getAddress(): java.net.InetAddress;
			getHostName(): string;
			getPort(): number;
			isUnresolved(): boolean;
			getHostString(): string;
			static createUnresolved(arg1: java.lang.String, arg2: number): java.net.InetSocketAddress;
			static createUnresolved(arg1: string, arg2: number): java.net.InetSocketAddress;
		}
		export class CacheRequest extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.net.CacheRequest>;
			getBody(): java.io.OutputStream;
			abort(): void;
		}
		export class BindException extends java.net.SocketException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.net.BindException>;
		}
		export class SocketTimeoutException extends java.io.InterruptedIOException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.net.SocketTimeoutException>;
		}
		export class DatagramSocketImpl extends java.lang.Object implements java.net.ISocketOptions {
			constructor();
			static class: java.lang.Class<java.net.DatagramSocketImpl>;
			getOption(arg1: number): any;
			setOption(arg1: number, arg2: any): void;
		}
		export interface ISocketOptions {
			getOption(arg1: number): any;
			setOption(arg1: number, arg2: any): void;
		}
		export module ISocketOptions {
			var TCP_NODELAY: number;
			var SO_BINDADDR: number;
			var SO_REUSEADDR: number;
			var SO_BROADCAST: number;
			var IP_MULTICAST_IF: number;
			var IP_MULTICAST_IF2: number;
			var IP_MULTICAST_LOOP: number;
			var IP_TOS: number;
			var SO_LINGER: number;
			var SO_TIMEOUT: number;
			var SO_SNDBUF: number;
			var SO_RCVBUF: number;
			var SO_KEEPALIVE: number;
			var SO_OOBINLINE: number;
		}
		export interface ICookieStore {
			getCookies(): java.util.IList<java.net.HttpCookie>;
			getURIs(): java.util.IList<java.net.URI>;
			add(arg1: java.net.URI, arg2: java.net.HttpCookie): void;
			get(arg1: java.net.URI): java.util.IList<java.net.HttpCookie>;
			remove(arg1: java.net.URI, arg2: java.net.HttpCookie): boolean;
			removeAll(): boolean;
		}
		export class InetAddress extends java.lang.Object implements java.io.ISerializable {
			static class: java.lang.Class<java.net.InetAddress>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getAddress(): native.Array<native.Byte>;
			getHostAddress(): string;
			getHostName(): string;
			static getByName(arg1: java.lang.String): java.net.InetAddress;
			static getByName(arg1: string): java.net.InetAddress;
			static getLoopbackAddress(): java.net.InetAddress;
			static getAllByName(arg1: java.lang.String): native.Array<java.net.InetAddress>;
			static getAllByName(arg1: string): native.Array<java.net.InetAddress>;
			static getByAddress(arg1: java.lang.String, arg2: native.Array<native.Byte>): java.net.InetAddress;
			static getByAddress(arg1: string, arg2: native.Array<native.Byte>): java.net.InetAddress;
			static getByAddress(arg1: native.Array<native.Byte>): java.net.InetAddress;
			getCanonicalHostName(): string;
			static getLocalHost(): java.net.InetAddress;
			isAnyLocalAddress(): boolean;
			isLinkLocalAddress(): boolean;
			isLoopbackAddress(): boolean;
			isMCGlobal(): boolean;
			isMCLinkLocal(): boolean;
			isMCNodeLocal(): boolean;
			isMCOrgLocal(): boolean;
			isMCSiteLocal(): boolean;
			isMulticastAddress(): boolean;
			isReachable(arg1: number): boolean;
			isReachable(arg1: java.net.NetworkInterface, arg2: number, arg3: number): boolean;
			isSiteLocalAddress(): boolean;
		}
		export interface IURLStreamHandlerFactory {
			createURLStreamHandler(arg1: string): java.net.URLStreamHandler;
		}
	}
	export module lang {
		export class CharSequence implements java.lang.ICharSequence {
			constructor(implementation: java.lang.ICharSequence);
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
		}
		export class EnumConstantNotPresentException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.Class<any>, arg2: java.lang.String);
			constructor(arg1: java.lang.Class<any>, arg2: string);
			static class: java.lang.Class<java.lang.EnumConstantNotPresentException>;
			constantName(): string;
			enumType(): java.lang.Class<any>;
		}
		export class SecurityException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.SecurityException>;
		}
		export interface IReadable {
			read(arg1: java.nio.CharBuffer): number;
		}
		export class Runnable implements java.lang.IRunnable {
			constructor(implementation: java.lang.IRunnable);
			run(): void;
		}
		export class Math extends java.lang.Object {
			static E: native.Double;
			static PI: native.Double;
			static class: java.lang.Class<java.lang.Math>;
			static min(arg1: native.Float, arg2: native.Float): number;
			static min(arg1: number, arg2: number): number;
			static min(arg1: native.Double, arg2: native.Double): any;
			static min(arg1: native.Long, arg2: native.Long): any;
			static max(arg1: native.Double, arg2: native.Double): any;
			static max(arg1: number, arg2: number): any;
			static max(arg1: native.Float, arg2: native.Float): number;
			static max(arg1: native.Long, arg2: native.Long): any;
			static abs(arg1: native.Float): number;
			static abs(arg1: native.Double): any;
			static abs(arg1: number): any;
			static abs(arg1: native.Long): any;
			static scalb(arg1: native.Float, arg2: number): number;
			static scalb(arg1: native.Double, arg2: number): any;
			static scalb(arg1: number, arg2: number): any;
			static getExponent(arg1: native.Double): number;
			static getExponent(arg1: number): number;
			static getExponent(arg1: native.Float): number;
			static signum(arg1: native.Double): any;
			static signum(arg1: number): any;
			static signum(arg1: native.Float): number;
			static IEEEremainder(arg1: native.Double, arg2: native.Double): any;
			static IEEEremainder(arg1: number, arg2: number): any;
			static acos(arg1: native.Double): any;
			static acos(arg1: number): any;
			static asin(arg1: native.Double): any;
			static asin(arg1: number): any;
			static atan(arg1: native.Double): any;
			static atan(arg1: number): any;
			static atan2(arg1: native.Double, arg2: native.Double): any;
			static atan2(arg1: number, arg2: number): any;
			static cbrt(arg1: native.Double): any;
			static cbrt(arg1: number): any;
			static ceil(arg1: native.Double): any;
			static ceil(arg1: number): any;
			static copySign(arg1: native.Double, arg2: native.Double): any;
			static copySign(arg1: number, arg2: number): any;
			static copySign(arg1: native.Float, arg2: native.Float): number;
			static cos(arg1: native.Double): any;
			static cos(arg1: number): any;
			static cosh(arg1: native.Double): any;
			static cosh(arg1: number): any;
			static exp(arg1: native.Double): any;
			static exp(arg1: number): any;
			static expm1(arg1: native.Double): any;
			static expm1(arg1: number): any;
			static floor(arg1: native.Double): any;
			static floor(arg1: number): any;
			static hypot(arg1: native.Double, arg2: native.Double): any;
			static hypot(arg1: number, arg2: number): any;
			static log(arg1: native.Double): any;
			static log(arg1: number): any;
			static log10(arg1: native.Double): any;
			static log10(arg1: number): any;
			static log1p(arg1: native.Double): any;
			static log1p(arg1: number): any;
			static nextAfter(arg1: native.Float, arg2: native.Double): number;
			static nextAfter(arg1: native.Float, arg2: number): number;
			static nextAfter(arg1: native.Double, arg2: native.Double): any;
			static nextAfter(arg1: number, arg2: number): any;
			static nextUp(arg1: native.Double): any;
			static nextUp(arg1: number): any;
			static nextUp(arg1: native.Float): number;
			static pow(arg1: native.Double, arg2: native.Double): any;
			static pow(arg1: number, arg2: number): any;
			static random(): any;
			static rint(arg1: native.Double): any;
			static rint(arg1: number): any;
			static round(arg1: native.Float): number;
			static round(arg1: native.Double): any;
			static round(arg1: number): any;
			static sin(arg1: native.Double): any;
			static sin(arg1: number): any;
			static sinh(arg1: native.Double): any;
			static sinh(arg1: number): any;
			static sqrt(arg1: native.Double): any;
			static sqrt(arg1: number): any;
			static tan(arg1: native.Double): any;
			static tan(arg1: number): any;
			static tanh(arg1: native.Double): any;
			static tanh(arg1: number): any;
			static toDegrees(arg1: native.Double): any;
			static toDegrees(arg1: number): any;
			static toRadians(arg1: native.Double): any;
			static toRadians(arg1: number): any;
			static ulp(arg1: native.Double): any;
			static ulp(arg1: number): any;
			static ulp(arg1: native.Float): number;
		}
		export class Short extends java.lang.Number implements java.lang.IComparable<java.lang.Short> {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: native.Short);
			static MIN_VALUE: native.Short;
			static MAX_VALUE: native.Short;
			static TYPE: java.lang.Class<java.lang.Short>;
			static SIZE: number;
			static class: java.lang.Class<java.lang.Short>;
			private __java_lang_Short: any;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			static toString(arg1: native.Short): string;
			static compare(arg1: native.Short, arg2: native.Short): number;
			compareTo(arg1: any): number;
			compareTo(arg1: java.lang.Short): number;
			static decode(arg1: java.lang.String): java.lang.Short;
			static decode(arg1: string): java.lang.Short;
			static valueOf(arg1: java.lang.String, arg2: number): java.lang.Short;
			static valueOf(arg1: string, arg2: number): java.lang.Short;
			static valueOf(arg1: java.lang.String): java.lang.Short;
			static valueOf(arg1: string): java.lang.Short;
			static valueOf(arg1: native.Short): java.lang.Short;
			longValue(): any;
			intValue(): number;
			static reverseBytes(arg1: native.Short): number;
			byteValue(): number;
			doubleValue(): any;
			floatValue(): number;
			shortValue(): number;
			static parseShort(arg1: java.lang.String, arg2: number): number;
			static parseShort(arg1: string, arg2: number): number;
			static parseShort(arg1: java.lang.String): number;
			static parseShort(arg1: string): number;
		}
		export interface IComparable<T> {
			compareTo(arg1: T): number;
		}
		export interface IDeprecated extends java.lang.annotation.IAnnotation {
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class Comparable<T> implements java.lang.IComparable<T> {
			constructor(implementation: java.lang.IComparable<T>);
			compareTo(arg1: T): number;
		}
		export class InternalError extends java.lang.VirtualMachineError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.InternalError>;
		}
		export class Compiler extends java.lang.Object {
			static class: java.lang.Class<java.lang.Compiler>;
			static command(arg1: any): any;
			static compileClass(arg1: java.lang.Class<any>): boolean;
			static compileClasses(arg1: java.lang.String): boolean;
			static compileClasses(arg1: string): boolean;
			static disable(): void;
			static enable(): void;
		}
		export module annotation {
			export enum RetentionPolicy {
				SOURCE,
				CLASS,
				RUNTIME
			}
			export module RetentionPolicy {
				export function valueOf(arg1: java.lang.String): java.lang.annotation.RetentionPolicy;
				export function valueOf(arg1: string): java.lang.annotation.RetentionPolicy;
				export function values(): native.Array<java.lang.annotation.RetentionPolicy>;
			}
			export interface IRetention extends java.lang.annotation.IAnnotation {
				value(): java.lang.annotation.RetentionPolicy;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class AnnotationTypeMismatchException extends java.lang.RuntimeException {
				constructor(arg1: java.lang.reflect.Method, arg2: java.lang.String);
				constructor(arg1: java.lang.reflect.Method, arg2: string);
				static class: java.lang.Class<java.lang.annotation.AnnotationTypeMismatchException>;
				foundType(): string;
				element(): java.lang.reflect.Method;
			}
			export interface IInherited extends java.lang.annotation.IAnnotation {
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export enum ElementType {
				TYPE,
				FIELD,
				METHOD,
				PARAMETER,
				CONSTRUCTOR,
				LOCAL_VARIABLE,
				ANNOTATION_TYPE,
				PACKAGE
			}
			export module ElementType {
				export function valueOf(arg1: java.lang.String): java.lang.annotation.ElementType;
				export function valueOf(arg1: string): java.lang.annotation.ElementType;
				export function values(): native.Array<java.lang.annotation.ElementType>;
			}
			export interface ITarget extends java.lang.annotation.IAnnotation {
				value(): native.Array<java.lang.annotation.ElementType>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export interface IAnnotation {
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class IncompleteAnnotationException extends java.lang.RuntimeException {
				constructor(arg1: java.lang.Class<any>, arg2: java.lang.String);
				constructor(arg1: java.lang.Class<any>, arg2: string);
				static class: java.lang.Class<java.lang.annotation.IncompleteAnnotationException>;
				elementName(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class Retention implements java.lang.annotation.IAnnotation, java.lang.annotation.IRetention {
				constructor(implementation: java.lang.annotation.IRetention);
				value(): java.lang.annotation.RetentionPolicy;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export interface IDocumented extends java.lang.annotation.IAnnotation {
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class Documented implements java.lang.annotation.IAnnotation, java.lang.annotation.IDocumented {
				constructor(implementation: java.lang.annotation.IDocumented);
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class Target implements java.lang.annotation.IAnnotation, java.lang.annotation.ITarget {
				constructor(implementation: java.lang.annotation.ITarget);
				value(): native.Array<java.lang.annotation.ElementType>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class Annotation implements java.lang.annotation.IAnnotation {
				constructor(implementation: java.lang.annotation.IAnnotation);
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
			export class AnnotationFormatError extends java.lang.Error {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.Throwable);
				static class: java.lang.Class<java.lang.annotation.AnnotationFormatError>;
			}
			export class Inherited implements java.lang.annotation.IAnnotation, java.lang.annotation.IInherited {
				constructor(implementation: java.lang.annotation.IInherited);
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				annotationType(): java.lang.Class<any>;
			}
		}
		export class IncompatibleClassChangeError extends java.lang.LinkageError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.IncompatibleClassChangeError>;
		}
		export class Thread extends java.lang.Object implements java.lang.IRunnable {
			constructor(arg1: java.lang.ThreadGroup, arg2: java.lang.IRunnable);
			constructor();
			constructor(arg1: java.lang.IRunnable);
			constructor(arg1: java.lang.ThreadGroup, arg2: java.lang.IRunnable, arg3: java.lang.String);
			constructor(arg1: java.lang.ThreadGroup, arg2: java.lang.IRunnable, arg3: string);
			constructor(arg1: java.lang.IRunnable, arg2: java.lang.String);
			constructor(arg1: java.lang.IRunnable, arg2: string);
			constructor(arg1: java.lang.ThreadGroup, arg2: java.lang.String);
			constructor(arg1: java.lang.ThreadGroup, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.ThreadGroup, arg2: java.lang.IRunnable, arg3: java.lang.String, arg4: native.Long);
			constructor(arg1: java.lang.ThreadGroup, arg2: java.lang.IRunnable, arg3: string, arg4: native.Long);
			static MIN_PRIORITY: number;
			static NORM_PRIORITY: number;
			static MAX_PRIORITY: number;
			static class: java.lang.Class<java.lang.Thread>;
			Name: string;
			UncaughtExceptionHandler: java.lang.Thread.IUncaughtExceptionHandler;
			ContextClassLoader: java.lang.ClassLoader;
			Priority: number;
			toString(): string;
			getName(): string;
			static currentThread(): java.lang.Thread;
			getThreadGroup(): java.lang.ThreadGroup;
			getStackTrace(): native.Array<java.lang.StackTraceElement>;
			static holdsLock(arg1: any): boolean;
			static dumpStack(): void;
			setDaemon(arg1: boolean): void;
			setPriority(arg1: number): void;
			start(): void;
			static activeCount(): number;
			checkAccess(): void;
			countStackFrames(): number;
			destroy(): void;
			static enumerate(arg1: native.Array<java.lang.Thread>): number;
			static getAllStackTraces(): java.util.IMap<java.lang.Thread, native.Array<java.lang.StackTraceElement>>;
			getContextClassLoader(): java.lang.ClassLoader;
			static getDefaultUncaughtExceptionHandler(): java.lang.Thread.IUncaughtExceptionHandler;
			getId(): any;
			getPriority(): number;
			getState(): java.lang.Thread.State;
			getUncaughtExceptionHandler(): java.lang.Thread.IUncaughtExceptionHandler;
			interrupt(): void;
			static interrupted(): boolean;
			isAlive(): boolean;
			isDaemon(): boolean;
			isInterrupted(): boolean;
			join(arg1: native.Long): void;
			join(): void;
			join(arg1: native.Long, arg2: number): void;
			resume(): void;
			run(): void;
			setContextClassLoader(arg1: java.lang.ClassLoader): void;
			static setDefaultUncaughtExceptionHandler(arg1: java.lang.Thread.IUncaughtExceptionHandler): void;
			setName(arg1: java.lang.String): void;
			setName(arg1: string): void;
			setUncaughtExceptionHandler(arg1: java.lang.Thread.IUncaughtExceptionHandler): void;
			static sleep(arg1: native.Long, arg2: number): void;
			static sleep(arg1: native.Long): void;
			stop(arg1: java.lang.Throwable): void;
			stop(): void;
			suspend(): void;
			static yield(): void;
		}
		export module Thread {
			export class UncaughtExceptionHandler implements java.lang.Thread.IUncaughtExceptionHandler {
				constructor(implementation: java.lang.Thread.IUncaughtExceptionHandler);
				uncaughtException(arg1: java.lang.Thread, arg2: java.lang.Throwable): void;
			}
			export enum State {
				NEW,
				RUNNABLE,
				BLOCKED,
				WAITING,
				TIMED_WAITING,
				TERMINATED
			}
			export module State {
				export function valueOf(arg1: java.lang.String): java.lang.Thread.State;
				export function valueOf(arg1: string): java.lang.Thread.State;
				export function values(): native.Array<java.lang.Thread.State>;
			}
			export interface IUncaughtExceptionHandler {
				uncaughtException(arg1: java.lang.Thread, arg2: java.lang.Throwable): void;
			}
		}
		export class InterruptedException extends java.lang.Exception {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.InterruptedException>;
		}
		export class Long extends java.lang.Number implements java.lang.IComparable<java.lang.Long> {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: native.Long);
			static MIN_VALUE: native.Long;
			static MAX_VALUE: native.Long;
			static TYPE: java.lang.Class<java.lang.Long>;
			static SIZE: number;
			static class: java.lang.Class<java.lang.Long>;
			private __java_lang_Long: any;
			hashCode(): number;
			equals(arg1: any): boolean;
			static toString(arg1: native.Long, arg2: number): string;
			toString(): string;
			static toString(arg1: native.Long): string;
			static toHexString(arg1: native.Long): string;
			static compare(arg1: native.Long, arg2: native.Long): number;
			compareTo(arg1: java.lang.Long): number;
			compareTo(arg1: any): number;
			static decode(arg1: java.lang.String): java.lang.Long;
			static decode(arg1: string): java.lang.Long;
			static valueOf(arg1: native.Long): java.lang.Long;
			static valueOf(arg1: java.lang.String, arg2: number): java.lang.Long;
			static valueOf(arg1: string, arg2: number): java.lang.Long;
			static valueOf(arg1: java.lang.String): java.lang.Long;
			static valueOf(arg1: string): java.lang.Long;
			static getLong(arg1: java.lang.String): java.lang.Long;
			static getLong(arg1: string): java.lang.Long;
			static getLong(arg1: java.lang.String, arg2: native.Long): java.lang.Long;
			static getLong(arg1: string, arg2: native.Long): java.lang.Long;
			static getLong(arg1: java.lang.String, arg2: java.lang.Long): java.lang.Long;
			static getLong(arg1: string, arg2: java.lang.Long): java.lang.Long;
			longValue(): any;
			intValue(): number;
			static reverse(arg1: native.Long): any;
			static reverseBytes(arg1: native.Long): any;
			byteValue(): number;
			doubleValue(): any;
			floatValue(): number;
			shortValue(): number;
			static bitCount(arg1: native.Long): number;
			static highestOneBit(arg1: native.Long): any;
			static lowestOneBit(arg1: native.Long): any;
			static numberOfLeadingZeros(arg1: native.Long): number;
			static numberOfTrailingZeros(arg1: native.Long): number;
			static rotateLeft(arg1: native.Long, arg2: number): any;
			static rotateRight(arg1: native.Long, arg2: number): any;
			static signum(arg1: native.Long): number;
			static toBinaryString(arg1: native.Long): string;
			static toOctalString(arg1: native.Long): string;
			static parseLong(arg1: java.lang.String): any;
			static parseLong(arg1: string): any;
			static parseLong(arg1: java.lang.String, arg2: number): any;
			static parseLong(arg1: string, arg2: number): any;
		}
		export class Cloneable implements java.lang.ICloneable {
			constructor(implementation: java.lang.ICloneable);
		}
		export class StackTraceElement extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: number);
			constructor(arg1: string, arg2: string, arg3: string, arg4: number);
			static class: java.lang.Class<java.lang.StackTraceElement>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getClassName(): string;
			getFileName(): string;
			getLineNumber(): number;
			getMethodName(): string;
			isNativeMethod(): boolean;
		}
		export class InstantiationError extends java.lang.IncompatibleClassChangeError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.InstantiationError>;
		}
		export class Byte extends java.lang.Number implements java.lang.IComparable<java.lang.Byte> {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: native.Byte);
			static MIN_VALUE: native.Byte;
			static MAX_VALUE: native.Byte;
			static TYPE: java.lang.Class<java.lang.Byte>;
			static SIZE: number;
			static class: java.lang.Class<java.lang.Byte>;
			private __java_lang_Byte: any;
			hashCode(): number;
			equals(arg1: any): boolean;
			static toString(arg1: native.Byte): string;
			toString(): string;
			static compare(arg1: native.Byte, arg2: native.Byte): number;
			compareTo(arg1: any): number;
			compareTo(arg1: java.lang.Byte): number;
			static decode(arg1: java.lang.String): java.lang.Byte;
			static decode(arg1: string): java.lang.Byte;
			static valueOf(arg1: java.lang.String): java.lang.Byte;
			static valueOf(arg1: string): java.lang.Byte;
			static valueOf(arg1: java.lang.String, arg2: number): java.lang.Byte;
			static valueOf(arg1: string, arg2: number): java.lang.Byte;
			static valueOf(arg1: native.Byte): java.lang.Byte;
			longValue(): any;
			intValue(): number;
			byteValue(): number;
			doubleValue(): any;
			floatValue(): number;
			shortValue(): number;
			static parseByte(arg1: java.lang.String, arg2: number): number;
			static parseByte(arg1: string, arg2: number): number;
			static parseByte(arg1: java.lang.String): number;
			static parseByte(arg1: string): number;
		}
		export class ClassNotFoundException {
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.ClassNotFoundException>;
			getCause(): java.lang.Throwable;
			getException(): java.lang.Throwable;
		}
		export class Class<T> extends java.lang.Object implements java.io.ISerializable, java.lang.reflect.IGenericDeclaration, java.lang.reflect.IType, java.lang.reflect.IAnnotatedElement {
			static class: java.lang.Class<java.lang.Class<any>>;
			toString(): string;
			getName(): string;
			asSubclass<U>(arg1: java.lang.Class<U>): java.lang.Class<any>;
			cast(arg1: any): T;
			desiredAssertionStatus(): boolean;
			static forName(arg1: java.lang.String, arg2: boolean, arg3: java.lang.ClassLoader): java.lang.Class<any>;
			static forName(arg1: string, arg2: boolean, arg3: java.lang.ClassLoader): java.lang.Class<any>;
			static forName(arg1: java.lang.String): java.lang.Class<any>;
			static forName(arg1: string): java.lang.Class<any>;
			getAnnotation<A extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<A>): A;
			getAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
			getCanonicalName(): string;
			getClassLoader(): java.lang.ClassLoader;
			getClasses(): native.Array<java.lang.Class<any>>;
			getComponentType(): java.lang.Class<any>;
			getConstructor(arg1: native.Array<java.lang.Class<any>>): java.lang.reflect.Constructor<T>;
			getConstructors(): native.Array<java.lang.reflect.Constructor<any>>;
			getDeclaredAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
			getDeclaredClasses(): native.Array<java.lang.Class<any>>;
			getDeclaredConstructor(arg1: native.Array<java.lang.Class<any>>): java.lang.reflect.Constructor<T>;
			getDeclaredConstructors(): native.Array<java.lang.reflect.Constructor<any>>;
			getDeclaredField(arg1: java.lang.String): java.lang.reflect.Field;
			getDeclaredField(arg1: string): java.lang.reflect.Field;
			getDeclaredFields(): native.Array<java.lang.reflect.Field>;
			getDeclaredMethod(arg1: java.lang.String, arg2: native.Array<java.lang.Class<any>>): java.lang.reflect.Method;
			getDeclaredMethod(arg1: string, arg2: native.Array<java.lang.Class<any>>): java.lang.reflect.Method;
			getDeclaredMethods(): native.Array<java.lang.reflect.Method>;
			getDeclaringClass(): java.lang.Class<any>;
			getEnclosingClass(): java.lang.Class<any>;
			getEnclosingConstructor(): java.lang.reflect.Constructor<any>;
			getEnclosingMethod(): java.lang.reflect.Method;
			getEnumConstants(): native.Array<T>;
			getField(arg1: java.lang.String): java.lang.reflect.Field;
			getField(arg1: string): java.lang.reflect.Field;
			getFields(): native.Array<java.lang.reflect.Field>;
			getGenericInterfaces(): native.Array<java.lang.reflect.IType>;
			getGenericSuperclass(): java.lang.reflect.IType;
			getInterfaces(): native.Array<java.lang.Class<any>>;
			getMethod(arg1: java.lang.String, arg2: native.Array<java.lang.Class<any>>): java.lang.reflect.Method;
			getMethod(arg1: string, arg2: native.Array<java.lang.Class<any>>): java.lang.reflect.Method;
			getMethods(): native.Array<java.lang.reflect.Method>;
			getModifiers(): number;
			getPackage(): java.lang.Package;
			getProtectionDomain(): java.security.ProtectionDomain;
			getResource(arg1: java.lang.String): java.net.URL;
			getResource(arg1: string): java.net.URL;
			getResourceAsStream(arg1: java.lang.String): java.io.InputStream;
			getResourceAsStream(arg1: string): java.io.InputStream;
			getSigners(): native.Array<any>;
			getSimpleName(): string;
			getSuperclass(): java.lang.Class<any>;
			getTypeParameters(): native.Array<java.lang.reflect.ITypeVariable<java.lang.Class<T>>>;
			isAnnotation(): boolean;
			isAnnotationPresent(arg1: java.lang.Class<any>): boolean;
			isAnonymousClass(): boolean;
			isArray(): boolean;
			isAssignableFrom(arg1: java.lang.Class<any>): boolean;
			isEnum(): boolean;
			isInstance(arg1: any): boolean;
			isInterface(): boolean;
			isLocalClass(): boolean;
			isMemberClass(): boolean;
			isPrimitive(): boolean;
			isSynthetic(): boolean;
			newInstance(): T;
		}
		export interface IOverride extends java.lang.annotation.IAnnotation {
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class IndexOutOfBoundsException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.IndexOutOfBoundsException>;
		}
		export class Throwable extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.Throwable>;
			StackTrace: native.Array<java.lang.StackTraceElement>;
			toString(): string;
			getCause(): java.lang.Throwable;
			getMessage(): string;
			getLocalizedMessage(): string;
			initCause(arg1: java.lang.Throwable): java.lang.Throwable;
			printStackTrace(): void;
			printStackTrace(arg1: java.io.PrintStream): void;
			printStackTrace(arg1: java.io.PrintWriter): void;
			fillInStackTrace(): java.lang.Throwable;
			getStackTrace(): native.Array<java.lang.StackTraceElement>;
			setStackTrace(arg1: native.Array<java.lang.StackTraceElement>): void;
			addSuppressed(arg1: java.lang.Throwable): void;
			getSuppressed(): native.Array<java.lang.Throwable>;
		}
		export class Double extends java.lang.Number implements java.lang.IComparable<java.lang.Double> {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: native.Double);
			constructor(arg1: number);
			static POSITIVE_INFINITY: native.Double;
			static NEGATIVE_INFINITY: native.Double;
			static NaN: native.Double;
			static MAX_VALUE: native.Double;
			static MIN_NORMAL: native.Double;
			static MIN_VALUE: native.Double;
			static MAX_EXPONENT: number;
			static MIN_EXPONENT: number;
			static SIZE: number;
			static TYPE: java.lang.Class<java.lang.Double>;
			static class: java.lang.Class<java.lang.Double>;
			private __java_lang_Double: any;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			static toString(arg1: native.Double): string;
			static toString(arg1: number): string;
			static toHexString(arg1: native.Double): string;
			static toHexString(arg1: number): string;
			static compare(arg1: native.Double, arg2: native.Double): number;
			static compare(arg1: number, arg2: number): number;
			compareTo(arg1: java.lang.Double): number;
			compareTo(arg1: any): number;
			static valueOf(arg1: native.Double): java.lang.Double;
			static valueOf(arg1: number): java.lang.Double;
			static valueOf(arg1: java.lang.String): java.lang.Double;
			static valueOf(arg1: string): java.lang.Double;
			static isNaN(arg1: native.Double): boolean;
			static isNaN(arg1: number): boolean;
			isNaN(): boolean;
			longValue(): any;
			intValue(): number;
			byteValue(): number;
			doubleValue(): any;
			floatValue(): number;
			static isInfinite(arg1: native.Double): boolean;
			static isInfinite(arg1: number): boolean;
			isInfinite(): boolean;
			shortValue(): number;
			static doubleToLongBits(arg1: native.Double): any;
			static doubleToLongBits(arg1: number): any;
			static doubleToRawLongBits(arg1: native.Double): any;
			static doubleToRawLongBits(arg1: number): any;
			static longBitsToDouble(arg1: native.Long): any;
			static parseDouble(arg1: java.lang.String): any;
			static parseDouble(arg1: string): any;
		}
		export class NoSuchMethodException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.NoSuchMethodException>;
		}
		export class StackOverflowError extends java.lang.VirtualMachineError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.StackOverflowError>;
		}
		export interface ICloneable {
		}
		export class Deprecated implements java.lang.annotation.IAnnotation, java.lang.IDeprecated {
			constructor(implementation: java.lang.IDeprecated);
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class ThreadGroup extends java.lang.Object implements java.lang.Thread.IUncaughtExceptionHandler {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.ThreadGroup, arg2: java.lang.String);
			constructor(arg1: java.lang.ThreadGroup, arg2: string);
			static class: java.lang.Class<java.lang.ThreadGroup>;
			MaxPriority: number;
			toString(): string;
			getName(): string;
			getParent(): java.lang.ThreadGroup;
			setDaemon(arg1: boolean): void;
			activeCount(): number;
			checkAccess(): void;
			destroy(): void;
			enumerate(arg1: native.Array<java.lang.ThreadGroup>, arg2: boolean): number;
			enumerate(arg1: native.Array<java.lang.ThreadGroup>): number;
			getMaxPriority(): number;
			interrupt(): void;
			isDaemon(): boolean;
			resume(): void;
			stop(): void;
			suspend(): void;
			uncaughtException(arg1: java.lang.Thread, arg2: java.lang.Throwable): void;
			activeGroupCount(): number;
			allowThreadSuspension(arg1: boolean): boolean;
			isDestroyed(): boolean;
			list(): void;
			parentOf(arg1: java.lang.ThreadGroup): boolean;
			setMaxPriority(arg1: number): void;
		}
		export class StringIndexOutOfBoundsException extends java.lang.IndexOutOfBoundsException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: number);
			static class: java.lang.Class<java.lang.StringIndexOutOfBoundsException>;
		}
		export class NumberFormatException extends java.lang.IllegalArgumentException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.NumberFormatException>;
		}
		export interface IIterable<T> {
			iterator(): java.util.IIterator<T>;
		}
		export class UnsatisfiedLinkError extends java.lang.LinkageError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.UnsatisfiedLinkError>;
		}
		export class Object {
			constructor();
			static class: java.lang.Class<java.lang.Object>;
			getClass(): java.lang.Class<any>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			notify(): void;
			notifyAll(): void;
			wait(arg1: native.Long, arg2: number): void;
			wait(): void;
			wait(arg1: native.Long): void;
		}
		export class Float extends java.lang.Number implements java.lang.IComparable<java.lang.Float> {
			constructor(arg1: native.Float);
			constructor(arg1: native.Double);
			constructor(arg1: number);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static POSITIVE_INFINITY: native.Float;
			static NEGATIVE_INFINITY: native.Float;
			static NaN: native.Float;
			static MAX_VALUE: native.Float;
			static MIN_NORMAL: native.Float;
			static MIN_VALUE: native.Float;
			static MAX_EXPONENT: number;
			static MIN_EXPONENT: number;
			static SIZE: number;
			static TYPE: java.lang.Class<java.lang.Float>;
			static class: java.lang.Class<java.lang.Float>;
			private __java_lang_Float: any;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			static toString(arg1: native.Float): string;
			static toHexString(arg1: native.Float): string;
			static compare(arg1: native.Float, arg2: native.Float): number;
			compareTo(arg1: any): number;
			compareTo(arg1: java.lang.Float): number;
			static valueOf(arg1: native.Float): java.lang.Float;
			static valueOf(arg1: java.lang.String): java.lang.Float;
			static valueOf(arg1: string): java.lang.Float;
			static isNaN(arg1: native.Float): boolean;
			isNaN(): boolean;
			longValue(): any;
			intValue(): number;
			byteValue(): number;
			doubleValue(): any;
			static floatToIntBits(arg1: native.Float): number;
			static floatToRawIntBits(arg1: native.Float): number;
			floatValue(): number;
			static intBitsToFloat(arg1: number): number;
			isInfinite(): boolean;
			static isInfinite(arg1: native.Float): boolean;
			static parseFloat(arg1: java.lang.String): number;
			static parseFloat(arg1: string): number;
			shortValue(): number;
		}
		export class IllegalStateException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.IllegalStateException>;
		}
		export class Character extends java.lang.Object implements java.io.ISerializable, java.lang.IComparable<java.lang.Character> {
			constructor(arg1: string);
			static MIN_RADIX: number;
			static MAX_RADIX: number;
			static MIN_VALUE: string;
			static MAX_VALUE: string;
			static TYPE: java.lang.Class<java.lang.Character>;
			static UNASSIGNED: native.Byte;
			static UPPERCASE_LETTER: native.Byte;
			static LOWERCASE_LETTER: native.Byte;
			static TITLECASE_LETTER: native.Byte;
			static MODIFIER_LETTER: native.Byte;
			static OTHER_LETTER: native.Byte;
			static NON_SPACING_MARK: native.Byte;
			static ENCLOSING_MARK: native.Byte;
			static COMBINING_SPACING_MARK: native.Byte;
			static DECIMAL_DIGIT_NUMBER: native.Byte;
			static LETTER_NUMBER: native.Byte;
			static OTHER_NUMBER: native.Byte;
			static SPACE_SEPARATOR: native.Byte;
			static LINE_SEPARATOR: native.Byte;
			static PARAGRAPH_SEPARATOR: native.Byte;
			static CONTROL: native.Byte;
			static FORMAT: native.Byte;
			static PRIVATE_USE: native.Byte;
			static SURROGATE: native.Byte;
			static DASH_PUNCTUATION: native.Byte;
			static START_PUNCTUATION: native.Byte;
			static END_PUNCTUATION: native.Byte;
			static CONNECTOR_PUNCTUATION: native.Byte;
			static OTHER_PUNCTUATION: native.Byte;
			static MATH_SYMBOL: native.Byte;
			static CURRENCY_SYMBOL: native.Byte;
			static MODIFIER_SYMBOL: native.Byte;
			static OTHER_SYMBOL: native.Byte;
			static INITIAL_QUOTE_PUNCTUATION: native.Byte;
			static FINAL_QUOTE_PUNCTUATION: native.Byte;
			static DIRECTIONALITY_UNDEFINED: native.Byte;
			static DIRECTIONALITY_LEFT_TO_RIGHT: native.Byte;
			static DIRECTIONALITY_RIGHT_TO_LEFT: native.Byte;
			static DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: native.Byte;
			static DIRECTIONALITY_EUROPEAN_NUMBER: native.Byte;
			static DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: native.Byte;
			static DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: native.Byte;
			static DIRECTIONALITY_ARABIC_NUMBER: native.Byte;
			static DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: native.Byte;
			static DIRECTIONALITY_NONSPACING_MARK: native.Byte;
			static DIRECTIONALITY_BOUNDARY_NEUTRAL: native.Byte;
			static DIRECTIONALITY_PARAGRAPH_SEPARATOR: native.Byte;
			static DIRECTIONALITY_SEGMENT_SEPARATOR: native.Byte;
			static DIRECTIONALITY_WHITESPACE: native.Byte;
			static DIRECTIONALITY_OTHER_NEUTRALS: native.Byte;
			static DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: native.Byte;
			static DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: native.Byte;
			static DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: native.Byte;
			static DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: native.Byte;
			static DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: native.Byte;
			static MIN_HIGH_SURROGATE: string;
			static MAX_HIGH_SURROGATE: string;
			static MIN_LOW_SURROGATE: string;
			static MAX_LOW_SURROGATE: string;
			static MIN_SURROGATE: string;
			static MAX_SURROGATE: string;
			static MIN_SUPPLEMENTARY_CODE_POINT: number;
			static MIN_CODE_POINT: number;
			static MAX_CODE_POINT: number;
			static SIZE: number;
			static class: java.lang.Class<java.lang.Character>;
			hashCode(): number;
			equals(arg1: any): boolean;
			static toString(arg1: string): string;
			toString(): string;
			static getName(arg1: number): string;
			static charCount(arg1: number): number;
			static codePointAt(arg1: native.Array<string>, arg2: number): number;
			static codePointAt(arg1: java.lang.ICharSequence, arg2: number): number;
			static codePointAt(arg1: string, arg2: number): number;
			static codePointAt(arg1: native.Array<string>, arg2: number, arg3: number): number;
			static codePointBefore(arg1: native.Array<string>, arg2: number, arg3: number): number;
			static codePointBefore(arg1: java.lang.ICharSequence, arg2: number): number;
			static codePointBefore(arg1: string, arg2: number): number;
			static codePointBefore(arg1: native.Array<string>, arg2: number): number;
			static codePointCount(arg1: java.lang.ICharSequence, arg2: number, arg3: number): number;
			static codePointCount(arg1: string, arg2: number, arg3: number): number;
			static codePointCount(arg1: native.Array<string>, arg2: number, arg3: number): number;
			static compare(arg1: string, arg2: string): number;
			compareTo(arg1: any): number;
			compareTo(arg1: java.lang.Character): number;
			static highSurrogate(arg1: number): string;
			static isBmpCodePoint(arg1: number): boolean;
			static isValidCodePoint(arg1: number): boolean;
			static lowSurrogate(arg1: number): string;
			static offsetByCodePoints(arg1: java.lang.ICharSequence, arg2: number, arg3: number): number;
			static offsetByCodePoints(arg1: string, arg2: number, arg3: number): number;
			static offsetByCodePoints(arg1: native.Array<string>, arg2: number, arg3: number, arg4: number, arg5: number): number;
			static toChars(arg1: number): native.Array<string>;
			static toChars(arg1: number, arg2: native.Array<string>, arg3: number): number;
			static toLowerCase(arg1: number): number;
			static toLowerCase(arg1: string): string;
			static toUpperCase(arg1: string): string;
			static toUpperCase(arg1: number): number;
			static valueOf(arg1: string): java.lang.Character;
			static getType(arg1: number): number;
			static getType(arg1: string): number;
			static isHighSurrogate(arg1: string): boolean;
			static isLowSurrogate(arg1: string): boolean;
			charValue(): string;
			static digit(arg1: number, arg2: number): number;
			static digit(arg1: string, arg2: number): number;
			static forDigit(arg1: number, arg2: number): string;
			static getDirectionality(arg1: string): number;
			static getDirectionality(arg1: number): number;
			static getNumericValue(arg1: string): number;
			static getNumericValue(arg1: number): number;
			static isAlphabetic(arg1: number): boolean;
			static isDefined(arg1: string): boolean;
			static isDefined(arg1: number): boolean;
			static isDigit(arg1: string): boolean;
			static isDigit(arg1: number): boolean;
			static isISOControl(arg1: number): boolean;
			static isISOControl(arg1: string): boolean;
			static isIdentifierIgnorable(arg1: string): boolean;
			static isIdentifierIgnorable(arg1: number): boolean;
			static isIdeographic(arg1: number): boolean;
			static isJavaIdentifierPart(arg1: string): boolean;
			static isJavaIdentifierPart(arg1: number): boolean;
			static isJavaIdentifierStart(arg1: number): boolean;
			static isJavaIdentifierStart(arg1: string): boolean;
			static isJavaLetter(arg1: string): boolean;
			static isJavaLetterOrDigit(arg1: string): boolean;
			static isLetter(arg1: string): boolean;
			static isLetter(arg1: number): boolean;
			static isLetterOrDigit(arg1: number): boolean;
			static isLetterOrDigit(arg1: string): boolean;
			static isLowerCase(arg1: number): boolean;
			static isLowerCase(arg1: string): boolean;
			static isMirrored(arg1: number): boolean;
			static isMirrored(arg1: string): boolean;
			static isSpace(arg1: string): boolean;
			static isSpaceChar(arg1: number): boolean;
			static isSpaceChar(arg1: string): boolean;
			static isSupplementaryCodePoint(arg1: number): boolean;
			static isSurrogate(arg1: string): boolean;
			static isSurrogatePair(arg1: string, arg2: string): boolean;
			static isTitleCase(arg1: string): boolean;
			static isTitleCase(arg1: number): boolean;
			static isUnicodeIdentifierPart(arg1: string): boolean;
			static isUnicodeIdentifierPart(arg1: number): boolean;
			static isUnicodeIdentifierStart(arg1: number): boolean;
			static isUnicodeIdentifierStart(arg1: string): boolean;
			static isUpperCase(arg1: string): boolean;
			static isUpperCase(arg1: number): boolean;
			static isWhitespace(arg1: number): boolean;
			static isWhitespace(arg1: string): boolean;
			static reverseBytes(arg1: string): string;
			static toCodePoint(arg1: string, arg2: string): number;
			static toTitleCase(arg1: number): number;
			static toTitleCase(arg1: string): string;
		}
		export module Character {
			export class UnicodeBlock extends java.lang.Character.Subset {
				static BASIC_LATIN: java.lang.Character.UnicodeBlock;
				static LATIN_1_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static LATIN_EXTENDED_A: java.lang.Character.UnicodeBlock;
				static LATIN_EXTENDED_B: java.lang.Character.UnicodeBlock;
				static IPA_EXTENSIONS: java.lang.Character.UnicodeBlock;
				static SPACING_MODIFIER_LETTERS: java.lang.Character.UnicodeBlock;
				static COMBINING_DIACRITICAL_MARKS: java.lang.Character.UnicodeBlock;
				static GREEK: java.lang.Character.UnicodeBlock;
				static CYRILLIC: java.lang.Character.UnicodeBlock;
				static ARMENIAN: java.lang.Character.UnicodeBlock;
				static HEBREW: java.lang.Character.UnicodeBlock;
				static ARABIC: java.lang.Character.UnicodeBlock;
				static DEVANAGARI: java.lang.Character.UnicodeBlock;
				static BENGALI: java.lang.Character.UnicodeBlock;
				static GURMUKHI: java.lang.Character.UnicodeBlock;
				static GUJARATI: java.lang.Character.UnicodeBlock;
				static ORIYA: java.lang.Character.UnicodeBlock;
				static TAMIL: java.lang.Character.UnicodeBlock;
				static TELUGU: java.lang.Character.UnicodeBlock;
				static KANNADA: java.lang.Character.UnicodeBlock;
				static MALAYALAM: java.lang.Character.UnicodeBlock;
				static THAI: java.lang.Character.UnicodeBlock;
				static LAO: java.lang.Character.UnicodeBlock;
				static TIBETAN: java.lang.Character.UnicodeBlock;
				static GEORGIAN: java.lang.Character.UnicodeBlock;
				static HANGUL_JAMO: java.lang.Character.UnicodeBlock;
				static LATIN_EXTENDED_ADDITIONAL: java.lang.Character.UnicodeBlock;
				static GREEK_EXTENDED: java.lang.Character.UnicodeBlock;
				static GENERAL_PUNCTUATION: java.lang.Character.UnicodeBlock;
				static SUPERSCRIPTS_AND_SUBSCRIPTS: java.lang.Character.UnicodeBlock;
				static CURRENCY_SYMBOLS: java.lang.Character.UnicodeBlock;
				static COMBINING_MARKS_FOR_SYMBOLS: java.lang.Character.UnicodeBlock;
				static LETTERLIKE_SYMBOLS: java.lang.Character.UnicodeBlock;
				static NUMBER_FORMS: java.lang.Character.UnicodeBlock;
				static ARROWS: java.lang.Character.UnicodeBlock;
				static MATHEMATICAL_OPERATORS: java.lang.Character.UnicodeBlock;
				static MISCELLANEOUS_TECHNICAL: java.lang.Character.UnicodeBlock;
				static CONTROL_PICTURES: java.lang.Character.UnicodeBlock;
				static OPTICAL_CHARACTER_RECOGNITION: java.lang.Character.UnicodeBlock;
				static ENCLOSED_ALPHANUMERICS: java.lang.Character.UnicodeBlock;
				static BOX_DRAWING: java.lang.Character.UnicodeBlock;
				static BLOCK_ELEMENTS: java.lang.Character.UnicodeBlock;
				static GEOMETRIC_SHAPES: java.lang.Character.UnicodeBlock;
				static MISCELLANEOUS_SYMBOLS: java.lang.Character.UnicodeBlock;
				static DINGBATS: java.lang.Character.UnicodeBlock;
				static CJK_SYMBOLS_AND_PUNCTUATION: java.lang.Character.UnicodeBlock;
				static HIRAGANA: java.lang.Character.UnicodeBlock;
				static KATAKANA: java.lang.Character.UnicodeBlock;
				static BOPOMOFO: java.lang.Character.UnicodeBlock;
				static HANGUL_COMPATIBILITY_JAMO: java.lang.Character.UnicodeBlock;
				static KANBUN: java.lang.Character.UnicodeBlock;
				static ENCLOSED_CJK_LETTERS_AND_MONTHS: java.lang.Character.UnicodeBlock;
				static CJK_COMPATIBILITY: java.lang.Character.UnicodeBlock;
				static CJK_UNIFIED_IDEOGRAPHS: java.lang.Character.UnicodeBlock;
				static HANGUL_SYLLABLES: java.lang.Character.UnicodeBlock;
				static PRIVATE_USE_AREA: java.lang.Character.UnicodeBlock;
				static CJK_COMPATIBILITY_IDEOGRAPHS: java.lang.Character.UnicodeBlock;
				static ALPHABETIC_PRESENTATION_FORMS: java.lang.Character.UnicodeBlock;
				static ARABIC_PRESENTATION_FORMS_A: java.lang.Character.UnicodeBlock;
				static COMBINING_HALF_MARKS: java.lang.Character.UnicodeBlock;
				static CJK_COMPATIBILITY_FORMS: java.lang.Character.UnicodeBlock;
				static SMALL_FORM_VARIANTS: java.lang.Character.UnicodeBlock;
				static ARABIC_PRESENTATION_FORMS_B: java.lang.Character.UnicodeBlock;
				static HALFWIDTH_AND_FULLWIDTH_FORMS: java.lang.Character.UnicodeBlock;
				static SPECIALS: java.lang.Character.UnicodeBlock;
				static SURROGATES_AREA: java.lang.Character.UnicodeBlock;
				static SYRIAC: java.lang.Character.UnicodeBlock;
				static THAANA: java.lang.Character.UnicodeBlock;
				static SINHALA: java.lang.Character.UnicodeBlock;
				static MYANMAR: java.lang.Character.UnicodeBlock;
				static ETHIOPIC: java.lang.Character.UnicodeBlock;
				static CHEROKEE: java.lang.Character.UnicodeBlock;
				static UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: java.lang.Character.UnicodeBlock;
				static OGHAM: java.lang.Character.UnicodeBlock;
				static RUNIC: java.lang.Character.UnicodeBlock;
				static KHMER: java.lang.Character.UnicodeBlock;
				static MONGOLIAN: java.lang.Character.UnicodeBlock;
				static BRAILLE_PATTERNS: java.lang.Character.UnicodeBlock;
				static CJK_RADICALS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static KANGXI_RADICALS: java.lang.Character.UnicodeBlock;
				static IDEOGRAPHIC_DESCRIPTION_CHARACTERS: java.lang.Character.UnicodeBlock;
				static BOPOMOFO_EXTENDED: java.lang.Character.UnicodeBlock;
				static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: java.lang.Character.UnicodeBlock;
				static YI_SYLLABLES: java.lang.Character.UnicodeBlock;
				static YI_RADICALS: java.lang.Character.UnicodeBlock;
				static CYRILLIC_SUPPLEMENTARY: java.lang.Character.UnicodeBlock;
				static TAGALOG: java.lang.Character.UnicodeBlock;
				static HANUNOO: java.lang.Character.UnicodeBlock;
				static BUHID: java.lang.Character.UnicodeBlock;
				static TAGBANWA: java.lang.Character.UnicodeBlock;
				static LIMBU: java.lang.Character.UnicodeBlock;
				static TAI_LE: java.lang.Character.UnicodeBlock;
				static KHMER_SYMBOLS: java.lang.Character.UnicodeBlock;
				static PHONETIC_EXTENSIONS: java.lang.Character.UnicodeBlock;
				static MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: java.lang.Character.UnicodeBlock;
				static SUPPLEMENTAL_ARROWS_A: java.lang.Character.UnicodeBlock;
				static SUPPLEMENTAL_ARROWS_B: java.lang.Character.UnicodeBlock;
				static MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: java.lang.Character.UnicodeBlock;
				static SUPPLEMENTAL_MATHEMATICAL_OPERATORS: java.lang.Character.UnicodeBlock;
				static MISCELLANEOUS_SYMBOLS_AND_ARROWS: java.lang.Character.UnicodeBlock;
				static KATAKANA_PHONETIC_EXTENSIONS: java.lang.Character.UnicodeBlock;
				static YIJING_HEXAGRAM_SYMBOLS: java.lang.Character.UnicodeBlock;
				static VARIATION_SELECTORS: java.lang.Character.UnicodeBlock;
				static LINEAR_B_SYLLABARY: java.lang.Character.UnicodeBlock;
				static LINEAR_B_IDEOGRAMS: java.lang.Character.UnicodeBlock;
				static AEGEAN_NUMBERS: java.lang.Character.UnicodeBlock;
				static OLD_ITALIC: java.lang.Character.UnicodeBlock;
				static GOTHIC: java.lang.Character.UnicodeBlock;
				static UGARITIC: java.lang.Character.UnicodeBlock;
				static DESERET: java.lang.Character.UnicodeBlock;
				static SHAVIAN: java.lang.Character.UnicodeBlock;
				static OSMANYA: java.lang.Character.UnicodeBlock;
				static CYPRIOT_SYLLABARY: java.lang.Character.UnicodeBlock;
				static BYZANTINE_MUSICAL_SYMBOLS: java.lang.Character.UnicodeBlock;
				static MUSICAL_SYMBOLS: java.lang.Character.UnicodeBlock;
				static TAI_XUAN_JING_SYMBOLS: java.lang.Character.UnicodeBlock;
				static MATHEMATICAL_ALPHANUMERIC_SYMBOLS: java.lang.Character.UnicodeBlock;
				static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: java.lang.Character.UnicodeBlock;
				static CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static TAGS: java.lang.Character.UnicodeBlock;
				static VARIATION_SELECTORS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static SUPPLEMENTARY_PRIVATE_USE_AREA_A: java.lang.Character.UnicodeBlock;
				static SUPPLEMENTARY_PRIVATE_USE_AREA_B: java.lang.Character.UnicodeBlock;
				static HIGH_SURROGATES: java.lang.Character.UnicodeBlock;
				static HIGH_PRIVATE_USE_SURROGATES: java.lang.Character.UnicodeBlock;
				static LOW_SURROGATES: java.lang.Character.UnicodeBlock;
				static ARABIC_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static NKO: java.lang.Character.UnicodeBlock;
				static SAMARITAN: java.lang.Character.UnicodeBlock;
				static MANDAIC: java.lang.Character.UnicodeBlock;
				static ETHIOPIC_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED: java.lang.Character.UnicodeBlock;
				static NEW_TAI_LUE: java.lang.Character.UnicodeBlock;
				static BUGINESE: java.lang.Character.UnicodeBlock;
				static TAI_THAM: java.lang.Character.UnicodeBlock;
				static BALINESE: java.lang.Character.UnicodeBlock;
				static SUNDANESE: java.lang.Character.UnicodeBlock;
				static BATAK: java.lang.Character.UnicodeBlock;
				static LEPCHA: java.lang.Character.UnicodeBlock;
				static OL_CHIKI: java.lang.Character.UnicodeBlock;
				static VEDIC_EXTENSIONS: java.lang.Character.UnicodeBlock;
				static PHONETIC_EXTENSIONS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static COMBINING_DIACRITICAL_MARKS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static GLAGOLITIC: java.lang.Character.UnicodeBlock;
				static LATIN_EXTENDED_C: java.lang.Character.UnicodeBlock;
				static COPTIC: java.lang.Character.UnicodeBlock;
				static GEORGIAN_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static TIFINAGH: java.lang.Character.UnicodeBlock;
				static ETHIOPIC_EXTENDED: java.lang.Character.UnicodeBlock;
				static CYRILLIC_EXTENDED_A: java.lang.Character.UnicodeBlock;
				static SUPPLEMENTAL_PUNCTUATION: java.lang.Character.UnicodeBlock;
				static CJK_STROKES: java.lang.Character.UnicodeBlock;
				static LISU: java.lang.Character.UnicodeBlock;
				static VAI: java.lang.Character.UnicodeBlock;
				static CYRILLIC_EXTENDED_B: java.lang.Character.UnicodeBlock;
				static BAMUM: java.lang.Character.UnicodeBlock;
				static MODIFIER_TONE_LETTERS: java.lang.Character.UnicodeBlock;
				static LATIN_EXTENDED_D: java.lang.Character.UnicodeBlock;
				static SYLOTI_NAGRI: java.lang.Character.UnicodeBlock;
				static COMMON_INDIC_NUMBER_FORMS: java.lang.Character.UnicodeBlock;
				static PHAGS_PA: java.lang.Character.UnicodeBlock;
				static SAURASHTRA: java.lang.Character.UnicodeBlock;
				static DEVANAGARI_EXTENDED: java.lang.Character.UnicodeBlock;
				static KAYAH_LI: java.lang.Character.UnicodeBlock;
				static REJANG: java.lang.Character.UnicodeBlock;
				static HANGUL_JAMO_EXTENDED_A: java.lang.Character.UnicodeBlock;
				static JAVANESE: java.lang.Character.UnicodeBlock;
				static CHAM: java.lang.Character.UnicodeBlock;
				static MYANMAR_EXTENDED_A: java.lang.Character.UnicodeBlock;
				static TAI_VIET: java.lang.Character.UnicodeBlock;
				static ETHIOPIC_EXTENDED_A: java.lang.Character.UnicodeBlock;
				static MEETEI_MAYEK: java.lang.Character.UnicodeBlock;
				static HANGUL_JAMO_EXTENDED_B: java.lang.Character.UnicodeBlock;
				static VERTICAL_FORMS: java.lang.Character.UnicodeBlock;
				static ANCIENT_GREEK_NUMBERS: java.lang.Character.UnicodeBlock;
				static ANCIENT_SYMBOLS: java.lang.Character.UnicodeBlock;
				static PHAISTOS_DISC: java.lang.Character.UnicodeBlock;
				static LYCIAN: java.lang.Character.UnicodeBlock;
				static CARIAN: java.lang.Character.UnicodeBlock;
				static OLD_PERSIAN: java.lang.Character.UnicodeBlock;
				static IMPERIAL_ARAMAIC: java.lang.Character.UnicodeBlock;
				static PHOENICIAN: java.lang.Character.UnicodeBlock;
				static LYDIAN: java.lang.Character.UnicodeBlock;
				static KHAROSHTHI: java.lang.Character.UnicodeBlock;
				static OLD_SOUTH_ARABIAN: java.lang.Character.UnicodeBlock;
				static AVESTAN: java.lang.Character.UnicodeBlock;
				static INSCRIPTIONAL_PARTHIAN: java.lang.Character.UnicodeBlock;
				static INSCRIPTIONAL_PAHLAVI: java.lang.Character.UnicodeBlock;
				static OLD_TURKIC: java.lang.Character.UnicodeBlock;
				static RUMI_NUMERAL_SYMBOLS: java.lang.Character.UnicodeBlock;
				static BRAHMI: java.lang.Character.UnicodeBlock;
				static KAITHI: java.lang.Character.UnicodeBlock;
				static CUNEIFORM: java.lang.Character.UnicodeBlock;
				static CUNEIFORM_NUMBERS_AND_PUNCTUATION: java.lang.Character.UnicodeBlock;
				static EGYPTIAN_HIEROGLYPHS: java.lang.Character.UnicodeBlock;
				static BAMUM_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static KANA_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static ANCIENT_GREEK_MUSICAL_NOTATION: java.lang.Character.UnicodeBlock;
				static COUNTING_ROD_NUMERALS: java.lang.Character.UnicodeBlock;
				static MAHJONG_TILES: java.lang.Character.UnicodeBlock;
				static DOMINO_TILES: java.lang.Character.UnicodeBlock;
				static PLAYING_CARDS: java.lang.Character.UnicodeBlock;
				static ENCLOSED_ALPHANUMERIC_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static ENCLOSED_IDEOGRAPHIC_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				static MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS: java.lang.Character.UnicodeBlock;
				static EMOTICONS: java.lang.Character.UnicodeBlock;
				static TRANSPORT_AND_MAP_SYMBOLS: java.lang.Character.UnicodeBlock;
				static ALCHEMICAL_SYMBOLS: java.lang.Character.UnicodeBlock;
				static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C: java.lang.Character.UnicodeBlock;
				static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D: java.lang.Character.UnicodeBlock;
				static class: java.lang.Class<java.lang.Character.UnicodeBlock>;
				static forName(arg1: java.lang.String): java.lang.Character.UnicodeBlock;
				static forName(arg1: string): java.lang.Character.UnicodeBlock;
				static of(arg1: number): java.lang.Character.UnicodeBlock;
				static of(arg1: string): java.lang.Character.UnicodeBlock;
			}
			export class Subset extends java.lang.Object {
				static class: java.lang.Class<java.lang.Character.Subset>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
			}
		}
		export class LinkageError extends java.lang.Error {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			static class: java.lang.Class<java.lang.LinkageError>;
		}
		export module ref {
			export class WeakReference<T> extends java.lang.ref.Reference<T> {
				constructor(arg1: T);
				constructor(arg1: T, arg2: java.lang.ref.ReferenceQueue<any>);
				static class: java.lang.Class<java.lang.ref.WeakReference<any>>;
			}
			export class Reference<T> extends java.lang.Object {
				static class: java.lang.Class<java.lang.ref.Reference<any>>;
				get(): T;
				clear(): void;
				enqueue(): boolean;
				isEnqueued(): boolean;
			}
			export class ReferenceQueue<T> extends java.lang.Object {
				constructor();
				static class: java.lang.Class<java.lang.ref.ReferenceQueue<any>>;
				remove(): java.lang.ref.Reference<any>;
				remove(arg1: native.Long): java.lang.ref.Reference<any>;
				poll(): java.lang.ref.Reference<any>;
			}
			export class PhantomReference<T> extends java.lang.ref.Reference<T> {
				constructor(arg1: T, arg2: java.lang.ref.ReferenceQueue<any>);
				static class: java.lang.Class<java.lang.ref.PhantomReference<any>>;
				get(): T;
			}
			export class SoftReference<T> extends java.lang.ref.Reference<T> {
				constructor(arg1: T, arg2: java.lang.ref.ReferenceQueue<any>);
				constructor(arg1: T);
				static class: java.lang.Class<java.lang.ref.SoftReference<any>>;
				get(): T;
			}
		}
		export module reflect {
			export class WildcardType implements java.lang.reflect.IType, java.lang.reflect.IWildcardType {
				constructor(implementation: java.lang.reflect.IWildcardType);
				getLowerBounds(): native.Array<java.lang.reflect.IType>;
				getUpperBounds(): native.Array<java.lang.reflect.IType>;
			}
			export class Member implements java.lang.reflect.IMember {
				constructor(implementation: java.lang.reflect.IMember);
				static PUBLIC: number;
				static DECLARED: number;
				getName(): string;
				getDeclaringClass(): java.lang.Class<any>;
				getModifiers(): number;
				isSynthetic(): boolean;
			}
			export class Field extends java.lang.reflect.AccessibleObject implements java.lang.reflect.IMember {
				static class: java.lang.Class<java.lang.reflect.Field>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getName(): string;
				get(arg1: any): any;
				getAnnotation<T extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<T>): T;
				getDeclaredAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				getDeclaringClass(): java.lang.Class<any>;
				getModifiers(): number;
				isSynthetic(): boolean;
				getBoolean(arg1: any): boolean;
				getByte(arg1: any): number;
				getChar(arg1: any): string;
				getDouble(arg1: any): any;
				getFloat(arg1: any): number;
				getGenericType(): java.lang.reflect.IType;
				getInt(arg1: any): number;
				getLong(arg1: any): any;
				getShort(arg1: any): number;
				getType(): java.lang.Class<any>;
				isEnumConstant(): boolean;
				set(arg1: any, arg2: any): void;
				setBoolean(arg1: any, arg2: boolean): void;
				setByte(arg1: any, arg2: native.Byte): void;
				setChar(arg1: any, arg2: string): void;
				setDouble(arg1: any, arg2: native.Double): void;
				setDouble(arg1: any, arg2: number): void;
				setFloat(arg1: any, arg2: native.Float): void;
				setInt(arg1: any, arg2: number): void;
				setLong(arg1: any, arg2: native.Long): void;
				setShort(arg1: any, arg2: native.Short): void;
				toGenericString(): string;
			}
			export class Method extends java.lang.reflect.AccessibleObject implements java.lang.reflect.IGenericDeclaration, java.lang.reflect.IMember {
				static class: java.lang.Class<java.lang.reflect.Method>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getName(): string;
				getAnnotation<T extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<T>): T;
				getDeclaredAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				getDeclaringClass(): java.lang.Class<any>;
				getModifiers(): number;
				getParameterTypes(): native.Array<java.lang.Class<any>>;
				getReturnType(): java.lang.Class<any>;
				getTypeParameters(): native.Array<java.lang.reflect.ITypeVariable<java.lang.reflect.Method>>;
				invoke(arg1: any, arg2: native.Array<any>): any;
				isSynthetic(): boolean;
				toGenericString(): string;
				getDefaultValue(): any;
				getExceptionTypes(): native.Array<java.lang.Class<any>>;
				getGenericExceptionTypes(): native.Array<java.lang.reflect.IType>;
				getGenericParameterTypes(): native.Array<java.lang.reflect.IType>;
				getGenericReturnType(): java.lang.reflect.IType;
				getParameterAnnotations(): native.Array<native.Array<java.lang.annotation.IAnnotation>>;
				isBridge(): boolean;
				isVarArgs(): boolean;
			}
			export class GenericSignatureFormatError extends java.lang.ClassFormatError {
				constructor();
				static class: java.lang.Class<java.lang.reflect.GenericSignatureFormatError>;
			}
			export class Type implements java.lang.reflect.IType {
				constructor(implementation: java.lang.reflect.IType);
			}
			export class MalformedParameterizedTypeException extends java.lang.RuntimeException {
				constructor();
				static class: java.lang.Class<java.lang.reflect.MalformedParameterizedTypeException>;
			}
			export class Array extends java.lang.Object {
				static class: java.lang.Class<java.lang.reflect.Array>;
				static get(arg1: any, arg2: number): any;
				static newInstance(arg1: java.lang.Class<any>, arg2: number): any;
				static newInstance(arg1: java.lang.Class<any>, arg2: native.Array<number>): any;
				static getBoolean(arg1: any, arg2: number): boolean;
				static getByte(arg1: any, arg2: number): number;
				static getChar(arg1: any, arg2: number): string;
				static getDouble(arg1: any, arg2: number): any;
				static getFloat(arg1: any, arg2: number): number;
				static getInt(arg1: any, arg2: number): number;
				static getLong(arg1: any, arg2: number): any;
				static getShort(arg1: any, arg2: number): number;
				static set(arg1: any, arg2: number, arg3: any): void;
				static setBoolean(arg1: any, arg2: number, arg3: boolean): void;
				static setByte(arg1: any, arg2: number, arg3: native.Byte): void;
				static setChar(arg1: any, arg2: number, arg3: string): void;
				static setDouble(arg1: any, arg2: number, arg3: native.Double): void;
				static setDouble(arg1: any, arg2: number, arg3: number): void;
				static setFloat(arg1: any, arg2: number, arg3: native.Float): void;
				static setInt(arg1: any, arg2: number, arg3: number): void;
				static setLong(arg1: any, arg2: number, arg3: native.Long): void;
				static setShort(arg1: any, arg2: number, arg3: native.Short): void;
				static getLength(arg1: any): number;
			}
			export class Modifier extends java.lang.Object {
				constructor();
				static PUBLIC: number;
				static PRIVATE: number;
				static PROTECTED: number;
				static STATIC: number;
				static FINAL: number;
				static SYNCHRONIZED: number;
				static VOLATILE: number;
				static TRANSIENT: number;
				static NATIVE: number;
				static INTERFACE: number;
				static ABSTRACT: number;
				static STRICT: number;
				static class: java.lang.Class<java.lang.reflect.Modifier>;
				static toString(arg1: number): string;
				static isAbstract(arg1: number): boolean;
				static isInterface(arg1: number): boolean;
				static isProtected(arg1: number): boolean;
				static methodModifiers(): number;
				static constructorModifiers(): number;
				static isFinal(arg1: number): boolean;
				static isStatic(arg1: number): boolean;
				static isNative(arg1: number): boolean;
				static isPrivate(arg1: number): boolean;
				static isPublic(arg1: number): boolean;
				static isVolatile(arg1: number): boolean;
				static classModifiers(): number;
				static fieldModifiers(): number;
				static interfaceModifiers(): number;
				static isStrict(arg1: number): boolean;
				static isSynchronized(arg1: number): boolean;
				static isTransient(arg1: number): boolean;
				toString(): string;
			}
			export class InvocationHandler implements java.lang.reflect.IInvocationHandler {
				constructor(implementation: java.lang.reflect.IInvocationHandler);
				invoke(arg1: any, arg2: java.lang.reflect.Method, arg3: native.Array<any>): any;
			}
			export interface ITypeVariable<D extends java.lang.reflect.IGenericDeclaration> extends java.lang.reflect.IType {
				getGenericDeclaration(): D;
				getName(): string;
				getBounds(): native.Array<java.lang.reflect.IType>;
			}
			export class AnnotatedElement implements java.lang.reflect.IAnnotatedElement {
				constructor(implementation: java.lang.reflect.IAnnotatedElement);
				getAnnotation<T extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<T>): T;
				getAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				getDeclaredAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				isAnnotationPresent(arg1: java.lang.Class<any>): boolean;
			}
			export class GenericDeclaration implements java.lang.reflect.IGenericDeclaration {
				constructor(implementation: java.lang.reflect.IGenericDeclaration);
				getTypeParameters(): native.Array<java.lang.reflect.ITypeVariable<any>>;
			}
			export class Proxy extends java.lang.Object implements java.io.ISerializable {
				static class: java.lang.Class<java.lang.reflect.Proxy>;
				static isProxyClass(arg1: java.lang.Class<any>): boolean;
				static getInvocationHandler(arg1: any): java.lang.reflect.IInvocationHandler;
				static getProxyClass(arg1: java.lang.ClassLoader, arg2: native.Array<java.lang.Class<any>>): java.lang.Class<any>;
				static newProxyInstance(arg1: java.lang.ClassLoader, arg2: native.Array<java.lang.Class<any>>, arg3: java.lang.reflect.IInvocationHandler): any;
			}
			export class InvocationTargetException {
				constructor(arg1: java.lang.Throwable, arg2: java.lang.String);
				constructor(arg1: java.lang.Throwable, arg2: string);
				constructor(arg1: java.lang.Throwable);
				static class: java.lang.Class<java.lang.reflect.InvocationTargetException>;
				getTargetException(): java.lang.Throwable;
				getCause(): java.lang.Throwable;
			}
			export interface IGenericArrayType extends java.lang.reflect.IType {
				getGenericComponentType(): java.lang.reflect.IType;
			}
			export interface IType {
			}
			export interface IParameterizedType extends java.lang.reflect.IType {
				getRawType(): java.lang.reflect.IType;
				getActualTypeArguments(): native.Array<java.lang.reflect.IType>;
				getOwnerType(): java.lang.reflect.IType;
			}
			export interface IAnnotatedElement {
				getAnnotation<T extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<T>): T;
				getAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				getDeclaredAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				isAnnotationPresent(arg1: java.lang.Class<any>): boolean;
			}
			export interface IMember {
				getName(): string;
				getDeclaringClass(): java.lang.Class<any>;
				getModifiers(): number;
				isSynthetic(): boolean;
			}
			export module IMember {
				var PUBLIC: number;
				var DECLARED: number;
			}
			export interface IWildcardType extends java.lang.reflect.IType {
				getLowerBounds(): native.Array<java.lang.reflect.IType>;
				getUpperBounds(): native.Array<java.lang.reflect.IType>;
			}
			export interface IInvocationHandler {
				invoke(arg1: any, arg2: java.lang.reflect.Method, arg3: native.Array<any>): any;
			}
			export class AccessibleObject extends java.lang.Object implements java.lang.reflect.IAnnotatedElement {
				static class: java.lang.Class<java.lang.reflect.AccessibleObject>;
				getAnnotation<T extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<T>): T;
				getAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				getDeclaredAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				isAnnotationPresent(arg1: java.lang.Class<any>): boolean;
				isAccessible(): boolean;
				setAccessible(arg1: boolean): void;
				static setAccessible(arg1: native.Array<java.lang.reflect.AccessibleObject>, arg2: boolean): void;
			}
			export class UndeclaredThrowableException extends java.lang.RuntimeException {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.Throwable, arg2: java.lang.String);
				constructor(arg1: java.lang.Throwable, arg2: string);
				static class: java.lang.Class<java.lang.reflect.UndeclaredThrowableException>;
				getUndeclaredThrowable(): java.lang.Throwable;
				getCause(): java.lang.Throwable;
			}
			export class TypeVariable<D extends java.lang.reflect.IGenericDeclaration> implements java.lang.reflect.IType, java.lang.reflect.ITypeVariable<D> {
				constructor(implementation: java.lang.reflect.ITypeVariable<D>);
				getGenericDeclaration(): D;
				getName(): string;
				getBounds(): native.Array<java.lang.reflect.IType>;
			}
			export class Constructor<T> extends java.lang.reflect.AccessibleObject implements java.lang.reflect.IGenericDeclaration, java.lang.reflect.IMember {
				static class: java.lang.Class<java.lang.reflect.Constructor<any>>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getName(): string;
				getAnnotation<T extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<T>): T;
				getDeclaredAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
				getDeclaringClass(): java.lang.Class<T>;
				getModifiers(): number;
				getParameterTypes(): native.Array<java.lang.Class<any>>;
				getTypeParameters(): native.Array<java.lang.reflect.ITypeVariable<java.lang.reflect.Constructor<T>>>;
				isSynthetic(): boolean;
				newInstance(arg1: native.Array<any>): T;
				toGenericString(): string;
				getExceptionTypes(): native.Array<java.lang.Class<any>>;
				getGenericExceptionTypes(): native.Array<java.lang.reflect.IType>;
				getGenericParameterTypes(): native.Array<java.lang.reflect.IType>;
				getParameterAnnotations(): native.Array<native.Array<java.lang.annotation.IAnnotation>>;
				isVarArgs(): boolean;
			}
			export class ReflectPermission extends java.security.BasicPermission {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.String);
				constructor(arg1: string, arg2: string);
				static class: java.lang.Class<java.lang.reflect.ReflectPermission>;
			}
			export interface IGenericDeclaration {
				getTypeParameters(): native.Array<java.lang.reflect.ITypeVariable<any>>;
			}
			export class GenericArrayType implements java.lang.reflect.IType, java.lang.reflect.IGenericArrayType {
				constructor(implementation: java.lang.reflect.IGenericArrayType);
				getGenericComponentType(): java.lang.reflect.IType;
			}
			export class ParameterizedType implements java.lang.reflect.IType, java.lang.reflect.IParameterizedType {
				constructor(implementation: java.lang.reflect.IParameterizedType);
				getRawType(): java.lang.reflect.IType;
				getActualTypeArguments(): native.Array<java.lang.reflect.IType>;
				getOwnerType(): java.lang.reflect.IType;
			}
		}
		export interface IAppendable {
			append(arg1: string): java.lang.IAppendable;
			append(arg1: string, arg2: number, arg3: number): java.lang.IAppendable;
		}
		export class ClassCircularityError extends java.lang.LinkageError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.ClassCircularityError>;
		}
		export class VerifyError extends java.lang.LinkageError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.VerifyError>;
		}
		export class IllegalAccessError extends java.lang.IncompatibleClassChangeError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.IllegalAccessError>;
		}
		export class NoSuchFieldException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.NoSuchFieldException>;
		}
		export class ClassFormatError extends java.lang.LinkageError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.ClassFormatError>;
		}
		export class NoClassDefFoundError extends java.lang.LinkageError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.NoClassDefFoundError>;
		}
		export class Enum<E> extends java.lang.Object implements java.lang.IComparable<E>, java.io.ISerializable {
			static class: java.lang.Class<java.lang.Enum<any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: E): number;
			static valueOf<T>(arg1: java.lang.Class<T>, arg2: java.lang.String): T;
			static valueOf<T>(arg1: java.lang.Class<T>, arg2: string): T;
			getDeclaringClass(): java.lang.Class<E>;
			name(): string;
			ordinal(): number;
		}
		export class Process extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.lang.Process>;
			exitValue(): number;
			waitFor(): number;
			destroy(): void;
			getInputStream(): java.io.InputStream;
			getOutputStream(): java.io.OutputStream;
			getErrorStream(): java.io.InputStream;
		}
		export class UnsupportedClassVersionError extends java.lang.ClassFormatError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.UnsupportedClassVersionError>;
		}
		export class TypeNotPresentException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			static class: java.lang.Class<java.lang.TypeNotPresentException>;
			typeName(): string;
		}
		export class AbstractMethodError extends java.lang.IncompatibleClassChangeError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.AbstractMethodError>;
		}
		export class StringBuilder extends java.lang.AbstractStringBuilder implements java.io.ISerializable, java.lang.ICharSequence {
			constructor(arg1: java.lang.ICharSequence);
			constructor(arg1: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: number);
			constructor();
			static class: java.lang.Class<java.lang.StringBuilder>;
			toString(): string;
			append(arg1: number): java.lang.StringBuilder;
			append(arg1: native.Array<string>, arg2: number, arg3: number): java.lang.StringBuilder;
			append(arg1: java.lang.StringBuffer): java.lang.StringBuilder;
			append(arg1: boolean): java.lang.StringBuilder;
			append(arg1: native.Array<string>): java.lang.StringBuilder;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.lang.StringBuilder;
			append(arg1: string, arg2: number, arg3: number): java.lang.StringBuilder;
			append(arg1: java.lang.ICharSequence): java.lang.StringBuilder;
			append(arg1: string): java.lang.StringBuilder;
			append(arg1: java.lang.String): java.lang.StringBuilder;
			append(arg1: any): java.lang.StringBuilder;
			append(arg1: native.Float): java.lang.StringBuilder;
			append(arg1: native.Double): java.lang.StringBuilder;
			append(arg1: native.Long): java.lang.StringBuilder;
			charAt(arg1: number): string;
			codePointAt(arg1: number): number;
			codePointBefore(arg1: number): number;
			codePointCount(arg1: number, arg2: number): number;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			indexOf(arg1: java.lang.String, arg2: number): number;
			indexOf(arg1: string, arg2: number): number;
			indexOf(arg1: java.lang.String): number;
			indexOf(arg1: string): number;
			lastIndexOf(arg1: java.lang.String): number;
			lastIndexOf(arg1: string): number;
			lastIndexOf(arg1: java.lang.String, arg2: number): number;
			lastIndexOf(arg1: string, arg2: number): number;
			length(): number;
			offsetByCodePoints(arg1: number, arg2: number): number;
			replace(arg1: number, arg2: number, arg3: java.lang.String): java.lang.StringBuilder;
			replace(arg1: number, arg2: number, arg3: string): java.lang.StringBuilder;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			substring(arg1: number): string;
			substring(arg1: number, arg2: number): string;
			appendCodePoint(arg1: number): java.lang.StringBuilder;
			capacity(): number;
			delete(arg1: number, arg2: number): java.lang.StringBuilder;
			deleteCharAt(arg1: number): java.lang.StringBuilder;
			ensureCapacity(arg1: number): void;
			insert(arg1: number, arg2: number): java.lang.StringBuilder;
			insert(arg1: number, arg2: native.Long): java.lang.StringBuilder;
			insert(arg1: number, arg2: native.Float): java.lang.StringBuilder;
			insert(arg1: number, arg2: native.Double): java.lang.StringBuilder;
			insert(arg1: number, arg2: any): java.lang.StringBuilder;
			insert(arg1: number, arg2: java.lang.String): java.lang.StringBuilder;
			insert(arg1: number, arg2: string): java.lang.StringBuilder;
			insert(arg1: number, arg2: native.Array<string>): java.lang.StringBuilder;
			insert(arg1: number, arg2: java.lang.ICharSequence): java.lang.StringBuilder;
			insert(arg1: number, arg2: java.lang.ICharSequence, arg3: number, arg4: number): java.lang.StringBuilder;
			insert(arg1: number, arg2: string, arg3: number, arg4: number): java.lang.StringBuilder;
			insert(arg1: number, arg2: boolean): java.lang.StringBuilder;
			insert(arg1: number, arg2: native.Array<string>, arg3: number, arg4: number): java.lang.StringBuilder;
			reverse(): java.lang.StringBuilder;
			setCharAt(arg1: number, arg2: string): void;
			setLength(arg1: number): void;
			trimToSize(): void;
		}
		export class Number extends java.lang.Object implements java.io.ISerializable {
			constructor();
			static class: java.lang.Class<java.lang.Number>;
			longValue(): any;
			intValue(): number;
			byteValue(): number;
			doubleValue(): any;
			floatValue(): number;
			shortValue(): number;
		}
		export class Runtime extends java.lang.Object {
			static class: java.lang.Class<java.lang.Runtime>;
			load(arg1: java.lang.String): void;
			load(arg1: string): void;
			loadLibrary(arg1: java.lang.String): void;
			loadLibrary(arg1: string): void;
			exit(arg1: number): void;
			gc(): void;
			static getRuntime(): java.lang.Runtime;
			runFinalization(): void;
			static runFinalizersOnExit(arg1: boolean): void;
			freeMemory(): any;
			maxMemory(): any;
			addShutdownHook(arg1: java.lang.Thread): void;
			availableProcessors(): number;
			exec(arg1: native.Array<java.lang.String>): java.lang.Process;
			exec(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: java.io.File): java.lang.Process;
			exec(arg1: string, arg2: native.Array<java.lang.String>, arg3: java.io.File): java.lang.Process;
			exec(arg1: java.lang.String): java.lang.Process;
			exec(arg1: string): java.lang.Process;
			exec(arg1: java.lang.String, arg2: native.Array<java.lang.String>): java.lang.Process;
			exec(arg1: string, arg2: native.Array<java.lang.String>): java.lang.Process;
			exec(arg1: native.Array<java.lang.String>, arg2: native.Array<java.lang.String>, arg3: java.io.File): java.lang.Process;
			exec(arg1: native.Array<java.lang.String>, arg2: native.Array<java.lang.String>): java.lang.Process;
			getLocalizedInputStream(arg1: java.io.InputStream): java.io.InputStream;
			getLocalizedOutputStream(arg1: java.io.OutputStream): java.io.OutputStream;
			halt(arg1: number): void;
			removeShutdownHook(arg1: java.lang.Thread): boolean;
			totalMemory(): any;
			traceInstructions(arg1: boolean): void;
			traceMethodCalls(arg1: boolean): void;
		}
		export class RuntimeException extends java.lang.Exception {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.RuntimeException>;
		}
		export class InheritableThreadLocal<T> extends java.lang.ThreadLocal<T> {
			constructor();
			static class: java.lang.Class<java.lang.InheritableThreadLocal<any>>;
		}
		export class AbstractStringBuilder extends java.lang.Object implements java.lang.IAppendable, java.lang.ICharSequence {
			static class: java.lang.Class<java.lang.AbstractStringBuilder>;
			toString(): string;
			append(arg1: any): java.lang.AbstractStringBuilder;
			append(arg1: native.Array<string>): java.lang.AbstractStringBuilder;
			append(arg1: native.Array<string>, arg2: number, arg3: number): java.lang.AbstractStringBuilder;
			append(arg1: boolean): java.lang.AbstractStringBuilder;
			append(arg1: string): java.lang.AbstractStringBuilder;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.lang.AbstractStringBuilder;
			append(arg1: string, arg2: number, arg3: number): java.lang.AbstractStringBuilder;
			append(arg1: java.lang.StringBuffer): java.lang.AbstractStringBuilder;
			append(arg1: java.lang.ICharSequence): java.lang.AbstractStringBuilder;
			append(arg1: native.Double): java.lang.AbstractStringBuilder;
			append(arg1: number): java.lang.AbstractStringBuilder;
			append(arg1: native.Float): java.lang.AbstractStringBuilder;
			append(arg1: native.Long): java.lang.AbstractStringBuilder;
			append(arg1: java.lang.String): java.lang.AbstractStringBuilder;
			charAt(arg1: number): string;
			codePointAt(arg1: number): number;
			codePointBefore(arg1: number): number;
			codePointCount(arg1: number, arg2: number): number;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			indexOf(arg1: java.lang.String): number;
			indexOf(arg1: string): number;
			indexOf(arg1: java.lang.String, arg2: number): number;
			indexOf(arg1: string, arg2: number): number;
			lastIndexOf(arg1: java.lang.String, arg2: number): number;
			lastIndexOf(arg1: string, arg2: number): number;
			lastIndexOf(arg1: java.lang.String): number;
			lastIndexOf(arg1: string): number;
			length(): number;
			offsetByCodePoints(arg1: number, arg2: number): number;
			replace(arg1: number, arg2: number, arg3: java.lang.String): java.lang.AbstractStringBuilder;
			replace(arg1: number, arg2: number, arg3: string): java.lang.AbstractStringBuilder;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			substring(arg1: number): string;
			substring(arg1: number, arg2: number): string;
			appendCodePoint(arg1: number): java.lang.AbstractStringBuilder;
			capacity(): number;
			delete(arg1: number, arg2: number): java.lang.AbstractStringBuilder;
			deleteCharAt(arg1: number): java.lang.AbstractStringBuilder;
			ensureCapacity(arg1: number): void;
			insert(arg1: number, arg2: java.lang.ICharSequence, arg3: number, arg4: number): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: string, arg3: number, arg4: number): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: native.Long): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: boolean): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: native.Float): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: native.Double): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: number): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: java.lang.ICharSequence): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: string): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: native.Array<string>): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: java.lang.String): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: any): java.lang.AbstractStringBuilder;
			insert(arg1: number, arg2: native.Array<string>, arg3: number, arg4: number): java.lang.AbstractStringBuilder;
			reverse(): java.lang.AbstractStringBuilder;
			setCharAt(arg1: number, arg2: string): void;
			setLength(arg1: number): void;
			trimToSize(): void;
		}
		export class UnsupportedOperationException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.UnsupportedOperationException>;
		}
		export class String extends java.lang.Object implements java.io.ISerializable, java.lang.IComparable<string>, java.lang.ICharSequence {
			constructor(arg1: native.Array<native.Byte>);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number);
			constructor(arg1: native.Array<native.Byte>, arg2: java.nio.charset.Charset);
			constructor(arg1: native.Array<native.Byte>, arg2: java.lang.String);
			constructor(arg1: native.Array<native.Byte>, arg2: string);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: java.nio.charset.Charset);
			constructor(arg1: java.lang.StringBuilder);
			constructor(arg1: java.lang.StringBuffer);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: java.lang.String);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: string);
			constructor(arg1: native.Array<native.Byte>, arg2: number);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: number);
			static CASE_INSENSITIVE_ORDER: java.util.IComparator<string>;
			static class: java.lang.Class<java.lang.String>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			charAt(arg1: number): string;
			codePointAt(arg1: number): number;
			codePointBefore(arg1: number): number;
			codePointCount(arg1: number, arg2: number): number;
			compareTo(arg1: any): number;
			compareTo(arg1: java.lang.String): number;
			compareTo(arg1: string): number;
			compareToIgnoreCase(arg1: java.lang.String): number;
			compareToIgnoreCase(arg1: string): number;
			concat(arg1: java.lang.String): string;
			concat(arg1: string): string;
			contains(arg1: java.lang.ICharSequence): boolean;
			contains(arg1: string): boolean;
			contentEquals(arg1: java.lang.ICharSequence): boolean;
			contentEquals(arg1: string): boolean;
			contentEquals(arg1: java.lang.StringBuffer): boolean;
			static copyValueOf(arg1: native.Array<string>, arg2: number, arg3: number): string;
			static copyValueOf(arg1: native.Array<string>): string;
			endsWith(arg1: java.lang.String): boolean;
			endsWith(arg1: string): boolean;
			equalsIgnoreCase(arg1: java.lang.String): boolean;
			equalsIgnoreCase(arg1: string): boolean;
			static format(arg1: java.util.Locale, arg2: java.lang.String, arg3: native.Array<any>): string;
			static format(arg1: java.util.Locale, arg2: string, arg3: native.Array<any>): string;
			static format(arg1: java.lang.String, arg2: native.Array<any>): string;
			static format(arg1: string, arg2: native.Array<any>): string;
			getBytes(arg1: java.nio.charset.Charset): native.Array<native.Byte>;
			getBytes(arg1: number, arg2: number, arg3: native.Array<native.Byte>, arg4: number): void;
			getBytes(arg1: java.lang.String): native.Array<native.Byte>;
			getBytes(arg1: string): native.Array<native.Byte>;
			getBytes(): native.Array<native.Byte>;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			indexOf(arg1: java.lang.String): number;
			indexOf(arg1: string): number;
			indexOf(arg1: number, arg2: number): number;
			indexOf(arg1: java.lang.String, arg2: number): number;
			indexOf(arg1: string, arg2: number): number;
			indexOf(arg1: number): number;
			intern(): string;
			isEmpty(): boolean;
			lastIndexOf(arg1: number, arg2: number): number;
			lastIndexOf(arg1: java.lang.String): number;
			lastIndexOf(arg1: string): number;
			lastIndexOf(arg1: number): number;
			lastIndexOf(arg1: java.lang.String, arg2: number): number;
			lastIndexOf(arg1: string, arg2: number): number;
			length(): number;
			matches(arg1: java.lang.String): boolean;
			matches(arg1: string): boolean;
			offsetByCodePoints(arg1: number, arg2: number): number;
			regionMatches(arg1: number, arg2: java.lang.String, arg3: number, arg4: number): boolean;
			regionMatches(arg1: number, arg2: string, arg3: number, arg4: number): boolean;
			regionMatches(arg1: boolean, arg2: number, arg3: java.lang.String, arg4: number, arg5: number): boolean;
			regionMatches(arg1: boolean, arg2: number, arg3: string, arg4: number, arg5: number): boolean;
			replace(arg1: string, arg2: string): string;
			replace(arg1: java.lang.ICharSequence, arg2: java.lang.ICharSequence): string;
			replaceAll(arg1: java.lang.String, arg2: java.lang.String): string;
			replaceAll(arg1: string, arg2: string): string;
			replaceFirst(arg1: java.lang.String, arg2: java.lang.String): string;
			replaceFirst(arg1: string, arg2: string): string;
			split(arg1: java.lang.String): native.Array<java.lang.String>;
			split(arg1: string): native.Array<java.lang.String>;
			split(arg1: java.lang.String, arg2: number): native.Array<java.lang.String>;
			split(arg1: string, arg2: number): native.Array<java.lang.String>;
			startsWith(arg1: java.lang.String): boolean;
			startsWith(arg1: string): boolean;
			startsWith(arg1: java.lang.String, arg2: number): boolean;
			startsWith(arg1: string, arg2: number): boolean;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			substring(arg1: number, arg2: number): string;
			substring(arg1: number): string;
			toCharArray(): native.Array<string>;
			toLowerCase(): string;
			toLowerCase(arg1: java.util.Locale): string;
			toUpperCase(): string;
			toUpperCase(arg1: java.util.Locale): string;
			trim(): string;
			static valueOf(arg1: string): string;
			static valueOf(arg1: any): string;
			static valueOf(arg1: boolean): string;
			static valueOf(arg1: native.Array<string>, arg2: number, arg3: number): string;
			static valueOf(arg1: native.Array<string>): string;
			static valueOf(arg1: native.Float): string;
			static valueOf(arg1: native.Long): string;
			static valueOf(arg1: number): string;
			static valueOf(arg1: native.Double): string;
		}
		export class ArithmeticException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.ArithmeticException>;
		}
		export class ThreadDeath extends java.lang.Error {
			constructor();
			static class: java.lang.Class<java.lang.ThreadDeath>;
		}
		export class ClassCastException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.ClassCastException>;
		}
		export class IllegalThreadStateException extends java.lang.IllegalArgumentException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.IllegalThreadStateException>;
		}
		export class Exception extends java.lang.Throwable {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.Exception>;
		}
		export class IllegalArgumentException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.IllegalArgumentException>;
		}
		export class StrictMath extends java.lang.Object {
			static E: native.Double;
			static PI: native.Double;
			static class: java.lang.Class<java.lang.StrictMath>;
			static min(arg1: number, arg2: number): number;
			static min(arg1: native.Float, arg2: native.Float): number;
			static min(arg1: native.Double, arg2: native.Double): any;
			static min(arg1: native.Long, arg2: native.Long): any;
			static max(arg1: native.Double, arg2: native.Double): any;
			static max(arg1: number, arg2: number): any;
			static max(arg1: native.Float, arg2: native.Float): number;
			static max(arg1: native.Long, arg2: native.Long): any;
			static abs(arg1: native.Float): number;
			static abs(arg1: native.Double): any;
			static abs(arg1: number): any;
			static abs(arg1: native.Long): any;
			static scalb(arg1: native.Float, arg2: number): number;
			static scalb(arg1: native.Double, arg2: number): any;
			static scalb(arg1: number, arg2: number): any;
			static getExponent(arg1: native.Float): number;
			static getExponent(arg1: native.Double): number;
			static getExponent(arg1: number): number;
			static signum(arg1: native.Double): any;
			static signum(arg1: number): any;
			static signum(arg1: native.Float): number;
			static IEEEremainder(arg1: native.Double, arg2: native.Double): any;
			static IEEEremainder(arg1: number, arg2: number): any;
			static acos(arg1: native.Double): any;
			static acos(arg1: number): any;
			static asin(arg1: native.Double): any;
			static asin(arg1: number): any;
			static atan(arg1: native.Double): any;
			static atan(arg1: number): any;
			static atan2(arg1: native.Double, arg2: native.Double): any;
			static atan2(arg1: number, arg2: number): any;
			static cbrt(arg1: native.Double): any;
			static cbrt(arg1: number): any;
			static ceil(arg1: native.Double): any;
			static ceil(arg1: number): any;
			static copySign(arg1: native.Float, arg2: native.Float): number;
			static copySign(arg1: native.Double, arg2: native.Double): any;
			static copySign(arg1: number, arg2: number): any;
			static cos(arg1: native.Double): any;
			static cos(arg1: number): any;
			static cosh(arg1: native.Double): any;
			static cosh(arg1: number): any;
			static exp(arg1: native.Double): any;
			static exp(arg1: number): any;
			static expm1(arg1: native.Double): any;
			static expm1(arg1: number): any;
			static floor(arg1: native.Double): any;
			static floor(arg1: number): any;
			static hypot(arg1: native.Double, arg2: native.Double): any;
			static hypot(arg1: number, arg2: number): any;
			static log(arg1: native.Double): any;
			static log(arg1: number): any;
			static log10(arg1: native.Double): any;
			static log10(arg1: number): any;
			static log1p(arg1: native.Double): any;
			static log1p(arg1: number): any;
			static nextAfter(arg1: native.Float, arg2: native.Double): number;
			static nextAfter(arg1: native.Float, arg2: number): number;
			static nextAfter(arg1: native.Double, arg2: native.Double): any;
			static nextAfter(arg1: number, arg2: number): any;
			static nextUp(arg1: native.Float): number;
			static nextUp(arg1: native.Double): any;
			static nextUp(arg1: number): any;
			static pow(arg1: native.Double, arg2: native.Double): any;
			static pow(arg1: number, arg2: number): any;
			static random(): any;
			static rint(arg1: native.Double): any;
			static rint(arg1: number): any;
			static round(arg1: native.Float): number;
			static round(arg1: native.Double): any;
			static round(arg1: number): any;
			static sin(arg1: native.Double): any;
			static sin(arg1: number): any;
			static sinh(arg1: native.Double): any;
			static sinh(arg1: number): any;
			static sqrt(arg1: native.Double): any;
			static sqrt(arg1: number): any;
			static tan(arg1: native.Double): any;
			static tan(arg1: number): any;
			static tanh(arg1: native.Double): any;
			static tanh(arg1: number): any;
			static toDegrees(arg1: native.Double): any;
			static toDegrees(arg1: number): any;
			static toRadians(arg1: native.Double): any;
			static toRadians(arg1: number): any;
			static ulp(arg1: native.Double): any;
			static ulp(arg1: number): any;
			static ulp(arg1: native.Float): number;
		}
		export class ExceptionInInitializerError extends java.lang.LinkageError {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.Throwable);
			constructor();
			static class: java.lang.Class<java.lang.ExceptionInInitializerError>;
			getCause(): java.lang.Throwable;
			getException(): java.lang.Throwable;
		}
		export class Void extends java.lang.Object {
			static TYPE: java.lang.Class<java.lang.Void>;
			static class: java.lang.Class<java.lang.Void>;
		}
		export interface ISuppressWarnings extends java.lang.annotation.IAnnotation {
			value(): native.Array<java.lang.String>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class CloneNotSupportedException extends java.lang.Exception {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.CloneNotSupportedException>;
		}
		export class VirtualMachineError extends java.lang.Error {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.VirtualMachineError>;
		}
		export class Iterable<T> implements java.lang.IIterable<T> {
			constructor(implementation: java.lang.IIterable<T>);
			iterator(): java.util.IIterator<T>;
		}
		export class SecurityManager extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.lang.SecurityManager>;
			checkMemberAccess(arg1: java.lang.Class<any>, arg2: number): void;
			checkPackageAccess(arg1: java.lang.String): void;
			checkPackageAccess(arg1: string): void;
			checkPermission(arg1: java.security.Permission, arg2: any): void;
			checkPermission(arg1: java.security.Permission): void;
			checkCreateClassLoader(): void;
			checkPropertiesAccess(): void;
			checkPropertyAccess(arg1: java.lang.String): void;
			checkPropertyAccess(arg1: string): void;
			getThreadGroup(): java.lang.ThreadGroup;
			checkAccess(arg1: java.lang.ThreadGroup): void;
			checkAccess(arg1: java.lang.Thread): void;
			checkRead(arg1: java.io.FileDescriptor): void;
			checkRead(arg1: java.lang.String): void;
			checkRead(arg1: string): void;
			checkRead(arg1: java.lang.String, arg2: any): void;
			checkRead(arg1: string, arg2: any): void;
			checkWrite(arg1: java.io.FileDescriptor): void;
			checkWrite(arg1: java.lang.String): void;
			checkWrite(arg1: string): void;
			checkExit(arg1: number): void;
			checkLink(arg1: java.lang.String): void;
			checkLink(arg1: string): void;
			checkDelete(arg1: java.lang.String): void;
			checkDelete(arg1: string): void;
			checkExec(arg1: java.lang.String): void;
			checkExec(arg1: string): void;
			checkConnect(arg1: java.lang.String, arg2: number): void;
			checkConnect(arg1: string, arg2: number): void;
			checkConnect(arg1: java.lang.String, arg2: number, arg3: any): void;
			checkConnect(arg1: string, arg2: number, arg3: any): void;
			checkSetFactory(): void;
			checkTopLevelWindow(arg1: any): boolean;
			checkAwtEventQueueAccess(): void;
			checkSystemClipboardAccess(): void;
			checkSecurityAccess(arg1: java.lang.String): void;
			checkSecurityAccess(arg1: string): void;
			getSecurityContext(): any;
			checkAccept(arg1: java.lang.String, arg2: number): void;
			checkAccept(arg1: string, arg2: number): void;
			checkListen(arg1: number): void;
			checkMulticast(arg1: java.net.InetAddress, arg2: native.Byte): void;
			checkMulticast(arg1: java.net.InetAddress): void;
			checkPackageDefinition(arg1: java.lang.String): void;
			checkPackageDefinition(arg1: string): void;
			checkPrintJobAccess(): void;
			getInCheck(): boolean;
		}
		export interface ICharSequence {
			toString(): string;
			charAt(arg1: number): string;
			length(): number;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
		}
		export class Package extends java.lang.Object implements java.lang.reflect.IAnnotatedElement {
			static class: java.lang.Class<java.lang.Package>;
			hashCode(): number;
			toString(): string;
			getName(): string;
			getAnnotation<A extends java.lang.annotation.IAnnotation>(arg1: java.lang.Class<A>): A;
			getAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
			getDeclaredAnnotations(): native.Array<java.lang.annotation.IAnnotation>;
			static getPackage(arg1: java.lang.String): java.lang.Package;
			static getPackage(arg1: string): java.lang.Package;
			isAnnotationPresent(arg1: java.lang.Class<any>): boolean;
			static getPackages(): native.Array<java.lang.Package>;
			isSealed(): boolean;
			isSealed(arg1: java.net.URL): boolean;
			isCompatibleWith(arg1: java.lang.String): boolean;
			isCompatibleWith(arg1: string): boolean;
			getImplementationTitle(): string;
			getImplementationVendor(): string;
			getImplementationVersion(): string;
			getSpecificationTitle(): string;
			getSpecificationVendor(): string;
			getSpecificationVersion(): string;
		}
		export class System extends java.lang.Object {
			static in: java.io.InputStream;
			static out: java.io.PrintStream;
			static err: java.io.PrintStream;
			static class: java.lang.Class<java.lang.System>;
			static arraycopy(arg1: any, arg2: number, arg3: any, arg4: number, arg5: number): void;
			static currentTimeMillis(): any;
			static identityHashCode(arg1: any): number;
			static nanoTime(): any;
			static getSecurityManager(): java.lang.SecurityManager;
			static getProperty(arg1: java.lang.String, arg2: java.lang.String): string;
			static getProperty(arg1: string, arg2: string): string;
			static getProperty(arg1: java.lang.String): string;
			static getProperty(arg1: string): string;
			static load(arg1: java.lang.String): void;
			static load(arg1: string): void;
			static loadLibrary(arg1: java.lang.String): void;
			static loadLibrary(arg1: string): void;
			static mapLibraryName(arg1: java.lang.String): string;
			static mapLibraryName(arg1: string): string;
			static clearProperty(arg1: java.lang.String): string;
			static clearProperty(arg1: string): string;
			static console(): java.io.Console;
			static exit(arg1: number): void;
			static gc(): void;
			static getProperties(): java.util.Properties;
			static getenv(arg1: java.lang.String): string;
			static getenv(arg1: string): string;
			static getenv(): java.util.IMap<string, string>;
			static inheritedChannel(): java.nio.channels.IChannel;
			static lineSeparator(): string;
			static runFinalization(): void;
			static runFinalizersOnExit(arg1: boolean): void;
			static setErr(arg1: java.io.PrintStream): void;
			static setIn(arg1: java.io.InputStream): void;
			static setOut(arg1: java.io.PrintStream): void;
			static setProperties(arg1: java.util.Properties): void;
			static setProperty(arg1: java.lang.String, arg2: java.lang.String): string;
			static setProperty(arg1: string, arg2: string): string;
			static setSecurityManager(arg1: java.lang.SecurityManager): void;
		}
		export class ThreadLocal<T> extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.lang.ThreadLocal<any>>;
			get(): T;
			remove(): void;
			set(arg1: T): void;
		}
		export class ClassLoader extends java.lang.Object {
			static class: java.lang.Class<java.lang.ClassLoader>;
			getResource(arg1: java.lang.String): java.net.URL;
			getResource(arg1: string): java.net.URL;
			getResourceAsStream(arg1: java.lang.String): java.io.InputStream;
			getResourceAsStream(arg1: string): java.io.InputStream;
			static getSystemResource(arg1: java.lang.String): java.net.URL;
			static getSystemResource(arg1: string): java.net.URL;
			static getSystemResourceAsStream(arg1: java.lang.String): java.io.InputStream;
			static getSystemResourceAsStream(arg1: string): java.io.InputStream;
			clearAssertionStatus(): void;
			getParent(): java.lang.ClassLoader;
			getResources(arg1: java.lang.String): java.util.IEnumeration<java.net.URL>;
			getResources(arg1: string): java.util.IEnumeration<java.net.URL>;
			static getSystemClassLoader(): java.lang.ClassLoader;
			static getSystemResources(arg1: java.lang.String): java.util.IEnumeration<java.net.URL>;
			static getSystemResources(arg1: string): java.util.IEnumeration<java.net.URL>;
			loadClass(arg1: java.lang.String): java.lang.Class<any>;
			loadClass(arg1: string): java.lang.Class<any>;
			setClassAssertionStatus(arg1: java.lang.String, arg2: boolean): void;
			setClassAssertionStatus(arg1: string, arg2: boolean): void;
			setDefaultAssertionStatus(arg1: boolean): void;
			setPackageAssertionStatus(arg1: java.lang.String, arg2: boolean): void;
			setPackageAssertionStatus(arg1: string, arg2: boolean): void;
		}
		export class RuntimePermission extends java.security.BasicPermission {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.lang.RuntimePermission>;
		}
		export class ArrayStoreException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.ArrayStoreException>;
		}
		export class AssertionError extends java.lang.Error {
			constructor(arg1: number);
			constructor(arg1: native.Long);
			constructor(arg1: native.Float);
			constructor(arg1: native.Double);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor();
			constructor(arg1: any);
			constructor(arg1: boolean);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.AssertionError>;
		}
		export interface IRunnable {
			run(): void;
		}
		export class SuppressWarnings implements java.lang.annotation.IAnnotation, java.lang.ISuppressWarnings {
			constructor(implementation: java.lang.ISuppressWarnings);
			value(): native.Array<java.lang.String>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class IllegalMonitorStateException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.IllegalMonitorStateException>;
		}
		export class NegativeArraySizeException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.NegativeArraySizeException>;
		}
		export class OutOfMemoryError extends java.lang.VirtualMachineError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.OutOfMemoryError>;
		}
		export class Boolean extends java.lang.Object implements java.io.ISerializable, java.lang.IComparable<boolean> {
			constructor(arg1: boolean);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static TRUE: java.lang.Boolean;
			static FALSE: java.lang.Boolean;
			static TYPE: java.lang.Class<boolean>;
			static class: java.lang.Class<java.lang.Boolean>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			static toString(arg1: boolean): string;
			static compare(arg1: boolean, arg2: boolean): number;
			compareTo(arg1: java.lang.Boolean): number;
			compareTo(arg1: boolean): number;
			compareTo(arg1: any): number;
			static valueOf(arg1: java.lang.String): boolean;
			static valueOf(arg1: string): boolean;
			static valueOf(arg1: boolean): boolean;
			booleanValue(): boolean;
			static getBoolean(arg1: java.lang.String): boolean;
			static getBoolean(arg1: string): boolean;
			static parseBoolean(arg1: java.lang.String): boolean;
			static parseBoolean(arg1: string): boolean;
		}
		export class ProcessBuilder extends java.lang.Object {
			constructor(arg1: java.util.IList<string>);
			constructor(arg1: native.Array<java.lang.String>);
			static class: java.lang.Class<java.lang.ProcessBuilder>;
			inheritIO(): java.lang.ProcessBuilder;
			redirectError(arg1: java.io.File): java.lang.ProcessBuilder;
			redirectErrorStream(): boolean;
			redirectErrorStream(arg1: boolean): java.lang.ProcessBuilder;
			redirectInput(arg1: java.io.File): java.lang.ProcessBuilder;
			redirectOutput(arg1: java.io.File): java.lang.ProcessBuilder;
			start(): java.lang.Process;
			directory(): java.io.File;
			directory(arg1: java.io.File): java.lang.ProcessBuilder;
			environment(): java.util.IMap<string, string>;
			command(): java.util.IList<string>;
			command(arg1: java.util.IList<string>): java.lang.ProcessBuilder;
			command(arg1: native.Array<java.lang.String>): java.lang.ProcessBuilder;
		}
		export class Error extends java.lang.Throwable {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.lang.Error>;
		}
		export class NoSuchMethodError extends java.lang.IncompatibleClassChangeError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.NoSuchMethodError>;
		}
		export class NullPointerException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.NullPointerException>;
		}
		export class Readable implements java.lang.IReadable {
			constructor(implementation: java.lang.IReadable);
			read(arg1: java.nio.CharBuffer): number;
		}
		export class InstantiationException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.InstantiationException>;
		}
		export class IllegalAccessException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.IllegalAccessException>;
		}
		export class UnknownError extends java.lang.VirtualMachineError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.UnknownError>;
		}
		export class Override implements java.lang.annotation.IAnnotation, java.lang.IOverride {
			constructor(implementation: java.lang.IOverride);
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class StringBuffer extends java.lang.AbstractStringBuilder implements java.io.ISerializable, java.lang.ICharSequence {
			constructor(arg1: java.lang.ICharSequence);
			constructor(arg1: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: number);
			constructor();
			static class: java.lang.Class<java.lang.StringBuffer>;
			toString(): string;
			append(arg1: java.lang.String): java.lang.StringBuffer;
			append(arg1: string): java.lang.StringBuffer;
			append(arg1: native.Double): java.lang.StringBuffer;
			append(arg1: number): java.lang.StringBuffer;
			append(arg1: native.Float): java.lang.StringBuffer;
			append(arg1: boolean): java.lang.StringBuffer;
			append(arg1: native.Long): java.lang.StringBuffer;
			append(arg1: any): java.lang.StringBuffer;
			append(arg1: java.lang.ICharSequence): java.lang.StringBuffer;
			append(arg1: native.Array<string>, arg2: number, arg3: number): java.lang.StringBuffer;
			append(arg1: native.Array<string>): java.lang.StringBuffer;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.lang.StringBuffer;
			append(arg1: string, arg2: number, arg3: number): java.lang.StringBuffer;
			append(arg1: java.lang.StringBuffer): java.lang.StringBuffer;
			charAt(arg1: number): string;
			codePointAt(arg1: number): number;
			codePointBefore(arg1: number): number;
			codePointCount(arg1: number, arg2: number): number;
			getChars(arg1: number, arg2: number, arg3: native.Array<string>, arg4: number): void;
			indexOf(arg1: java.lang.String): number;
			indexOf(arg1: string): number;
			indexOf(arg1: java.lang.String, arg2: number): number;
			indexOf(arg1: string, arg2: number): number;
			lastIndexOf(arg1: java.lang.String): number;
			lastIndexOf(arg1: string): number;
			lastIndexOf(arg1: java.lang.String, arg2: number): number;
			lastIndexOf(arg1: string, arg2: number): number;
			length(): number;
			offsetByCodePoints(arg1: number, arg2: number): number;
			replace(arg1: number, arg2: number, arg3: java.lang.String): java.lang.StringBuffer;
			replace(arg1: number, arg2: number, arg3: string): java.lang.StringBuffer;
			subSequence(arg1: number, arg2: number): java.lang.ICharSequence;
			substring(arg1: number, arg2: number): string;
			substring(arg1: number): string;
			appendCodePoint(arg1: number): java.lang.StringBuffer;
			capacity(): number;
			delete(arg1: number, arg2: number): java.lang.StringBuffer;
			deleteCharAt(arg1: number): java.lang.StringBuffer;
			ensureCapacity(arg1: number): void;
			insert(arg1: number, arg2: native.Long): java.lang.StringBuffer;
			insert(arg1: number, arg2: java.lang.ICharSequence, arg3: number, arg4: number): java.lang.StringBuffer;
			insert(arg1: number, arg2: string, arg3: number, arg4: number): java.lang.StringBuffer;
			insert(arg1: number, arg2: boolean): java.lang.StringBuffer;
			insert(arg1: number, arg2: string): java.lang.StringBuffer;
			insert(arg1: number, arg2: number): java.lang.StringBuffer;
			insert(arg1: number, arg2: native.Float): java.lang.StringBuffer;
			insert(arg1: number, arg2: native.Double): java.lang.StringBuffer;
			insert(arg1: number, arg2: native.Array<string>, arg3: number, arg4: number): java.lang.StringBuffer;
			insert(arg1: number, arg2: any): java.lang.StringBuffer;
			insert(arg1: number, arg2: java.lang.String): java.lang.StringBuffer;
			insert(arg1: number, arg2: native.Array<string>): java.lang.StringBuffer;
			insert(arg1: number, arg2: java.lang.ICharSequence): java.lang.StringBuffer;
			reverse(): java.lang.StringBuffer;
			setCharAt(arg1: number, arg2: string): void;
			setLength(arg1: number): void;
			trimToSize(): void;
		}
		export class Integer extends java.lang.Number implements java.lang.IComparable<java.lang.Integer> {
			constructor(arg1: number);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static MIN_VALUE: number;
			static MAX_VALUE: number;
			static TYPE: java.lang.Class<java.lang.Integer>;
			static SIZE: number;
			static class: java.lang.Class<java.lang.Integer>;
			private __java_lang_Integer: any;
			hashCode(): number;
			equals(arg1: any): boolean;
			static toString(arg1: number): string;
			static toString(arg1: number, arg2: number): string;
			toString(): string;
			static toHexString(arg1: number): string;
			static compare(arg1: number, arg2: number): number;
			compareTo(arg1: any): number;
			compareTo(arg1: java.lang.Integer): number;
			static decode(arg1: java.lang.String): java.lang.Integer;
			static decode(arg1: string): java.lang.Integer;
			static valueOf(arg1: number): java.lang.Integer;
			static valueOf(arg1: java.lang.String, arg2: number): java.lang.Integer;
			static valueOf(arg1: string, arg2: number): java.lang.Integer;
			static valueOf(arg1: java.lang.String): java.lang.Integer;
			static valueOf(arg1: string): java.lang.Integer;
			longValue(): any;
			intValue(): number;
			static reverse(arg1: number): number;
			static reverseBytes(arg1: number): number;
			byteValue(): number;
			doubleValue(): any;
			floatValue(): number;
			shortValue(): number;
			static parseInt(arg1: java.lang.String): number;
			static parseInt(arg1: string): number;
			static parseInt(arg1: java.lang.String, arg2: number): number;
			static parseInt(arg1: string, arg2: number): number;
			static bitCount(arg1: number): number;
			static getInteger(arg1: java.lang.String, arg2: number): java.lang.Integer;
			static getInteger(arg1: string, arg2: number): java.lang.Integer;
			static getInteger(arg1: java.lang.String, arg2: java.lang.Integer): java.lang.Integer;
			static getInteger(arg1: string, arg2: java.lang.Integer): java.lang.Integer;
			static getInteger(arg1: java.lang.String): java.lang.Integer;
			static getInteger(arg1: string): java.lang.Integer;
			static highestOneBit(arg1: number): number;
			static lowestOneBit(arg1: number): number;
			static numberOfLeadingZeros(arg1: number): number;
			static numberOfTrailingZeros(arg1: number): number;
			static rotateLeft(arg1: number, arg2: number): number;
			static rotateRight(arg1: number, arg2: number): number;
			static signum(arg1: number): number;
			static toBinaryString(arg1: number): string;
			static toOctalString(arg1: number): string;
		}
		export class NoSuchFieldError extends java.lang.IncompatibleClassChangeError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.NoSuchFieldError>;
		}
		export class Appendable implements java.lang.IAppendable {
			constructor(implementation: java.lang.IAppendable);
			append(arg1: java.lang.ICharSequence): java.lang.IAppendable;
			append(arg1: string): java.lang.IAppendable;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.lang.IAppendable;
			append(arg1: string, arg2: number, arg3: number): java.lang.IAppendable;
		}
		export class ArrayIndexOutOfBoundsException extends java.lang.IndexOutOfBoundsException {
			constructor();
			constructor(arg1: number);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.lang.ArrayIndexOutOfBoundsException>;
		}
	}
	export module util {
		export class UnknownFormatFlagsException extends java.util.IllegalFormatException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.UnknownFormatFlagsException>;
			getMessage(): string;
			getFlags(): string;
		}
		export class Iterator<E> implements java.util.IIterator<E> {
			constructor(implementation: java.util.IIterator<E>);
			hasNext(): boolean;
			next(): E;
			remove(): void;
		}
		export class Formatter extends java.lang.Object implements java.io.ICloseable, java.io.IFlushable {
			constructor(arg1: java.io.File, arg2: java.lang.String, arg3: java.util.Locale);
			constructor(arg1: java.io.File, arg2: string, arg3: java.util.Locale);
			constructor(arg1: java.io.File, arg2: java.lang.String);
			constructor(arg1: java.io.File, arg2: string);
			constructor(arg1: java.io.File);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.util.Locale);
			constructor(arg1: string, arg2: string, arg3: java.util.Locale);
			constructor(arg1: java.io.PrintStream);
			constructor(arg1: java.io.OutputStream);
			constructor(arg1: java.io.OutputStream, arg2: java.lang.String);
			constructor(arg1: java.io.OutputStream, arg2: string);
			constructor(arg1: java.lang.IAppendable);
			constructor();
			constructor(arg1: java.io.OutputStream, arg2: java.lang.String, arg3: java.util.Locale);
			constructor(arg1: java.io.OutputStream, arg2: string, arg3: java.util.Locale);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.IAppendable, arg2: java.util.Locale);
			constructor(arg1: java.util.Locale);
			static class: java.lang.Class<java.util.Formatter>;
			ioException(): java.io.IOException;
			toString(): string;
			format(arg1: java.lang.String, arg2: native.Array<any>): java.util.Formatter;
			format(arg1: string, arg2: native.Array<any>): java.util.Formatter;
			format(arg1: java.util.Locale, arg2: java.lang.String, arg3: native.Array<any>): java.util.Formatter;
			format(arg1: java.util.Locale, arg2: string, arg3: native.Array<any>): java.util.Formatter;
			out(): java.lang.IAppendable;
			close(): void;
			flush(): void;
			locale(): java.util.Locale;
		}
		export module Formatter {
			export enum BigDecimalLayoutForm {
				SCIENTIFIC,
				DECIMAL_FLOAT
			}
			export module BigDecimalLayoutForm {
				export function valueOf(arg1: java.lang.String): java.util.Formatter.BigDecimalLayoutForm;
				export function valueOf(arg1: string): java.util.Formatter.BigDecimalLayoutForm;
				export function values(): native.Array<java.util.Formatter.BigDecimalLayoutForm>;
			}
		}
		export interface INavigableSet<E> extends java.util.ISortedSet<E> {
			iterator(): java.util.IIterator<E>;
			floor(arg1: E): E;
			descendingIterator(): java.util.IIterator<E>;
			pollFirst(): E;
			pollLast(): E;
			ceiling(arg1: E): E;
			descendingSet(): java.util.INavigableSet<E>;
			headSet(arg1: E, arg2: boolean): java.util.INavigableSet<E>;
			headSet(arg1: E): java.util.ISortedSet<E>;
			higher(arg1: E): E;
			lower(arg1: E): E;
			subSet(arg1: E, arg2: E): java.util.ISortedSet<E>;
			subSet(arg1: E, arg2: boolean, arg3: E, arg4: boolean): java.util.INavigableSet<E>;
			tailSet(arg1: E): java.util.ISortedSet<E>;
			tailSet(arg1: E, arg2: boolean): java.util.INavigableSet<E>;
			first(): E;
			last(): E;
			comparator(): java.util.IComparator<any>;
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class ResourceBundle extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.util.ResourceBundle>;
			keySet(): java.util.ISet<string>;
			containsKey(arg1: java.lang.String): boolean;
			containsKey(arg1: string): boolean;
			static clearCache(arg1: java.lang.ClassLoader): void;
			static clearCache(): void;
			static getBundle(arg1: java.lang.String, arg2: java.util.Locale): java.util.ResourceBundle;
			static getBundle(arg1: string, arg2: java.util.Locale): java.util.ResourceBundle;
			static getBundle(arg1: java.lang.String, arg2: java.util.Locale, arg3: java.util.ResourceBundle.Control): java.util.ResourceBundle;
			static getBundle(arg1: string, arg2: java.util.Locale, arg3: java.util.ResourceBundle.Control): java.util.ResourceBundle;
			static getBundle(arg1: java.lang.String, arg2: java.util.Locale, arg3: java.lang.ClassLoader): java.util.ResourceBundle;
			static getBundle(arg1: string, arg2: java.util.Locale, arg3: java.lang.ClassLoader): java.util.ResourceBundle;
			static getBundle(arg1: java.lang.String, arg2: java.util.Locale, arg3: java.lang.ClassLoader, arg4: java.util.ResourceBundle.Control): java.util.ResourceBundle;
			static getBundle(arg1: string, arg2: java.util.Locale, arg3: java.lang.ClassLoader, arg4: java.util.ResourceBundle.Control): java.util.ResourceBundle;
			static getBundle(arg1: java.lang.String): java.util.ResourceBundle;
			static getBundle(arg1: string): java.util.ResourceBundle;
			static getBundle(arg1: java.lang.String, arg2: java.util.ResourceBundle.Control): java.util.ResourceBundle;
			static getBundle(arg1: string, arg2: java.util.ResourceBundle.Control): java.util.ResourceBundle;
			getObject(arg1: java.lang.String): any;
			getObject(arg1: string): any;
			getKeys(): java.util.IEnumeration<string>;
			getString(arg1: java.lang.String): string;
			getString(arg1: string): string;
			getLocale(): java.util.Locale;
			getStringArray(arg1: java.lang.String): native.Array<java.lang.String>;
			getStringArray(arg1: string): native.Array<java.lang.String>;
		}
		export module ResourceBundle {
			export class Control extends java.lang.Object {
				static FORMAT_DEFAULT: java.util.IList<string>;
				static FORMAT_CLASS: java.util.IList<string>;
				static FORMAT_PROPERTIES: java.util.IList<string>;
				static TTL_DONT_CACHE: native.Long;
				static TTL_NO_EXPIRATION_CONTROL: native.Long;
				static class: java.lang.Class<java.util.ResourceBundle.Control>;
				getCandidateLocales(arg1: java.lang.String, arg2: java.util.Locale): java.util.IList<java.util.Locale>;
				getCandidateLocales(arg1: string, arg2: java.util.Locale): java.util.IList<java.util.Locale>;
				getTimeToLive(arg1: java.lang.String, arg2: java.util.Locale): any;
				getTimeToLive(arg1: string, arg2: java.util.Locale): any;
				static getControl(arg1: java.util.IList<string>): java.util.ResourceBundle.Control;
				getFallbackLocale(arg1: java.lang.String, arg2: java.util.Locale): java.util.Locale;
				getFallbackLocale(arg1: string, arg2: java.util.Locale): java.util.Locale;
				getFormats(arg1: java.lang.String): java.util.IList<string>;
				getFormats(arg1: string): java.util.IList<string>;
				static getNoFallbackControl(arg1: java.util.IList<string>): java.util.ResourceBundle.Control;
				needsReload(arg1: java.lang.String, arg2: java.util.Locale, arg3: java.lang.String, arg4: java.lang.ClassLoader, arg5: java.util.ResourceBundle, arg6: native.Long): boolean;
				needsReload(arg1: string, arg2: java.util.Locale, arg3: string, arg4: java.lang.ClassLoader, arg5: java.util.ResourceBundle, arg6: native.Long): boolean;
				newBundle(arg1: java.lang.String, arg2: java.util.Locale, arg3: java.lang.String, arg4: java.lang.ClassLoader, arg5: boolean): java.util.ResourceBundle;
				newBundle(arg1: string, arg2: java.util.Locale, arg3: string, arg4: java.lang.ClassLoader, arg5: boolean): java.util.ResourceBundle;
				toBundleName(arg1: java.lang.String, arg2: java.util.Locale): string;
				toBundleName(arg1: string, arg2: java.util.Locale): string;
				toResourceName(arg1: java.lang.String, arg2: java.lang.String): string;
				toResourceName(arg1: string, arg2: string): string;
			}
		}
		export class IllegalFormatConversionException extends java.util.IllegalFormatException {
			constructor(arg1: string, arg2: java.lang.Class<any>);
			static class: java.lang.Class<java.util.IllegalFormatConversionException>;
			getConversion(): string;
			getArgumentClass(): java.lang.Class<any>;
			getMessage(): string;
		}
		export class Arrays extends java.lang.Object {
			static class: java.lang.Class<java.util.Arrays>;
			static hashCode(arg1: native.Array<native.Short>): number;
			static equals(arg1: native.Array<number>, arg2: native.Array<number>): boolean;
			static toString(arg1: native.Array<native.Byte>): string;
			static copyOf<T>(arg1: native.Array<T>, arg2: number): native.Array<T>;
			static copyOf<T, U>(arg1: native.Array<U>, arg2: number, arg3: java.lang.Class<any>): native.Array<T>;
			static copyOfRange(arg1: native.Array<native.Short>, arg2: number, arg3: number): native.Array<native.Short>;
			static copyOfRange<T, U>(arg1: native.Array<U>, arg2: number, arg3: number, arg4: java.lang.Class<any>): native.Array<T>;
			static asList<T>(arg1: native.Array<T>): java.util.IList<T>;
			static fill(arg1: native.Array<native.Short>, arg2: native.Short): void;
			static fill(arg1: native.Array<number>, arg2: number): void;
			static fill(arg1: native.Array<number>, arg2: number, arg3: number, arg4: number): void;
			static fill(arg1: native.Array<native.Double>, arg2: native.Double): void;
			static fill(arg1: native.Array<native.Double>, arg2: number, arg3: number, arg4: native.Double): void;
			static fill(arg1: native.Array<native.Float>, arg2: native.Float): void;
			static fill(arg1: native.Array<native.Float>, arg2: number, arg3: number, arg4: native.Float): void;
			static fill(arg1: native.Array<any>, arg2: any): void;
			static fill(arg1: native.Array<any>, arg2: number, arg3: number, arg4: any): void;
			static fill(arg1: native.Array<string>, arg2: string): void;
			static fill(arg1: native.Array<string>, arg2: number, arg3: number, arg4: string): void;
			static fill(arg1: native.Array<native.Byte>, arg2: native.Byte): void;
			static fill(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: native.Byte): void;
			static fill(arg1: native.Array<boolean>, arg2: boolean): void;
			static fill(arg1: native.Array<boolean>, arg2: number, arg3: number, arg4: boolean): void;
			static fill(arg1: native.Array<native.Long>, arg2: native.Long): void;
			static fill(arg1: native.Array<native.Long>, arg2: number, arg3: number, arg4: native.Long): void;
			static fill(arg1: native.Array<native.Short>, arg2: number, arg3: number, arg4: native.Short): void;
			static binarySearch(arg1: native.Array<native.Short>, arg2: number, arg3: number, arg4: native.Short): number;
			static binarySearch(arg1: native.Array<string>, arg2: string): number;
			static binarySearch(arg1: native.Array<string>, arg2: number, arg3: number, arg4: string): number;
			static binarySearch(arg1: native.Array<native.Byte>, arg2: native.Byte): number;
			static binarySearch(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: native.Byte): number;
			static binarySearch(arg1: native.Array<native.Double>, arg2: native.Double): number;
			static binarySearch(arg1: native.Array<native.Double>, arg2: number): number;
			static binarySearch(arg1: native.Array<native.Long>, arg2: native.Long): number;
			static binarySearch(arg1: native.Array<native.Long>, arg2: number, arg3: number, arg4: native.Long): number;
			static binarySearch(arg1: native.Array<number>, arg2: number, arg3: number, arg4: number): number;
			static binarySearch(arg1: native.Array<native.Short>, arg2: native.Short): number;
			static binarySearch(arg1: native.Array<native.Float>, arg2: native.Float): number;
			static binarySearch(arg1: native.Array<native.Float>, arg2: number, arg3: number, arg4: native.Float): number;
			static binarySearch<T>(arg1: native.Array<T>, arg2: T, arg3: java.util.IComparator<any>): number;
			static binarySearch(arg1: native.Array<any>, arg2: any): number;
			static binarySearch<T>(arg1: native.Array<T>, arg2: number, arg3: number, arg4: T, arg5: java.util.IComparator<any>): number;
			static binarySearch(arg1: native.Array<any>, arg2: number, arg3: number, arg4: any): number;
			static binarySearch(arg1: native.Array<native.Double>, arg2: number, arg3: number, arg4: native.Double): number;
			static sort(arg1: native.Array<native.Double>): void;
			static sort(arg1: native.Array<native.Float>, arg2: number, arg3: number): void;
			static sort<T>(arg1: native.Array<T>, arg2: number, arg3: number, arg4: java.util.IComparator<any>): void;
			static sort<T>(arg1: native.Array<T>, arg2: java.util.IComparator<any>): void;
			static deepEquals(arg1: native.Array<any>, arg2: native.Array<any>): boolean;
			static deepHashCode(arg1: native.Array<any>): number;
			static deepToString(arg1: native.Array<any>): string;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
		}
		export interface IFormattable {
			formatTo(arg1: java.util.Formatter, arg2: number, arg3: number, arg4: number): void;
		}
		export class ServiceLoader<S> extends java.lang.Object implements java.lang.IIterable<S> {
			static class: java.lang.Class<java.util.ServiceLoader<any>>;
			toString(): string;
			iterator(): java.util.IIterator<S>;
			static load<S>(arg1: java.lang.Class<S>, arg2: java.lang.ClassLoader): java.util.ServiceLoader<S>;
			static load<S>(arg1: java.lang.Class<S>): java.util.ServiceLoader<S>;
			static loadInstalled<S>(arg1: java.lang.Class<S>): java.util.ServiceLoader<S>;
			reload(): void;
		}
		export interface IComparator<T> {
			equals(arg1: any): boolean;
			compare(arg1: T, arg2: T): number;
		}
		export interface IIterator<E> {
			hasNext(): boolean;
			next(): E;
			remove(): void;
		}
		export class Date extends java.lang.Object implements java.io.ISerializable, java.lang.ICloneable, java.lang.IComparable<java.util.Date> {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number);
			constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number);
			constructor();
			constructor(arg1: native.Long);
			constructor(arg1: number, arg2: number, arg3: number);
			static class: java.lang.Class<java.util.Date>;
			Year: number;
			Date: number;
			Seconds: number;
			Hours: number;
			Minutes: number;
			Month: number;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			toString(): string;
			compareTo(arg1: java.util.Date): number;
			compareTo(arg1: any): number;
			static parse(arg1: java.lang.String): any;
			static parse(arg1: string): any;
			after(arg1: java.util.Date): boolean;
			before(arg1: java.util.Date): boolean;
			getDate(): number;
			getTime(): any;
			setTime(arg1: native.Long): void;
			getHours(): number;
			getMinutes(): number;
			getMonth(): number;
			getSeconds(): number;
			getYear(): number;
			static UTC(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): any;
			getDay(): number;
			getTimezoneOffset(): number;
			setDate(arg1: number): void;
			setHours(arg1: number): void;
			setMinutes(arg1: number): void;
			setMonth(arg1: number): void;
			setSeconds(arg1: number): void;
			setYear(arg1: number): void;
			toGMTString(): string;
			toLocaleString(): string;
		}
		export module concurrent {
			export interface IBlockingQueue<E> extends java.util.IQueue<E> {
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				drainTo(arg1: java.util.ICollection<any>): number;
				remainingCapacity(): number;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				put(arg1: E): void;
				remove(arg1: any): boolean;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offer(arg1: E): boolean;
				take(): E;
				remove(): E;
				poll(): E;
				peek(): E;
				element(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				size(): number;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				addAll(arg1: java.util.ICollection<any>): boolean;
				iterator(): java.util.IIterator<E>;
				clear(): void;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export class RejectedExecutionException extends java.lang.RuntimeException {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<java.util.concurrent.RejectedExecutionException>;
			}
			export class Callable<V> implements java.util.concurrent.ICallable<V> {
				constructor(implementation: java.util.concurrent.ICallable<V>);
				call(): V;
			}
			export class SynchronousQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.IBlockingQueue<E>, java.io.ISerializable {
				constructor(arg1: boolean);
				constructor();
				static class: java.lang.Class<java.util.concurrent.SynchronousQueue<any>>;
				drainTo(arg1: java.util.ICollection<any>): number;
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				remainingCapacity(): number;
				contains(arg1: any): boolean;
				isEmpty(): boolean;
				size(): number;
				toArray(): native.Array<any>;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				iterator(): java.util.IIterator<E>;
				put(arg1: E): void;
				remove(arg1: any): boolean;
				clear(): void;
				poll(): E;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
				peek(): E;
				offer(arg1: E): boolean;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				take(): E;
				add(arg1: E): boolean;
				remove(): E;
				element(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				addAll(arg1: java.util.ICollection<any>): boolean;
			}
			export class ArrayBlockingQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.IBlockingQueue<E>, java.io.ISerializable {
				constructor(arg1: number, arg2: boolean);
				constructor(arg1: number, arg2: boolean, arg3: java.util.ICollection<any>);
				constructor(arg1: number);
				static class: java.lang.Class<java.util.concurrent.ArrayBlockingQueue<any>>;
				drainTo(arg1: java.util.ICollection<any>): number;
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				remainingCapacity(): number;
				toString(): string;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				size(): number;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				iterator(): java.util.IIterator<E>;
				put(arg1: E): void;
				remove(arg1: any): boolean;
				clear(): void;
				poll(): E;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				peek(): E;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offer(arg1: E): boolean;
				take(): E;
				remove(): E;
				element(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				addAll(arg1: java.util.ICollection<any>): boolean;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export interface IRunnableFuture<V> extends java.lang.IRunnable, java.util.concurrent.IFuture<V> {
				run(): void;
				isCancelled(): boolean;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				get(): V;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
			}
			export class TimeoutException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.concurrent.TimeoutException>;
			}
			export class CopyOnWriteArrayList<E> extends java.lang.Object implements java.util.IList<E>, java.util.IRandomAccess, java.lang.ICloneable, java.io.ISerializable {
				constructor(arg1: native.Array<E>);
				constructor(arg1: java.util.ICollection<any>);
				constructor();
				static class: java.lang.Class<java.util.concurrent.CopyOnWriteArrayList<any>>;
				addIfAbsent(arg1: E): boolean;
				addAllAbsent(arg1: java.util.ICollection<any>): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				clone(): any;
				toString(): string;
				add(arg1: E): boolean;
				add(arg1: number, arg2: E): void;
				contains(arg1: any): boolean;
				get(arg1: number): E;
				indexOf(arg1: any): number;
				indexOf(arg1: E, arg2: number): number;
				isEmpty(): boolean;
				lastIndexOf(arg1: any): number;
				lastIndexOf(arg1: E, arg2: number): number;
				size(): number;
				subList(arg1: number, arg2: number): java.util.IList<E>;
				toArray(): native.Array<any>;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				addAll(arg1: java.util.ICollection<any>): boolean;
				addAll(arg1: number, arg2: java.util.ICollection<any>): boolean;
				iterator(): java.util.IIterator<E>;
				remove(arg1: any): boolean;
				remove(arg1: number): E;
				clear(): void;
				set(arg1: number, arg2: E): E;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				listIterator(arg1: number): java.util.IListIterator<E>;
				listIterator(): java.util.IListIterator<E>;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export class RunnableFuture<V> implements java.lang.IRunnable, java.util.concurrent.IFuture<V>, java.util.concurrent.IRunnableFuture<V> {
				constructor(implementation: java.util.concurrent.IRunnableFuture<V>);
				run(): void;
				isCancelled(): boolean;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				get(): V;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
			}
			export class ScheduledThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor implements java.util.concurrent.IScheduledExecutorService {
				constructor(arg1: number, arg2: java.util.concurrent.IThreadFactory, arg3: java.util.concurrent.IRejectedExecutionHandler);
				constructor(arg1: number);
				constructor(arg1: number, arg2: java.util.concurrent.IThreadFactory);
				constructor(arg1: number, arg2: java.util.concurrent.IRejectedExecutionHandler);
				static class: java.lang.Class<java.util.concurrent.ScheduledThreadPoolExecutor>;
				RemoveOnCancelPolicy: boolean;
				ExecuteExistingDelayedTasksAfterShutdownPolicy: boolean;
				ContinueExistingPeriodicTasksAfterShutdownPolicy: boolean;
				getContinueExistingPeriodicTasksAfterShutdownPolicy(): boolean;
				getExecuteExistingDelayedTasksAfterShutdownPolicy(): boolean;
				getRemoveOnCancelPolicy(): boolean;
				setContinueExistingPeriodicTasksAfterShutdownPolicy(arg1: boolean): void;
				setExecuteExistingDelayedTasksAfterShutdownPolicy(arg1: boolean): void;
				setRemoveOnCancelPolicy(arg1: boolean): void;
				schedule(arg1: java.lang.IRunnable, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				schedule<V>(arg1: java.util.concurrent.ICallable<V>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<V>;
				scheduleAtFixedRate(arg1: java.lang.IRunnable, arg2: native.Long, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				scheduleWithFixedDelay(arg1: java.lang.IRunnable, arg2: native.Long, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				shutdownNow(): java.util.IList<java.lang.IRunnable>;
				shutdown(): void;
				execute(arg1: java.lang.IRunnable): void;
				getQueue(): java.util.concurrent.IBlockingQueue<java.lang.IRunnable>;
				submit<T>(arg1: java.lang.IRunnable, arg2: T): java.util.concurrent.IFuture<T>;
				submit(arg1: java.lang.IRunnable): java.util.concurrent.IFuture<any>;
				submit<T>(arg1: java.util.concurrent.ICallable<T>): java.util.concurrent.IFuture<T>;
				awaitTermination(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				invokeAll<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAll<T>(arg1: java.util.ICollection<any>): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAny<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): T;
				invokeAny<T>(arg1: java.util.ICollection<any>): T;
				isShutdown(): boolean;
				isTerminated(): boolean;
			}
			export class BrokenBarrierException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.concurrent.BrokenBarrierException>;
			}
			export class RejectedExecutionHandler implements java.util.concurrent.IRejectedExecutionHandler {
				constructor(implementation: java.util.concurrent.IRejectedExecutionHandler);
				rejectedExecution(arg1: java.lang.IRunnable, arg2: java.util.concurrent.ThreadPoolExecutor): void;
			}
			export class CyclicBarrier extends java.lang.Object {
				constructor(arg1: number);
				constructor(arg1: number, arg2: java.lang.IRunnable);
				static class: java.lang.Class<java.util.concurrent.CyclicBarrier>;
				getNumberWaiting(): number;
				getParties(): number;
				isBroken(): boolean;
				reset(): void;
				await(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): number;
				await(): number;
			}
			export class ConcurrentSkipListMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.IConcurrentNavigableMap<K, V>, java.lang.ICloneable, java.io.ISerializable {
				constructor(arg1: java.util.ISortedMap<K, any>);
				constructor(arg1: java.util.IMap<any, any>);
				constructor(arg1: java.util.IComparator<any>);
				constructor();
				static class: java.lang.Class<java.util.concurrent.ConcurrentSkipListMap<any, any>>;
				equals(arg1: any): boolean;
				clone(): java.util.concurrent.ConcurrentSkipListMap<K, V>;
				get(arg1: any): V;
				isEmpty(): boolean;
				replace(arg1: K, arg2: V, arg3: V): boolean;
				replace(arg1: K, arg2: V): V;
				size(): number;
				entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
				put(arg1: K, arg2: V): V;
				values(): java.util.ICollection<V>;
				putIfAbsent(arg1: K, arg2: V): V;
				remove(arg1: any): V;
				remove(arg1: any, arg2: any): boolean;
				clear(): void;
				keySet(): java.util.INavigableSet<K>;
				containsKey(arg1: any): boolean;
				containsValue(arg1: any): boolean;
				ceilingKey(arg1: K): K;
				comparator(): java.util.IComparator<any>;
				descendingKeySet(): java.util.INavigableSet<K>;
				descendingMap(): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				firstKey(): K;
				floorKey(arg1: K): K;
				headMap(arg1: K, arg2: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				headMap(arg1: any, arg2: boolean): java.util.INavigableMap<any, any>;
				headMap(arg1: any): java.util.ISortedMap<any, any>;
				headMap(arg1: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				higherKey(arg1: K): K;
				lastKey(): K;
				lowerKey(arg1: K): K;
				navigableKeySet(): java.util.INavigableSet<K>;
				pollFirstEntry(): java.util.Map.IEntry<K, V>;
				pollLastEntry(): java.util.Map.IEntry<K, V>;
				subMap(arg1: any, arg2: any): java.util.ISortedMap<any, any>;
				subMap(arg1: K, arg2: boolean, arg3: K, arg4: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				subMap(arg1: any, arg2: boolean, arg3: any, arg4: boolean): java.util.INavigableMap<any, any>;
				subMap(arg1: K, arg2: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				tailMap(arg1: any): java.util.ISortedMap<any, any>;
				tailMap(arg1: any, arg2: boolean): java.util.INavigableMap<any, any>;
				tailMap(arg1: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				tailMap(arg1: K, arg2: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				ceilingEntry(arg1: K): java.util.Map.IEntry<K, V>;
				firstEntry(): java.util.Map.IEntry<K, V>;
				floorEntry(arg1: K): java.util.Map.IEntry<K, V>;
				higherEntry(arg1: K): java.util.Map.IEntry<K, V>;
				lastEntry(): java.util.Map.IEntry<K, V>;
				lowerEntry(arg1: K): java.util.Map.IEntry<K, V>;
				hashCode(): number;
				putAll(arg1: java.util.IMap<any, any>): void;
			}
			export interface IScheduledExecutorService extends java.util.concurrent.IExecutorService {
				schedule(arg1: java.lang.IRunnable, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				schedule<V>(arg1: java.util.concurrent.ICallable<V>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<V>;
				scheduleAtFixedRate(arg1: java.lang.IRunnable, arg2: native.Long, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				scheduleWithFixedDelay(arg1: java.lang.IRunnable, arg2: native.Long, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				awaitTermination(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				invokeAll<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAll<T>(arg1: java.util.ICollection<any>): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAny<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): T;
				invokeAny<T>(arg1: java.util.ICollection<any>): T;
				isShutdown(): boolean;
				isTerminated(): boolean;
				shutdownNow(): java.util.IList<java.lang.IRunnable>;
				shutdown(): void;
				submit<T>(arg1: java.lang.IRunnable, arg2: T): java.util.concurrent.IFuture<T>;
				submit<T>(arg1: java.util.concurrent.ICallable<T>): java.util.concurrent.IFuture<T>;
				submit(arg1: java.lang.IRunnable): java.util.concurrent.IFuture<any>;
				execute(arg1: java.lang.IRunnable): void;
			}
			export class CompletionService<V> implements java.util.concurrent.ICompletionService<V> {
				constructor(implementation: java.util.concurrent.ICompletionService<V>);
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): java.util.concurrent.IFuture<V>;
				poll(): java.util.concurrent.IFuture<V>;
				submit(arg1: java.util.concurrent.ICallable<V>): java.util.concurrent.IFuture<V>;
				submit(arg1: java.lang.IRunnable, arg2: V): java.util.concurrent.IFuture<V>;
				take(): java.util.concurrent.IFuture<V>;
			}
			export class Semaphore extends java.lang.Object implements java.io.ISerializable {
				constructor(arg1: number);
				constructor(arg1: number, arg2: boolean);
				static class: java.lang.Class<java.util.concurrent.Semaphore>;
				acquireUninterruptibly(): void;
				acquireUninterruptibly(arg1: number): void;
				availablePermits(): number;
				drainPermits(): number;
				toString(): string;
				getQueueLength(): number;
				hasQueuedThreads(): boolean;
				isFair(): boolean;
				release(arg1: number): void;
				release(): void;
				acquire(): void;
				acquire(arg1: number): void;
				tryAcquire(arg1: number, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				tryAcquire(arg1: number): boolean;
				tryAcquire(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				tryAcquire(): boolean;
			}
			export class CancellationException extends java.lang.IllegalStateException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.concurrent.CancellationException>;
			}
			export class LinkedBlockingQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.IBlockingQueue<E>, java.io.ISerializable {
				constructor(arg1: java.util.ICollection<any>);
				constructor();
				constructor(arg1: number);
				static class: java.lang.Class<java.util.concurrent.LinkedBlockingQueue<any>>;
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				drainTo(arg1: java.util.ICollection<any>): number;
				remainingCapacity(): number;
				toString(): string;
				contains(arg1: any): boolean;
				size(): number;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				iterator(): java.util.IIterator<E>;
				put(arg1: E): void;
				remove(arg1: any): boolean;
				clear(): void;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				poll(): E;
				peek(): E;
				offer(arg1: E): boolean;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				take(): E;
				add(arg1: E): boolean;
				remove(): E;
				element(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				addAll(arg1: java.util.ICollection<any>): boolean;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export interface IConcurrentMap<K, V> extends java.util.IMap<K, V> {
				replace(arg1: K, arg2: V, arg3: V): boolean;
				replace(arg1: K, arg2: V): V;
				putIfAbsent(arg1: K, arg2: V): V;
				remove(arg1: any, arg2: any): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				get(arg1: any): V;
				isEmpty(): boolean;
				size(): number;
				entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
				put(arg1: K, arg2: V): V;
				putAll(arg1: java.util.IMap<any, any>): void;
				values(): java.util.ICollection<V>;
				remove(arg1: any): V;
				clear(): void;
				keySet(): java.util.ISet<K>;
				containsKey(arg1: any): boolean;
				containsValue(arg1: any): boolean;
			}
			export class RunnableScheduledFuture<V> implements java.util.concurrent.IRunnableFuture<V>, java.util.concurrent.IScheduledFuture<V>, java.util.concurrent.IRunnableScheduledFuture<V> {
				constructor(implementation: java.util.concurrent.IRunnableScheduledFuture<V>);
				isPeriodic(): boolean;
				run(): void;
				isCancelled(): boolean;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				get(): V;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
				getDelay(arg1: java.util.concurrent.TimeUnit): any;
				compareTo(arg1: java.util.concurrent.IDelayed): number;
			}
			export interface IThreadFactory {
				newThread(arg1: java.lang.IRunnable): java.lang.Thread;
			}
			export interface IBlockingDeque<E> extends java.util.concurrent.IBlockingQueue<E>, java.util.IDeque<E> {
				putFirst(arg1: E): void;
				putLast(arg1: E): void;
				takeFirst(): E;
				takeLast(): E;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				size(): number;
				iterator(): java.util.IIterator<E>;
				put(arg1: E): void;
				push(arg1: E): void;
				remove(): E;
				remove(arg1: any): boolean;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				poll(): E;
				peek(): E;
				addFirst(arg1: E): void;
				addLast(arg1: E): void;
				element(): E;
				offer(arg1: E): boolean;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offerFirst(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offerFirst(arg1: E): boolean;
				offerLast(arg1: E): boolean;
				offerLast(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				pollFirst(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				pollLast(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				removeFirstOccurrence(arg1: any): boolean;
				removeLastOccurrence(arg1: any): boolean;
				take(): E;
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				drainTo(arg1: java.util.ICollection<any>): number;
				remainingCapacity(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				addAll(arg1: java.util.ICollection<any>): boolean;
				clear(): void;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
				pop(): E;
				getFirst(): E;
				getLast(): E;
				removeFirst(): E;
				removeLast(): E;
				descendingIterator(): java.util.IIterator<E>;
				peekFirst(): E;
				peekLast(): E;
				pollFirst(): E;
				pollLast(): E;
			}
			export class CopyOnWriteArraySet<E> extends java.util.AbstractSet<E> implements java.io.ISerializable {
				constructor();
				constructor(arg1: java.util.ICollection<any>);
				static class: java.lang.Class<java.util.concurrent.CopyOnWriteArraySet<any>>;
				equals(arg1: any): boolean;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				isEmpty(): boolean;
				size(): number;
				toArray(): native.Array<any>;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				addAll(arg1: java.util.ICollection<any>): boolean;
				iterator(): java.util.IIterator<E>;
				remove(arg1: any): boolean;
				clear(): void;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export class ScheduledExecutorService implements java.util.concurrent.IExecutorService, java.util.concurrent.IScheduledExecutorService {
				constructor(implementation: java.util.concurrent.IScheduledExecutorService);
				schedule(arg1: java.lang.IRunnable, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				schedule<V>(arg1: java.util.concurrent.ICallable<V>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<V>;
				scheduleAtFixedRate(arg1: java.lang.IRunnable, arg2: native.Long, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				scheduleWithFixedDelay(arg1: java.lang.IRunnable, arg2: native.Long, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): java.util.concurrent.IScheduledFuture<any>;
				awaitTermination(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				invokeAll<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAll<T>(arg1: java.util.ICollection<any>): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAny<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): T;
				invokeAny<T>(arg1: java.util.ICollection<any>): T;
				isShutdown(): boolean;
				isTerminated(): boolean;
				shutdownNow(): java.util.IList<java.lang.IRunnable>;
				shutdown(): void;
				submit<T>(arg1: java.lang.IRunnable, arg2: T): java.util.concurrent.IFuture<T>;
				submit<T>(arg1: java.util.concurrent.ICallable<T>): java.util.concurrent.IFuture<T>;
				submit(arg1: java.lang.IRunnable): java.util.concurrent.IFuture<any>;
				execute(arg1: java.lang.IRunnable): void;
			}
			export class ExecutorService implements java.util.concurrent.IExecutor, java.util.concurrent.IExecutorService {
				constructor(implementation: java.util.concurrent.IExecutorService);
				awaitTermination(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				invokeAll<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAll<T>(arg1: java.util.ICollection<any>): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAny<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): T;
				invokeAny<T>(arg1: java.util.ICollection<any>): T;
				isShutdown(): boolean;
				isTerminated(): boolean;
				shutdownNow(): java.util.IList<java.lang.IRunnable>;
				shutdown(): void;
				submit<T>(arg1: java.lang.IRunnable, arg2: T): java.util.concurrent.IFuture<T>;
				submit<T>(arg1: java.util.concurrent.ICallable<T>): java.util.concurrent.IFuture<T>;
				submit(arg1: java.lang.IRunnable): java.util.concurrent.IFuture<any>;
				execute(arg1: java.lang.IRunnable): void;
			}
			export interface IFuture<V> {
				isCancelled(): boolean;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				get(): V;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
			}
			export interface IScheduledFuture<V> extends java.util.concurrent.IDelayed, java.util.concurrent.IFuture<V> {
				getDelay(arg1: java.util.concurrent.TimeUnit): any;
				compareTo(arg1: java.util.concurrent.IDelayed): number;
				isCancelled(): boolean;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				get(): V;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
			}
			export interface IExecutor {
				execute(arg1: java.lang.IRunnable): void;
			}
			export class ThreadFactory implements java.util.concurrent.IThreadFactory {
				constructor(implementation: java.util.concurrent.IThreadFactory);
				newThread(arg1: java.lang.IRunnable): java.lang.Thread;
			}
			export module locks {
				export class Condition implements java.util.concurrent.locks.ICondition {
					constructor(implementation: java.util.concurrent.locks.ICondition);
					await(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
					await(): void;
					signal(): void;
					signalAll(): void;
					awaitNanos(arg1: native.Long): any;
					awaitUninterruptibly(): void;
					awaitUntil(arg1: java.util.Date): boolean;
				}
				export class AbstractQueuedSynchronizer extends java.util.concurrent.locks.AbstractOwnableSynchronizer implements java.io.ISerializable {
					static class: java.lang.Class<java.util.concurrent.locks.AbstractQueuedSynchronizer>;
					ConditionObject: { new (): java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject };
					toString(): string;
					acquireInterruptibly(arg1: number): void;
					getQueueLength(): number;
					getQueuedThreads(): java.util.ICollection<java.lang.Thread>;
					getWaitQueueLength(arg1: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): number;
					getWaitingThreads(arg1: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): java.util.ICollection<java.lang.Thread>;
					hasQueuedThreads(): boolean;
					hasWaiters(arg1: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): boolean;
					isQueued(arg1: java.lang.Thread): boolean;
					release(arg1: number): boolean;
					tryAcquireNanos(arg1: number, arg2: native.Long): boolean;
					acquire(arg1: number): void;
					acquireShared(arg1: number): void;
					acquireSharedInterruptibly(arg1: number): void;
					getExclusiveQueuedThreads(): java.util.ICollection<java.lang.Thread>;
					getFirstQueuedThread(): java.lang.Thread;
					getSharedQueuedThreads(): java.util.ICollection<java.lang.Thread>;
					hasContended(): boolean;
					hasQueuedPredecessors(): boolean;
					owns(arg1: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): boolean;
					releaseShared(arg1: number): boolean;
					tryAcquireSharedNanos(arg1: number, arg2: native.Long): boolean;
				}
				export module AbstractQueuedSynchronizer {
					export class ConditionObject extends java.lang.Object implements java.util.concurrent.locks.ICondition, java.io.ISerializable {
						static class: java.lang.Class<java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject>;
						await(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
						await(): void;
						signal(): void;
						signalAll(): void;
						awaitNanos(arg1: native.Long): any;
						awaitUninterruptibly(): void;
						awaitUntil(arg1: java.util.Date): boolean;
					}
				}
				export class LockSupport extends java.lang.Object {
					static class: java.lang.Class<java.util.concurrent.locks.LockSupport>;
					static getBlocker(arg1: java.lang.Thread): any;
					static park(): void;
					static park(arg1: any): void;
					static unpark(arg1: java.lang.Thread): void;
					static parkNanos(arg1: native.Long): void;
					static parkNanos(arg1: any, arg2: native.Long): void;
					static parkUntil(arg1: native.Long): void;
					static parkUntil(arg1: any, arg2: native.Long): void;
				}
				export interface ICondition {
					await(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
					await(): void;
					signal(): void;
					signalAll(): void;
					awaitNanos(arg1: native.Long): any;
					awaitUninterruptibly(): void;
					awaitUntil(arg1: java.util.Date): boolean;
				}
				export class ReentrantReadWriteLock extends java.lang.Object implements java.util.concurrent.locks.IReadWriteLock, java.io.ISerializable {
					constructor();
					constructor(arg1: boolean);
					static class: java.lang.Class<java.util.concurrent.locks.ReentrantReadWriteLock>;
					getReadHoldCount(): number;
					getReadLockCount(): number;
					getWriteHoldCount(): number;
					isWriteLocked(): boolean;
					isWriteLockedByCurrentThread(): boolean;
					toString(): string;
					readLock(): java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
					writeLock(): java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
					getQueueLength(): number;
					getWaitQueueLength(arg1: java.util.concurrent.locks.ICondition): number;
					hasQueuedThread(arg1: java.lang.Thread): boolean;
					hasQueuedThreads(): boolean;
					hasWaiters(arg1: java.util.concurrent.locks.ICondition): boolean;
					isFair(): boolean;
				}
				export module ReentrantReadWriteLock {
					export class ReadLock extends java.lang.Object implements java.util.concurrent.locks.ILock, java.io.ISerializable {
						static class: java.lang.Class<java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock>;
						toString(): string;
						lock(): void;
						unlock(): void;
						tryLock(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
						tryLock(): boolean;
						lockInterruptibly(): void;
						newCondition(): java.util.concurrent.locks.ICondition;
					}
					export class WriteLock extends java.lang.Object implements java.util.concurrent.locks.ILock, java.io.ISerializable {
						static class: java.lang.Class<java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock>;
						toString(): string;
						lock(): void;
						unlock(): void;
						tryLock(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
						tryLock(): boolean;
						getHoldCount(): number;
						isHeldByCurrentThread(): boolean;
						lockInterruptibly(): void;
						newCondition(): java.util.concurrent.locks.ICondition;
					}
				}
				export class ReadWriteLock implements java.util.concurrent.locks.IReadWriteLock {
					constructor(implementation: java.util.concurrent.locks.IReadWriteLock);
					readLock(): java.util.concurrent.locks.ILock;
					writeLock(): java.util.concurrent.locks.ILock;
				}
				export class ReentrantLock extends java.lang.Object implements java.util.concurrent.locks.ILock, java.io.ISerializable {
					constructor(arg1: boolean);
					constructor();
					static class: java.lang.Class<java.util.concurrent.locks.ReentrantLock>;
					toString(): string;
					lock(): void;
					unlock(): void;
					tryLock(): boolean;
					tryLock(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
					getHoldCount(): number;
					getQueueLength(): number;
					getWaitQueueLength(arg1: java.util.concurrent.locks.ICondition): number;
					hasQueuedThread(arg1: java.lang.Thread): boolean;
					hasQueuedThreads(): boolean;
					hasWaiters(arg1: java.util.concurrent.locks.ICondition): boolean;
					isFair(): boolean;
					isHeldByCurrentThread(): boolean;
					isLocked(): boolean;
					lockInterruptibly(): void;
					newCondition(): java.util.concurrent.locks.ICondition;
				}
				export class AbstractOwnableSynchronizer extends java.lang.Object implements java.io.ISerializable {
					static class: java.lang.Class<java.util.concurrent.locks.AbstractOwnableSynchronizer>;
				}
				export class AbstractQueuedLongSynchronizer extends java.util.concurrent.locks.AbstractOwnableSynchronizer implements java.io.ISerializable {
					static class: java.lang.Class<java.util.concurrent.locks.AbstractQueuedLongSynchronizer>;
					ConditionObject: { new (): java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject };
					toString(): string;
					acquireInterruptibly(arg1: native.Long): void;
					getQueueLength(): number;
					getQueuedThreads(): java.util.ICollection<java.lang.Thread>;
					getWaitQueueLength(arg1: java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject): number;
					getWaitingThreads(arg1: java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject): java.util.ICollection<java.lang.Thread>;
					hasQueuedThreads(): boolean;
					hasWaiters(arg1: java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject): boolean;
					isQueued(arg1: java.lang.Thread): boolean;
					release(arg1: native.Long): boolean;
					tryAcquireNanos(arg1: native.Long, arg2: native.Long): boolean;
					acquire(arg1: native.Long): void;
					acquireShared(arg1: native.Long): void;
					acquireSharedInterruptibly(arg1: native.Long): void;
					getExclusiveQueuedThreads(): java.util.ICollection<java.lang.Thread>;
					getFirstQueuedThread(): java.lang.Thread;
					getSharedQueuedThreads(): java.util.ICollection<java.lang.Thread>;
					hasContended(): boolean;
					hasQueuedPredecessors(): boolean;
					owns(arg1: java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject): boolean;
					releaseShared(arg1: native.Long): boolean;
					tryAcquireSharedNanos(arg1: native.Long, arg2: native.Long): boolean;
				}
				export module AbstractQueuedLongSynchronizer {
					export class ConditionObject extends java.lang.Object implements java.util.concurrent.locks.ICondition, java.io.ISerializable {
						static class: java.lang.Class<java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject>;
						await(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
						await(): void;
						signal(): void;
						signalAll(): void;
						awaitNanos(arg1: native.Long): any;
						awaitUninterruptibly(): void;
						awaitUntil(arg1: java.util.Date): boolean;
					}
				}
				export interface ILock {
					lock(): void;
					unlock(): void;
					tryLock(): boolean;
					tryLock(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
					lockInterruptibly(): void;
					newCondition(): java.util.concurrent.locks.ICondition;
				}
				export interface IReadWriteLock {
					readLock(): java.util.concurrent.locks.ILock;
					writeLock(): java.util.concurrent.locks.ILock;
				}
				export class Lock implements java.util.concurrent.locks.ILock {
					constructor(implementation: java.util.concurrent.locks.ILock);
					lock(): void;
					unlock(): void;
					tryLock(): boolean;
					tryLock(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
					lockInterruptibly(): void;
					newCondition(): java.util.concurrent.locks.ICondition;
				}
			}
			export class Executors extends java.lang.Object {
				static class: java.lang.Class<java.util.concurrent.Executors>;
				static defaultThreadFactory(): java.util.concurrent.IThreadFactory;
				static callable<T>(arg1: java.lang.IRunnable, arg2: T): java.util.concurrent.ICallable<T>;
				static callable(arg1: java.lang.IRunnable): java.util.concurrent.ICallable<any>;
				static callable(arg1: java.security.IPrivilegedAction<any>): java.util.concurrent.ICallable<any>;
				static callable(arg1: java.security.IPrivilegedExceptionAction<any>): java.util.concurrent.ICallable<any>;
				static newCachedThreadPool(arg1: java.util.concurrent.IThreadFactory): java.util.concurrent.IExecutorService;
				static newCachedThreadPool(): java.util.concurrent.IExecutorService;
				static newFixedThreadPool(arg1: number): java.util.concurrent.IExecutorService;
				static newFixedThreadPool(arg1: number, arg2: java.util.concurrent.IThreadFactory): java.util.concurrent.IExecutorService;
				static newScheduledThreadPool(arg1: number, arg2: java.util.concurrent.IThreadFactory): java.util.concurrent.IScheduledExecutorService;
				static newScheduledThreadPool(arg1: number): java.util.concurrent.IScheduledExecutorService;
				static newSingleThreadExecutor(): java.util.concurrent.IExecutorService;
				static newSingleThreadExecutor(arg1: java.util.concurrent.IThreadFactory): java.util.concurrent.IExecutorService;
				static newSingleThreadScheduledExecutor(arg1: java.util.concurrent.IThreadFactory): java.util.concurrent.IScheduledExecutorService;
				static newSingleThreadScheduledExecutor(): java.util.concurrent.IScheduledExecutorService;
				static privilegedCallable<T>(arg1: java.util.concurrent.ICallable<T>): java.util.concurrent.ICallable<T>;
				static privilegedCallableUsingCurrentClassLoader<T>(arg1: java.util.concurrent.ICallable<T>): java.util.concurrent.ICallable<T>;
				static privilegedThreadFactory(): java.util.concurrent.IThreadFactory;
				static unconfigurableExecutorService(arg1: java.util.concurrent.IExecutorService): java.util.concurrent.IExecutorService;
				static unconfigurableScheduledExecutorService(arg1: java.util.concurrent.IScheduledExecutorService): java.util.concurrent.IScheduledExecutorService;
			}
			export class ExecutionException extends java.lang.Exception {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				static class: java.lang.Class<java.util.concurrent.ExecutionException>;
			}
			export interface IRejectedExecutionHandler {
				rejectedExecution(arg1: java.lang.IRunnable, arg2: java.util.concurrent.ThreadPoolExecutor): void;
			}
			export class Executor implements java.util.concurrent.IExecutor {
				constructor(implementation: java.util.concurrent.IExecutor);
				execute(arg1: java.lang.IRunnable): void;
			}
			export class DelayQueue<E extends java.util.concurrent.IDelayed> extends java.util.AbstractQueue<E> implements java.util.concurrent.IBlockingQueue<E> {
				constructor();
				constructor(arg1: java.util.ICollection<any>);
				static class: java.lang.Class<java.util.concurrent.DelayQueue<any>>;
				drainTo(arg1: java.util.ICollection<any>): number;
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				remainingCapacity(): number;
				add(arg1: any): boolean;
				add(arg1: E): boolean;
				size(): number;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				iterator(): java.util.IIterator<E>;
				put(arg1: E): void;
				put(arg1: any): void;
				remove(arg1: any): boolean;
				clear(): void;
				poll(): E;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				peek(): E;
				offer(arg1: E): boolean;
				offer(arg1: any, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offer(arg1: any): boolean;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				take(): E;
				contains(arg1: any): boolean;
				remove(): E;
				element(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				addAll(arg1: java.util.ICollection<any>): boolean;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export enum TimeUnit {
				NANOSECONDS,
				MICROSECONDS,
				MILLISECONDS,
				SECONDS,
				MINUTES,
				HOURS,
				DAYS
			}
			export module TimeUnit {
				export function valueOf(arg1: java.lang.String): java.util.concurrent.TimeUnit;
				export function valueOf(arg1: string): java.util.concurrent.TimeUnit;
				export function values(): native.Array<java.util.concurrent.TimeUnit>;
			}
			export class PriorityBlockingQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.IBlockingQueue<E>, java.io.ISerializable {
				constructor(arg1: number);
				constructor(arg1: number, arg2: java.util.IComparator<any>);
				constructor(arg1: java.util.ICollection<any>);
				constructor();
				static class: java.lang.Class<java.util.concurrent.PriorityBlockingQueue<any>>;
				drainTo(arg1: java.util.ICollection<any>): number;
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				remainingCapacity(): number;
				toString(): string;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				size(): number;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				iterator(): java.util.IIterator<E>;
				put(arg1: E): void;
				remove(arg1: any): boolean;
				clear(): void;
				poll(): E;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				peek(): E;
				offer(arg1: E): boolean;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				comparator(): java.util.IComparator<any>;
				take(): E;
				remove(): E;
				element(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				addAll(arg1: java.util.ICollection<any>): boolean;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export class AbstractExecutorService extends java.lang.Object implements java.util.concurrent.IExecutorService {
				constructor();
				static class: java.lang.Class<java.util.concurrent.AbstractExecutorService>;
				invokeAll<T>(arg1: java.util.ICollection<any>): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAll<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAny<T>(arg1: java.util.ICollection<any>): T;
				invokeAny<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): T;
				submit<T>(arg1: java.util.concurrent.ICallable<T>): java.util.concurrent.IFuture<T>;
				submit(arg1: java.lang.IRunnable): java.util.concurrent.IFuture<any>;
				submit<T>(arg1: java.lang.IRunnable, arg2: T): java.util.concurrent.IFuture<T>;
				awaitTermination(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				isShutdown(): boolean;
				isTerminated(): boolean;
				shutdownNow(): java.util.IList<java.lang.IRunnable>;
				shutdown(): void;
				execute(arg1: java.lang.IRunnable): void;
			}
			export class ExecutorCompletionService<V> extends java.lang.Object implements java.util.concurrent.ICompletionService<V> {
				constructor(arg1: java.util.concurrent.IExecutor, arg2: java.util.concurrent.IBlockingQueue<java.util.concurrent.IFuture<V>>);
				constructor(arg1: java.util.concurrent.IExecutor);
				static class: java.lang.Class<java.util.concurrent.ExecutorCompletionService<any>>;
				poll(): java.util.concurrent.IFuture<V>;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): java.util.concurrent.IFuture<V>;
				submit(arg1: java.lang.IRunnable, arg2: V): java.util.concurrent.IFuture<V>;
				submit(arg1: java.util.concurrent.ICallable<V>): java.util.concurrent.IFuture<V>;
				take(): java.util.concurrent.IFuture<V>;
			}
			export class LinkedBlockingDeque<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.IBlockingDeque<E>, java.io.ISerializable {
				constructor();
				constructor(arg1: number);
				constructor(arg1: java.util.ICollection<any>);
				static class: java.lang.Class<java.util.concurrent.LinkedBlockingDeque<any>>;
				putFirst(arg1: E): void;
				putLast(arg1: E): void;
				takeFirst(): E;
				takeLast(): E;
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				drainTo(arg1: java.util.ICollection<any>): number;
				remainingCapacity(): number;
				toString(): string;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				size(): number;
				toArray(): native.Array<any>;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				iterator(): java.util.IIterator<E>;
				put(arg1: E): void;
				pop(): E;
				push(arg1: E): void;
				remove(arg1: any): boolean;
				remove(): E;
				clear(): void;
				poll(): E;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				peek(): E;
				getFirst(): E;
				getLast(): E;
				removeFirst(): E;
				removeLast(): E;
				addFirst(arg1: E): void;
				addLast(arg1: E): void;
				descendingIterator(): java.util.IIterator<E>;
				element(): E;
				offer(arg1: E): boolean;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offerFirst(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offerFirst(arg1: E): boolean;
				offerLast(arg1: E): boolean;
				offerLast(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				peekFirst(): E;
				peekLast(): E;
				pollFirst(): E;
				pollFirst(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				pollLast(): E;
				pollLast(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				removeFirstOccurrence(arg1: any): boolean;
				removeLastOccurrence(arg1: any): boolean;
				take(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				addAll(arg1: java.util.ICollection<any>): boolean;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export module atomic {
				export class AtomicReferenceArray<E> extends java.lang.Object implements java.io.ISerializable {
					constructor(arg1: number);
					constructor(arg1: native.Array<E>);
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicReferenceArray<any>>;
					toString(): string;
					get(arg1: number): E;
					length(): number;
					set(arg1: number, arg2: E): void;
					lazySet(arg1: number, arg2: E): void;
					compareAndSet(arg1: number, arg2: E, arg3: E): boolean;
					getAndSet(arg1: number, arg2: E): E;
					weakCompareAndSet(arg1: number, arg2: E, arg3: E): boolean;
				}
				export class AtomicReferenceFieldUpdater<T, V> extends java.lang.Object {
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicReferenceFieldUpdater<any, any>>;
					get(arg1: T): V;
					set(arg1: T, arg2: V): void;
					static newUpdater<U, W>(arg1: java.lang.Class<U>, arg2: java.lang.Class<W>, arg3: java.lang.String): java.util.concurrent.atomic.AtomicReferenceFieldUpdater<U, W>;
					static newUpdater<U, W>(arg1: java.lang.Class<U>, arg2: java.lang.Class<W>, arg3: string): java.util.concurrent.atomic.AtomicReferenceFieldUpdater<U, W>;
					lazySet(arg1: T, arg2: V): void;
					compareAndSet(arg1: T, arg2: V, arg3: V): boolean;
					getAndSet(arg1: T, arg2: V): V;
					weakCompareAndSet(arg1: T, arg2: V, arg3: V): boolean;
				}
				export class AtomicStampedReference<V> extends java.lang.Object {
					constructor(arg1: V, arg2: number);
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicStampedReference<any>>;
					attemptStamp(arg1: V, arg2: number): boolean;
					getReference(): V;
					getStamp(): number;
					get(arg1: native.Array<number>): V;
					set(arg1: V, arg2: number): void;
					compareAndSet(arg1: V, arg2: V, arg3: number, arg4: number): boolean;
					weakCompareAndSet(arg1: V, arg2: V, arg3: number, arg4: number): boolean;
				}
				export class AtomicBoolean extends java.lang.Object implements java.io.ISerializable {
					constructor();
					constructor(arg1: boolean);
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicBoolean>;
					toString(): string;
					get(): boolean;
					set(arg1: boolean): void;
					lazySet(arg1: boolean): void;
					compareAndSet(arg1: boolean, arg2: boolean): boolean;
					getAndSet(arg1: boolean): boolean;
					weakCompareAndSet(arg1: boolean, arg2: boolean): boolean;
				}
				export class AtomicLong extends java.lang.Number implements java.io.ISerializable {
					constructor();
					constructor(arg1: native.Long);
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicLong>;
					toString(): string;
					get(): any;
					set(arg1: native.Long): void;
					longValue(): any;
					intValue(): number;
					lazySet(arg1: native.Long): void;
					doubleValue(): any;
					floatValue(): number;
					decrementAndGet(): any;
					incrementAndGet(): any;
					compareAndSet(arg1: native.Long, arg2: native.Long): boolean;
					getAndSet(arg1: native.Long): any;
					weakCompareAndSet(arg1: native.Long, arg2: native.Long): boolean;
					getAndAdd(arg1: native.Long): any;
					addAndGet(arg1: native.Long): any;
					getAndDecrement(): any;
					getAndIncrement(): any;
				}
				export class AtomicIntegerFieldUpdater<T> extends java.lang.Object {
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicIntegerFieldUpdater<any>>;
					get(arg1: T): number;
					set(arg1: T, arg2: number): void;
					static newUpdater<U>(arg1: java.lang.Class<U>, arg2: java.lang.String): java.util.concurrent.atomic.AtomicIntegerFieldUpdater<U>;
					static newUpdater<U>(arg1: java.lang.Class<U>, arg2: string): java.util.concurrent.atomic.AtomicIntegerFieldUpdater<U>;
					lazySet(arg1: T, arg2: number): void;
					decrementAndGet(arg1: T): number;
					incrementAndGet(arg1: T): number;
					compareAndSet(arg1: T, arg2: number, arg3: number): boolean;
					getAndSet(arg1: T, arg2: number): number;
					weakCompareAndSet(arg1: T, arg2: number, arg3: number): boolean;
					getAndAdd(arg1: T, arg2: number): number;
					addAndGet(arg1: T, arg2: number): number;
					getAndDecrement(arg1: T): number;
					getAndIncrement(arg1: T): number;
				}
				export class AtomicMarkableReference<V> extends java.lang.Object {
					constructor(arg1: V, arg2: boolean);
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicMarkableReference<any>>;
					getReference(): V;
					attemptMark(arg1: V, arg2: boolean): boolean;
					isMarked(): boolean;
					get(arg1: native.Array<boolean>): V;
					set(arg1: V, arg2: boolean): void;
					compareAndSet(arg1: V, arg2: V, arg3: boolean, arg4: boolean): boolean;
					weakCompareAndSet(arg1: V, arg2: V, arg3: boolean, arg4: boolean): boolean;
				}
				export class AtomicLongFieldUpdater<T> extends java.lang.Object {
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicLongFieldUpdater<any>>;
					get(arg1: T): any;
					set(arg1: T, arg2: native.Long): void;
					static newUpdater<U>(arg1: java.lang.Class<U>, arg2: java.lang.String): java.util.concurrent.atomic.AtomicLongFieldUpdater<U>;
					static newUpdater<U>(arg1: java.lang.Class<U>, arg2: string): java.util.concurrent.atomic.AtomicLongFieldUpdater<U>;
					lazySet(arg1: T, arg2: native.Long): void;
					decrementAndGet(arg1: T): any;
					incrementAndGet(arg1: T): any;
					compareAndSet(arg1: T, arg2: native.Long, arg3: native.Long): boolean;
					getAndSet(arg1: T, arg2: native.Long): any;
					weakCompareAndSet(arg1: T, arg2: native.Long, arg3: native.Long): boolean;
					getAndAdd(arg1: T, arg2: native.Long): any;
					addAndGet(arg1: T, arg2: native.Long): any;
					getAndDecrement(arg1: T): any;
					getAndIncrement(arg1: T): any;
				}
				export class AtomicInteger extends java.lang.Number implements java.io.ISerializable {
					constructor();
					constructor(arg1: number);
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicInteger>;
					toString(): string;
					get(): number;
					set(arg1: number): void;
					longValue(): any;
					intValue(): number;
					lazySet(arg1: number): void;
					doubleValue(): any;
					floatValue(): number;
					decrementAndGet(): number;
					incrementAndGet(): number;
					compareAndSet(arg1: number, arg2: number): boolean;
					getAndSet(arg1: number): number;
					weakCompareAndSet(arg1: number, arg2: number): boolean;
					getAndAdd(arg1: number): number;
					addAndGet(arg1: number): number;
					getAndDecrement(): number;
					getAndIncrement(): number;
				}
				export class AtomicReference<V> extends java.lang.Object implements java.io.ISerializable {
					constructor(arg1: V);
					constructor();
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicReference<any>>;
					toString(): string;
					get(): V;
					set(arg1: V): void;
					lazySet(arg1: V): void;
					compareAndSet(arg1: V, arg2: V): boolean;
					getAndSet(arg1: V): V;
					weakCompareAndSet(arg1: V, arg2: V): boolean;
				}
				export class AtomicLongArray extends java.lang.Object implements java.io.ISerializable {
					constructor(arg1: number);
					constructor(arg1: native.Array<native.Long>);
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicLongArray>;
					toString(): string;
					get(arg1: number): any;
					length(): number;
					set(arg1: number, arg2: native.Long): void;
					lazySet(arg1: number, arg2: native.Long): void;
					decrementAndGet(arg1: number): any;
					incrementAndGet(arg1: number): any;
					compareAndSet(arg1: number, arg2: native.Long, arg3: native.Long): boolean;
					getAndSet(arg1: number, arg2: native.Long): any;
					weakCompareAndSet(arg1: number, arg2: native.Long, arg3: native.Long): boolean;
					getAndAdd(arg1: number, arg2: native.Long): any;
					addAndGet(arg1: number, arg2: native.Long): any;
					getAndDecrement(arg1: number): any;
					getAndIncrement(arg1: number): any;
				}
				export class AtomicIntegerArray extends java.lang.Object implements java.io.ISerializable {
					constructor(arg1: number);
					constructor(arg1: native.Array<number>);
					static class: java.lang.Class<java.util.concurrent.atomic.AtomicIntegerArray>;
					toString(): string;
					get(arg1: number): number;
					length(): number;
					set(arg1: number, arg2: number): void;
					lazySet(arg1: number, arg2: number): void;
					decrementAndGet(arg1: number): number;
					incrementAndGet(arg1: number): number;
					compareAndSet(arg1: number, arg2: number, arg3: number): boolean;
					getAndSet(arg1: number, arg2: number): number;
					weakCompareAndSet(arg1: number, arg2: number, arg3: number): boolean;
					getAndAdd(arg1: number, arg2: number): number;
					addAndGet(arg1: number, arg2: number): number;
					getAndDecrement(arg1: number): number;
					getAndIncrement(arg1: number): number;
				}
			}
			export class ScheduledFuture<V> implements java.util.concurrent.IDelayed, java.util.concurrent.IFuture<V>, java.util.concurrent.IScheduledFuture<V> {
				constructor(implementation: java.util.concurrent.IScheduledFuture<V>);
				getDelay(arg1: java.util.concurrent.TimeUnit): any;
				compareTo(arg1: java.util.concurrent.IDelayed): number;
				isCancelled(): boolean;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				get(): V;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
			}
			export class ConcurrentNavigableMap<K, V> implements java.util.concurrent.IConcurrentMap<K, V>, java.util.INavigableMap<K, V>, java.util.concurrent.IConcurrentNavigableMap<K, V> {
				constructor(implementation: java.util.concurrent.IConcurrentNavigableMap<K, V>);
				keySet(): java.util.INavigableSet<K>;
				descendingKeySet(): java.util.INavigableSet<K>;
				descendingMap(): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				headMap(arg1: K, arg2: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				headMap(arg1: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				navigableKeySet(): java.util.INavigableSet<K>;
				subMap(arg1: K, arg2: boolean, arg3: K, arg4: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				subMap(arg1: K, arg2: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				tailMap(arg1: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				tailMap(arg1: K, arg2: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				replace(arg1: K, arg2: V, arg3: V): boolean;
				replace(arg1: K, arg2: V): V;
				putIfAbsent(arg1: K, arg2: V): V;
				remove(arg1: any, arg2: any): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				get(arg1: any): V;
				isEmpty(): boolean;
				size(): number;
				entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
				put(arg1: K, arg2: V): V;
				putAll(arg1: java.util.IMap<any, any>): void;
				values(): java.util.ICollection<V>;
				remove(arg1: any): V;
				clear(): void;
				containsKey(arg1: any): boolean;
				containsValue(arg1: any): boolean;
				ceilingKey(arg1: K): K;
				floorKey(arg1: K): K;
				higherKey(arg1: K): K;
				lowerKey(arg1: K): K;
				pollFirstEntry(): java.util.Map.IEntry<K, V>;
				pollLastEntry(): java.util.Map.IEntry<K, V>;
				ceilingEntry(arg1: K): java.util.Map.IEntry<K, V>;
				firstEntry(): java.util.Map.IEntry<K, V>;
				floorEntry(arg1: K): java.util.Map.IEntry<K, V>;
				higherEntry(arg1: K): java.util.Map.IEntry<K, V>;
				lastEntry(): java.util.Map.IEntry<K, V>;
				lowerEntry(arg1: K): java.util.Map.IEntry<K, V>;
				comparator(): java.util.IComparator<any>;
				firstKey(): K;
				lastKey(): K;
			}
			export class Delayed implements java.lang.IComparable<java.util.concurrent.IDelayed>, java.util.concurrent.IDelayed {
				constructor(implementation: java.util.concurrent.IDelayed);
				getDelay(arg1: java.util.concurrent.TimeUnit): any;
				compareTo(arg1: java.util.concurrent.IDelayed): number;
			}
			export interface ICompletionService<V> {
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): java.util.concurrent.IFuture<V>;
				poll(): java.util.concurrent.IFuture<V>;
				submit(arg1: java.util.concurrent.ICallable<V>): java.util.concurrent.IFuture<V>;
				submit(arg1: java.lang.IRunnable, arg2: V): java.util.concurrent.IFuture<V>;
				take(): java.util.concurrent.IFuture<V>;
			}
			export class ConcurrentMap<K, V> implements java.util.IMap<K, V>, java.util.concurrent.IConcurrentMap<K, V> {
				constructor(implementation: java.util.concurrent.IConcurrentMap<K, V>);
				replace(arg1: K, arg2: V, arg3: V): boolean;
				replace(arg1: K, arg2: V): V;
				putIfAbsent(arg1: K, arg2: V): V;
				remove(arg1: any, arg2: any): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				get(arg1: any): V;
				isEmpty(): boolean;
				size(): number;
				entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
				put(arg1: K, arg2: V): V;
				putAll(arg1: java.util.IMap<any, any>): void;
				values(): java.util.ICollection<V>;
				remove(arg1: any): V;
				clear(): void;
				keySet(): java.util.ISet<K>;
				containsKey(arg1: any): boolean;
				containsValue(arg1: any): boolean;
			}
			export class ConcurrentSkipListSet<E> extends java.util.AbstractSet<E> implements java.util.INavigableSet<E>, java.lang.ICloneable, java.io.ISerializable {
				constructor(arg1: java.util.ISortedSet<E>);
				constructor();
				constructor(arg1: java.util.ICollection<any>);
				constructor(arg1: java.util.IComparator<any>);
				static class: java.lang.Class<java.util.concurrent.ConcurrentSkipListSet<any>>;
				equals(arg1: any): boolean;
				clone(): java.util.concurrent.ConcurrentSkipListSet<E>;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				isEmpty(): boolean;
				size(): number;
				iterator(): java.util.IIterator<E>;
				remove(arg1: any): boolean;
				clear(): void;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				floor(arg1: E): E;
				descendingIterator(): java.util.IIterator<E>;
				first(): E;
				last(): E;
				pollFirst(): E;
				pollLast(): E;
				ceiling(arg1: E): E;
				comparator(): java.util.IComparator<any>;
				descendingSet(): java.util.INavigableSet<E>;
				headSet(arg1: E): java.util.INavigableSet<E>;
				headSet(arg1: E, arg2: boolean): java.util.INavigableSet<E>;
				headSet(arg1: any): java.util.ISortedSet<any>;
				higher(arg1: E): E;
				lower(arg1: E): E;
				subSet(arg1: E, arg2: boolean, arg3: E, arg4: boolean): java.util.INavigableSet<E>;
				subSet(arg1: any, arg2: any): java.util.ISortedSet<any>;
				subSet(arg1: E, arg2: E): java.util.INavigableSet<E>;
				tailSet(arg1: E): java.util.INavigableSet<E>;
				tailSet(arg1: any): java.util.ISortedSet<any>;
				tailSet(arg1: E, arg2: boolean): java.util.INavigableSet<E>;
				hashCode(): number;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				addAll(arg1: java.util.ICollection<any>): boolean;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export class Future<V> implements java.util.concurrent.IFuture<V> {
				constructor(implementation: java.util.concurrent.IFuture<V>);
				isCancelled(): boolean;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				get(): V;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
			}
			export class BlockingQueue<E> implements java.util.IQueue<E>, java.util.concurrent.IBlockingQueue<E> {
				constructor(implementation: java.util.concurrent.IBlockingQueue<E>);
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				drainTo(arg1: java.util.ICollection<any>): number;
				remainingCapacity(): number;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				put(arg1: E): void;
				remove(arg1: any): boolean;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offer(arg1: E): boolean;
				take(): E;
				remove(): E;
				poll(): E;
				peek(): E;
				element(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				size(): number;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				addAll(arg1: java.util.ICollection<any>): boolean;
				iterator(): java.util.IIterator<E>;
				clear(): void;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export interface ICallable<V> {
				call(): V;
			}
			export class BlockingDeque<E> implements java.util.concurrent.IBlockingQueue<E>, java.util.IDeque<E>, java.util.concurrent.IBlockingDeque<E> {
				constructor(implementation: java.util.concurrent.IBlockingDeque<E>);
				putFirst(arg1: E): void;
				putLast(arg1: E): void;
				takeFirst(): E;
				takeLast(): E;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				size(): number;
				iterator(): java.util.IIterator<E>;
				put(arg1: E): void;
				push(arg1: E): void;
				remove(): E;
				remove(arg1: any): boolean;
				poll(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				poll(): E;
				peek(): E;
				addFirst(arg1: E): void;
				addLast(arg1: E): void;
				element(): E;
				offer(arg1: E): boolean;
				offer(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offerFirst(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				offerFirst(arg1: E): boolean;
				offerLast(arg1: E): boolean;
				offerLast(arg1: E, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): boolean;
				pollFirst(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				pollLast(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): E;
				removeFirstOccurrence(arg1: any): boolean;
				removeLastOccurrence(arg1: any): boolean;
				take(): E;
				drainTo(arg1: java.util.ICollection<any>, arg2: number): number;
				drainTo(arg1: java.util.ICollection<any>): number;
				remainingCapacity(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				isEmpty(): boolean;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				toArray(): native.Array<any>;
				addAll(arg1: java.util.ICollection<any>): boolean;
				clear(): void;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
				pop(): E;
				getFirst(): E;
				getLast(): E;
				removeFirst(): E;
				removeLast(): E;
				descendingIterator(): java.util.IIterator<E>;
				peekFirst(): E;
				peekLast(): E;
				pollFirst(): E;
				pollLast(): E;
			}
			export interface IDelayed extends java.lang.IComparable<java.util.concurrent.IDelayed> {
				getDelay(arg1: java.util.concurrent.TimeUnit): any;
				compareTo(arg1: java.util.concurrent.IDelayed): number;
			}
			export class Exchanger<V> extends java.lang.Object {
				constructor();
				static class: java.lang.Class<java.util.concurrent.Exchanger<any>>;
				exchange(arg1: V): V;
				exchange(arg1: V, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): V;
			}
			export interface IRunnableScheduledFuture<V> extends java.util.concurrent.IRunnableFuture<V>, java.util.concurrent.IScheduledFuture<V> {
				isPeriodic(): boolean;
				run(): void;
				isCancelled(): boolean;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				get(): V;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
				getDelay(arg1: java.util.concurrent.TimeUnit): any;
				compareTo(arg1: java.util.concurrent.IDelayed): number;
			}
			export class CountDownLatch extends java.lang.Object {
				constructor(arg1: number);
				static class: java.lang.Class<java.util.concurrent.CountDownLatch>;
				countDown(): void;
				toString(): string;
				await(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				await(): void;
				getCount(): any;
			}
			export class ConcurrentLinkedQueue<E> extends java.util.AbstractQueue<E> implements java.util.IQueue<E>, java.io.ISerializable {
				constructor();
				constructor(arg1: java.util.ICollection<any>);
				static class: java.lang.Class<java.util.concurrent.ConcurrentLinkedQueue<any>>;
				add(arg1: E): boolean;
				contains(arg1: any): boolean;
				isEmpty(): boolean;
				size(): number;
				toArray(): native.Array<any>;
				toArray<T>(arg1: native.Array<T>): native.Array<T>;
				addAll(arg1: java.util.ICollection<any>): boolean;
				iterator(): java.util.IIterator<E>;
				remove(arg1: any): boolean;
				poll(): E;
				peek(): E;
				offer(arg1: E): boolean;
				remove(): E;
				element(): E;
				hashCode(): number;
				equals(arg1: any): boolean;
				clear(): void;
				containsAll(arg1: java.util.ICollection<any>): boolean;
				removeAll(arg1: java.util.ICollection<any>): boolean;
				retainAll(arg1: java.util.ICollection<any>): boolean;
			}
			export class ThreadPoolExecutor extends java.util.concurrent.AbstractExecutorService {
				constructor(arg1: number, arg2: number, arg3: native.Long, arg4: java.util.concurrent.TimeUnit, arg5: java.util.concurrent.IBlockingQueue<java.lang.IRunnable>, arg6: java.util.concurrent.IThreadFactory);
				constructor(arg1: number, arg2: number, arg3: native.Long, arg4: java.util.concurrent.TimeUnit, arg5: java.util.concurrent.IBlockingQueue<java.lang.IRunnable>);
				constructor(arg1: number, arg2: number, arg3: native.Long, arg4: java.util.concurrent.TimeUnit, arg5: java.util.concurrent.IBlockingQueue<java.lang.IRunnable>, arg6: java.util.concurrent.IThreadFactory, arg7: java.util.concurrent.IRejectedExecutionHandler);
				constructor(arg1: number, arg2: number, arg3: native.Long, arg4: java.util.concurrent.TimeUnit, arg5: java.util.concurrent.IBlockingQueue<java.lang.IRunnable>, arg6: java.util.concurrent.IRejectedExecutionHandler);
				static class: java.lang.Class<java.util.concurrent.ThreadPoolExecutor>;
				RejectedExecutionHandler: java.util.concurrent.IRejectedExecutionHandler;
				ThreadFactory: java.util.concurrent.IThreadFactory;
				CorePoolSize: number;
				MaximumPoolSize: number;
				allowCoreThreadTimeOut(arg1: boolean): void;
				allowsCoreThreadTimeOut(): boolean;
				getActiveCount(): number;
				getCompletedTaskCount(): any;
				getCorePoolSize(): number;
				getKeepAliveTime(arg1: java.util.concurrent.TimeUnit): any;
				getLargestPoolSize(): number;
				getMaximumPoolSize(): number;
				getPoolSize(): number;
				getRejectedExecutionHandler(): java.util.concurrent.IRejectedExecutionHandler;
				getTaskCount(): any;
				getThreadFactory(): java.util.concurrent.IThreadFactory;
				isTerminating(): boolean;
				prestartAllCoreThreads(): number;
				prestartCoreThread(): boolean;
				purge(): void;
				setCorePoolSize(arg1: number): void;
				setKeepAliveTime(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
				setMaximumPoolSize(arg1: number): void;
				setRejectedExecutionHandler(arg1: java.util.concurrent.IRejectedExecutionHandler): void;
				setThreadFactory(arg1: java.util.concurrent.IThreadFactory): void;
				awaitTermination(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				isShutdown(): boolean;
				isTerminated(): boolean;
				shutdownNow(): java.util.IList<java.lang.IRunnable>;
				toString(): string;
				remove(arg1: java.lang.IRunnable): boolean;
				shutdown(): void;
				execute(arg1: java.lang.IRunnable): void;
				getQueue(): java.util.concurrent.IBlockingQueue<java.lang.IRunnable>;
			}
			export module ThreadPoolExecutor {
				export class AbortPolicy extends java.lang.Object implements java.util.concurrent.IRejectedExecutionHandler {
					constructor();
					static class: java.lang.Class<java.util.concurrent.ThreadPoolExecutor.AbortPolicy>;
					rejectedExecution(arg1: java.lang.IRunnable, arg2: java.util.concurrent.ThreadPoolExecutor): void;
				}
				export class DiscardPolicy extends java.lang.Object implements java.util.concurrent.IRejectedExecutionHandler {
					constructor();
					static class: java.lang.Class<java.util.concurrent.ThreadPoolExecutor.DiscardPolicy>;
					rejectedExecution(arg1: java.lang.IRunnable, arg2: java.util.concurrent.ThreadPoolExecutor): void;
				}
				export class CallerRunsPolicy extends java.lang.Object implements java.util.concurrent.IRejectedExecutionHandler {
					constructor();
					static class: java.lang.Class<java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy>;
					rejectedExecution(arg1: java.lang.IRunnable, arg2: java.util.concurrent.ThreadPoolExecutor): void;
				}
				export class DiscardOldestPolicy extends java.lang.Object implements java.util.concurrent.IRejectedExecutionHandler {
					constructor();
					static class: java.lang.Class<java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy>;
					rejectedExecution(arg1: java.lang.IRunnable, arg2: java.util.concurrent.ThreadPoolExecutor): void;
				}
			}
			export interface IExecutorService extends java.util.concurrent.IExecutor {
				awaitTermination(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): boolean;
				invokeAll<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAll<T>(arg1: java.util.ICollection<any>): java.util.IList<java.util.concurrent.IFuture<T>>;
				invokeAny<T>(arg1: java.util.ICollection<any>, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): T;
				invokeAny<T>(arg1: java.util.ICollection<any>): T;
				isShutdown(): boolean;
				isTerminated(): boolean;
				shutdownNow(): java.util.IList<java.lang.IRunnable>;
				shutdown(): void;
				submit<T>(arg1: java.lang.IRunnable, arg2: T): java.util.concurrent.IFuture<T>;
				submit<T>(arg1: java.util.concurrent.ICallable<T>): java.util.concurrent.IFuture<T>;
				submit(arg1: java.lang.IRunnable): java.util.concurrent.IFuture<any>;
				execute(arg1: java.lang.IRunnable): void;
			}
			export class FutureTask<V> extends java.lang.Object implements java.util.concurrent.IRunnableFuture<V> {
				constructor(arg1: java.util.concurrent.ICallable<V>);
				constructor(arg1: java.lang.IRunnable, arg2: V);
				static class: java.lang.Class<java.util.concurrent.FutureTask<any>>;
				isCancelled(): boolean;
				get(): V;
				get(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): V;
				run(): void;
				isDone(): boolean;
				cancel(arg1: boolean): boolean;
			}
			export interface IConcurrentNavigableMap<K, V> extends java.util.concurrent.IConcurrentMap<K, V>, java.util.INavigableMap<K, V> {
				keySet(): java.util.INavigableSet<K>;
				descendingKeySet(): java.util.INavigableSet<K>;
				descendingMap(): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				headMap(arg1: K, arg2: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				headMap(arg1: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				navigableKeySet(): java.util.INavigableSet<K>;
				subMap(arg1: K, arg2: boolean, arg3: K, arg4: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				subMap(arg1: K, arg2: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				tailMap(arg1: K): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				tailMap(arg1: K, arg2: boolean): java.util.concurrent.IConcurrentNavigableMap<K, V>;
				replace(arg1: K, arg2: V, arg3: V): boolean;
				replace(arg1: K, arg2: V): V;
				putIfAbsent(arg1: K, arg2: V): V;
				remove(arg1: any, arg2: any): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
				get(arg1: any): V;
				isEmpty(): boolean;
				size(): number;
				entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
				put(arg1: K, arg2: V): V;
				putAll(arg1: java.util.IMap<any, any>): void;
				values(): java.util.ICollection<V>;
				remove(arg1: any): V;
				clear(): void;
				containsKey(arg1: any): boolean;
				containsValue(arg1: any): boolean;
				ceilingKey(arg1: K): K;
				floorKey(arg1: K): K;
				higherKey(arg1: K): K;
				lowerKey(arg1: K): K;
				pollFirstEntry(): java.util.Map.IEntry<K, V>;
				pollLastEntry(): java.util.Map.IEntry<K, V>;
				ceilingEntry(arg1: K): java.util.Map.IEntry<K, V>;
				firstEntry(): java.util.Map.IEntry<K, V>;
				floorEntry(arg1: K): java.util.Map.IEntry<K, V>;
				higherEntry(arg1: K): java.util.Map.IEntry<K, V>;
				lastEntry(): java.util.Map.IEntry<K, V>;
				lowerEntry(arg1: K): java.util.Map.IEntry<K, V>;
				comparator(): java.util.IComparator<any>;
				firstKey(): K;
				lastKey(): K;
			}
			export class ConcurrentHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.IConcurrentMap<K, V>, java.io.ISerializable {
				constructor(arg1: number);
				constructor(arg1: java.util.IMap<any, any>);
				constructor(arg1: number, arg2: native.Float);
				constructor();
				constructor(arg1: number, arg2: native.Float, arg3: number);
				static class: java.lang.Class<java.util.concurrent.ConcurrentHashMap<any, any>>;
				contains(arg1: any): boolean;
				get(arg1: any): V;
				isEmpty(): boolean;
				replace(arg1: K, arg2: V): V;
				replace(arg1: K, arg2: V, arg3: V): boolean;
				size(): number;
				entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
				put(arg1: K, arg2: V): V;
				putAll(arg1: java.util.IMap<any, any>): void;
				values(): java.util.ICollection<V>;
				putIfAbsent(arg1: K, arg2: V): V;
				remove(arg1: any, arg2: any): boolean;
				remove(arg1: any): V;
				elements(): java.util.IEnumeration<V>;
				clear(): void;
				keySet(): java.util.ISet<K>;
				keys(): java.util.IEnumeration<K>;
				containsKey(arg1: any): boolean;
				containsValue(arg1: any): boolean;
				hashCode(): number;
				equals(arg1: any): boolean;
			}
		}
		export class SortedSet<E> implements java.util.ISet<E>, java.util.ISortedSet<E> {
			constructor(implementation: java.util.ISortedSet<E>);
			first(): E;
			last(): E;
			comparator(): java.util.IComparator<any>;
			headSet(arg1: E): java.util.ISortedSet<E>;
			subSet(arg1: E, arg2: E): java.util.ISortedSet<E>;
			tailSet(arg1: E): java.util.ISortedSet<E>;
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class EventListener implements java.util.IEventListener {
			constructor(implementation: java.util.IEventListener);
		}
		export class Currency extends java.lang.Object implements java.io.ISerializable {
			static class: java.lang.Class<java.util.Currency>;
			toString(): string;
			static getInstance(arg1: java.util.Locale): java.util.Currency;
			static getInstance(arg1: java.lang.String): java.util.Currency;
			static getInstance(arg1: string): java.util.Currency;
			getDisplayName(arg1: java.util.Locale): string;
			getDisplayName(): string;
			getCurrencyCode(): string;
			getSymbol(arg1: java.util.Locale): string;
			getSymbol(): string;
			static getAvailableCurrencies(): java.util.ISet<java.util.Currency>;
			getDefaultFractionDigits(): number;
			getNumericCode(): number;
		}
		export module regex {
			export class PatternSyntaxException extends java.lang.IllegalArgumentException {
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: number);
				constructor(arg1: string, arg2: string, arg3: number);
				static class: java.lang.Class<java.util.regex.PatternSyntaxException>;
				getMessage(): string;
				getIndex(): number;
				getDescription(): string;
				getPattern(): string;
			}
			export interface IMatchResult {
				start(): number;
				start(arg1: number): number;
				group(arg1: number): string;
				group(): string;
				end(arg1: number): number;
				end(): number;
				groupCount(): number;
			}
			export class Pattern extends java.lang.Object implements java.io.ISerializable {
				static UNIX_LINES: number;
				static CASE_INSENSITIVE: number;
				static COMMENTS: number;
				static MULTILINE: number;
				static LITERAL: number;
				static DOTALL: number;
				static UNICODE_CASE: number;
				static CANON_EQ: number;
				static UNICODE_CHARACTER_CLASS: number;
				static class: java.lang.Class<java.util.regex.Pattern>;
				toString(): string;
				static compile(arg1: java.lang.String, arg2: number): java.util.regex.Pattern;
				static compile(arg1: string, arg2: number): java.util.regex.Pattern;
				static compile(arg1: java.lang.String): java.util.regex.Pattern;
				static compile(arg1: string): java.util.regex.Pattern;
				matcher(arg1: java.lang.ICharSequence): java.util.regex.Matcher;
				matcher(arg1: string): java.util.regex.Matcher;
				static matches(arg1: java.lang.String, arg2: java.lang.ICharSequence): boolean;
				static matches(arg1: string, arg2: string): boolean;
				split(arg1: java.lang.ICharSequence): native.Array<java.lang.String>;
				split(arg1: string): native.Array<java.lang.String>;
				split(arg1: java.lang.ICharSequence, arg2: number): native.Array<java.lang.String>;
				split(arg1: string, arg2: number): native.Array<java.lang.String>;
				flags(): number;
				static quote(arg1: java.lang.String): string;
				static quote(arg1: string): string;
				pattern(): string;
			}
			export class MatchResult implements java.util.regex.IMatchResult {
				constructor(implementation: java.util.regex.IMatchResult);
				start(): number;
				start(arg1: number): number;
				group(arg1: number): string;
				group(): string;
				end(arg1: number): number;
				end(): number;
				groupCount(): number;
			}
			export class Matcher extends java.lang.Object implements java.util.regex.IMatchResult {
				static class: java.lang.Class<java.util.regex.Matcher>;
				toString(): string;
				matches(): boolean;
				static quoteReplacement(arg1: java.lang.String): string;
				static quoteReplacement(arg1: string): string;
				replaceAll(arg1: java.lang.String): string;
				replaceAll(arg1: string): string;
				replaceFirst(arg1: java.lang.String): string;
				replaceFirst(arg1: string): string;
				find(): boolean;
				find(arg1: number): boolean;
				start(arg1: number): number;
				start(): number;
				group(arg1: java.lang.String): string;
				group(arg1: string): string;
				group(): string;
				group(arg1: number): string;
				reset(arg1: java.lang.ICharSequence): java.util.regex.Matcher;
				reset(arg1: string): java.util.regex.Matcher;
				reset(): java.util.regex.Matcher;
				appendReplacement(arg1: java.lang.StringBuffer, arg2: java.lang.String): java.util.regex.Matcher;
				appendReplacement(arg1: java.lang.StringBuffer, arg2: string): java.util.regex.Matcher;
				appendTail(arg1: java.lang.StringBuffer): java.lang.StringBuffer;
				region(arg1: number, arg2: number): java.util.regex.Matcher;
				end(arg1: number): number;
				end(): number;
				pattern(): java.util.regex.Pattern;
				hitEnd(): boolean;
				groupCount(): number;
				hasAnchoringBounds(): boolean;
				hasTransparentBounds(): boolean;
				lookingAt(): boolean;
				regionEnd(): number;
				regionStart(): number;
				requireEnd(): boolean;
				toMatchResult(): java.util.regex.IMatchResult;
				useAnchoringBounds(arg1: boolean): java.util.regex.Matcher;
				usePattern(arg1: java.util.regex.Pattern): java.util.regex.Matcher;
				useTransparentBounds(arg1: boolean): java.util.regex.Matcher;
			}
		}
		export interface IMap<K, V> {
			hashCode(): number;
			equals(arg1: any): boolean;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			clear(): void;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export class PriorityQueue<E> extends java.util.AbstractQueue<E> implements java.io.ISerializable {
			constructor(arg1: number);
			constructor(arg1: number, arg2: java.util.IComparator<any>);
			constructor(arg1: java.util.ICollection<any>);
			constructor();
			constructor(arg1: java.util.ISortedSet<any>);
			constructor(arg1: java.util.PriorityQueue<any>);
			static class: java.lang.Class<java.util.PriorityQueue<any>>;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			poll(): E;
			peek(): E;
			offer(arg1: E): boolean;
			comparator(): java.util.IComparator<any>;
			remove(): E;
		}
		export interface IQueue<E> extends java.util.ICollection<E> {
			add(arg1: E): boolean;
			remove(): E;
			poll(): E;
			peek(): E;
			element(): E;
			offer(arg1: E): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class AbstractQueue<E> extends java.util.AbstractCollection<E> implements java.util.IQueue<E> {
			static class: java.lang.Class<java.util.AbstractQueue<any>>;
			add(arg1: E): boolean;
			addAll(arg1: java.util.ICollection<any>): boolean;
			remove(): E;
			clear(): void;
			element(): E;
			poll(): E;
			peek(): E;
			offer(arg1: E): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class AbstractMap<K, V> extends java.lang.Object implements java.util.IMap<K, V> {
			static class: java.lang.Class<java.util.AbstractMap<any, any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			clear(): void;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export module AbstractMap {
			export class SimpleImmutableEntry<K, V> extends java.lang.Object implements java.util.Map.IEntry<K, V>, java.io.ISerializable {
				constructor(arg1: K, arg2: V);
				constructor(arg1: java.util.Map.IEntry<any, any>);
				static class: java.lang.Class<java.util.AbstractMap.SimpleImmutableEntry<any, any>>;
				Value: V;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getValue(): V;
				getKey(): K;
				setValue(arg1: V): V;
			}
			export class SimpleEntry<K, V> extends java.lang.Object implements java.util.Map.IEntry<K, V>, java.io.ISerializable {
				constructor(arg1: K, arg2: V);
				constructor(arg1: java.util.Map.IEntry<any, any>);
				static class: java.lang.Class<java.util.AbstractMap.SimpleEntry<any, any>>;
				Value: V;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getValue(): V;
				getKey(): K;
				setValue(arg1: V): V;
			}
		}
		export class IllegalFormatWidthException extends java.util.IllegalFormatException {
			constructor(arg1: number);
			static class: java.lang.Class<java.util.IllegalFormatWidthException>;
			getMessage(): string;
			getWidth(): number;
		}
		export class ConcurrentModificationException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.util.ConcurrentModificationException>;
		}
		export class Comparator<T> implements java.util.IComparator<T> {
			constructor(implementation: java.util.IComparator<T>);
			equals(arg1: any): boolean;
			compare(arg1: T, arg2: T): number;
		}
		export class MissingFormatWidthException extends java.util.IllegalFormatException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.MissingFormatWidthException>;
			getFormatSpecifier(): string;
			getMessage(): string;
		}
		export class Properties extends java.util.Hashtable<any, any> {
			constructor();
			constructor(arg1: java.util.Properties);
			static class: java.lang.Class<java.util.Properties>;
			getProperty(arg1: java.lang.String, arg2: java.lang.String): string;
			getProperty(arg1: string, arg2: string): string;
			getProperty(arg1: java.lang.String): string;
			getProperty(arg1: string): string;
			load(arg1: java.io.InputStream): void;
			load(arg1: java.io.Reader): void;
			setProperty(arg1: java.lang.String, arg2: java.lang.String): any;
			setProperty(arg1: string, arg2: string): any;
			list(arg1: java.io.PrintStream): void;
			list(arg1: java.io.PrintWriter): void;
			loadFromXML(arg1: java.io.InputStream): void;
			propertyNames(): java.util.IEnumeration<any>;
			save(arg1: java.io.OutputStream, arg2: java.lang.String): void;
			save(arg1: java.io.OutputStream, arg2: string): void;
			store(arg1: java.io.Writer, arg2: java.lang.String): void;
			store(arg1: java.io.Writer, arg2: string): void;
			store(arg1: java.io.OutputStream, arg2: java.lang.String): void;
			store(arg1: java.io.OutputStream, arg2: string): void;
			storeToXML(arg1: java.io.OutputStream, arg2: java.lang.String): void;
			storeToXML(arg1: java.io.OutputStream, arg2: string): void;
			storeToXML(arg1: java.io.OutputStream, arg2: java.lang.String, arg3: java.lang.String): void;
			storeToXML(arg1: java.io.OutputStream, arg2: string, arg3: string): void;
			stringPropertyNames(): java.util.ISet<string>;
		}
		export class IllegalFormatFlagsException extends java.util.IllegalFormatException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.IllegalFormatFlagsException>;
			getMessage(): string;
			getFlags(): string;
		}
		export class LinkedHashMap<K, V> extends java.util.HashMap<K, V> implements java.util.IMap<K, V> {
			constructor();
			constructor(arg1: java.util.IMap<any, any>);
			constructor(arg1: number, arg2: native.Float, arg3: boolean);
			constructor(arg1: number, arg2: native.Float);
			constructor(arg1: number);
			static class: java.lang.Class<java.util.LinkedHashMap<any, any>>;
			get(arg1: any): V;
			clear(): void;
			containsValue(arg1: any): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
		}
		export class WeakHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.IMap<K, V> {
			constructor(arg1: number, arg2: native.Float);
			constructor();
			constructor(arg1: java.util.IMap<any, any>);
			constructor(arg1: number);
			static class: java.lang.Class<java.util.WeakHashMap<any, any>>;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			clear(): void;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
		}
		export class TreeSet<E> extends java.util.AbstractSet<E> implements java.util.INavigableSet<E>, java.lang.ICloneable, java.io.ISerializable {
			constructor();
			constructor(arg1: java.util.ICollection<any>);
			constructor(arg1: java.util.ISortedSet<E>);
			constructor(arg1: java.util.IComparator<any>);
			static class: java.lang.Class<java.util.TreeSet<any>>;
			clone(): any;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			floor(arg1: E): E;
			descendingIterator(): java.util.IIterator<E>;
			first(): E;
			last(): E;
			pollFirst(): E;
			pollLast(): E;
			ceiling(arg1: E): E;
			comparator(): java.util.IComparator<any>;
			descendingSet(): java.util.INavigableSet<E>;
			headSet(arg1: E): java.util.ISortedSet<E>;
			headSet(arg1: E, arg2: boolean): java.util.INavigableSet<E>;
			higher(arg1: E): E;
			lower(arg1: E): E;
			subSet(arg1: E, arg2: E): java.util.ISortedSet<E>;
			subSet(arg1: E, arg2: boolean, arg3: E, arg4: boolean): java.util.INavigableSet<E>;
			tailSet(arg1: E): java.util.ISortedSet<E>;
			tailSet(arg1: E, arg2: boolean): java.util.INavigableSet<E>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class ArrayList<E> extends java.util.AbstractList<E> implements java.util.IList<E>, java.util.IRandomAccess, java.lang.ICloneable, java.io.ISerializable {
			constructor();
			constructor(arg1: number);
			constructor(arg1: java.util.ICollection<any>);
			static class: java.lang.Class<java.util.ArrayList<any>>;
			clone(): any;
			add(arg1: E): boolean;
			add(arg1: number, arg2: E): void;
			contains(arg1: any): boolean;
			get(arg1: number): E;
			indexOf(arg1: any): number;
			isEmpty(): boolean;
			lastIndexOf(arg1: any): number;
			size(): number;
			subList(arg1: number, arg2: number): java.util.IList<E>;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			addAll(arg1: number, arg2: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: number): E;
			remove(arg1: any): boolean;
			clear(): void;
			set(arg1: number, arg2: E): E;
			ensureCapacity(arg1: number): void;
			trimToSize(): void;
			listIterator(): java.util.IListIterator<E>;
			listIterator(arg1: number): java.util.IListIterator<E>;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			containsAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class Hashtable<K, V> extends java.util.Dictionary<K, V> implements java.util.IMap<K, V>, java.lang.ICloneable, java.io.ISerializable {
			constructor(arg1: number, arg2: native.Float);
			constructor(arg1: number);
			constructor();
			constructor(arg1: java.util.IMap<any, any>);
			static class: java.lang.Class<java.util.Hashtable<any, any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			toString(): string;
			contains(arg1: any): boolean;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			elements(): java.util.IEnumeration<V>;
			clear(): void;
			keySet(): java.util.ISet<K>;
			keys(): java.util.IEnumeration<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export class Dictionary<K, V> extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.util.Dictionary<any, any>>;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			put(arg1: K, arg2: V): V;
			remove(arg1: any): V;
			elements(): java.util.IEnumeration<V>;
			keys(): java.util.IEnumeration<K>;
		}
		export class Collection<E> implements java.lang.IIterable<E>, java.util.ICollection<E> {
			constructor(implementation: java.util.ICollection<E>);
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class HashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.IMap<K, V>, java.lang.ICloneable, java.io.ISerializable {
			constructor();
			constructor(arg1: number, arg2: native.Float);
			constructor(arg1: java.util.IMap<any, any>);
			constructor(arg1: number);
			static class: java.lang.Class<java.util.HashMap<any, any>>;
			clone(): any;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			clear(): void;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
		}
		export class SimpleTimeZone extends java.util.TimeZone {
			constructor(arg1: number, arg2: java.lang.String, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number);
			constructor(arg1: number, arg2: string, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number);
			constructor(arg1: number, arg2: java.lang.String, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number);
			constructor(arg1: number, arg2: string, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number);
			constructor(arg1: number, arg2: java.lang.String, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number);
			constructor(arg1: number, arg2: string, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: number, arg10: number, arg11: number, arg12: number, arg13: number);
			constructor(arg1: number, arg2: java.lang.String);
			constructor(arg1: number, arg2: string);
			static WALL_TIME: number;
			static STANDARD_TIME: number;
			static UTC_TIME: number;
			static class: java.lang.Class<java.util.SimpleTimeZone>;
			DSTSavings: number;
			RawOffset: number;
			setDSTSavings(arg1: number): void;
			setEndRule(arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): void;
			setEndRule(arg1: number, arg2: number, arg3: number): void;
			setEndRule(arg1: number, arg2: number, arg3: number, arg4: number): void;
			setStartRule(arg1: number, arg2: number, arg3: number, arg4: number): void;
			setStartRule(arg1: number, arg2: number, arg3: number): void;
			setStartRule(arg1: number, arg2: number, arg3: number, arg4: number, arg5: boolean): void;
			setStartYear(arg1: number): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			toString(): string;
			getOffset(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): number;
			getOffset(arg1: native.Long): number;
			getRawOffset(): number;
			getDSTSavings(): number;
			hasSameRules(arg1: java.util.TimeZone): boolean;
			inDaylightTime(arg1: java.util.Date): boolean;
			observesDaylightTime(): boolean;
			setRawOffset(arg1: number): void;
			useDaylightTime(): boolean;
		}
		export class Timer extends java.lang.Object {
			constructor();
			constructor(arg1: boolean);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: boolean);
			constructor(arg1: string, arg2: boolean);
			static class: java.lang.Class<java.util.Timer>;
			purge(): number;
			schedule(arg1: java.util.TimerTask, arg2: native.Long): void;
			schedule(arg1: java.util.TimerTask, arg2: java.util.Date): void;
			schedule(arg1: java.util.TimerTask, arg2: native.Long, arg3: native.Long): void;
			schedule(arg1: java.util.TimerTask, arg2: java.util.Date, arg3: native.Long): void;
			scheduleAtFixedRate(arg1: java.util.TimerTask, arg2: native.Long, arg3: native.Long): void;
			scheduleAtFixedRate(arg1: java.util.TimerTask, arg2: java.util.Date, arg3: native.Long): void;
			cancel(): void;
		}
		export class Locale extends java.lang.Object implements java.lang.ICloneable, java.io.ISerializable {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string);
			static ENGLISH: java.util.Locale;
			static FRENCH: java.util.Locale;
			static GERMAN: java.util.Locale;
			static ITALIAN: java.util.Locale;
			static JAPANESE: java.util.Locale;
			static KOREAN: java.util.Locale;
			static CHINESE: java.util.Locale;
			static SIMPLIFIED_CHINESE: java.util.Locale;
			static TRADITIONAL_CHINESE: java.util.Locale;
			static FRANCE: java.util.Locale;
			static GERMANY: java.util.Locale;
			static ITALY: java.util.Locale;
			static JAPAN: java.util.Locale;
			static KOREA: java.util.Locale;
			static CHINA: java.util.Locale;
			static PRC: java.util.Locale;
			static TAIWAN: java.util.Locale;
			static UK: java.util.Locale;
			static US: java.util.Locale;
			static CANADA: java.util.Locale;
			static CANADA_FRENCH: java.util.Locale;
			static ROOT: java.util.Locale;
			static PRIVATE_USE_EXTENSION: string;
			static UNICODE_LOCALE_EXTENSION: string;
			static class: java.lang.Class<java.util.Locale>;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			toString(): string;
			static getDefault(): java.util.Locale;
			getLanguage(): string;
			static forLanguageTag(arg1: java.lang.String): java.util.Locale;
			static forLanguageTag(arg1: string): java.util.Locale;
			static getAvailableLocales(): native.Array<java.util.Locale>;
			getCountry(): string;
			getDisplayCountry(arg1: java.util.Locale): string;
			getDisplayCountry(): string;
			getDisplayLanguage(arg1: java.util.Locale): string;
			getDisplayLanguage(): string;
			getDisplayName(): string;
			getDisplayName(arg1: java.util.Locale): string;
			getDisplayScript(arg1: java.util.Locale): string;
			getDisplayScript(): string;
			getDisplayVariant(): string;
			getDisplayVariant(arg1: java.util.Locale): string;
			getExtension(arg1: string): string;
			getExtensionKeys(): java.util.ISet<java.lang.Character>;
			getISO3Country(): string;
			getISO3Language(): string;
			static getISOCountries(): native.Array<java.lang.String>;
			static getISOLanguages(): native.Array<java.lang.String>;
			getScript(): string;
			getUnicodeLocaleAttributes(): java.util.ISet<string>;
			getUnicodeLocaleKeys(): java.util.ISet<string>;
			getUnicodeLocaleType(arg1: java.lang.String): string;
			getUnicodeLocaleType(arg1: string): string;
			getVariant(): string;
			static setDefault(arg1: java.util.Locale): void;
			toLanguageTag(): string;
		}
		export class UnknownFormatConversionException extends java.util.IllegalFormatException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.UnknownFormatConversionException>;
			getConversion(): string;
			getMessage(): string;
		}
		export interface ISortedMap<K, V> extends java.util.IMap<K, V> {
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			values(): java.util.ICollection<V>;
			keySet(): java.util.ISet<K>;
			comparator(): java.util.IComparator<any>;
			firstKey(): K;
			headMap(arg1: K): java.util.ISortedMap<K, V>;
			lastKey(): K;
			subMap(arg1: K, arg2: K): java.util.ISortedMap<K, V>;
			tailMap(arg1: K): java.util.ISortedMap<K, V>;
			hashCode(): number;
			equals(arg1: any): boolean;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			remove(arg1: any): V;
			clear(): void;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export class LinkedHashSet<E> extends java.util.HashSet<E> implements java.util.ISet<E>, java.lang.ICloneable, java.io.ISerializable {
			constructor(arg1: java.util.ICollection<any>);
			constructor();
			constructor(arg1: number);
			constructor(arg1: number, arg2: native.Float);
			static class: java.lang.Class<java.util.LinkedHashSet<any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export interface IRandomAccess {
		}
		export interface IObserver {
			update(arg1: java.util.Observable, arg2: any): void;
		}
		export interface ICollection<E> extends java.lang.IIterable<E> {
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class Stack<E> extends java.util.Vector<E> {
			constructor();
			static class: java.lang.Class<java.util.Stack<any>>;
			pop(): E;
			push(arg1: E): E;
			empty(): boolean;
			peek(): E;
			search(arg1: any): number;
		}
		export class AbstractSet<E> extends java.util.AbstractCollection<E> implements java.util.ISet<E> {
			static class: java.lang.Class<java.util.AbstractSet<any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class NavigableSet<E> implements java.util.ISortedSet<E>, java.util.INavigableSet<E> {
			constructor(implementation: java.util.INavigableSet<E>);
			iterator(): java.util.IIterator<E>;
			floor(arg1: E): E;
			descendingIterator(): java.util.IIterator<E>;
			pollFirst(): E;
			pollLast(): E;
			ceiling(arg1: E): E;
			descendingSet(): java.util.INavigableSet<E>;
			headSet(arg1: E, arg2: boolean): java.util.INavigableSet<E>;
			headSet(arg1: E): java.util.ISortedSet<E>;
			higher(arg1: E): E;
			lower(arg1: E): E;
			subSet(arg1: E, arg2: E): java.util.ISortedSet<E>;
			subSet(arg1: E, arg2: boolean, arg3: E, arg4: boolean): java.util.INavigableSet<E>;
			tailSet(arg1: E): java.util.ISortedSet<E>;
			tailSet(arg1: E, arg2: boolean): java.util.INavigableSet<E>;
			first(): E;
			last(): E;
			comparator(): java.util.IComparator<any>;
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class DuplicateFormatFlagsException extends java.util.IllegalFormatException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.DuplicateFormatFlagsException>;
			getMessage(): string;
			getFlags(): string;
		}
		export interface IEventListener {
		}
		export class BitSet extends java.lang.Object implements java.lang.ICloneable, java.io.ISerializable {
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<java.util.BitSet>;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			toString(): string;
			get(arg1: number, arg2: number): java.util.BitSet;
			get(arg1: number): boolean;
			isEmpty(): boolean;
			length(): number;
			size(): number;
			static valueOf(arg1: native.Array<native.Byte>): java.util.BitSet;
			static valueOf(arg1: java.nio.ByteBuffer): java.util.BitSet;
			static valueOf(arg1: java.nio.LongBuffer): java.util.BitSet;
			clear(arg1: number): void;
			clear(): void;
			clear(arg1: number, arg2: number): void;
			set(arg1: number, arg2: number): void;
			set(arg1: number): void;
			set(arg1: number, arg2: number, arg3: boolean): void;
			set(arg1: number, arg2: boolean): void;
			flip(arg1: number): void;
			flip(arg1: number, arg2: number): void;
			toByteArray(): native.Array<native.Byte>;
			and(arg1: java.util.BitSet): void;
			andNot(arg1: java.util.BitSet): void;
			cardinality(): number;
			intersects(arg1: java.util.BitSet): boolean;
			nextClearBit(arg1: number): number;
			nextSetBit(arg1: number): number;
			or(arg1: java.util.BitSet): void;
			previousClearBit(arg1: number): number;
			previousSetBit(arg1: number): number;
			toLongArray(): native.Array<native.Long>;
			xor(arg1: java.util.BitSet): void;
		}
		export class UUID extends java.lang.Object implements java.io.ISerializable, java.lang.IComparable<java.util.UUID> {
			constructor(arg1: native.Long, arg2: native.Long);
			static class: java.lang.Class<java.util.UUID>;
			clockSequence(): number;
			static fromString(arg1: java.lang.String): java.util.UUID;
			static fromString(arg1: string): java.util.UUID;
			getLeastSignificantBits(): any;
			getMostSignificantBits(): any;
			static nameUUIDFromBytes(arg1: native.Array<native.Byte>): java.util.UUID;
			static randomUUID(): java.util.UUID;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.util.UUID): number;
			timestamp(): any;
			variant(): number;
			node(): any;
			version(): number;
		}
		export interface ISet<E> extends java.util.ICollection<E> {
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class FormatFlagsConversionMismatchException extends java.util.IllegalFormatException {
			constructor(arg1: java.lang.String, arg2: string);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.util.FormatFlagsConversionMismatchException>;
			getConversion(): string;
			getMessage(): string;
			getFlags(): string;
		}
		export class InputMismatchException extends java.util.NoSuchElementException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.InputMismatchException>;
		}
		export module jar {
			export class JarFile extends java.util.zip.ZipFile {
				constructor(arg1: java.io.File, arg2: boolean, arg3: number);
				constructor(arg1: java.io.File, arg2: boolean);
				constructor(arg1: java.io.File);
				constructor(arg1: java.lang.String, arg2: boolean);
				constructor(arg1: string, arg2: boolean);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static MANIFEST_NAME: java.lang.String;
				static class: java.lang.Class<java.util.jar.JarFile>;
				getEntry(arg1: java.lang.String): java.util.zip.ZipEntry;
				getEntry(arg1: string): java.util.zip.ZipEntry;
				getInputStream(arg1: java.util.zip.ZipEntry): java.io.InputStream;
				getManifest(): java.util.jar.Manifest;
				entries(): java.util.IEnumeration<java.util.jar.JarEntry>;
				getJarEntry(arg1: java.lang.String): java.util.jar.JarEntry;
				getJarEntry(arg1: string): java.util.jar.JarEntry;
			}
			export class Manifest extends java.lang.Object implements java.lang.ICloneable {
				constructor(arg1: java.util.jar.Manifest);
				constructor(arg1: java.io.InputStream);
				constructor();
				static class: java.lang.Class<java.util.jar.Manifest>;
				hashCode(): number;
				equals(arg1: any): boolean;
				clone(): any;
				write(arg1: java.io.OutputStream): void;
				clear(): void;
				read(arg1: java.io.InputStream): void;
				getAttributes(arg1: java.lang.String): java.util.jar.Attributes;
				getAttributes(arg1: string): java.util.jar.Attributes;
				getMainAttributes(): java.util.jar.Attributes;
				getEntries(): java.util.IMap<string, java.util.jar.Attributes>;
			}
			export class Attributes extends java.lang.Object implements java.util.IMap<any, any>, java.lang.ICloneable {
				constructor(arg1: java.util.jar.Attributes);
				constructor(arg1: number);
				constructor();
				static class: java.lang.Class<java.util.jar.Attributes>;
				hashCode(): number;
				equals(arg1: any): boolean;
				clone(): any;
				get(arg1: any): any;
				getValue(arg1: java.util.jar.Attributes.Name): string;
				getValue(arg1: java.lang.String): string;
				getValue(arg1: string): string;
				isEmpty(): boolean;
				size(): number;
				entrySet(): java.util.ISet<java.util.Map.IEntry<any, any>>;
				put(arg1: any, arg2: any): any;
				putAll(arg1: java.util.IMap<any, any>): void;
				values(): java.util.ICollection<any>;
				remove(arg1: any): any;
				clear(): void;
				keySet(): java.util.ISet<any>;
				containsKey(arg1: any): boolean;
				containsValue(arg1: any): boolean;
				putValue(arg1: java.lang.String, arg2: java.lang.String): string;
				putValue(arg1: string, arg2: string): string;
			}
			export module Attributes {
				export class Name extends java.lang.Object {
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static MANIFEST_VERSION: java.util.jar.Attributes.Name;
					static SIGNATURE_VERSION: java.util.jar.Attributes.Name;
					static CONTENT_TYPE: java.util.jar.Attributes.Name;
					static CLASS_PATH: java.util.jar.Attributes.Name;
					static MAIN_CLASS: java.util.jar.Attributes.Name;
					static SEALED: java.util.jar.Attributes.Name;
					static EXTENSION_LIST: java.util.jar.Attributes.Name;
					static EXTENSION_NAME: java.util.jar.Attributes.Name;
					static EXTENSION_INSTALLATION: java.util.jar.Attributes.Name;
					static IMPLEMENTATION_TITLE: java.util.jar.Attributes.Name;
					static IMPLEMENTATION_VERSION: java.util.jar.Attributes.Name;
					static IMPLEMENTATION_VENDOR: java.util.jar.Attributes.Name;
					static IMPLEMENTATION_VENDOR_ID: java.util.jar.Attributes.Name;
					static IMPLEMENTATION_URL: java.util.jar.Attributes.Name;
					static SPECIFICATION_TITLE: java.util.jar.Attributes.Name;
					static SPECIFICATION_VERSION: java.util.jar.Attributes.Name;
					static SPECIFICATION_VENDOR: java.util.jar.Attributes.Name;
					static class: java.lang.Class<java.util.jar.Attributes.Name>;
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
				}
			}
			export class JarEntry extends java.util.zip.ZipEntry {
				constructor(arg1: java.util.jar.JarEntry);
				constructor(arg1: java.util.zip.ZipEntry);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.jar.JarEntry>;
				getCertificates(): native.Array<java.security.cert.Certificate>;
				getAttributes(): java.util.jar.Attributes;
				getCodeSigners(): native.Array<java.security.CodeSigner>;
			}
			export class JarInputStream extends java.util.zip.ZipInputStream {
				constructor(arg1: java.io.InputStream);
				constructor(arg1: java.io.InputStream, arg2: boolean);
				static class: java.lang.Class<java.util.jar.JarInputStream>;
				getNextJarEntry(): java.util.jar.JarEntry;
				read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				getManifest(): java.util.jar.Manifest;
				getNextEntry(): java.util.zip.ZipEntry;
				read(): number;
				read(arg1: native.Array<native.Byte>): number;
			}
			export class JarException extends java.util.zip.ZipException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.jar.JarException>;
			}
			export class Pack200 extends java.lang.Object {
				static class: java.lang.Class<java.util.jar.Pack200>;
				static newPacker(): java.util.jar.Pack200.IPacker;
				static newUnpacker(): java.util.jar.Pack200.IUnpacker;
			}
			export module Pack200 {
				export class Packer implements java.util.jar.Pack200.IPacker {
					constructor(implementation: java.util.jar.Pack200.IPacker);
					static SEGMENT_LIMIT: java.lang.String;
					static KEEP_FILE_ORDER: java.lang.String;
					static EFFORT: java.lang.String;
					static DEFLATE_HINT: java.lang.String;
					static MODIFICATION_TIME: java.lang.String;
					static PASS_FILE_PFX: java.lang.String;
					static UNKNOWN_ATTRIBUTE: java.lang.String;
					static CLASS_ATTRIBUTE_PFX: java.lang.String;
					static FIELD_ATTRIBUTE_PFX: java.lang.String;
					static METHOD_ATTRIBUTE_PFX: java.lang.String;
					static CODE_ATTRIBUTE_PFX: java.lang.String;
					static PROGRESS: java.lang.String;
					static KEEP: java.lang.String;
					static PASS: java.lang.String;
					static STRIP: java.lang.String;
					static ERROR: java.lang.String;
					static TRUE: java.lang.String;
					static FALSE: java.lang.String;
					static LATEST: java.lang.String;
					properties(): java.util.ISortedMap<string, string>;
					addPropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
					pack(arg1: java.util.jar.JarInputStream, arg2: java.io.OutputStream): void;
					pack(arg1: java.util.jar.JarFile, arg2: java.io.OutputStream): void;
					removePropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
				}
				export class Unpacker implements java.util.jar.Pack200.IUnpacker {
					constructor(implementation: java.util.jar.Pack200.IUnpacker);
					static KEEP: java.lang.String;
					static TRUE: java.lang.String;
					static FALSE: java.lang.String;
					static DEFLATE_HINT: java.lang.String;
					static PROGRESS: java.lang.String;
					unpack(arg1: java.io.File, arg2: java.util.jar.JarOutputStream): void;
					unpack(arg1: java.io.InputStream, arg2: java.util.jar.JarOutputStream): void;
					properties(): java.util.ISortedMap<string, string>;
					addPropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
					removePropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
				}
				export interface IPacker {
					properties(): java.util.ISortedMap<string, string>;
					addPropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
					pack(arg1: java.util.jar.JarInputStream, arg2: java.io.OutputStream): void;
					pack(arg1: java.util.jar.JarFile, arg2: java.io.OutputStream): void;
					removePropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
				}
				export module IPacker {
					var SEGMENT_LIMIT: java.lang.String;
					var KEEP_FILE_ORDER: java.lang.String;
					var EFFORT: java.lang.String;
					var DEFLATE_HINT: java.lang.String;
					var MODIFICATION_TIME: java.lang.String;
					var PASS_FILE_PFX: java.lang.String;
					var UNKNOWN_ATTRIBUTE: java.lang.String;
					var CLASS_ATTRIBUTE_PFX: java.lang.String;
					var FIELD_ATTRIBUTE_PFX: java.lang.String;
					var METHOD_ATTRIBUTE_PFX: java.lang.String;
					var CODE_ATTRIBUTE_PFX: java.lang.String;
					var PROGRESS: java.lang.String;
					var KEEP: java.lang.String;
					var PASS: java.lang.String;
					var STRIP: java.lang.String;
					var ERROR: java.lang.String;
					var TRUE: java.lang.String;
					var FALSE: java.lang.String;
					var LATEST: java.lang.String;
				}
				export interface IUnpacker {
					unpack(arg1: java.io.File, arg2: java.util.jar.JarOutputStream): void;
					unpack(arg1: java.io.InputStream, arg2: java.util.jar.JarOutputStream): void;
					properties(): java.util.ISortedMap<string, string>;
					addPropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
					removePropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
				}
				export module IUnpacker {
					var KEEP: java.lang.String;
					var TRUE: java.lang.String;
					var FALSE: java.lang.String;
					var DEFLATE_HINT: java.lang.String;
					var PROGRESS: java.lang.String;
				}
			}
			export class JarOutputStream extends java.util.zip.ZipOutputStream {
				constructor(arg1: java.io.OutputStream);
				constructor(arg1: java.io.OutputStream, arg2: java.util.jar.Manifest);
				static class: java.lang.Class<java.util.jar.JarOutputStream>;
				putNextEntry(arg1: java.util.zip.ZipEntry): void;
			}
		}
		export class InvalidPropertiesFormatException extends java.io.IOException {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.InvalidPropertiesFormatException>;
		}
		export class TimerTask extends java.lang.Object implements java.lang.IRunnable {
			static class: java.lang.Class<java.util.TimerTask>;
			scheduledExecutionTime(): any;
			run(): void;
			cancel(): boolean;
		}
		export class LinkedList<E> extends java.util.AbstractSequentialList<E> implements java.util.IList<E>, java.util.IDeque<E>, java.lang.ICloneable, java.io.ISerializable {
			constructor(arg1: java.util.ICollection<any>);
			constructor();
			static class: java.lang.Class<java.util.LinkedList<any>>;
			clone(): any;
			add(arg1: number, arg2: E): void;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			get(arg1: number): E;
			indexOf(arg1: any): number;
			lastIndexOf(arg1: any): number;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: number, arg2: java.util.ICollection<any>): boolean;
			addAll(arg1: java.util.ICollection<any>): boolean;
			pop(): E;
			push(arg1: E): void;
			remove(arg1: any): boolean;
			remove(): E;
			remove(arg1: number): E;
			clear(): void;
			poll(): E;
			set(arg1: number, arg2: E): E;
			listIterator(arg1: number): java.util.IListIterator<E>;
			peek(): E;
			getFirst(): E;
			getLast(): E;
			removeFirst(): E;
			removeLast(): E;
			addFirst(arg1: E): void;
			addLast(arg1: E): void;
			descendingIterator(): java.util.IIterator<E>;
			element(): E;
			offer(arg1: E): boolean;
			offerFirst(arg1: E): boolean;
			offerLast(arg1: E): boolean;
			peekFirst(): E;
			peekLast(): E;
			pollFirst(): E;
			pollLast(): E;
			removeFirstOccurrence(arg1: any): boolean;
			removeLastOccurrence(arg1: any): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			isEmpty(): boolean;
			subList(arg1: number, arg2: number): java.util.IList<E>;
			iterator(): java.util.IIterator<E>;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			listIterator(): java.util.IListIterator<E>;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class Queue<E> implements java.util.ICollection<E>, java.util.IQueue<E> {
			constructor(implementation: java.util.IQueue<E>);
			add(arg1: E): boolean;
			remove(): E;
			poll(): E;
			peek(): E;
			element(): E;
			offer(arg1: E): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class Set<E> implements java.util.ICollection<E>, java.util.ISet<E> {
			constructor(implementation: java.util.ISet<E>);
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class IllegalFormatPrecisionException extends java.util.IllegalFormatException {
			constructor(arg1: number);
			static class: java.lang.Class<java.util.IllegalFormatPrecisionException>;
			getPrecision(): number;
			getMessage(): string;
		}
		export class RandomAccess implements java.util.IRandomAccess {
			constructor(implementation: java.util.IRandomAccess);
		}
		export class AbstractList<E> extends java.util.AbstractCollection<E> implements java.util.IList<E> {
			static class: java.lang.Class<java.util.AbstractList<any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			add(arg1: number, arg2: E): void;
			get(arg1: number): E;
			indexOf(arg1: any): number;
			lastIndexOf(arg1: any): number;
			subList(arg1: number, arg2: number): java.util.IList<E>;
			addAll(arg1: number, arg2: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: number): E;
			clear(): void;
			set(arg1: number, arg2: E): E;
			listIterator(arg1: number): java.util.IListIterator<E>;
			listIterator(): java.util.IListIterator<E>;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray(): native.Array<any>;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			remove(arg1: any): boolean;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class IllegalFormatException extends java.lang.IllegalArgumentException {
			static class: java.lang.Class<java.util.IllegalFormatException>;
		}
		export class AbstractSequentialList<E> extends java.util.AbstractList<E> {
			static class: java.lang.Class<java.util.AbstractSequentialList<any>>;
			add(arg1: number, arg2: E): void;
			get(arg1: number): E;
			addAll(arg1: number, arg2: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: number): E;
			set(arg1: number, arg2: E): E;
			listIterator(arg1: number): java.util.IListIterator<E>;
			add(arg1: E): boolean;
			listIterator(): java.util.IListIterator<E>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			remove(arg1: any): boolean;
		}
		export class Deque<E> implements java.util.IQueue<E>, java.util.IDeque<E> {
			constructor(implementation: java.util.IDeque<E>);
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			size(): number;
			iterator(): java.util.IIterator<E>;
			pop(): E;
			push(arg1: E): void;
			remove(): E;
			remove(arg1: any): boolean;
			poll(): E;
			peek(): E;
			getFirst(): E;
			getLast(): E;
			removeFirst(): E;
			removeLast(): E;
			addFirst(arg1: E): void;
			addLast(arg1: E): void;
			descendingIterator(): java.util.IIterator<E>;
			element(): E;
			offer(arg1: E): boolean;
			offerFirst(arg1: E): boolean;
			offerLast(arg1: E): boolean;
			peekFirst(): E;
			peekLast(): E;
			pollFirst(): E;
			pollLast(): E;
			removeFirstOccurrence(arg1: any): boolean;
			removeLastOccurrence(arg1: any): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			isEmpty(): boolean;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class Collections extends java.lang.Object {
			static EMPTY_SET: java.util.ISet<any>;
			static EMPTY_LIST: java.util.IList<any>;
			static EMPTY_MAP: java.util.IMap<any, any>;
			static class: java.lang.Class<java.util.Collections>;
			static min<T>(arg1: java.util.ICollection<any>): T;
			static min<T>(arg1: java.util.ICollection<any>, arg2: java.util.IComparator<any>): T;
			static replaceAll<T>(arg1: java.util.IList<T>, arg2: T, arg3: T): boolean;
			static addAll<T>(arg1: java.util.ICollection<any>, arg2: native.Array<T>): boolean;
			static emptyEnumeration<T>(): java.util.IEnumeration<T>;
			static synchronizedSet<T>(arg1: java.util.ISet<T>): java.util.ISet<T>;
			static newSetFromMap<E>(arg1: java.util.IMap<E, boolean>): java.util.ISet<E>;
			static unmodifiableList<T>(arg1: java.util.IList<any>): java.util.IList<T>;
			static list<T>(arg1: java.util.IEnumeration<T>): java.util.ArrayList<T>;
			static emptyIterator<T>(): java.util.IIterator<T>;
			static max<T>(arg1: java.util.ICollection<any>): T;
			static max<T>(arg1: java.util.ICollection<any>, arg2: java.util.IComparator<any>): T;
			static synchronizedCollection<T>(arg1: java.util.ICollection<T>): java.util.ICollection<T>;
			static copy<T>(arg1: java.util.IList<any>, arg2: java.util.IList<any>): void;
			static fill<T>(arg1: java.util.IList<any>, arg2: T): void;
			static reverse(arg1: java.util.IList<any>): void;
			static synchronizedList<T>(arg1: java.util.IList<T>): java.util.IList<T>;
			static asLifoQueue<T>(arg1: java.util.IDeque<T>): java.util.IQueue<T>;
			static binarySearch<T>(arg1: java.util.IList<any>, arg2: T): number;
			static binarySearch<T>(arg1: java.util.IList<any>, arg2: T, arg3: java.util.IComparator<any>): number;
			static checkedCollection<E>(arg1: java.util.ICollection<E>, arg2: java.lang.Class<E>): java.util.ICollection<E>;
			static checkedList<E>(arg1: java.util.IList<E>, arg2: java.lang.Class<E>): java.util.IList<E>;
			static checkedMap<K, V>(arg1: java.util.IMap<K, V>, arg2: java.lang.Class<K>, arg3: java.lang.Class<V>): java.util.IMap<K, V>;
			static checkedSet<E>(arg1: java.util.ISet<E>, arg2: java.lang.Class<E>): java.util.ISet<E>;
			static checkedSortedMap<K, V>(arg1: java.util.ISortedMap<K, V>, arg2: java.lang.Class<K>, arg3: java.lang.Class<V>): java.util.ISortedMap<K, V>;
			static checkedSortedSet<E>(arg1: java.util.ISortedSet<E>, arg2: java.lang.Class<E>): java.util.ISortedSet<E>;
			static disjoint(arg1: java.util.ICollection<any>, arg2: java.util.ICollection<any>): boolean;
			static emptyList<T>(): java.util.IList<T>;
			static emptyListIterator<T>(): java.util.IListIterator<T>;
			static emptyMap<K, V>(): java.util.IMap<K, V>;
			static emptySet<T>(): java.util.ISet<T>;
			static enumeration<T>(arg1: java.util.ICollection<T>): java.util.IEnumeration<T>;
			static frequency(arg1: java.util.ICollection<any>, arg2: any): number;
			static indexOfSubList(arg1: java.util.IList<any>, arg2: java.util.IList<any>): number;
			static lastIndexOfSubList(arg1: java.util.IList<any>, arg2: java.util.IList<any>): number;
			static nCopies<T>(arg1: number, arg2: T): java.util.IList<T>;
			static reverseOrder<T>(arg1: java.util.IComparator<T>): java.util.IComparator<T>;
			static reverseOrder<T>(): java.util.IComparator<T>;
			static rotate(arg1: java.util.IList<any>, arg2: number): void;
			static shuffle(arg1: java.util.IList<any>): void;
			static shuffle(arg1: java.util.IList<any>, arg2: java.util.Random): void;
			static singleton<T>(arg1: T): java.util.ISet<T>;
			static singletonList<T>(arg1: T): java.util.IList<T>;
			static singletonMap<K, V>(arg1: K, arg2: V): java.util.IMap<K, V>;
			static sort<T>(arg1: java.util.IList<T>, arg2: java.util.IComparator<any>): void;
			static sort<T extends java.lang.IComparable<any>>(arg1: java.util.IList<T>): void;
			static swap(arg1: java.util.IList<any>, arg2: number, arg3: number): void;
			static synchronizedMap<K, V>(arg1: java.util.IMap<K, V>): java.util.IMap<K, V>;
			static synchronizedSortedMap<K, V>(arg1: java.util.ISortedMap<K, V>): java.util.ISortedMap<K, V>;
			static synchronizedSortedSet<T>(arg1: java.util.ISortedSet<T>): java.util.ISortedSet<T>;
			static unmodifiableCollection<T>(arg1: java.util.ICollection<any>): java.util.ICollection<T>;
			static unmodifiableMap<K, V>(arg1: java.util.IMap<any, any>): java.util.IMap<K, V>;
			static unmodifiableSet<T>(arg1: java.util.ISet<any>): java.util.ISet<T>;
			static unmodifiableSortedMap<K, V>(arg1: java.util.ISortedMap<K, any>): java.util.ISortedMap<K, V>;
			static unmodifiableSortedSet<T>(arg1: java.util.ISortedSet<T>): java.util.ISortedSet<T>;
		}
		export class Map<K, V> implements java.util.IMap<K, V> {
			constructor(implementation: java.util.IMap<K, V>);
			hashCode(): number;
			equals(arg1: any): boolean;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			clear(): void;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export module Map {
			export class Entry<K, V> implements java.util.Map.IEntry<K, V> {
				constructor(implementation: java.util.Map.IEntry<K, V>);
				Value: V;
				hashCode(): number;
				equals(arg1: any): boolean;
				getValue(): V;
				getKey(): K;
				setValue(arg1: V): V;
			}
			export interface IEntry<K, V> {
				hashCode(): number;
				equals(arg1: any): boolean;
				getValue(): V;
				getKey(): K;
				setValue(arg1: V): V;
			}
		}
		export class ListResourceBundle extends java.util.ResourceBundle {
			constructor();
			static class: java.lang.Class<java.util.ListResourceBundle>;
			getKeys(): java.util.IEnumeration<string>;
			handleGetObject(arg1: java.lang.String): any;
			handleGetObject(arg1: string): any;
		}
		export module logging {
			export class Formatter extends java.lang.Object {
				static class: java.lang.Class<java.util.logging.Formatter>;
				formatMessage(arg1: java.util.logging.LogRecord): string;
				getHead(arg1: java.util.logging.Handler): string;
				getTail(arg1: java.util.logging.Handler): string;
				format(arg1: java.util.logging.LogRecord): string;
			}
			export class XMLFormatter extends java.util.logging.Formatter {
				constructor();
				static class: java.lang.Class<java.util.logging.XMLFormatter>;
				getHead(arg1: java.util.logging.Handler): string;
				getTail(arg1: java.util.logging.Handler): string;
				format(arg1: java.util.logging.LogRecord): string;
			}
			export interface IFilter {
				isLoggable(arg1: java.util.logging.LogRecord): boolean;
			}
			export class LogManager extends java.lang.Object {
				static LOGGING_MXBEAN_NAME: java.lang.String;
				static class: java.lang.Class<java.util.logging.LogManager>;
				getProperty(arg1: java.lang.String): string;
				getProperty(arg1: string): string;
				checkAccess(): void;
				getLogger(arg1: java.lang.String): java.util.logging.Logger;
				getLogger(arg1: string): java.util.logging.Logger;
				reset(): void;
				addPropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
				removePropertyChangeListener(arg1: java.beans.IPropertyChangeListener): void;
				static getLogManager(): java.util.logging.LogManager;
				addLogger(arg1: java.util.logging.Logger): boolean;
				getLoggerNames(): java.util.IEnumeration<string>;
				static getLoggingMXBean(): java.util.logging.ILoggingMXBean;
				readConfiguration(): void;
				readConfiguration(arg1: java.io.InputStream): void;
			}
			export class FileHandler extends java.util.logging.StreamHandler {
				constructor(arg1: java.lang.String, arg2: boolean);
				constructor(arg1: string, arg2: boolean);
				constructor(arg1: java.lang.String, arg2: number, arg3: number, arg4: boolean);
				constructor(arg1: string, arg2: number, arg3: number, arg4: boolean);
				constructor(arg1: java.lang.String, arg2: number, arg3: number);
				constructor(arg1: string, arg2: number, arg3: number);
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.logging.FileHandler>;
				close(): void;
				publish(arg1: java.util.logging.LogRecord): void;
			}
			export class ConsoleHandler extends java.util.logging.StreamHandler {
				constructor();
				static class: java.lang.Class<java.util.logging.ConsoleHandler>;
				close(): void;
				publish(arg1: java.util.logging.LogRecord): void;
			}
			export class StreamHandler extends java.util.logging.Handler {
				constructor(arg1: java.io.OutputStream, arg2: java.util.logging.Formatter);
				constructor();
				static class: java.lang.Class<java.util.logging.StreamHandler>;
				close(): void;
				flush(): void;
				isLoggable(arg1: java.util.logging.LogRecord): boolean;
				publish(arg1: java.util.logging.LogRecord): void;
				setEncoding(arg1: java.lang.String): void;
				setEncoding(arg1: string): void;
			}
			export class LogRecord extends java.lang.Object implements java.io.ISerializable {
				constructor(arg1: java.util.logging.Level, arg2: java.lang.String);
				constructor(arg1: java.util.logging.Level, arg2: string);
				static class: java.lang.Class<java.util.logging.LogRecord>;
				ResourceBundleName: string;
				Parameters: native.Array<any>;
				SourceMethodName: string;
				SourceClassName: string;
				Message: string;
				Thrown: java.lang.Throwable;
				ResourceBundle: java.util.ResourceBundle;
				ThreadID: number;
				Level: java.util.logging.Level;
				LoggerName: string;
				getLoggerName(): string;
				getSourceClassName(): string;
				getSourceMethodName(): string;
				getThrown(): java.lang.Throwable;
				getSequenceNumber(): any;
				getThreadID(): number;
				setMessage(arg1: java.lang.String): void;
				setMessage(arg1: string): void;
				setSequenceNumber(arg1: native.Long): void;
				setThreadID(arg1: number): void;
				getMessage(): string;
				getParameters(): native.Array<any>;
				getLevel(): java.util.logging.Level;
				getResourceBundle(): java.util.ResourceBundle;
				getResourceBundleName(): string;
				setLevel(arg1: java.util.logging.Level): void;
				setLoggerName(arg1: java.lang.String): void;
				setLoggerName(arg1: string): void;
				setParameters(arg1: native.Array<any>): void;
				setResourceBundle(arg1: java.util.ResourceBundle): void;
				setResourceBundleName(arg1: java.lang.String): void;
				setResourceBundleName(arg1: string): void;
				setSourceClassName(arg1: java.lang.String): void;
				setSourceClassName(arg1: string): void;
				setSourceMethodName(arg1: java.lang.String): void;
				setSourceMethodName(arg1: string): void;
				setThrown(arg1: java.lang.Throwable): void;
				getMillis(): any;
				setMillis(arg1: native.Long): void;
			}
			export class LoggingPermission extends java.security.BasicPermission {
				constructor(arg1: java.lang.String, arg2: java.lang.String);
				constructor(arg1: string, arg2: string);
				static class: java.lang.Class<java.util.logging.LoggingPermission>;
			}
			export class MemoryHandler extends java.util.logging.Handler {
				constructor(arg1: java.util.logging.Handler, arg2: number, arg3: java.util.logging.Level);
				constructor();
				static class: java.lang.Class<java.util.logging.MemoryHandler>;
				PushLevel: java.util.logging.Level;
				getPushLevel(): java.util.logging.Level;
				setPushLevel(arg1: java.util.logging.Level): void;
				push(): void;
				close(): void;
				flush(): void;
				isLoggable(arg1: java.util.logging.LogRecord): boolean;
				publish(arg1: java.util.logging.LogRecord): void;
			}
			export class Logger extends java.lang.Object {
				static GLOBAL_LOGGER_NAME: java.lang.String;
				static global: java.util.logging.Logger;
				static class: java.lang.Class<java.util.logging.Logger>;
				UseParentHandlers: boolean;
				Filter: java.util.logging.IFilter;
				Parent: java.util.logging.Logger;
				Level: java.util.logging.Level;
				getName(): string;
				getParent(): java.util.logging.Logger;
				static getAnonymousLogger(arg1: java.lang.String): java.util.logging.Logger;
				static getAnonymousLogger(arg1: string): java.util.logging.Logger;
				static getAnonymousLogger(): java.util.logging.Logger;
				static getLogger(arg1: java.lang.String): java.util.logging.Logger;
				static getLogger(arg1: string): java.util.logging.Logger;
				static getLogger(arg1: java.lang.String, arg2: java.lang.String): java.util.logging.Logger;
				static getLogger(arg1: string, arg2: string): java.util.logging.Logger;
				setParent(arg1: java.util.logging.Logger): void;
				log(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.Throwable): void;
				log(arg1: java.util.logging.Level, arg2: string, arg3: java.lang.Throwable): void;
				log(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: native.Array<any>): void;
				log(arg1: java.util.logging.Level, arg2: string, arg3: native.Array<any>): void;
				log(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: any): void;
				log(arg1: java.util.logging.Level, arg2: string, arg3: any): void;
				log(arg1: java.util.logging.Level, arg2: java.lang.String): void;
				log(arg1: java.util.logging.Level, arg2: string): void;
				log(arg1: java.util.logging.LogRecord): void;
				finer(arg1: java.lang.String): void;
				finer(arg1: string): void;
				isLoggable(arg1: java.util.logging.Level): boolean;
				fine(arg1: java.lang.String): void;
				fine(arg1: string): void;
				finest(arg1: java.lang.String): void;
				finest(arg1: string): void;
				addHandler(arg1: java.util.logging.Handler): void;
				config(arg1: java.lang.String): void;
				config(arg1: string): void;
				entering(arg1: java.lang.String, arg2: java.lang.String, arg3: any): void;
				entering(arg1: string, arg2: string, arg3: any): void;
				entering(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<any>): void;
				entering(arg1: string, arg2: string, arg3: native.Array<any>): void;
				entering(arg1: java.lang.String, arg2: java.lang.String): void;
				entering(arg1: string, arg2: string): void;
				exiting(arg1: java.lang.String, arg2: java.lang.String, arg3: any): void;
				exiting(arg1: string, arg2: string, arg3: any): void;
				exiting(arg1: java.lang.String, arg2: java.lang.String): void;
				exiting(arg1: string, arg2: string): void;
				getFilter(): java.util.logging.IFilter;
				static getGlobal(): java.util.logging.Logger;
				getHandlers(): native.Array<java.util.logging.Handler>;
				getLevel(): java.util.logging.Level;
				getResourceBundle(): java.util.ResourceBundle;
				getResourceBundleName(): string;
				getUseParentHandlers(): boolean;
				info(arg1: java.lang.String): void;
				info(arg1: string): void;
				logp(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: any): void;
				logp(arg1: java.util.logging.Level, arg2: string, arg3: string, arg4: string, arg5: any): void;
				logp(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void;
				logp(arg1: java.util.logging.Level, arg2: string, arg3: string, arg4: string): void;
				logp(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.Throwable): void;
				logp(arg1: java.util.logging.Level, arg2: string, arg3: string, arg4: string, arg5: java.lang.Throwable): void;
				logp(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: native.Array<any>): void;
				logp(arg1: java.util.logging.Level, arg2: string, arg3: string, arg4: string, arg5: native.Array<any>): void;
				logrb(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.Throwable): void;
				logrb(arg1: java.util.logging.Level, arg2: string, arg3: string, arg4: string, arg5: string, arg6: java.lang.Throwable): void;
				logrb(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): void;
				logrb(arg1: java.util.logging.Level, arg2: string, arg3: string, arg4: string, arg5: string): void;
				logrb(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: native.Array<any>): void;
				logrb(arg1: java.util.logging.Level, arg2: string, arg3: string, arg4: string, arg5: string, arg6: native.Array<any>): void;
				logrb(arg1: java.util.logging.Level, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: any): void;
				logrb(arg1: java.util.logging.Level, arg2: string, arg3: string, arg4: string, arg5: string, arg6: any): void;
				removeHandler(arg1: java.util.logging.Handler): void;
				setFilter(arg1: java.util.logging.IFilter): void;
				setLevel(arg1: java.util.logging.Level): void;
				setUseParentHandlers(arg1: boolean): void;
				severe(arg1: java.lang.String): void;
				severe(arg1: string): void;
				throwing(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.Throwable): void;
				throwing(arg1: string, arg2: string, arg3: java.lang.Throwable): void;
				warning(arg1: java.lang.String): void;
				warning(arg1: string): void;
			}
			export class SocketHandler extends java.util.logging.StreamHandler {
				constructor(arg1: java.lang.String, arg2: number);
				constructor(arg1: string, arg2: number);
				constructor();
				static class: java.lang.Class<java.util.logging.SocketHandler>;
				close(): void;
				publish(arg1: java.util.logging.LogRecord): void;
			}
			export class SimpleFormatter extends java.util.logging.Formatter {
				constructor();
				static class: java.lang.Class<java.util.logging.SimpleFormatter>;
				format(arg1: java.util.logging.LogRecord): string;
			}
			export class Filter implements java.util.logging.IFilter {
				constructor(implementation: java.util.logging.IFilter);
				isLoggable(arg1: java.util.logging.LogRecord): boolean;
			}
			export class ErrorManager extends java.lang.Object {
				constructor();
				static GENERIC_FAILURE: number;
				static WRITE_FAILURE: number;
				static FLUSH_FAILURE: number;
				static CLOSE_FAILURE: number;
				static OPEN_FAILURE: number;
				static FORMAT_FAILURE: number;
				static class: java.lang.Class<java.util.logging.ErrorManager>;
				error(arg1: java.lang.String, arg2: java.lang.Exception, arg3: number): void;
				error(arg1: string, arg2: java.lang.Exception, arg3: number): void;
			}
			export interface ILoggingMXBean {
				getLoggerLevel(arg1: string): string;
				getParentLoggerName(arg1: string): string;
				setLoggerLevel(arg1: string, arg2: string): void;
				getLoggerNames(): java.util.IList<string>;
			}
			export class Level extends java.lang.Object implements java.io.ISerializable {
				static OFF: java.util.logging.Level;
				static SEVERE: java.util.logging.Level;
				static WARNING: java.util.logging.Level;
				static INFO: java.util.logging.Level;
				static CONFIG: java.util.logging.Level;
				static FINE: java.util.logging.Level;
				static FINER: java.util.logging.Level;
				static FINEST: java.util.logging.Level;
				static ALL: java.util.logging.Level;
				static class: java.lang.Class<java.util.logging.Level>;
				hashCode(): number;
				equals(arg1: any): boolean;
				toString(): string;
				getName(): string;
				intValue(): number;
				static parse(arg1: java.lang.String): java.util.logging.Level;
				static parse(arg1: string): java.util.logging.Level;
				getResourceBundleName(): string;
				getLocalizedName(): string;
			}
			export class Handler extends java.lang.Object {
				static class: java.lang.Class<java.util.logging.Handler>;
				Filter: java.util.logging.IFilter;
				ErrorManager: java.util.logging.ErrorManager;
				Formatter: java.util.logging.Formatter;
				Encoding: string;
				Level: java.util.logging.Level;
				close(): void;
				flush(): void;
				getEncoding(): string;
				isLoggable(arg1: java.util.logging.LogRecord): boolean;
				getFilter(): java.util.logging.IFilter;
				getLevel(): java.util.logging.Level;
				publish(arg1: java.util.logging.LogRecord): void;
				setFilter(arg1: java.util.logging.IFilter): void;
				setLevel(arg1: java.util.logging.Level): void;
				getErrorManager(): java.util.logging.ErrorManager;
				getFormatter(): java.util.logging.Formatter;
				setEncoding(arg1: java.lang.String): void;
				setEncoding(arg1: string): void;
				setErrorManager(arg1: java.util.logging.ErrorManager): void;
				setFormatter(arg1: java.util.logging.Formatter): void;
			}
			export class LoggingMXBean implements java.util.logging.ILoggingMXBean {
				constructor(implementation: java.util.logging.ILoggingMXBean);
				getLoggerLevel(arg1: java.lang.String): string;
				getLoggerLevel(arg1: string): string;
				getParentLoggerName(arg1: java.lang.String): string;
				getParentLoggerName(arg1: string): string;
				setLoggerLevel(arg1: java.lang.String, arg2: java.lang.String): void;
				setLoggerLevel(arg1: string, arg2: string): void;
				getLoggerNames(): java.util.IList<string>;
			}
		}
		export interface IDeque<E> extends java.util.IQueue<E> {
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			size(): number;
			iterator(): java.util.IIterator<E>;
			pop(): E;
			push(arg1: E): void;
			remove(): E;
			remove(arg1: any): boolean;
			poll(): E;
			peek(): E;
			getFirst(): E;
			getLast(): E;
			removeFirst(): E;
			removeLast(): E;
			addFirst(arg1: E): void;
			addLast(arg1: E): void;
			descendingIterator(): java.util.IIterator<E>;
			element(): E;
			offer(arg1: E): boolean;
			offerFirst(arg1: E): boolean;
			offerLast(arg1: E): boolean;
			peekFirst(): E;
			peekLast(): E;
			pollFirst(): E;
			pollLast(): E;
			removeFirstOccurrence(arg1: any): boolean;
			removeLastOccurrence(arg1: any): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			isEmpty(): boolean;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class StringTokenizer extends java.lang.Object implements java.util.IEnumeration<any> {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: boolean);
			constructor(arg1: string, arg2: string, arg3: boolean);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.StringTokenizer>;
			hasMoreElements(): boolean;
			nextElement(): any;
			countTokens(): number;
			hasMoreTokens(): boolean;
			nextToken(arg1: java.lang.String): string;
			nextToken(arg1: string): string;
			nextToken(): string;
		}
		export class NoSuchElementException extends java.lang.RuntimeException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.NoSuchElementException>;
		}
		export class EventListenerProxy<T extends java.util.IEventListener> extends java.lang.Object implements java.util.IEventListener {
			constructor(arg1: T);
			static class: java.lang.Class<java.util.EventListenerProxy<any>>;
			getListener(): T;
		}
		export class PropertyPermission extends java.security.BasicPermission {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.util.PropertyPermission>;
			hashCode(): number;
			equals(arg1: any): boolean;
			getActions(): string;
			implies(arg1: java.security.Permission): boolean;
			newPermissionCollection(): java.security.PermissionCollection;
		}
		export class MissingFormatArgumentException extends java.util.IllegalFormatException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.MissingFormatArgumentException>;
			getFormatSpecifier(): string;
			getMessage(): string;
		}
		export class Vector<E> extends java.util.AbstractList<E> implements java.util.IList<E>, java.util.IRandomAccess, java.lang.ICloneable, java.io.ISerializable {
			constructor(arg1: java.util.ICollection<any>);
			constructor(arg1: number);
			constructor();
			constructor(arg1: number, arg2: number);
			static class: java.lang.Class<java.util.Vector<any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			toString(): string;
			add(arg1: E): boolean;
			add(arg1: number, arg2: E): void;
			contains(arg1: any): boolean;
			get(arg1: number): E;
			indexOf(arg1: any): number;
			indexOf(arg1: any, arg2: number): number;
			isEmpty(): boolean;
			lastIndexOf(arg1: any, arg2: number): number;
			lastIndexOf(arg1: any): number;
			size(): number;
			subList(arg1: number, arg2: number): java.util.IList<E>;
			toArray(): native.Array<any>;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			addAll(arg1: number, arg2: java.util.ICollection<any>): boolean;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			addElement(arg1: E): void;
			elementAt(arg1: number): E;
			remove(arg1: any): boolean;
			remove(arg1: number): E;
			elements(): java.util.IEnumeration<E>;
			clear(): void;
			set(arg1: number, arg2: E): E;
			capacity(): number;
			ensureCapacity(arg1: number): void;
			trimToSize(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			copyInto(arg1: native.Array<any>): void;
			firstElement(): E;
			insertElementAt(arg1: E, arg2: number): void;
			lastElement(): E;
			listIterator(arg1: number): java.util.IListIterator<E>;
			listIterator(): java.util.IListIterator<E>;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			removeAllElements(): void;
			removeElement(arg1: any): boolean;
			removeElementAt(arg1: number): void;
			retainAll(arg1: java.util.ICollection<any>): boolean;
			setElementAt(arg1: E, arg2: number): void;
			setSize(arg1: number): void;
		}
		export class PropertyResourceBundle extends java.util.ResourceBundle {
			constructor(arg1: java.io.InputStream);
			constructor(arg1: java.io.Reader);
			static class: java.lang.Class<java.util.PropertyResourceBundle>;
			getKeys(): java.util.IEnumeration<string>;
			handleGetObject(arg1: java.lang.String): any;
			handleGetObject(arg1: string): any;
		}
		export class EmptyStackException extends java.lang.RuntimeException {
			constructor();
			static class: java.lang.Class<java.util.EmptyStackException>;
		}
		export class Scanner extends java.lang.Object implements java.util.IIterator<string>, java.io.ICloseable {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.nio.channels.IReadableByteChannel);
			constructor(arg1: java.nio.channels.IReadableByteChannel, arg2: java.lang.String);
			constructor(arg1: java.nio.channels.IReadableByteChannel, arg2: string);
			constructor(arg1: java.io.InputStream, arg2: java.lang.String);
			constructor(arg1: java.io.InputStream, arg2: string);
			constructor(arg1: java.io.InputStream);
			constructor(arg1: java.lang.IReadable);
			constructor(arg1: java.io.File, arg2: java.lang.String);
			constructor(arg1: java.io.File, arg2: string);
			constructor(arg1: java.io.File);
			static class: java.lang.Class<java.util.Scanner>;
			ioException(): java.io.IOException;
			delimiter(): java.util.regex.Pattern;
			findInLine(arg1: java.lang.String): string;
			findInLine(arg1: string): string;
			findInLine(arg1: java.util.regex.Pattern): string;
			findWithinHorizon(arg1: java.lang.String, arg2: number): string;
			findWithinHorizon(arg1: string, arg2: number): string;
			findWithinHorizon(arg1: java.util.regex.Pattern, arg2: number): string;
			hasNextBigDecimal(): boolean;
			hasNextBigInteger(arg1: number): boolean;
			hasNextBigInteger(): boolean;
			hasNextBoolean(): boolean;
			hasNextByte(): boolean;
			hasNextByte(arg1: number): boolean;
			hasNextDouble(): boolean;
			hasNextFloat(): boolean;
			hasNextInt(): boolean;
			hasNextInt(arg1: number): boolean;
			hasNextLine(): boolean;
			hasNextLong(arg1: number): boolean;
			hasNextLong(): boolean;
			hasNextShort(arg1: number): boolean;
			hasNextShort(): boolean;
			nextBigDecimal(): java.math.BigDecimal;
			nextBigInteger(arg1: number): java.math.BigInteger;
			nextBigInteger(): java.math.BigInteger;
			nextByte(arg1: number): number;
			nextByte(): number;
			nextLine(): string;
			nextShort(arg1: number): number;
			nextShort(): number;
			radix(): number;
			useDelimiter(arg1: java.util.regex.Pattern): java.util.Scanner;
			useDelimiter(arg1: java.lang.String): java.util.Scanner;
			useDelimiter(arg1: string): java.util.Scanner;
			useLocale(arg1: java.util.Locale): java.util.Scanner;
			useRadix(arg1: number): java.util.Scanner;
			toString(): string;
			hasNext(arg1: java.util.regex.Pattern): boolean;
			hasNext(arg1: java.lang.String): boolean;
			hasNext(arg1: string): boolean;
			hasNext(): boolean;
			next(arg1: java.util.regex.Pattern): string;
			next(): any;
			next(arg1: java.lang.String): string;
			next(arg1: string): string;
			remove(): void;
			close(): void;
			reset(): java.util.Scanner;
			skip(arg1: java.lang.String): java.util.Scanner;
			skip(arg1: string): java.util.Scanner;
			skip(arg1: java.util.regex.Pattern): java.util.Scanner;
			nextInt(): number;
			nextInt(arg1: number): number;
			locale(): java.util.Locale;
			nextDouble(): any;
			match(): java.util.regex.IMatchResult;
			nextBoolean(): boolean;
			nextFloat(): number;
			nextLong(): any;
			nextLong(arg1: number): any;
		}
		export class NavigableMap<K, V> implements java.util.ISortedMap<K, V>, java.util.INavigableMap<K, V> {
			constructor(implementation: java.util.INavigableMap<K, V>);
			ceilingKey(arg1: K): K;
			descendingKeySet(): java.util.INavigableSet<K>;
			descendingMap(): java.util.INavigableMap<K, V>;
			floorKey(arg1: K): K;
			headMap(arg1: K, arg2: boolean): java.util.INavigableMap<K, V>;
			headMap(arg1: K): java.util.ISortedMap<K, V>;
			higherKey(arg1: K): K;
			lowerKey(arg1: K): K;
			navigableKeySet(): java.util.INavigableSet<K>;
			pollFirstEntry(): java.util.Map.IEntry<K, V>;
			pollLastEntry(): java.util.Map.IEntry<K, V>;
			subMap(arg1: K, arg2: boolean, arg3: K, arg4: boolean): java.util.INavigableMap<K, V>;
			subMap(arg1: K, arg2: K): java.util.ISortedMap<K, V>;
			tailMap(arg1: K): java.util.ISortedMap<K, V>;
			tailMap(arg1: K, arg2: boolean): java.util.INavigableMap<K, V>;
			ceilingEntry(arg1: K): java.util.Map.IEntry<K, V>;
			firstEntry(): java.util.Map.IEntry<K, V>;
			floorEntry(arg1: K): java.util.Map.IEntry<K, V>;
			higherEntry(arg1: K): java.util.Map.IEntry<K, V>;
			lastEntry(): java.util.Map.IEntry<K, V>;
			lowerEntry(arg1: K): java.util.Map.IEntry<K, V>;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			values(): java.util.ICollection<V>;
			keySet(): java.util.ISet<K>;
			comparator(): java.util.IComparator<any>;
			firstKey(): K;
			lastKey(): K;
			hashCode(): number;
			equals(arg1: any): boolean;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			remove(arg1: any): V;
			clear(): void;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export interface ISortedSet<E> extends java.util.ISet<E> {
			first(): E;
			last(): E;
			comparator(): java.util.IComparator<any>;
			headSet(arg1: E): java.util.ISortedSet<E>;
			subSet(arg1: E, arg2: E): java.util.ISortedSet<E>;
			tailSet(arg1: E): java.util.ISortedSet<E>;
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class IllegalFormatCodePointException extends java.util.IllegalFormatException {
			constructor(arg1: number);
			static class: java.lang.Class<java.util.IllegalFormatCodePointException>;
			getCodePoint(): number;
			getMessage(): string;
		}
		export class SortedMap<K, V> implements java.util.IMap<K, V>, java.util.ISortedMap<K, V> {
			constructor(implementation: java.util.ISortedMap<K, V>);
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			values(): java.util.ICollection<V>;
			keySet(): java.util.ISet<K>;
			comparator(): java.util.IComparator<any>;
			firstKey(): K;
			headMap(arg1: K): java.util.ISortedMap<K, V>;
			lastKey(): K;
			subMap(arg1: K, arg2: K): java.util.ISortedMap<K, V>;
			tailMap(arg1: K): java.util.ISortedMap<K, V>;
			hashCode(): number;
			equals(arg1: any): boolean;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			remove(arg1: any): V;
			clear(): void;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export class Observer implements java.util.IObserver {
			constructor(implementation: java.util.IObserver);
			update(arg1: java.util.Observable, arg2: any): void;
		}
		export interface IListIterator<E> extends java.util.IIterator<E> {
			add(arg1: E): void;
			hasNext(): boolean;
			next(): E;
			remove(): void;
			set(arg1: E): void;
			hasPrevious(): boolean;
			nextIndex(): number;
			previous(): E;
			previousIndex(): number;
		}
		export class GregorianCalendar extends java.util.Calendar {
			constructor(arg1: java.util.Locale);
			constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number);
			constructor(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number);
			constructor();
			constructor(arg1: java.util.TimeZone);
			constructor(arg1: number, arg2: number, arg3: number);
			constructor(arg1: java.util.TimeZone, arg2: java.util.Locale);
			static BC: number;
			static AD: number;
			static class: java.lang.Class<java.util.GregorianCalendar>;
			GregorianChange: java.util.Date;
			TimeZone: java.util.TimeZone;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			add(arg1: number, arg2: number): void;
			getTimeZone(): java.util.TimeZone;
			setTimeZone(arg1: java.util.TimeZone): void;
			isLeapYear(arg1: number): boolean;
			getMaximum(arg1: number): number;
			getMinimum(arg1: number): number;
			getLeastMaximum(arg1: number): number;
			getWeekYear(): number;
			isWeekDateSupported(): boolean;
			getActualMaximum(arg1: number): number;
			getActualMinimum(arg1: number): number;
			getGreatestMinimum(arg1: number): number;
			getWeeksInWeekYear(): number;
			roll(arg1: number, arg2: boolean): void;
			roll(arg1: number, arg2: number): void;
			setWeekDate(arg1: number, arg2: number, arg3: number): void;
			getGregorianChange(): java.util.Date;
			setGregorianChange(arg1: java.util.Date): void;
		}
		export class EnumSet<E> extends java.util.AbstractSet<E> implements java.lang.ICloneable, java.io.ISerializable {
			static class: java.lang.Class<java.util.EnumSet<any>>;
			static allOf<E>(arg1: java.lang.Class<E>): java.util.EnumSet<E>;
			static complementOf<E>(arg1: java.util.EnumSet<E>): java.util.EnumSet<E>;
			static noneOf<E>(arg1: java.lang.Class<E>): java.util.EnumSet<E>;
			clone(): java.util.EnumSet<E>;
			static copyOf<E>(arg1: java.util.ICollection<E>): java.util.EnumSet<E>;
			static copyOf<E>(arg1: java.util.EnumSet<E>): java.util.EnumSet<E>;
			static of<E>(arg1: E, arg2: native.Array<E>): java.util.EnumSet<E>;
			static of<E>(arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): java.util.EnumSet<E>;
			static of<E>(arg1: E, arg2: E): java.util.EnumSet<E>;
			static of<E>(arg1: E, arg2: E, arg3: E, arg4: E): java.util.EnumSet<E>;
			static of<E>(arg1: E, arg2: E, arg3: E): java.util.EnumSet<E>;
			static of<E>(arg1: E): java.util.EnumSet<E>;
			static range<E>(arg1: E, arg2: E): java.util.EnumSet<E>;
		}
		export class AbstractCollection<E> extends java.lang.Object implements java.util.ICollection<E> {
			static class: java.lang.Class<java.util.AbstractCollection<any>>;
			toString(): string;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray(): native.Array<any>;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
		}
		export module prefs {
			export interface IPreferenceChangeListener extends java.util.IEventListener {
				preferenceChange(arg1: java.util.prefs.PreferenceChangeEvent): void;
			}
			export class AbstractPreferences extends java.util.prefs.Preferences {
				static class: java.lang.Class<java.util.prefs.AbstractPreferences>;
				absolutePath(): string;
				addNodeChangeListener(arg1: java.util.prefs.INodeChangeListener): void;
				addPreferenceChangeListener(arg1: java.util.prefs.IPreferenceChangeListener): void;
				childrenNames(): native.Array<java.lang.String>;
				exportNode(arg1: java.io.OutputStream): void;
				exportSubtree(arg1: java.io.OutputStream): void;
				getByteArray(arg1: java.lang.String, arg2: native.Array<native.Byte>): native.Array<native.Byte>;
				getByteArray(arg1: string, arg2: native.Array<native.Byte>): native.Array<native.Byte>;
				isUserNode(): boolean;
				putByteArray(arg1: java.lang.String, arg2: native.Array<native.Byte>): void;
				putByteArray(arg1: string, arg2: native.Array<native.Byte>): void;
				removeNode(): void;
				removeNodeChangeListener(arg1: java.util.prefs.INodeChangeListener): void;
				removePreferenceChangeListener(arg1: java.util.prefs.IPreferenceChangeListener): void;
				toString(): string;
				get(arg1: java.lang.String, arg2: java.lang.String): string;
				get(arg1: string, arg2: string): string;
				name(): string;
				put(arg1: java.lang.String, arg2: java.lang.String): void;
				put(arg1: string, arg2: string): void;
				parent(): java.util.prefs.Preferences;
				remove(arg1: java.lang.String): void;
				remove(arg1: string): void;
				clear(): void;
				flush(): void;
				keys(): native.Array<java.lang.String>;
				getBoolean(arg1: java.lang.String, arg2: boolean): boolean;
				getBoolean(arg1: string, arg2: boolean): boolean;
				getDouble(arg1: java.lang.String, arg2: native.Double): any;
				getDouble(arg1: string, arg2: number): any;
				getFloat(arg1: java.lang.String, arg2: native.Float): number;
				getFloat(arg1: string, arg2: native.Float): number;
				getInt(arg1: java.lang.String, arg2: number): number;
				getInt(arg1: string, arg2: number): number;
				getLong(arg1: java.lang.String, arg2: native.Long): any;
				getLong(arg1: string, arg2: native.Long): any;
				sync(): void;
				putBoolean(arg1: java.lang.String, arg2: boolean): void;
				putBoolean(arg1: string, arg2: boolean): void;
				putDouble(arg1: java.lang.String, arg2: native.Double): void;
				putDouble(arg1: string, arg2: number): void;
				putFloat(arg1: java.lang.String, arg2: native.Float): void;
				putFloat(arg1: string, arg2: native.Float): void;
				putInt(arg1: java.lang.String, arg2: number): void;
				putInt(arg1: string, arg2: number): void;
				putLong(arg1: java.lang.String, arg2: native.Long): void;
				putLong(arg1: string, arg2: native.Long): void;
				node(arg1: java.lang.String): java.util.prefs.Preferences;
				node(arg1: string): java.util.prefs.Preferences;
				nodeExists(arg1: java.lang.String): boolean;
				nodeExists(arg1: string): boolean;
			}
			export interface IPreferencesFactory {
				systemRoot(): java.util.prefs.Preferences;
				userRoot(): java.util.prefs.Preferences;
			}
			export class NodeChangeListener implements java.util.IEventListener, java.util.prefs.INodeChangeListener {
				constructor(implementation: java.util.prefs.INodeChangeListener);
				childAdded(arg1: java.util.prefs.NodeChangeEvent): void;
				childRemoved(arg1: java.util.prefs.NodeChangeEvent): void;
			}
			export class Preferences extends java.lang.Object {
				static MAX_KEY_LENGTH: number;
				static MAX_VALUE_LENGTH: number;
				static MAX_NAME_LENGTH: number;
				static class: java.lang.Class<java.util.prefs.Preferences>;
				absolutePath(): string;
				addNodeChangeListener(arg1: java.util.prefs.INodeChangeListener): void;
				addPreferenceChangeListener(arg1: java.util.prefs.IPreferenceChangeListener): void;
				childrenNames(): native.Array<java.lang.String>;
				exportNode(arg1: java.io.OutputStream): void;
				exportSubtree(arg1: java.io.OutputStream): void;
				getByteArray(arg1: java.lang.String, arg2: native.Array<native.Byte>): native.Array<native.Byte>;
				getByteArray(arg1: string, arg2: native.Array<native.Byte>): native.Array<native.Byte>;
				static importPreferences(arg1: java.io.InputStream): void;
				isUserNode(): boolean;
				putByteArray(arg1: java.lang.String, arg2: native.Array<native.Byte>): void;
				putByteArray(arg1: string, arg2: native.Array<native.Byte>): void;
				removeNode(): void;
				removeNodeChangeListener(arg1: java.util.prefs.INodeChangeListener): void;
				removePreferenceChangeListener(arg1: java.util.prefs.IPreferenceChangeListener): void;
				static systemNodeForPackage(arg1: java.lang.Class<any>): java.util.prefs.Preferences;
				static systemRoot(): java.util.prefs.Preferences;
				static userNodeForPackage(arg1: java.lang.Class<any>): java.util.prefs.Preferences;
				toString(): string;
				get(arg1: java.lang.String, arg2: java.lang.String): string;
				get(arg1: string, arg2: string): string;
				name(): string;
				put(arg1: java.lang.String, arg2: java.lang.String): void;
				put(arg1: string, arg2: string): void;
				parent(): java.util.prefs.Preferences;
				remove(arg1: java.lang.String): void;
				remove(arg1: string): void;
				clear(): void;
				flush(): void;
				keys(): native.Array<java.lang.String>;
				getBoolean(arg1: java.lang.String, arg2: boolean): boolean;
				getBoolean(arg1: string, arg2: boolean): boolean;
				getDouble(arg1: java.lang.String, arg2: native.Double): any;
				getDouble(arg1: string, arg2: number): any;
				getFloat(arg1: java.lang.String, arg2: native.Float): number;
				getFloat(arg1: string, arg2: native.Float): number;
				getInt(arg1: java.lang.String, arg2: number): number;
				getInt(arg1: string, arg2: number): number;
				getLong(arg1: java.lang.String, arg2: native.Long): any;
				getLong(arg1: string, arg2: native.Long): any;
				sync(): void;
				putBoolean(arg1: java.lang.String, arg2: boolean): void;
				putBoolean(arg1: string, arg2: boolean): void;
				putDouble(arg1: java.lang.String, arg2: native.Double): void;
				putDouble(arg1: string, arg2: number): void;
				putFloat(arg1: java.lang.String, arg2: native.Float): void;
				putFloat(arg1: string, arg2: native.Float): void;
				putInt(arg1: java.lang.String, arg2: number): void;
				putInt(arg1: string, arg2: number): void;
				putLong(arg1: java.lang.String, arg2: native.Long): void;
				putLong(arg1: string, arg2: native.Long): void;
				node(arg1: java.lang.String): java.util.prefs.Preferences;
				node(arg1: string): java.util.prefs.Preferences;
				nodeExists(arg1: java.lang.String): boolean;
				nodeExists(arg1: string): boolean;
				static userRoot(): java.util.prefs.Preferences;
			}
			export class BackingStoreException extends java.lang.Exception {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.Throwable);
				static class: java.lang.Class<java.util.prefs.BackingStoreException>;
			}
			export class PreferenceChangeEvent extends java.util.EventObject {
				constructor(arg1: java.util.prefs.Preferences, arg2: java.lang.String, arg3: java.lang.String);
				constructor(arg1: java.util.prefs.Preferences, arg2: string, arg3: string);
				static class: java.lang.Class<java.util.prefs.PreferenceChangeEvent>;
				getKey(): string;
				getNewValue(): string;
				getNode(): java.util.prefs.Preferences;
			}
			export class PreferencesFactory implements java.util.prefs.IPreferencesFactory {
				constructor(implementation: java.util.prefs.IPreferencesFactory);
				systemRoot(): java.util.prefs.Preferences;
				userRoot(): java.util.prefs.Preferences;
			}
			export interface INodeChangeListener extends java.util.IEventListener {
				childAdded(arg1: java.util.prefs.NodeChangeEvent): void;
				childRemoved(arg1: java.util.prefs.NodeChangeEvent): void;
			}
			export class NodeChangeEvent extends java.util.EventObject {
				constructor(arg1: java.util.prefs.Preferences, arg2: java.util.prefs.Preferences);
				static class: java.lang.Class<java.util.prefs.NodeChangeEvent>;
				getParent(): java.util.prefs.Preferences;
				getChild(): java.util.prefs.Preferences;
			}
			export class InvalidPreferencesFormatException extends java.lang.Exception {
				constructor(arg1: java.lang.Throwable);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				static class: java.lang.Class<java.util.prefs.InvalidPreferencesFormatException>;
			}
			export class PreferenceChangeListener implements java.util.IEventListener, java.util.prefs.IPreferenceChangeListener {
				constructor(implementation: java.util.prefs.IPreferenceChangeListener);
				preferenceChange(arg1: java.util.prefs.PreferenceChangeEvent): void;
			}
		}
		export class ServiceConfigurationError extends java.lang.Error {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			static class: java.lang.Class<java.util.ServiceConfigurationError>;
		}
		export class IdentityHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.IMap<K, V>, java.io.ISerializable, java.lang.ICloneable {
			constructor(arg1: java.util.IMap<any, any>);
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<java.util.IdentityHashMap<any, any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			clear(): void;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export interface IList<E> extends java.util.ICollection<E> {
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			add(arg1: number, arg2: E): void;
			contains(arg1: any): boolean;
			get(arg1: number): E;
			indexOf(arg1: any): number;
			isEmpty(): boolean;
			lastIndexOf(arg1: any): number;
			size(): number;
			subList(arg1: number, arg2: number): java.util.IList<E>;
			toArray(): native.Array<any>;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			addAll(arg1: number, arg2: java.util.ICollection<any>): boolean;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: number): E;
			remove(arg1: any): boolean;
			clear(): void;
			set(arg1: number, arg2: E): E;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			listIterator(arg1: number): java.util.IListIterator<E>;
			listIterator(): java.util.IListIterator<E>;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class TimeZone extends java.lang.Object implements java.io.ISerializable, java.lang.ICloneable {
			constructor();
			static SHORT: number;
			static LONG: number;
			static class: java.lang.Class<java.util.TimeZone>;
			RawOffset: number;
			ID: string;
			clone(): any;
			static getDefault(): java.util.TimeZone;
			getOffset(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): number;
			getOffset(arg1: native.Long): number;
			getDisplayName(arg1: java.util.Locale): string;
			getDisplayName(arg1: boolean, arg2: number): string;
			getDisplayName(): string;
			getDisplayName(arg1: boolean, arg2: number, arg3: java.util.Locale): string;
			getID(): string;
			static setDefault(arg1: java.util.TimeZone): void;
			static getTimeZone(arg1: java.lang.String): java.util.TimeZone;
			static getTimeZone(arg1: string): java.util.TimeZone;
			getRawOffset(): number;
			static getAvailableIDs(arg1: number): native.Array<java.lang.String>;
			static getAvailableIDs(): native.Array<java.lang.String>;
			getDSTSavings(): number;
			hasSameRules(arg1: java.util.TimeZone): boolean;
			inDaylightTime(arg1: java.util.Date): boolean;
			observesDaylightTime(): boolean;
			setID(arg1: java.lang.String): void;
			setID(arg1: string): void;
			setRawOffset(arg1: number): void;
			useDaylightTime(): boolean;
		}
		export class List<E> implements java.util.ICollection<E>, java.util.IList<E> {
			constructor(implementation: java.util.IList<E>);
			hashCode(): number;
			equals(arg1: any): boolean;
			add(arg1: E): boolean;
			add(arg1: number, arg2: E): void;
			contains(arg1: any): boolean;
			get(arg1: number): E;
			indexOf(arg1: any): number;
			isEmpty(): boolean;
			lastIndexOf(arg1: any): number;
			size(): number;
			subList(arg1: number, arg2: number): java.util.IList<E>;
			toArray(): native.Array<any>;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			addAll(arg1: number, arg2: java.util.ICollection<any>): boolean;
			addAll(arg1: java.util.ICollection<any>): boolean;
			iterator(): java.util.IIterator<E>;
			remove(arg1: number): E;
			remove(arg1: any): boolean;
			clear(): void;
			set(arg1: number, arg2: E): E;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			listIterator(arg1: number): java.util.IListIterator<E>;
			listIterator(): java.util.IListIterator<E>;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class HashSet<E> extends java.util.AbstractSet<E> implements java.util.ISet<E>, java.lang.ICloneable, java.io.ISerializable {
			constructor();
			constructor(arg1: number, arg2: native.Float);
			constructor(arg1: number);
			constructor(arg1: java.util.ICollection<any>);
			static class: java.lang.Class<java.util.HashSet<any>>;
			clone(): any;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			iterator(): java.util.IIterator<E>;
			remove(arg1: any): boolean;
			clear(): void;
			hashCode(): number;
			equals(arg1: any): boolean;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			toArray(): native.Array<any>;
			addAll(arg1: java.util.ICollection<any>): boolean;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class ListIterator<E> implements java.util.IIterator<E>, java.util.IListIterator<E> {
			constructor(implementation: java.util.IListIterator<E>);
			add(arg1: E): void;
			hasNext(): boolean;
			next(): E;
			remove(): void;
			set(arg1: E): void;
			hasPrevious(): boolean;
			nextIndex(): number;
			previous(): E;
			previousIndex(): number;
		}
		export module zip {
			export class Checksum implements java.util.zip.IChecksum {
				constructor(implementation: java.util.zip.IChecksum);
				getValue(): any;
				reset(): void;
				update(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				update(arg1: number): void;
			}
			export class DeflaterOutputStream extends java.io.FilterOutputStream {
				constructor(arg1: java.io.OutputStream);
				constructor(arg1: java.io.OutputStream, arg2: boolean);
				constructor(arg1: java.io.OutputStream, arg2: java.util.zip.Deflater);
				constructor(arg1: java.io.OutputStream, arg2: java.util.zip.Deflater, arg3: number, arg4: boolean);
				constructor(arg1: java.io.OutputStream, arg2: java.util.zip.Deflater, arg3: number);
				constructor(arg1: java.io.OutputStream, arg2: java.util.zip.Deflater, arg3: boolean);
				static class: java.lang.Class<java.util.zip.DeflaterOutputStream>;
				write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				write(arg1: number): void;
				close(): void;
				flush(): void;
				finish(): void;
				write(arg1: native.Array<native.Byte>): void;
			}
			export class ZipError extends java.lang.InternalError {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.zip.ZipError>;
			}
			export class ZipInputStream extends java.util.zip.InflaterInputStream {
				constructor(arg1: java.io.InputStream, arg2: java.nio.charset.Charset);
				constructor(arg1: java.io.InputStream);
				static class: java.lang.Class<java.util.zip.ZipInputStream>;
				close(): void;
				available(): number;
				read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				skip(arg1: native.Long): any;
				getNextEntry(): java.util.zip.ZipEntry;
				closeEntry(): void;
				read(): number;
				read(arg1: native.Array<native.Byte>): number;
			}
			export class CheckedOutputStream extends java.io.FilterOutputStream {
				constructor(arg1: java.io.OutputStream, arg2: java.util.zip.IChecksum);
				static class: java.lang.Class<java.util.zip.CheckedOutputStream>;
				getChecksum(): java.util.zip.IChecksum;
				write(arg1: number): void;
				write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				write(arg1: native.Array<native.Byte>): void;
			}
			export class DataFormatException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.zip.DataFormatException>;
			}
			export class CRC32 extends java.lang.Object implements java.util.zip.IChecksum {
				constructor();
				static class: java.lang.Class<java.util.zip.CRC32>;
				getValue(): any;
				reset(): void;
				update(arg1: number): void;
				update(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				update(arg1: native.Array<native.Byte>): void;
			}
			export class CheckedInputStream extends java.io.FilterInputStream {
				constructor(arg1: java.io.InputStream, arg2: java.util.zip.IChecksum);
				static class: java.lang.Class<java.util.zip.CheckedInputStream>;
				getChecksum(): java.util.zip.IChecksum;
				read(): number;
				read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				skip(arg1: native.Long): any;
				read(arg1: native.Array<native.Byte>): number;
			}
			export class GZIPInputStream extends java.util.zip.InflaterInputStream {
				constructor(arg1: java.io.InputStream);
				constructor(arg1: java.io.InputStream, arg2: number);
				static GZIP_MAGIC: number;
				static class: java.lang.Class<java.util.zip.GZIPInputStream>;
				close(): void;
				read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				read(): number;
				read(arg1: native.Array<native.Byte>): number;
			}
			export class ZipEntry extends java.lang.Object implements java.lang.ICloneable {
				constructor(arg1: java.util.zip.ZipEntry);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static STORED: number;
				static DEFLATED: number;
				static class: java.lang.Class<java.util.zip.ZipEntry>;
				Extra: native.Array<native.Byte>;
				Method: number;
				Comment: string;
				hashCode(): number;
				clone(): any;
				toString(): string;
				getName(): string;
				getMethod(): number;
				getSize(): any;
				setSize(arg1: native.Long): void;
				isDirectory(): boolean;
				getTime(): any;
				setTime(arg1: native.Long): void;
				getComment(): string;
				getCompressedSize(): any;
				getCrc(): any;
				getExtra(): native.Array<native.Byte>;
				setComment(arg1: java.lang.String): void;
				setComment(arg1: string): void;
				setCompressedSize(arg1: native.Long): void;
				setCrc(arg1: native.Long): void;
				setExtra(arg1: native.Array<native.Byte>): void;
				setMethod(arg1: number): void;
			}
			export class ZipOutputStream extends java.util.zip.DeflaterOutputStream {
				constructor(arg1: java.io.OutputStream);
				constructor(arg1: java.io.OutputStream, arg2: java.nio.charset.Charset);
				static STORED: number;
				static DEFLATED: number;
				static class: java.lang.Class<java.util.zip.ZipOutputStream>;
				putNextEntry(arg1: java.util.zip.ZipEntry): void;
				write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				close(): void;
				setLevel(arg1: number): void;
				finish(): void;
				setComment(arg1: java.lang.String): void;
				setComment(arg1: string): void;
				setMethod(arg1: number): void;
				closeEntry(): void;
				write(arg1: number): void;
				write(arg1: native.Array<native.Byte>): void;
			}
			export class ZipFile extends java.lang.Object implements java.io.ICloseable {
				constructor(arg1: java.io.File, arg2: java.nio.charset.Charset);
				constructor(arg1: java.io.File, arg2: number, arg3: java.nio.charset.Charset);
				constructor(arg1: java.io.File);
				constructor(arg1: java.io.File, arg2: number);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.nio.charset.Charset);
				constructor(arg1: string, arg2: java.nio.charset.Charset);
				static OPEN_READ: number;
				static OPEN_DELETE: number;
				static class: java.lang.Class<java.util.zip.ZipFile>;
				getName(): string;
				size(): number;
				close(): void;
				getEntry(arg1: java.lang.String): java.util.zip.ZipEntry;
				getEntry(arg1: string): java.util.zip.ZipEntry;
				getInputStream(arg1: java.util.zip.ZipEntry): java.io.InputStream;
				entries(): java.util.IEnumeration<any>;
				getComment(): string;
			}
			export interface IChecksum {
				getValue(): any;
				reset(): void;
				update(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				update(arg1: number): void;
			}
			export class InflaterInputStream extends java.io.FilterInputStream {
				constructor(arg1: java.io.InputStream, arg2: java.util.zip.Inflater);
				constructor(arg1: java.io.InputStream, arg2: java.util.zip.Inflater, arg3: number);
				constructor(arg1: java.io.InputStream);
				static class: java.lang.Class<java.util.zip.InflaterInputStream>;
				close(): void;
				mark(arg1: number): void;
				reset(): void;
				available(): number;
				read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				read(): number;
				skip(arg1: native.Long): any;
				markSupported(): boolean;
				read(arg1: native.Array<native.Byte>): number;
			}
			export class Adler32 extends java.lang.Object implements java.util.zip.IChecksum {
				constructor();
				static class: java.lang.Class<java.util.zip.Adler32>;
				getValue(): any;
				reset(): void;
				update(arg1: native.Array<native.Byte>): void;
				update(arg1: number): void;
				update(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			}
			export class DeflaterInputStream extends java.io.FilterInputStream {
				constructor(arg1: java.io.InputStream, arg2: java.util.zip.Deflater);
				constructor(arg1: java.io.InputStream);
				constructor(arg1: java.io.InputStream, arg2: java.util.zip.Deflater, arg3: number);
				static class: java.lang.Class<java.util.zip.DeflaterInputStream>;
				close(): void;
				mark(arg1: number): void;
				reset(): void;
				available(): number;
				read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				read(): number;
				skip(arg1: native.Long): any;
				markSupported(): boolean;
				read(arg1: native.Array<native.Byte>): number;
			}
			export class ZipException extends java.io.IOException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<java.util.zip.ZipException>;
			}
			export class GZIPOutputStream extends java.util.zip.DeflaterOutputStream {
				constructor(arg1: java.io.OutputStream, arg2: boolean);
				constructor(arg1: java.io.OutputStream, arg2: number);
				constructor(arg1: java.io.OutputStream, arg2: number, arg3: boolean);
				constructor(arg1: java.io.OutputStream);
				static class: java.lang.Class<java.util.zip.GZIPOutputStream>;
				write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				finish(): void;
				write(arg1: number): void;
				write(arg1: native.Array<native.Byte>): void;
			}
			export class InflaterOutputStream extends java.io.FilterOutputStream {
				constructor(arg1: java.io.OutputStream, arg2: java.util.zip.Inflater, arg3: number);
				constructor(arg1: java.io.OutputStream);
				constructor(arg1: java.io.OutputStream, arg2: java.util.zip.Inflater);
				static class: java.lang.Class<java.util.zip.InflaterOutputStream>;
				write(arg1: number): void;
				write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				close(): void;
				flush(): void;
				finish(): void;
				write(arg1: native.Array<native.Byte>): void;
			}
			export class Deflater extends java.lang.Object {
				constructor(arg1: number, arg2: boolean);
				constructor(arg1: number);
				constructor();
				static DEFLATED: number;
				static NO_COMPRESSION: number;
				static BEST_SPEED: number;
				static BEST_COMPRESSION: number;
				static DEFAULT_COMPRESSION: number;
				static FILTERED: number;
				static HUFFMAN_ONLY: number;
				static DEFAULT_STRATEGY: number;
				static NO_FLUSH: number;
				static SYNC_FLUSH: number;
				static FULL_FLUSH: number;
				static class: java.lang.Class<java.util.zip.Deflater>;
				setStrategy(arg1: number): void;
				reset(): void;
				setLevel(arg1: number): void;
				finish(): void;
				end(): void;
				finished(): boolean;
				needsInput(): boolean;
				setInput(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				setInput(arg1: native.Array<native.Byte>): void;
				getAdler(): number;
				getBytesRead(): any;
				getBytesWritten(): any;
				getTotalIn(): number;
				getTotalOut(): number;
				setDictionary(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				setDictionary(arg1: native.Array<native.Byte>): void;
				deflate(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: number): number;
				deflate(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				deflate(arg1: native.Array<native.Byte>): number;
			}
			export class Inflater extends java.lang.Object {
				constructor(arg1: boolean);
				constructor();
				static class: java.lang.Class<java.util.zip.Inflater>;
				reset(): void;
				end(): void;
				finished(): boolean;
				getRemaining(): number;
				inflate(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				inflate(arg1: native.Array<native.Byte>): number;
				needsDictionary(): boolean;
				needsInput(): boolean;
				setInput(arg1: native.Array<native.Byte>): void;
				setInput(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				getAdler(): number;
				getBytesRead(): any;
				getBytesWritten(): any;
				getTotalIn(): number;
				getTotalOut(): number;
				setDictionary(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
				setDictionary(arg1: native.Array<native.Byte>): void;
			}
		}
		export class FormatterClosedException extends java.lang.IllegalStateException {
			constructor();
			static class: java.lang.Class<java.util.FormatterClosedException>;
		}
		export class EventObject extends java.lang.Object implements java.io.ISerializable {
			constructor(arg1: any);
			static class: java.lang.Class<java.util.EventObject>;
			toString(): string;
			getSource(): any;
		}
		export class TreeMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.INavigableMap<K, V>, java.lang.ICloneable, java.io.ISerializable {
			constructor(arg1: java.util.IComparator<any>);
			constructor(arg1: java.util.ISortedMap<K, any>);
			constructor(arg1: java.util.IMap<any, any>);
			constructor();
			static class: java.lang.Class<java.util.TreeMap<any, any>>;
			clone(): any;
			get(arg1: any): V;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			clear(): void;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
			ceilingKey(arg1: K): K;
			comparator(): java.util.IComparator<any>;
			descendingKeySet(): java.util.INavigableSet<K>;
			descendingMap(): java.util.INavigableMap<K, V>;
			firstKey(): K;
			floorKey(arg1: K): K;
			headMap(arg1: K, arg2: boolean): java.util.INavigableMap<K, V>;
			headMap(arg1: K): java.util.ISortedMap<K, V>;
			higherKey(arg1: K): K;
			lastKey(): K;
			lowerKey(arg1: K): K;
			navigableKeySet(): java.util.INavigableSet<K>;
			pollFirstEntry(): java.util.Map.IEntry<K, V>;
			pollLastEntry(): java.util.Map.IEntry<K, V>;
			subMap(arg1: K, arg2: boolean, arg3: K, arg4: boolean): java.util.INavigableMap<K, V>;
			subMap(arg1: K, arg2: K): java.util.ISortedMap<K, V>;
			tailMap(arg1: K): java.util.ISortedMap<K, V>;
			tailMap(arg1: K, arg2: boolean): java.util.INavigableMap<K, V>;
			ceilingEntry(arg1: K): java.util.Map.IEntry<K, V>;
			firstEntry(): java.util.Map.IEntry<K, V>;
			floorEntry(arg1: K): java.util.Map.IEntry<K, V>;
			higherEntry(arg1: K): java.util.Map.IEntry<K, V>;
			lastEntry(): java.util.Map.IEntry<K, V>;
			lowerEntry(arg1: K): java.util.Map.IEntry<K, V>;
			hashCode(): number;
			equals(arg1: any): boolean;
			isEmpty(): boolean;
		}
		export class Enumeration<E> implements java.util.IEnumeration<E> {
			constructor(implementation: java.util.IEnumeration<E>);
			hasMoreElements(): boolean;
			nextElement(): E;
		}
		export class Calendar extends java.lang.Object implements java.io.ISerializable, java.lang.ICloneable, java.lang.IComparable<java.util.Calendar> {
			static ERA: number;
			static YEAR: number;
			static MONTH: number;
			static WEEK_OF_YEAR: number;
			static WEEK_OF_MONTH: number;
			static DATE: number;
			static DAY_OF_MONTH: number;
			static DAY_OF_YEAR: number;
			static DAY_OF_WEEK: number;
			static DAY_OF_WEEK_IN_MONTH: number;
			static AM_PM: number;
			static HOUR: number;
			static HOUR_OF_DAY: number;
			static MINUTE: number;
			static SECOND: number;
			static MILLISECOND: number;
			static ZONE_OFFSET: number;
			static DST_OFFSET: number;
			static FIELD_COUNT: number;
			static SUNDAY: number;
			static MONDAY: number;
			static TUESDAY: number;
			static WEDNESDAY: number;
			static THURSDAY: number;
			static FRIDAY: number;
			static SATURDAY: number;
			static JANUARY: number;
			static FEBRUARY: number;
			static MARCH: number;
			static APRIL: number;
			static MAY: number;
			static JUNE: number;
			static JULY: number;
			static AUGUST: number;
			static SEPTEMBER: number;
			static OCTOBER: number;
			static NOVEMBER: number;
			static DECEMBER: number;
			static UNDECIMBER: number;
			static AM: number;
			static PM: number;
			static ALL_STYLES: number;
			static SHORT: number;
			static LONG: number;
			static class: java.lang.Class<java.util.Calendar>;
			FirstDayOfWeek: number;
			Time: java.util.Date;
			TimeZone: java.util.TimeZone;
			MinimalDaysInFirstWeek: number;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): any;
			toString(): string;
			add(arg1: number, arg2: number): void;
			compareTo(arg1: java.util.Calendar): number;
			compareTo(arg1: any): number;
			get(arg1: number): number;
			static getInstance(arg1: java.util.Locale): java.util.Calendar;
			static getInstance(arg1: java.util.TimeZone): java.util.Calendar;
			static getInstance(arg1: java.util.TimeZone, arg2: java.util.Locale): java.util.Calendar;
			static getInstance(): java.util.Calendar;
			isSet(arg1: number): boolean;
			clear(): void;
			clear(arg1: number): void;
			set(arg1: number, arg2: number): void;
			set(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
			set(arg1: number, arg2: number, arg3: number): void;
			set(arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
			after(arg1: any): boolean;
			before(arg1: any): boolean;
			static getAvailableLocales(): native.Array<java.util.Locale>;
			getDisplayName(arg1: number, arg2: number, arg3: java.util.Locale): string;
			getTimeZone(): java.util.TimeZone;
			setTimeZone(arg1: java.util.TimeZone): void;
			getTime(): java.util.Date;
			setTime(arg1: java.util.Date): void;
			getTimeInMillis(): any;
			getDisplayNames(arg1: number, arg2: number, arg3: java.util.Locale): java.util.IMap<string, java.lang.Integer>;
			getMaximum(arg1: number): number;
			getMinimum(arg1: number): number;
			getLeastMaximum(arg1: number): number;
			getWeekYear(): number;
			isLenient(): boolean;
			isWeekDateSupported(): boolean;
			setTimeInMillis(arg1: native.Long): void;
			getFirstDayOfWeek(): number;
			getMinimalDaysInFirstWeek(): number;
			setLenient(arg1: boolean): void;
			getActualMaximum(arg1: number): number;
			getActualMinimum(arg1: number): number;
			getGreatestMinimum(arg1: number): number;
			getWeeksInWeekYear(): number;
			roll(arg1: number, arg2: number): void;
			roll(arg1: number, arg2: boolean): void;
			setFirstDayOfWeek(arg1: number): void;
			setMinimalDaysInFirstWeek(arg1: number): void;
			setWeekDate(arg1: number, arg2: number, arg3: number): void;
		}
		export class Observable extends java.lang.Object {
			constructor();
			static class: java.lang.Class<java.util.Observable>;
			addObserver(arg1: java.util.IObserver): void;
			countObservers(): number;
			deleteObserver(arg1: java.util.IObserver): void;
			deleteObservers(): void;
			hasChanged(): boolean;
			notifyObservers(): void;
			notifyObservers(arg1: any): void;
		}
		export class Formattable implements java.util.IFormattable {
			constructor(implementation: java.util.IFormattable);
			formatTo(arg1: java.util.Formatter, arg2: number, arg3: number, arg4: number): void;
		}
		export class MissingResourceException extends java.lang.RuntimeException {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string);
			static class: java.lang.Class<java.util.MissingResourceException>;
			getKey(): string;
			getClassName(): string;
		}
		export class EnumMap<K, V> extends java.util.AbstractMap<K, V> implements java.io.ISerializable, java.lang.ICloneable {
			constructor(arg1: java.lang.Class<K>);
			constructor(arg1: java.util.EnumMap<K, any>);
			constructor(arg1: java.util.IMap<K, any>);
			static class: java.lang.Class<java.util.EnumMap<any, any>>;
			hashCode(): number;
			equals(arg1: any): boolean;
			clone(): java.util.EnumMap<K, V>;
			get(arg1: any): V;
			size(): number;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			put(arg1: any, arg2: any): any;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			values(): java.util.ICollection<V>;
			remove(arg1: any): V;
			clear(): void;
			keySet(): java.util.ISet<K>;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
		export class FormattableFlags extends java.lang.Object {
			static LEFT_JUSTIFY: number;
			static UPPERCASE: number;
			static ALTERNATE: number;
			static class: java.lang.Class<java.util.FormattableFlags>;
		}
		export interface IEnumeration<E> {
			hasMoreElements(): boolean;
			nextElement(): E;
		}
		export class ArrayDeque<E> extends java.util.AbstractCollection<E> implements java.util.IDeque<E>, java.lang.ICloneable, java.io.ISerializable {
			constructor(arg1: java.util.ICollection<any>);
			constructor(arg1: number);
			constructor();
			static class: java.lang.Class<java.util.ArrayDeque<any>>;
			clone(): java.util.ArrayDeque<E>;
			add(arg1: E): boolean;
			contains(arg1: any): boolean;
			isEmpty(): boolean;
			size(): number;
			toArray(): native.Array<any>;
			toArray<T>(arg1: native.Array<T>): native.Array<T>;
			iterator(): java.util.IIterator<E>;
			pop(): E;
			push(arg1: E): void;
			remove(arg1: any): boolean;
			remove(): E;
			clear(): void;
			poll(): E;
			peek(): E;
			getFirst(): E;
			getLast(): E;
			removeFirst(): E;
			removeLast(): E;
			addFirst(arg1: E): void;
			addLast(arg1: E): void;
			descendingIterator(): java.util.IIterator<E>;
			element(): E;
			offer(arg1: E): boolean;
			offerFirst(arg1: E): boolean;
			offerLast(arg1: E): boolean;
			peekFirst(): E;
			peekLast(): E;
			pollFirst(): E;
			pollLast(): E;
			removeFirstOccurrence(arg1: any): boolean;
			removeLastOccurrence(arg1: any): boolean;
			hashCode(): number;
			equals(arg1: any): boolean;
			addAll(arg1: java.util.ICollection<any>): boolean;
			containsAll(arg1: java.util.ICollection<any>): boolean;
			removeAll(arg1: java.util.ICollection<any>): boolean;
			retainAll(arg1: java.util.ICollection<any>): boolean;
		}
		export class Random extends java.lang.Object implements java.io.ISerializable {
			constructor();
			constructor(arg1: native.Long);
			static class: java.lang.Class<java.util.Random>;
			nextInt(arg1: number): number;
			nextInt(): number;
			nextDouble(): any;
			nextBoolean(): boolean;
			nextBytes(arg1: native.Array<native.Byte>): void;
			nextFloat(): number;
			nextGaussian(): any;
			nextLong(): any;
			setSeed(arg1: native.Long): void;
		}
		export class TooManyListenersException extends java.lang.Exception {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.util.TooManyListenersException>;
		}
		export interface INavigableMap<K, V> extends java.util.ISortedMap<K, V> {
			ceilingKey(arg1: K): K;
			descendingKeySet(): java.util.INavigableSet<K>;
			descendingMap(): java.util.INavigableMap<K, V>;
			floorKey(arg1: K): K;
			headMap(arg1: K, arg2: boolean): java.util.INavigableMap<K, V>;
			headMap(arg1: K): java.util.ISortedMap<K, V>;
			higherKey(arg1: K): K;
			lowerKey(arg1: K): K;
			navigableKeySet(): java.util.INavigableSet<K>;
			pollFirstEntry(): java.util.Map.IEntry<K, V>;
			pollLastEntry(): java.util.Map.IEntry<K, V>;
			subMap(arg1: K, arg2: boolean, arg3: K, arg4: boolean): java.util.INavigableMap<K, V>;
			subMap(arg1: K, arg2: K): java.util.ISortedMap<K, V>;
			tailMap(arg1: K): java.util.ISortedMap<K, V>;
			tailMap(arg1: K, arg2: boolean): java.util.INavigableMap<K, V>;
			ceilingEntry(arg1: K): java.util.Map.IEntry<K, V>;
			firstEntry(): java.util.Map.IEntry<K, V>;
			floorEntry(arg1: K): java.util.Map.IEntry<K, V>;
			higherEntry(arg1: K): java.util.Map.IEntry<K, V>;
			lastEntry(): java.util.Map.IEntry<K, V>;
			lowerEntry(arg1: K): java.util.Map.IEntry<K, V>;
			entrySet(): java.util.ISet<java.util.Map.IEntry<K, V>>;
			values(): java.util.ICollection<V>;
			keySet(): java.util.ISet<K>;
			comparator(): java.util.IComparator<any>;
			firstKey(): K;
			lastKey(): K;
			hashCode(): number;
			equals(arg1: any): boolean;
			get(arg1: any): V;
			isEmpty(): boolean;
			size(): number;
			put(arg1: K, arg2: V): V;
			putAll(arg1: java.util.IMap<any, any>): void;
			remove(arg1: any): V;
			clear(): void;
			containsKey(arg1: any): boolean;
			containsValue(arg1: any): boolean;
		}
	}
	export module io {
		export class ByteArrayOutputStream extends java.io.OutputStream {
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<java.io.ByteArrayOutputStream>;
			toString(arg1: java.lang.String): string;
			toString(arg1: string): string;
			toString(): string;
			toString(arg1: number): string;
			size(): number;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			close(): void;
			reset(): void;
			toByteArray(): native.Array<native.Byte>;
			writeTo(arg1: java.io.OutputStream): void;
			write(arg1: native.Array<native.Byte>): void;
		}
		export class InputStreamReader extends java.io.Reader {
			constructor(arg1: java.io.InputStream, arg2: java.nio.charset.CharsetDecoder);
			constructor(arg1: java.io.InputStream, arg2: java.nio.charset.Charset);
			constructor(arg1: java.io.InputStream, arg2: java.lang.String);
			constructor(arg1: java.io.InputStream, arg2: string);
			constructor(arg1: java.io.InputStream);
			static class: java.lang.Class<java.io.InputStreamReader>;
			close(): void;
			read(): number;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			getEncoding(): string;
			ready(): boolean;
			read(arg1: java.nio.CharBuffer): number;
			read(arg1: native.Array<string>): number;
		}
		export class Reader extends java.lang.Object implements java.lang.IReadable, java.io.ICloseable {
			static class: java.lang.Class<java.io.Reader>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			read(arg1: java.nio.CharBuffer): number;
			read(): number;
			read(arg1: native.Array<string>): number;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			ready(): boolean;
		}
		export class ObjectInput implements java.io.IDataInput, java.io.IObjectInput {
			constructor(implementation: java.io.IObjectInput);
			readObject(): any;
			close(): void;
			available(): number;
			read(): number;
			read(arg1: native.Array<native.Byte>): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			readLine(): string;
			readInt(): number;
			readChar(): string;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			readUTF(): string;
			readFloat(): number;
			readFully(arg1: native.Array<native.Byte>): void;
			readFully(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			readBoolean(): boolean;
			readDouble(): any;
			readUnsignedByte(): number;
			readUnsignedShort(): number;
			skipBytes(arg1: number): number;
		}
		export class SerializablePermission extends java.security.BasicPermission {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.io.SerializablePermission>;
		}
		export class SyncFailedException extends java.io.IOException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.SyncFailedException>;
		}
		export class ObjectOutput implements java.io.IDataOutput, java.io.IObjectOutput {
			constructor(implementation: java.io.IObjectOutput);
			write(arg1: number): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: native.Array<native.Byte>): void;
			writeObject(arg1: any): void;
			close(): void;
			flush(): void;
			writeInt(arg1: number): void;
			writeBytes(arg1: string): void;
			writeChar(arg1: number): void;
			writeByte(arg1: number): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: number): void;
			writeUTF(arg1: string): void;
			writeFloat(arg1: native.Float): void;
			writeBoolean(arg1: boolean): void;
			writeChars(arg1: string): void;
			writeDouble(arg1: number): void;
		}
		export class InputStream extends java.lang.Object implements java.io.ICloseable {
			constructor();
			static class: java.lang.Class<java.io.InputStream>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>): number;
			read(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
		}
		export interface ISerializable {
		}
		export interface IObjectInput extends java.io.IDataInput {
			readObject(): any;
			close(): void;
			available(): number;
			read(): number;
			read(arg1: native.Array<native.Byte>): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			readLine(): string;
			readInt(): number;
			readChar(): string;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			readUTF(): string;
			readFloat(): number;
			readFully(arg1: native.Array<native.Byte>): void;
			readFully(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			readBoolean(): boolean;
			readDouble(): any;
			readUnsignedByte(): number;
			readUnsignedShort(): number;
			skipBytes(arg1: number): number;
		}
		export class FilterWriter extends java.io.Writer {
			static class: java.lang.Class<java.io.FilterWriter>;
			write(arg1: java.lang.String, arg2: number, arg3: number): void;
			write(arg1: string, arg2: number, arg3: number): void;
			write(arg1: native.Array<string>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			close(): void;
			flush(): void;
			write(arg1: native.Array<string>): void;
			write(arg1: java.lang.String): void;
			write(arg1: string): void;
		}
		export class OutputStream extends java.lang.Object implements java.io.ICloseable, java.io.IFlushable {
			constructor();
			static class: java.lang.Class<java.io.OutputStream>;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: native.Array<native.Byte>): void;
			write(arg1: number): void;
			close(): void;
			flush(): void;
		}
		export class FilterReader extends java.io.Reader {
			static class: java.lang.Class<java.io.FilterReader>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			read(): number;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			ready(): boolean;
			read(arg1: java.nio.CharBuffer): number;
			read(arg1: native.Array<string>): number;
		}
		export class StringReader extends java.io.Reader {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.StringReader>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			read(): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			ready(): boolean;
			read(arg1: java.nio.CharBuffer): number;
			read(arg1: native.Array<string>): number;
		}
		export class CharArrayReader extends java.io.Reader {
			constructor(arg1: native.Array<string>);
			constructor(arg1: native.Array<string>, arg2: number, arg3: number);
			static class: java.lang.Class<java.io.CharArrayReader>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			read(): number;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			ready(): boolean;
			read(arg1: java.nio.CharBuffer): number;
			read(arg1: native.Array<string>): number;
		}
		export class OptionalDataException extends java.io.ObjectStreamException {
			length: number;
			eof: boolean;
			static class: java.lang.Class<java.io.OptionalDataException>;
		}
		export class LineNumberReader extends java.io.BufferedReader {
			constructor(arg1: java.io.Reader);
			constructor(arg1: java.io.Reader, arg2: number);
			static class: java.lang.Class<java.io.LineNumberReader>;
			LineNumber: number;
			setLineNumber(arg1: number): void;
			readLine(): string;
			getLineNumber(): number;
			mark(arg1: number): void;
			reset(): void;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			read(): number;
			skip(arg1: native.Long): any;
			read(arg1: java.nio.CharBuffer): number;
			read(arg1: native.Array<string>): number;
		}
		export class NotActiveException extends java.io.ObjectStreamException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.io.NotActiveException>;
		}
		export class StringWriter extends java.io.Writer {
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<java.io.StringWriter>;
			toString(): string;
			append(arg1: string): java.io.StringWriter;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.io.StringWriter;
			append(arg1: string, arg2: number, arg3: number): java.io.StringWriter;
			append(arg1: java.lang.ICharSequence): java.io.StringWriter;
			write(arg1: number): void;
			write(arg1: native.Array<string>, arg2: number, arg3: number): void;
			write(arg1: java.lang.String, arg2: number, arg3: number): void;
			write(arg1: string, arg2: number, arg3: number): void;
			write(arg1: java.lang.String): void;
			write(arg1: string): void;
			close(): void;
			flush(): void;
			getBuffer(): java.lang.StringBuffer;
			write(arg1: native.Array<string>): void;
		}
		export class ObjectStreamException extends java.io.IOException {
			static class: java.lang.Class<java.io.ObjectStreamException>;
		}
		export class ByteArrayInputStream extends java.io.InputStream {
			constructor(arg1: native.Array<native.Byte>);
			constructor(arg1: native.Array<native.Byte>, arg2: number, arg3: number);
			static class: java.lang.Class<java.io.ByteArrayInputStream>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			read(arg1: native.Array<native.Byte>): number;
		}
		export class PipedWriter extends java.io.Writer {
			constructor(arg1: java.io.PipedReader);
			constructor();
			static class: java.lang.Class<java.io.PipedWriter>;
			write(arg1: number): void;
			write(arg1: native.Array<string>, arg2: number, arg3: number): void;
			close(): void;
			flush(): void;
			connect(arg1: java.io.PipedReader): void;
			write(arg1: native.Array<string>): void;
			write(arg1: java.lang.String, arg2: number, arg3: number): void;
			write(arg1: string, arg2: number, arg3: number): void;
			write(arg1: java.lang.String): void;
			write(arg1: string): void;
		}
		export class ObjectStreamConstants implements java.io.IObjectStreamConstants {
			constructor(implementation: java.io.IObjectStreamConstants);
			static STREAM_MAGIC: native.Short;
			static STREAM_VERSION: native.Short;
			static TC_BASE: native.Byte;
			static TC_NULL: native.Byte;
			static TC_REFERENCE: native.Byte;
			static TC_CLASSDESC: native.Byte;
			static TC_OBJECT: native.Byte;
			static TC_STRING: native.Byte;
			static TC_ARRAY: native.Byte;
			static TC_CLASS: native.Byte;
			static TC_BLOCKDATA: native.Byte;
			static TC_ENDBLOCKDATA: native.Byte;
			static TC_RESET: native.Byte;
			static TC_BLOCKDATALONG: native.Byte;
			static TC_EXCEPTION: native.Byte;
			static TC_LONGSTRING: native.Byte;
			static TC_PROXYCLASSDESC: native.Byte;
			static TC_ENUM: native.Byte;
			static TC_MAX: native.Byte;
			static baseWireHandle: number;
			static SC_WRITE_METHOD: native.Byte;
			static SC_BLOCK_DATA: native.Byte;
			static SC_SERIALIZABLE: native.Byte;
			static SC_EXTERNALIZABLE: native.Byte;
			static SC_ENUM: native.Byte;
			static SUBSTITUTION_PERMISSION: java.io.SerializablePermission;
			static SUBCLASS_IMPLEMENTATION_PERMISSION: java.io.SerializablePermission;
			static PROTOCOL_VERSION_1: number;
			static PROTOCOL_VERSION_2: number;
		}
		export class Serializable implements java.io.ISerializable {
			constructor(implementation: java.io.ISerializable);
		}
		export class WriteAbortedException extends java.io.ObjectStreamException {
			constructor(arg1: java.lang.String, arg2: java.lang.Exception);
			constructor(arg1: string, arg2: java.lang.Exception);
			detail: java.lang.Exception;
			static class: java.lang.Class<java.io.WriteAbortedException>;
			getCause(): java.lang.Throwable;
			getMessage(): string;
		}
		export class CharArrayWriter extends java.io.Writer {
			constructor();
			constructor(arg1: number);
			static class: java.lang.Class<java.io.CharArrayWriter>;
			toString(): string;
			append(arg1: java.lang.ICharSequence): java.io.CharArrayWriter;
			append(arg1: string): java.io.CharArrayWriter;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.io.CharArrayWriter;
			append(arg1: string, arg2: number, arg3: number): java.io.CharArrayWriter;
			size(): number;
			toCharArray(): native.Array<string>;
			write(arg1: native.Array<string>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			write(arg1: java.lang.String, arg2: number, arg3: number): void;
			write(arg1: string, arg2: number, arg3: number): void;
			close(): void;
			flush(): void;
			reset(): void;
			writeTo(arg1: java.io.Writer): void;
			write(arg1: native.Array<string>): void;
			write(arg1: java.lang.String): void;
			write(arg1: string): void;
		}
		export class FilePermission extends java.security.Permission implements java.io.ISerializable {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			static class: java.lang.Class<java.io.FilePermission>;
			hashCode(): number;
			equals(arg1: any): boolean;
			getActions(): string;
			implies(arg1: java.security.Permission): boolean;
			newPermissionCollection(): java.security.PermissionCollection;
		}
		export class PushbackReader extends java.io.FilterReader {
			constructor(arg1: java.io.Reader, arg2: number);
			constructor(arg1: java.io.Reader);
			static class: java.lang.Class<java.io.PushbackReader>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			read(): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			ready(): boolean;
			unread(arg1: number): void;
			unread(arg1: native.Array<string>, arg2: number, arg3: number): void;
			unread(arg1: native.Array<string>): void;
			read(arg1: java.nio.CharBuffer): number;
			read(arg1: native.Array<string>): number;
		}
		export class SequenceInputStream extends java.io.InputStream {
			constructor(arg1: java.util.IEnumeration<any>);
			constructor(arg1: java.io.InputStream, arg2: java.io.InputStream);
			static class: java.lang.Class<java.io.SequenceInputStream>;
			close(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			read(arg1: native.Array<native.Byte>): number;
		}
		export interface IObjectInputValidation {
			validateObject(): void;
		}
		export interface IFilenameFilter {
			accept(arg1: java.io.File, arg2: string): boolean;
		}
		export interface IExternalizable extends java.io.ISerializable {
			writeExternal(arg1: java.io.IObjectOutput): void;
			readExternal(arg1: java.io.IObjectInput): void;
		}
		export class DataInputStream extends java.io.FilterInputStream implements java.io.IDataInput {
			constructor(arg1: java.io.InputStream);
			static class: java.lang.Class<java.io.DataInputStream>;
			readLine(): string;
			readInt(): number;
			read(arg1: native.Array<native.Byte>): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			readChar(): string;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			static readUTF(arg1: java.io.IDataInput): string;
			readUTF(): string;
			readFloat(): number;
			readFully(arg1: native.Array<native.Byte>): void;
			readFully(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			readBoolean(): boolean;
			readDouble(): any;
			readUnsignedByte(): number;
			readUnsignedShort(): number;
			skipBytes(arg1: number): number;
			read(): number;
		}
		export class PipedInputStream extends java.io.InputStream {
			constructor(arg1: java.io.PipedOutputStream);
			constructor(arg1: number);
			constructor();
			constructor(arg1: java.io.PipedOutputStream, arg2: number);
			static class: java.lang.Class<java.io.PipedInputStream>;
			close(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			connect(arg1: java.io.PipedOutputStream): void;
			read(arg1: native.Array<native.Byte>): number;
		}
		export class PrintStream extends java.io.FilterOutputStream implements java.lang.IAppendable, java.io.ICloseable {
			constructor(arg1: java.io.File);
			constructor(arg1: java.io.OutputStream);
			constructor(arg1: java.io.OutputStream, arg2: boolean);
			constructor(arg1: java.io.File, arg2: java.lang.String);
			constructor(arg1: java.io.File, arg2: string);
			constructor(arg1: java.io.OutputStream, arg2: boolean, arg3: java.lang.String);
			constructor(arg1: java.io.OutputStream, arg2: boolean, arg3: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.PrintStream>;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.io.PrintStream;
			append(arg1: string, arg2: number, arg3: number): java.io.PrintStream;
			append(arg1: string): java.io.PrintStream;
			append(arg1: java.lang.ICharSequence): java.io.PrintStream;
			format(arg1: java.util.Locale, arg2: java.lang.String, arg3: native.Array<any>): java.io.PrintStream;
			format(arg1: java.util.Locale, arg2: string, arg3: native.Array<any>): java.io.PrintStream;
			format(arg1: java.lang.String, arg2: native.Array<any>): java.io.PrintStream;
			format(arg1: string, arg2: native.Array<any>): java.io.PrintStream;
			write(arg1: number): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			println(arg1: native.Double): void;
			println(arg1: number): void;
			println(arg1: boolean): void;
			println(): void;
			println(arg1: native.Float): void;
			println(arg1: native.Long): void;
			println(arg1: native.Array<string>): void;
			println(arg1: java.lang.String): void;
			println(arg1: string): void;
			println(arg1: any): void;
			print(arg1: native.Double): void;
			print(arg1: number): void;
			print(arg1: native.Array<string>): void;
			print(arg1: native.Float): void;
			print(arg1: native.Long): void;
			print(arg1: string): void;
			print(arg1: boolean): void;
			print(arg1: any): void;
			print(arg1: java.lang.String): void;
			close(): void;
			flush(): void;
			checkError(): boolean;
			printf(arg1: java.util.Locale, arg2: java.lang.String, arg3: native.Array<any>): java.io.PrintStream;
			printf(arg1: java.util.Locale, arg2: string, arg3: native.Array<any>): java.io.PrintStream;
			printf(arg1: java.lang.String, arg2: native.Array<any>): java.io.PrintStream;
			printf(arg1: string, arg2: native.Array<any>): java.io.PrintStream;
			write(arg1: native.Array<native.Byte>): void;
		}
		export class Closeable implements java.io.ICloseable {
			constructor(implementation: java.io.ICloseable);
			close(): void;
		}
		export interface IFlushable {
			flush(): void;
		}
		export interface ICloseable {
			close(): void;
		}
		export class EOFException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.EOFException>;
		}
		export class ObjectStreamClass extends java.lang.Object implements java.io.ISerializable {
			static NO_FIELDS: native.Array<java.io.ObjectStreamField>;
			static class: java.lang.Class<java.io.ObjectStreamClass>;
			toString(): string;
			getName(): string;
			getField(arg1: java.lang.String): java.io.ObjectStreamField;
			getField(arg1: string): java.io.ObjectStreamField;
			getFields(): native.Array<java.io.ObjectStreamField>;
			forClass(): java.lang.Class<any>;
			static lookup(arg1: java.lang.Class<any>): java.io.ObjectStreamClass;
			getSerialVersionUID(): any;
			static lookupAny(arg1: java.lang.Class<any>): java.io.ObjectStreamClass;
		}
		export class FileNotFoundException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.FileNotFoundException>;
		}
		export class PipedReader extends java.io.Reader {
			constructor(arg1: number);
			constructor(arg1: java.io.PipedWriter);
			constructor(arg1: java.io.PipedWriter, arg2: number);
			constructor();
			static class: java.lang.Class<java.io.PipedReader>;
			close(): void;
			read(): number;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			ready(): boolean;
			connect(arg1: java.io.PipedWriter): void;
			read(arg1: java.nio.CharBuffer): number;
			read(arg1: native.Array<string>): number;
		}
		export interface IFileFilter {
			accept(arg1: java.io.File): boolean;
		}
		export class RandomAccessFile extends java.lang.Object implements java.io.IDataOutput, java.io.IDataInput, java.io.ICloseable {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.io.File, arg2: java.lang.String);
			constructor(arg1: java.io.File, arg2: string);
			static class: java.lang.Class<java.io.RandomAccessFile>;
			length(): any;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			write(arg1: native.Array<native.Byte>): void;
			close(): void;
			readLine(): string;
			readInt(): number;
			writeInt(arg1: number): void;
			setLength(arg1: native.Long): void;
			getChannel(): java.nio.channels.FileChannel;
			getFD(): java.io.FileDescriptor;
			read(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(arg1: native.Array<native.Byte>): number;
			writeBytes(arg1: java.lang.String): void;
			writeBytes(arg1: string): void;
			readChar(): string;
			writeChar(arg1: number): void;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			readUTF(): string;
			writeByte(arg1: number): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: number): void;
			writeUTF(arg1: java.lang.String): void;
			writeUTF(arg1: string): void;
			readFloat(): number;
			writeFloat(arg1: native.Float): void;
			readFully(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			readFully(arg1: native.Array<native.Byte>): void;
			writeBoolean(arg1: boolean): void;
			writeChars(arg1: java.lang.String): void;
			writeChars(arg1: string): void;
			writeDouble(arg1: native.Double): void;
			writeDouble(arg1: number): void;
			readBoolean(): boolean;
			readDouble(): any;
			readUnsignedByte(): number;
			readUnsignedShort(): number;
			skipBytes(arg1: number): number;
			getFilePointer(): any;
			seek(arg1: native.Long): void;
		}
		export class IOException extends java.lang.Exception {
			constructor(arg1: java.lang.Throwable);
			constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
			constructor(arg1: string, arg2: java.lang.Throwable);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.io.IOException>;
		}
		export class FileReader extends java.io.InputStreamReader {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.io.File);
			constructor(arg1: java.io.FileDescriptor);
			static class: java.lang.Class<java.io.FileReader>;
		}
		export class InvalidClassException extends java.io.ObjectStreamException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			classname: java.lang.String;
			static class: java.lang.Class<java.io.InvalidClassException>;
			getMessage(): string;
		}
		export class DataOutput implements java.io.IDataOutput {
			constructor(implementation: java.io.IDataOutput);
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: native.Array<native.Byte>): void;
			write(arg1: number): void;
			writeInt(arg1: number): void;
			writeBytes(arg1: java.lang.String): void;
			writeBytes(arg1: string): void;
			writeChar(arg1: number): void;
			writeByte(arg1: number): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: number): void;
			writeUTF(arg1: java.lang.String): void;
			writeUTF(arg1: string): void;
			writeFloat(arg1: native.Float): void;
			writeBoolean(arg1: boolean): void;
			writeChars(arg1: java.lang.String): void;
			writeChars(arg1: string): void;
			writeDouble(arg1: native.Double): void;
			writeDouble(arg1: number): void;
		}
		export class LineNumberInputStream extends java.io.FilterInputStream {
			constructor(arg1: java.io.InputStream);
			static class: java.lang.Class<java.io.LineNumberInputStream>;
			LineNumber: number;
			setLineNumber(arg1: number): void;
			getLineNumber(): number;
			mark(arg1: number): void;
			reset(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			skip(arg1: native.Long): any;
			read(arg1: native.Array<native.Byte>): number;
		}
		export class DataInput implements java.io.IDataInput {
			constructor(implementation: java.io.IDataInput);
			readLine(): string;
			readInt(): number;
			readChar(): string;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			readUTF(): string;
			readFloat(): number;
			readFully(arg1: native.Array<native.Byte>): void;
			readFully(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			readBoolean(): boolean;
			readDouble(): any;
			readUnsignedByte(): number;
			readUnsignedShort(): number;
			skipBytes(arg1: number): number;
		}
		export class FilenameFilter implements java.io.IFilenameFilter {
			constructor(implementation: java.io.IFilenameFilter);
			accept(arg1: java.io.File, arg2: java.lang.String): boolean;
			accept(arg1: java.io.File, arg2: string): boolean;
		}
		export class Console extends java.lang.Object implements java.io.IFlushable {
			static class: java.lang.Class<java.io.Console>;
			format(arg1: java.lang.String, arg2: native.Array<any>): java.io.Console;
			format(arg1: string, arg2: native.Array<any>): java.io.Console;
			flush(): void;
			readLine(): string;
			readLine(arg1: java.lang.String, arg2: native.Array<any>): string;
			readLine(arg1: string, arg2: native.Array<any>): string;
			printf(arg1: java.lang.String, arg2: native.Array<any>): java.io.Console;
			printf(arg1: string, arg2: native.Array<any>): java.io.Console;
			readPassword(): native.Array<string>;
			readPassword(arg1: java.lang.String, arg2: native.Array<any>): native.Array<string>;
			readPassword(arg1: string, arg2: native.Array<any>): native.Array<string>;
			reader(): java.io.Reader;
			writer(): java.io.PrintWriter;
		}
		export class OutputStreamWriter extends java.io.Writer {
			constructor(arg1: java.io.OutputStream, arg2: java.nio.charset.CharsetEncoder);
			constructor(arg1: java.io.OutputStream, arg2: java.nio.charset.Charset);
			constructor(arg1: java.io.OutputStream);
			constructor(arg1: java.io.OutputStream, arg2: java.lang.String);
			constructor(arg1: java.io.OutputStream, arg2: string);
			static class: java.lang.Class<java.io.OutputStreamWriter>;
			write(arg1: native.Array<string>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			write(arg1: java.lang.String, arg2: number, arg3: number): void;
			write(arg1: string, arg2: number, arg3: number): void;
			close(): void;
			flush(): void;
			getEncoding(): string;
			write(arg1: native.Array<string>): void;
			write(arg1: java.lang.String): void;
			write(arg1: string): void;
		}
		export class CharConversionException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.CharConversionException>;
		}
		export interface IObjectOutput extends java.io.IDataOutput {
			write(arg1: number): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: native.Array<native.Byte>): void;
			writeObject(arg1: any): void;
			close(): void;
			flush(): void;
			writeInt(arg1: number): void;
			writeBytes(arg1: string): void;
			writeChar(arg1: number): void;
			writeByte(arg1: number): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: number): void;
			writeUTF(arg1: string): void;
			writeFloat(arg1: native.Float): void;
			writeBoolean(arg1: boolean): void;
			writeChars(arg1: string): void;
			writeDouble(arg1: number): void;
		}
		export class NotSerializableException extends java.io.ObjectStreamException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.io.NotSerializableException>;
		}
		export class Flushable implements java.io.IFlushable {
			constructor(implementation: java.io.IFlushable);
			flush(): void;
		}
		export class PipedOutputStream extends java.io.OutputStream {
			constructor(arg1: java.io.PipedInputStream);
			constructor();
			static class: java.lang.Class<java.io.PipedOutputStream>;
			write(arg1: number): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			close(): void;
			flush(): void;
			connect(arg1: java.io.PipedInputStream): void;
			write(arg1: native.Array<native.Byte>): void;
		}
		export class BufferedWriter extends java.io.Writer {
			constructor(arg1: java.io.Writer);
			constructor(arg1: java.io.Writer, arg2: number);
			static class: java.lang.Class<java.io.BufferedWriter>;
			write(arg1: native.Array<string>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			write(arg1: java.lang.String, arg2: number, arg3: number): void;
			write(arg1: string, arg2: number, arg3: number): void;
			close(): void;
			flush(): void;
			newLine(): void;
			write(arg1: native.Array<string>): void;
			write(arg1: java.lang.String): void;
			write(arg1: string): void;
		}
		export class StreamCorruptedException extends java.io.ObjectStreamException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor();
			static class: java.lang.Class<java.io.StreamCorruptedException>;
		}
		export class StreamTokenizer extends java.lang.Object {
			constructor(arg1: java.io.Reader);
			constructor(arg1: java.io.InputStream);
			ttype: number;
			static TT_EOF: number;
			static TT_EOL: number;
			static TT_NUMBER: number;
			static TT_WORD: number;
			sval: java.lang.String;
			nval: native.Double;
			static class: java.lang.Class<java.io.StreamTokenizer>;
			toString(): string;
			nextToken(): number;
			commentChar(arg1: number): void;
			lineno(): number;
			lowerCaseMode(arg1: boolean): void;
			ordinaryChar(arg1: number): void;
			quoteChar(arg1: number): void;
			resetSyntax(): void;
			slashSlashComments(arg1: boolean): void;
			slashStarComments(arg1: boolean): void;
			whitespaceChars(arg1: number, arg2: number): void;
			wordChars(arg1: number, arg2: number): void;
			eolIsSignificant(arg1: boolean): void;
			ordinaryChars(arg1: number, arg2: number): void;
			parseNumbers(): void;
			pushBack(): void;
		}
		export class FileWriter extends java.io.OutputStreamWriter {
			constructor(arg1: java.io.FileDescriptor);
			constructor(arg1: java.io.File, arg2: boolean);
			constructor(arg1: java.io.File);
			constructor(arg1: java.lang.String, arg2: boolean);
			constructor(arg1: string, arg2: boolean);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.FileWriter>;
		}
		export class Externalizable implements java.io.ISerializable, java.io.IExternalizable {
			constructor(implementation: java.io.IExternalizable);
			writeExternal(arg1: java.io.IObjectOutput): void;
			readExternal(arg1: java.io.IObjectInput): void;
		}
		export interface IObjectStreamConstants {
		}
		export module IObjectStreamConstants {
			var STREAM_MAGIC: native.Short;
			var STREAM_VERSION: native.Short;
			var TC_BASE: native.Byte;
			var TC_NULL: native.Byte;
			var TC_REFERENCE: native.Byte;
			var TC_CLASSDESC: native.Byte;
			var TC_OBJECT: native.Byte;
			var TC_STRING: native.Byte;
			var TC_ARRAY: native.Byte;
			var TC_CLASS: native.Byte;
			var TC_BLOCKDATA: native.Byte;
			var TC_ENDBLOCKDATA: native.Byte;
			var TC_RESET: native.Byte;
			var TC_BLOCKDATALONG: native.Byte;
			var TC_EXCEPTION: native.Byte;
			var TC_LONGSTRING: native.Byte;
			var TC_PROXYCLASSDESC: native.Byte;
			var TC_ENUM: native.Byte;
			var TC_MAX: native.Byte;
			var baseWireHandle: number;
			var SC_WRITE_METHOD: native.Byte;
			var SC_BLOCK_DATA: native.Byte;
			var SC_SERIALIZABLE: native.Byte;
			var SC_EXTERNALIZABLE: native.Byte;
			var SC_ENUM: native.Byte;
			var SUBSTITUTION_PERMISSION: java.io.SerializablePermission;
			var SUBCLASS_IMPLEMENTATION_PERMISSION: java.io.SerializablePermission;
			var PROTOCOL_VERSION_1: number;
			var PROTOCOL_VERSION_2: number;
		}
		export class ObjectOutputStream extends java.io.OutputStream implements java.io.IObjectOutput, java.io.IObjectStreamConstants {
			constructor(arg1: java.io.OutputStream);
			static class: java.lang.Class<java.io.ObjectOutputStream>;
			write(arg1: native.Array<native.Byte>): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			writeObject(arg1: any): void;
			defaultWriteObject(): void;
			close(): void;
			flush(): void;
			writeInt(arg1: number): void;
			putFields(): java.io.ObjectOutputStream.PutField;
			writeFields(): void;
			reset(): void;
			writeBytes(arg1: java.lang.String): void;
			writeBytes(arg1: string): void;
			writeChar(arg1: number): void;
			writeByte(arg1: number): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: number): void;
			writeUTF(arg1: java.lang.String): void;
			writeUTF(arg1: string): void;
			writeFloat(arg1: native.Float): void;
			useProtocolVersion(arg1: number): void;
			writeBoolean(arg1: boolean): void;
			writeChars(arg1: java.lang.String): void;
			writeChars(arg1: string): void;
			writeDouble(arg1: native.Double): void;
			writeDouble(arg1: number): void;
			writeUnshared(arg1: any): void;
		}
		export module ObjectOutputStream {
			export class PutField extends java.lang.Object {
				constructor();
				static class: java.lang.Class<java.io.ObjectOutputStream.PutField>;
				put(arg1: java.lang.String, arg2: native.Float): void;
				put(arg1: string, arg2: native.Float): void;
				put(arg1: java.lang.String, arg2: native.Long): void;
				put(arg1: string, arg2: native.Long): void;
				put(arg1: java.lang.String, arg2: number): void;
				put(arg1: string, arg2: number): void;
				put(arg1: java.lang.String, arg2: native.Double): void;
				put(arg1: java.lang.String, arg2: any): void;
				put(arg1: string, arg2: any): void;
				put(arg1: java.lang.String, arg2: boolean): void;
				put(arg1: string, arg2: boolean): void;
				put(arg1: java.lang.String, arg2: native.Byte): void;
				put(arg1: string, arg2: native.Byte): void;
				put(arg1: java.lang.String, arg2: string): void;
				put(arg1: string, arg2: string): void;
				put(arg1: java.lang.String, arg2: native.Short): void;
				put(arg1: string, arg2: native.Short): void;
				write(arg1: java.io.IObjectOutput): void;
			}
		}
		export class InterruptedIOException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			bytesTransferred: number;
			static class: java.lang.Class<java.io.InterruptedIOException>;
		}
		export class DataOutputStream extends java.io.FilterOutputStream implements java.io.IDataOutput {
			constructor(arg1: java.io.OutputStream);
			static class: java.lang.Class<java.io.DataOutputStream>;
			size(): number;
			write(arg1: number): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			flush(): void;
			writeInt(arg1: number): void;
			writeBytes(arg1: java.lang.String): void;
			writeBytes(arg1: string): void;
			writeChar(arg1: number): void;
			writeByte(arg1: number): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: number): void;
			writeUTF(arg1: java.lang.String): void;
			writeUTF(arg1: string): void;
			writeFloat(arg1: native.Float): void;
			writeBoolean(arg1: boolean): void;
			writeChars(arg1: java.lang.String): void;
			writeChars(arg1: string): void;
			writeDouble(arg1: native.Double): void;
			writeDouble(arg1: number): void;
			write(arg1: native.Array<native.Byte>): void;
		}
		export class FilterInputStream extends java.io.InputStream {
			static class: java.lang.Class<java.io.FilterInputStream>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>): number;
			read(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
		}
		export interface IDataOutput {
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: native.Array<native.Byte>): void;
			write(arg1: number): void;
			writeInt(arg1: number): void;
			writeBytes(arg1: string): void;
			writeChar(arg1: number): void;
			writeByte(arg1: number): void;
			writeLong(arg1: native.Long): void;
			writeShort(arg1: number): void;
			writeUTF(arg1: string): void;
			writeFloat(arg1: native.Float): void;
			writeBoolean(arg1: boolean): void;
			writeChars(arg1: string): void;
			writeDouble(arg1: number): void;
		}
		export class File extends java.lang.Object implements java.io.ISerializable, java.lang.IComparable<java.io.File> {
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.io.File, arg2: java.lang.String);
			constructor(arg1: java.io.File, arg2: string);
			constructor(arg1: java.net.URI);
			static separatorChar: string;
			static separator: java.lang.String;
			static pathSeparatorChar: string;
			static pathSeparator: java.lang.String;
			static class: java.lang.Class<java.io.File>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			getName(): string;
			compareTo(arg1: any): number;
			compareTo(arg1: java.io.File): number;
			length(): any;
			getCanonicalPath(): string;
			getParent(): string;
			isAbsolute(): boolean;
			setReadOnly(): boolean;
			list(): native.Array<java.lang.String>;
			list(arg1: java.io.IFilenameFilter): native.Array<java.lang.String>;
			delete(): boolean;
			exists(): boolean;
			getPath(): string;
			canExecute(): boolean;
			canRead(): boolean;
			canWrite(): boolean;
			createNewFile(): boolean;
			static createTempFile(arg1: java.lang.String, arg2: java.lang.String, arg3: java.io.File): java.io.File;
			static createTempFile(arg1: string, arg2: string, arg3: java.io.File): java.io.File;
			static createTempFile(arg1: java.lang.String, arg2: java.lang.String): java.io.File;
			static createTempFile(arg1: string, arg2: string): java.io.File;
			deleteOnExit(): void;
			getAbsoluteFile(): java.io.File;
			getAbsolutePath(): string;
			getCanonicalFile(): java.io.File;
			getFreeSpace(): any;
			getParentFile(): java.io.File;
			getTotalSpace(): any;
			getUsableSpace(): any;
			isDirectory(): boolean;
			isFile(): boolean;
			isHidden(): boolean;
			lastModified(): any;
			listFiles(arg1: java.io.IFilenameFilter): native.Array<java.io.File>;
			listFiles(): native.Array<java.io.File>;
			listFiles(arg1: java.io.IFileFilter): native.Array<java.io.File>;
			static listRoots(): native.Array<java.io.File>;
			mkdir(): boolean;
			mkdirs(): boolean;
			renameTo(arg1: java.io.File): boolean;
			setExecutable(arg1: boolean): boolean;
			setExecutable(arg1: boolean, arg2: boolean): boolean;
			setLastModified(arg1: native.Long): boolean;
			setReadable(arg1: boolean, arg2: boolean): boolean;
			setReadable(arg1: boolean): boolean;
			setWritable(arg1: boolean): boolean;
			setWritable(arg1: boolean, arg2: boolean): boolean;
			toURI(): java.net.URI;
			toURL(): java.net.URL;
		}
		export class FileFilter implements java.io.IFileFilter {
			constructor(implementation: java.io.IFileFilter);
			accept(arg1: java.io.File): boolean;
		}
		export class FilterOutputStream extends java.io.OutputStream {
			constructor(arg1: java.io.OutputStream);
			static class: java.lang.Class<java.io.FilterOutputStream>;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: native.Array<native.Byte>): void;
			write(arg1: number): void;
			close(): void;
			flush(): void;
		}
		export class ObjectInputValidation implements java.io.IObjectInputValidation {
			constructor(implementation: java.io.IObjectInputValidation);
			validateObject(): void;
		}
		export class PrintWriter extends java.io.Writer {
			constructor(arg1: java.io.Writer);
			constructor(arg1: java.io.File, arg2: java.lang.String);
			constructor(arg1: java.io.File, arg2: string);
			constructor(arg1: java.lang.String, arg2: java.lang.String);
			constructor(arg1: string, arg2: string);
			constructor(arg1: java.io.Writer, arg2: boolean);
			constructor(arg1: java.io.OutputStream);
			constructor(arg1: java.io.OutputStream, arg2: boolean);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.io.File);
			static class: java.lang.Class<java.io.PrintWriter>;
			append(arg1: string): java.io.PrintWriter;
			append(arg1: java.lang.ICharSequence): java.io.PrintWriter;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.io.PrintWriter;
			append(arg1: string, arg2: number, arg3: number): java.io.PrintWriter;
			format(arg1: java.util.Locale, arg2: java.lang.String, arg3: native.Array<any>): java.io.PrintWriter;
			format(arg1: java.util.Locale, arg2: string, arg3: native.Array<any>): java.io.PrintWriter;
			format(arg1: java.lang.String, arg2: native.Array<any>): java.io.PrintWriter;
			format(arg1: string, arg2: native.Array<any>): java.io.PrintWriter;
			write(arg1: native.Array<string>): void;
			write(arg1: java.lang.String): void;
			write(arg1: string): void;
			write(arg1: number): void;
			write(arg1: java.lang.String, arg2: number, arg3: number): void;
			write(arg1: string, arg2: number, arg3: number): void;
			write(arg1: native.Array<string>, arg2: number, arg3: number): void;
			println(arg1: native.Double): void;
			println(arg1: number): void;
			println(arg1: native.Float): void;
			println(): void;
			println(arg1: native.Array<string>): void;
			println(arg1: java.lang.String): void;
			println(arg1: string): void;
			println(arg1: any): void;
			println(arg1: native.Long): void;
			println(arg1: boolean): void;
			print(arg1: java.lang.String): void;
			print(arg1: string): void;
			print(arg1: native.Double): void;
			print(arg1: number): void;
			print(arg1: native.Float): void;
			print(arg1: native.Long): void;
			print(arg1: boolean): void;
			print(arg1: any): void;
			print(arg1: native.Array<string>): void;
			close(): void;
			flush(): void;
			checkError(): boolean;
			printf(arg1: java.lang.String, arg2: native.Array<any>): java.io.PrintWriter;
			printf(arg1: string, arg2: native.Array<any>): java.io.PrintWriter;
			printf(arg1: java.util.Locale, arg2: java.lang.String, arg3: native.Array<any>): java.io.PrintWriter;
			printf(arg1: java.util.Locale, arg2: string, arg3: native.Array<any>): java.io.PrintWriter;
		}
		export interface IDataInput {
			readLine(): string;
			readInt(): number;
			readChar(): string;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			readUTF(): string;
			readFloat(): number;
			readFully(arg1: native.Array<native.Byte>): void;
			readFully(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			readBoolean(): boolean;
			readDouble(): any;
			readUnsignedByte(): number;
			readUnsignedShort(): number;
			skipBytes(arg1: number): number;
		}
		export class BufferedInputStream extends java.io.FilterInputStream {
			constructor(arg1: java.io.InputStream);
			constructor(arg1: java.io.InputStream, arg2: number);
			static class: java.lang.Class<java.io.BufferedInputStream>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			available(): number;
			read(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			read(arg1: native.Array<native.Byte>): number;
		}
		export class FileInputStream extends java.io.InputStream {
			constructor(arg1: java.io.File);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.io.FileDescriptor);
			static class: java.lang.Class<java.io.FileInputStream>;
			close(): void;
			available(): number;
			getChannel(): java.nio.channels.FileChannel;
			getFD(): java.io.FileDescriptor;
			read(arg1: native.Array<native.Byte>): number;
			read(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
		}
		export class BufferedOutputStream extends java.io.FilterOutputStream {
			constructor(arg1: java.io.OutputStream);
			constructor(arg1: java.io.OutputStream, arg2: number);
			static class: java.lang.Class<java.io.BufferedOutputStream>;
			write(arg1: number): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			flush(): void;
			write(arg1: native.Array<native.Byte>): void;
		}
		export class ObjectInputStream extends java.io.InputStream implements java.io.IObjectInput, java.io.IObjectStreamConstants {
			constructor(arg1: java.io.InputStream);
			static class: java.lang.Class<java.io.ObjectInputStream>;
			readObject(): any;
			defaultReadObject(): void;
			close(): void;
			readLine(): string;
			readInt(): number;
			readFields(): java.io.ObjectInputStream.GetField;
			available(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			readChar(): string;
			readByte(): number;
			readLong(): any;
			readShort(): number;
			readUTF(): string;
			readFloat(): number;
			readFully(arg1: native.Array<native.Byte>): void;
			readFully(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			readBoolean(): boolean;
			readDouble(): any;
			readUnshared(): any;
			readUnsignedByte(): number;
			readUnsignedShort(): number;
			registerValidation(arg1: java.io.IObjectInputValidation, arg2: number): void;
			skipBytes(arg1: number): number;
			read(arg1: native.Array<native.Byte>): number;
			skip(arg1: native.Long): any;
		}
		export module ObjectInputStream {
			export class GetField extends java.lang.Object {
				constructor();
				static class: java.lang.Class<java.io.ObjectInputStream.GetField>;
				get(arg1: java.lang.String, arg2: any): any;
				get(arg1: string, arg2: any): any;
				get(arg1: java.lang.String, arg2: number): number;
				get(arg1: string, arg2: number): number;
				get(arg1: java.lang.String, arg2: native.Long): any;
				get(arg1: string, arg2: native.Long): any;
				get(arg1: java.lang.String, arg2: native.Float): number;
				get(arg1: string, arg2: native.Float): number;
				get(arg1: java.lang.String, arg2: native.Double): any;
				get(arg1: java.lang.String, arg2: native.Short): number;
				get(arg1: string, arg2: native.Short): number;
				get(arg1: java.lang.String, arg2: boolean): boolean;
				get(arg1: string, arg2: boolean): boolean;
				get(arg1: java.lang.String, arg2: native.Byte): number;
				get(arg1: string, arg2: native.Byte): number;
				get(arg1: java.lang.String, arg2: string): string;
				get(arg1: string, arg2: string): string;
				defaulted(arg1: java.lang.String): boolean;
				defaulted(arg1: string): boolean;
				getObjectStreamClass(): java.io.ObjectStreamClass;
			}
		}
		export class BufferedReader extends java.io.Reader {
			constructor(arg1: java.io.Reader, arg2: number);
			constructor(arg1: java.io.Reader);
			static class: java.lang.Class<java.io.BufferedReader>;
			close(): void;
			readLine(): string;
			mark(arg1: number): void;
			reset(): void;
			read(arg1: native.Array<string>, arg2: number, arg3: number): number;
			read(): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			ready(): boolean;
			read(arg1: java.nio.CharBuffer): number;
			read(arg1: native.Array<string>): number;
		}
		export class UTFDataFormatException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.UTFDataFormatException>;
		}
		export class PushbackInputStream extends java.io.FilterInputStream {
			constructor(arg1: java.io.InputStream);
			constructor(arg1: java.io.InputStream, arg2: number);
			static class: java.lang.Class<java.io.PushbackInputStream>;
			close(): void;
			mark(arg1: number): void;
			reset(): void;
			available(): number;
			read(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			skip(arg1: native.Long): any;
			markSupported(): boolean;
			unread(arg1: native.Array<native.Byte>): void;
			unread(arg1: number): void;
			unread(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			read(arg1: native.Array<native.Byte>): number;
		}
		export class Writer extends java.lang.Object implements java.lang.IAppendable, java.io.ICloseable, java.io.IFlushable {
			static class: java.lang.Class<java.io.Writer>;
			append(arg1: java.lang.ICharSequence, arg2: number, arg3: number): java.io.Writer;
			append(arg1: string, arg2: number, arg3: number): java.io.Writer;
			append(arg1: string): java.io.Writer;
			append(arg1: java.lang.ICharSequence): java.io.Writer;
			write(arg1: native.Array<string>): void;
			write(arg1: native.Array<string>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			write(arg1: java.lang.String, arg2: number, arg3: number): void;
			write(arg1: string, arg2: number, arg3: number): void;
			write(arg1: java.lang.String): void;
			write(arg1: string): void;
			close(): void;
			flush(): void;
		}
		export class IOError extends java.lang.Error {
			constructor(arg1: java.lang.Throwable);
			static class: java.lang.Class<java.io.IOError>;
		}
		export class InvalidObjectException extends java.io.ObjectStreamException {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.InvalidObjectException>;
		}
		export class ObjectStreamField extends java.lang.Object implements java.lang.IComparable<any> {
			constructor(arg1: java.lang.String, arg2: java.lang.Class<any>, arg3: boolean);
			constructor(arg1: string, arg2: java.lang.Class<any>, arg3: boolean);
			constructor(arg1: java.lang.String, arg2: java.lang.Class<any>);
			constructor(arg1: string, arg2: java.lang.Class<any>);
			static class: java.lang.Class<java.io.ObjectStreamField>;
			toString(): string;
			getName(): string;
			compareTo(arg1: any): number;
			isPrimitive(): boolean;
			getType(): java.lang.Class<any>;
			getOffset(): number;
			getTypeCode(): string;
			getTypeString(): string;
			isUnshared(): boolean;
		}
		export class FileOutputStream extends java.io.OutputStream {
			constructor(arg1: java.io.File, arg2: boolean);
			constructor(arg1: java.io.FileDescriptor);
			constructor(arg1: java.lang.String, arg2: boolean);
			constructor(arg1: string, arg2: boolean);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.io.File);
			static class: java.lang.Class<java.io.FileOutputStream>;
			write(arg1: native.Array<native.Byte>): void;
			write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
			write(arg1: number): void;
			close(): void;
			getChannel(): java.nio.channels.FileChannel;
			getFD(): java.io.FileDescriptor;
		}
		export class FileDescriptor extends java.lang.Object {
			constructor();
			static in: java.io.FileDescriptor;
			static out: java.io.FileDescriptor;
			static err: java.io.FileDescriptor;
			static class: java.lang.Class<java.io.FileDescriptor>;
			sync(): void;
			valid(): boolean;
		}
		export class StringBufferInputStream extends java.io.InputStream {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.StringBufferInputStream>;
			reset(): void;
			available(): number;
			read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
			read(): number;
			skip(arg1: native.Long): any;
			read(arg1: native.Array<native.Byte>): number;
		}
		export class UnsupportedEncodingException extends java.io.IOException {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<java.io.UnsupportedEncodingException>;
		}
	}
}
declare module junit {
	export module runner {
		export class TestSuiteLoader implements junit.runner.ITestSuiteLoader {
			constructor(implementation: junit.runner.ITestSuiteLoader);
			load(arg1: java.lang.String): java.lang.Class<any>;
			load(arg1: string): java.lang.Class<any>;
			reload(arg1: java.lang.Class<any>): java.lang.Class<any>;
		}
		export interface ITestSuiteLoader {
			load(arg1: string): java.lang.Class<any>;
			reload(arg1: java.lang.Class<any>): java.lang.Class<any>;
		}
		export class Version extends java.lang.Object {
			static class: java.lang.Class<junit.runner.Version>;
			static id(): string;
		}
		export class BaseTestRunner extends java.lang.Object implements junit.framework.ITestListener {
			constructor();
			static SUITE_METHODNAME: java.lang.String;
			static class: java.lang.Class<junit.runner.BaseTestRunner>;
			elapsedTimeAsString(arg1: native.Long): string;
			static getFilteredTrace(arg1: java.lang.Throwable): string;
			static getFilteredTrace(arg1: java.lang.String): string;
			static getFilteredTrace(arg1: string): string;
			static savePreferences(): void;
			extractClassName(arg1: java.lang.String): string;
			extractClassName(arg1: string): string;
			testEnded(arg1: java.lang.String): void;
			testEnded(arg1: string): void;
			setLoading(arg1: boolean): void;
			startTest(arg1: junit.framework.ITest): void;
			getTest(arg1: java.lang.String): junit.framework.ITest;
			getTest(arg1: string): junit.framework.ITest;
			testStarted(arg1: java.lang.String): void;
			testStarted(arg1: string): void;
			static getPreference(arg1: java.lang.String): string;
			static getPreference(arg1: string): string;
			static getPreference(arg1: java.lang.String, arg2: number): number;
			static getPreference(arg1: string, arg2: number): number;
			static inVAJava(): boolean;
			endTest(arg1: junit.framework.ITest): void;
			setPreference(arg1: java.lang.String, arg2: java.lang.String): void;
			setPreference(arg1: string, arg2: string): void;
			testFailed(arg1: number, arg2: junit.framework.ITest, arg3: java.lang.Throwable): void;
			addFailure(arg1: junit.framework.ITest, arg2: junit.framework.AssertionFailedError): void;
			addError(arg1: junit.framework.ITest, arg2: java.lang.Throwable): void;
			static truncate(arg1: java.lang.String): string;
			static truncate(arg1: string): string;
			getLoader(): junit.runner.ITestSuiteLoader;
		}
	}
	export module framework {
		export class AssertionFailedError extends java.lang.AssertionError {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<junit.framework.AssertionFailedError>;
		}
		export class Test implements junit.framework.ITest {
			constructor(implementation: junit.framework.ITest);
			countTestCases(): number;
			run(arg1: junit.framework.TestResult): void;
		}
		export class TestFailure extends java.lang.Object {
			constructor(arg1: junit.framework.ITest, arg2: java.lang.Throwable);
			static class: java.lang.Class<junit.framework.TestFailure>;
			trace(): string;
			exceptionMessage(): string;
			thrownException(): java.lang.Throwable;
			failedTest(): junit.framework.ITest;
			isFailure(): boolean;
			toString(): string;
		}
		export class ComparisonFailure extends junit.framework.AssertionFailedError {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String);
			constructor(arg1: string, arg2: string, arg3: string);
			static class: java.lang.Class<junit.framework.ComparisonFailure>;
			getActual(): string;
			getMessage(): string;
			getExpected(): string;
		}
		export class TestSuite extends java.lang.Object implements junit.framework.ITest {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			constructor(arg1: java.lang.Class<any>);
			constructor(arg1: java.lang.Class<any>, arg2: java.lang.String);
			constructor(arg1: java.lang.Class<any>, arg2: string);
			constructor(arg1: native.Array<java.lang.Class<any>>, arg2: java.lang.String);
			constructor(arg1: native.Array<java.lang.Class<any>>, arg2: string);
			constructor(arg1: native.Array<java.lang.Class<any>>);
			static class: java.lang.Class<junit.framework.TestSuite>;
			Name: string;
			countTestCases(): number;
			tests(): java.util.IEnumeration<junit.framework.ITest>;
			runTest(arg1: junit.framework.ITest, arg2: junit.framework.TestResult): void;
			static getTestConstructor(arg1: java.lang.Class<any>): java.lang.reflect.Constructor<any>;
			testCount(): number;
			addTestSuite(arg1: java.lang.Class<any>): void;
			addTest(arg1: junit.framework.ITest): void;
			testAt(arg1: number): junit.framework.ITest;
			static createTest(arg1: java.lang.Class<any>, arg2: java.lang.String): junit.framework.ITest;
			static createTest(arg1: java.lang.Class<any>, arg2: string): junit.framework.ITest;
			toString(): string;
			getName(): string;
			run(arg1: junit.framework.TestResult): void;
			setName(arg1: java.lang.String): void;
			setName(arg1: string): void;
			static warning(arg1: java.lang.String): junit.framework.ITest;
			static warning(arg1: string): junit.framework.ITest;
		}
		export class TestListener implements junit.framework.ITestListener {
			constructor(implementation: junit.framework.ITestListener);
			startTest(arg1: junit.framework.ITest): void;
			endTest(arg1: junit.framework.ITest): void;
			addFailure(arg1: junit.framework.ITest, arg2: junit.framework.AssertionFailedError): void;
			addError(arg1: junit.framework.ITest, arg2: java.lang.Throwable): void;
		}
		export class TestCase extends junit.framework.Assert implements junit.framework.ITest {
			constructor();
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<junit.framework.TestCase>;
			Name: string;
			countTestCases(): number;
			runBare(): void;
			toString(): string;
			getName(): string;
			run(arg1: junit.framework.TestResult): void;
			run(): junit.framework.TestResult;
			setName(arg1: java.lang.String): void;
			setName(arg1: string): void;
		}
		export class Protectable implements junit.framework.IProtectable {
			constructor(implementation: junit.framework.IProtectable);
			protect(): void;
		}
		export class TestResult extends java.lang.Object {
			constructor();
			static class: java.lang.Class<junit.framework.TestResult>;
			startTest(arg1: junit.framework.ITest): void;
			endTest(arg1: junit.framework.ITest): void;
			addFailure(arg1: junit.framework.ITest, arg2: junit.framework.AssertionFailedError): void;
			addError(arg1: junit.framework.ITest, arg2: java.lang.Throwable): void;
			errorCount(): number;
			wasSuccessful(): boolean;
			shouldStop(): boolean;
			failures(): java.util.IEnumeration<junit.framework.TestFailure>;
			runProtected(arg1: junit.framework.ITest, arg2: junit.framework.IProtectable): void;
			failureCount(): number;
			errors(): java.util.IEnumeration<junit.framework.TestFailure>;
			stop(): void;
			runCount(): number;
			addListener(arg1: junit.framework.ITestListener): void;
			removeListener(arg1: junit.framework.ITestListener): void;
		}
		export class Assert extends java.lang.Object {
			static class: java.lang.Class<junit.framework.Assert>;
			static assertEquals(arg1: native.Long, arg2: native.Long): void;
			static assertEquals(arg1: java.lang.String, arg2: boolean, arg3: boolean): void;
			static assertEquals(arg1: string, arg2: boolean, arg3: boolean): void;
			static assertEquals(arg1: boolean, arg2: boolean): void;
			static assertEquals(arg1: native.Byte, arg2: native.Byte): void;
			static assertEquals(arg1: java.lang.String, arg2: native.Long, arg3: native.Long): void;
			static assertEquals(arg1: string, arg2: native.Long, arg3: native.Long): void;
			static assertEquals(arg1: native.Float, arg2: native.Float, arg3: native.Float): void;
			static assertEquals(arg1: java.lang.String, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static assertEquals(arg1: string, arg2: native.Float, arg3: native.Float, arg4: native.Float): void;
			static assertEquals(arg1: number, arg2: number): void;
			static assertEquals(arg1: java.lang.String, arg2: number, arg3: number): void;
			static assertEquals(arg1: string, arg2: number, arg3: number): void;
			static assertEquals(arg1: native.Short, arg2: native.Short): void;
			static assertEquals(arg1: java.lang.String, arg2: native.Short, arg3: native.Short): void;
			static assertEquals(arg1: string, arg2: native.Short, arg3: native.Short): void;
			static assertEquals(arg1: string, arg2: string): void;
			static assertEquals(arg1: java.lang.String, arg2: string, arg3: string): void;
			static assertEquals(arg1: string, arg2: string, arg3: string): void;
			static assertEquals(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
			static assertEquals(arg1: any, arg2: any): void;
			static assertEquals(arg1: java.lang.String, arg2: any, arg3: any): void;
			static assertEquals(arg1: string, arg2: any, arg3: any): void;
			static assertEquals(arg1: java.lang.String, arg2: native.Byte, arg3: native.Byte): void;
			static assertEquals(arg1: string, arg2: native.Byte, arg3: native.Byte): void;
			static assertEquals(arg1: native.Double, arg2: native.Double, arg3: native.Double): void;
			static assertEquals(arg1: number, arg2: number, arg3: number): void;
			static assertEquals(arg1: java.lang.String, arg2: native.Double, arg3: native.Double, arg4: native.Double): void;
			static assertEquals(arg1: string, arg2: number, arg3: number, arg4: number): void;
			static assertEquals(arg1: java.lang.String, arg2: java.lang.String): void;
			static assertSame(arg1: java.lang.String, arg2: any, arg3: any): void;
			static assertSame(arg1: string, arg2: any, arg3: any): void;
			static assertSame(arg1: any, arg2: any): void;
			static assertTrue(arg1: java.lang.String, arg2: boolean): void;
			static assertTrue(arg1: string, arg2: boolean): void;
			static assertTrue(arg1: boolean): void;
			static assertNotNull(arg1: java.lang.String, arg2: any): void;
			static assertNotNull(arg1: string, arg2: any): void;
			static assertNotNull(arg1: any): void;
			static failSame(arg1: java.lang.String): void;
			static failSame(arg1: string): void;
			static assertNull(arg1: java.lang.String, arg2: any): void;
			static assertNull(arg1: string, arg2: any): void;
			static assertNull(arg1: any): void;
			static failNotEquals(arg1: java.lang.String, arg2: any, arg3: any): void;
			static failNotEquals(arg1: string, arg2: any, arg3: any): void;
			static assertNotSame(arg1: java.lang.String, arg2: any, arg3: any): void;
			static assertNotSame(arg1: string, arg2: any, arg3: any): void;
			static assertNotSame(arg1: any, arg2: any): void;
			static failNotSame(arg1: java.lang.String, arg2: any, arg3: any): void;
			static failNotSame(arg1: string, arg2: any, arg3: any): void;
			static assertFalse(arg1: java.lang.String, arg2: boolean): void;
			static assertFalse(arg1: string, arg2: boolean): void;
			static assertFalse(arg1: boolean): void;
			static format(arg1: java.lang.String, arg2: any, arg3: any): string;
			static format(arg1: string, arg2: any, arg3: any): string;
			static fail(): void;
			static fail(arg1: java.lang.String): void;
			static fail(arg1: string): void;
		}
		export interface ITest {
			countTestCases(): number;
			run(arg1: junit.framework.TestResult): void;
		}
		export interface IProtectable {
			protect(): void;
		}
		export interface ITestListener {
			startTest(arg1: junit.framework.ITest): void;
			endTest(arg1: junit.framework.ITest): void;
			addFailure(arg1: junit.framework.ITest, arg2: junit.framework.AssertionFailedError): void;
			addError(arg1: junit.framework.ITest, arg2: java.lang.Throwable): void;
		}
	}
}
declare module org {
	export module xmlpull {
		export module v1 {
			export class XmlSerializer implements org.xmlpull.v1.IXmlSerializer {
				constructor(implementation: org.xmlpull.v1.IXmlSerializer);
				getNamespace(): string;
				startTag(arg1: java.lang.String, arg2: java.lang.String): org.xmlpull.v1.IXmlSerializer;
				startTag(arg1: string, arg2: string): org.xmlpull.v1.IXmlSerializer;
				entityRef(arg1: java.lang.String): void;
				entityRef(arg1: string): void;
				cdsect(arg1: java.lang.String): void;
				cdsect(arg1: string): void;
				docdecl(arg1: java.lang.String): void;
				docdecl(arg1: string): void;
				endTag(arg1: java.lang.String, arg2: java.lang.String): org.xmlpull.v1.IXmlSerializer;
				endTag(arg1: string, arg2: string): org.xmlpull.v1.IXmlSerializer;
				getName(): string;
				getProperty(arg1: java.lang.String): any;
				getProperty(arg1: string): any;
				setProperty(arg1: java.lang.String, arg2: any): void;
				setProperty(arg1: string, arg2: any): void;
				flush(): void;
				text(arg1: native.Array<string>, arg2: number, arg3: number): org.xmlpull.v1.IXmlSerializer;
				text(arg1: java.lang.String): org.xmlpull.v1.IXmlSerializer;
				text(arg1: string): org.xmlpull.v1.IXmlSerializer;
				comment(arg1: java.lang.String): void;
				comment(arg1: string): void;
				attribute(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): org.xmlpull.v1.IXmlSerializer;
				attribute(arg1: string, arg2: string, arg3: string): org.xmlpull.v1.IXmlSerializer;
				setOutput(arg1: java.io.Writer): void;
				setOutput(arg1: java.io.OutputStream, arg2: java.lang.String): void;
				setOutput(arg1: java.io.OutputStream, arg2: string): void;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				getPrefix(arg1: java.lang.String, arg2: boolean): string;
				getPrefix(arg1: string, arg2: boolean): string;
				setPrefix(arg1: java.lang.String, arg2: java.lang.String): void;
				setPrefix(arg1: string, arg2: string): void;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				endDocument(): void;
				ignorableWhitespace(arg1: java.lang.String): void;
				ignorableWhitespace(arg1: string): void;
				processingInstruction(arg1: java.lang.String): void;
				processingInstruction(arg1: string): void;
				startDocument(arg1: java.lang.String, arg2: java.lang.Boolean): void;
				startDocument(arg1: string, arg2: boolean): void;
				getDepth(): number;
			}
			export class XmlPullParserFactory extends java.lang.Object {
				static PROPERTY_NAME: java.lang.String;
				static class: java.lang.Class<org.xmlpull.v1.XmlPullParserFactory>;
				newSerializer(): org.xmlpull.v1.IXmlSerializer;
				newPullParser(): org.xmlpull.v1.IXmlPullParser;
				static newInstance(): org.xmlpull.v1.XmlPullParserFactory;
				static newInstance(arg1: java.lang.String, arg2: java.lang.Class<any>): org.xmlpull.v1.XmlPullParserFactory;
				static newInstance(arg1: string, arg2: java.lang.Class<any>): org.xmlpull.v1.XmlPullParserFactory;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				isNamespaceAware(): boolean;
				isValidating(): boolean;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				setNamespaceAware(arg1: boolean): void;
				setValidating(arg1: boolean): void;
			}
			export class XmlPullParser implements org.xmlpull.v1.IXmlPullParser {
				constructor(implementation: org.xmlpull.v1.IXmlPullParser);
				static NO_NAMESPACE: java.lang.String;
				static START_DOCUMENT: number;
				static END_DOCUMENT: number;
				static START_TAG: number;
				static END_TAG: number;
				static TEXT: number;
				static CDSECT: number;
				static ENTITY_REF: number;
				static IGNORABLE_WHITESPACE: number;
				static PROCESSING_INSTRUCTION: number;
				static COMMENT: number;
				static DOCDECL: number;
				static TYPES: native.Array<java.lang.String>;
				static FEATURE_PROCESS_NAMESPACES: java.lang.String;
				static FEATURE_REPORT_NAMESPACE_ATTRIBUTES: java.lang.String;
				static FEATURE_PROCESS_DOCDECL: java.lang.String;
				static FEATURE_VALIDATION: java.lang.String;
				getAttributeName(arg1: number): string;
				getAttributeValue(arg1: java.lang.String, arg2: java.lang.String): string;
				getAttributeValue(arg1: string, arg2: string): string;
				getAttributeValue(arg1: number): string;
				getPositionDescription(): string;
				require(arg1: number, arg2: java.lang.String, arg3: java.lang.String): void;
				require(arg1: number, arg2: string, arg3: string): void;
				getEventType(): number;
				getNamespace(arg1: java.lang.String): string;
				getNamespace(arg1: string): string;
				getNamespace(): string;
				nextText(): string;
				nextTag(): number;
				isAttributeDefault(arg1: number): boolean;
				getNamespaceCount(arg1: number): number;
				getTextCharacters(arg1: native.Array<number>): native.Array<string>;
				getAttributeNamespace(arg1: number): string;
				getNamespaceUri(arg1: number): string;
				getAttributePrefix(arg1: number): string;
				getAttributeType(arg1: number): string;
				isEmptyElementTag(): boolean;
				getNamespacePrefix(arg1: number): string;
				defineEntityReplacementText(arg1: java.lang.String, arg2: java.lang.String): void;
				defineEntityReplacementText(arg1: string, arg2: string): void;
				getName(): string;
				next(): number;
				getProperty(arg1: java.lang.String): any;
				getProperty(arg1: string): any;
				setProperty(arg1: java.lang.String, arg2: any): void;
				setProperty(arg1: string, arg2: any): void;
				getLineNumber(): number;
				isWhitespace(): boolean;
				nextToken(): number;
				getText(): string;
				getAttributeCount(): number;
				setInput(arg1: java.io.Reader): void;
				setInput(arg1: java.io.InputStream, arg2: java.lang.String): void;
				setInput(arg1: java.io.InputStream, arg2: string): void;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				getPrefix(): string;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				getInputEncoding(): string;
				getColumnNumber(): number;
				getDepth(): number;
			}
			export interface IXmlPullParser {
				getAttributeName(arg1: number): string;
				getAttributeValue(arg1: string, arg2: string): string;
				getAttributeValue(arg1: number): string;
				getPositionDescription(): string;
				require(arg1: number, arg2: string, arg3: string): void;
				getEventType(): number;
				getNamespace(arg1: string): string;
				getNamespace(): string;
				nextText(): string;
				nextTag(): number;
				isAttributeDefault(arg1: number): boolean;
				getNamespaceCount(arg1: number): number;
				getTextCharacters(arg1: native.Array<number>): native.Array<string>;
				getAttributeNamespace(arg1: number): string;
				getNamespaceUri(arg1: number): string;
				getAttributePrefix(arg1: number): string;
				getAttributeType(arg1: number): string;
				isEmptyElementTag(): boolean;
				getNamespacePrefix(arg1: number): string;
				defineEntityReplacementText(arg1: string, arg2: string): void;
				getName(): string;
				next(): number;
				getProperty(arg1: string): any;
				setProperty(arg1: string, arg2: any): void;
				getLineNumber(): number;
				isWhitespace(): boolean;
				nextToken(): number;
				getText(): string;
				getAttributeCount(): number;
				setInput(arg1: java.io.Reader): void;
				setInput(arg1: java.io.InputStream, arg2: string): void;
				getFeature(arg1: string): boolean;
				getPrefix(): string;
				setFeature(arg1: string, arg2: boolean): void;
				getInputEncoding(): string;
				getColumnNumber(): number;
				getDepth(): number;
			}
			export module IXmlPullParser {
				var NO_NAMESPACE: java.lang.String;
				var START_DOCUMENT: number;
				var END_DOCUMENT: number;
				var START_TAG: number;
				var END_TAG: number;
				var TEXT: number;
				var CDSECT: number;
				var ENTITY_REF: number;
				var IGNORABLE_WHITESPACE: number;
				var PROCESSING_INSTRUCTION: number;
				var COMMENT: number;
				var DOCDECL: number;
				var TYPES: native.Array<java.lang.String>;
				var FEATURE_PROCESS_NAMESPACES: java.lang.String;
				var FEATURE_REPORT_NAMESPACE_ATTRIBUTES: java.lang.String;
				var FEATURE_PROCESS_DOCDECL: java.lang.String;
				var FEATURE_VALIDATION: java.lang.String;
			}
			export class XmlPullParserException extends java.lang.Exception {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: org.xmlpull.v1.IXmlPullParser, arg3: java.lang.Throwable);
				constructor(arg1: string, arg2: org.xmlpull.v1.IXmlPullParser, arg3: java.lang.Throwable);
				static class: java.lang.Class<org.xmlpull.v1.XmlPullParserException>;
				getDetail(): java.lang.Throwable;
				printStackTrace(): void;
				getLineNumber(): number;
				getColumnNumber(): number;
				printStackTrace(arg1: java.io.PrintStream): void;
				printStackTrace(arg1: java.io.PrintWriter): void;
			}
			export interface IXmlSerializer {
				getNamespace(): string;
				startTag(arg1: string, arg2: string): org.xmlpull.v1.IXmlSerializer;
				entityRef(arg1: string): void;
				cdsect(arg1: string): void;
				docdecl(arg1: string): void;
				endTag(arg1: string, arg2: string): org.xmlpull.v1.IXmlSerializer;
				getName(): string;
				getProperty(arg1: string): any;
				setProperty(arg1: string, arg2: any): void;
				flush(): void;
				text(arg1: native.Array<string>, arg2: number, arg3: number): org.xmlpull.v1.IXmlSerializer;
				text(arg1: string): org.xmlpull.v1.IXmlSerializer;
				comment(arg1: string): void;
				attribute(arg1: string, arg2: string, arg3: string): org.xmlpull.v1.IXmlSerializer;
				setOutput(arg1: java.io.Writer): void;
				setOutput(arg1: java.io.OutputStream, arg2: string): void;
				getFeature(arg1: string): boolean;
				getPrefix(arg1: string, arg2: boolean): string;
				setPrefix(arg1: string, arg2: string): void;
				setFeature(arg1: string, arg2: boolean): void;
				endDocument(): void;
				ignorableWhitespace(arg1: string): void;
				processingInstruction(arg1: string): void;
				startDocument(arg1: string, arg2: boolean): void;
				getDepth(): number;
			}
			export module sax2 {
				export class Driver extends java.lang.Object implements org.xml.sax.ILocator, org.xml.sax.IXMLReader, org.xml.sax.IAttributes {
					constructor();
					constructor(arg1: org.xmlpull.v1.IXmlPullParser);
					static class: java.lang.Class<org.xmlpull.v1.sax2.Driver>;
					ContentHandler: org.xml.sax.IContentHandler;
					DTDHandler: org.xml.sax.IDTDHandler;
					ErrorHandler: org.xml.sax.IErrorHandler;
					EntityResolver: org.xml.sax.IEntityResolver;
					getErrorHandler(): org.xml.sax.IErrorHandler;
					getEntityResolver(): org.xml.sax.IEntityResolver;
					setContentHandler(arg1: org.xml.sax.IContentHandler): void;
					getQName(arg1: number): string;
					parseSubTree(arg1: org.xmlpull.v1.IXmlPullParser): void;
					setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
					getURI(arg1: number): string;
					getDTDHandler(): org.xml.sax.IDTDHandler;
					getValue(arg1: java.lang.String): string;
					getValue(arg1: string): string;
					getValue(arg1: java.lang.String, arg2: java.lang.String): string;
					getValue(arg1: string, arg2: string): string;
					getValue(arg1: number): string;
					getProperty(arg1: java.lang.String): any;
					getProperty(arg1: string): any;
					setProperty(arg1: java.lang.String, arg2: any): void;
					setProperty(arg1: string, arg2: any): void;
					getType(arg1: number): string;
					getType(arg1: java.lang.String): string;
					getType(arg1: string): string;
					getType(arg1: java.lang.String, arg2: java.lang.String): string;
					getType(arg1: string, arg2: string): string;
					getLineNumber(): number;
					parse(arg1: java.lang.String): void;
					parse(arg1: string): void;
					parse(arg1: org.xml.sax.InputSource): void;
					getLength(): number;
					getIndex(arg1: java.lang.String, arg2: java.lang.String): number;
					getIndex(arg1: string, arg2: string): number;
					getIndex(arg1: java.lang.String): number;
					getIndex(arg1: string): number;
					getContentHandler(): org.xml.sax.IContentHandler;
					getFeature(arg1: java.lang.String): boolean;
					getFeature(arg1: string): boolean;
					getLocalName(arg1: number): string;
					getPublicId(): string;
					getSystemId(): string;
					setFeature(arg1: java.lang.String, arg2: boolean): void;
					setFeature(arg1: string, arg2: boolean): void;
					setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
					setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
					getColumnNumber(): number;
				}
			}
		}
	}
	export module w3c {
		export module dom {
			export interface IDOMConfiguration {
				canSetParameter(arg1: string, arg2: any): boolean;
				getParameterNames(): org.w3c.dom.IDOMStringList;
				getParameter(arg1: string): any;
				setParameter(arg1: string, arg2: any): void;
			}
			export interface INotation extends org.w3c.dom.INode {
				getPublicId(): string;
				getSystemId(): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class Attr implements org.w3c.dom.INode, org.w3c.dom.IAttr {
				constructor(implementation: org.w3c.dom.IAttr);
				Value: string;
				Prefix: string;
				NodeValue: string;
				TextContent: string;
				getName(): string;
				getValue(): string;
				setValue(arg1: java.lang.String): void;
				setValue(arg1: string): void;
				getSchemaTypeInfo(): org.w3c.dom.ITypeInfo;
				getOwnerElement(): org.w3c.dom.IElement;
				getSpecified(): boolean;
				isId(): boolean;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class DOMImplementationList implements org.w3c.dom.IDOMImplementationList {
				constructor(implementation: org.w3c.dom.IDOMImplementationList);
				getLength(): number;
				item(arg1: number): org.w3c.dom.IDOMImplementation;
			}
			export interface IElement extends org.w3c.dom.INode {
				getAttribute(arg1: string): string;
				removeAttribute(arg1: string): void;
				setAttribute(arg1: string, arg2: string): void;
				getElementsByTagName(arg1: string): org.w3c.dom.INodeList;
				getElementsByTagNameNS(arg1: string, arg2: string): org.w3c.dom.INodeList;
				getAttributeNS(arg1: string, arg2: string): string;
				getAttributeNode(arg1: string): org.w3c.dom.IAttr;
				getAttributeNodeNS(arg1: string, arg2: string): org.w3c.dom.IAttr;
				getSchemaTypeInfo(): org.w3c.dom.ITypeInfo;
				getTagName(): string;
				hasAttribute(arg1: string): boolean;
				hasAttributeNS(arg1: string, arg2: string): boolean;
				removeAttributeNS(arg1: string, arg2: string): void;
				removeAttributeNode(arg1: org.w3c.dom.IAttr): org.w3c.dom.IAttr;
				setAttributeNS(arg1: string, arg2: string, arg3: string): void;
				setAttributeNode(arg1: org.w3c.dom.IAttr): org.w3c.dom.IAttr;
				setAttributeNodeNS(arg1: org.w3c.dom.IAttr): org.w3c.dom.IAttr;
				setIdAttribute(arg1: string, arg2: boolean): void;
				setIdAttributeNS(arg1: string, arg2: string, arg3: boolean): void;
				setIdAttributeNode(arg1: org.w3c.dom.IAttr, arg2: boolean): void;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface IDOMLocator {
				getByteOffset(): number;
				getUtf16Offset(): number;
				getUri(): string;
				getLineNumber(): number;
				getColumnNumber(): number;
				getRelatedNode(): org.w3c.dom.INode;
			}
			export interface IDocumentFragment extends org.w3c.dom.INode {
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class NamedNodeMap implements org.w3c.dom.INamedNodeMap {
				constructor(implementation: org.w3c.dom.INamedNodeMap);
				getLength(): number;
				item(arg1: number): org.w3c.dom.INode;
				getNamedItem(arg1: java.lang.String): org.w3c.dom.INode;
				getNamedItem(arg1: string): org.w3c.dom.INode;
				getNamedItemNS(arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.INode;
				getNamedItemNS(arg1: string, arg2: string): org.w3c.dom.INode;
				removeNamedItem(arg1: java.lang.String): org.w3c.dom.INode;
				removeNamedItem(arg1: string): org.w3c.dom.INode;
				removeNamedItemNS(arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.INode;
				removeNamedItemNS(arg1: string, arg2: string): org.w3c.dom.INode;
				setNamedItem(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				setNamedItemNS(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
			}
			export interface IDOMStringList {
				contains(arg1: string): boolean;
				getLength(): number;
				item(arg1: number): string;
			}
			export class DOMErrorHandler implements org.w3c.dom.IDOMErrorHandler {
				constructor(implementation: org.w3c.dom.IDOMErrorHandler);
				handleError(arg1: org.w3c.dom.IDOMError): boolean;
			}
			export interface ICharacterData extends org.w3c.dom.INode {
				getLength(): number;
				getData(): string;
				replaceData(arg1: number, arg2: number, arg3: string): void;
				setData(arg1: string): void;
				appendData(arg1: string): void;
				deleteData(arg1: number, arg2: number): void;
				insertData(arg1: number, arg2: string): void;
				substringData(arg1: number, arg2: number): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class DOMException extends java.lang.RuntimeException {
				constructor(arg1: native.Short, arg2: java.lang.String);
				constructor(arg1: native.Short, arg2: string);
				code: native.Short;
				static INDEX_SIZE_ERR: native.Short;
				static DOMSTRING_SIZE_ERR: native.Short;
				static HIERARCHY_REQUEST_ERR: native.Short;
				static WRONG_DOCUMENT_ERR: native.Short;
				static INVALID_CHARACTER_ERR: native.Short;
				static NO_DATA_ALLOWED_ERR: native.Short;
				static NO_MODIFICATION_ALLOWED_ERR: native.Short;
				static NOT_FOUND_ERR: native.Short;
				static NOT_SUPPORTED_ERR: native.Short;
				static INUSE_ATTRIBUTE_ERR: native.Short;
				static INVALID_STATE_ERR: native.Short;
				static SYNTAX_ERR: native.Short;
				static INVALID_MODIFICATION_ERR: native.Short;
				static NAMESPACE_ERR: native.Short;
				static INVALID_ACCESS_ERR: native.Short;
				static VALIDATION_ERR: native.Short;
				static TYPE_MISMATCH_ERR: native.Short;
				static class: java.lang.Class<org.w3c.dom.DOMException>;
			}
			export class EntityReference implements org.w3c.dom.INode, org.w3c.dom.IEntityReference {
				constructor(implementation: org.w3c.dom.IEntityReference);
				Prefix: string;
				NodeValue: string;
				TextContent: string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface IDOMErrorHandler {
				handleError(arg1: org.w3c.dom.IDOMError): boolean;
			}
			export interface IEntity extends org.w3c.dom.INode {
				getPublicId(): string;
				getSystemId(): string;
				getInputEncoding(): string;
				getXmlEncoding(): string;
				getXmlVersion(): string;
				getNotationName(): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class DocumentFragment implements org.w3c.dom.INode, org.w3c.dom.IDocumentFragment {
				constructor(implementation: org.w3c.dom.IDocumentFragment);
				Prefix: string;
				NodeValue: string;
				TextContent: string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface INodeList {
				getLength(): number;
				item(arg1: number): org.w3c.dom.INode;
			}
			export class Comment implements org.w3c.dom.ICharacterData, org.w3c.dom.IComment {
				constructor(implementation: org.w3c.dom.IComment);
				Prefix: string;
				Data: string;
				NodeValue: string;
				TextContent: string;
				getLength(): number;
				getData(): string;
				replaceData(arg1: number, arg2: number, arg3: string): void;
				setData(arg1: string): void;
				appendData(arg1: string): void;
				deleteData(arg1: number, arg2: number): void;
				insertData(arg1: number, arg2: string): void;
				substringData(arg1: number, arg2: number): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface IDocument extends org.w3c.dom.INode {
				adoptNode(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				createAttribute(arg1: string): org.w3c.dom.IAttr;
				createAttributeNS(arg1: string, arg2: string): org.w3c.dom.IAttr;
				createCDATASection(arg1: string): org.w3c.dom.ICDATASection;
				createComment(arg1: string): org.w3c.dom.IComment;
				createDocumentFragment(): org.w3c.dom.IDocumentFragment;
				createElement(arg1: string): org.w3c.dom.IElement;
				createElementNS(arg1: string, arg2: string): org.w3c.dom.IElement;
				createEntityReference(arg1: string): org.w3c.dom.IEntityReference;
				createProcessingInstruction(arg1: string, arg2: string): org.w3c.dom.IProcessingInstruction;
				createTextNode(arg1: string): org.w3c.dom.IText;
				getDoctype(): org.w3c.dom.IDocumentType;
				getDocumentElement(): org.w3c.dom.IElement;
				getDocumentURI(): string;
				getDomConfig(): org.w3c.dom.IDOMConfiguration;
				getElementById(arg1: string): org.w3c.dom.IElement;
				getElementsByTagName(arg1: string): org.w3c.dom.INodeList;
				getElementsByTagNameNS(arg1: string, arg2: string): org.w3c.dom.INodeList;
				getImplementation(): org.w3c.dom.IDOMImplementation;
				getInputEncoding(): string;
				getStrictErrorChecking(): boolean;
				getXmlEncoding(): string;
				getXmlStandalone(): boolean;
				getXmlVersion(): string;
				importNode(arg1: org.w3c.dom.INode, arg2: boolean): org.w3c.dom.INode;
				normalizeDocument(): void;
				renameNode(arg1: org.w3c.dom.INode, arg2: string, arg3: string): org.w3c.dom.INode;
				setDocumentURI(arg1: string): void;
				setStrictErrorChecking(arg1: boolean): void;
				setXmlStandalone(arg1: boolean): void;
				setXmlVersion(arg1: string): void;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class TypeInfo implements org.w3c.dom.ITypeInfo {
				constructor(implementation: org.w3c.dom.ITypeInfo);
				static DERIVATION_RESTRICTION: number;
				static DERIVATION_EXTENSION: number;
				static DERIVATION_UNION: number;
				static DERIVATION_LIST: number;
				getTypeNamespace(): string;
				getTypeName(): string;
				isDerivedFrom(arg1: java.lang.String, arg2: java.lang.String, arg3: number): boolean;
				isDerivedFrom(arg1: string, arg2: string, arg3: number): boolean;
			}
			export interface IProcessingInstruction extends org.w3c.dom.INode {
				getTarget(): string;
				getData(): string;
				setData(arg1: string): void;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface IText extends org.w3c.dom.ICharacterData {
				getWholeText(): string;
				isElementContentWhitespace(): boolean;
				replaceWholeText(arg1: string): org.w3c.dom.IText;
				splitText(arg1: number): org.w3c.dom.IText;
				getLength(): number;
				getData(): string;
				replaceData(arg1: number, arg2: number, arg3: string): void;
				setData(arg1: string): void;
				appendData(arg1: string): void;
				deleteData(arg1: number, arg2: number): void;
				insertData(arg1: number, arg2: string): void;
				substringData(arg1: number, arg2: number): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class Node implements org.w3c.dom.INode {
				constructor(implementation: org.w3c.dom.INode);
				static ELEMENT_NODE: native.Short;
				static ATTRIBUTE_NODE: native.Short;
				static TEXT_NODE: native.Short;
				static CDATA_SECTION_NODE: native.Short;
				static ENTITY_REFERENCE_NODE: native.Short;
				static ENTITY_NODE: native.Short;
				static PROCESSING_INSTRUCTION_NODE: native.Short;
				static COMMENT_NODE: native.Short;
				static DOCUMENT_NODE: native.Short;
				static DOCUMENT_TYPE_NODE: native.Short;
				static DOCUMENT_FRAGMENT_NODE: native.Short;
				static NOTATION_NODE: native.Short;
				static DOCUMENT_POSITION_DISCONNECTED: native.Short;
				static DOCUMENT_POSITION_PRECEDING: native.Short;
				static DOCUMENT_POSITION_FOLLOWING: native.Short;
				static DOCUMENT_POSITION_CONTAINS: native.Short;
				static DOCUMENT_POSITION_CONTAINED_BY: native.Short;
				static DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: native.Short;
				Prefix: string;
				NodeValue: string;
				TextContent: string;
				normalize(): void;
				isSupported(arg1: java.lang.String, arg2: java.lang.String): boolean;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: java.lang.String, arg2: java.lang.String): any;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: java.lang.String): any;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: java.lang.String): boolean;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: java.lang.String): string;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: java.lang.String): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: java.lang.String): void;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: java.lang.String): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: java.lang.String): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: java.lang.String, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface IDOMImplementation {
				createDocument(arg1: string, arg2: string, arg3: org.w3c.dom.IDocumentType): org.w3c.dom.IDocument;
				createDocumentType(arg1: string, arg2: string, arg3: string): org.w3c.dom.IDocumentType;
				hasFeature(arg1: string, arg2: string): boolean;
				getFeature(arg1: string, arg2: string): any;
			}
			export class NodeList implements org.w3c.dom.INodeList {
				constructor(implementation: org.w3c.dom.INodeList);
				getLength(): number;
				item(arg1: number): org.w3c.dom.INode;
			}
			export class DOMImplementationSource implements org.w3c.dom.IDOMImplementationSource {
				constructor(implementation: org.w3c.dom.IDOMImplementationSource);
				getDOMImplementationList(arg1: java.lang.String): org.w3c.dom.IDOMImplementationList;
				getDOMImplementationList(arg1: string): org.w3c.dom.IDOMImplementationList;
				getDOMImplementation(arg1: java.lang.String): org.w3c.dom.IDOMImplementation;
				getDOMImplementation(arg1: string): org.w3c.dom.IDOMImplementation;
			}
			export class Entity implements org.w3c.dom.INode, org.w3c.dom.IEntity {
				constructor(implementation: org.w3c.dom.IEntity);
				Prefix: string;
				NodeValue: string;
				TextContent: string;
				getPublicId(): string;
				getSystemId(): string;
				getInputEncoding(): string;
				getXmlEncoding(): string;
				getXmlVersion(): string;
				getNotationName(): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class DOMConfiguration implements org.w3c.dom.IDOMConfiguration {
				constructor(implementation: org.w3c.dom.IDOMConfiguration);
				canSetParameter(arg1: java.lang.String, arg2: any): boolean;
				canSetParameter(arg1: string, arg2: any): boolean;
				getParameterNames(): org.w3c.dom.IDOMStringList;
				getParameter(arg1: java.lang.String): any;
				getParameter(arg1: string): any;
				setParameter(arg1: java.lang.String, arg2: any): void;
				setParameter(arg1: string, arg2: any): void;
			}
			export class CharacterData implements org.w3c.dom.INode, org.w3c.dom.ICharacterData {
				constructor(implementation: org.w3c.dom.ICharacterData);
				Prefix: string;
				Data: string;
				NodeValue: string;
				TextContent: string;
				getLength(): number;
				getData(): string;
				replaceData(arg1: number, arg2: number, arg3: java.lang.String): void;
				replaceData(arg1: number, arg2: number, arg3: string): void;
				setData(arg1: java.lang.String): void;
				setData(arg1: string): void;
				appendData(arg1: java.lang.String): void;
				appendData(arg1: string): void;
				deleteData(arg1: number, arg2: number): void;
				insertData(arg1: number, arg2: java.lang.String): void;
				insertData(arg1: number, arg2: string): void;
				substringData(arg1: number, arg2: number): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export module ls {
				export interface ILSResourceResolver {
					resolveResource(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): org.w3c.dom.ls.ILSInput;
				}
				export interface ILSParser {
					getAsync(): boolean;
					getBusy(): boolean;
					parseURI(arg1: string): org.w3c.dom.IDocument;
					parseWithContext(arg1: org.w3c.dom.ls.ILSInput, arg2: org.w3c.dom.INode, arg3: native.Short): org.w3c.dom.INode;
					parse(arg1: org.w3c.dom.ls.ILSInput): org.w3c.dom.IDocument;
					getFilter(): org.w3c.dom.ls.ILSParserFilter;
					setFilter(arg1: org.w3c.dom.ls.ILSParserFilter): void;
					abort(): void;
					getDomConfig(): org.w3c.dom.IDOMConfiguration;
				}
				export module ILSParser {
					var ACTION_APPEND_AS_CHILDREN: native.Short;
					var ACTION_REPLACE_CHILDREN: native.Short;
					var ACTION_INSERT_BEFORE: native.Short;
					var ACTION_INSERT_AFTER: native.Short;
					var ACTION_REPLACE: native.Short;
				}
				export class LSInput implements org.w3c.dom.ls.ILSInput {
					constructor(implementation: org.w3c.dom.ls.ILSInput);
					BaseURI: string;
					SystemId: string;
					PublicId: string;
					Encoding: string;
					CharacterStream: java.io.Reader;
					StringData: string;
					CertifiedText: boolean;
					ByteStream: java.io.InputStream;
					getCertifiedText(): boolean;
					getStringData(): string;
					setBaseURI(arg1: java.lang.String): void;
					setBaseURI(arg1: string): void;
					setCertifiedText(arg1: boolean): void;
					setStringData(arg1: java.lang.String): void;
					setStringData(arg1: string): void;
					getEncoding(): string;
					setEncoding(arg1: java.lang.String): void;
					setEncoding(arg1: string): void;
					getBaseURI(): string;
					getByteStream(): java.io.InputStream;
					getCharacterStream(): java.io.Reader;
					getPublicId(): string;
					getSystemId(): string;
					setByteStream(arg1: java.io.InputStream): void;
					setCharacterStream(arg1: java.io.Reader): void;
					setPublicId(arg1: java.lang.String): void;
					setPublicId(arg1: string): void;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
				}
				export class DOMImplementationLS implements org.w3c.dom.ls.IDOMImplementationLS {
					constructor(implementation: org.w3c.dom.ls.IDOMImplementationLS);
					static MODE_SYNCHRONOUS: native.Short;
					static MODE_ASYNCHRONOUS: native.Short;
					createLSInput(): org.w3c.dom.ls.ILSInput;
					createLSOutput(): org.w3c.dom.ls.ILSOutput;
					createLSParser(arg1: native.Short, arg2: java.lang.String): org.w3c.dom.ls.ILSParser;
					createLSParser(arg1: native.Short, arg2: string): org.w3c.dom.ls.ILSParser;
					createLSSerializer(): org.w3c.dom.ls.ILSSerializer;
				}
				export class LSOutput implements org.w3c.dom.ls.ILSOutput {
					constructor(implementation: org.w3c.dom.ls.ILSOutput);
					SystemId: string;
					Encoding: string;
					CharacterStream: java.io.Writer;
					ByteStream: java.io.OutputStream;
					getEncoding(): string;
					setEncoding(arg1: java.lang.String): void;
					setEncoding(arg1: string): void;
					getByteStream(): java.io.OutputStream;
					getCharacterStream(): java.io.Writer;
					getSystemId(): string;
					setByteStream(arg1: java.io.OutputStream): void;
					setCharacterStream(arg1: java.io.Writer): void;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
				}
				export interface ILSParserFilter {
					acceptNode(arg1: org.w3c.dom.INode): number;
					startElement(arg1: org.w3c.dom.IElement): number;
					getWhatToShow(): number;
				}
				export module ILSParserFilter {
					var FILTER_ACCEPT: native.Short;
					var FILTER_REJECT: native.Short;
					var FILTER_SKIP: native.Short;
					var FILTER_INTERRUPT: native.Short;
				}
				export interface ILSSerializer {
					getNewLine(): string;
					setNewLine(arg1: string): void;
					writeToString(arg1: org.w3c.dom.INode): string;
					writeToURI(arg1: org.w3c.dom.INode, arg2: string): boolean;
					write(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.ls.ILSOutput): boolean;
					getDomConfig(): org.w3c.dom.IDOMConfiguration;
				}
				export interface ILSOutput {
					getEncoding(): string;
					setEncoding(arg1: string): void;
					getByteStream(): java.io.OutputStream;
					getCharacterStream(): java.io.Writer;
					getSystemId(): string;
					setByteStream(arg1: java.io.OutputStream): void;
					setCharacterStream(arg1: java.io.Writer): void;
					setSystemId(arg1: string): void;
				}
				export class LSException extends java.lang.RuntimeException {
					constructor(arg1: native.Short, arg2: java.lang.String);
					constructor(arg1: native.Short, arg2: string);
					code: native.Short;
					static PARSE_ERR: native.Short;
					static SERIALIZE_ERR: native.Short;
					static class: java.lang.Class<org.w3c.dom.ls.LSException>;
				}
				export class LSParser implements org.w3c.dom.ls.ILSParser {
					constructor(implementation: org.w3c.dom.ls.ILSParser);
					static ACTION_APPEND_AS_CHILDREN: native.Short;
					static ACTION_REPLACE_CHILDREN: native.Short;
					static ACTION_INSERT_BEFORE: native.Short;
					static ACTION_INSERT_AFTER: native.Short;
					static ACTION_REPLACE: native.Short;
					Filter: org.w3c.dom.ls.ILSParserFilter;
					getAsync(): boolean;
					getBusy(): boolean;
					parseURI(arg1: java.lang.String): org.w3c.dom.IDocument;
					parseURI(arg1: string): org.w3c.dom.IDocument;
					parseWithContext(arg1: org.w3c.dom.ls.ILSInput, arg2: org.w3c.dom.INode, arg3: native.Short): org.w3c.dom.INode;
					parse(arg1: org.w3c.dom.ls.ILSInput): org.w3c.dom.IDocument;
					getFilter(): org.w3c.dom.ls.ILSParserFilter;
					setFilter(arg1: org.w3c.dom.ls.ILSParserFilter): void;
					abort(): void;
					getDomConfig(): org.w3c.dom.IDOMConfiguration;
				}
				export class LSSerializer implements org.w3c.dom.ls.ILSSerializer {
					constructor(implementation: org.w3c.dom.ls.ILSSerializer);
					NewLine: string;
					getNewLine(): string;
					setNewLine(arg1: java.lang.String): void;
					setNewLine(arg1: string): void;
					writeToString(arg1: org.w3c.dom.INode): string;
					writeToURI(arg1: org.w3c.dom.INode, arg2: java.lang.String): boolean;
					writeToURI(arg1: org.w3c.dom.INode, arg2: string): boolean;
					write(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.ls.ILSOutput): boolean;
					getDomConfig(): org.w3c.dom.IDOMConfiguration;
				}
				export class LSResourceResolver implements org.w3c.dom.ls.ILSResourceResolver {
					constructor(implementation: org.w3c.dom.ls.ILSResourceResolver);
					resolveResource(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): org.w3c.dom.ls.ILSInput;
					resolveResource(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): org.w3c.dom.ls.ILSInput;
				}
				export class LSParserFilter implements org.w3c.dom.ls.ILSParserFilter {
					constructor(implementation: org.w3c.dom.ls.ILSParserFilter);
					static FILTER_ACCEPT: native.Short;
					static FILTER_REJECT: native.Short;
					static FILTER_SKIP: native.Short;
					static FILTER_INTERRUPT: native.Short;
					acceptNode(arg1: org.w3c.dom.INode): number;
					startElement(arg1: org.w3c.dom.IElement): number;
					getWhatToShow(): number;
				}
				export interface IDOMImplementationLS {
					createLSInput(): org.w3c.dom.ls.ILSInput;
					createLSOutput(): org.w3c.dom.ls.ILSOutput;
					createLSParser(arg1: native.Short, arg2: string): org.w3c.dom.ls.ILSParser;
					createLSSerializer(): org.w3c.dom.ls.ILSSerializer;
				}
				export module IDOMImplementationLS {
					var MODE_SYNCHRONOUS: native.Short;
					var MODE_ASYNCHRONOUS: native.Short;
				}
				export interface ILSInput {
					getCertifiedText(): boolean;
					getStringData(): string;
					setBaseURI(arg1: string): void;
					setCertifiedText(arg1: boolean): void;
					setStringData(arg1: string): void;
					getEncoding(): string;
					setEncoding(arg1: string): void;
					getBaseURI(): string;
					getByteStream(): java.io.InputStream;
					getCharacterStream(): java.io.Reader;
					getPublicId(): string;
					getSystemId(): string;
					setByteStream(arg1: java.io.InputStream): void;
					setCharacterStream(arg1: java.io.Reader): void;
					setPublicId(arg1: string): void;
					setSystemId(arg1: string): void;
				}
			}
			export interface ICDATASection extends org.w3c.dom.IText {
				getWholeText(): string;
				isElementContentWhitespace(): boolean;
				replaceWholeText(arg1: string): org.w3c.dom.IText;
				splitText(arg1: number): org.w3c.dom.IText;
				getLength(): number;
				getData(): string;
				replaceData(arg1: number, arg2: number, arg3: string): void;
				setData(arg1: string): void;
				appendData(arg1: string): void;
				deleteData(arg1: number, arg2: number): void;
				insertData(arg1: number, arg2: string): void;
				substringData(arg1: number, arg2: number): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class UserDataHandler implements org.w3c.dom.IUserDataHandler {
				constructor(implementation: org.w3c.dom.IUserDataHandler);
				static NODE_CLONED: native.Short;
				static NODE_IMPORTED: native.Short;
				static NODE_DELETED: native.Short;
				static NODE_RENAMED: native.Short;
				static NODE_ADOPTED: native.Short;
				handle(arg1: native.Short, arg2: java.lang.String, arg3: any, arg4: org.w3c.dom.INode, arg5: org.w3c.dom.INode): void;
				handle(arg1: native.Short, arg2: string, arg3: any, arg4: org.w3c.dom.INode, arg5: org.w3c.dom.INode): void;
			}
			export interface IComment extends org.w3c.dom.ICharacterData {
				getLength(): number;
				getData(): string;
				replaceData(arg1: number, arg2: number, arg3: string): void;
				setData(arg1: string): void;
				appendData(arg1: string): void;
				deleteData(arg1: number, arg2: number): void;
				insertData(arg1: number, arg2: string): void;
				substringData(arg1: number, arg2: number): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class DOMImplementation implements org.w3c.dom.IDOMImplementation {
				constructor(implementation: org.w3c.dom.IDOMImplementation);
				createDocument(arg1: java.lang.String, arg2: java.lang.String, arg3: org.w3c.dom.IDocumentType): org.w3c.dom.IDocument;
				createDocument(arg1: string, arg2: string, arg3: org.w3c.dom.IDocumentType): org.w3c.dom.IDocument;
				createDocumentType(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): org.w3c.dom.IDocumentType;
				createDocumentType(arg1: string, arg2: string, arg3: string): org.w3c.dom.IDocumentType;
				hasFeature(arg1: java.lang.String, arg2: java.lang.String): boolean;
				hasFeature(arg1: string, arg2: string): boolean;
				getFeature(arg1: java.lang.String, arg2: java.lang.String): any;
				getFeature(arg1: string, arg2: string): any;
			}
			export class DocumentType implements org.w3c.dom.INode, org.w3c.dom.IDocumentType {
				constructor(implementation: org.w3c.dom.IDocumentType);
				Prefix: string;
				NodeValue: string;
				TextContent: string;
				getName(): string;
				getPublicId(): string;
				getSystemId(): string;
				getEntities(): org.w3c.dom.INamedNodeMap;
				getInternalSubset(): string;
				getNotations(): org.w3c.dom.INamedNodeMap;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class NameList implements org.w3c.dom.INameList {
				constructor(implementation: org.w3c.dom.INameList);
				containsNS(arg1: java.lang.String, arg2: java.lang.String): boolean;
				containsNS(arg1: string, arg2: string): boolean;
				getName(arg1: number): string;
				contains(arg1: java.lang.String): boolean;
				contains(arg1: string): boolean;
				getLength(): number;
				getNamespaceURI(arg1: number): string;
			}
			export interface INameList {
				containsNS(arg1: string, arg2: string): boolean;
				getName(arg1: number): string;
				contains(arg1: string): boolean;
				getLength(): number;
				getNamespaceURI(arg1: number): string;
			}
			export interface IDOMImplementationSource {
				getDOMImplementationList(arg1: string): org.w3c.dom.IDOMImplementationList;
				getDOMImplementation(arg1: string): org.w3c.dom.IDOMImplementation;
			}
			export class DOMLocator implements org.w3c.dom.IDOMLocator {
				constructor(implementation: org.w3c.dom.IDOMLocator);
				getByteOffset(): number;
				getUtf16Offset(): number;
				getUri(): string;
				getLineNumber(): number;
				getColumnNumber(): number;
				getRelatedNode(): org.w3c.dom.INode;
			}
			export interface IAttr extends org.w3c.dom.INode {
				getName(): string;
				getValue(): string;
				setValue(arg1: string): void;
				getSchemaTypeInfo(): org.w3c.dom.ITypeInfo;
				getOwnerElement(): org.w3c.dom.IElement;
				getSpecified(): boolean;
				isId(): boolean;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class Document implements org.w3c.dom.INode, org.w3c.dom.IDocument {
				constructor(implementation: org.w3c.dom.IDocument);
				StrictErrorChecking: boolean;
				XmlStandalone: boolean;
				NodeValue: string;
				XmlVersion: string;
				Prefix: string;
				DocumentURI: string;
				TextContent: string;
				adoptNode(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				createAttribute(arg1: java.lang.String): org.w3c.dom.IAttr;
				createAttribute(arg1: string): org.w3c.dom.IAttr;
				createAttributeNS(arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.IAttr;
				createAttributeNS(arg1: string, arg2: string): org.w3c.dom.IAttr;
				createCDATASection(arg1: java.lang.String): org.w3c.dom.ICDATASection;
				createCDATASection(arg1: string): org.w3c.dom.ICDATASection;
				createComment(arg1: java.lang.String): org.w3c.dom.IComment;
				createComment(arg1: string): org.w3c.dom.IComment;
				createDocumentFragment(): org.w3c.dom.IDocumentFragment;
				createElement(arg1: java.lang.String): org.w3c.dom.IElement;
				createElement(arg1: string): org.w3c.dom.IElement;
				createElementNS(arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.IElement;
				createElementNS(arg1: string, arg2: string): org.w3c.dom.IElement;
				createEntityReference(arg1: java.lang.String): org.w3c.dom.IEntityReference;
				createEntityReference(arg1: string): org.w3c.dom.IEntityReference;
				createProcessingInstruction(arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.IProcessingInstruction;
				createProcessingInstruction(arg1: string, arg2: string): org.w3c.dom.IProcessingInstruction;
				createTextNode(arg1: java.lang.String): org.w3c.dom.IText;
				createTextNode(arg1: string): org.w3c.dom.IText;
				getDoctype(): org.w3c.dom.IDocumentType;
				getDocumentElement(): org.w3c.dom.IElement;
				getDocumentURI(): string;
				getDomConfig(): org.w3c.dom.IDOMConfiguration;
				getElementById(arg1: java.lang.String): org.w3c.dom.IElement;
				getElementById(arg1: string): org.w3c.dom.IElement;
				getElementsByTagName(arg1: java.lang.String): org.w3c.dom.INodeList;
				getElementsByTagName(arg1: string): org.w3c.dom.INodeList;
				getElementsByTagNameNS(arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.INodeList;
				getElementsByTagNameNS(arg1: string, arg2: string): org.w3c.dom.INodeList;
				getImplementation(): org.w3c.dom.IDOMImplementation;
				getInputEncoding(): string;
				getStrictErrorChecking(): boolean;
				getXmlEncoding(): string;
				getXmlStandalone(): boolean;
				getXmlVersion(): string;
				importNode(arg1: org.w3c.dom.INode, arg2: boolean): org.w3c.dom.INode;
				normalizeDocument(): void;
				renameNode(arg1: org.w3c.dom.INode, arg2: java.lang.String, arg3: java.lang.String): org.w3c.dom.INode;
				renameNode(arg1: org.w3c.dom.INode, arg2: string, arg3: string): org.w3c.dom.INode;
				setDocumentURI(arg1: java.lang.String): void;
				setDocumentURI(arg1: string): void;
				setStrictErrorChecking(arg1: boolean): void;
				setXmlStandalone(arg1: boolean): void;
				setXmlVersion(arg1: java.lang.String): void;
				setXmlVersion(arg1: string): void;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface IUserDataHandler {
				handle(arg1: native.Short, arg2: string, arg3: any, arg4: org.w3c.dom.INode, arg5: org.w3c.dom.INode): void;
			}
			export module IUserDataHandler {
				var NODE_CLONED: native.Short;
				var NODE_IMPORTED: native.Short;
				var NODE_DELETED: native.Short;
				var NODE_RENAMED: native.Short;
				var NODE_ADOPTED: native.Short;
			}
			export interface INode {
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export module INode {
				var ELEMENT_NODE: native.Short;
				var ATTRIBUTE_NODE: native.Short;
				var TEXT_NODE: native.Short;
				var CDATA_SECTION_NODE: native.Short;
				var ENTITY_REFERENCE_NODE: native.Short;
				var ENTITY_NODE: native.Short;
				var PROCESSING_INSTRUCTION_NODE: native.Short;
				var COMMENT_NODE: native.Short;
				var DOCUMENT_NODE: native.Short;
				var DOCUMENT_TYPE_NODE: native.Short;
				var DOCUMENT_FRAGMENT_NODE: native.Short;
				var NOTATION_NODE: native.Short;
				var DOCUMENT_POSITION_DISCONNECTED: native.Short;
				var DOCUMENT_POSITION_PRECEDING: native.Short;
				var DOCUMENT_POSITION_FOLLOWING: native.Short;
				var DOCUMENT_POSITION_CONTAINS: native.Short;
				var DOCUMENT_POSITION_CONTAINED_BY: native.Short;
				var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: native.Short;
			}
			export class Notation implements org.w3c.dom.INode, org.w3c.dom.INotation {
				constructor(implementation: org.w3c.dom.INotation);
				Prefix: string;
				NodeValue: string;
				TextContent: string;
				getPublicId(): string;
				getSystemId(): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface ITypeInfo {
				getTypeNamespace(): string;
				getTypeName(): string;
				isDerivedFrom(arg1: string, arg2: string, arg3: number): boolean;
			}
			export module ITypeInfo {
				var DERIVATION_RESTRICTION: number;
				var DERIVATION_EXTENSION: number;
				var DERIVATION_UNION: number;
				var DERIVATION_LIST: number;
			}
			export class Text implements org.w3c.dom.ICharacterData, org.w3c.dom.IText {
				constructor(implementation: org.w3c.dom.IText);
				Prefix: string;
				Data: string;
				NodeValue: string;
				TextContent: string;
				getWholeText(): string;
				isElementContentWhitespace(): boolean;
				replaceWholeText(arg1: java.lang.String): org.w3c.dom.IText;
				replaceWholeText(arg1: string): org.w3c.dom.IText;
				splitText(arg1: number): org.w3c.dom.IText;
				getLength(): number;
				getData(): string;
				replaceData(arg1: number, arg2: number, arg3: string): void;
				setData(arg1: string): void;
				appendData(arg1: string): void;
				deleteData(arg1: number, arg2: number): void;
				insertData(arg1: number, arg2: string): void;
				substringData(arg1: number, arg2: number): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class CDATASection implements org.w3c.dom.IText, org.w3c.dom.ICDATASection {
				constructor(implementation: org.w3c.dom.ICDATASection);
				Prefix: string;
				Data: string;
				NodeValue: string;
				TextContent: string;
				getWholeText(): string;
				isElementContentWhitespace(): boolean;
				replaceWholeText(arg1: string): org.w3c.dom.IText;
				splitText(arg1: number): org.w3c.dom.IText;
				getLength(): number;
				getData(): string;
				replaceData(arg1: number, arg2: number, arg3: string): void;
				setData(arg1: string): void;
				appendData(arg1: string): void;
				deleteData(arg1: number, arg2: number): void;
				insertData(arg1: number, arg2: string): void;
				substringData(arg1: number, arg2: number): string;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface IDocumentType extends org.w3c.dom.INode {
				getName(): string;
				getPublicId(): string;
				getSystemId(): string;
				getEntities(): org.w3c.dom.INamedNodeMap;
				getInternalSubset(): string;
				getNotations(): org.w3c.dom.INamedNodeMap;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export interface IDOMImplementationList {
				getLength(): number;
				item(arg1: number): org.w3c.dom.IDOMImplementation;
			}
			export interface INamedNodeMap {
				getLength(): number;
				item(arg1: number): org.w3c.dom.INode;
				getNamedItem(arg1: string): org.w3c.dom.INode;
				getNamedItemNS(arg1: string, arg2: string): org.w3c.dom.INode;
				removeNamedItem(arg1: string): org.w3c.dom.INode;
				removeNamedItemNS(arg1: string, arg2: string): org.w3c.dom.INode;
				setNamedItem(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				setNamedItemNS(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
			}
			export interface IDOMError {
				getRelatedData(): any;
				getRelatedException(): any;
				getSeverity(): number;
				getLocation(): org.w3c.dom.IDOMLocator;
				getMessage(): string;
				getType(): string;
			}
			export module IDOMError {
				var SEVERITY_WARNING: native.Short;
				var SEVERITY_ERROR: native.Short;
				var SEVERITY_FATAL_ERROR: native.Short;
			}
			export interface IEntityReference extends org.w3c.dom.INode {
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class DOMError implements org.w3c.dom.IDOMError {
				constructor(implementation: org.w3c.dom.IDOMError);
				static SEVERITY_WARNING: native.Short;
				static SEVERITY_ERROR: native.Short;
				static SEVERITY_FATAL_ERROR: native.Short;
				getRelatedData(): any;
				getRelatedException(): any;
				getSeverity(): number;
				getLocation(): org.w3c.dom.IDOMLocator;
				getMessage(): string;
				getType(): string;
			}
			export class DOMStringList implements org.w3c.dom.IDOMStringList {
				constructor(implementation: org.w3c.dom.IDOMStringList);
				contains(arg1: java.lang.String): boolean;
				contains(arg1: string): boolean;
				getLength(): number;
				item(arg1: number): string;
			}
			export class ProcessingInstruction implements org.w3c.dom.INode, org.w3c.dom.IProcessingInstruction {
				constructor(implementation: org.w3c.dom.IProcessingInstruction);
				Prefix: string;
				Data: string;
				NodeValue: string;
				TextContent: string;
				getTarget(): string;
				getData(): string;
				setData(arg1: java.lang.String): void;
				setData(arg1: string): void;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
			export class Element implements org.w3c.dom.INode, org.w3c.dom.IElement {
				constructor(implementation: org.w3c.dom.IElement);
				Prefix: string;
				NodeValue: string;
				TextContent: string;
				getAttribute(arg1: java.lang.String): string;
				getAttribute(arg1: string): string;
				removeAttribute(arg1: java.lang.String): void;
				removeAttribute(arg1: string): void;
				setAttribute(arg1: java.lang.String, arg2: java.lang.String): void;
				setAttribute(arg1: string, arg2: string): void;
				getElementsByTagName(arg1: java.lang.String): org.w3c.dom.INodeList;
				getElementsByTagName(arg1: string): org.w3c.dom.INodeList;
				getElementsByTagNameNS(arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.INodeList;
				getElementsByTagNameNS(arg1: string, arg2: string): org.w3c.dom.INodeList;
				getAttributeNS(arg1: java.lang.String, arg2: java.lang.String): string;
				getAttributeNS(arg1: string, arg2: string): string;
				getAttributeNode(arg1: java.lang.String): org.w3c.dom.IAttr;
				getAttributeNode(arg1: string): org.w3c.dom.IAttr;
				getAttributeNodeNS(arg1: java.lang.String, arg2: java.lang.String): org.w3c.dom.IAttr;
				getAttributeNodeNS(arg1: string, arg2: string): org.w3c.dom.IAttr;
				getSchemaTypeInfo(): org.w3c.dom.ITypeInfo;
				getTagName(): string;
				hasAttribute(arg1: java.lang.String): boolean;
				hasAttribute(arg1: string): boolean;
				hasAttributeNS(arg1: java.lang.String, arg2: java.lang.String): boolean;
				hasAttributeNS(arg1: string, arg2: string): boolean;
				removeAttributeNS(arg1: java.lang.String, arg2: java.lang.String): void;
				removeAttributeNS(arg1: string, arg2: string): void;
				removeAttributeNode(arg1: org.w3c.dom.IAttr): org.w3c.dom.IAttr;
				setAttributeNS(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
				setAttributeNS(arg1: string, arg2: string, arg3: string): void;
				setAttributeNode(arg1: org.w3c.dom.IAttr): org.w3c.dom.IAttr;
				setAttributeNodeNS(arg1: org.w3c.dom.IAttr): org.w3c.dom.IAttr;
				setIdAttribute(arg1: java.lang.String, arg2: boolean): void;
				setIdAttribute(arg1: string, arg2: boolean): void;
				setIdAttributeNS(arg1: java.lang.String, arg2: java.lang.String, arg3: boolean): void;
				setIdAttributeNS(arg1: string, arg2: string, arg3: boolean): void;
				setIdAttributeNode(arg1: org.w3c.dom.IAttr, arg2: boolean): void;
				normalize(): void;
				isSupported(arg1: string, arg2: string): boolean;
				getAttributes(): org.w3c.dom.INamedNodeMap;
				appendChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				cloneNode(arg1: boolean): org.w3c.dom.INode;
				compareDocumentPosition(arg1: org.w3c.dom.INode): number;
				getBaseURI(): string;
				getChildNodes(): org.w3c.dom.INodeList;
				getFeature(arg1: string, arg2: string): any;
				getFirstChild(): org.w3c.dom.INode;
				getLastChild(): org.w3c.dom.INode;
				getLocalName(): string;
				getNamespaceURI(): string;
				getNextSibling(): org.w3c.dom.INode;
				getNodeName(): string;
				getNodeType(): number;
				getNodeValue(): string;
				getOwnerDocument(): org.w3c.dom.IDocument;
				getParentNode(): org.w3c.dom.INode;
				getPrefix(): string;
				getPreviousSibling(): org.w3c.dom.INode;
				getTextContent(): string;
				getUserData(arg1: string): any;
				hasAttributes(): boolean;
				hasChildNodes(): boolean;
				insertBefore(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				isDefaultNamespace(arg1: string): boolean;
				isEqualNode(arg1: org.w3c.dom.INode): boolean;
				isSameNode(arg1: org.w3c.dom.INode): boolean;
				lookupNamespaceURI(arg1: string): string;
				lookupPrefix(arg1: string): string;
				removeChild(arg1: org.w3c.dom.INode): org.w3c.dom.INode;
				replaceChild(arg1: org.w3c.dom.INode, arg2: org.w3c.dom.INode): org.w3c.dom.INode;
				setNodeValue(arg1: string): void;
				setPrefix(arg1: string): void;
				setTextContent(arg1: string): void;
				setUserData(arg1: string, arg2: any, arg3: org.w3c.dom.IUserDataHandler): any;
			}
		}
	}
	export module json {
		export class JSONStringer extends java.lang.Object {
			constructor();
			static class: java.lang.Class<org.json.JSONStringer>;
			endArray(): org.json.JSONStringer;
			endObject(): org.json.JSONStringer;
			toString(): string;
			value(arg1: native.Long): org.json.JSONStringer;
			value(arg1: any): org.json.JSONStringer;
			value(arg1: boolean): org.json.JSONStringer;
			value(arg1: native.Double): org.json.JSONStringer;
			value(arg1: number): org.json.JSONStringer;
			array(): org.json.JSONStringer;
			key(arg1: java.lang.String): org.json.JSONStringer;
			key(arg1: string): org.json.JSONStringer;
			object(): org.json.JSONStringer;
		}
		export class JSONArray extends java.lang.Object {
			constructor(arg1: java.util.ICollection<any>);
			constructor();
			constructor(arg1: org.json.JSONTokener);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<org.json.JSONArray>;
			optBoolean(arg1: number, arg2: boolean): boolean;
			optBoolean(arg1: number): boolean;
			optInt(arg1: number): number;
			optInt(arg1: number, arg2: number): number;
			getJSONArray(arg1: number): org.json.JSONArray;
			optDouble(arg1: number, arg2: native.Double): any;
			optDouble(arg1: number, arg2: number): any;
			optDouble(arg1: number): any;
			optLong(arg1: number, arg2: native.Long): any;
			optLong(arg1: number): any;
			optString(arg1: number): string;
			optString(arg1: number, arg2: java.lang.String): string;
			optString(arg1: number, arg2: string): string;
			toJSONObject(arg1: org.json.JSONArray): org.json.JSONObject;
			optJSONObject(arg1: number): org.json.JSONObject;
			getJSONObject(arg1: number): org.json.JSONObject;
			optJSONArray(arg1: number): org.json.JSONArray;
			opt(arg1: number): any;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			toString(arg1: number): string;
			get(arg1: number): any;
			length(): number;
			put(arg1: native.Long): org.json.JSONArray;
			put(arg1: number, arg2: boolean): org.json.JSONArray;
			put(arg1: number): org.json.JSONArray;
			put(arg1: native.Double): org.json.JSONArray;
			put(arg1: boolean): org.json.JSONArray;
			put(arg1: number, arg2: any): org.json.JSONArray;
			put(arg1: any): org.json.JSONArray;
			put(arg1: number, arg2: number): org.json.JSONArray;
			put(arg1: number, arg2: native.Double): org.json.JSONArray;
			put(arg1: number, arg2: native.Long): org.json.JSONArray;
			join(arg1: java.lang.String): string;
			join(arg1: string): string;
			getBoolean(arg1: number): boolean;
			getDouble(arg1: number): any;
			getInt(arg1: number): number;
			getLong(arg1: number): any;
			getString(arg1: number): string;
			isNull(arg1: number): boolean;
		}
		export class JSONObject extends java.lang.Object {
			constructor();
			constructor(arg1: org.json.JSONTokener);
			constructor(arg1: java.util.IMap<any, any>);
			constructor(arg1: org.json.JSONObject, arg2: native.Array<java.lang.String>);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static NULL: any;
			static class: java.lang.Class<org.json.JSONObject>;
			static numberToString(arg1: java.lang.Number): string;
			optBoolean(arg1: java.lang.String, arg2: boolean): boolean;
			optBoolean(arg1: string, arg2: boolean): boolean;
			optBoolean(arg1: java.lang.String): boolean;
			optBoolean(arg1: string): boolean;
			optInt(arg1: java.lang.String, arg2: number): number;
			optInt(arg1: string, arg2: number): number;
			optInt(arg1: java.lang.String): number;
			optInt(arg1: string): number;
			getJSONArray(arg1: java.lang.String): org.json.JSONArray;
			getJSONArray(arg1: string): org.json.JSONArray;
			optDouble(arg1: java.lang.String, arg2: native.Double): any;
			optDouble(arg1: string, arg2: number): any;
			optDouble(arg1: java.lang.String): any;
			optDouble(arg1: string): any;
			optLong(arg1: java.lang.String, arg2: native.Long): any;
			optLong(arg1: string, arg2: native.Long): any;
			optLong(arg1: java.lang.String): any;
			optLong(arg1: string): any;
			optString(arg1: java.lang.String): string;
			optString(arg1: string): string;
			optString(arg1: java.lang.String, arg2: java.lang.String): string;
			optString(arg1: string, arg2: string): string;
			toJSONArray(arg1: org.json.JSONArray): org.json.JSONArray;
			optJSONObject(arg1: java.lang.String): org.json.JSONObject;
			optJSONObject(arg1: string): org.json.JSONObject;
			getJSONObject(arg1: java.lang.String): org.json.JSONObject;
			getJSONObject(arg1: string): org.json.JSONObject;
			putOpt(arg1: java.lang.String, arg2: any): org.json.JSONObject;
			putOpt(arg1: string, arg2: any): org.json.JSONObject;
			optJSONArray(arg1: java.lang.String): org.json.JSONArray;
			optJSONArray(arg1: string): org.json.JSONArray;
			opt(arg1: java.lang.String): any;
			opt(arg1: string): any;
			toString(): string;
			toString(arg1: number): string;
			get(arg1: java.lang.String): any;
			get(arg1: string): any;
			length(): number;
			put(arg1: java.lang.String, arg2: native.Double): org.json.JSONObject;
			put(arg1: string, arg2: number): org.json.JSONObject;
			put(arg1: java.lang.String, arg2: number): org.json.JSONObject;
			put(arg1: java.lang.String, arg2: boolean): org.json.JSONObject;
			put(arg1: string, arg2: boolean): org.json.JSONObject;
			put(arg1: java.lang.String, arg2: any): org.json.JSONObject;
			put(arg1: string, arg2: any): org.json.JSONObject;
			put(arg1: java.lang.String, arg2: native.Long): org.json.JSONObject;
			put(arg1: string, arg2: native.Long): org.json.JSONObject;
			remove(arg1: java.lang.String): any;
			remove(arg1: string): any;
			keys(): java.util.IIterator<any>;
			getBoolean(arg1: java.lang.String): boolean;
			getBoolean(arg1: string): boolean;
			getDouble(arg1: java.lang.String): any;
			getDouble(arg1: string): any;
			getInt(arg1: java.lang.String): number;
			getInt(arg1: string): number;
			getLong(arg1: java.lang.String): any;
			getLong(arg1: string): any;
			names(): org.json.JSONArray;
			getString(arg1: java.lang.String): string;
			getString(arg1: string): string;
			static quote(arg1: java.lang.String): string;
			static quote(arg1: string): string;
			isNull(arg1: java.lang.String): boolean;
			isNull(arg1: string): boolean;
			accumulate(arg1: java.lang.String, arg2: any): org.json.JSONObject;
			accumulate(arg1: string, arg2: any): org.json.JSONObject;
			has(arg1: java.lang.String): boolean;
			has(arg1: string): boolean;
		}
		export class JSONTokener extends java.lang.Object {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<org.json.JSONTokener>;
			nextString(arg1: string): string;
			more(): boolean;
			static dehexchar(arg1: string): number;
			nextClean(): string;
			nextValue(): any;
			skipPast(arg1: java.lang.String): void;
			skipPast(arg1: string): void;
			nextTo(arg1: string): string;
			nextTo(arg1: java.lang.String): string;
			skipTo(arg1: string): string;
			back(): void;
			toString(): string;
			next(arg1: number): string;
			next(): string;
			next(arg1: string): string;
			syntaxError(arg1: java.lang.String): org.json.JSONException;
			syntaxError(arg1: string): org.json.JSONException;
		}
		export class JSONException extends java.lang.Exception {
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<org.json.JSONException>;
		}
	}
	export module xml {
		export module sax {
			export class Attributes implements org.xml.sax.IAttributes {
				constructor(implementation: org.xml.sax.IAttributes);
				getQName(arg1: number): string;
				getURI(arg1: number): string;
				getValue(arg1: java.lang.String): string;
				getValue(arg1: string): string;
				getValue(arg1: number): string;
				getValue(arg1: java.lang.String, arg2: java.lang.String): string;
				getValue(arg1: string, arg2: string): string;
				getType(arg1: java.lang.String, arg2: java.lang.String): string;
				getType(arg1: string, arg2: string): string;
				getType(arg1: java.lang.String): string;
				getType(arg1: string): string;
				getType(arg1: number): string;
				getLength(): number;
				getIndex(arg1: java.lang.String, arg2: java.lang.String): number;
				getIndex(arg1: string, arg2: string): number;
				getIndex(arg1: java.lang.String): number;
				getIndex(arg1: string): number;
				getLocalName(arg1: number): string;
			}
			export class Parser implements org.xml.sax.IParser {
				constructor(implementation: org.xml.sax.IParser);
				setDocumentHandler(arg1: org.xml.sax.IDocumentHandler): void;
				setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
				parse(arg1: org.xml.sax.InputSource): void;
				parse(arg1: java.lang.String): void;
				parse(arg1: string): void;
				setLocale(arg1: java.util.Locale): void;
				setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
			export class AttributeList implements org.xml.sax.IAttributeList {
				constructor(implementation: org.xml.sax.IAttributeList);
				getName(arg1: number): string;
				getValue(arg1: java.lang.String): string;
				getValue(arg1: string): string;
				getValue(arg1: number): string;
				getType(arg1: number): string;
				getType(arg1: java.lang.String): string;
				getType(arg1: string): string;
				getLength(): number;
			}
			export class DTDHandler implements org.xml.sax.IDTDHandler {
				constructor(implementation: org.xml.sax.IDTDHandler);
				notationDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
				notationDecl(arg1: string, arg2: string, arg3: string): void;
				unparsedEntityDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void;
				unparsedEntityDecl(arg1: string, arg2: string, arg3: string, arg4: string): void;
			}
			export interface IAttributes {
				getQName(arg1: number): string;
				getURI(arg1: number): string;
				getValue(arg1: string): string;
				getValue(arg1: number): string;
				getValue(arg1: string, arg2: string): string;
				getType(arg1: string, arg2: string): string;
				getType(arg1: string): string;
				getType(arg1: number): string;
				getLength(): number;
				getIndex(arg1: string, arg2: string): number;
				getIndex(arg1: string): number;
				getLocalName(arg1: number): string;
			}
			export class ErrorHandler implements org.xml.sax.IErrorHandler {
				constructor(implementation: org.xml.sax.IErrorHandler);
				error(arg1: org.xml.sax.SAXParseException): void;
				warning(arg1: org.xml.sax.SAXParseException): void;
				fatalError(arg1: org.xml.sax.SAXParseException): void;
			}
			export class SAXException extends java.lang.Exception {
				constructor(arg1: java.lang.String, arg2: java.lang.Exception);
				constructor(arg1: string, arg2: java.lang.Exception);
				constructor(arg1: java.lang.Exception);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<org.xml.sax.SAXException>;
				toString(): string;
				getCause(): java.lang.Throwable;
				getMessage(): string;
				getException(): java.lang.Exception;
			}
			export class DocumentHandler implements org.xml.sax.IDocumentHandler {
				constructor(implementation: org.xml.sax.IDocumentHandler);
				characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
				endDocument(): void;
				endElement(arg1: java.lang.String): void;
				endElement(arg1: string): void;
				ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
				processingInstruction(arg1: java.lang.String, arg2: java.lang.String): void;
				processingInstruction(arg1: string, arg2: string): void;
				setDocumentLocator(arg1: org.xml.sax.ILocator): void;
				startDocument(): void;
				startElement(arg1: java.lang.String, arg2: org.xml.sax.IAttributeList): void;
				startElement(arg1: string, arg2: org.xml.sax.IAttributeList): void;
			}
			export class EntityResolver implements org.xml.sax.IEntityResolver {
				constructor(implementation: org.xml.sax.IEntityResolver);
				resolveEntity(arg1: java.lang.String, arg2: java.lang.String): org.xml.sax.InputSource;
				resolveEntity(arg1: string, arg2: string): org.xml.sax.InputSource;
			}
			export module ext {
				export interface IDeclHandler {
					attributeDecl(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): void;
					elementDecl(arg1: string, arg2: string): void;
					externalEntityDecl(arg1: string, arg2: string, arg3: string): void;
					internalEntityDecl(arg1: string, arg2: string): void;
				}
				export class DefaultHandler2 extends org.xml.sax.helpers.DefaultHandler implements org.xml.sax.ext.ILexicalHandler, org.xml.sax.ext.IDeclHandler, org.xml.sax.ext.IEntityResolver2 {
					constructor();
					static class: java.lang.Class<org.xml.sax.ext.DefaultHandler2>;
					getExternalSubset(arg1: java.lang.String, arg2: java.lang.String): org.xml.sax.InputSource;
					getExternalSubset(arg1: string, arg2: string): org.xml.sax.InputSource;
					attributeDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): void;
					attributeDecl(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): void;
					elementDecl(arg1: java.lang.String, arg2: java.lang.String): void;
					elementDecl(arg1: string, arg2: string): void;
					externalEntityDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					externalEntityDecl(arg1: string, arg2: string, arg3: string): void;
					internalEntityDecl(arg1: java.lang.String, arg2: java.lang.String): void;
					internalEntityDecl(arg1: string, arg2: string): void;
					endCDATA(): void;
					endDTD(): void;
					endEntity(arg1: java.lang.String): void;
					endEntity(arg1: string): void;
					startCDATA(): void;
					startDTD(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					startDTD(arg1: string, arg2: string, arg3: string): void;
					startEntity(arg1: java.lang.String): void;
					startEntity(arg1: string): void;
					comment(arg1: native.Array<string>, arg2: number, arg3: number): void;
					resolveEntity(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): org.xml.sax.InputSource;
					resolveEntity(arg1: string, arg2: string, arg3: string, arg4: string): org.xml.sax.InputSource;
					resolveEntity(arg1: java.lang.String, arg2: java.lang.String): org.xml.sax.InputSource;
					resolveEntity(arg1: string, arg2: string): org.xml.sax.InputSource;
				}
				export class Locator2Impl extends org.xml.sax.helpers.LocatorImpl implements org.xml.sax.ext.ILocator2 {
					constructor(arg1: org.xml.sax.ILocator);
					constructor();
					static class: java.lang.Class<org.xml.sax.ext.Locator2Impl>;
					XMLVersion: string;
					Encoding: string;
					getXMLVersion(): string;
					setXMLVersion(arg1: java.lang.String): void;
					setXMLVersion(arg1: string): void;
					getEncoding(): string;
					setEncoding(arg1: java.lang.String): void;
					setEncoding(arg1: string): void;
					getLineNumber(): number;
					getPublicId(): string;
					getSystemId(): string;
					getColumnNumber(): number;
				}
				export interface ILexicalHandler {
					endCDATA(): void;
					endDTD(): void;
					endEntity(arg1: string): void;
					startCDATA(): void;
					startDTD(arg1: string, arg2: string, arg3: string): void;
					startEntity(arg1: string): void;
					comment(arg1: native.Array<string>, arg2: number, arg3: number): void;
				}
				export interface IEntityResolver2 extends org.xml.sax.IEntityResolver {
					getExternalSubset(arg1: string, arg2: string): org.xml.sax.InputSource;
					resolveEntity(arg1: string, arg2: string, arg3: string, arg4: string): org.xml.sax.InputSource;
					resolveEntity(arg1: string, arg2: string): org.xml.sax.InputSource;
				}
				export class Locator2 implements org.xml.sax.ILocator, org.xml.sax.ext.ILocator2 {
					constructor(implementation: org.xml.sax.ext.ILocator2);
					getXMLVersion(): string;
					getEncoding(): string;
					getLineNumber(): number;
					getPublicId(): string;
					getSystemId(): string;
					getColumnNumber(): number;
				}
				export interface IAttributes2 extends org.xml.sax.IAttributes {
					isDeclared(arg1: string, arg2: string): boolean;
					isDeclared(arg1: string): boolean;
					isDeclared(arg1: number): boolean;
					isSpecified(arg1: string): boolean;
					isSpecified(arg1: string, arg2: string): boolean;
					isSpecified(arg1: number): boolean;
					getQName(arg1: number): string;
					getURI(arg1: number): string;
					getValue(arg1: string): string;
					getValue(arg1: number): string;
					getValue(arg1: string, arg2: string): string;
					getType(arg1: string, arg2: string): string;
					getType(arg1: string): string;
					getType(arg1: number): string;
					getLength(): number;
					getIndex(arg1: string, arg2: string): number;
					getIndex(arg1: string): number;
					getLocalName(arg1: number): string;
				}
				export class EntityResolver2 implements org.xml.sax.IEntityResolver, org.xml.sax.ext.IEntityResolver2 {
					constructor(implementation: org.xml.sax.ext.IEntityResolver2);
					getExternalSubset(arg1: java.lang.String, arg2: java.lang.String): org.xml.sax.InputSource;
					getExternalSubset(arg1: string, arg2: string): org.xml.sax.InputSource;
					resolveEntity(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): org.xml.sax.InputSource;
					resolveEntity(arg1: string, arg2: string, arg3: string, arg4: string): org.xml.sax.InputSource;
					resolveEntity(arg1: string, arg2: string): org.xml.sax.InputSource;
				}
				export class LexicalHandler implements org.xml.sax.ext.ILexicalHandler {
					constructor(implementation: org.xml.sax.ext.ILexicalHandler);
					endCDATA(): void;
					endDTD(): void;
					endEntity(arg1: java.lang.String): void;
					endEntity(arg1: string): void;
					startCDATA(): void;
					startDTD(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					startDTD(arg1: string, arg2: string, arg3: string): void;
					startEntity(arg1: java.lang.String): void;
					startEntity(arg1: string): void;
					comment(arg1: native.Array<string>, arg2: number, arg3: number): void;
				}
				export class Attributes2Impl extends org.xml.sax.helpers.AttributesImpl implements org.xml.sax.ext.IAttributes2 {
					constructor();
					constructor(arg1: org.xml.sax.IAttributes);
					static class: java.lang.Class<org.xml.sax.ext.Attributes2Impl>;
					isDeclared(arg1: java.lang.String): boolean;
					isDeclared(arg1: string): boolean;
					isDeclared(arg1: number): boolean;
					isDeclared(arg1: java.lang.String, arg2: java.lang.String): boolean;
					isDeclared(arg1: string, arg2: string): boolean;
					isSpecified(arg1: number): boolean;
					isSpecified(arg1: java.lang.String): boolean;
					isSpecified(arg1: string): boolean;
					isSpecified(arg1: java.lang.String, arg2: java.lang.String): boolean;
					isSpecified(arg1: string, arg2: string): boolean;
					setDeclared(arg1: number, arg2: boolean): void;
					setSpecified(arg1: number, arg2: boolean): void;
					setAttributes(arg1: org.xml.sax.IAttributes): void;
					addAttribute(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): void;
					addAttribute(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): void;
					removeAttribute(arg1: number): void;
					getQName(arg1: number): string;
					getURI(arg1: number): string;
					getValue(arg1: string): string;
					getValue(arg1: number): string;
					getValue(arg1: string, arg2: string): string;
					getType(arg1: string, arg2: string): string;
					getType(arg1: string): string;
					getType(arg1: number): string;
					getLength(): number;
					getIndex(arg1: string, arg2: string): number;
					getIndex(arg1: string): number;
					getLocalName(arg1: number): string;
					getValue(arg1: java.lang.String, arg2: java.lang.String): string;
					getValue(arg1: java.lang.String): string;
					getType(arg1: java.lang.String, arg2: java.lang.String): string;
					getType(arg1: java.lang.String): string;
					getIndex(arg1: java.lang.String, arg2: java.lang.String): number;
					getIndex(arg1: java.lang.String): number;
				}
				export class Attributes2 implements org.xml.sax.IAttributes, org.xml.sax.ext.IAttributes2 {
					constructor(implementation: org.xml.sax.ext.IAttributes2);
					isDeclared(arg1: java.lang.String, arg2: java.lang.String): boolean;
					isDeclared(arg1: string, arg2: string): boolean;
					isDeclared(arg1: java.lang.String): boolean;
					isDeclared(arg1: string): boolean;
					isDeclared(arg1: number): boolean;
					isSpecified(arg1: java.lang.String): boolean;
					isSpecified(arg1: string): boolean;
					isSpecified(arg1: java.lang.String, arg2: java.lang.String): boolean;
					isSpecified(arg1: string, arg2: string): boolean;
					isSpecified(arg1: number): boolean;
					getQName(arg1: number): string;
					getURI(arg1: number): string;
					getValue(arg1: string): string;
					getValue(arg1: number): string;
					getValue(arg1: string, arg2: string): string;
					getType(arg1: string, arg2: string): string;
					getType(arg1: string): string;
					getType(arg1: number): string;
					getLength(): number;
					getIndex(arg1: string, arg2: string): number;
					getIndex(arg1: string): number;
					getLocalName(arg1: number): string;
				}
				export class DeclHandler implements org.xml.sax.ext.IDeclHandler {
					constructor(implementation: org.xml.sax.ext.IDeclHandler);
					attributeDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): void;
					attributeDecl(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): void;
					elementDecl(arg1: java.lang.String, arg2: java.lang.String): void;
					elementDecl(arg1: string, arg2: string): void;
					externalEntityDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					externalEntityDecl(arg1: string, arg2: string, arg3: string): void;
					internalEntityDecl(arg1: java.lang.String, arg2: java.lang.String): void;
					internalEntityDecl(arg1: string, arg2: string): void;
				}
				export interface ILocator2 extends org.xml.sax.ILocator {
					getXMLVersion(): string;
					getEncoding(): string;
					getLineNumber(): number;
					getPublicId(): string;
					getSystemId(): string;
					getColumnNumber(): number;
				}
			}
			export class HandlerBase extends java.lang.Object implements org.xml.sax.IEntityResolver, org.xml.sax.IDTDHandler, org.xml.sax.IDocumentHandler, org.xml.sax.IErrorHandler {
				constructor();
				static class: java.lang.Class<org.xml.sax.HandlerBase>;
				error(arg1: org.xml.sax.SAXParseException): void;
				warning(arg1: org.xml.sax.SAXParseException): void;
				resolveEntity(arg1: java.lang.String, arg2: java.lang.String): org.xml.sax.InputSource;
				resolveEntity(arg1: string, arg2: string): org.xml.sax.InputSource;
				characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
				endDocument(): void;
				endElement(arg1: java.lang.String): void;
				endElement(arg1: string): void;
				fatalError(arg1: org.xml.sax.SAXParseException): void;
				ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
				notationDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
				notationDecl(arg1: string, arg2: string, arg3: string): void;
				processingInstruction(arg1: java.lang.String, arg2: java.lang.String): void;
				processingInstruction(arg1: string, arg2: string): void;
				setDocumentLocator(arg1: org.xml.sax.ILocator): void;
				startDocument(): void;
				startElement(arg1: java.lang.String, arg2: org.xml.sax.IAttributeList): void;
				startElement(arg1: string, arg2: org.xml.sax.IAttributeList): void;
				unparsedEntityDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void;
				unparsedEntityDecl(arg1: string, arg2: string, arg3: string, arg4: string): void;
			}
			export interface IAttributeList {
				getName(arg1: number): string;
				getValue(arg1: string): string;
				getValue(arg1: number): string;
				getType(arg1: number): string;
				getType(arg1: string): string;
				getLength(): number;
			}
			export class SAXParseException extends org.xml.sax.SAXException {
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number, arg6: java.lang.Exception);
				constructor(arg1: string, arg2: string, arg3: string, arg4: number, arg5: number, arg6: java.lang.Exception);
				constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: number, arg5: number);
				constructor(arg1: string, arg2: string, arg3: string, arg4: number, arg5: number);
				constructor(arg1: java.lang.String, arg2: org.xml.sax.ILocator, arg3: java.lang.Exception);
				constructor(arg1: string, arg2: org.xml.sax.ILocator, arg3: java.lang.Exception);
				constructor(arg1: java.lang.String, arg2: org.xml.sax.ILocator);
				constructor(arg1: string, arg2: org.xml.sax.ILocator);
				static class: java.lang.Class<org.xml.sax.SAXParseException>;
				toString(): string;
				getLineNumber(): number;
				getPublicId(): string;
				getSystemId(): string;
				getColumnNumber(): number;
			}
			export interface IXMLReader {
				getErrorHandler(): org.xml.sax.IErrorHandler;
				getEntityResolver(): org.xml.sax.IEntityResolver;
				setContentHandler(arg1: org.xml.sax.IContentHandler): void;
				setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
				getDTDHandler(): org.xml.sax.IDTDHandler;
				getProperty(arg1: string): any;
				setProperty(arg1: string, arg2: any): void;
				parse(arg1: org.xml.sax.InputSource): void;
				parse(arg1: string): void;
				getContentHandler(): org.xml.sax.IContentHandler;
				getFeature(arg1: string): boolean;
				setFeature(arg1: string, arg2: boolean): void;
				setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
			export class XMLReader implements org.xml.sax.IXMLReader {
				constructor(implementation: org.xml.sax.IXMLReader);
				ContentHandler: org.xml.sax.IContentHandler;
				DTDHandler: org.xml.sax.IDTDHandler;
				ErrorHandler: org.xml.sax.IErrorHandler;
				EntityResolver: org.xml.sax.IEntityResolver;
				getErrorHandler(): org.xml.sax.IErrorHandler;
				getEntityResolver(): org.xml.sax.IEntityResolver;
				setContentHandler(arg1: org.xml.sax.IContentHandler): void;
				setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
				getDTDHandler(): org.xml.sax.IDTDHandler;
				getProperty(arg1: java.lang.String): any;
				getProperty(arg1: string): any;
				setProperty(arg1: java.lang.String, arg2: any): void;
				setProperty(arg1: string, arg2: any): void;
				parse(arg1: org.xml.sax.InputSource): void;
				parse(arg1: java.lang.String): void;
				parse(arg1: string): void;
				getContentHandler(): org.xml.sax.IContentHandler;
				getFeature(arg1: java.lang.String): boolean;
				getFeature(arg1: string): boolean;
				setFeature(arg1: java.lang.String, arg2: boolean): void;
				setFeature(arg1: string, arg2: boolean): void;
				setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
			export class Locator implements org.xml.sax.ILocator {
				constructor(implementation: org.xml.sax.ILocator);
				getLineNumber(): number;
				getPublicId(): string;
				getSystemId(): string;
				getColumnNumber(): number;
			}
			export class InputSource extends java.lang.Object {
				constructor(arg1: java.io.Reader);
				constructor(arg1: java.io.InputStream);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor();
				static class: java.lang.Class<org.xml.sax.InputSource>;
				SystemId: string;
				PublicId: string;
				Encoding: string;
				CharacterStream: java.io.Reader;
				ByteStream: java.io.InputStream;
				getEncoding(): string;
				setEncoding(arg1: java.lang.String): void;
				setEncoding(arg1: string): void;
				getByteStream(): java.io.InputStream;
				getCharacterStream(): java.io.Reader;
				getPublicId(): string;
				getSystemId(): string;
				setByteStream(arg1: java.io.InputStream): void;
				setCharacterStream(arg1: java.io.Reader): void;
				setPublicId(arg1: java.lang.String): void;
				setPublicId(arg1: string): void;
				setSystemId(arg1: java.lang.String): void;
				setSystemId(arg1: string): void;
			}
			export class XMLFilter implements org.xml.sax.IXMLReader, org.xml.sax.IXMLFilter {
				constructor(implementation: org.xml.sax.IXMLFilter);
				ContentHandler: org.xml.sax.IContentHandler;
				Parent: org.xml.sax.IXMLReader;
				DTDHandler: org.xml.sax.IDTDHandler;
				ErrorHandler: org.xml.sax.IErrorHandler;
				EntityResolver: org.xml.sax.IEntityResolver;
				getParent(): org.xml.sax.IXMLReader;
				setParent(arg1: org.xml.sax.IXMLReader): void;
				getErrorHandler(): org.xml.sax.IErrorHandler;
				getEntityResolver(): org.xml.sax.IEntityResolver;
				setContentHandler(arg1: org.xml.sax.IContentHandler): void;
				setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
				getDTDHandler(): org.xml.sax.IDTDHandler;
				getProperty(arg1: string): any;
				setProperty(arg1: string, arg2: any): void;
				parse(arg1: org.xml.sax.InputSource): void;
				parse(arg1: string): void;
				getContentHandler(): org.xml.sax.IContentHandler;
				getFeature(arg1: string): boolean;
				setFeature(arg1: string, arg2: boolean): void;
				setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
			export interface IEntityResolver {
				resolveEntity(arg1: string, arg2: string): org.xml.sax.InputSource;
			}
			export interface ILocator {
				getLineNumber(): number;
				getPublicId(): string;
				getSystemId(): string;
				getColumnNumber(): number;
			}
			export class SAXNotSupportedException extends org.xml.sax.SAXException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<org.xml.sax.SAXNotSupportedException>;
			}
			export interface IDocumentHandler {
				characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
				endDocument(): void;
				endElement(arg1: string): void;
				ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
				processingInstruction(arg1: string, arg2: string): void;
				setDocumentLocator(arg1: org.xml.sax.ILocator): void;
				startDocument(): void;
				startElement(arg1: string, arg2: org.xml.sax.IAttributeList): void;
			}
			export interface IErrorHandler {
				error(arg1: org.xml.sax.SAXParseException): void;
				warning(arg1: org.xml.sax.SAXParseException): void;
				fatalError(arg1: org.xml.sax.SAXParseException): void;
			}
			export class SAXNotRecognizedException extends org.xml.sax.SAXException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<org.xml.sax.SAXNotRecognizedException>;
			}
			export interface IDTDHandler {
				notationDecl(arg1: string, arg2: string, arg3: string): void;
				unparsedEntityDecl(arg1: string, arg2: string, arg3: string, arg4: string): void;
			}
			export module helpers {
				export class AttributeListImpl extends java.lang.Object implements org.xml.sax.IAttributeList {
					constructor();
					constructor(arg1: org.xml.sax.IAttributeList);
					static class: java.lang.Class<org.xml.sax.helpers.AttributeListImpl>;
					setAttributeList(arg1: org.xml.sax.IAttributeList): void;
					getName(arg1: number): string;
					getValue(arg1: java.lang.String): string;
					getValue(arg1: string): string;
					getValue(arg1: number): string;
					clear(): void;
					getType(arg1: number): string;
					getType(arg1: java.lang.String): string;
					getType(arg1: string): string;
					getLength(): number;
					addAttribute(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					addAttribute(arg1: string, arg2: string, arg3: string): void;
					removeAttribute(arg1: java.lang.String): void;
					removeAttribute(arg1: string): void;
				}
				export class DefaultHandler extends java.lang.Object implements org.xml.sax.IEntityResolver, org.xml.sax.IDTDHandler, org.xml.sax.IContentHandler, org.xml.sax.IErrorHandler {
					constructor();
					static class: java.lang.Class<org.xml.sax.helpers.DefaultHandler>;
					error(arg1: org.xml.sax.SAXParseException): void;
					warning(arg1: org.xml.sax.SAXParseException): void;
					resolveEntity(arg1: java.lang.String, arg2: java.lang.String): org.xml.sax.InputSource;
					resolveEntity(arg1: string, arg2: string): org.xml.sax.InputSource;
					characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
					endDocument(): void;
					endElement(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					endElement(arg1: string, arg2: string, arg3: string): void;
					endPrefixMapping(arg1: java.lang.String): void;
					endPrefixMapping(arg1: string): void;
					fatalError(arg1: org.xml.sax.SAXParseException): void;
					ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
					notationDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					notationDecl(arg1: string, arg2: string, arg3: string): void;
					processingInstruction(arg1: java.lang.String, arg2: java.lang.String): void;
					processingInstruction(arg1: string, arg2: string): void;
					setDocumentLocator(arg1: org.xml.sax.ILocator): void;
					skippedEntity(arg1: java.lang.String): void;
					skippedEntity(arg1: string): void;
					startDocument(): void;
					startElement(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.IAttributes): void;
					startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
					startPrefixMapping(arg1: java.lang.String, arg2: java.lang.String): void;
					startPrefixMapping(arg1: string, arg2: string): void;
					unparsedEntityDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void;
					unparsedEntityDecl(arg1: string, arg2: string, arg3: string, arg4: string): void;
				}
				export class NamespaceSupport extends java.lang.Object {
					constructor();
					static XMLNS: java.lang.String;
					static NSDECL: java.lang.String;
					static class: java.lang.Class<org.xml.sax.helpers.NamespaceSupport>;
					declarePrefix(arg1: java.lang.String, arg2: java.lang.String): boolean;
					declarePrefix(arg1: string, arg2: string): boolean;
					getDeclaredPrefixes(): java.util.IEnumeration<any>;
					popContext(): void;
					pushContext(): void;
					setNamespaceDeclUris(arg1: boolean): void;
					getPrefixes(): java.util.IEnumeration<any>;
					getPrefixes(arg1: java.lang.String): java.util.IEnumeration<any>;
					getPrefixes(arg1: string): java.util.IEnumeration<any>;
					isNamespaceDeclUris(): boolean;
					processName(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: boolean): native.Array<java.lang.String>;
					processName(arg1: string, arg2: native.Array<java.lang.String>, arg3: boolean): native.Array<java.lang.String>;
					getURI(arg1: java.lang.String): string;
					getURI(arg1: string): string;
					reset(): void;
					getPrefix(arg1: java.lang.String): string;
					getPrefix(arg1: string): string;
				}
				export class XMLReaderAdapter extends java.lang.Object implements org.xml.sax.IParser, org.xml.sax.IContentHandler {
					constructor(arg1: org.xml.sax.IXMLReader);
					constructor();
					static class: java.lang.Class<org.xml.sax.helpers.XMLReaderAdapter>;
					setDocumentHandler(arg1: org.xml.sax.IDocumentHandler): void;
					setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
					parse(arg1: java.lang.String): void;
					parse(arg1: string): void;
					parse(arg1: org.xml.sax.InputSource): void;
					setLocale(arg1: java.util.Locale): void;
					setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
					setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
					characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
					endDocument(): void;
					endElement(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					endElement(arg1: string, arg2: string, arg3: string): void;
					endPrefixMapping(arg1: java.lang.String): void;
					endPrefixMapping(arg1: string): void;
					ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
					processingInstruction(arg1: java.lang.String, arg2: java.lang.String): void;
					processingInstruction(arg1: string, arg2: string): void;
					setDocumentLocator(arg1: org.xml.sax.ILocator): void;
					skippedEntity(arg1: java.lang.String): void;
					skippedEntity(arg1: string): void;
					startDocument(): void;
					startElement(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.IAttributes): void;
					startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
					startPrefixMapping(arg1: java.lang.String, arg2: java.lang.String): void;
					startPrefixMapping(arg1: string, arg2: string): void;
				}
				export class XMLReaderFactory extends java.lang.Object {
					static class: java.lang.Class<org.xml.sax.helpers.XMLReaderFactory>;
					static createXMLReader(arg1: java.lang.String): org.xml.sax.IXMLReader;
					static createXMLReader(arg1: string): org.xml.sax.IXMLReader;
					static createXMLReader(): org.xml.sax.IXMLReader;
				}
				export class ParserAdapter extends java.lang.Object implements org.xml.sax.IXMLReader, org.xml.sax.IDocumentHandler {
					constructor();
					constructor(arg1: org.xml.sax.IParser);
					static class: java.lang.Class<org.xml.sax.helpers.ParserAdapter>;
					ContentHandler: org.xml.sax.IContentHandler;
					DTDHandler: org.xml.sax.IDTDHandler;
					ErrorHandler: org.xml.sax.IErrorHandler;
					EntityResolver: org.xml.sax.IEntityResolver;
					getErrorHandler(): org.xml.sax.IErrorHandler;
					getEntityResolver(): org.xml.sax.IEntityResolver;
					setContentHandler(arg1: org.xml.sax.IContentHandler): void;
					setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
					getDTDHandler(): org.xml.sax.IDTDHandler;
					getProperty(arg1: java.lang.String): any;
					getProperty(arg1: string): any;
					setProperty(arg1: java.lang.String, arg2: any): void;
					setProperty(arg1: string, arg2: any): void;
					parse(arg1: java.lang.String): void;
					parse(arg1: string): void;
					parse(arg1: org.xml.sax.InputSource): void;
					getContentHandler(): org.xml.sax.IContentHandler;
					getFeature(arg1: java.lang.String): boolean;
					getFeature(arg1: string): boolean;
					setFeature(arg1: java.lang.String, arg2: boolean): void;
					setFeature(arg1: string, arg2: boolean): void;
					setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
					setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
					characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
					endDocument(): void;
					endElement(arg1: java.lang.String): void;
					endElement(arg1: string): void;
					ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
					processingInstruction(arg1: java.lang.String, arg2: java.lang.String): void;
					processingInstruction(arg1: string, arg2: string): void;
					setDocumentLocator(arg1: org.xml.sax.ILocator): void;
					startDocument(): void;
					startElement(arg1: java.lang.String, arg2: org.xml.sax.IAttributeList): void;
					startElement(arg1: string, arg2: org.xml.sax.IAttributeList): void;
				}
				export class AttributesImpl extends java.lang.Object implements org.xml.sax.IAttributes {
					constructor();
					constructor(arg1: org.xml.sax.IAttributes);
					static class: java.lang.Class<org.xml.sax.helpers.AttributesImpl>;
					setLocalName(arg1: number, arg2: java.lang.String): void;
					setLocalName(arg1: number, arg2: string): void;
					setQName(arg1: number, arg2: java.lang.String): void;
					setQName(arg1: number, arg2: string): void;
					setURI(arg1: number, arg2: java.lang.String): void;
					setURI(arg1: number, arg2: string): void;
					setAttributes(arg1: org.xml.sax.IAttributes): void;
					getQName(arg1: number): string;
					getURI(arg1: number): string;
					getValue(arg1: number): string;
					getValue(arg1: java.lang.String, arg2: java.lang.String): string;
					getValue(arg1: string, arg2: string): string;
					getValue(arg1: java.lang.String): string;
					getValue(arg1: string): string;
					clear(): void;
					getType(arg1: number): string;
					getType(arg1: java.lang.String, arg2: java.lang.String): string;
					getType(arg1: string, arg2: string): string;
					getType(arg1: java.lang.String): string;
					getType(arg1: string): string;
					setValue(arg1: number, arg2: java.lang.String): void;
					setValue(arg1: number, arg2: string): void;
					getLength(): number;
					getIndex(arg1: java.lang.String, arg2: java.lang.String): number;
					getIndex(arg1: string, arg2: string): number;
					getIndex(arg1: java.lang.String): number;
					getIndex(arg1: string): number;
					setType(arg1: number, arg2: java.lang.String): void;
					setType(arg1: number, arg2: string): void;
					addAttribute(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): void;
					addAttribute(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): void;
					removeAttribute(arg1: number): void;
					getLocalName(arg1: number): string;
					setAttribute(arg1: number, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String): void;
					setAttribute(arg1: number, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string): void;
				}
				export class XMLFilterImpl extends java.lang.Object implements org.xml.sax.IXMLFilter, org.xml.sax.IEntityResolver, org.xml.sax.IDTDHandler, org.xml.sax.IContentHandler, org.xml.sax.IErrorHandler {
					constructor();
					constructor(arg1: org.xml.sax.IXMLReader);
					static class: java.lang.Class<org.xml.sax.helpers.XMLFilterImpl>;
					Parent: org.xml.sax.IXMLReader;
					ContentHandler: org.xml.sax.IContentHandler;
					DTDHandler: org.xml.sax.IDTDHandler;
					ErrorHandler: org.xml.sax.IErrorHandler;
					EntityResolver: org.xml.sax.IEntityResolver;
					getErrorHandler(): org.xml.sax.IErrorHandler;
					getEntityResolver(): org.xml.sax.IEntityResolver;
					setContentHandler(arg1: org.xml.sax.IContentHandler): void;
					setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
					getDTDHandler(): org.xml.sax.IDTDHandler;
					getParent(): org.xml.sax.IXMLReader;
					getProperty(arg1: java.lang.String): any;
					getProperty(arg1: string): any;
					setProperty(arg1: java.lang.String, arg2: any): void;
					setProperty(arg1: string, arg2: any): void;
					setParent(arg1: org.xml.sax.IXMLReader): void;
					error(arg1: org.xml.sax.SAXParseException): void;
					parse(arg1: java.lang.String): void;
					parse(arg1: string): void;
					parse(arg1: org.xml.sax.InputSource): void;
					getContentHandler(): org.xml.sax.IContentHandler;
					warning(arg1: org.xml.sax.SAXParseException): void;
					getFeature(arg1: java.lang.String): boolean;
					getFeature(arg1: string): boolean;
					resolveEntity(arg1: java.lang.String, arg2: java.lang.String): org.xml.sax.InputSource;
					resolveEntity(arg1: string, arg2: string): org.xml.sax.InputSource;
					setFeature(arg1: java.lang.String, arg2: boolean): void;
					setFeature(arg1: string, arg2: boolean): void;
					setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
					setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
					characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
					endDocument(): void;
					endElement(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					endElement(arg1: string, arg2: string, arg3: string): void;
					endPrefixMapping(arg1: java.lang.String): void;
					endPrefixMapping(arg1: string): void;
					fatalError(arg1: org.xml.sax.SAXParseException): void;
					ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
					notationDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
					notationDecl(arg1: string, arg2: string, arg3: string): void;
					processingInstruction(arg1: java.lang.String, arg2: java.lang.String): void;
					processingInstruction(arg1: string, arg2: string): void;
					setDocumentLocator(arg1: org.xml.sax.ILocator): void;
					skippedEntity(arg1: java.lang.String): void;
					skippedEntity(arg1: string): void;
					startDocument(): void;
					startElement(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.IAttributes): void;
					startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
					startPrefixMapping(arg1: java.lang.String, arg2: java.lang.String): void;
					startPrefixMapping(arg1: string, arg2: string): void;
					unparsedEntityDecl(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String): void;
					unparsedEntityDecl(arg1: string, arg2: string, arg3: string, arg4: string): void;
				}
				export class LocatorImpl extends java.lang.Object implements org.xml.sax.ILocator {
					constructor();
					constructor(arg1: org.xml.sax.ILocator);
					static class: java.lang.Class<org.xml.sax.helpers.LocatorImpl>;
					SystemId: string;
					PublicId: string;
					LineNumber: number;
					ColumnNumber: number;
					setColumnNumber(arg1: number): void;
					setLineNumber(arg1: number): void;
					getLineNumber(): number;
					getPublicId(): string;
					getSystemId(): string;
					setPublicId(arg1: java.lang.String): void;
					setPublicId(arg1: string): void;
					setSystemId(arg1: java.lang.String): void;
					setSystemId(arg1: string): void;
					getColumnNumber(): number;
				}
				export class ParserFactory extends java.lang.Object {
					static class: java.lang.Class<org.xml.sax.helpers.ParserFactory>;
					static makeParser(arg1: java.lang.String): org.xml.sax.IParser;
					static makeParser(arg1: string): org.xml.sax.IParser;
					static makeParser(): org.xml.sax.IParser;
				}
			}
			export class ContentHandler implements org.xml.sax.IContentHandler {
				constructor(implementation: org.xml.sax.IContentHandler);
				characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
				endDocument(): void;
				endElement(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String): void;
				endElement(arg1: string, arg2: string, arg3: string): void;
				endPrefixMapping(arg1: java.lang.String): void;
				endPrefixMapping(arg1: string): void;
				ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
				processingInstruction(arg1: java.lang.String, arg2: java.lang.String): void;
				processingInstruction(arg1: string, arg2: string): void;
				setDocumentLocator(arg1: org.xml.sax.ILocator): void;
				skippedEntity(arg1: java.lang.String): void;
				skippedEntity(arg1: string): void;
				startDocument(): void;
				startElement(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: org.xml.sax.IAttributes): void;
				startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
				startPrefixMapping(arg1: java.lang.String, arg2: java.lang.String): void;
				startPrefixMapping(arg1: string, arg2: string): void;
			}
			export interface IParser {
				setDocumentHandler(arg1: org.xml.sax.IDocumentHandler): void;
				setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
				parse(arg1: org.xml.sax.InputSource): void;
				parse(arg1: string): void;
				setLocale(arg1: java.util.Locale): void;
				setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
			export interface IContentHandler {
				characters(arg1: native.Array<string>, arg2: number, arg3: number): void;
				endDocument(): void;
				endElement(arg1: string, arg2: string, arg3: string): void;
				endPrefixMapping(arg1: string): void;
				ignorableWhitespace(arg1: native.Array<string>, arg2: number, arg3: number): void;
				processingInstruction(arg1: string, arg2: string): void;
				setDocumentLocator(arg1: org.xml.sax.ILocator): void;
				skippedEntity(arg1: string): void;
				startDocument(): void;
				startElement(arg1: string, arg2: string, arg3: string, arg4: org.xml.sax.IAttributes): void;
				startPrefixMapping(arg1: string, arg2: string): void;
			}
			export interface IXMLFilter extends org.xml.sax.IXMLReader {
				getParent(): org.xml.sax.IXMLReader;
				setParent(arg1: org.xml.sax.IXMLReader): void;
				getErrorHandler(): org.xml.sax.IErrorHandler;
				getEntityResolver(): org.xml.sax.IEntityResolver;
				setContentHandler(arg1: org.xml.sax.IContentHandler): void;
				setDTDHandler(arg1: org.xml.sax.IDTDHandler): void;
				getDTDHandler(): org.xml.sax.IDTDHandler;
				getProperty(arg1: string): any;
				setProperty(arg1: string, arg2: any): void;
				parse(arg1: org.xml.sax.InputSource): void;
				parse(arg1: string): void;
				getContentHandler(): org.xml.sax.IContentHandler;
				getFeature(arg1: string): boolean;
				setFeature(arg1: string, arg2: boolean): void;
				setEntityResolver(arg1: org.xml.sax.IEntityResolver): void;
				setErrorHandler(arg1: org.xml.sax.IErrorHandler): void;
			}
		}
	}
	export module apache {
		export module http {
			export interface IHttpEntity {
				isRepeatable(): boolean;
				consumeContent(): void;
				isStreaming(): boolean;
				isChunked(): boolean;
				getContent(): java.io.InputStream;
				getContentLength(): any;
				getContentType(): org.apache.http.IHeader;
				getContentEncoding(): org.apache.http.IHeader;
				writeTo(arg1: java.io.OutputStream): void;
			}
			export class TokenIterator implements java.util.IIterator<any>, org.apache.http.ITokenIterator {
				constructor(implementation: org.apache.http.ITokenIterator);
				hasNext(): boolean;
				nextToken(): string;
				next(): any;
				remove(): void;
			}
			export class NoHttpResponseException extends java.io.IOException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<org.apache.http.NoHttpResponseException>;
			}
			export class HttpResponse implements org.apache.http.IHttpMessage, org.apache.http.IHttpResponse {
				constructor(implementation: org.apache.http.IHttpResponse);
				Params: org.apache.http.params.IHttpParams;
				StatusLine: org.apache.http.IStatusLine;
				Locale: java.util.Locale;
				Entity: org.apache.http.IHttpEntity;
				getEntity(): org.apache.http.IHttpEntity;
				setEntity(arg1: org.apache.http.IHttpEntity): void;
				setReasonPhrase(arg1: java.lang.String): void;
				setReasonPhrase(arg1: string): void;
				setStatusLine(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: java.lang.String): void;
				setStatusLine(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: string): void;
				setStatusLine(arg1: org.apache.http.IStatusLine): void;
				setStatusLine(arg1: org.apache.http.ProtocolVersion, arg2: number): void;
				setStatusCode(arg1: number): void;
				getStatusLine(): org.apache.http.IStatusLine;
				getLocale(): java.util.Locale;
				setLocale(arg1: java.util.Locale): void;
				removeHeader(arg1: org.apache.http.IHeader): void;
				getFirstHeader(arg1: string): org.apache.http.IHeader;
				headerIterator(): org.apache.http.IHeaderIterator;
				headerIterator(arg1: string): org.apache.http.IHeaderIterator;
				containsHeader(arg1: string): boolean;
				setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
				removeHeaders(arg1: string): void;
				setHeader(arg1: string, arg2: string): void;
				setHeader(arg1: org.apache.http.IHeader): void;
				getLastHeader(arg1: string): org.apache.http.IHeader;
				addHeader(arg1: org.apache.http.IHeader): void;
				addHeader(arg1: string, arg2: string): void;
				getAllHeaders(): native.Array<org.apache.http.IHeader>;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
				getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				setParams(arg1: org.apache.http.params.IHttpParams): void;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export module client {
				export module methods {
					export class HttpOptions extends org.apache.http.client.methods.HttpRequestBase {
						constructor();
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.net.URI);
						static METHOD_NAME: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.methods.HttpOptions>;
						getAllowedMethods(arg1: org.apache.http.IHttpResponse): java.util.ISet<string>;
						getMethod(): string;
					}
					export class HttpUriRequest implements org.apache.http.IHttpRequest, org.apache.http.client.methods.IHttpUriRequest {
						constructor(implementation: org.apache.http.client.methods.IHttpUriRequest);
						Params: org.apache.http.params.IHttpParams;
						getURI(): java.net.URI;
						getMethod(): string;
						isAborted(): boolean;
						abort(): void;
						getRequestLine(): org.apache.http.IRequestLine;
						removeHeader(arg1: org.apache.http.IHeader): void;
						getFirstHeader(arg1: string): org.apache.http.IHeader;
						headerIterator(): org.apache.http.IHeaderIterator;
						headerIterator(arg1: string): org.apache.http.IHeaderIterator;
						containsHeader(arg1: string): boolean;
						setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
						removeHeaders(arg1: string): void;
						setHeader(arg1: string, arg2: string): void;
						setHeader(arg1: org.apache.http.IHeader): void;
						getLastHeader(arg1: string): org.apache.http.IHeader;
						addHeader(arg1: org.apache.http.IHeader): void;
						addHeader(arg1: string, arg2: string): void;
						getAllHeaders(): native.Array<org.apache.http.IHeader>;
						getProtocolVersion(): org.apache.http.ProtocolVersion;
						getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
						setParams(arg1: org.apache.http.params.IHttpParams): void;
						getParams(): org.apache.http.params.IHttpParams;
					}
					export class HttpTrace extends org.apache.http.client.methods.HttpRequestBase {
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.net.URI);
						constructor();
						static METHOD_NAME: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.methods.HttpTrace>;
						getMethod(): string;
					}
					export class HttpHead extends org.apache.http.client.methods.HttpRequestBase {
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.net.URI);
						constructor();
						static METHOD_NAME: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.methods.HttpHead>;
						getMethod(): string;
					}
					export class HttpPost extends org.apache.http.client.methods.HttpEntityEnclosingRequestBase {
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.net.URI);
						constructor();
						static METHOD_NAME: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.methods.HttpPost>;
						getMethod(): string;
					}
					export class AbortableHttpRequest implements org.apache.http.client.methods.IAbortableHttpRequest {
						constructor(implementation: org.apache.http.client.methods.IAbortableHttpRequest);
						setConnectionRequest(arg1: org.apache.http.conn.IClientConnectionRequest): void;
						setReleaseTrigger(arg1: org.apache.http.conn.IConnectionReleaseTrigger): void;
						abort(): void;
					}
					export class HttpRequestBase extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.IHttpUriRequest, org.apache.http.client.methods.IAbortableHttpRequest, java.lang.ICloneable {
						constructor();
						static class: java.lang.Class<org.apache.http.client.methods.HttpRequestBase>;
						Params: org.apache.http.params.IHttpParams;
						URI: java.net.URI;
						setURI(arg1: java.net.URI): void;
						getRequestLine(): org.apache.http.IRequestLine;
						getURI(): java.net.URI;
						setConnectionRequest(arg1: org.apache.http.conn.IClientConnectionRequest): void;
						setReleaseTrigger(arg1: org.apache.http.conn.IConnectionReleaseTrigger): void;
						clone(): any;
						getMethod(): string;
						getProtocolVersion(): org.apache.http.ProtocolVersion;
						isAborted(): boolean;
						abort(): void;
						removeHeader(arg1: org.apache.http.IHeader): void;
						getFirstHeader(arg1: string): org.apache.http.IHeader;
						headerIterator(): org.apache.http.IHeaderIterator;
						headerIterator(arg1: string): org.apache.http.IHeaderIterator;
						containsHeader(arg1: string): boolean;
						setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
						removeHeaders(arg1: string): void;
						setHeader(arg1: string, arg2: string): void;
						setHeader(arg1: org.apache.http.IHeader): void;
						getLastHeader(arg1: string): org.apache.http.IHeader;
						addHeader(arg1: org.apache.http.IHeader): void;
						addHeader(arg1: string, arg2: string): void;
						getAllHeaders(): native.Array<org.apache.http.IHeader>;
						getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
						setParams(arg1: org.apache.http.params.IHttpParams): void;
						getParams(): org.apache.http.params.IHttpParams;
						getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
						headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
						containsHeader(arg1: java.lang.String): boolean;
						removeHeaders(arg1: java.lang.String): void;
						setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
						getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
						addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
						getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
					}
					export interface IHttpUriRequest extends org.apache.http.IHttpRequest {
						getURI(): java.net.URI;
						getMethod(): string;
						isAborted(): boolean;
						abort(): void;
						getRequestLine(): org.apache.http.IRequestLine;
						removeHeader(arg1: org.apache.http.IHeader): void;
						getFirstHeader(arg1: string): org.apache.http.IHeader;
						headerIterator(): org.apache.http.IHeaderIterator;
						headerIterator(arg1: string): org.apache.http.IHeaderIterator;
						containsHeader(arg1: string): boolean;
						setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
						removeHeaders(arg1: string): void;
						setHeader(arg1: string, arg2: string): void;
						setHeader(arg1: org.apache.http.IHeader): void;
						getLastHeader(arg1: string): org.apache.http.IHeader;
						addHeader(arg1: org.apache.http.IHeader): void;
						addHeader(arg1: string, arg2: string): void;
						getAllHeaders(): native.Array<org.apache.http.IHeader>;
						getProtocolVersion(): org.apache.http.ProtocolVersion;
						getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
						setParams(arg1: org.apache.http.params.IHttpParams): void;
						getParams(): org.apache.http.params.IHttpParams;
					}
					export class HttpEntityEnclosingRequestBase extends org.apache.http.client.methods.HttpRequestBase implements org.apache.http.IHttpEntityEnclosingRequest {
						constructor();
						static class: java.lang.Class<org.apache.http.client.methods.HttpEntityEnclosingRequestBase>;
						Params: org.apache.http.params.IHttpParams;
						Entity: org.apache.http.IHttpEntity;
						expectContinue(): boolean;
						getEntity(): org.apache.http.IHttpEntity;
						setEntity(arg1: org.apache.http.IHttpEntity): void;
						clone(): any;
						getRequestLine(): org.apache.http.IRequestLine;
						removeHeader(arg1: org.apache.http.IHeader): void;
						getFirstHeader(arg1: string): org.apache.http.IHeader;
						headerIterator(): org.apache.http.IHeaderIterator;
						headerIterator(arg1: string): org.apache.http.IHeaderIterator;
						containsHeader(arg1: string): boolean;
						setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
						removeHeaders(arg1: string): void;
						setHeader(arg1: string, arg2: string): void;
						setHeader(arg1: org.apache.http.IHeader): void;
						getLastHeader(arg1: string): org.apache.http.IHeader;
						addHeader(arg1: org.apache.http.IHeader): void;
						addHeader(arg1: string, arg2: string): void;
						getAllHeaders(): native.Array<org.apache.http.IHeader>;
						getProtocolVersion(): org.apache.http.ProtocolVersion;
						getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
						setParams(arg1: org.apache.http.params.IHttpParams): void;
						getParams(): org.apache.http.params.IHttpParams;
						getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
						headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
						containsHeader(arg1: java.lang.String): boolean;
						removeHeaders(arg1: java.lang.String): void;
						setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
						getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
						addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
						getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
					}
					export class HttpPut extends org.apache.http.client.methods.HttpEntityEnclosingRequestBase {
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.net.URI);
						constructor();
						static METHOD_NAME: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.methods.HttpPut>;
						getMethod(): string;
					}
					export class HttpDelete extends org.apache.http.client.methods.HttpRequestBase {
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.net.URI);
						constructor();
						static METHOD_NAME: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.methods.HttpDelete>;
						getMethod(): string;
					}
					export interface IAbortableHttpRequest {
						setConnectionRequest(arg1: org.apache.http.conn.IClientConnectionRequest): void;
						setReleaseTrigger(arg1: org.apache.http.conn.IConnectionReleaseTrigger): void;
						abort(): void;
					}
					export class HttpGet extends org.apache.http.client.methods.HttpRequestBase {
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.net.URI);
						constructor();
						static METHOD_NAME: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.methods.HttpGet>;
						getMethod(): string;
					}
				}
				export interface IRedirectHandler {
					isRedirectRequested(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
					getLocationURI(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): java.net.URI;
				}
				export module entity {
					export class UrlEncodedFormEntity extends org.apache.http.entity.StringEntity {
						constructor(arg1: java.util.IList<any>, arg2: java.lang.String);
						constructor(arg1: java.util.IList<any>, arg2: string);
						constructor(arg1: java.util.IList<any>);
						static class: java.lang.Class<org.apache.http.client.entity.UrlEncodedFormEntity>;
					}
				}
				export class ClientProtocolException extends java.io.IOException {
					constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
					constructor(arg1: string, arg2: java.lang.Throwable);
					constructor(arg1: java.lang.Throwable);
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor();
					static class: java.lang.Class<org.apache.http.client.ClientProtocolException>;
				}
				export class RedirectHandler implements org.apache.http.client.IRedirectHandler {
					constructor(implementation: org.apache.http.client.IRedirectHandler);
					isRedirectRequested(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
					getLocationURI(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): java.net.URI;
				}
				export interface IResponseHandler<T> {
					handleResponse(arg1: org.apache.http.IHttpResponse): T;
				}
				export interface ICredentialsProvider {
					getCredentials(arg1: org.apache.http.auth.AuthScope): org.apache.http.auth.ICredentials;
					setCredentials(arg1: org.apache.http.auth.AuthScope, arg2: org.apache.http.auth.ICredentials): void;
					clear(): void;
				}
				export class RequestDirector implements org.apache.http.client.IRequestDirector {
					constructor(implementation: org.apache.http.client.IRequestDirector);
					execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
				}
				export class HttpClient implements org.apache.http.client.IHttpClient {
					constructor(implementation: org.apache.http.client.IHttpClient);
					getConnectionManager(): org.apache.http.conn.IClientConnectionManager;
					execute<T>(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.client.IResponseHandler<any>, arg4: org.apache.http.protocol.IHttpContext): T;
					execute<T>(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.client.IResponseHandler<any>): T;
					execute<T>(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.client.IResponseHandler<any>, arg3: org.apache.http.protocol.IHttpContext): T;
					execute<T>(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.client.IResponseHandler<any>): T;
					execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
					execute(arg1: org.apache.http.client.methods.IHttpUriRequest): org.apache.http.IHttpResponse;
					execute(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
					execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest): org.apache.http.IHttpResponse;
					getParams(): org.apache.http.params.IHttpParams;
				}
				export interface IUserTokenHandler {
					getUserToken(arg1: org.apache.http.protocol.IHttpContext): any;
				}
				export interface IRequestDirector {
					execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
				}
				export class HttpResponseException extends org.apache.http.client.ClientProtocolException {
					constructor(arg1: number, arg2: java.lang.String);
					constructor(arg1: number, arg2: string);
					static class: java.lang.Class<org.apache.http.client.HttpResponseException>;
					getStatusCode(): number;
				}
				export class CookieStore implements org.apache.http.client.ICookieStore {
					constructor(implementation: org.apache.http.client.ICookieStore);
					getCookies(): java.util.IList<org.apache.http.cookie.ICookie>;
					addCookie(arg1: org.apache.http.cookie.ICookie): void;
					clearExpired(arg1: java.util.Date): boolean;
					clear(): void;
				}
				export class NonRepeatableRequestException extends org.apache.http.ProtocolException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static class: java.lang.Class<org.apache.http.client.NonRepeatableRequestException>;
				}
				export interface IHttpRequestRetryHandler {
					retryRequest(arg1: java.io.IOException, arg2: number, arg3: org.apache.http.protocol.IHttpContext): boolean;
				}
				export interface IAuthenticationHandler {
					getChallenges(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): java.util.IMap<string, org.apache.http.IHeader>;
					selectScheme(arg1: java.util.IMap<string, org.apache.http.IHeader>, arg2: org.apache.http.IHttpResponse, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.auth.IAuthScheme;
					isAuthenticationRequested(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
				}
				export module protocol {
					export class RequestTargetAuthentication extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
						constructor();
						static class: java.lang.Class<org.apache.http.client.protocol.RequestTargetAuthentication>;
						process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
					}
					export class ClientContext implements org.apache.http.client.protocol.IClientContext {
						constructor(implementation: org.apache.http.client.protocol.IClientContext);
						static COOKIESPEC_REGISTRY: java.lang.String;
						static AUTHSCHEME_REGISTRY: java.lang.String;
						static COOKIE_STORE: java.lang.String;
						static COOKIE_SPEC: java.lang.String;
						static COOKIE_ORIGIN: java.lang.String;
						static CREDS_PROVIDER: java.lang.String;
						static TARGET_AUTH_STATE: java.lang.String;
						static PROXY_AUTH_STATE: java.lang.String;
						static AUTH_SCHEME_PREF: java.lang.String;
						static USER_TOKEN: java.lang.String;
					}
					export class RequestAddCookies extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
						constructor();
						static class: java.lang.Class<org.apache.http.client.protocol.RequestAddCookies>;
						process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
					}
					export class ResponseProcessCookies extends java.lang.Object implements org.apache.http.IHttpResponseInterceptor {
						constructor();
						static class: java.lang.Class<org.apache.http.client.protocol.ResponseProcessCookies>;
						process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
					}
					export class ClientContextConfigurer extends java.lang.Object implements org.apache.http.client.protocol.IClientContext {
						constructor(arg1: org.apache.http.protocol.IHttpContext);
						static class: java.lang.Class<org.apache.http.client.protocol.ClientContextConfigurer>;
						setCookieStore(arg1: org.apache.http.client.ICookieStore): void;
						setCredentialsProvider(arg1: org.apache.http.client.ICredentialsProvider): void;
						setAuthSchemeRegistry(arg1: org.apache.http.auth.AuthSchemeRegistry): void;
						setCookieSpecRegistry(arg1: org.apache.http.cookie.CookieSpecRegistry): void;
						setAuthSchemePref(arg1: java.util.IList<string>): void;
					}
					export interface IClientContext {
					}
					export module IClientContext {
						var COOKIESPEC_REGISTRY: java.lang.String;
						var AUTHSCHEME_REGISTRY: java.lang.String;
						var COOKIE_STORE: java.lang.String;
						var COOKIE_SPEC: java.lang.String;
						var COOKIE_ORIGIN: java.lang.String;
						var CREDS_PROVIDER: java.lang.String;
						var TARGET_AUTH_STATE: java.lang.String;
						var PROXY_AUTH_STATE: java.lang.String;
						var AUTH_SCHEME_PREF: java.lang.String;
						var USER_TOKEN: java.lang.String;
					}
					export class RequestDefaultHeaders extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
						constructor();
						static class: java.lang.Class<org.apache.http.client.protocol.RequestDefaultHeaders>;
						process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
					}
					export class RequestProxyAuthentication extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
						constructor();
						static class: java.lang.Class<org.apache.http.client.protocol.RequestProxyAuthentication>;
						process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
					}
				}
				export class ResponseHandler<T> implements org.apache.http.client.IResponseHandler<T> {
					constructor(implementation: org.apache.http.client.IResponseHandler<T>);
					handleResponse(arg1: org.apache.http.IHttpResponse): T;
				}
				export class CredentialsProvider implements org.apache.http.client.ICredentialsProvider {
					constructor(implementation: org.apache.http.client.ICredentialsProvider);
					getCredentials(arg1: org.apache.http.auth.AuthScope): org.apache.http.auth.ICredentials;
					setCredentials(arg1: org.apache.http.auth.AuthScope, arg2: org.apache.http.auth.ICredentials): void;
					clear(): void;
				}
				export interface IHttpClient {
					getConnectionManager(): org.apache.http.conn.IClientConnectionManager;
					execute<T>(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.client.IResponseHandler<any>, arg4: org.apache.http.protocol.IHttpContext): T;
					execute<T>(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.client.IResponseHandler<any>): T;
					execute<T>(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.client.IResponseHandler<any>, arg3: org.apache.http.protocol.IHttpContext): T;
					execute<T>(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.client.IResponseHandler<any>): T;
					execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
					execute(arg1: org.apache.http.client.methods.IHttpUriRequest): org.apache.http.IHttpResponse;
					execute(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
					execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest): org.apache.http.IHttpResponse;
					getParams(): org.apache.http.params.IHttpParams;
				}
				export class AuthenticationHandler implements org.apache.http.client.IAuthenticationHandler {
					constructor(implementation: org.apache.http.client.IAuthenticationHandler);
					getChallenges(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): java.util.IMap<string, org.apache.http.IHeader>;
					selectScheme(arg1: java.util.IMap<string, org.apache.http.IHeader>, arg2: org.apache.http.IHttpResponse, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.auth.IAuthScheme;
					isAuthenticationRequested(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
				}
				export module params {
					export class AuthPolicy extends java.lang.Object {
						static NTLM: java.lang.String;
						static DIGEST: java.lang.String;
						static BASIC: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.params.AuthPolicy>;
					}
					export class AllClientPNames implements org.apache.http.params.ICoreConnectionPNames, org.apache.http.params.ICoreProtocolPNames, org.apache.http.client.params.IClientPNames, org.apache.http.auth.params.IAuthPNames, org.apache.http.cookie.params.ICookieSpecPNames, org.apache.http.conn.params.IConnConnectionPNames, org.apache.http.conn.params.IConnManagerPNames, org.apache.http.conn.params.IConnRoutePNames, org.apache.http.client.params.IAllClientPNames {
						constructor(implementation: org.apache.http.client.params.IAllClientPNames);
					}
					export class CookiePolicy extends java.lang.Object {
						static BROWSER_COMPATIBILITY: java.lang.String;
						static NETSCAPE: java.lang.String;
						static RFC_2109: java.lang.String;
						static RFC_2965: java.lang.String;
						static BEST_MATCH: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.params.CookiePolicy>;
					}
					export interface IClientPNames {
					}
					export module IClientPNames {
						var CONNECTION_MANAGER_FACTORY_CLASS_NAME: java.lang.String;
						var CONNECTION_MANAGER_FACTORY: java.lang.String;
						var HANDLE_REDIRECTS: java.lang.String;
						var REJECT_RELATIVE_REDIRECT: java.lang.String;
						var MAX_REDIRECTS: java.lang.String;
						var ALLOW_CIRCULAR_REDIRECTS: java.lang.String;
						var HANDLE_AUTHENTICATION: java.lang.String;
						var COOKIE_POLICY: java.lang.String;
						var VIRTUAL_HOST: java.lang.String;
						var DEFAULT_HEADERS: java.lang.String;
						var DEFAULT_HOST: java.lang.String;
					}
					export class ClientPNames implements org.apache.http.client.params.IClientPNames {
						constructor(implementation: org.apache.http.client.params.IClientPNames);
						static CONNECTION_MANAGER_FACTORY_CLASS_NAME: java.lang.String;
						static CONNECTION_MANAGER_FACTORY: java.lang.String;
						static HANDLE_REDIRECTS: java.lang.String;
						static REJECT_RELATIVE_REDIRECT: java.lang.String;
						static MAX_REDIRECTS: java.lang.String;
						static ALLOW_CIRCULAR_REDIRECTS: java.lang.String;
						static HANDLE_AUTHENTICATION: java.lang.String;
						static COOKIE_POLICY: java.lang.String;
						static VIRTUAL_HOST: java.lang.String;
						static DEFAULT_HEADERS: java.lang.String;
						static DEFAULT_HOST: java.lang.String;
					}
					export class ClientParamBean extends org.apache.http.params.HttpAbstractParamBean {
						constructor(arg1: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.client.params.ClientParamBean>;
						setCookiePolicy(arg1: java.lang.String): void;
						setCookiePolicy(arg1: string): void;
						setAllowCircularRedirects(arg1: boolean): void;
						setConnectionManagerFactory(arg1: org.apache.http.conn.IClientConnectionManagerFactory): void;
						setRejectRelativeRedirect(arg1: boolean): void;
						setHandleAuthentication(arg1: boolean): void;
						setConnectionManagerFactoryClassName(arg1: java.lang.String): void;
						setConnectionManagerFactoryClassName(arg1: string): void;
						setVirtualHost(arg1: org.apache.http.HttpHost): void;
						setDefaultHeaders(arg1: java.util.ICollection<org.apache.http.IHeader>): void;
						setHandleRedirects(arg1: boolean): void;
						setDefaultHost(arg1: org.apache.http.HttpHost): void;
						setMaxRedirects(arg1: number): void;
					}
					export interface IAllClientPNames extends org.apache.http.params.ICoreConnectionPNames, org.apache.http.params.ICoreProtocolPNames, org.apache.http.client.params.IClientPNames, org.apache.http.auth.params.IAuthPNames, org.apache.http.cookie.params.ICookieSpecPNames, org.apache.http.conn.params.IConnConnectionPNames, org.apache.http.conn.params.IConnManagerPNames, org.apache.http.conn.params.IConnRoutePNames {
					}
					export class HttpClientParams extends java.lang.Object {
						static class: java.lang.Class<org.apache.http.client.params.HttpClientParams>;
						static setCookiePolicy(arg1: org.apache.http.params.IHttpParams, arg2: java.lang.String): void;
						static setCookiePolicy(arg1: org.apache.http.params.IHttpParams, arg2: string): void;
						static setAuthenticating(arg1: org.apache.http.params.IHttpParams, arg2: boolean): void;
						static getCookiePolicy(arg1: org.apache.http.params.IHttpParams): string;
						static isAuthenticating(arg1: org.apache.http.params.IHttpParams): boolean;
						static setRedirecting(arg1: org.apache.http.params.IHttpParams, arg2: boolean): void;
						static isRedirecting(arg1: org.apache.http.params.IHttpParams): boolean;
					}
				}
				export class RedirectException extends org.apache.http.ProtocolException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
					constructor(arg1: string, arg2: java.lang.Throwable);
					static class: java.lang.Class<org.apache.http.client.RedirectException>;
				}
				export class HttpRequestRetryHandler implements org.apache.http.client.IHttpRequestRetryHandler {
					constructor(implementation: org.apache.http.client.IHttpRequestRetryHandler);
					retryRequest(arg1: java.io.IOException, arg2: number, arg3: org.apache.http.protocol.IHttpContext): boolean;
				}
				export class UserTokenHandler implements org.apache.http.client.IUserTokenHandler {
					constructor(implementation: org.apache.http.client.IUserTokenHandler);
					getUserToken(arg1: org.apache.http.protocol.IHttpContext): any;
				}
				export module utils {
					export class CloneUtils extends java.lang.Object {
						static class: java.lang.Class<org.apache.http.client.utils.CloneUtils>;
						static clone(arg1: any): any;
					}
					export class URLEncodedUtils extends java.lang.Object {
						constructor();
						static CONTENT_TYPE: java.lang.String;
						static class: java.lang.Class<org.apache.http.client.utils.URLEncodedUtils>;
						static isEncoded(arg1: org.apache.http.IHttpEntity): boolean;
						static format(arg1: java.util.IList<any>, arg2: java.lang.String): string;
						static format(arg1: java.util.IList<any>, arg2: string): string;
						static parse(arg1: org.apache.http.IHttpEntity): java.util.IList<org.apache.http.INameValuePair>;
						static parse(arg1: java.util.IList<org.apache.http.INameValuePair>, arg2: java.util.Scanner, arg3: java.lang.String): void;
						static parse(arg1: java.util.IList<org.apache.http.INameValuePair>, arg2: java.util.Scanner, arg3: string): void;
						static parse(arg1: java.net.URI, arg2: java.lang.String): java.util.IList<org.apache.http.INameValuePair>;
						static parse(arg1: java.net.URI, arg2: string): java.util.IList<org.apache.http.INameValuePair>;
					}
					export class URIUtils extends java.lang.Object {
						static class: java.lang.Class<org.apache.http.client.utils.URIUtils>;
						static rewriteURI(arg1: java.net.URI, arg2: org.apache.http.HttpHost): java.net.URI;
						static rewriteURI(arg1: java.net.URI, arg2: org.apache.http.HttpHost, arg3: boolean): java.net.URI;
						static resolve(arg1: java.net.URI, arg2: java.lang.String): java.net.URI;
						static resolve(arg1: java.net.URI, arg2: string): java.net.URI;
						static resolve(arg1: java.net.URI, arg2: java.net.URI): java.net.URI;
						static createURI(arg1: java.lang.String, arg2: java.lang.String, arg3: number, arg4: java.lang.String, arg5: java.lang.String, arg6: java.lang.String): java.net.URI;
						static createURI(arg1: string, arg2: string, arg3: number, arg4: string, arg5: string, arg6: string): java.net.URI;
					}
				}
				export interface ICookieStore {
					getCookies(): java.util.IList<org.apache.http.cookie.ICookie>;
					addCookie(arg1: org.apache.http.cookie.ICookie): void;
					clearExpired(arg1: java.util.Date): boolean;
					clear(): void;
				}
				export class CircularRedirectException extends org.apache.http.client.RedirectException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
					constructor(arg1: string, arg2: java.lang.Throwable);
					static class: java.lang.Class<org.apache.http.client.CircularRedirectException>;
				}
			}
			export class HttpConnection implements org.apache.http.IHttpConnection {
				constructor(implementation: org.apache.http.IHttpConnection);
				SocketTimeout: number;
				getSocketTimeout(): number;
				setSocketTimeout(arg1: number): void;
				isStale(): boolean;
				close(): void;
				isOpen(): boolean;
				shutdown(): void;
				getMetrics(): org.apache.http.IHttpConnectionMetrics;
			}
			export module entity {
				export class InputStreamEntity extends org.apache.http.entity.AbstractHttpEntity {
					constructor(arg1: java.io.InputStream, arg2: native.Long);
					static class: java.lang.Class<org.apache.http.entity.InputStreamEntity>;
					isRepeatable(): boolean;
					consumeContent(): void;
					isStreaming(): boolean;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class ContentProducer implements org.apache.http.entity.IContentProducer {
					constructor(implementation: org.apache.http.entity.IContentProducer);
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class ByteArrayEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.ICloneable {
					constructor(arg1: native.Array<native.Byte>);
					static class: java.lang.Class<org.apache.http.entity.ByteArrayEntity>;
					isRepeatable(): boolean;
					isStreaming(): boolean;
					clone(): any;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class FileEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.ICloneable {
					constructor(arg1: java.io.File, arg2: java.lang.String);
					constructor(arg1: java.io.File, arg2: string);
					static class: java.lang.Class<org.apache.http.entity.FileEntity>;
					isRepeatable(): boolean;
					isStreaming(): boolean;
					clone(): any;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class HttpEntityWrapper extends java.lang.Object implements org.apache.http.IHttpEntity {
					constructor(arg1: org.apache.http.IHttpEntity);
					static class: java.lang.Class<org.apache.http.entity.HttpEntityWrapper>;
					isRepeatable(): boolean;
					consumeContent(): void;
					isStreaming(): boolean;
					isChunked(): boolean;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					getContentType(): org.apache.http.IHeader;
					getContentEncoding(): org.apache.http.IHeader;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export interface IContentProducer {
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class BufferedHttpEntity extends org.apache.http.entity.HttpEntityWrapper {
					constructor(arg1: org.apache.http.IHttpEntity);
					static class: java.lang.Class<org.apache.http.entity.BufferedHttpEntity>;
					isRepeatable(): boolean;
					isStreaming(): boolean;
					isChunked(): boolean;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class AbstractHttpEntity extends java.lang.Object implements org.apache.http.IHttpEntity {
					static class: java.lang.Class<org.apache.http.entity.AbstractHttpEntity>;
					ContentEncoding: org.apache.http.IHeader;
					ContentType: org.apache.http.IHeader;
					consumeContent(): void;
					setContentEncoding(arg1: java.lang.String): void;
					setContentEncoding(arg1: string): void;
					setContentEncoding(arg1: org.apache.http.IHeader): void;
					isChunked(): boolean;
					setChunked(arg1: boolean): void;
					getContentType(): org.apache.http.IHeader;
					setContentType(arg1: java.lang.String): void;
					setContentType(arg1: string): void;
					setContentType(arg1: org.apache.http.IHeader): void;
					getContentEncoding(): org.apache.http.IHeader;
					isRepeatable(): boolean;
					isStreaming(): boolean;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class BasicHttpEntity extends org.apache.http.entity.AbstractHttpEntity {
					constructor();
					static class: java.lang.Class<org.apache.http.entity.BasicHttpEntity>;
					Content: java.io.InputStream;
					setContent(arg1: java.io.InputStream): void;
					isRepeatable(): boolean;
					consumeContent(): void;
					isStreaming(): boolean;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					setContentLength(arg1: native.Long): void;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class StringEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.ICloneable {
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static class: java.lang.Class<org.apache.http.entity.StringEntity>;
					isRepeatable(): boolean;
					isStreaming(): boolean;
					clone(): any;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class ContentLengthStrategy implements org.apache.http.entity.IContentLengthStrategy {
					constructor(implementation: org.apache.http.entity.IContentLengthStrategy);
					static IDENTITY: number;
					static CHUNKED: number;
					determineLength(arg1: org.apache.http.IHttpMessage): any;
				}
				export class EntityTemplate extends org.apache.http.entity.AbstractHttpEntity {
					constructor(arg1: org.apache.http.entity.IContentProducer);
					static class: java.lang.Class<org.apache.http.entity.EntityTemplate>;
					isRepeatable(): boolean;
					consumeContent(): void;
					isStreaming(): boolean;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export interface IContentLengthStrategy {
					determineLength(arg1: org.apache.http.IHttpMessage): any;
				}
				export module IContentLengthStrategy {
					var IDENTITY: number;
					var CHUNKED: number;
				}
				export class SerializableEntity extends org.apache.http.entity.AbstractHttpEntity {
					constructor(arg1: java.io.ISerializable, arg2: boolean);
					constructor(arg1: string, arg2: boolean);
					static class: java.lang.Class<org.apache.http.entity.SerializableEntity>;
					isRepeatable(): boolean;
					isStreaming(): boolean;
					getContent(): java.io.InputStream;
					getContentLength(): any;
					writeTo(arg1: java.io.OutputStream): void;
				}
			}
			export class HttpServerConnection implements org.apache.http.IHttpConnection, org.apache.http.IHttpServerConnection {
				constructor(implementation: org.apache.http.IHttpServerConnection);
				SocketTimeout: number;
				sendResponseHeader(arg1: org.apache.http.IHttpResponse): void;
				sendResponseEntity(arg1: org.apache.http.IHttpResponse): void;
				receiveRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
				receiveRequestHeader(): org.apache.http.IHttpRequest;
				flush(): void;
				getSocketTimeout(): number;
				setSocketTimeout(arg1: number): void;
				isStale(): boolean;
				close(): void;
				isOpen(): boolean;
				shutdown(): void;
				getMetrics(): org.apache.http.IHttpConnectionMetrics;
			}
			export interface IHttpRequest extends org.apache.http.IHttpMessage {
				getRequestLine(): org.apache.http.IRequestLine;
				removeHeader(arg1: org.apache.http.IHeader): void;
				getFirstHeader(arg1: string): org.apache.http.IHeader;
				headerIterator(): org.apache.http.IHeaderIterator;
				headerIterator(arg1: string): org.apache.http.IHeaderIterator;
				containsHeader(arg1: string): boolean;
				setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
				removeHeaders(arg1: string): void;
				setHeader(arg1: string, arg2: string): void;
				setHeader(arg1: org.apache.http.IHeader): void;
				getLastHeader(arg1: string): org.apache.http.IHeader;
				addHeader(arg1: org.apache.http.IHeader): void;
				addHeader(arg1: string, arg2: string): void;
				getAllHeaders(): native.Array<org.apache.http.IHeader>;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
				getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				setParams(arg1: org.apache.http.params.IHttpParams): void;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export class HttpVersion extends org.apache.http.ProtocolVersion implements java.io.ISerializable {
				constructor(arg1: number, arg2: number);
				static HTTP: java.lang.String;
				static HTTP_0_9: org.apache.http.HttpVersion;
				static HTTP_1_0: org.apache.http.HttpVersion;
				static HTTP_1_1: org.apache.http.HttpVersion;
				static class: java.lang.Class<org.apache.http.HttpVersion>;
				forVersion(arg1: number, arg2: number): org.apache.http.ProtocolVersion;
			}
			export class HttpResponseFactory implements org.apache.http.IHttpResponseFactory {
				constructor(implementation: org.apache.http.IHttpResponseFactory);
				newHttpResponse(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
				newHttpResponse(arg1: org.apache.http.IStatusLine, arg2: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
			}
			export interface IHttpStatus {
			}
			export module IHttpStatus {
				var SC_CONTINUE: number;
				var SC_SWITCHING_PROTOCOLS: number;
				var SC_PROCESSING: number;
				var SC_OK: number;
				var SC_CREATED: number;
				var SC_ACCEPTED: number;
				var SC_NON_AUTHORITATIVE_INFORMATION: number;
				var SC_NO_CONTENT: number;
				var SC_RESET_CONTENT: number;
				var SC_PARTIAL_CONTENT: number;
				var SC_MULTI_STATUS: number;
				var SC_MULTIPLE_CHOICES: number;
				var SC_MOVED_PERMANENTLY: number;
				var SC_MOVED_TEMPORARILY: number;
				var SC_SEE_OTHER: number;
				var SC_NOT_MODIFIED: number;
				var SC_USE_PROXY: number;
				var SC_TEMPORARY_REDIRECT: number;
				var SC_BAD_REQUEST: number;
				var SC_UNAUTHORIZED: number;
				var SC_PAYMENT_REQUIRED: number;
				var SC_FORBIDDEN: number;
				var SC_NOT_FOUND: number;
				var SC_METHOD_NOT_ALLOWED: number;
				var SC_NOT_ACCEPTABLE: number;
				var SC_PROXY_AUTHENTICATION_REQUIRED: number;
				var SC_REQUEST_TIMEOUT: number;
				var SC_CONFLICT: number;
				var SC_GONE: number;
				var SC_LENGTH_REQUIRED: number;
				var SC_PRECONDITION_FAILED: number;
				var SC_REQUEST_TOO_LONG: number;
				var SC_REQUEST_URI_TOO_LONG: number;
				var SC_UNSUPPORTED_MEDIA_TYPE: number;
				var SC_REQUESTED_RANGE_NOT_SATISFIABLE: number;
				var SC_EXPECTATION_FAILED: number;
				var SC_INSUFFICIENT_SPACE_ON_RESOURCE: number;
				var SC_METHOD_FAILURE: number;
				var SC_UNPROCESSABLE_ENTITY: number;
				var SC_LOCKED: number;
				var SC_FAILED_DEPENDENCY: number;
				var SC_INTERNAL_SERVER_ERROR: number;
				var SC_NOT_IMPLEMENTED: number;
				var SC_BAD_GATEWAY: number;
				var SC_SERVICE_UNAVAILABLE: number;
				var SC_GATEWAY_TIMEOUT: number;
				var SC_HTTP_VERSION_NOT_SUPPORTED: number;
				var SC_INSUFFICIENT_STORAGE: number;
			}
			export class HeaderElementIterator implements java.util.IIterator<any>, org.apache.http.IHeaderElementIterator {
				constructor(implementation: org.apache.http.IHeaderElementIterator);
				hasNext(): boolean;
				nextElement(): org.apache.http.IHeaderElement;
				next(): any;
				remove(): void;
			}
			export interface IHttpMessage {
				removeHeader(arg1: org.apache.http.IHeader): void;
				getFirstHeader(arg1: string): org.apache.http.IHeader;
				headerIterator(): org.apache.http.IHeaderIterator;
				headerIterator(arg1: string): org.apache.http.IHeaderIterator;
				containsHeader(arg1: string): boolean;
				setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
				removeHeaders(arg1: string): void;
				setHeader(arg1: string, arg2: string): void;
				setHeader(arg1: org.apache.http.IHeader): void;
				getLastHeader(arg1: string): org.apache.http.IHeader;
				addHeader(arg1: org.apache.http.IHeader): void;
				addHeader(arg1: string, arg2: string): void;
				getAllHeaders(): native.Array<org.apache.http.IHeader>;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
				getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				setParams(arg1: org.apache.http.params.IHttpParams): void;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export interface IHttpConnection {
				getSocketTimeout(): number;
				setSocketTimeout(arg1: number): void;
				isStale(): boolean;
				close(): void;
				isOpen(): boolean;
				shutdown(): void;
				getMetrics(): org.apache.http.IHttpConnectionMetrics;
			}
			export class HttpRequestFactory implements org.apache.http.IHttpRequestFactory {
				constructor(implementation: org.apache.http.IHttpRequestFactory);
				newHttpRequest(arg1: org.apache.http.IRequestLine): org.apache.http.IHttpRequest;
				newHttpRequest(arg1: java.lang.String, arg2: java.lang.String): org.apache.http.IHttpRequest;
				newHttpRequest(arg1: string, arg2: string): org.apache.http.IHttpRequest;
			}
			export class RequestLine implements org.apache.http.IRequestLine {
				constructor(implementation: org.apache.http.IRequestLine);
				getUri(): string;
				getMethod(): string;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
			}
			export interface IHttpResponseInterceptor {
				process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
			}
			export class HttpInetConnection implements org.apache.http.IHttpConnection, org.apache.http.IHttpInetConnection {
				constructor(implementation: org.apache.http.IHttpInetConnection);
				SocketTimeout: number;
				getRemotePort(): number;
				getLocalPort(): number;
				getLocalAddress(): java.net.InetAddress;
				getRemoteAddress(): java.net.InetAddress;
				getSocketTimeout(): number;
				setSocketTimeout(arg1: number): void;
				isStale(): boolean;
				close(): void;
				isOpen(): boolean;
				shutdown(): void;
				getMetrics(): org.apache.http.IHttpConnectionMetrics;
			}
			export interface IRequestLine {
				getUri(): string;
				getMethod(): string;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
			}
			export interface IStatusLine {
				getStatusCode(): number;
				getReasonPhrase(): string;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
			}
			export class HttpResponseInterceptor implements org.apache.http.IHttpResponseInterceptor {
				constructor(implementation: org.apache.http.IHttpResponseInterceptor);
				process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
			}
			export interface IFormattedHeader extends org.apache.http.IHeader {
				getValuePos(): number;
				getBuffer(): org.apache.http.util.CharArrayBuffer;
				getName(): string;
				getValue(): string;
				getElements(): native.Array<org.apache.http.IHeaderElement>;
			}
			export class HttpRequestInterceptor implements org.apache.http.IHttpRequestInterceptor {
				constructor(implementation: org.apache.http.IHttpRequestInterceptor);
				process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
			}
			export interface IHttpEntityEnclosingRequest extends org.apache.http.IHttpRequest {
				expectContinue(): boolean;
				getEntity(): org.apache.http.IHttpEntity;
				setEntity(arg1: org.apache.http.IHttpEntity): void;
				getRequestLine(): org.apache.http.IRequestLine;
				removeHeader(arg1: org.apache.http.IHeader): void;
				getFirstHeader(arg1: string): org.apache.http.IHeader;
				headerIterator(): org.apache.http.IHeaderIterator;
				headerIterator(arg1: string): org.apache.http.IHeaderIterator;
				containsHeader(arg1: string): boolean;
				setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
				removeHeaders(arg1: string): void;
				setHeader(arg1: string, arg2: string): void;
				setHeader(arg1: org.apache.http.IHeader): void;
				getLastHeader(arg1: string): org.apache.http.IHeader;
				addHeader(arg1: org.apache.http.IHeader): void;
				addHeader(arg1: string, arg2: string): void;
				getAllHeaders(): native.Array<org.apache.http.IHeader>;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
				getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				setParams(arg1: org.apache.http.params.IHttpParams): void;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export class HttpEntity implements org.apache.http.IHttpEntity {
				constructor(implementation: org.apache.http.IHttpEntity);
				isRepeatable(): boolean;
				consumeContent(): void;
				isStreaming(): boolean;
				isChunked(): boolean;
				getContent(): java.io.InputStream;
				getContentLength(): any;
				getContentType(): org.apache.http.IHeader;
				getContentEncoding(): org.apache.http.IHeader;
				writeTo(arg1: java.io.OutputStream): void;
			}
			export class ProtocolVersion extends java.lang.Object implements java.io.ISerializable, java.lang.ICloneable {
				constructor(arg1: java.lang.String, arg2: number, arg3: number);
				constructor(arg1: string, arg2: number, arg3: number);
				static class: java.lang.Class<org.apache.http.ProtocolVersion>;
				compareToVersion(arg1: org.apache.http.ProtocolVersion): number;
				forVersion(arg1: number, arg2: number): org.apache.http.ProtocolVersion;
				isComparable(arg1: org.apache.http.ProtocolVersion): boolean;
				greaterEquals(arg1: org.apache.http.ProtocolVersion): boolean;
				getMajor(): number;
				lessEquals(arg1: org.apache.http.ProtocolVersion): boolean;
				getMinor(): number;
				hashCode(): number;
				equals(arg1: any): boolean;
				clone(): any;
				toString(): string;
				getProtocol(): string;
			}
			export module cookie {
				export class CookieSpecFactory implements org.apache.http.cookie.ICookieSpecFactory {
					constructor(implementation: org.apache.http.cookie.ICookieSpecFactory);
					newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
				}
				export class CookieAttributeHandler implements org.apache.http.cookie.ICookieAttributeHandler {
					constructor(implementation: org.apache.http.cookie.ICookieAttributeHandler);
					parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
					parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
					match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
					validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
				}
				export class CookieSpec implements org.apache.http.cookie.ICookieSpec {
					constructor(implementation: org.apache.http.cookie.ICookieSpec);
					getVersionHeader(): org.apache.http.IHeader;
					formatCookies(arg1: java.util.IList<org.apache.http.cookie.ICookie>): java.util.IList<org.apache.http.IHeader>;
					parse(arg1: org.apache.http.IHeader, arg2: org.apache.http.cookie.CookieOrigin): java.util.IList<org.apache.http.cookie.ICookie>;
					match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
					validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					getVersion(): number;
				}
				export class Cookie implements org.apache.http.cookie.ICookie {
					constructor(implementation: org.apache.http.cookie.ICookie);
					getDomain(): string;
					getCommentURL(): string;
					isSecure(): boolean;
					isPersistent(): boolean;
					getPorts(): native.Array<number>;
					isExpired(arg1: java.util.Date): boolean;
					getExpiryDate(): java.util.Date;
					getName(): string;
					getValue(): string;
					getPath(): string;
					getVersion(): number;
					getComment(): string;
				}
				export class MalformedCookieException extends org.apache.http.ProtocolException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
					constructor(arg1: string, arg2: java.lang.Throwable);
					static class: java.lang.Class<org.apache.http.cookie.MalformedCookieException>;
				}
				export class SetCookie implements org.apache.http.cookie.ICookie, org.apache.http.cookie.ISetCookie {
					constructor(implementation: org.apache.http.cookie.ISetCookie);
					ExpiryDate: java.util.Date;
					Value: string;
					Domain: string;
					Comment: string;
					Version: number;
					Path: string;
					setDomain(arg1: java.lang.String): void;
					setDomain(arg1: string): void;
					setPath(arg1: java.lang.String): void;
					setPath(arg1: string): void;
					setSecure(arg1: boolean): void;
					setVersion(arg1: number): void;
					setExpiryDate(arg1: java.util.Date): void;
					setValue(arg1: java.lang.String): void;
					setValue(arg1: string): void;
					setComment(arg1: java.lang.String): void;
					setComment(arg1: string): void;
					getDomain(): string;
					getCommentURL(): string;
					isSecure(): boolean;
					isPersistent(): boolean;
					getPorts(): native.Array<number>;
					isExpired(arg1: java.util.Date): boolean;
					getExpiryDate(): java.util.Date;
					getName(): string;
					getValue(): string;
					getPath(): string;
					getVersion(): number;
					getComment(): string;
				}
				export class SetCookie2 implements org.apache.http.cookie.ISetCookie, org.apache.http.cookie.ISetCookie2 {
					constructor(implementation: org.apache.http.cookie.ISetCookie2);
					ExpiryDate: java.util.Date;
					Value: string;
					Domain: string;
					CommentURL: string;
					Comment: string;
					Version: number;
					Path: string;
					Ports: native.Array<number>;
					setCommentURL(arg1: java.lang.String): void;
					setCommentURL(arg1: string): void;
					setDiscard(arg1: boolean): void;
					setPorts(arg1: native.Array<number>): void;
					setDomain(arg1: string): void;
					setPath(arg1: string): void;
					setSecure(arg1: boolean): void;
					setVersion(arg1: number): void;
					setExpiryDate(arg1: java.util.Date): void;
					setValue(arg1: string): void;
					setComment(arg1: string): void;
					getDomain(): string;
					getCommentURL(): string;
					isSecure(): boolean;
					isPersistent(): boolean;
					getPorts(): native.Array<number>;
					isExpired(arg1: java.util.Date): boolean;
					getExpiryDate(): java.util.Date;
					getName(): string;
					getValue(): string;
					getPath(): string;
					getVersion(): number;
					getComment(): string;
				}
				export class CookieSpecRegistry extends java.lang.Object {
					constructor();
					static class: java.lang.Class<org.apache.http.cookie.CookieSpecRegistry>;
					setItems(arg1: java.util.IMap<string, org.apache.http.cookie.ICookieSpecFactory>): void;
					getSpecNames(): java.util.IList<string>;
					getCookieSpec(arg1: java.lang.String, arg2: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
					getCookieSpec(arg1: string, arg2: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
					getCookieSpec(arg1: java.lang.String): org.apache.http.cookie.ICookieSpec;
					getCookieSpec(arg1: string): org.apache.http.cookie.ICookieSpec;
					register(arg1: java.lang.String, arg2: org.apache.http.cookie.ICookieSpecFactory): void;
					register(arg1: string, arg2: org.apache.http.cookie.ICookieSpecFactory): void;
					unregister(arg1: java.lang.String): void;
					unregister(arg1: string): void;
				}
				export class ClientCookie implements org.apache.http.cookie.ICookie, org.apache.http.cookie.IClientCookie {
					constructor(implementation: org.apache.http.cookie.IClientCookie);
					static VERSION_ATTR: java.lang.String;
					static PATH_ATTR: java.lang.String;
					static DOMAIN_ATTR: java.lang.String;
					static MAX_AGE_ATTR: java.lang.String;
					static SECURE_ATTR: java.lang.String;
					static COMMENT_ATTR: java.lang.String;
					static EXPIRES_ATTR: java.lang.String;
					static PORT_ATTR: java.lang.String;
					static COMMENTURL_ATTR: java.lang.String;
					static DISCARD_ATTR: java.lang.String;
					getAttribute(arg1: java.lang.String): string;
					getAttribute(arg1: string): string;
					containsAttribute(arg1: java.lang.String): boolean;
					containsAttribute(arg1: string): boolean;
					getDomain(): string;
					getCommentURL(): string;
					isSecure(): boolean;
					isPersistent(): boolean;
					getPorts(): native.Array<number>;
					isExpired(arg1: java.util.Date): boolean;
					getExpiryDate(): java.util.Date;
					getName(): string;
					getValue(): string;
					getPath(): string;
					getVersion(): number;
					getComment(): string;
				}
				export module params {
					export interface ICookieSpecPNames {
					}
					export module ICookieSpecPNames {
						var DATE_PATTERNS: java.lang.String;
						var SINGLE_COOKIE_HEADER: java.lang.String;
					}
					export class CookieSpecPNames implements org.apache.http.cookie.params.ICookieSpecPNames {
						constructor(implementation: org.apache.http.cookie.params.ICookieSpecPNames);
						static DATE_PATTERNS: java.lang.String;
						static SINGLE_COOKIE_HEADER: java.lang.String;
					}
					export class CookieSpecParamBean extends org.apache.http.params.HttpAbstractParamBean {
						constructor(arg1: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.cookie.params.CookieSpecParamBean>;
						setDatePatterns(arg1: java.util.ICollection<string>): void;
						setSingleHeader(arg1: boolean): void;
					}
				}
				export class SM implements org.apache.http.cookie.ISM {
					constructor(implementation: org.apache.http.cookie.ISM);
					static COOKIE: java.lang.String;
					static COOKIE2: java.lang.String;
					static SET_COOKIE: java.lang.String;
					static SET_COOKIE2: java.lang.String;
				}
				export class CookiePathComparator extends java.lang.Object implements java.io.ISerializable, java.util.IComparator<org.apache.http.cookie.ICookie> {
					constructor();
					static class: java.lang.Class<org.apache.http.cookie.CookiePathComparator>;
					compare(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.ICookie): number;
					compare(arg1: any, arg2: any): number;
					equals(arg1: any): boolean;
				}
				export interface ISM {
				}
				export module ISM {
					var COOKIE: java.lang.String;
					var COOKIE2: java.lang.String;
					var SET_COOKIE: java.lang.String;
					var SET_COOKIE2: java.lang.String;
				}
				export interface ICookieSpec {
					getVersionHeader(): org.apache.http.IHeader;
					formatCookies(arg1: java.util.IList<org.apache.http.cookie.ICookie>): java.util.IList<org.apache.http.IHeader>;
					parse(arg1: org.apache.http.IHeader, arg2: org.apache.http.cookie.CookieOrigin): java.util.IList<org.apache.http.cookie.ICookie>;
					match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
					validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					getVersion(): number;
				}
				export interface ISetCookie2 extends org.apache.http.cookie.ISetCookie {
					setCommentURL(arg1: string): void;
					setDiscard(arg1: boolean): void;
					setPorts(arg1: native.Array<number>): void;
					setDomain(arg1: string): void;
					setPath(arg1: string): void;
					setSecure(arg1: boolean): void;
					setVersion(arg1: number): void;
					setExpiryDate(arg1: java.util.Date): void;
					setValue(arg1: string): void;
					setComment(arg1: string): void;
					getDomain(): string;
					getCommentURL(): string;
					isSecure(): boolean;
					isPersistent(): boolean;
					getPorts(): native.Array<number>;
					isExpired(arg1: java.util.Date): boolean;
					getExpiryDate(): java.util.Date;
					getName(): string;
					getValue(): string;
					getPath(): string;
					getVersion(): number;
					getComment(): string;
				}
				export interface ICookie {
					getDomain(): string;
					getCommentURL(): string;
					isSecure(): boolean;
					isPersistent(): boolean;
					getPorts(): native.Array<number>;
					isExpired(arg1: java.util.Date): boolean;
					getExpiryDate(): java.util.Date;
					getName(): string;
					getValue(): string;
					getPath(): string;
					getVersion(): number;
					getComment(): string;
				}
				export interface IClientCookie extends org.apache.http.cookie.ICookie {
					getAttribute(arg1: string): string;
					containsAttribute(arg1: string): boolean;
					getDomain(): string;
					getCommentURL(): string;
					isSecure(): boolean;
					isPersistent(): boolean;
					getPorts(): native.Array<number>;
					isExpired(arg1: java.util.Date): boolean;
					getExpiryDate(): java.util.Date;
					getName(): string;
					getValue(): string;
					getPath(): string;
					getVersion(): number;
					getComment(): string;
				}
				export module IClientCookie {
					var VERSION_ATTR: java.lang.String;
					var PATH_ATTR: java.lang.String;
					var DOMAIN_ATTR: java.lang.String;
					var MAX_AGE_ATTR: java.lang.String;
					var SECURE_ATTR: java.lang.String;
					var COMMENT_ATTR: java.lang.String;
					var EXPIRES_ATTR: java.lang.String;
					var PORT_ATTR: java.lang.String;
					var COMMENTURL_ATTR: java.lang.String;
					var DISCARD_ATTR: java.lang.String;
				}
				export interface ICookieSpecFactory {
					newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
				}
				export class CookieIdentityComparator extends java.lang.Object implements java.io.ISerializable, java.util.IComparator<org.apache.http.cookie.ICookie> {
					constructor();
					static class: java.lang.Class<org.apache.http.cookie.CookieIdentityComparator>;
					compare(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.ICookie): number;
					compare(arg1: any, arg2: any): number;
					equals(arg1: any): boolean;
				}
				export class CookieOrigin extends java.lang.Object {
					constructor(arg1: java.lang.String, arg2: number, arg3: java.lang.String, arg4: boolean);
					constructor(arg1: string, arg2: number, arg3: string, arg4: boolean);
					static class: java.lang.Class<org.apache.http.cookie.CookieOrigin>;
					isSecure(): boolean;
					toString(): string;
					getPath(): string;
					getHost(): string;
					getPort(): number;
				}
				export interface ISetCookie extends org.apache.http.cookie.ICookie {
					setDomain(arg1: string): void;
					setPath(arg1: string): void;
					setSecure(arg1: boolean): void;
					setVersion(arg1: number): void;
					setExpiryDate(arg1: java.util.Date): void;
					setValue(arg1: string): void;
					setComment(arg1: string): void;
					getDomain(): string;
					getCommentURL(): string;
					isSecure(): boolean;
					isPersistent(): boolean;
					getPorts(): native.Array<number>;
					isExpired(arg1: java.util.Date): boolean;
					getExpiryDate(): java.util.Date;
					getName(): string;
					getValue(): string;
					getPath(): string;
					getVersion(): number;
					getComment(): string;
				}
				export interface ICookieAttributeHandler {
					parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
					match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
					validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
				}
			}
			export interface INameValuePair {
				getName(): string;
				getValue(): string;
			}
			export interface IHeaderIterator extends java.util.IIterator<any> {
				nextHeader(): org.apache.http.IHeader;
				hasNext(): boolean;
				next(): any;
				remove(): void;
			}
			export class ReasonPhraseCatalog implements org.apache.http.IReasonPhraseCatalog {
				constructor(implementation: org.apache.http.IReasonPhraseCatalog);
				getReason(arg1: number, arg2: java.util.Locale): string;
			}
			export interface IHttpResponseFactory {
				newHttpResponse(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
				newHttpResponse(arg1: org.apache.http.IStatusLine, arg2: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
			}
			export class ProtocolException extends org.apache.http.HttpException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				static class: java.lang.Class<org.apache.http.ProtocolException>;
			}
			export class HeaderIterator implements java.util.IIterator<any>, org.apache.http.IHeaderIterator {
				constructor(implementation: org.apache.http.IHeaderIterator);
				nextHeader(): org.apache.http.IHeader;
				hasNext(): boolean;
				next(): any;
				remove(): void;
			}
			export interface IHttpRequestFactory {
				newHttpRequest(arg1: org.apache.http.IRequestLine): org.apache.http.IHttpRequest;
				newHttpRequest(arg1: string, arg2: string): org.apache.http.IHttpRequest;
			}
			export class ConnectionClosedException extends java.io.IOException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<org.apache.http.ConnectionClosedException>;
			}
			export interface IHeaderElement {
				getParameterCount(): number;
				getParameterByName(arg1: string): org.apache.http.INameValuePair;
				getName(): string;
				getValue(): string;
				getParameters(): native.Array<org.apache.http.INameValuePair>;
				getParameter(arg1: number): org.apache.http.INameValuePair;
			}
			export class ConnectionReuseStrategy implements org.apache.http.IConnectionReuseStrategy {
				constructor(implementation: org.apache.http.IConnectionReuseStrategy);
				keepAlive(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
			}
			export module util {
				export class CharArrayBuffer extends java.lang.Object {
					constructor(arg1: number);
					static class: java.lang.Class<org.apache.http.util.CharArrayBuffer>;
					substringTrimmed(arg1: number, arg2: number): string;
					isFull(): boolean;
					toString(): string;
					append(arg1: any): void;
					append(arg1: native.Array<string>, arg2: number, arg3: number): void;
					append(arg1: java.lang.String): void;
					append(arg1: string): void;
					append(arg1: org.apache.http.util.CharArrayBuffer, arg2: number, arg3: number): void;
					append(arg1: org.apache.http.util.CharArrayBuffer): void;
					append(arg1: org.apache.http.util.ByteArrayBuffer, arg2: number, arg3: number): void;
					charAt(arg1: number): string;
					indexOf(arg1: number, arg2: number, arg3: number): number;
					indexOf(arg1: number): number;
					isEmpty(): boolean;
					length(): number;
					substring(arg1: number, arg2: number): string;
					toCharArray(): native.Array<string>;
					clear(): void;
					capacity(): number;
					ensureCapacity(arg1: number): void;
					setLength(arg1: number): void;
					buffer(): native.Array<string>;
				}
				export class LangUtils extends java.lang.Object {
					static HASH_SEED: number;
					static HASH_OFFSET: number;
					static class: java.lang.Class<org.apache.http.util.LangUtils>;
					static hashCode(arg1: number, arg2: any): number;
					static hashCode(arg1: number, arg2: boolean): number;
					static hashCode(arg1: number, arg2: number): number;
					static equals(arg1: any, arg2: any): boolean;
					static equals(arg1: native.Array<any>, arg2: native.Array<any>): boolean;
					hashCode(): number;
					equals(arg1: any): boolean;
				}
				export class EntityUtils extends java.lang.Object {
					static class: java.lang.Class<org.apache.http.util.EntityUtils>;
					static getContentCharSet(arg1: org.apache.http.IHttpEntity): string;
					static toString(arg1: org.apache.http.IHttpEntity, arg2: java.lang.String): string;
					static toString(arg1: org.apache.http.IHttpEntity, arg2: string): string;
					static toString(arg1: org.apache.http.IHttpEntity): string;
					static toByteArray(arg1: org.apache.http.IHttpEntity): native.Array<native.Byte>;
					toString(): string;
				}
				export class EncodingUtils extends java.lang.Object {
					static class: java.lang.Class<org.apache.http.util.EncodingUtils>;
					static getAsciiString(arg1: native.Array<native.Byte>): string;
					static getAsciiString(arg1: native.Array<native.Byte>, arg2: number, arg3: number): string;
					static getAsciiBytes(arg1: java.lang.String): native.Array<native.Byte>;
					static getAsciiBytes(arg1: string): native.Array<native.Byte>;
					static getBytes(arg1: java.lang.String, arg2: java.lang.String): native.Array<native.Byte>;
					static getBytes(arg1: string, arg2: string): native.Array<native.Byte>;
					static getString(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: java.lang.String): string;
					static getString(arg1: native.Array<native.Byte>, arg2: number, arg3: number, arg4: string): string;
					static getString(arg1: native.Array<native.Byte>, arg2: java.lang.String): string;
					static getString(arg1: native.Array<native.Byte>, arg2: string): string;
				}
				export class ExceptionUtils extends java.lang.Object {
					static class: java.lang.Class<org.apache.http.util.ExceptionUtils>;
					static initCause(arg1: java.lang.Throwable, arg2: java.lang.Throwable): void;
				}
				export class VersionInfo extends java.lang.Object {
					static UNAVAILABLE: java.lang.String;
					static VERSION_PROPERTY_FILE: java.lang.String;
					static PROPERTY_MODULE: java.lang.String;
					static PROPERTY_RELEASE: java.lang.String;
					static PROPERTY_TIMESTAMP: java.lang.String;
					static class: java.lang.Class<org.apache.http.util.VersionInfo>;
					getClassloader(): string;
					static loadVersionInfo(arg1: native.Array<java.lang.String>, arg2: java.lang.ClassLoader): native.Array<org.apache.http.util.VersionInfo>;
					static loadVersionInfo(arg1: java.lang.String, arg2: java.lang.ClassLoader): org.apache.http.util.VersionInfo;
					static loadVersionInfo(arg1: string, arg2: java.lang.ClassLoader): org.apache.http.util.VersionInfo;
					getRelease(): string;
					toString(): string;
					getPackage(): string;
					getModule(): string;
					getTimestamp(): string;
				}
				export class ByteArrayBuffer extends java.lang.Object {
					constructor(arg1: number);
					static class: java.lang.Class<org.apache.http.util.ByteArrayBuffer>;
					byteAt(arg1: number): number;
					isFull(): boolean;
					append(arg1: number): void;
					append(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
					append(arg1: org.apache.http.util.CharArrayBuffer, arg2: number, arg3: number): void;
					isEmpty(): boolean;
					length(): number;
					clear(): void;
					capacity(): number;
					setLength(arg1: number): void;
					toByteArray(): native.Array<native.Byte>;
					buffer(): native.Array<native.Byte>;
				}
			}
			export module auth {
				export class AuthScope extends java.lang.Object {
					constructor(arg1: java.lang.String, arg2: number, arg3: java.lang.String, arg4: java.lang.String);
					constructor(arg1: string, arg2: number, arg3: string, arg4: string);
					constructor(arg1: org.apache.http.auth.AuthScope);
					constructor(arg1: java.lang.String, arg2: number, arg3: java.lang.String);
					constructor(arg1: string, arg2: number, arg3: string);
					constructor(arg1: java.lang.String, arg2: number);
					constructor(arg1: string, arg2: number);
					static ANY_HOST: java.lang.String;
					static ANY_PORT: number;
					static ANY_REALM: java.lang.String;
					static ANY_SCHEME: java.lang.String;
					static ANY: org.apache.http.auth.AuthScope;
					static class: java.lang.Class<org.apache.http.auth.AuthScope>;
					getRealm(): string;
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					getScheme(): string;
					getHost(): string;
					match(arg1: org.apache.http.auth.AuthScope): number;
					getPort(): number;
				}
				export interface ICredentials {
					getUserPrincipal(): java.security.IPrincipal;
					getPassword(): string;
				}
				export class UsernamePasswordCredentials extends java.lang.Object implements org.apache.http.auth.ICredentials {
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					static class: java.lang.Class<org.apache.http.auth.UsernamePasswordCredentials>;
					getUserPrincipal(): java.security.IPrincipal;
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					getPassword(): string;
					getUserName(): string;
				}
				export class AuthScheme implements org.apache.http.auth.IAuthScheme {
					constructor(implementation: org.apache.http.auth.IAuthScheme);
					getSchemeName(): string;
					getRealm(): string;
					isComplete(): boolean;
					processChallenge(arg1: org.apache.http.IHeader): void;
					isConnectionBased(): boolean;
					authenticate(arg1: org.apache.http.auth.ICredentials, arg2: org.apache.http.IHttpRequest): org.apache.http.IHeader;
					getParameter(arg1: java.lang.String): string;
					getParameter(arg1: string): string;
				}
				export class AuthState extends java.lang.Object {
					constructor();
					static class: java.lang.Class<org.apache.http.auth.AuthState>;
					AuthScope: org.apache.http.auth.AuthScope;
					AuthScheme: org.apache.http.auth.IAuthScheme;
					Credentials: org.apache.http.auth.ICredentials;
					getCredentials(): org.apache.http.auth.ICredentials;
					setCredentials(arg1: org.apache.http.auth.ICredentials): void;
					setAuthScope(arg1: org.apache.http.auth.AuthScope): void;
					setAuthScheme(arg1: org.apache.http.auth.IAuthScheme): void;
					getAuthScheme(): org.apache.http.auth.IAuthScheme;
					getAuthScope(): org.apache.http.auth.AuthScope;
					toString(): string;
					invalidate(): void;
					isValid(): boolean;
				}
				export class AUTH extends java.lang.Object {
					static WWW_AUTH: java.lang.String;
					static WWW_AUTH_RESP: java.lang.String;
					static PROXY_AUTH: java.lang.String;
					static PROXY_AUTH_RESP: java.lang.String;
					static class: java.lang.Class<org.apache.http.auth.AUTH>;
				}
				export class BasicUserPrincipal extends java.lang.Object implements java.security.IPrincipal {
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static class: java.lang.Class<org.apache.http.auth.BasicUserPrincipal>;
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					getName(): string;
				}
				export module params {
					export interface IAuthPNames {
					}
					export module IAuthPNames {
						var CREDENTIAL_CHARSET: java.lang.String;
					}
					export class AuthParams extends java.lang.Object {
						static class: java.lang.Class<org.apache.http.auth.params.AuthParams>;
						static getCredentialCharset(arg1: org.apache.http.params.IHttpParams): string;
						static setCredentialCharset(arg1: org.apache.http.params.IHttpParams, arg2: java.lang.String): void;
						static setCredentialCharset(arg1: org.apache.http.params.IHttpParams, arg2: string): void;
					}
					export class AuthParamBean extends org.apache.http.params.HttpAbstractParamBean {
						constructor(arg1: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.auth.params.AuthParamBean>;
						setCredentialCharset(arg1: java.lang.String): void;
						setCredentialCharset(arg1: string): void;
					}
					export class AuthPNames implements org.apache.http.auth.params.IAuthPNames {
						constructor(implementation: org.apache.http.auth.params.IAuthPNames);
						static CREDENTIAL_CHARSET: java.lang.String;
					}
				}
				export class AuthSchemeRegistry extends java.lang.Object {
					constructor();
					static class: java.lang.Class<org.apache.http.auth.AuthSchemeRegistry>;
					setItems(arg1: java.util.IMap<string, org.apache.http.auth.IAuthSchemeFactory>): void;
					getSchemeNames(): java.util.IList<string>;
					getAuthScheme(arg1: java.lang.String, arg2: org.apache.http.params.IHttpParams): org.apache.http.auth.IAuthScheme;
					getAuthScheme(arg1: string, arg2: org.apache.http.params.IHttpParams): org.apache.http.auth.IAuthScheme;
					register(arg1: java.lang.String, arg2: org.apache.http.auth.IAuthSchemeFactory): void;
					register(arg1: string, arg2: org.apache.http.auth.IAuthSchemeFactory): void;
					unregister(arg1: java.lang.String): void;
					unregister(arg1: string): void;
				}
				export class Credentials implements org.apache.http.auth.ICredentials {
					constructor(implementation: org.apache.http.auth.ICredentials);
					getUserPrincipal(): java.security.IPrincipal;
					getPassword(): string;
				}
				export class MalformedChallengeException extends org.apache.http.ProtocolException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
					constructor(arg1: string, arg2: java.lang.Throwable);
					static class: java.lang.Class<org.apache.http.auth.MalformedChallengeException>;
				}
				export class AuthSchemeFactory implements org.apache.http.auth.IAuthSchemeFactory {
					constructor(implementation: org.apache.http.auth.IAuthSchemeFactory);
					newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.auth.IAuthScheme;
				}
				export class InvalidCredentialsException extends org.apache.http.auth.AuthenticationException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
					constructor(arg1: string, arg2: java.lang.Throwable);
					static class: java.lang.Class<org.apache.http.auth.InvalidCredentialsException>;
				}
				export class AuthenticationException extends org.apache.http.ProtocolException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
					constructor(arg1: string, arg2: java.lang.Throwable);
					static class: java.lang.Class<org.apache.http.auth.AuthenticationException>;
				}
				export interface IAuthScheme {
					getSchemeName(): string;
					getRealm(): string;
					isComplete(): boolean;
					processChallenge(arg1: org.apache.http.IHeader): void;
					isConnectionBased(): boolean;
					authenticate(arg1: org.apache.http.auth.ICredentials, arg2: org.apache.http.IHttpRequest): org.apache.http.IHeader;
					getParameter(arg1: string): string;
				}
				export class NTCredentials extends java.lang.Object implements org.apache.http.auth.ICredentials {
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String);
					constructor(arg1: string, arg2: string, arg3: string, arg4: string);
					static class: java.lang.Class<org.apache.http.auth.NTCredentials>;
					getDomain(): string;
					getWorkstation(): string;
					getUserPrincipal(): java.security.IPrincipal;
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					getPassword(): string;
					getUserName(): string;
				}
				export interface IAuthSchemeFactory {
					newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.auth.IAuthScheme;
				}
				export class NTUserPrincipal extends java.lang.Object implements java.security.IPrincipal {
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					static class: java.lang.Class<org.apache.http.auth.NTUserPrincipal>;
					getDomain(): string;
					getUsername(): string;
					hashCode(): number;
					equals(arg1: any): boolean;
					toString(): string;
					getName(): string;
				}
			}
			export interface IHeaderElementIterator extends java.util.IIterator<any> {
				hasNext(): boolean;
				nextElement(): org.apache.http.IHeaderElement;
				next(): any;
				remove(): void;
			}
			export module conn {
				export class BasicManagedEntity extends org.apache.http.entity.HttpEntityWrapper implements org.apache.http.conn.IConnectionReleaseTrigger, org.apache.http.conn.IEofSensorWatcher {
					constructor(arg1: org.apache.http.IHttpEntity, arg2: org.apache.http.conn.IManagedClientConnection, arg3: boolean);
					static class: java.lang.Class<org.apache.http.conn.BasicManagedEntity>;
					isRepeatable(): boolean;
					consumeContent(): void;
					releaseConnection(): void;
					abortConnection(): void;
					eofDetected(arg1: java.io.InputStream): boolean;
					streamClosed(arg1: java.io.InputStream): boolean;
					streamAbort(arg1: java.io.InputStream): boolean;
					getContent(): java.io.InputStream;
					writeTo(arg1: java.io.OutputStream): void;
				}
				export class ClientConnectionManager implements org.apache.http.conn.IClientConnectionManager {
					constructor(implementation: org.apache.http.conn.IClientConnectionManager);
					releaseConnection(arg1: org.apache.http.conn.IManagedClientConnection, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): void;
					requestConnection(arg1: org.apache.http.conn.routing.HttpRoute, arg2: any): org.apache.http.conn.IClientConnectionRequest;
					getSchemeRegistry(): org.apache.http.conn.scheme.SchemeRegistry;
					closeIdleConnections(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
					closeExpiredConnections(): void;
					shutdown(): void;
				}
				export module routing {
					export class HttpRoutePlanner implements org.apache.http.conn.routing.IHttpRoutePlanner {
						constructor(implementation: org.apache.http.conn.routing.IHttpRoutePlanner);
						determineRoute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.conn.routing.HttpRoute;
					}
					export class HttpRoute extends java.lang.Object implements org.apache.http.conn.routing.IRouteInfo, java.lang.ICloneable {
						constructor(arg1: org.apache.http.HttpHost, arg2: java.net.InetAddress, arg3: native.Array<org.apache.http.HttpHost>, arg4: boolean, arg5: org.apache.http.conn.routing.RouteInfo.TunnelType, arg6: org.apache.http.conn.routing.RouteInfo.LayerType);
						constructor(arg1: org.apache.http.HttpHost, arg2: java.net.InetAddress, arg3: boolean);
						constructor(arg1: org.apache.http.HttpHost);
						constructor(arg1: org.apache.http.HttpHost, arg2: java.net.InetAddress, arg3: org.apache.http.HttpHost, arg4: boolean);
						constructor(arg1: org.apache.http.HttpHost, arg2: java.net.InetAddress, arg3: org.apache.http.HttpHost, arg4: boolean, arg5: org.apache.http.conn.routing.RouteInfo.TunnelType, arg6: org.apache.http.conn.routing.RouteInfo.LayerType);
						static class: java.lang.Class<org.apache.http.conn.routing.HttpRoute>;
						getLayerType(): org.apache.http.conn.routing.RouteInfo.LayerType;
						isSecure(): boolean;
						getTargetHost(): org.apache.http.HttpHost;
						getProxyHost(): org.apache.http.HttpHost;
						isLayered(): boolean;
						isTunnelled(): boolean;
						getHopCount(): number;
						getTunnelType(): org.apache.http.conn.routing.RouteInfo.TunnelType;
						getHopTarget(arg1: number): org.apache.http.HttpHost;
						hashCode(): number;
						equals(arg1: any): boolean;
						clone(): any;
						toString(): string;
						getLocalAddress(): java.net.InetAddress;
					}
					export class BasicRouteDirector extends java.lang.Object implements org.apache.http.conn.routing.IHttpRouteDirector {
						constructor();
						static class: java.lang.Class<org.apache.http.conn.routing.BasicRouteDirector>;
						nextStep(arg1: org.apache.http.conn.routing.IRouteInfo, arg2: org.apache.http.conn.routing.IRouteInfo): number;
					}
					export class RouteTracker extends java.lang.Object implements org.apache.http.conn.routing.IRouteInfo, java.lang.ICloneable {
						constructor(arg1: org.apache.http.HttpHost, arg2: java.net.InetAddress);
						constructor(arg1: org.apache.http.conn.routing.HttpRoute);
						static class: java.lang.Class<org.apache.http.conn.routing.RouteTracker>;
						getLayerType(): org.apache.http.conn.routing.RouteInfo.LayerType;
						isSecure(): boolean;
						getTargetHost(): org.apache.http.HttpHost;
						layerProtocol(arg1: boolean): void;
						tunnelTarget(arg1: boolean): void;
						tunnelProxy(arg1: org.apache.http.HttpHost, arg2: boolean): void;
						getProxyHost(): org.apache.http.HttpHost;
						toRoute(): org.apache.http.conn.routing.HttpRoute;
						isLayered(): boolean;
						connectProxy(arg1: org.apache.http.HttpHost, arg2: boolean): void;
						isTunnelled(): boolean;
						getHopCount(): number;
						getTunnelType(): org.apache.http.conn.routing.RouteInfo.TunnelType;
						connectTarget(arg1: boolean): void;
						getHopTarget(arg1: number): org.apache.http.HttpHost;
						hashCode(): number;
						equals(arg1: any): boolean;
						clone(): any;
						toString(): string;
						getLocalAddress(): java.net.InetAddress;
						isConnected(): boolean;
					}
					export interface IHttpRoutePlanner {
						determineRoute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.conn.routing.HttpRoute;
					}
					export class HttpRouteDirector implements org.apache.http.conn.routing.IHttpRouteDirector {
						constructor(implementation: org.apache.http.conn.routing.IHttpRouteDirector);
						static UNREACHABLE: number;
						static COMPLETE: number;
						static CONNECT_TARGET: number;
						static CONNECT_PROXY: number;
						static TUNNEL_TARGET: number;
						static TUNNEL_PROXY: number;
						static LAYER_PROTOCOL: number;
						nextStep(arg1: org.apache.http.conn.routing.IRouteInfo, arg2: org.apache.http.conn.routing.IRouteInfo): number;
					}
					export class RouteInfo implements org.apache.http.conn.routing.IRouteInfo {
						constructor(implementation: org.apache.http.conn.routing.IRouteInfo);
						getLayerType(): org.apache.http.conn.routing.RouteInfo.LayerType;
						isSecure(): boolean;
						getTargetHost(): org.apache.http.HttpHost;
						getProxyHost(): org.apache.http.HttpHost;
						isLayered(): boolean;
						isTunnelled(): boolean;
						getHopCount(): number;
						getTunnelType(): org.apache.http.conn.routing.RouteInfo.TunnelType;
						getHopTarget(arg1: number): org.apache.http.HttpHost;
						getLocalAddress(): java.net.InetAddress;
					}
					export module RouteInfo {
						export enum TunnelType {
							PLAIN,
							TUNNELLED
						}
						export module TunnelType {
							export function valueOf(arg1: java.lang.String): org.apache.http.conn.routing.RouteInfo.TunnelType;
							export function valueOf(arg1: string): org.apache.http.conn.routing.RouteInfo.TunnelType;
							export function values(): native.Array<org.apache.http.conn.routing.RouteInfo.TunnelType>;
						}
						export enum LayerType {
							LAYERED,
							PLAIN
						}
						export module LayerType {
							export function valueOf(arg1: java.lang.String): org.apache.http.conn.routing.RouteInfo.LayerType;
							export function valueOf(arg1: string): org.apache.http.conn.routing.RouteInfo.LayerType;
							export function values(): native.Array<org.apache.http.conn.routing.RouteInfo.LayerType>;
						}
					}
					export interface IHttpRouteDirector {
						nextStep(arg1: org.apache.http.conn.routing.IRouteInfo, arg2: org.apache.http.conn.routing.IRouteInfo): number;
					}
					export module IHttpRouteDirector {
						var UNREACHABLE: number;
						var COMPLETE: number;
						var CONNECT_TARGET: number;
						var CONNECT_PROXY: number;
						var TUNNEL_TARGET: number;
						var TUNNEL_PROXY: number;
						var LAYER_PROTOCOL: number;
					}
					export interface IRouteInfo {
						getLayerType(): org.apache.http.conn.routing.RouteInfo.LayerType;
						isSecure(): boolean;
						getTargetHost(): org.apache.http.HttpHost;
						getProxyHost(): org.apache.http.HttpHost;
						isLayered(): boolean;
						isTunnelled(): boolean;
						getHopCount(): number;
						getTunnelType(): org.apache.http.conn.routing.RouteInfo.TunnelType;
						getHopTarget(arg1: number): org.apache.http.HttpHost;
						getLocalAddress(): java.net.InetAddress;
					}
				}
				export class ConnectionReleaseTrigger implements org.apache.http.conn.IConnectionReleaseTrigger {
					constructor(implementation: org.apache.http.conn.IConnectionReleaseTrigger);
					releaseConnection(): void;
					abortConnection(): void;
				}
				export class ManagedClientConnection implements org.apache.http.IHttpClientConnection, org.apache.http.IHttpInetConnection, org.apache.http.conn.IConnectionReleaseTrigger, org.apache.http.conn.IManagedClientConnection {
					constructor(implementation: org.apache.http.conn.IManagedClientConnection);
					State: any;
					SocketTimeout: number;
					isSecure(): boolean;
					unmarkReusable(): void;
					setIdleDuration(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
					isMarkedReusable(): boolean;
					getRoute(): org.apache.http.conn.routing.HttpRoute;
					getSSLSession(): javax.net.ssl.ISSLSession;
					markReusable(): void;
					layerProtocol(arg1: org.apache.http.protocol.IHttpContext, arg2: org.apache.http.params.IHttpParams): void;
					tunnelTarget(arg1: boolean, arg2: org.apache.http.params.IHttpParams): void;
					tunnelProxy(arg1: org.apache.http.HttpHost, arg2: boolean, arg3: org.apache.http.params.IHttpParams): void;
					getState(): any;
					open(arg1: org.apache.http.conn.routing.HttpRoute, arg2: org.apache.http.protocol.IHttpContext, arg3: org.apache.http.params.IHttpParams): void;
					setState(arg1: any): void;
					sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
					receiveResponseHeader(): org.apache.http.IHttpResponse;
					sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
					receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
					isResponseAvailable(arg1: number): boolean;
					flush(): void;
					getSocketTimeout(): number;
					setSocketTimeout(arg1: number): void;
					isStale(): boolean;
					close(): void;
					isOpen(): boolean;
					shutdown(): void;
					getMetrics(): org.apache.http.IHttpConnectionMetrics;
					getRemotePort(): number;
					getLocalPort(): number;
					getLocalAddress(): java.net.InetAddress;
					getRemoteAddress(): java.net.InetAddress;
					releaseConnection(): void;
					abortConnection(): void;
				}
				export module ssl {
					export interface IX509HostnameVerifier extends javax.net.ssl.IHostnameVerifier {
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: string, arg2: java.security.cert.X509Certificate): void;
						verify(arg1: string, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: string, arg2: javax.net.ssl.ISSLSession): boolean;
					}
					export class AbstractVerifier extends java.lang.Object implements org.apache.http.conn.ssl.IX509HostnameVerifier {
						constructor();
						static class: java.lang.Class<org.apache.http.conn.ssl.AbstractVerifier>;
						static acceptableCountryWildcard(arg1: java.lang.String): boolean;
						static acceptableCountryWildcard(arg1: string): boolean;
						static getDNSSubjectAlts(arg1: java.security.cert.X509Certificate): native.Array<java.lang.String>;
						static countDots(arg1: java.lang.String): number;
						static countDots(arg1: string): number;
						static getCNs(arg1: java.security.cert.X509Certificate): native.Array<java.lang.String>;
						verify(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: boolean): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: boolean): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: string, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: string, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: java.lang.String, arg2: java.security.cert.X509Certificate): void;
						verify(arg1: string, arg2: java.security.cert.X509Certificate): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
					}
					export class X509HostnameVerifier implements javax.net.ssl.IHostnameVerifier, org.apache.http.conn.ssl.IX509HostnameVerifier {
						constructor(implementation: org.apache.http.conn.ssl.IX509HostnameVerifier);
						verify(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: java.lang.String, arg2: java.security.cert.X509Certificate): void;
						verify(arg1: string, arg2: java.security.cert.X509Certificate): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: string, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: string, arg2: javax.net.ssl.ISSLSession): boolean;
					}
					export class SSLSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.ILayeredSocketFactory {
						constructor(arg1: java.security.KeyStore, arg2: java.lang.String, arg3: java.security.KeyStore);
						constructor(arg1: java.security.KeyStore, arg2: string, arg3: java.security.KeyStore);
						constructor(arg1: java.security.KeyStore, arg2: java.lang.String);
						constructor(arg1: java.security.KeyStore, arg2: string);
						constructor(arg1: java.security.KeyStore);
						constructor(arg1: java.lang.String, arg2: java.security.KeyStore, arg3: java.lang.String, arg4: java.security.KeyStore, arg5: java.security.SecureRandom, arg6: org.apache.http.conn.scheme.IHostNameResolver);
						constructor(arg1: string, arg2: java.security.KeyStore, arg3: string, arg4: java.security.KeyStore, arg5: java.security.SecureRandom, arg6: org.apache.http.conn.scheme.IHostNameResolver);
						static TLS: java.lang.String;
						static SSL: java.lang.String;
						static SSLV2: java.lang.String;
						static ALLOW_ALL_HOSTNAME_VERIFIER: org.apache.http.conn.ssl.IX509HostnameVerifier;
						static BROWSER_COMPATIBLE_HOSTNAME_VERIFIER: org.apache.http.conn.ssl.IX509HostnameVerifier;
						static STRICT_HOSTNAME_VERIFIER: org.apache.http.conn.ssl.IX509HostnameVerifier;
						static class: java.lang.Class<org.apache.http.conn.ssl.SSLSocketFactory>;
						HostnameVerifier: org.apache.http.conn.ssl.IX509HostnameVerifier;
						static getSocketFactory(): org.apache.http.conn.ssl.SSLSocketFactory;
						isSecure(arg1: java.net.Socket): boolean;
						createSocket(): java.net.Socket;
						createSocket(arg1: java.net.Socket, arg2: java.lang.String, arg3: number, arg4: boolean): java.net.Socket;
						createSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: boolean): java.net.Socket;
						setHostnameVerifier(arg1: org.apache.http.conn.ssl.IX509HostnameVerifier): void;
						getHostnameVerifier(): org.apache.http.conn.ssl.IX509HostnameVerifier;
						connectSocket(arg1: java.net.Socket, arg2: java.lang.String, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
						connectSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
					}
					export class StrictHostnameVerifier extends org.apache.http.conn.ssl.AbstractVerifier {
						constructor();
						static class: java.lang.Class<org.apache.http.conn.ssl.StrictHostnameVerifier>;
						toString(): string;
						verify(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: boolean): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: boolean): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: string, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: string, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: java.lang.String, arg2: java.security.cert.X509Certificate): void;
						verify(arg1: string, arg2: java.security.cert.X509Certificate): void;
					}
					export class AllowAllHostnameVerifier extends org.apache.http.conn.ssl.AbstractVerifier {
						constructor();
						static class: java.lang.Class<org.apache.http.conn.ssl.AllowAllHostnameVerifier>;
						toString(): string;
						verify(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: boolean): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: boolean): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: string, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: string, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: java.lang.String, arg2: java.security.cert.X509Certificate): void;
						verify(arg1: string, arg2: java.security.cert.X509Certificate): void;
					}
					export class BrowserCompatHostnameVerifier extends org.apache.http.conn.ssl.AbstractVerifier {
						constructor();
						static class: java.lang.Class<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier>;
						toString(): string;
						verify(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>): void;
						verify(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: boolean): void;
						verify(arg1: string, arg2: native.Array<java.lang.String>, arg3: native.Array<java.lang.String>, arg4: boolean): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: string, arg2: javax.net.ssl.SSLSocket): void;
						verify(arg1: java.lang.String, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: string, arg2: javax.net.ssl.ISSLSession): boolean;
						verify(arg1: java.lang.String, arg2: java.security.cert.X509Certificate): void;
						verify(arg1: string, arg2: java.security.cert.X509Certificate): void;
					}
				}
				export class OperatedClientConnection implements org.apache.http.IHttpClientConnection, org.apache.http.IHttpInetConnection, org.apache.http.conn.IOperatedClientConnection {
					constructor(implementation: org.apache.http.conn.IOperatedClientConnection);
					SocketTimeout: number;
					isSecure(): boolean;
					openCompleted(arg1: boolean, arg2: org.apache.http.params.IHttpParams): void;
					getTargetHost(): org.apache.http.HttpHost;
					opening(arg1: java.net.Socket, arg2: org.apache.http.HttpHost): void;
					update(arg1: java.net.Socket, arg2: org.apache.http.HttpHost, arg3: boolean, arg4: org.apache.http.params.IHttpParams): void;
					getSocket(): java.net.Socket;
					sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
					receiveResponseHeader(): org.apache.http.IHttpResponse;
					sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
					receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
					isResponseAvailable(arg1: number): boolean;
					flush(): void;
					getSocketTimeout(): number;
					setSocketTimeout(arg1: number): void;
					isStale(): boolean;
					close(): void;
					isOpen(): boolean;
					shutdown(): void;
					getMetrics(): org.apache.http.IHttpConnectionMetrics;
					getRemotePort(): number;
					getLocalPort(): number;
					getLocalAddress(): java.net.InetAddress;
					getRemoteAddress(): java.net.InetAddress;
				}
				export class EofSensorInputStream extends java.io.InputStream implements org.apache.http.conn.IConnectionReleaseTrigger {
					constructor(arg1: java.io.InputStream, arg2: org.apache.http.conn.IEofSensorWatcher);
					static class: java.lang.Class<org.apache.http.conn.EofSensorInputStream>;
					releaseConnection(): void;
					abortConnection(): void;
					close(): void;
					available(): number;
					read(arg1: native.Array<native.Byte>): number;
					read(): number;
					read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
				}
				export class ClientConnectionOperator implements org.apache.http.conn.IClientConnectionOperator {
					constructor(implementation: org.apache.http.conn.IClientConnectionOperator);
					createConnection(): org.apache.http.conn.IOperatedClientConnection;
					updateSecureConnection(arg1: org.apache.http.conn.IOperatedClientConnection, arg2: org.apache.http.HttpHost, arg3: org.apache.http.protocol.IHttpContext, arg4: org.apache.http.params.IHttpParams): void;
					openConnection(arg1: org.apache.http.conn.IOperatedClientConnection, arg2: org.apache.http.HttpHost, arg3: java.net.InetAddress, arg4: org.apache.http.protocol.IHttpContext, arg5: org.apache.http.params.IHttpParams): void;
				}
				export class ConnectTimeoutException extends java.io.InterruptedIOException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static class: java.lang.Class<org.apache.http.conn.ConnectTimeoutException>;
				}
				export module scheme {
					export class SchemeRegistry extends java.lang.Object {
						constructor();
						static class: java.lang.Class<org.apache.http.conn.scheme.SchemeRegistry>;
						setItems(arg1: java.util.IMap<string, org.apache.http.conn.scheme.Scheme>): void;
						getSchemeNames(): java.util.IList<string>;
						get(arg1: java.lang.String): org.apache.http.conn.scheme.Scheme;
						get(arg1: string): org.apache.http.conn.scheme.Scheme;
						register(arg1: org.apache.http.conn.scheme.Scheme): org.apache.http.conn.scheme.Scheme;
						getScheme(arg1: org.apache.http.HttpHost): org.apache.http.conn.scheme.Scheme;
						getScheme(arg1: java.lang.String): org.apache.http.conn.scheme.Scheme;
						getScheme(arg1: string): org.apache.http.conn.scheme.Scheme;
						unregister(arg1: java.lang.String): org.apache.http.conn.scheme.Scheme;
						unregister(arg1: string): org.apache.http.conn.scheme.Scheme;
					}
					export class SocketFactory implements org.apache.http.conn.scheme.ISocketFactory {
						constructor(implementation: org.apache.http.conn.scheme.ISocketFactory);
						isSecure(arg1: java.net.Socket): boolean;
						createSocket(): java.net.Socket;
						connectSocket(arg1: java.net.Socket, arg2: java.lang.String, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
						connectSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
					}
					export class Scheme extends java.lang.Object {
						constructor(arg1: java.lang.String, arg2: org.apache.http.conn.scheme.ISocketFactory, arg3: number);
						constructor(arg1: string, arg2: org.apache.http.conn.scheme.ISocketFactory, arg3: number);
						static class: java.lang.Class<org.apache.http.conn.scheme.Scheme>;
						getSocketFactory(): org.apache.http.conn.scheme.ISocketFactory;
						isLayered(): boolean;
						resolvePort(arg1: number): number;
						hashCode(): number;
						equals(arg1: any): boolean;
						toString(): string;
						getName(): string;
						getDefaultPort(): number;
					}
					export class HostNameResolver implements org.apache.http.conn.scheme.IHostNameResolver {
						constructor(implementation: org.apache.http.conn.scheme.IHostNameResolver);
						resolve(arg1: java.lang.String): java.net.InetAddress;
						resolve(arg1: string): java.net.InetAddress;
					}
					export class LayeredSocketFactory implements org.apache.http.conn.scheme.ISocketFactory, org.apache.http.conn.scheme.ILayeredSocketFactory {
						constructor(implementation: org.apache.http.conn.scheme.ILayeredSocketFactory);
						createSocket(arg1: java.net.Socket, arg2: java.lang.String, arg3: number, arg4: boolean): java.net.Socket;
						createSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: boolean): java.net.Socket;
						isSecure(arg1: java.net.Socket): boolean;
						createSocket(): java.net.Socket;
						connectSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
					}
					export interface ISocketFactory {
						isSecure(arg1: java.net.Socket): boolean;
						createSocket(): java.net.Socket;
						connectSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
					}
					export class PlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.ISocketFactory {
						constructor(arg1: org.apache.http.conn.scheme.IHostNameResolver);
						constructor();
						static class: java.lang.Class<org.apache.http.conn.scheme.PlainSocketFactory>;
						static getSocketFactory(): org.apache.http.conn.scheme.PlainSocketFactory;
						isSecure(arg1: java.net.Socket): boolean;
						createSocket(): java.net.Socket;
						connectSocket(arg1: java.net.Socket, arg2: java.lang.String, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
						connectSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
						hashCode(): number;
						equals(arg1: any): boolean;
					}
					export interface IHostNameResolver {
						resolve(arg1: string): java.net.InetAddress;
					}
					export interface ILayeredSocketFactory extends org.apache.http.conn.scheme.ISocketFactory {
						createSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: boolean): java.net.Socket;
						isSecure(arg1: java.net.Socket): boolean;
						createSocket(): java.net.Socket;
						connectSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
					}
				}
				export interface IManagedClientConnection extends org.apache.http.IHttpClientConnection, org.apache.http.IHttpInetConnection, org.apache.http.conn.IConnectionReleaseTrigger {
					isSecure(): boolean;
					unmarkReusable(): void;
					setIdleDuration(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
					isMarkedReusable(): boolean;
					getRoute(): org.apache.http.conn.routing.HttpRoute;
					getSSLSession(): javax.net.ssl.ISSLSession;
					markReusable(): void;
					layerProtocol(arg1: org.apache.http.protocol.IHttpContext, arg2: org.apache.http.params.IHttpParams): void;
					tunnelTarget(arg1: boolean, arg2: org.apache.http.params.IHttpParams): void;
					tunnelProxy(arg1: org.apache.http.HttpHost, arg2: boolean, arg3: org.apache.http.params.IHttpParams): void;
					getState(): any;
					open(arg1: org.apache.http.conn.routing.HttpRoute, arg2: org.apache.http.protocol.IHttpContext, arg3: org.apache.http.params.IHttpParams): void;
					setState(arg1: any): void;
					sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
					receiveResponseHeader(): org.apache.http.IHttpResponse;
					sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
					receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
					isResponseAvailable(arg1: number): boolean;
					flush(): void;
					getSocketTimeout(): number;
					setSocketTimeout(arg1: number): void;
					isStale(): boolean;
					close(): void;
					isOpen(): boolean;
					shutdown(): void;
					getMetrics(): org.apache.http.IHttpConnectionMetrics;
					getRemotePort(): number;
					getLocalPort(): number;
					getLocalAddress(): java.net.InetAddress;
					getRemoteAddress(): java.net.InetAddress;
					releaseConnection(): void;
					abortConnection(): void;
				}
				export class HttpHostConnectException extends java.net.ConnectException {
					constructor(arg1: org.apache.http.HttpHost, arg2: java.net.ConnectException);
					static class: java.lang.Class<org.apache.http.conn.HttpHostConnectException>;
					getHost(): org.apache.http.HttpHost;
				}
				export class ConnectionPoolTimeoutException extends org.apache.http.conn.ConnectTimeoutException {
					constructor();
					constructor(arg1: java.lang.String);
					constructor(arg1: string);
					static class: java.lang.Class<org.apache.http.conn.ConnectionPoolTimeoutException>;
				}
				export interface IConnectionKeepAliveStrategy {
					getKeepAliveDuration(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): any;
				}
				export class ClientConnectionManagerFactory implements org.apache.http.conn.IClientConnectionManagerFactory {
					constructor(implementation: org.apache.http.conn.IClientConnectionManagerFactory);
					newInstance(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.conn.scheme.SchemeRegistry): org.apache.http.conn.IClientConnectionManager;
				}
				export class MultihomePlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.ISocketFactory {
					static class: java.lang.Class<org.apache.http.conn.MultihomePlainSocketFactory>;
					static getSocketFactory(): org.apache.http.conn.MultihomePlainSocketFactory;
					isSecure(arg1: java.net.Socket): boolean;
					createSocket(): java.net.Socket;
					connectSocket(arg1: java.net.Socket, arg2: java.lang.String, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
					connectSocket(arg1: java.net.Socket, arg2: string, arg3: number, arg4: java.net.InetAddress, arg5: number, arg6: org.apache.http.params.IHttpParams): java.net.Socket;
					hashCode(): number;
					equals(arg1: any): boolean;
				}
				export class ClientConnectionRequest implements org.apache.http.conn.IClientConnectionRequest {
					constructor(implementation: org.apache.http.conn.IClientConnectionRequest);
					abortRequest(): void;
					getConnection(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): org.apache.http.conn.IManagedClientConnection;
				}
				export module params {
					export class ConnPerRoute implements org.apache.http.conn.params.IConnPerRoute {
						constructor(implementation: org.apache.http.conn.params.IConnPerRoute);
						getMaxForRoute(arg1: org.apache.http.conn.routing.HttpRoute): number;
					}
					export class ConnRouteParams extends java.lang.Object implements org.apache.http.conn.params.IConnRoutePNames {
						static NO_HOST: org.apache.http.HttpHost;
						static NO_ROUTE: org.apache.http.conn.routing.HttpRoute;
						static class: java.lang.Class<org.apache.http.conn.params.ConnRouteParams>;
						static getForcedRoute(arg1: org.apache.http.params.IHttpParams): org.apache.http.conn.routing.HttpRoute;
						static setDefaultProxy(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.HttpHost): void;
						static setLocalAddress(arg1: org.apache.http.params.IHttpParams, arg2: java.net.InetAddress): void;
						static getDefaultProxy(arg1: org.apache.http.params.IHttpParams): org.apache.http.HttpHost;
						static setForcedRoute(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.conn.routing.HttpRoute): void;
						static getLocalAddress(arg1: org.apache.http.params.IHttpParams): java.net.InetAddress;
					}
					export class ConnConnectionParamBean extends org.apache.http.params.HttpAbstractParamBean {
						constructor(arg1: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.conn.params.ConnConnectionParamBean>;
						setMaxStatusLineGarbage(arg1: number): void;
					}
					export interface IConnRoutePNames {
					}
					export module IConnRoutePNames {
						var DEFAULT_PROXY: java.lang.String;
						var LOCAL_ADDRESS: java.lang.String;
						var FORCED_ROUTE: java.lang.String;
					}
					export class ConnRoutePNames implements org.apache.http.conn.params.IConnRoutePNames {
						constructor(implementation: org.apache.http.conn.params.IConnRoutePNames);
						static DEFAULT_PROXY: java.lang.String;
						static LOCAL_ADDRESS: java.lang.String;
						static FORCED_ROUTE: java.lang.String;
					}
					export class ConnManagerParamBean extends org.apache.http.params.HttpAbstractParamBean {
						constructor(arg1: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.conn.params.ConnManagerParamBean>;
						setTimeout(arg1: native.Long): void;
						setMaxTotalConnections(arg1: number): void;
						setConnectionsPerRoute(arg1: org.apache.http.conn.params.ConnPerRouteBean): void;
					}
					export class ConnManagerParams extends java.lang.Object implements org.apache.http.conn.params.IConnManagerPNames {
						constructor();
						static DEFAULT_MAX_TOTAL_CONNECTIONS: number;
						static class: java.lang.Class<org.apache.http.conn.params.ConnManagerParams>;
						static setTimeout(arg1: org.apache.http.params.IHttpParams, arg2: native.Long): void;
						static setMaxConnectionsPerRoute(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.conn.params.IConnPerRoute): void;
						static getMaxConnectionsPerRoute(arg1: org.apache.http.params.IHttpParams): org.apache.http.conn.params.IConnPerRoute;
						static setMaxTotalConnections(arg1: org.apache.http.params.IHttpParams, arg2: number): void;
						static getMaxTotalConnections(arg1: org.apache.http.params.IHttpParams): number;
						static getTimeout(arg1: org.apache.http.params.IHttpParams): any;
					}
					export interface IConnManagerPNames {
					}
					export module IConnManagerPNames {
						var TIMEOUT: java.lang.String;
						var MAX_CONNECTIONS_PER_ROUTE: java.lang.String;
						var MAX_TOTAL_CONNECTIONS: java.lang.String;
					}
					export interface IConnConnectionPNames {
					}
					export module IConnConnectionPNames {
						var MAX_STATUS_LINE_GARBAGE: java.lang.String;
					}
					export class ConnManagerPNames implements org.apache.http.conn.params.IConnManagerPNames {
						constructor(implementation: org.apache.http.conn.params.IConnManagerPNames);
						static TIMEOUT: java.lang.String;
						static MAX_CONNECTIONS_PER_ROUTE: java.lang.String;
						static MAX_TOTAL_CONNECTIONS: java.lang.String;
					}
					export class ConnConnectionPNames implements org.apache.http.conn.params.IConnConnectionPNames {
						constructor(implementation: org.apache.http.conn.params.IConnConnectionPNames);
						static MAX_STATUS_LINE_GARBAGE: java.lang.String;
					}
					export interface IConnPerRoute {
						getMaxForRoute(arg1: org.apache.http.conn.routing.HttpRoute): number;
					}
					export class ConnRouteParamBean extends org.apache.http.params.HttpAbstractParamBean {
						constructor(arg1: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.conn.params.ConnRouteParamBean>;
						setDefaultProxy(arg1: org.apache.http.HttpHost): void;
						setLocalAddress(arg1: java.net.InetAddress): void;
						setForcedRoute(arg1: org.apache.http.conn.routing.HttpRoute): void;
					}
					export class ConnPerRouteBean extends java.lang.Object implements org.apache.http.conn.params.IConnPerRoute {
						constructor();
						constructor(arg1: number);
						static DEFAULT_MAX_CONNECTIONS_PER_ROUTE: number;
						static class: java.lang.Class<org.apache.http.conn.params.ConnPerRouteBean>;
						getMaxForRoute(arg1: org.apache.http.conn.routing.HttpRoute): number;
						setMaxForRoute(arg1: org.apache.http.conn.routing.HttpRoute, arg2: number): void;
						setMaxForRoutes(arg1: java.util.IMap<org.apache.http.conn.routing.HttpRoute, java.lang.Integer>): void;
						setDefaultMaxPerRoute(arg1: number): void;
						getDefaultMax(): number;
					}
				}
				export interface IConnectionReleaseTrigger {
					releaseConnection(): void;
					abortConnection(): void;
				}
				export class ConnectionKeepAliveStrategy implements org.apache.http.conn.IConnectionKeepAliveStrategy {
					constructor(implementation: org.apache.http.conn.IConnectionKeepAliveStrategy);
					getKeepAliveDuration(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): any;
				}
				export interface IClientConnectionRequest {
					abortRequest(): void;
					getConnection(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): org.apache.http.conn.IManagedClientConnection;
				}
				export interface IEofSensorWatcher {
					eofDetected(arg1: java.io.InputStream): boolean;
					streamClosed(arg1: java.io.InputStream): boolean;
					streamAbort(arg1: java.io.InputStream): boolean;
				}
				export interface IClientConnectionOperator {
					createConnection(): org.apache.http.conn.IOperatedClientConnection;
					updateSecureConnection(arg1: org.apache.http.conn.IOperatedClientConnection, arg2: org.apache.http.HttpHost, arg3: org.apache.http.protocol.IHttpContext, arg4: org.apache.http.params.IHttpParams): void;
					openConnection(arg1: org.apache.http.conn.IOperatedClientConnection, arg2: org.apache.http.HttpHost, arg3: java.net.InetAddress, arg4: org.apache.http.protocol.IHttpContext, arg5: org.apache.http.params.IHttpParams): void;
				}
				export interface IOperatedClientConnection extends org.apache.http.IHttpClientConnection, org.apache.http.IHttpInetConnection {
					isSecure(): boolean;
					openCompleted(arg1: boolean, arg2: org.apache.http.params.IHttpParams): void;
					getTargetHost(): org.apache.http.HttpHost;
					opening(arg1: java.net.Socket, arg2: org.apache.http.HttpHost): void;
					update(arg1: java.net.Socket, arg2: org.apache.http.HttpHost, arg3: boolean, arg4: org.apache.http.params.IHttpParams): void;
					getSocket(): java.net.Socket;
					sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
					receiveResponseHeader(): org.apache.http.IHttpResponse;
					sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
					receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
					isResponseAvailable(arg1: number): boolean;
					flush(): void;
					getSocketTimeout(): number;
					setSocketTimeout(arg1: number): void;
					isStale(): boolean;
					close(): void;
					isOpen(): boolean;
					shutdown(): void;
					getMetrics(): org.apache.http.IHttpConnectionMetrics;
					getRemotePort(): number;
					getLocalPort(): number;
					getLocalAddress(): java.net.InetAddress;
					getRemoteAddress(): java.net.InetAddress;
				}
				export interface IClientConnectionManagerFactory {
					newInstance(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.conn.scheme.SchemeRegistry): org.apache.http.conn.IClientConnectionManager;
				}
				export class BasicEofSensorWatcher extends java.lang.Object implements org.apache.http.conn.IEofSensorWatcher {
					constructor(arg1: org.apache.http.conn.IManagedClientConnection, arg2: boolean);
					static class: java.lang.Class<org.apache.http.conn.BasicEofSensorWatcher>;
					eofDetected(arg1: java.io.InputStream): boolean;
					streamClosed(arg1: java.io.InputStream): boolean;
					streamAbort(arg1: java.io.InputStream): boolean;
				}
				export class EofSensorWatcher implements org.apache.http.conn.IEofSensorWatcher {
					constructor(implementation: org.apache.http.conn.IEofSensorWatcher);
					eofDetected(arg1: java.io.InputStream): boolean;
					streamClosed(arg1: java.io.InputStream): boolean;
					streamAbort(arg1: java.io.InputStream): boolean;
				}
				export interface IClientConnectionManager {
					releaseConnection(arg1: org.apache.http.conn.IManagedClientConnection, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): void;
					requestConnection(arg1: org.apache.http.conn.routing.HttpRoute, arg2: any): org.apache.http.conn.IClientConnectionRequest;
					getSchemeRegistry(): org.apache.http.conn.scheme.SchemeRegistry;
					closeIdleConnections(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
					closeExpiredConnections(): void;
					shutdown(): void;
				}
				export module util {
					export class InetAddressUtils extends java.lang.Object {
						static class: java.lang.Class<org.apache.http.conn.util.InetAddressUtils>;
						static isIPv6HexCompressedAddress(arg1: java.lang.String): boolean;
						static isIPv6HexCompressedAddress(arg1: string): boolean;
						static isIPv6StdAddress(arg1: java.lang.String): boolean;
						static isIPv6StdAddress(arg1: string): boolean;
						static isIPv6Address(arg1: java.lang.String): boolean;
						static isIPv6Address(arg1: string): boolean;
						static isIPv4Address(arg1: java.lang.String): boolean;
						static isIPv4Address(arg1: string): boolean;
					}
				}
			}
			export interface IHttpServerConnection extends org.apache.http.IHttpConnection {
				sendResponseHeader(arg1: org.apache.http.IHttpResponse): void;
				sendResponseEntity(arg1: org.apache.http.IHttpResponse): void;
				receiveRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
				receiveRequestHeader(): org.apache.http.IHttpRequest;
				flush(): void;
				getSocketTimeout(): number;
				setSocketTimeout(arg1: number): void;
				isStale(): boolean;
				close(): void;
				isOpen(): boolean;
				shutdown(): void;
				getMetrics(): org.apache.http.IHttpConnectionMetrics;
			}
			export class HttpStatus implements org.apache.http.IHttpStatus {
				constructor(implementation: org.apache.http.IHttpStatus);
				static SC_CONTINUE: number;
				static SC_SWITCHING_PROTOCOLS: number;
				static SC_PROCESSING: number;
				static SC_OK: number;
				static SC_CREATED: number;
				static SC_ACCEPTED: number;
				static SC_NON_AUTHORITATIVE_INFORMATION: number;
				static SC_NO_CONTENT: number;
				static SC_RESET_CONTENT: number;
				static SC_PARTIAL_CONTENT: number;
				static SC_MULTI_STATUS: number;
				static SC_MULTIPLE_CHOICES: number;
				static SC_MOVED_PERMANENTLY: number;
				static SC_MOVED_TEMPORARILY: number;
				static SC_SEE_OTHER: number;
				static SC_NOT_MODIFIED: number;
				static SC_USE_PROXY: number;
				static SC_TEMPORARY_REDIRECT: number;
				static SC_BAD_REQUEST: number;
				static SC_UNAUTHORIZED: number;
				static SC_PAYMENT_REQUIRED: number;
				static SC_FORBIDDEN: number;
				static SC_NOT_FOUND: number;
				static SC_METHOD_NOT_ALLOWED: number;
				static SC_NOT_ACCEPTABLE: number;
				static SC_PROXY_AUTHENTICATION_REQUIRED: number;
				static SC_REQUEST_TIMEOUT: number;
				static SC_CONFLICT: number;
				static SC_GONE: number;
				static SC_LENGTH_REQUIRED: number;
				static SC_PRECONDITION_FAILED: number;
				static SC_REQUEST_TOO_LONG: number;
				static SC_REQUEST_URI_TOO_LONG: number;
				static SC_UNSUPPORTED_MEDIA_TYPE: number;
				static SC_REQUESTED_RANGE_NOT_SATISFIABLE: number;
				static SC_EXPECTATION_FAILED: number;
				static SC_INSUFFICIENT_SPACE_ON_RESOURCE: number;
				static SC_METHOD_FAILURE: number;
				static SC_UNPROCESSABLE_ENTITY: number;
				static SC_LOCKED: number;
				static SC_FAILED_DEPENDENCY: number;
				static SC_INTERNAL_SERVER_ERROR: number;
				static SC_NOT_IMPLEMENTED: number;
				static SC_BAD_GATEWAY: number;
				static SC_SERVICE_UNAVAILABLE: number;
				static SC_GATEWAY_TIMEOUT: number;
				static SC_HTTP_VERSION_NOT_SUPPORTED: number;
				static SC_INSUFFICIENT_STORAGE: number;
			}
			export class MethodNotSupportedException extends org.apache.http.HttpException {
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				static class: java.lang.Class<org.apache.http.MethodNotSupportedException>;
			}
			export class ParseException extends java.lang.RuntimeException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<org.apache.http.ParseException>;
			}
			export class HttpConnectionMetrics implements org.apache.http.IHttpConnectionMetrics {
				constructor(implementation: org.apache.http.IHttpConnectionMetrics);
				getRequestCount(): any;
				getReceivedBytesCount(): any;
				getResponseCount(): any;
				getSentBytesCount(): any;
				getMetric(arg1: java.lang.String): any;
				getMetric(arg1: string): any;
				reset(): void;
			}
			export class HttpEntityEnclosingRequest implements org.apache.http.IHttpRequest, org.apache.http.IHttpEntityEnclosingRequest {
				constructor(implementation: org.apache.http.IHttpEntityEnclosingRequest);
				Params: org.apache.http.params.IHttpParams;
				Entity: org.apache.http.IHttpEntity;
				expectContinue(): boolean;
				getEntity(): org.apache.http.IHttpEntity;
				setEntity(arg1: org.apache.http.IHttpEntity): void;
				getRequestLine(): org.apache.http.IRequestLine;
				removeHeader(arg1: org.apache.http.IHeader): void;
				getFirstHeader(arg1: string): org.apache.http.IHeader;
				headerIterator(): org.apache.http.IHeaderIterator;
				headerIterator(arg1: string): org.apache.http.IHeaderIterator;
				containsHeader(arg1: string): boolean;
				setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
				removeHeaders(arg1: string): void;
				setHeader(arg1: string, arg2: string): void;
				setHeader(arg1: org.apache.http.IHeader): void;
				getLastHeader(arg1: string): org.apache.http.IHeader;
				addHeader(arg1: org.apache.http.IHeader): void;
				addHeader(arg1: string, arg2: string): void;
				getAllHeaders(): native.Array<org.apache.http.IHeader>;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
				getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				setParams(arg1: org.apache.http.params.IHttpParams): void;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export class Header implements org.apache.http.IHeader {
				constructor(implementation: org.apache.http.IHeader);
				getName(): string;
				getValue(): string;
				getElements(): native.Array<org.apache.http.IHeaderElement>;
			}
			export class HttpHost extends java.lang.Object implements java.lang.ICloneable {
				constructor(arg1: org.apache.http.HttpHost);
				constructor(arg1: java.lang.String, arg2: number, arg3: java.lang.String);
				constructor(arg1: string, arg2: number, arg3: string);
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: number);
				constructor(arg1: string, arg2: number);
				static DEFAULT_SCHEME_NAME: java.lang.String;
				static class: java.lang.Class<org.apache.http.HttpHost>;
				getSchemeName(): string;
				toHostString(): string;
				hashCode(): number;
				equals(arg1: any): boolean;
				clone(): any;
				toString(): string;
				toURI(): string;
				getHostName(): string;
				getPort(): number;
			}
			export class HttpClientConnection implements org.apache.http.IHttpConnection, org.apache.http.IHttpClientConnection {
				constructor(implementation: org.apache.http.IHttpClientConnection);
				SocketTimeout: number;
				sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
				receiveResponseHeader(): org.apache.http.IHttpResponse;
				sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
				receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
				isResponseAvailable(arg1: number): boolean;
				flush(): void;
				getSocketTimeout(): number;
				setSocketTimeout(arg1: number): void;
				isStale(): boolean;
				close(): void;
				isOpen(): boolean;
				shutdown(): void;
				getMetrics(): org.apache.http.IHttpConnectionMetrics;
			}
			export class HttpException extends java.lang.Exception {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
				constructor(arg1: string, arg2: java.lang.Throwable);
				static class: java.lang.Class<org.apache.http.HttpException>;
			}
			export interface IHttpRequestInterceptor {
				process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
			}
			export class StatusLine implements org.apache.http.IStatusLine {
				constructor(implementation: org.apache.http.IStatusLine);
				getStatusCode(): number;
				getReasonPhrase(): string;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
			}
			export class HttpRequest implements org.apache.http.IHttpMessage, org.apache.http.IHttpRequest {
				constructor(implementation: org.apache.http.IHttpRequest);
				Params: org.apache.http.params.IHttpParams;
				getRequestLine(): org.apache.http.IRequestLine;
				removeHeader(arg1: org.apache.http.IHeader): void;
				getFirstHeader(arg1: string): org.apache.http.IHeader;
				headerIterator(): org.apache.http.IHeaderIterator;
				headerIterator(arg1: string): org.apache.http.IHeaderIterator;
				containsHeader(arg1: string): boolean;
				setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
				removeHeaders(arg1: string): void;
				setHeader(arg1: string, arg2: string): void;
				setHeader(arg1: org.apache.http.IHeader): void;
				getLastHeader(arg1: string): org.apache.http.IHeader;
				addHeader(arg1: org.apache.http.IHeader): void;
				addHeader(arg1: string, arg2: string): void;
				getAllHeaders(): native.Array<org.apache.http.IHeader>;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
				getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				setParams(arg1: org.apache.http.params.IHttpParams): void;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export class HeaderElement implements org.apache.http.IHeaderElement {
				constructor(implementation: org.apache.http.IHeaderElement);
				getParameterCount(): number;
				getParameterByName(arg1: java.lang.String): org.apache.http.INameValuePair;
				getParameterByName(arg1: string): org.apache.http.INameValuePair;
				getName(): string;
				getValue(): string;
				getParameters(): native.Array<org.apache.http.INameValuePair>;
				getParameter(arg1: number): org.apache.http.INameValuePair;
			}
			export interface IConnectionReuseStrategy {
				keepAlive(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
			}
			export module protocol {
				export class HttpRequestHandlerResolver implements org.apache.http.protocol.IHttpRequestHandlerResolver {
					constructor(implementation: org.apache.http.protocol.IHttpRequestHandlerResolver);
					lookup(arg1: java.lang.String): org.apache.http.protocol.IHttpRequestHandler;
					lookup(arg1: string): org.apache.http.protocol.IHttpRequestHandler;
				}
				export class RequestDate extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.RequestDate>;
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class HTTP extends java.lang.Object {
					static CR: number;
					static LF: number;
					static SP: number;
					static HT: number;
					static TRANSFER_ENCODING: java.lang.String;
					static CONTENT_LEN: java.lang.String;
					static CONTENT_TYPE: java.lang.String;
					static CONTENT_ENCODING: java.lang.String;
					static EXPECT_DIRECTIVE: java.lang.String;
					static CONN_DIRECTIVE: java.lang.String;
					static TARGET_HOST: java.lang.String;
					static USER_AGENT: java.lang.String;
					static DATE_HEADER: java.lang.String;
					static SERVER_HEADER: java.lang.String;
					static EXPECT_CONTINUE: java.lang.String;
					static CONN_CLOSE: java.lang.String;
					static CONN_KEEP_ALIVE: java.lang.String;
					static CHUNK_CODING: java.lang.String;
					static IDENTITY_CODING: java.lang.String;
					static UTF_8: java.lang.String;
					static UTF_16: java.lang.String;
					static US_ASCII: java.lang.String;
					static ASCII: java.lang.String;
					static ISO_8859_1: java.lang.String;
					static DEFAULT_CONTENT_CHARSET: java.lang.String;
					static DEFAULT_PROTOCOL_CHARSET: java.lang.String;
					static OCTET_STREAM_TYPE: java.lang.String;
					static PLAIN_TEXT_TYPE: java.lang.String;
					static CHARSET_PARAM: java.lang.String;
					static DEFAULT_CONTENT_TYPE: java.lang.String;
					static class: java.lang.Class<org.apache.http.protocol.HTTP>;
					static isWhitespace(arg1: string): boolean;
				}
				export interface IHttpRequestHandlerResolver {
					lookup(arg1: string): org.apache.http.protocol.IHttpRequestHandler;
				}
				export class HttpRequestExecutor extends java.lang.Object {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.HttpRequestExecutor>;
					preProcess(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpProcessor, arg3: org.apache.http.protocol.IHttpContext): void;
					postProcess(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpProcessor, arg3: org.apache.http.protocol.IHttpContext): void;
					execute(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.IHttpClientConnection, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
				}
				export class RequestContent extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.RequestContent>;
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export interface IHttpExpectationVerifier {
					verify(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.IHttpResponse, arg3: org.apache.http.protocol.IHttpContext): void;
				}
				export class HttpResponseInterceptorList implements org.apache.http.protocol.IHttpResponseInterceptorList {
					constructor(implementation: org.apache.http.protocol.IHttpResponseInterceptorList);
					removeResponseInterceptorByClass(arg1: java.lang.Class<any>): void;
					getResponseInterceptorCount(): number;
					getResponseInterceptor(arg1: number): org.apache.http.IHttpResponseInterceptor;
					clearResponseInterceptors(): void;
					addResponseInterceptor(arg1: org.apache.http.IHttpResponseInterceptor): void;
					addResponseInterceptor(arg1: org.apache.http.IHttpResponseInterceptor, arg2: number): void;
					setInterceptors(arg1: java.util.IList<any>): void;
				}
				export interface IHttpContext {
					getAttribute(arg1: string): any;
					removeAttribute(arg1: string): any;
					setAttribute(arg1: string, arg2: any): void;
				}
				export module IHttpContext {
					var RESERVED_PREFIX: java.lang.String;
				}
				export class HttpRequestHandlerRegistry extends java.lang.Object implements org.apache.http.protocol.IHttpRequestHandlerResolver {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.HttpRequestHandlerRegistry>;
					setHandlers(arg1: java.util.IMap<any, any>): void;
					register(arg1: java.lang.String, arg2: org.apache.http.protocol.IHttpRequestHandler): void;
					register(arg1: string, arg2: org.apache.http.protocol.IHttpRequestHandler): void;
					lookup(arg1: java.lang.String): org.apache.http.protocol.IHttpRequestHandler;
					lookup(arg1: string): org.apache.http.protocol.IHttpRequestHandler;
					unregister(arg1: java.lang.String): void;
					unregister(arg1: string): void;
				}
				export class ResponseContent extends java.lang.Object implements org.apache.http.IHttpResponseInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.ResponseContent>;
					process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class ResponseDate extends java.lang.Object implements org.apache.http.IHttpResponseInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.ResponseDate>;
					process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class HttpRequestHandler implements org.apache.http.protocol.IHttpRequestHandler {
					constructor(implementation: org.apache.http.protocol.IHttpRequestHandler);
					handle(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.IHttpResponse, arg3: org.apache.http.protocol.IHttpContext): void;
				}
				export class BasicHttpProcessor extends java.lang.Object implements org.apache.http.protocol.IHttpProcessor, org.apache.http.protocol.IHttpRequestInterceptorList, org.apache.http.protocol.IHttpResponseInterceptorList, java.lang.ICloneable {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.BasicHttpProcessor>;
					addRequestInterceptor(arg1: org.apache.http.IHttpRequestInterceptor, arg2: number): void;
					addRequestInterceptor(arg1: org.apache.http.IHttpRequestInterceptor): void;
					getRequestInterceptor(arg1: number): org.apache.http.IHttpRequestInterceptor;
					removeResponseInterceptorByClass(arg1: java.lang.Class<any>): void;
					removeRequestInterceptorByClass(arg1: java.lang.Class<any>): void;
					getResponseInterceptorCount(): number;
					getResponseInterceptor(arg1: number): org.apache.http.IHttpResponseInterceptor;
					getRequestInterceptorCount(): number;
					clearRequestInterceptors(): void;
					clearResponseInterceptors(): void;
					addResponseInterceptor(arg1: org.apache.http.IHttpResponseInterceptor): void;
					addResponseInterceptor(arg1: org.apache.http.IHttpResponseInterceptor, arg2: number): void;
					clearInterceptors(): void;
					setInterceptors(arg1: java.util.IList<any>): void;
					addInterceptor(arg1: org.apache.http.IHttpRequestInterceptor): void;
					addInterceptor(arg1: org.apache.http.IHttpResponseInterceptor): void;
					addInterceptor(arg1: org.apache.http.IHttpRequestInterceptor, arg2: number): void;
					addInterceptor(arg1: org.apache.http.IHttpResponseInterceptor, arg2: number): void;
					clone(): any;
					copy(): org.apache.http.protocol.BasicHttpProcessor;
					process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class ResponseServer extends java.lang.Object implements org.apache.http.IHttpResponseInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.ResponseServer>;
					process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class RequestTargetHost extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.RequestTargetHost>;
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class RequestUserAgent extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.RequestUserAgent>;
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class HttpProcessor implements org.apache.http.IHttpRequestInterceptor, org.apache.http.IHttpResponseInterceptor, org.apache.http.protocol.IHttpProcessor {
					constructor(implementation: org.apache.http.protocol.IHttpProcessor);
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
					process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class HttpRequestInterceptorList implements org.apache.http.protocol.IHttpRequestInterceptorList {
					constructor(implementation: org.apache.http.protocol.IHttpRequestInterceptorList);
					addRequestInterceptor(arg1: org.apache.http.IHttpRequestInterceptor): void;
					addRequestInterceptor(arg1: org.apache.http.IHttpRequestInterceptor, arg2: number): void;
					getRequestInterceptor(arg1: number): org.apache.http.IHttpRequestInterceptor;
					removeRequestInterceptorByClass(arg1: java.lang.Class<any>): void;
					getRequestInterceptorCount(): number;
					clearRequestInterceptors(): void;
					setInterceptors(arg1: java.util.IList<any>): void;
				}
				export interface IExecutionContext {
				}
				export module IExecutionContext {
					var HTTP_CONNECTION: java.lang.String;
					var HTTP_REQUEST: java.lang.String;
					var HTTP_RESPONSE: java.lang.String;
					var HTTP_TARGET_HOST: java.lang.String;
					var HTTP_PROXY_HOST: java.lang.String;
					var HTTP_REQ_SENT: java.lang.String;
				}
				export class RequestConnControl extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.RequestConnControl>;
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class HttpContext implements org.apache.http.protocol.IHttpContext {
					constructor(implementation: org.apache.http.protocol.IHttpContext);
					static RESERVED_PREFIX: java.lang.String;
					getAttribute(arg1: java.lang.String): any;
					getAttribute(arg1: string): any;
					removeAttribute(arg1: java.lang.String): any;
					removeAttribute(arg1: string): any;
					setAttribute(arg1: java.lang.String, arg2: any): void;
					setAttribute(arg1: string, arg2: any): void;
				}
				export interface IHttpProcessor extends org.apache.http.IHttpRequestInterceptor, org.apache.http.IHttpResponseInterceptor {
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
					process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class HttpDateGenerator extends java.lang.Object {
					constructor();
					static PATTERN_RFC1123: java.lang.String;
					static GMT: java.util.TimeZone;
					static class: java.lang.Class<org.apache.http.protocol.HttpDateGenerator>;
					getCurrentDate(): string;
				}
				export class DefaultedHttpContext extends java.lang.Object implements org.apache.http.protocol.IHttpContext {
					constructor(arg1: org.apache.http.protocol.IHttpContext, arg2: org.apache.http.protocol.IHttpContext);
					static class: java.lang.Class<org.apache.http.protocol.DefaultedHttpContext>;
					getDefaults(): org.apache.http.protocol.IHttpContext;
					getAttribute(arg1: java.lang.String): any;
					getAttribute(arg1: string): any;
					removeAttribute(arg1: java.lang.String): any;
					removeAttribute(arg1: string): any;
					setAttribute(arg1: java.lang.String, arg2: any): void;
					setAttribute(arg1: string, arg2: any): void;
				}
				export class UriPatternMatcher extends java.lang.Object {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.UriPatternMatcher>;
					setHandlers(arg1: java.util.IMap<any, any>): void;
					register(arg1: java.lang.String, arg2: any): void;
					register(arg1: string, arg2: any): void;
					lookup(arg1: java.lang.String): any;
					lookup(arg1: string): any;
					unregister(arg1: java.lang.String): void;
					unregister(arg1: string): void;
				}
				export class BasicHttpContext extends java.lang.Object implements org.apache.http.protocol.IHttpContext {
					constructor();
					constructor(arg1: org.apache.http.protocol.IHttpContext);
					static class: java.lang.Class<org.apache.http.protocol.BasicHttpContext>;
					getAttribute(arg1: java.lang.String): any;
					getAttribute(arg1: string): any;
					removeAttribute(arg1: java.lang.String): any;
					removeAttribute(arg1: string): any;
					setAttribute(arg1: java.lang.String, arg2: any): void;
					setAttribute(arg1: string, arg2: any): void;
				}
				export class ResponseConnControl extends java.lang.Object implements org.apache.http.IHttpResponseInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.ResponseConnControl>;
					process(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class ExecutionContext implements org.apache.http.protocol.IExecutionContext {
					constructor(implementation: org.apache.http.protocol.IExecutionContext);
					static HTTP_CONNECTION: java.lang.String;
					static HTTP_REQUEST: java.lang.String;
					static HTTP_RESPONSE: java.lang.String;
					static HTTP_TARGET_HOST: java.lang.String;
					static HTTP_PROXY_HOST: java.lang.String;
					static HTTP_REQ_SENT: java.lang.String;
				}
				export class SyncBasicHttpContext extends org.apache.http.protocol.BasicHttpContext {
					constructor(arg1: org.apache.http.protocol.IHttpContext);
					static class: java.lang.Class<org.apache.http.protocol.SyncBasicHttpContext>;
					getAttribute(arg1: java.lang.String): any;
					getAttribute(arg1: string): any;
					removeAttribute(arg1: java.lang.String): any;
					removeAttribute(arg1: string): any;
					setAttribute(arg1: java.lang.String, arg2: any): void;
					setAttribute(arg1: string, arg2: any): void;
				}
				export class RequestExpectContinue extends java.lang.Object implements org.apache.http.IHttpRequestInterceptor {
					constructor();
					static class: java.lang.Class<org.apache.http.protocol.RequestExpectContinue>;
					process(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.protocol.IHttpContext): void;
				}
				export class HttpExpectationVerifier implements org.apache.http.protocol.IHttpExpectationVerifier {
					constructor(implementation: org.apache.http.protocol.IHttpExpectationVerifier);
					verify(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.IHttpResponse, arg3: org.apache.http.protocol.IHttpContext): void;
				}
				export interface IHttpRequestInterceptorList {
					addRequestInterceptor(arg1: org.apache.http.IHttpRequestInterceptor): void;
					addRequestInterceptor(arg1: org.apache.http.IHttpRequestInterceptor, arg2: number): void;
					getRequestInterceptor(arg1: number): org.apache.http.IHttpRequestInterceptor;
					removeRequestInterceptorByClass(arg1: java.lang.Class<any>): void;
					getRequestInterceptorCount(): number;
					clearRequestInterceptors(): void;
					setInterceptors(arg1: java.util.IList<any>): void;
				}
				export interface IHttpRequestHandler {
					handle(arg1: org.apache.http.IHttpRequest, arg2: org.apache.http.IHttpResponse, arg3: org.apache.http.protocol.IHttpContext): void;
				}
				export class HttpService extends java.lang.Object {
					constructor(arg1: org.apache.http.protocol.IHttpProcessor, arg2: org.apache.http.IConnectionReuseStrategy, arg3: org.apache.http.IHttpResponseFactory);
					static class: java.lang.Class<org.apache.http.protocol.HttpService>;
					Params: org.apache.http.params.IHttpParams;
					setExpectationVerifier(arg1: org.apache.http.protocol.IHttpExpectationVerifier): void;
					setConnReuseStrategy(arg1: org.apache.http.IConnectionReuseStrategy): void;
					setHttpProcessor(arg1: org.apache.http.protocol.IHttpProcessor): void;
					setResponseFactory(arg1: org.apache.http.IHttpResponseFactory): void;
					setHandlerResolver(arg1: org.apache.http.protocol.IHttpRequestHandlerResolver): void;
					handleRequest(arg1: org.apache.http.IHttpServerConnection, arg2: org.apache.http.protocol.IHttpContext): void;
					setParams(arg1: org.apache.http.params.IHttpParams): void;
					getParams(): org.apache.http.params.IHttpParams;
				}
				export interface IHttpResponseInterceptorList {
					removeResponseInterceptorByClass(arg1: java.lang.Class<any>): void;
					getResponseInterceptorCount(): number;
					getResponseInterceptor(arg1: number): org.apache.http.IHttpResponseInterceptor;
					clearResponseInterceptors(): void;
					addResponseInterceptor(arg1: org.apache.http.IHttpResponseInterceptor): void;
					addResponseInterceptor(arg1: org.apache.http.IHttpResponseInterceptor, arg2: number): void;
					setInterceptors(arg1: java.util.IList<any>): void;
				}
			}
			export module impl {
				export class SocketHttpClientConnection extends org.apache.http.impl.AbstractHttpClientConnection implements org.apache.http.IHttpInetConnection {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.SocketHttpClientConnection>;
					SocketTimeout: number;
					getRemotePort(): number;
					getSocketTimeout(): number;
					setSocketTimeout(arg1: number): void;
					close(): void;
					isOpen(): boolean;
					shutdown(): void;
					getLocalPort(): number;
					getLocalAddress(): java.net.InetAddress;
					getRemoteAddress(): java.net.InetAddress;
					isStale(): boolean;
					getMetrics(): org.apache.http.IHttpConnectionMetrics;
				}
				export class DefaultHttpRequestFactory extends java.lang.Object implements org.apache.http.IHttpRequestFactory {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.DefaultHttpRequestFactory>;
					newHttpRequest(arg1: org.apache.http.IRequestLine): org.apache.http.IHttpRequest;
					newHttpRequest(arg1: java.lang.String, arg2: java.lang.String): org.apache.http.IHttpRequest;
					newHttpRequest(arg1: string, arg2: string): org.apache.http.IHttpRequest;
				}
				export module conn {
					export class DefaultHttpRoutePlanner extends java.lang.Object implements org.apache.http.conn.routing.IHttpRoutePlanner {
						constructor(arg1: org.apache.http.conn.scheme.SchemeRegistry);
						static class: java.lang.Class<org.apache.http.impl.conn.DefaultHttpRoutePlanner>;
						determineRoute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.conn.routing.HttpRoute;
					}
					export class LoggingSessionInputBuffer extends java.lang.Object implements org.apache.http.io.ISessionInputBuffer {
						constructor(arg1: org.apache.http.io.ISessionInputBuffer, arg2: org.apache.http.impl.conn.Wire);
						static class: java.lang.Class<org.apache.http.impl.conn.LoggingSessionInputBuffer>;
						isDataAvailable(arg1: number): boolean;
						readLine(): string;
						readLine(arg1: org.apache.http.util.CharArrayBuffer): number;
						read(arg1: native.Array<native.Byte>): number;
						read(): number;
						read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
						getMetrics(): org.apache.http.io.IHttpTransportMetrics;
					}
					export module tsccm {
						export class BasicPooledConnAdapter extends org.apache.http.impl.conn.AbstractPooledConnAdapter {
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter>;
						}
						export interface IRefQueueHandler {
							handleReference(arg1: java.lang.ref.Reference<any>): void;
						}
						export class RouteSpecificPool extends java.lang.Object {
							constructor(arg1: org.apache.http.conn.routing.HttpRoute, arg2: number);
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.RouteSpecificPool>;
							getRoute(): org.apache.http.conn.routing.HttpRoute;
							getMaxEntries(): number;
							getCapacity(): number;
							allocEntry(arg1: any): org.apache.http.impl.conn.tsccm.BasicPoolEntry;
							dropEntry(): void;
							queueThread(arg1: org.apache.http.impl.conn.tsccm.WaitingThread): void;
							isUnused(): boolean;
							getEntryCount(): number;
							hasThread(): boolean;
							createdEntry(arg1: org.apache.http.impl.conn.tsccm.BasicPoolEntry): void;
							removeThread(arg1: org.apache.http.impl.conn.tsccm.WaitingThread): void;
							nextThread(): org.apache.http.impl.conn.tsccm.WaitingThread;
							deleteEntry(arg1: org.apache.http.impl.conn.tsccm.BasicPoolEntry): boolean;
							freeEntry(arg1: org.apache.http.impl.conn.tsccm.BasicPoolEntry): void;
						}
						export class ThreadSafeClientConnManager extends java.lang.Object implements org.apache.http.conn.IClientConnectionManager {
							constructor(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.conn.scheme.SchemeRegistry);
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager>;
							releaseConnection(arg1: org.apache.http.conn.IManagedClientConnection, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): void;
							requestConnection(arg1: org.apache.http.conn.routing.HttpRoute, arg2: any): org.apache.http.conn.IClientConnectionRequest;
							getSchemeRegistry(): org.apache.http.conn.scheme.SchemeRegistry;
							closeIdleConnections(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
							closeExpiredConnections(): void;
							getConnectionsInPool(): number;
							getConnectionsInPool(arg1: org.apache.http.conn.routing.HttpRoute): number;
							shutdown(): void;
						}
						export class WaitingThread extends java.lang.Object {
							constructor(arg1: java.util.concurrent.locks.ICondition, arg2: org.apache.http.impl.conn.tsccm.RouteSpecificPool);
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.WaitingThread>;
							getThread(): java.lang.Thread;
							getCondition(): java.util.concurrent.locks.ICondition;
							interrupt(): void;
							getPool(): org.apache.http.impl.conn.tsccm.RouteSpecificPool;
							await(arg1: java.util.Date): boolean;
							wakeup(): void;
						}
						export class ConnPoolByRoute extends org.apache.http.impl.conn.tsccm.AbstractConnPool {
							constructor(arg1: org.apache.http.conn.IClientConnectionOperator, arg2: org.apache.http.params.IHttpParams);
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.ConnPoolByRoute>;
							requestPoolEntry(arg1: org.apache.http.conn.routing.HttpRoute, arg2: any): org.apache.http.impl.conn.tsccm.IPoolEntryRequest;
							deleteClosedConnections(): void;
							getConnectionsInPool(arg1: org.apache.http.conn.routing.HttpRoute): number;
							shutdown(): void;
							freeEntry(arg1: org.apache.http.impl.conn.tsccm.BasicPoolEntry, arg2: boolean, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): void;
						}
						export interface IPoolEntryRequest {
							getPoolEntry(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): org.apache.http.impl.conn.tsccm.BasicPoolEntry;
							abortRequest(): void;
						}
						export class BasicPoolEntryRef extends java.lang.ref.WeakReference<org.apache.http.impl.conn.tsccm.BasicPoolEntry> {
							constructor(arg1: org.apache.http.impl.conn.tsccm.BasicPoolEntry, arg2: java.lang.ref.ReferenceQueue<any>);
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.BasicPoolEntryRef>;
							getRoute(): org.apache.http.conn.routing.HttpRoute;
						}
						export class PoolEntryRequest implements org.apache.http.impl.conn.tsccm.IPoolEntryRequest {
							constructor(implementation: org.apache.http.impl.conn.tsccm.IPoolEntryRequest);
							getPoolEntry(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): org.apache.http.impl.conn.tsccm.BasicPoolEntry;
							abortRequest(): void;
						}
						export class RefQueueHandler implements org.apache.http.impl.conn.tsccm.IRefQueueHandler {
							constructor(implementation: org.apache.http.impl.conn.tsccm.IRefQueueHandler);
							handleReference(arg1: java.lang.ref.Reference<any>): void;
						}
						export class WaitingThreadAborter extends java.lang.Object {
							constructor();
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.WaitingThreadAborter>;
							setWaitingThread(arg1: org.apache.http.impl.conn.tsccm.WaitingThread): void;
							abort(): void;
						}
						export class RefQueueWorker extends java.lang.Object implements java.lang.IRunnable {
							constructor(arg1: java.lang.ref.ReferenceQueue<any>, arg2: org.apache.http.impl.conn.tsccm.IRefQueueHandler);
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.RefQueueWorker>;
							toString(): string;
							run(): void;
							shutdown(): void;
						}
						export class AbstractConnPool extends java.lang.Object implements org.apache.http.impl.conn.tsccm.IRefQueueHandler {
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.AbstractConnPool>;
							requestPoolEntry(arg1: org.apache.http.conn.routing.HttpRoute, arg2: any): org.apache.http.impl.conn.tsccm.IPoolEntryRequest;
							closeIdleConnections(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
							enableConnectionGC(): void;
							handleReference(arg1: java.lang.ref.Reference<any>): void;
							deleteClosedConnections(): void;
							closeExpiredConnections(): void;
							getEntry(arg1: org.apache.http.conn.routing.HttpRoute, arg2: any, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): org.apache.http.impl.conn.tsccm.BasicPoolEntry;
							shutdown(): void;
							freeEntry(arg1: org.apache.http.impl.conn.tsccm.BasicPoolEntry, arg2: boolean, arg3: native.Long, arg4: java.util.concurrent.TimeUnit): void;
						}
						export class BasicPoolEntry extends org.apache.http.impl.conn.AbstractPoolEntry {
							constructor(arg1: org.apache.http.conn.IClientConnectionOperator, arg2: org.apache.http.conn.routing.HttpRoute, arg3: java.lang.ref.ReferenceQueue<any>);
							static class: java.lang.Class<org.apache.http.impl.conn.tsccm.BasicPoolEntry>;
						}
					}
					export class DefaultResponseParser extends org.apache.http.impl.io.AbstractMessageParser {
						constructor(arg1: org.apache.http.io.ISessionInputBuffer, arg2: org.apache.http.message.ILineParser, arg3: org.apache.http.IHttpResponseFactory, arg4: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.conn.DefaultResponseParser>;
					}
					export class LoggingSessionOutputBuffer extends java.lang.Object implements org.apache.http.io.ISessionOutputBuffer {
						constructor(arg1: org.apache.http.io.ISessionOutputBuffer, arg2: org.apache.http.impl.conn.Wire);
						static class: java.lang.Class<org.apache.http.impl.conn.LoggingSessionOutputBuffer>;
						writeLine(arg1: org.apache.http.util.CharArrayBuffer): void;
						writeLine(arg1: java.lang.String): void;
						writeLine(arg1: string): void;
						write(arg1: number): void;
						write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
						write(arg1: native.Array<native.Byte>): void;
						flush(): void;
						getMetrics(): org.apache.http.io.IHttpTransportMetrics;
					}
					export class AbstractClientConnAdapter extends java.lang.Object implements org.apache.http.conn.IManagedClientConnection {
						static class: java.lang.Class<org.apache.http.impl.conn.AbstractClientConnAdapter>;
						State: any;
						SocketTimeout: number;
						isSecure(): boolean;
						getRemotePort(): number;
						getSocketTimeout(): number;
						setSocketTimeout(arg1: number): void;
						sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
						receiveResponseHeader(): org.apache.http.IHttpResponse;
						sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
						receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
						isResponseAvailable(arg1: number): boolean;
						releaseConnection(): void;
						unmarkReusable(): void;
						setIdleDuration(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
						abortConnection(): void;
						isMarkedReusable(): boolean;
						isStale(): boolean;
						getSSLSession(): javax.net.ssl.ISSLSession;
						markReusable(): void;
						flush(): void;
						isOpen(): boolean;
						getMetrics(): org.apache.http.IHttpConnectionMetrics;
						getLocalPort(): number;
						getLocalAddress(): java.net.InetAddress;
						getRemoteAddress(): java.net.InetAddress;
						getRoute(): org.apache.http.conn.routing.HttpRoute;
						layerProtocol(arg1: org.apache.http.protocol.IHttpContext, arg2: org.apache.http.params.IHttpParams): void;
						tunnelTarget(arg1: boolean, arg2: org.apache.http.params.IHttpParams): void;
						tunnelProxy(arg1: org.apache.http.HttpHost, arg2: boolean, arg3: org.apache.http.params.IHttpParams): void;
						getState(): any;
						open(arg1: org.apache.http.conn.routing.HttpRoute, arg2: org.apache.http.protocol.IHttpContext, arg3: org.apache.http.params.IHttpParams): void;
						setState(arg1: any): void;
						close(): void;
						shutdown(): void;
					}
					export class AbstractPooledConnAdapter extends org.apache.http.impl.conn.AbstractClientConnAdapter {
						static class: java.lang.Class<org.apache.http.impl.conn.AbstractPooledConnAdapter>;
						State: any;
						getRoute(): org.apache.http.conn.routing.HttpRoute;
						layerProtocol(arg1: org.apache.http.protocol.IHttpContext, arg2: org.apache.http.params.IHttpParams): void;
						tunnelTarget(arg1: boolean, arg2: org.apache.http.params.IHttpParams): void;
						tunnelProxy(arg1: org.apache.http.HttpHost, arg2: boolean, arg3: org.apache.http.params.IHttpParams): void;
						getState(): any;
						close(): void;
						open(arg1: org.apache.http.conn.routing.HttpRoute, arg2: org.apache.http.protocol.IHttpContext, arg3: org.apache.http.params.IHttpParams): void;
						shutdown(): void;
						setState(arg1: any): void;
					}
					export class Wire extends java.lang.Object {
						constructor(arg1: org.apache.commons.logging.ILog);
						static class: java.lang.Class<org.apache.http.impl.conn.Wire>;
						output(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
						output(arg1: number): void;
						output(arg1: java.io.InputStream): void;
						output(arg1: java.lang.String): void;
						output(arg1: string): void;
						output(arg1: native.Array<native.Byte>): void;
						enabled(): boolean;
						input(arg1: java.lang.String): void;
						input(arg1: string): void;
						input(arg1: number): void;
						input(arg1: java.io.InputStream): void;
						input(arg1: native.Array<native.Byte>): void;
						input(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
					}
					export class SingleClientConnManager extends java.lang.Object implements org.apache.http.conn.IClientConnectionManager {
						constructor(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.conn.scheme.SchemeRegistry);
						static MISUSE_MESSAGE: java.lang.String;
						static class: java.lang.Class<org.apache.http.impl.conn.SingleClientConnManager>;
						releaseConnection(arg1: org.apache.http.conn.IManagedClientConnection, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): void;
						requestConnection(arg1: org.apache.http.conn.routing.HttpRoute, arg2: any): org.apache.http.conn.IClientConnectionRequest;
						getSchemeRegistry(): org.apache.http.conn.scheme.SchemeRegistry;
						closeIdleConnections(arg1: native.Long, arg2: java.util.concurrent.TimeUnit): void;
						closeExpiredConnections(): void;
						getConnection(arg1: org.apache.http.conn.routing.HttpRoute, arg2: any): org.apache.http.conn.IManagedClientConnection;
						shutdown(): void;
					}
					export module SingleClientConnManager {
						export class PoolEntry extends org.apache.http.impl.conn.AbstractPoolEntry {
							static class: java.lang.Class<org.apache.http.impl.conn.SingleClientConnManager.PoolEntry>;
						}
						export class ConnAdapter extends org.apache.http.impl.conn.AbstractPooledConnAdapter {
							static class: java.lang.Class<org.apache.http.impl.conn.SingleClientConnManager.ConnAdapter>;
						}
					}
					export class DefaultClientConnectionOperator extends java.lang.Object implements org.apache.http.conn.IClientConnectionOperator {
						constructor(arg1: org.apache.http.conn.scheme.SchemeRegistry);
						static class: java.lang.Class<org.apache.http.impl.conn.DefaultClientConnectionOperator>;
						createConnection(): org.apache.http.conn.IOperatedClientConnection;
						updateSecureConnection(arg1: org.apache.http.conn.IOperatedClientConnection, arg2: org.apache.http.HttpHost, arg3: org.apache.http.protocol.IHttpContext, arg4: org.apache.http.params.IHttpParams): void;
						openConnection(arg1: org.apache.http.conn.IOperatedClientConnection, arg2: org.apache.http.HttpHost, arg3: java.net.InetAddress, arg4: org.apache.http.protocol.IHttpContext, arg5: org.apache.http.params.IHttpParams): void;
					}
					export class DefaultClientConnection extends org.apache.http.impl.SocketHttpClientConnection implements org.apache.http.conn.IOperatedClientConnection {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.conn.DefaultClientConnection>;
						SocketTimeout: number;
						isSecure(): boolean;
						sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
						receiveResponseHeader(): org.apache.http.IHttpResponse;
						openCompleted(arg1: boolean, arg2: org.apache.http.params.IHttpParams): void;
						getTargetHost(): org.apache.http.HttpHost;
						opening(arg1: java.net.Socket, arg2: org.apache.http.HttpHost): void;
						close(): void;
						shutdown(): void;
						update(arg1: java.net.Socket, arg2: org.apache.http.HttpHost, arg3: boolean, arg4: org.apache.http.params.IHttpParams): void;
						getSocket(): java.net.Socket;
						sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
						receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
						isResponseAvailable(arg1: number): boolean;
						flush(): void;
						getSocketTimeout(): number;
						setSocketTimeout(arg1: number): void;
						isStale(): boolean;
						isOpen(): boolean;
						getMetrics(): org.apache.http.IHttpConnectionMetrics;
						getRemotePort(): number;
						getLocalPort(): number;
						getLocalAddress(): java.net.InetAddress;
						getRemoteAddress(): java.net.InetAddress;
					}
					export class AbstractPoolEntry extends java.lang.Object {
						static class: java.lang.Class<org.apache.http.impl.conn.AbstractPoolEntry>;
						State: any;
						layerProtocol(arg1: org.apache.http.protocol.IHttpContext, arg2: org.apache.http.params.IHttpParams): void;
						tunnelTarget(arg1: boolean, arg2: org.apache.http.params.IHttpParams): void;
						tunnelProxy(arg1: org.apache.http.HttpHost, arg2: boolean, arg3: org.apache.http.params.IHttpParams): void;
						getState(): any;
						open(arg1: org.apache.http.conn.routing.HttpRoute, arg2: org.apache.http.protocol.IHttpContext, arg3: org.apache.http.params.IHttpParams): void;
						setState(arg1: any): void;
					}
					export class ProxySelectorRoutePlanner extends java.lang.Object implements org.apache.http.conn.routing.IHttpRoutePlanner {
						constructor(arg1: org.apache.http.conn.scheme.SchemeRegistry, arg2: java.net.ProxySelector);
						static class: java.lang.Class<org.apache.http.impl.conn.ProxySelectorRoutePlanner>;
						ProxySelector: java.net.ProxySelector;
						determineRoute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.conn.routing.HttpRoute;
						getProxySelector(): java.net.ProxySelector;
						setProxySelector(arg1: java.net.ProxySelector): void;
					}
					export class IdleConnectionHandler extends java.lang.Object {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.conn.IdleConnectionHandler>;
						closeIdleConnections(arg1: native.Long): void;
						closeExpiredConnections(): void;
						add(arg1: org.apache.http.IHttpConnection, arg2: native.Long, arg3: java.util.concurrent.TimeUnit): void;
						remove(arg1: org.apache.http.IHttpConnection): boolean;
						removeAll(): void;
					}
				}
				export module client {
					export class BasicResponseHandler extends java.lang.Object implements org.apache.http.client.IResponseHandler<string> {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.BasicResponseHandler>;
						handleResponse(arg1: org.apache.http.IHttpResponse): string;
					}
					export class DefaultTargetAuthenticationHandler extends org.apache.http.impl.client.AbstractAuthenticationHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.DefaultTargetAuthenticationHandler>;
						getChallenges(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): java.util.IMap<string, org.apache.http.IHeader>;
						isAuthenticationRequested(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
					}
					export class RoutedRequest extends java.lang.Object {
						constructor(arg1: org.apache.http.impl.client.RequestWrapper, arg2: org.apache.http.conn.routing.HttpRoute);
						static class: java.lang.Class<org.apache.http.impl.client.RoutedRequest>;
						getRoute(): org.apache.http.conn.routing.HttpRoute;
						getRequest(): org.apache.http.impl.client.RequestWrapper;
					}
					export class RedirectLocations extends java.lang.Object {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.RedirectLocations>;
						add(arg1: java.net.URI): void;
						contains(arg1: java.net.URI): boolean;
						remove(arg1: java.net.URI): boolean;
					}
					export class AbstractAuthenticationHandler extends java.lang.Object implements org.apache.http.client.IAuthenticationHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.AbstractAuthenticationHandler>;
						selectScheme(arg1: java.util.IMap<string, org.apache.http.IHeader>, arg2: org.apache.http.IHttpResponse, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.auth.IAuthScheme;
						getChallenges(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): java.util.IMap<string, org.apache.http.IHeader>;
						isAuthenticationRequested(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
					}
					export class EntityEnclosingRequestWrapper extends org.apache.http.impl.client.RequestWrapper implements org.apache.http.IHttpEntityEnclosingRequest {
						constructor(arg1: org.apache.http.IHttpEntityEnclosingRequest);
						static class: java.lang.Class<org.apache.http.impl.client.EntityEnclosingRequestWrapper>;
						Params: org.apache.http.params.IHttpParams;
						Entity: org.apache.http.IHttpEntity;
						isRepeatable(): boolean;
						expectContinue(): boolean;
						getEntity(): org.apache.http.IHttpEntity;
						setEntity(arg1: org.apache.http.IHttpEntity): void;
						getRequestLine(): org.apache.http.IRequestLine;
						removeHeader(arg1: org.apache.http.IHeader): void;
						getFirstHeader(arg1: string): org.apache.http.IHeader;
						headerIterator(): org.apache.http.IHeaderIterator;
						headerIterator(arg1: string): org.apache.http.IHeaderIterator;
						containsHeader(arg1: string): boolean;
						setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
						removeHeaders(arg1: string): void;
						setHeader(arg1: string, arg2: string): void;
						setHeader(arg1: org.apache.http.IHeader): void;
						getLastHeader(arg1: string): org.apache.http.IHeader;
						addHeader(arg1: org.apache.http.IHeader): void;
						addHeader(arg1: string, arg2: string): void;
						getAllHeaders(): native.Array<org.apache.http.IHeader>;
						getProtocolVersion(): org.apache.http.ProtocolVersion;
						getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
						setParams(arg1: org.apache.http.params.IHttpParams): void;
						getParams(): org.apache.http.params.IHttpParams;
						getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
						headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
						containsHeader(arg1: java.lang.String): boolean;
						removeHeaders(arg1: java.lang.String): void;
						setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
						getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
						addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
						getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
					}
					export class RequestWrapper extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.IHttpUriRequest {
						constructor(arg1: org.apache.http.IHttpRequest);
						static class: java.lang.Class<org.apache.http.impl.client.RequestWrapper>;
						Method: string;
						Params: org.apache.http.params.IHttpParams;
						ProtocolVersion: org.apache.http.ProtocolVersion;
						URI: java.net.URI;
						setURI(arg1: java.net.URI): void;
						isRepeatable(): boolean;
						getOriginal(): org.apache.http.IHttpRequest;
						setProtocolVersion(arg1: org.apache.http.ProtocolVersion): void;
						getRequestLine(): org.apache.http.IRequestLine;
						incrementExecCount(): void;
						getURI(): java.net.URI;
						resetHeaders(): void;
						getExecCount(): number;
						getMethod(): string;
						getProtocolVersion(): org.apache.http.ProtocolVersion;
						setMethod(arg1: java.lang.String): void;
						setMethod(arg1: string): void;
						isAborted(): boolean;
						abort(): void;
						removeHeader(arg1: org.apache.http.IHeader): void;
						getFirstHeader(arg1: string): org.apache.http.IHeader;
						headerIterator(): org.apache.http.IHeaderIterator;
						headerIterator(arg1: string): org.apache.http.IHeaderIterator;
						containsHeader(arg1: string): boolean;
						setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
						removeHeaders(arg1: string): void;
						setHeader(arg1: string, arg2: string): void;
						setHeader(arg1: org.apache.http.IHeader): void;
						getLastHeader(arg1: string): org.apache.http.IHeader;
						addHeader(arg1: org.apache.http.IHeader): void;
						addHeader(arg1: string, arg2: string): void;
						getAllHeaders(): native.Array<org.apache.http.IHeader>;
						getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
						setParams(arg1: org.apache.http.params.IHttpParams): void;
						getParams(): org.apache.http.params.IHttpParams;
						getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
						headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
						containsHeader(arg1: java.lang.String): boolean;
						removeHeaders(arg1: java.lang.String): void;
						setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
						getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
						addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
						getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
					}
					export class BasicCredentialsProvider extends java.lang.Object implements org.apache.http.client.ICredentialsProvider {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.BasicCredentialsProvider>;
						getCredentials(arg1: org.apache.http.auth.AuthScope): org.apache.http.auth.ICredentials;
						setCredentials(arg1: org.apache.http.auth.AuthScope, arg2: org.apache.http.auth.ICredentials): void;
						toString(): string;
						clear(): void;
					}
					export class ClientParamsStack extends org.apache.http.params.AbstractHttpParams {
						constructor(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.params.IHttpParams, arg3: org.apache.http.params.IHttpParams, arg4: org.apache.http.params.IHttpParams);
						constructor(arg1: org.apache.http.impl.client.ClientParamsStack, arg2: org.apache.http.params.IHttpParams, arg3: org.apache.http.params.IHttpParams, arg4: org.apache.http.params.IHttpParams, arg5: org.apache.http.params.IHttpParams);
						constructor(arg1: org.apache.http.impl.client.ClientParamsStack);
						static class: java.lang.Class<org.apache.http.impl.client.ClientParamsStack>;
						getRequestParams(): org.apache.http.params.IHttpParams;
						getClientParams(): org.apache.http.params.IHttpParams;
						getApplicationParams(): org.apache.http.params.IHttpParams;
						getOverrideParams(): org.apache.http.params.IHttpParams;
						copy(): org.apache.http.params.IHttpParams;
						getParameter(arg1: java.lang.String): any;
						getParameter(arg1: string): any;
						removeParameter(arg1: java.lang.String): boolean;
						removeParameter(arg1: string): boolean;
						setParameter(arg1: java.lang.String, arg2: any): org.apache.http.params.IHttpParams;
						setParameter(arg1: string, arg2: any): org.apache.http.params.IHttpParams;
					}
					export class DefaultRedirectHandler extends java.lang.Object implements org.apache.http.client.IRedirectHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.DefaultRedirectHandler>;
						isRedirectRequested(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
						getLocationURI(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): java.net.URI;
					}
					export class DefaultRequestDirector extends java.lang.Object implements org.apache.http.client.IRequestDirector {
						constructor(arg1: org.apache.http.protocol.HttpRequestExecutor, arg2: org.apache.http.conn.IClientConnectionManager, arg3: org.apache.http.IConnectionReuseStrategy, arg4: org.apache.http.conn.IConnectionKeepAliveStrategy, arg5: org.apache.http.conn.routing.IHttpRoutePlanner, arg6: org.apache.http.protocol.IHttpProcessor, arg7: org.apache.http.client.IHttpRequestRetryHandler, arg8: org.apache.http.client.IRedirectHandler, arg9: org.apache.http.client.IAuthenticationHandler, arg10: org.apache.http.client.IAuthenticationHandler, arg11: org.apache.http.client.IUserTokenHandler, arg12: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.client.DefaultRequestDirector>;
						execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
					}
					export class DefaultUserTokenHandler extends java.lang.Object implements org.apache.http.client.IUserTokenHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.DefaultUserTokenHandler>;
						getUserToken(arg1: org.apache.http.protocol.IHttpContext): any;
					}
					export class BasicCookieStore extends java.lang.Object implements org.apache.http.client.ICookieStore {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.BasicCookieStore>;
						getCookies(): java.util.IList<org.apache.http.cookie.ICookie>;
						addCookies(arg1: native.Array<org.apache.http.cookie.ICookie>): void;
						addCookie(arg1: org.apache.http.cookie.ICookie): void;
						clearExpired(arg1: java.util.Date): boolean;
						toString(): string;
						clear(): void;
					}
					export class AbstractHttpClient extends java.lang.Object implements org.apache.http.client.IHttpClient {
						static class: java.lang.Class<org.apache.http.impl.client.AbstractHttpClient>;
						AuthSchemes: org.apache.http.auth.AuthSchemeRegistry;
						CredentialsProvider: org.apache.http.client.ICredentialsProvider;
						RedirectHandler: org.apache.http.client.IRedirectHandler;
						RoutePlanner: org.apache.http.conn.routing.IHttpRoutePlanner;
						TargetAuthenticationHandler: org.apache.http.client.IAuthenticationHandler;
						ProxyAuthenticationHandler: org.apache.http.client.IAuthenticationHandler;
						HttpRequestRetryHandler: org.apache.http.client.IHttpRequestRetryHandler;
						UserTokenHandler: org.apache.http.client.IUserTokenHandler;
						Params: org.apache.http.params.IHttpParams;
						CookieStore: org.apache.http.client.ICookieStore;
						CookieSpecs: org.apache.http.cookie.CookieSpecRegistry;
						getCookieStore(): org.apache.http.client.ICookieStore;
						getConnectionManager(): org.apache.http.conn.IClientConnectionManager;
						setUserTokenHandler(arg1: org.apache.http.client.IUserTokenHandler): void;
						setCookieSpecs(arg1: org.apache.http.cookie.CookieSpecRegistry): void;
						getRequestExecutor(): org.apache.http.protocol.HttpRequestExecutor;
						getAuthSchemes(): org.apache.http.auth.AuthSchemeRegistry;
						setReuseStrategy(arg1: org.apache.http.IConnectionReuseStrategy): void;
						getRoutePlanner(): org.apache.http.conn.routing.IHttpRoutePlanner;
						getRedirectHandler(): org.apache.http.client.IRedirectHandler;
						getUserTokenHandler(): org.apache.http.client.IUserTokenHandler;
						getCookieSpecs(): org.apache.http.cookie.CookieSpecRegistry;
						setAuthSchemes(arg1: org.apache.http.auth.AuthSchemeRegistry): void;
						setRedirectHandler(arg1: org.apache.http.client.IRedirectHandler): void;
						setCookieStore(arg1: org.apache.http.client.ICookieStore): void;
						setKeepAliveStrategy(arg1: org.apache.http.conn.IConnectionKeepAliveStrategy): void;
						setRoutePlanner(arg1: org.apache.http.conn.routing.IHttpRoutePlanner): void;
						addRequestInterceptor(arg1: org.apache.http.IHttpRequestInterceptor, arg2: number): void;
						addRequestInterceptor(arg1: org.apache.http.IHttpRequestInterceptor): void;
						getRequestInterceptor(arg1: number): org.apache.http.IHttpRequestInterceptor;
						getTargetAuthenticationHandler(): org.apache.http.client.IAuthenticationHandler;
						getConnectionKeepAliveStrategy(): org.apache.http.conn.IConnectionKeepAliveStrategy;
						setTargetAuthenticationHandler(arg1: org.apache.http.client.IAuthenticationHandler): void;
						removeResponseInterceptorByClass(arg1: java.lang.Class<any>): void;
						removeRequestInterceptorByClass(arg1: java.lang.Class<any>): void;
						getHttpRequestRetryHandler(): org.apache.http.client.IHttpRequestRetryHandler;
						getProxyAuthenticationHandler(): org.apache.http.client.IAuthenticationHandler;
						getCredentialsProvider(): org.apache.http.client.ICredentialsProvider;
						getResponseInterceptorCount(): number;
						setCredentialsProvider(arg1: org.apache.http.client.ICredentialsProvider): void;
						getResponseInterceptor(arg1: number): org.apache.http.IHttpResponseInterceptor;
						setHttpRequestRetryHandler(arg1: org.apache.http.client.IHttpRequestRetryHandler): void;
						getRequestInterceptorCount(): number;
						clearRequestInterceptors(): void;
						clearResponseInterceptors(): void;
						addResponseInterceptor(arg1: org.apache.http.IHttpResponseInterceptor): void;
						addResponseInterceptor(arg1: org.apache.http.IHttpResponseInterceptor, arg2: number): void;
						setProxyAuthenticationHandler(arg1: org.apache.http.client.IAuthenticationHandler): void;
						getConnectionReuseStrategy(): org.apache.http.IConnectionReuseStrategy;
						execute<T>(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.client.IResponseHandler<any>, arg4: org.apache.http.protocol.IHttpContext): T;
						execute<T>(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.client.IResponseHandler<any>): T;
						execute<T>(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.client.IResponseHandler<any>, arg3: org.apache.http.protocol.IHttpContext): T;
						execute<T>(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.client.IResponseHandler<any>): T;
						execute(arg1: org.apache.http.client.methods.IHttpUriRequest): org.apache.http.IHttpResponse;
						execute(arg1: org.apache.http.client.methods.IHttpUriRequest, arg2: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
						execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest): org.apache.http.IHttpResponse;
						execute(arg1: org.apache.http.HttpHost, arg2: org.apache.http.IHttpRequest, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
						setParams(arg1: org.apache.http.params.IHttpParams): void;
						getParams(): org.apache.http.params.IHttpParams;
					}
					export class DefaultHttpClient extends org.apache.http.impl.client.AbstractHttpClient {
						constructor(arg1: org.apache.http.conn.IClientConnectionManager, arg2: org.apache.http.params.IHttpParams);
						constructor(arg1: org.apache.http.params.IHttpParams);
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.DefaultHttpClient>;
					}
					export class DefaultConnectionKeepAliveStrategy extends java.lang.Object implements org.apache.http.conn.IConnectionKeepAliveStrategy {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy>;
						getKeepAliveDuration(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): any;
					}
					export class TunnelRefusedException extends org.apache.http.HttpException {
						constructor(arg1: java.lang.String, arg2: org.apache.http.IHttpResponse);
						constructor(arg1: string, arg2: org.apache.http.IHttpResponse);
						static class: java.lang.Class<org.apache.http.impl.client.TunnelRefusedException>;
						getResponse(): org.apache.http.IHttpResponse;
					}
					export class DefaultHttpRequestRetryHandler extends java.lang.Object implements org.apache.http.client.IHttpRequestRetryHandler {
						constructor();
						constructor(arg1: number, arg2: boolean);
						static class: java.lang.Class<org.apache.http.impl.client.DefaultHttpRequestRetryHandler>;
						getRetryCount(): number;
						retryRequest(arg1: java.io.IOException, arg2: number, arg3: org.apache.http.protocol.IHttpContext): boolean;
						isRequestSentRetryEnabled(): boolean;
					}
					export class DefaultProxyAuthenticationHandler extends org.apache.http.impl.client.AbstractAuthenticationHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.client.DefaultProxyAuthenticationHandler>;
						getChallenges(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): java.util.IMap<string, org.apache.http.IHeader>;
						isAuthenticationRequested(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
					}
				}
				export class NoConnectionReuseStrategy extends java.lang.Object implements org.apache.http.IConnectionReuseStrategy {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.NoConnectionReuseStrategy>;
					keepAlive(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
				}
				export module entity {
					export class LaxContentLengthStrategy extends java.lang.Object implements org.apache.http.entity.IContentLengthStrategy {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.entity.LaxContentLengthStrategy>;
						determineLength(arg1: org.apache.http.IHttpMessage): any;
					}
					export class EntityDeserializer extends java.lang.Object {
						constructor(arg1: org.apache.http.entity.IContentLengthStrategy);
						static class: java.lang.Class<org.apache.http.impl.entity.EntityDeserializer>;
						deserialize(arg1: org.apache.http.io.ISessionInputBuffer, arg2: org.apache.http.IHttpMessage): org.apache.http.IHttpEntity;
					}
					export class EntitySerializer extends java.lang.Object {
						constructor(arg1: org.apache.http.entity.IContentLengthStrategy);
						static class: java.lang.Class<org.apache.http.impl.entity.EntitySerializer>;
						serialize(arg1: org.apache.http.io.ISessionOutputBuffer, arg2: org.apache.http.IHttpMessage, arg3: org.apache.http.IHttpEntity): void;
					}
					export class StrictContentLengthStrategy extends java.lang.Object implements org.apache.http.entity.IContentLengthStrategy {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.entity.StrictContentLengthStrategy>;
						determineLength(arg1: org.apache.http.IHttpMessage): any;
					}
				}
				export class DefaultConnectionReuseStrategy extends java.lang.Object implements org.apache.http.IConnectionReuseStrategy {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.DefaultConnectionReuseStrategy>;
					keepAlive(arg1: org.apache.http.IHttpResponse, arg2: org.apache.http.protocol.IHttpContext): boolean;
				}
				export class AbstractHttpClientConnection extends java.lang.Object implements org.apache.http.IHttpClientConnection {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.AbstractHttpClientConnection>;
					SocketTimeout: number;
					sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
					receiveResponseHeader(): org.apache.http.IHttpResponse;
					sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
					receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
					isResponseAvailable(arg1: number): boolean;
					isStale(): boolean;
					flush(): void;
					getMetrics(): org.apache.http.IHttpConnectionMetrics;
					getSocketTimeout(): number;
					setSocketTimeout(arg1: number): void;
					close(): void;
					isOpen(): boolean;
					shutdown(): void;
				}
				export class DefaultHttpClientConnection extends org.apache.http.impl.SocketHttpClientConnection {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.DefaultHttpClientConnection>;
					toString(): string;
					bind(arg1: java.net.Socket, arg2: org.apache.http.params.IHttpParams): void;
				}
				export module io {
					export class AbstractMessageWriter extends java.lang.Object implements org.apache.http.io.IHttpMessageWriter {
						constructor(arg1: org.apache.http.io.ISessionOutputBuffer, arg2: org.apache.http.message.ILineFormatter, arg3: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.io.AbstractMessageWriter>;
						write(arg1: org.apache.http.IHttpMessage): void;
					}
					export class ContentLengthOutputStream extends java.io.OutputStream {
						constructor(arg1: org.apache.http.io.ISessionOutputBuffer, arg2: native.Long);
						static class: java.lang.Class<org.apache.http.impl.io.ContentLengthOutputStream>;
						write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
						write(arg1: native.Array<native.Byte>): void;
						write(arg1: number): void;
						close(): void;
						flush(): void;
					}
					export class ContentLengthInputStream extends java.io.InputStream {
						constructor(arg1: org.apache.http.io.ISessionInputBuffer, arg2: native.Long);
						static class: java.lang.Class<org.apache.http.impl.io.ContentLengthInputStream>;
						close(): void;
						read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
						read(arg1: native.Array<native.Byte>): number;
						read(): number;
						skip(arg1: native.Long): any;
					}
					export class AbstractSessionOutputBuffer extends java.lang.Object implements org.apache.http.io.ISessionOutputBuffer {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.io.AbstractSessionOutputBuffer>;
						writeLine(arg1: java.lang.String): void;
						writeLine(arg1: string): void;
						writeLine(arg1: org.apache.http.util.CharArrayBuffer): void;
						write(arg1: number): void;
						write(arg1: native.Array<native.Byte>): void;
						write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
						flush(): void;
						getMetrics(): org.apache.http.io.IHttpTransportMetrics;
					}
					export class HttpRequestParser extends org.apache.http.impl.io.AbstractMessageParser {
						constructor(arg1: org.apache.http.io.ISessionInputBuffer, arg2: org.apache.http.message.ILineParser, arg3: org.apache.http.IHttpRequestFactory, arg4: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.io.HttpRequestParser>;
					}
					export class SocketInputBuffer extends org.apache.http.impl.io.AbstractSessionInputBuffer {
						constructor(arg1: java.net.Socket, arg2: number, arg3: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.io.SocketInputBuffer>;
						isDataAvailable(arg1: number): boolean;
					}
					export class HttpResponseParser extends org.apache.http.impl.io.AbstractMessageParser {
						constructor(arg1: org.apache.http.io.ISessionInputBuffer, arg2: org.apache.http.message.ILineParser, arg3: org.apache.http.IHttpResponseFactory, arg4: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.io.HttpResponseParser>;
					}
					export class AbstractMessageParser extends java.lang.Object implements org.apache.http.io.IHttpMessageParser {
						constructor(arg1: org.apache.http.io.ISessionInputBuffer, arg2: org.apache.http.message.ILineParser, arg3: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.io.AbstractMessageParser>;
						static parseHeaders(arg1: org.apache.http.io.ISessionInputBuffer, arg2: number, arg3: number, arg4: org.apache.http.message.ILineParser): native.Array<org.apache.http.IHeader>;
						parse(): org.apache.http.IHttpMessage;
					}
					export class IdentityOutputStream extends java.io.OutputStream {
						constructor(arg1: org.apache.http.io.ISessionOutputBuffer);
						static class: java.lang.Class<org.apache.http.impl.io.IdentityOutputStream>;
						write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
						write(arg1: native.Array<native.Byte>): void;
						write(arg1: number): void;
						close(): void;
						flush(): void;
					}
					export class ChunkedInputStream extends java.io.InputStream {
						constructor(arg1: org.apache.http.io.ISessionInputBuffer);
						static class: java.lang.Class<org.apache.http.impl.io.ChunkedInputStream>;
						getFooters(): native.Array<org.apache.http.IHeader>;
						close(): void;
						read(arg1: native.Array<native.Byte>): number;
						read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
						read(): number;
					}
					export class ChunkedOutputStream extends java.io.OutputStream {
						constructor(arg1: org.apache.http.io.ISessionOutputBuffer, arg2: number);
						constructor(arg1: org.apache.http.io.ISessionOutputBuffer);
						static class: java.lang.Class<org.apache.http.impl.io.ChunkedOutputStream>;
						write(arg1: native.Array<native.Byte>): void;
						write(arg1: number): void;
						write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
						close(): void;
						flush(): void;
						finish(): void;
					}
					export class SocketOutputBuffer extends org.apache.http.impl.io.AbstractSessionOutputBuffer {
						constructor(arg1: java.net.Socket, arg2: number, arg3: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.io.SocketOutputBuffer>;
					}
					export class HttpTransportMetricsImpl extends java.lang.Object implements org.apache.http.io.IHttpTransportMetrics {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.io.HttpTransportMetricsImpl>;
						setBytesTransferred(arg1: native.Long): void;
						getBytesTransferred(): any;
						incrementBytesTransferred(arg1: native.Long): void;
						reset(): void;
					}
					export class AbstractSessionInputBuffer extends java.lang.Object implements org.apache.http.io.ISessionInputBuffer {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.io.AbstractSessionInputBuffer>;
						readLine(arg1: org.apache.http.util.CharArrayBuffer): number;
						readLine(): string;
						read(arg1: native.Array<native.Byte>): number;
						read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
						read(): number;
						getMetrics(): org.apache.http.io.IHttpTransportMetrics;
						isDataAvailable(arg1: number): boolean;
					}
					export class HttpRequestWriter extends org.apache.http.impl.io.AbstractMessageWriter {
						constructor(arg1: org.apache.http.io.ISessionOutputBuffer, arg2: org.apache.http.message.ILineFormatter, arg3: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.io.HttpRequestWriter>;
					}
					export class HttpResponseWriter extends org.apache.http.impl.io.AbstractMessageWriter {
						constructor(arg1: org.apache.http.io.ISessionOutputBuffer, arg2: org.apache.http.message.ILineFormatter, arg3: org.apache.http.params.IHttpParams);
						static class: java.lang.Class<org.apache.http.impl.io.HttpResponseWriter>;
					}
					export class IdentityInputStream extends java.io.InputStream {
						constructor(arg1: org.apache.http.io.ISessionInputBuffer);
						static class: java.lang.Class<org.apache.http.impl.io.IdentityInputStream>;
						close(): void;
						available(): number;
						read(): number;
						read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
						read(arg1: native.Array<native.Byte>): number;
					}
				}
				export class AbstractHttpServerConnection extends java.lang.Object implements org.apache.http.IHttpServerConnection {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.AbstractHttpServerConnection>;
					SocketTimeout: number;
					sendResponseHeader(arg1: org.apache.http.IHttpResponse): void;
					sendResponseEntity(arg1: org.apache.http.IHttpResponse): void;
					receiveRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
					receiveRequestHeader(): org.apache.http.IHttpRequest;
					isStale(): boolean;
					flush(): void;
					getMetrics(): org.apache.http.IHttpConnectionMetrics;
					getSocketTimeout(): number;
					setSocketTimeout(arg1: number): void;
					close(): void;
					isOpen(): boolean;
					shutdown(): void;
				}
				export module cookie {
					export class BasicMaxAgeHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BasicMaxAgeHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
					}
					export class RFC2965DomainAttributeHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2965DomainAttributeHandler>;
						domainMatch(arg1: java.lang.String, arg2: java.lang.String): boolean;
						domainMatch(arg1: string, arg2: string): boolean;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class BasicCommentHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BasicCommentHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
					}
					export class BasicDomainHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BasicDomainHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class AbstractCookieSpec extends java.lang.Object implements org.apache.http.cookie.ICookieSpec {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.AbstractCookieSpec>;
						registerAttribHandler(arg1: java.lang.String, arg2: org.apache.http.cookie.ICookieAttributeHandler): void;
						registerAttribHandler(arg1: string, arg2: org.apache.http.cookie.ICookieAttributeHandler): void;
						getVersionHeader(): org.apache.http.IHeader;
						formatCookies(arg1: java.util.IList<org.apache.http.cookie.ICookie>): java.util.IList<org.apache.http.IHeader>;
						parse(arg1: org.apache.http.IHeader, arg2: org.apache.http.cookie.CookieOrigin): java.util.IList<org.apache.http.cookie.ICookie>;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
						getVersion(): number;
					}
					export class RFC2965SpecFactory extends java.lang.Object implements org.apache.http.cookie.ICookieSpecFactory {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2965SpecFactory>;
						newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
					}
					export class BrowserCompatSpecFactory extends java.lang.Object implements org.apache.http.cookie.ICookieSpecFactory {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BrowserCompatSpecFactory>;
						newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
					}
					export class BrowserCompatSpec extends org.apache.http.impl.cookie.CookieSpecBase {
						constructor(arg1: native.Array<java.lang.String>);
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BrowserCompatSpec>;
						getVersionHeader(): org.apache.http.IHeader;
						formatCookies(arg1: java.util.IList<org.apache.http.cookie.ICookie>): java.util.IList<org.apache.http.IHeader>;
						parse(arg1: org.apache.http.IHeader, arg2: org.apache.http.cookie.CookieOrigin): java.util.IList<org.apache.http.cookie.ICookie>;
						getVersion(): number;
					}
					export class BasicExpiresHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
						constructor(arg1: native.Array<java.lang.String>);
						static class: java.lang.Class<org.apache.http.impl.cookie.BasicExpiresHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
					}
					export class RFC2109SpecFactory extends java.lang.Object implements org.apache.http.cookie.ICookieSpecFactory {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2109SpecFactory>;
						newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
					}
					export class DateUtils extends java.lang.Object {
						static PATTERN_RFC1123: java.lang.String;
						static PATTERN_RFC1036: java.lang.String;
						static PATTERN_ASCTIME: java.lang.String;
						static GMT: java.util.TimeZone;
						static class: java.lang.Class<org.apache.http.impl.cookie.DateUtils>;
						static parseDate(arg1: java.lang.String, arg2: native.Array<java.lang.String>): java.util.Date;
						static parseDate(arg1: string, arg2: native.Array<java.lang.String>): java.util.Date;
						static parseDate(arg1: java.lang.String): java.util.Date;
						static parseDate(arg1: string): java.util.Date;
						static parseDate(arg1: java.lang.String, arg2: native.Array<java.lang.String>, arg3: java.util.Date): java.util.Date;
						static parseDate(arg1: string, arg2: native.Array<java.lang.String>, arg3: java.util.Date): java.util.Date;
						static formatDate(arg1: java.util.Date, arg2: java.lang.String): string;
						static formatDate(arg1: java.util.Date, arg2: string): string;
						static formatDate(arg1: java.util.Date): string;
					}
					export class NetscapeDraftSpecFactory extends java.lang.Object implements org.apache.http.cookie.ICookieSpecFactory {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.NetscapeDraftSpecFactory>;
						newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
					}
					export class RFC2965VersionAttributeHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2965VersionAttributeHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class RFC2965PortAttributeHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2965PortAttributeHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class CookieSpecBase extends org.apache.http.impl.cookie.AbstractCookieSpec {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.CookieSpecBase>;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class BasicClientCookie2 extends org.apache.http.impl.cookie.BasicClientCookie implements org.apache.http.cookie.ISetCookie2 {
						constructor(arg1: java.lang.String, arg2: java.lang.String);
						constructor(arg1: string, arg2: string);
						static class: java.lang.Class<org.apache.http.impl.cookie.BasicClientCookie2>;
						ExpiryDate: java.util.Date;
						Value: string;
						Domain: string;
						CommentURL: string;
						Comment: string;
						Version: number;
						Path: string;
						Ports: native.Array<number>;
						getCommentURL(): string;
						setCommentURL(arg1: java.lang.String): void;
						setCommentURL(arg1: string): void;
						setDiscard(arg1: boolean): void;
						isPersistent(): boolean;
						setPorts(arg1: native.Array<number>): void;
						getPorts(): native.Array<number>;
						isExpired(arg1: java.util.Date): boolean;
						clone(): any;
						setDomain(arg1: string): void;
						setPath(arg1: string): void;
						setSecure(arg1: boolean): void;
						setVersion(arg1: number): void;
						setExpiryDate(arg1: java.util.Date): void;
						setValue(arg1: string): void;
						setComment(arg1: string): void;
						getDomain(): string;
						isSecure(): boolean;
						getExpiryDate(): java.util.Date;
						getName(): string;
						getValue(): string;
						getPath(): string;
						getVersion(): number;
						getComment(): string;
						setDomain(arg1: java.lang.String): void;
						setPath(arg1: java.lang.String): void;
						setValue(arg1: java.lang.String): void;
						setComment(arg1: java.lang.String): void;
					}
					export class RFC2109Spec extends org.apache.http.impl.cookie.CookieSpecBase {
						constructor(arg1: native.Array<java.lang.String>, arg2: boolean);
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2109Spec>;
						getVersionHeader(): org.apache.http.IHeader;
						formatCookies(arg1: java.util.IList<org.apache.http.cookie.ICookie>): java.util.IList<org.apache.http.IHeader>;
						parse(arg1: org.apache.http.IHeader, arg2: org.apache.http.cookie.CookieOrigin): java.util.IList<org.apache.http.cookie.ICookie>;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
						getVersion(): number;
					}
					export class DateParseException extends java.lang.Exception {
						constructor();
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						static class: java.lang.Class<org.apache.http.impl.cookie.DateParseException>;
					}
					export class BasicClientCookie extends java.lang.Object implements org.apache.http.cookie.ISetCookie, org.apache.http.cookie.IClientCookie, java.lang.ICloneable {
						constructor(arg1: java.lang.String, arg2: java.lang.String);
						constructor(arg1: string, arg2: string);
						static class: java.lang.Class<org.apache.http.impl.cookie.BasicClientCookie>;
						ExpiryDate: java.util.Date;
						Value: string;
						Domain: string;
						Comment: string;
						Version: number;
						Path: string;
						getDomain(): string;
						setDomain(arg1: java.lang.String): void;
						setDomain(arg1: string): void;
						setPath(arg1: java.lang.String): void;
						setPath(arg1: string): void;
						getCommentURL(): string;
						setSecure(arg1: boolean): void;
						setVersion(arg1: number): void;
						isSecure(): boolean;
						isPersistent(): boolean;
						setExpiryDate(arg1: java.util.Date): void;
						getPorts(): native.Array<number>;
						isExpired(arg1: java.util.Date): boolean;
						getExpiryDate(): java.util.Date;
						clone(): any;
						toString(): string;
						getName(): string;
						getValue(): string;
						setValue(arg1: java.lang.String): void;
						setValue(arg1: string): void;
						getPath(): string;
						getVersion(): number;
						getComment(): string;
						setComment(arg1: java.lang.String): void;
						setComment(arg1: string): void;
						getAttribute(arg1: java.lang.String): string;
						getAttribute(arg1: string): string;
						containsAttribute(arg1: java.lang.String): boolean;
						containsAttribute(arg1: string): boolean;
						setAttribute(arg1: java.lang.String, arg2: java.lang.String): void;
						setAttribute(arg1: string, arg2: string): void;
					}
					export class AbstractCookieAttributeHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.AbstractCookieAttributeHandler>;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
					}
					export class BasicSecureHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BasicSecureHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
					}
					export class NetscapeDraftHeaderParser extends java.lang.Object {
						constructor();
						static DEFAULT: org.apache.http.impl.cookie.NetscapeDraftHeaderParser;
						static class: java.lang.Class<org.apache.http.impl.cookie.NetscapeDraftHeaderParser>;
						parseHeader(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IHeaderElement;
					}
					export class RFC2965CommentUrlAttributeHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class RFC2109DomainHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2109DomainHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class RFC2965DiscardAttributeHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class BestMatchSpecFactory extends java.lang.Object implements org.apache.http.cookie.ICookieSpecFactory {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BestMatchSpecFactory>;
						newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.cookie.ICookieSpec;
					}
					export class NetscapeDraftSpec extends org.apache.http.impl.cookie.CookieSpecBase {
						constructor(arg1: native.Array<java.lang.String>);
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.NetscapeDraftSpec>;
						getVersionHeader(): org.apache.http.IHeader;
						formatCookies(arg1: java.util.IList<org.apache.http.cookie.ICookie>): java.util.IList<org.apache.http.IHeader>;
						parse(arg1: org.apache.http.IHeader, arg2: org.apache.http.cookie.CookieOrigin): java.util.IList<org.apache.http.cookie.ICookie>;
						getVersion(): number;
					}
					export class RFC2965Spec extends org.apache.http.impl.cookie.RFC2109Spec {
						constructor();
						constructor(arg1: native.Array<java.lang.String>, arg2: boolean);
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2965Spec>;
						getVersionHeader(): org.apache.http.IHeader;
						parse(arg1: org.apache.http.IHeader, arg2: org.apache.http.cookie.CookieOrigin): java.util.IList<org.apache.http.cookie.ICookie>;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
						getVersion(): number;
					}
					export class BestMatchSpec extends java.lang.Object implements org.apache.http.cookie.ICookieSpec {
						constructor(arg1: native.Array<java.lang.String>, arg2: boolean);
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BestMatchSpec>;
						getVersionHeader(): org.apache.http.IHeader;
						formatCookies(arg1: java.util.IList<org.apache.http.cookie.ICookie>): java.util.IList<org.apache.http.IHeader>;
						parse(arg1: org.apache.http.IHeader, arg2: org.apache.http.cookie.CookieOrigin): java.util.IList<org.apache.http.cookie.ICookie>;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
						getVersion(): number;
					}
					export class RFC2109VersionHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.RFC2109VersionHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class NetscapeDomainHandler extends org.apache.http.impl.cookie.BasicDomainHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.NetscapeDomainHandler>;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
					export class BasicPathHandler extends java.lang.Object implements org.apache.http.cookie.ICookieAttributeHandler {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.cookie.BasicPathHandler>;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: java.lang.String): void;
						parse(arg1: org.apache.http.cookie.ISetCookie, arg2: string): void;
						match(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): boolean;
						validate(arg1: org.apache.http.cookie.ICookie, arg2: org.apache.http.cookie.CookieOrigin): void;
					}
				}
				export class DefaultHttpServerConnection extends org.apache.http.impl.SocketHttpServerConnection {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.DefaultHttpServerConnection>;
					toString(): string;
					bind(arg1: java.net.Socket, arg2: org.apache.http.params.IHttpParams): void;
				}
				export class SocketHttpServerConnection extends org.apache.http.impl.AbstractHttpServerConnection implements org.apache.http.IHttpInetConnection {
					constructor();
					static class: java.lang.Class<org.apache.http.impl.SocketHttpServerConnection>;
					SocketTimeout: number;
					getRemotePort(): number;
					getSocketTimeout(): number;
					setSocketTimeout(arg1: number): void;
					close(): void;
					isOpen(): boolean;
					shutdown(): void;
					getLocalPort(): number;
					getLocalAddress(): java.net.InetAddress;
					getRemoteAddress(): java.net.InetAddress;
					isStale(): boolean;
					getMetrics(): org.apache.http.IHttpConnectionMetrics;
				}
				export class EnglishReasonPhraseCatalog extends java.lang.Object implements org.apache.http.IReasonPhraseCatalog {
					static INSTANCE: org.apache.http.impl.EnglishReasonPhraseCatalog;
					static class: java.lang.Class<org.apache.http.impl.EnglishReasonPhraseCatalog>;
					getReason(arg1: number, arg2: java.util.Locale): string;
				}
				export class DefaultHttpResponseFactory extends java.lang.Object implements org.apache.http.IHttpResponseFactory {
					constructor();
					constructor(arg1: org.apache.http.IReasonPhraseCatalog);
					static class: java.lang.Class<org.apache.http.impl.DefaultHttpResponseFactory>;
					newHttpResponse(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
					newHttpResponse(arg1: org.apache.http.IStatusLine, arg2: org.apache.http.protocol.IHttpContext): org.apache.http.IHttpResponse;
				}
				export class HttpConnectionMetricsImpl extends java.lang.Object implements org.apache.http.IHttpConnectionMetrics {
					constructor(arg1: org.apache.http.io.IHttpTransportMetrics, arg2: org.apache.http.io.IHttpTransportMetrics);
					static REQUEST_COUNT: java.lang.String;
					static RESPONSE_COUNT: java.lang.String;
					static SENT_BYTES_COUNT: java.lang.String;
					static RECEIVED_BYTES_COUNT: java.lang.String;
					static class: java.lang.Class<org.apache.http.impl.HttpConnectionMetricsImpl>;
					getRequestCount(): any;
					getReceivedBytesCount(): any;
					getResponseCount(): any;
					incrementRequestCount(): void;
					getSentBytesCount(): any;
					getMetric(arg1: java.lang.String): any;
					getMetric(arg1: string): any;
					setMetric(arg1: java.lang.String, arg2: any): void;
					setMetric(arg1: string, arg2: any): void;
					incrementResponseCount(): void;
					reset(): void;
				}
				export module auth {
					export class AuthSchemeBase extends java.lang.Object implements org.apache.http.auth.IAuthScheme {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.auth.AuthSchemeBase>;
						processChallenge(arg1: org.apache.http.IHeader): void;
						isProxy(): boolean;
						getSchemeName(): string;
						getRealm(): string;
						isComplete(): boolean;
						isConnectionBased(): boolean;
						authenticate(arg1: org.apache.http.auth.ICredentials, arg2: org.apache.http.IHttpRequest): org.apache.http.IHeader;
						getParameter(arg1: string): string;
					}
					export class BasicSchemeFactory extends java.lang.Object implements org.apache.http.auth.IAuthSchemeFactory {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.auth.BasicSchemeFactory>;
						newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.auth.IAuthScheme;
					}
					export class BasicScheme extends org.apache.http.impl.auth.RFC2617Scheme {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.auth.BasicScheme>;
						getSchemeName(): string;
						isComplete(): boolean;
						processChallenge(arg1: org.apache.http.IHeader): void;
						isConnectionBased(): boolean;
						authenticate(arg1: org.apache.http.auth.ICredentials, arg2: org.apache.http.IHttpRequest): org.apache.http.IHeader;
						static authenticate(arg1: org.apache.http.auth.ICredentials, arg2: java.lang.String, arg3: boolean): org.apache.http.IHeader;
						static authenticate(arg1: org.apache.http.auth.ICredentials, arg2: string, arg3: boolean): org.apache.http.IHeader;
					}
					export interface INTLMEngine {
						generateType3Msg(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): string;
						generateType1Msg(arg1: string, arg2: string): string;
					}
					export class DigestScheme extends org.apache.http.impl.auth.RFC2617Scheme {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.auth.DigestScheme>;
						getSchemeName(): string;
						static createCnonce(): string;
						isComplete(): boolean;
						processChallenge(arg1: org.apache.http.IHeader): void;
						overrideParamter(arg1: java.lang.String, arg2: java.lang.String): void;
						overrideParamter(arg1: string, arg2: string): void;
						isConnectionBased(): boolean;
						authenticate(arg1: org.apache.http.auth.ICredentials, arg2: org.apache.http.IHttpRequest): org.apache.http.IHeader;
					}
					export class NTLMEngine implements org.apache.http.impl.auth.INTLMEngine {
						constructor(implementation: org.apache.http.impl.auth.INTLMEngine);
						generateType3Msg(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.String, arg5: java.lang.String): string;
						generateType3Msg(arg1: string, arg2: string, arg3: string, arg4: string, arg5: string): string;
						generateType1Msg(arg1: java.lang.String, arg2: java.lang.String): string;
						generateType1Msg(arg1: string, arg2: string): string;
					}
					export class NTLMEngineException extends org.apache.http.auth.AuthenticationException {
						constructor();
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
						constructor(arg1: string, arg2: java.lang.Throwable);
						static class: java.lang.Class<org.apache.http.impl.auth.NTLMEngineException>;
					}
					export class DigestSchemeFactory extends java.lang.Object implements org.apache.http.auth.IAuthSchemeFactory {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.auth.DigestSchemeFactory>;
						newInstance(arg1: org.apache.http.params.IHttpParams): org.apache.http.auth.IAuthScheme;
					}
					export class UnsupportedDigestAlgorithmException extends java.lang.RuntimeException {
						constructor();
						constructor(arg1: java.lang.String);
						constructor(arg1: string);
						constructor(arg1: java.lang.String, arg2: java.lang.Throwable);
						constructor(arg1: string, arg2: java.lang.Throwable);
						static class: java.lang.Class<org.apache.http.impl.auth.UnsupportedDigestAlgorithmException>;
					}
					export class NTLMScheme extends org.apache.http.impl.auth.AuthSchemeBase {
						constructor(arg1: org.apache.http.impl.auth.INTLMEngine);
						static class: java.lang.Class<org.apache.http.impl.auth.NTLMScheme>;
						getSchemeName(): string;
						getRealm(): string;
						isComplete(): boolean;
						isConnectionBased(): boolean;
						authenticate(arg1: org.apache.http.auth.ICredentials, arg2: org.apache.http.IHttpRequest): org.apache.http.IHeader;
						getParameter(arg1: java.lang.String): string;
						getParameter(arg1: string): string;
					}
					export class RFC2617Scheme extends org.apache.http.impl.auth.AuthSchemeBase {
						constructor();
						static class: java.lang.Class<org.apache.http.impl.auth.RFC2617Scheme>;
						getRealm(): string;
						getParameter(arg1: java.lang.String): string;
						getParameter(arg1: string): string;
					}
				}
			}
			export interface IHttpClientConnection extends org.apache.http.IHttpConnection {
				sendRequestHeader(arg1: org.apache.http.IHttpRequest): void;
				receiveResponseHeader(): org.apache.http.IHttpResponse;
				sendRequestEntity(arg1: org.apache.http.IHttpEntityEnclosingRequest): void;
				receiveResponseEntity(arg1: org.apache.http.IHttpResponse): void;
				isResponseAvailable(arg1: number): boolean;
				flush(): void;
				getSocketTimeout(): number;
				setSocketTimeout(arg1: number): void;
				isStale(): boolean;
				close(): void;
				isOpen(): boolean;
				shutdown(): void;
				getMetrics(): org.apache.http.IHttpConnectionMetrics;
			}
			export interface IReasonPhraseCatalog {
				getReason(arg1: number, arg2: java.util.Locale): string;
			}
			export interface IHttpConnectionMetrics {
				getRequestCount(): any;
				getReceivedBytesCount(): any;
				getResponseCount(): any;
				getSentBytesCount(): any;
				getMetric(arg1: string): any;
				reset(): void;
			}
			export module params {
				export class CoreConnectionPNames implements org.apache.http.params.ICoreConnectionPNames {
					constructor(implementation: org.apache.http.params.ICoreConnectionPNames);
					static SO_TIMEOUT: java.lang.String;
					static TCP_NODELAY: java.lang.String;
					static SOCKET_BUFFER_SIZE: java.lang.String;
					static SO_LINGER: java.lang.String;
					static CONNECTION_TIMEOUT: java.lang.String;
					static STALE_CONNECTION_CHECK: java.lang.String;
					static MAX_LINE_LENGTH: java.lang.String;
					static MAX_HEADER_COUNT: java.lang.String;
				}
				export class CoreProtocolPNames implements org.apache.http.params.ICoreProtocolPNames {
					constructor(implementation: org.apache.http.params.ICoreProtocolPNames);
					static PROTOCOL_VERSION: java.lang.String;
					static HTTP_ELEMENT_CHARSET: java.lang.String;
					static HTTP_CONTENT_CHARSET: java.lang.String;
					static USER_AGENT: java.lang.String;
					static ORIGIN_SERVER: java.lang.String;
					static STRICT_TRANSFER_ENCODING: java.lang.String;
					static USE_EXPECT_CONTINUE: java.lang.String;
					static WAIT_FOR_CONTINUE: java.lang.String;
				}
				export interface IHttpParams {
					isParameterTrue(arg1: string): boolean;
					isParameterFalse(arg1: string): boolean;
					setDoubleParameter(arg1: string, arg2: number): org.apache.http.params.IHttpParams;
					getDoubleParameter(arg1: string, arg2: number): any;
					getBooleanParameter(arg1: string, arg2: boolean): boolean;
					getLongParameter(arg1: string, arg2: native.Long): any;
					getIntParameter(arg1: string, arg2: number): number;
					setIntParameter(arg1: string, arg2: number): org.apache.http.params.IHttpParams;
					setBooleanParameter(arg1: string, arg2: boolean): org.apache.http.params.IHttpParams;
					setLongParameter(arg1: string, arg2: native.Long): org.apache.http.params.IHttpParams;
					copy(): org.apache.http.params.IHttpParams;
					getParameter(arg1: string): any;
					removeParameter(arg1: string): boolean;
					setParameter(arg1: string, arg2: any): org.apache.http.params.IHttpParams;
				}
				export interface ICoreConnectionPNames {
				}
				export module ICoreConnectionPNames {
					var SO_TIMEOUT: java.lang.String;
					var TCP_NODELAY: java.lang.String;
					var SOCKET_BUFFER_SIZE: java.lang.String;
					var SO_LINGER: java.lang.String;
					var CONNECTION_TIMEOUT: java.lang.String;
					var STALE_CONNECTION_CHECK: java.lang.String;
					var MAX_LINE_LENGTH: java.lang.String;
					var MAX_HEADER_COUNT: java.lang.String;
				}
				export class HttpProtocolParams extends java.lang.Object implements org.apache.http.params.ICoreProtocolPNames {
					static class: java.lang.Class<org.apache.http.params.HttpProtocolParams>;
					static setVersion(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.ProtocolVersion): void;
					static setHttpElementCharset(arg1: org.apache.http.params.IHttpParams, arg2: java.lang.String): void;
					static setHttpElementCharset(arg1: org.apache.http.params.IHttpParams, arg2: string): void;
					static getContentCharset(arg1: org.apache.http.params.IHttpParams): string;
					static getHttpElementCharset(arg1: org.apache.http.params.IHttpParams): string;
					static setContentCharset(arg1: org.apache.http.params.IHttpParams, arg2: java.lang.String): void;
					static setContentCharset(arg1: org.apache.http.params.IHttpParams, arg2: string): void;
					static useExpectContinue(arg1: org.apache.http.params.IHttpParams): boolean;
					static setUseExpectContinue(arg1: org.apache.http.params.IHttpParams, arg2: boolean): void;
					static setUserAgent(arg1: org.apache.http.params.IHttpParams, arg2: java.lang.String): void;
					static setUserAgent(arg1: org.apache.http.params.IHttpParams, arg2: string): void;
					static getUserAgent(arg1: org.apache.http.params.IHttpParams): string;
					static getVersion(arg1: org.apache.http.params.IHttpParams): org.apache.http.ProtocolVersion;
				}
				export interface ICoreProtocolPNames {
				}
				export module ICoreProtocolPNames {
					var PROTOCOL_VERSION: java.lang.String;
					var HTTP_ELEMENT_CHARSET: java.lang.String;
					var HTTP_CONTENT_CHARSET: java.lang.String;
					var USER_AGENT: java.lang.String;
					var ORIGIN_SERVER: java.lang.String;
					var STRICT_TRANSFER_ENCODING: java.lang.String;
					var USE_EXPECT_CONTINUE: java.lang.String;
					var WAIT_FOR_CONTINUE: java.lang.String;
				}
				export class HttpAbstractParamBean extends java.lang.Object {
					constructor(arg1: org.apache.http.params.IHttpParams);
					static class: java.lang.Class<org.apache.http.params.HttpAbstractParamBean>;
				}
				export class HttpParams implements org.apache.http.params.IHttpParams {
					constructor(implementation: org.apache.http.params.IHttpParams);
					isParameterTrue(arg1: java.lang.String): boolean;
					isParameterTrue(arg1: string): boolean;
					isParameterFalse(arg1: java.lang.String): boolean;
					isParameterFalse(arg1: string): boolean;
					setDoubleParameter(arg1: java.lang.String, arg2: native.Double): org.apache.http.params.IHttpParams;
					setDoubleParameter(arg1: string, arg2: number): org.apache.http.params.IHttpParams;
					getDoubleParameter(arg1: java.lang.String, arg2: native.Double): any;
					getDoubleParameter(arg1: string, arg2: number): any;
					getBooleanParameter(arg1: java.lang.String, arg2: boolean): boolean;
					getBooleanParameter(arg1: string, arg2: boolean): boolean;
					getLongParameter(arg1: java.lang.String, arg2: native.Long): any;
					getLongParameter(arg1: string, arg2: native.Long): any;
					getIntParameter(arg1: java.lang.String, arg2: number): number;
					getIntParameter(arg1: string, arg2: number): number;
					setIntParameter(arg1: java.lang.String, arg2: number): org.apache.http.params.IHttpParams;
					setIntParameter(arg1: string, arg2: number): org.apache.http.params.IHttpParams;
					setBooleanParameter(arg1: java.lang.String, arg2: boolean): org.apache.http.params.IHttpParams;
					setBooleanParameter(arg1: string, arg2: boolean): org.apache.http.params.IHttpParams;
					setLongParameter(arg1: java.lang.String, arg2: native.Long): org.apache.http.params.IHttpParams;
					setLongParameter(arg1: string, arg2: native.Long): org.apache.http.params.IHttpParams;
					copy(): org.apache.http.params.IHttpParams;
					getParameter(arg1: java.lang.String): any;
					getParameter(arg1: string): any;
					removeParameter(arg1: java.lang.String): boolean;
					removeParameter(arg1: string): boolean;
					setParameter(arg1: java.lang.String, arg2: any): org.apache.http.params.IHttpParams;
					setParameter(arg1: string, arg2: any): org.apache.http.params.IHttpParams;
				}
				export class HttpConnectionParamBean extends org.apache.http.params.HttpAbstractParamBean {
					constructor(arg1: org.apache.http.params.IHttpParams);
					static class: java.lang.Class<org.apache.http.params.HttpConnectionParamBean>;
					setStaleCheckingEnabled(arg1: boolean): void;
					setSocketBufferSize(arg1: number): void;
					setConnectionTimeout(arg1: number): void;
					setLinger(arg1: number): void;
					setSoTimeout(arg1: number): void;
					setTcpNoDelay(arg1: boolean): void;
				}
				export class HttpProtocolParamBean extends org.apache.http.params.HttpAbstractParamBean {
					constructor(arg1: org.apache.http.params.IHttpParams);
					static class: java.lang.Class<org.apache.http.params.HttpProtocolParamBean>;
					setVersion(arg1: org.apache.http.HttpVersion): void;
					setHttpElementCharset(arg1: java.lang.String): void;
					setHttpElementCharset(arg1: string): void;
					setContentCharset(arg1: java.lang.String): void;
					setContentCharset(arg1: string): void;
					setUseExpectContinue(arg1: boolean): void;
					setUserAgent(arg1: java.lang.String): void;
					setUserAgent(arg1: string): void;
				}
				export class AbstractHttpParams extends java.lang.Object implements org.apache.http.params.IHttpParams {
					static class: java.lang.Class<org.apache.http.params.AbstractHttpParams>;
					isParameterTrue(arg1: java.lang.String): boolean;
					isParameterTrue(arg1: string): boolean;
					isParameterFalse(arg1: java.lang.String): boolean;
					isParameterFalse(arg1: string): boolean;
					setDoubleParameter(arg1: java.lang.String, arg2: native.Double): org.apache.http.params.IHttpParams;
					setDoubleParameter(arg1: string, arg2: number): org.apache.http.params.IHttpParams;
					getDoubleParameter(arg1: java.lang.String, arg2: native.Double): any;
					getDoubleParameter(arg1: string, arg2: number): any;
					getBooleanParameter(arg1: java.lang.String, arg2: boolean): boolean;
					getBooleanParameter(arg1: string, arg2: boolean): boolean;
					getLongParameter(arg1: java.lang.String, arg2: native.Long): any;
					getLongParameter(arg1: string, arg2: native.Long): any;
					getIntParameter(arg1: java.lang.String, arg2: number): number;
					getIntParameter(arg1: string, arg2: number): number;
					setIntParameter(arg1: java.lang.String, arg2: number): org.apache.http.params.IHttpParams;
					setIntParameter(arg1: string, arg2: number): org.apache.http.params.IHttpParams;
					setBooleanParameter(arg1: java.lang.String, arg2: boolean): org.apache.http.params.IHttpParams;
					setBooleanParameter(arg1: string, arg2: boolean): org.apache.http.params.IHttpParams;
					setLongParameter(arg1: java.lang.String, arg2: native.Long): org.apache.http.params.IHttpParams;
					setLongParameter(arg1: string, arg2: native.Long): org.apache.http.params.IHttpParams;
					copy(): org.apache.http.params.IHttpParams;
					getParameter(arg1: string): any;
					removeParameter(arg1: string): boolean;
					setParameter(arg1: string, arg2: any): org.apache.http.params.IHttpParams;
				}
				export class HttpConnectionParams extends java.lang.Object implements org.apache.http.params.ICoreConnectionPNames {
					static class: java.lang.Class<org.apache.http.params.HttpConnectionParams>;
					static isStaleCheckingEnabled(arg1: org.apache.http.params.IHttpParams): boolean;
					static setStaleCheckingEnabled(arg1: org.apache.http.params.IHttpParams, arg2: boolean): void;
					static setSocketBufferSize(arg1: org.apache.http.params.IHttpParams, arg2: number): void;
					static setConnectionTimeout(arg1: org.apache.http.params.IHttpParams, arg2: number): void;
					static getSocketBufferSize(arg1: org.apache.http.params.IHttpParams): number;
					static getConnectionTimeout(arg1: org.apache.http.params.IHttpParams): number;
					static setLinger(arg1: org.apache.http.params.IHttpParams, arg2: number): void;
					static getLinger(arg1: org.apache.http.params.IHttpParams): number;
					static getSoTimeout(arg1: org.apache.http.params.IHttpParams): number;
					static setSoTimeout(arg1: org.apache.http.params.IHttpParams, arg2: number): void;
					static getTcpNoDelay(arg1: org.apache.http.params.IHttpParams): boolean;
					static setTcpNoDelay(arg1: org.apache.http.params.IHttpParams, arg2: boolean): void;
				}
				export class DefaultedHttpParams extends org.apache.http.params.AbstractHttpParams {
					constructor(arg1: org.apache.http.params.IHttpParams, arg2: org.apache.http.params.IHttpParams);
					static class: java.lang.Class<org.apache.http.params.DefaultedHttpParams>;
					copy(): org.apache.http.params.IHttpParams;
					getDefaults(): org.apache.http.params.IHttpParams;
					getParameter(arg1: java.lang.String): any;
					getParameter(arg1: string): any;
					removeParameter(arg1: java.lang.String): boolean;
					removeParameter(arg1: string): boolean;
					setParameter(arg1: java.lang.String, arg2: any): org.apache.http.params.IHttpParams;
					setParameter(arg1: string, arg2: any): org.apache.http.params.IHttpParams;
				}
				export class BasicHttpParams extends org.apache.http.params.AbstractHttpParams implements java.io.ISerializable, java.lang.ICloneable {
					constructor();
					static class: java.lang.Class<org.apache.http.params.BasicHttpParams>;
					isParameterSetLocally(arg1: java.lang.String): boolean;
					isParameterSetLocally(arg1: string): boolean;
					isParameterSet(arg1: java.lang.String): boolean;
					isParameterSet(arg1: string): boolean;
					clone(): any;
					clear(): void;
					copy(): org.apache.http.params.IHttpParams;
					setParameters(arg1: native.Array<java.lang.String>, arg2: any): void;
					getParameter(arg1: java.lang.String): any;
					getParameter(arg1: string): any;
					removeParameter(arg1: java.lang.String): boolean;
					removeParameter(arg1: string): boolean;
					setParameter(arg1: java.lang.String, arg2: any): org.apache.http.params.IHttpParams;
					setParameter(arg1: string, arg2: any): org.apache.http.params.IHttpParams;
				}
			}
			export interface IHttpResponse extends org.apache.http.IHttpMessage {
				getEntity(): org.apache.http.IHttpEntity;
				setEntity(arg1: org.apache.http.IHttpEntity): void;
				setReasonPhrase(arg1: string): void;
				setStatusLine(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: string): void;
				setStatusLine(arg1: org.apache.http.IStatusLine): void;
				setStatusLine(arg1: org.apache.http.ProtocolVersion, arg2: number): void;
				setStatusCode(arg1: number): void;
				getStatusLine(): org.apache.http.IStatusLine;
				getLocale(): java.util.Locale;
				setLocale(arg1: java.util.Locale): void;
				removeHeader(arg1: org.apache.http.IHeader): void;
				getFirstHeader(arg1: string): org.apache.http.IHeader;
				headerIterator(): org.apache.http.IHeaderIterator;
				headerIterator(arg1: string): org.apache.http.IHeaderIterator;
				containsHeader(arg1: string): boolean;
				setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
				removeHeaders(arg1: string): void;
				setHeader(arg1: string, arg2: string): void;
				setHeader(arg1: org.apache.http.IHeader): void;
				getLastHeader(arg1: string): org.apache.http.IHeader;
				addHeader(arg1: org.apache.http.IHeader): void;
				addHeader(arg1: string, arg2: string): void;
				getAllHeaders(): native.Array<org.apache.http.IHeader>;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
				getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				setParams(arg1: org.apache.http.params.IHttpParams): void;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export module io {
				export interface ISessionOutputBuffer {
					writeLine(arg1: string): void;
					writeLine(arg1: org.apache.http.util.CharArrayBuffer): void;
					write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
					write(arg1: number): void;
					write(arg1: native.Array<native.Byte>): void;
					flush(): void;
					getMetrics(): org.apache.http.io.IHttpTransportMetrics;
				}
				export interface IHttpMessageWriter {
					write(arg1: org.apache.http.IHttpMessage): void;
				}
				export class HttpMessageWriter implements org.apache.http.io.IHttpMessageWriter {
					constructor(implementation: org.apache.http.io.IHttpMessageWriter);
					write(arg1: org.apache.http.IHttpMessage): void;
				}
				export class HttpTransportMetrics implements org.apache.http.io.IHttpTransportMetrics {
					constructor(implementation: org.apache.http.io.IHttpTransportMetrics);
					getBytesTransferred(): any;
					reset(): void;
				}
				export class SessionOutputBuffer implements org.apache.http.io.ISessionOutputBuffer {
					constructor(implementation: org.apache.http.io.ISessionOutputBuffer);
					writeLine(arg1: java.lang.String): void;
					writeLine(arg1: string): void;
					writeLine(arg1: org.apache.http.util.CharArrayBuffer): void;
					write(arg1: native.Array<native.Byte>, arg2: number, arg3: number): void;
					write(arg1: number): void;
					write(arg1: native.Array<native.Byte>): void;
					flush(): void;
					getMetrics(): org.apache.http.io.IHttpTransportMetrics;
				}
				export class HttpMessageParser implements org.apache.http.io.IHttpMessageParser {
					constructor(implementation: org.apache.http.io.IHttpMessageParser);
					parse(): org.apache.http.IHttpMessage;
				}
				export interface IHttpMessageParser {
					parse(): org.apache.http.IHttpMessage;
				}
				export interface IHttpTransportMetrics {
					getBytesTransferred(): any;
					reset(): void;
				}
				export interface ISessionInputBuffer {
					isDataAvailable(arg1: number): boolean;
					readLine(): string;
					readLine(arg1: org.apache.http.util.CharArrayBuffer): number;
					read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
					read(): number;
					read(arg1: native.Array<native.Byte>): number;
					getMetrics(): org.apache.http.io.IHttpTransportMetrics;
				}
				export class SessionInputBuffer implements org.apache.http.io.ISessionInputBuffer {
					constructor(implementation: org.apache.http.io.ISessionInputBuffer);
					isDataAvailable(arg1: number): boolean;
					readLine(): string;
					readLine(arg1: org.apache.http.util.CharArrayBuffer): number;
					read(arg1: native.Array<native.Byte>, arg2: number, arg3: number): number;
					read(): number;
					read(arg1: native.Array<native.Byte>): number;
					getMetrics(): org.apache.http.io.IHttpTransportMetrics;
				}
			}
			export class UnsupportedHttpVersionException extends org.apache.http.ProtocolException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<org.apache.http.UnsupportedHttpVersionException>;
			}
			export class NameValuePair implements org.apache.http.INameValuePair {
				constructor(implementation: org.apache.http.INameValuePair);
				getName(): string;
				getValue(): string;
			}
			export interface IHttpInetConnection extends org.apache.http.IHttpConnection {
				getRemotePort(): number;
				getLocalPort(): number;
				getLocalAddress(): java.net.InetAddress;
				getRemoteAddress(): java.net.InetAddress;
				getSocketTimeout(): number;
				setSocketTimeout(arg1: number): void;
				isStale(): boolean;
				close(): void;
				isOpen(): boolean;
				shutdown(): void;
				getMetrics(): org.apache.http.IHttpConnectionMetrics;
			}
			export module message {
				export class BasicHttpEntityEnclosingRequest extends org.apache.http.message.BasicHttpRequest implements org.apache.http.IHttpEntityEnclosingRequest {
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					constructor(arg1: org.apache.http.IRequestLine);
					constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: org.apache.http.ProtocolVersion);
					constructor(arg1: string, arg2: string, arg3: org.apache.http.ProtocolVersion);
					static class: java.lang.Class<org.apache.http.message.BasicHttpEntityEnclosingRequest>;
					Params: org.apache.http.params.IHttpParams;
					Entity: org.apache.http.IHttpEntity;
					expectContinue(): boolean;
					getEntity(): org.apache.http.IHttpEntity;
					setEntity(arg1: org.apache.http.IHttpEntity): void;
					getRequestLine(): org.apache.http.IRequestLine;
					removeHeader(arg1: org.apache.http.IHeader): void;
					getFirstHeader(arg1: string): org.apache.http.IHeader;
					headerIterator(): org.apache.http.IHeaderIterator;
					headerIterator(arg1: string): org.apache.http.IHeaderIterator;
					containsHeader(arg1: string): boolean;
					setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
					removeHeaders(arg1: string): void;
					setHeader(arg1: string, arg2: string): void;
					setHeader(arg1: org.apache.http.IHeader): void;
					getLastHeader(arg1: string): org.apache.http.IHeader;
					addHeader(arg1: org.apache.http.IHeader): void;
					addHeader(arg1: string, arg2: string): void;
					getAllHeaders(): native.Array<org.apache.http.IHeader>;
					getProtocolVersion(): org.apache.http.ProtocolVersion;
					getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
					setParams(arg1: org.apache.http.params.IHttpParams): void;
					getParams(): org.apache.http.params.IHttpParams;
					getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
					headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
					containsHeader(arg1: java.lang.String): boolean;
					removeHeaders(arg1: java.lang.String): void;
					setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
					getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
					addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
					getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
				}
				export class HeaderGroup extends java.lang.Object implements java.lang.ICloneable {
					constructor();
					static class: java.lang.Class<org.apache.http.message.HeaderGroup>;
					removeHeader(arg1: org.apache.http.IHeader): void;
					getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
					getFirstHeader(arg1: string): org.apache.http.IHeader;
					containsHeader(arg1: java.lang.String): boolean;
					containsHeader(arg1: string): boolean;
					setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
					getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
					getLastHeader(arg1: string): org.apache.http.IHeader;
					addHeader(arg1: org.apache.http.IHeader): void;
					getAllHeaders(): native.Array<org.apache.http.IHeader>;
					getCondensedHeader(arg1: java.lang.String): org.apache.http.IHeader;
					getCondensedHeader(arg1: string): org.apache.http.IHeader;
					updateHeader(arg1: org.apache.http.IHeader): void;
					clone(): any;
					iterator(): org.apache.http.IHeaderIterator;
					iterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
					iterator(arg1: string): org.apache.http.IHeaderIterator;
					clear(): void;
					copy(): org.apache.http.message.HeaderGroup;
					getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
					getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				}
				export class BasicNameValuePair extends java.lang.Object implements org.apache.http.INameValuePair, java.lang.ICloneable {
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					static class: java.lang.Class<org.apache.http.message.BasicNameValuePair>;
					hashCode(): number;
					equals(arg1: any): boolean;
					clone(): any;
					toString(): string;
					getName(): string;
					getValue(): string;
				}
				export class BasicHeaderElement extends java.lang.Object implements org.apache.http.IHeaderElement, java.lang.ICloneable {
					constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: native.Array<org.apache.http.INameValuePair>);
					constructor(arg1: string, arg2: string, arg3: native.Array<org.apache.http.INameValuePair>);
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					static class: java.lang.Class<org.apache.http.message.BasicHeaderElement>;
					getParameterCount(): number;
					getParameterByName(arg1: java.lang.String): org.apache.http.INameValuePair;
					getParameterByName(arg1: string): org.apache.http.INameValuePair;
					hashCode(): number;
					equals(arg1: any): boolean;
					clone(): any;
					toString(): string;
					getName(): string;
					getValue(): string;
					getParameters(): native.Array<org.apache.http.INameValuePair>;
					getParameter(arg1: number): org.apache.http.INameValuePair;
				}
				export class BasicHeaderValueFormatter extends java.lang.Object implements org.apache.http.message.IHeaderValueFormatter {
					constructor();
					static DEFAULT: org.apache.http.message.BasicHeaderValueFormatter;
					static SEPARATORS: java.lang.String;
					static UNSAFE_CHARS: java.lang.String;
					static class: java.lang.Class<org.apache.http.message.BasicHeaderValueFormatter>;
					static formatElements(arg1: native.Array<org.apache.http.IHeaderElement>, arg2: boolean, arg3: org.apache.http.message.IHeaderValueFormatter): string;
					formatElements(arg1: org.apache.http.util.CharArrayBuffer, arg2: native.Array<org.apache.http.IHeaderElement>, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					static formatParameters(arg1: native.Array<org.apache.http.INameValuePair>, arg2: boolean, arg3: org.apache.http.message.IHeaderValueFormatter): string;
					formatParameters(arg1: org.apache.http.util.CharArrayBuffer, arg2: native.Array<org.apache.http.INameValuePair>, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					formatNameValuePair(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.INameValuePair, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					static formatNameValuePair(arg1: org.apache.http.INameValuePair, arg2: boolean, arg3: org.apache.http.message.IHeaderValueFormatter): string;
					formatHeaderElement(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IHeaderElement, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					static formatHeaderElement(arg1: org.apache.http.IHeaderElement, arg2: boolean, arg3: org.apache.http.message.IHeaderValueFormatter): string;
				}
				export class LineParser implements org.apache.http.message.ILineParser {
					constructor(implementation: org.apache.http.message.ILineParser);
					parseRequestLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IRequestLine;
					hasProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): boolean;
					parseProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.ProtocolVersion;
					parseStatusLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IStatusLine;
					parseHeader(arg1: org.apache.http.util.CharArrayBuffer): org.apache.http.IHeader;
				}
				export class BasicHeaderValueParser extends java.lang.Object implements org.apache.http.message.IHeaderValueParser {
					constructor();
					static DEFAULT: org.apache.http.message.BasicHeaderValueParser;
					static class: java.lang.Class<org.apache.http.message.BasicHeaderValueParser>;
					static parseParameters(arg1: java.lang.String, arg2: org.apache.http.message.IHeaderValueParser): native.Array<org.apache.http.INameValuePair>;
					static parseParameters(arg1: string, arg2: org.apache.http.message.IHeaderValueParser): native.Array<org.apache.http.INameValuePair>;
					parseParameters(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): native.Array<org.apache.http.INameValuePair>;
					static parseHeaderElement(arg1: java.lang.String, arg2: org.apache.http.message.IHeaderValueParser): org.apache.http.IHeaderElement;
					static parseHeaderElement(arg1: string, arg2: org.apache.http.message.IHeaderValueParser): org.apache.http.IHeaderElement;
					parseHeaderElement(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IHeaderElement;
					static parseNameValuePair(arg1: java.lang.String, arg2: org.apache.http.message.IHeaderValueParser): org.apache.http.INameValuePair;
					static parseNameValuePair(arg1: string, arg2: org.apache.http.message.IHeaderValueParser): org.apache.http.INameValuePair;
					parseNameValuePair(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor, arg3: native.Array<string>): org.apache.http.INameValuePair;
					parseNameValuePair(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.INameValuePair;
					parseElements(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): native.Array<org.apache.http.IHeaderElement>;
					static parseElements(arg1: java.lang.String, arg2: org.apache.http.message.IHeaderValueParser): native.Array<org.apache.http.IHeaderElement>;
					static parseElements(arg1: string, arg2: org.apache.http.message.IHeaderValueParser): native.Array<org.apache.http.IHeaderElement>;
				}
				export class LineFormatter implements org.apache.http.message.ILineFormatter {
					constructor(implementation: org.apache.http.message.ILineFormatter);
					formatHeader(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IHeader): org.apache.http.util.CharArrayBuffer;
					appendProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.ProtocolVersion): org.apache.http.util.CharArrayBuffer;
					formatRequestLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IRequestLine): org.apache.http.util.CharArrayBuffer;
					formatStatusLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IStatusLine): org.apache.http.util.CharArrayBuffer;
				}
				export class BasicHeader extends java.lang.Object implements org.apache.http.IHeader, java.lang.ICloneable {
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					static class: java.lang.Class<org.apache.http.message.BasicHeader>;
					clone(): any;
					toString(): string;
					getName(): string;
					getValue(): string;
					getElements(): native.Array<org.apache.http.IHeaderElement>;
				}
				export class BasicStatusLine extends java.lang.Object implements org.apache.http.IStatusLine, java.lang.ICloneable {
					constructor(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: java.lang.String);
					constructor(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: string);
					static class: java.lang.Class<org.apache.http.message.BasicStatusLine>;
					getStatusCode(): number;
					getReasonPhrase(): string;
					clone(): any;
					toString(): string;
					getProtocolVersion(): org.apache.http.ProtocolVersion;
				}
				export class AbstractHttpMessage extends java.lang.Object implements org.apache.http.IHttpMessage {
					static class: java.lang.Class<org.apache.http.message.AbstractHttpMessage>;
					Params: org.apache.http.params.IHttpParams;
					removeHeader(arg1: org.apache.http.IHeader): void;
					getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
					getFirstHeader(arg1: string): org.apache.http.IHeader;
					headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
					headerIterator(arg1: string): org.apache.http.IHeaderIterator;
					headerIterator(): org.apache.http.IHeaderIterator;
					containsHeader(arg1: java.lang.String): boolean;
					containsHeader(arg1: string): boolean;
					setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
					removeHeaders(arg1: java.lang.String): void;
					removeHeaders(arg1: string): void;
					setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
					setHeader(arg1: string, arg2: string): void;
					setHeader(arg1: org.apache.http.IHeader): void;
					getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
					getLastHeader(arg1: string): org.apache.http.IHeader;
					addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
					addHeader(arg1: string, arg2: string): void;
					addHeader(arg1: org.apache.http.IHeader): void;
					getAllHeaders(): native.Array<org.apache.http.IHeader>;
					getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
					getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
					setParams(arg1: org.apache.http.params.IHttpParams): void;
					getParams(): org.apache.http.params.IHttpParams;
					getProtocolVersion(): org.apache.http.ProtocolVersion;
				}
				export class ParserCursor extends java.lang.Object {
					constructor(arg1: number, arg2: number);
					static class: java.lang.Class<org.apache.http.message.ParserCursor>;
					updatePos(arg1: number): void;
					getLowerBound(): number;
					getUpperBound(): number;
					toString(): string;
					atEnd(): boolean;
					getPos(): number;
				}
				export class BasicTokenIterator extends java.lang.Object implements org.apache.http.ITokenIterator {
					constructor(arg1: org.apache.http.IHeaderIterator);
					static HTTP_SEPARATORS: java.lang.String;
					static class: java.lang.Class<org.apache.http.message.BasicTokenIterator>;
					hasNext(): boolean;
					next(): any;
					remove(): void;
					nextToken(): string;
				}
				export class HeaderValueFormatter implements org.apache.http.message.IHeaderValueFormatter {
					constructor(implementation: org.apache.http.message.IHeaderValueFormatter);
					formatElements(arg1: org.apache.http.util.CharArrayBuffer, arg2: native.Array<org.apache.http.IHeaderElement>, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					formatParameters(arg1: org.apache.http.util.CharArrayBuffer, arg2: native.Array<org.apache.http.INameValuePair>, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					formatNameValuePair(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.INameValuePair, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					formatHeaderElement(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IHeaderElement, arg3: boolean): org.apache.http.util.CharArrayBuffer;
				}
				export class HeaderValueParser implements org.apache.http.message.IHeaderValueParser {
					constructor(implementation: org.apache.http.message.IHeaderValueParser);
					parseParameters(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): native.Array<org.apache.http.INameValuePair>;
					parseHeaderElement(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IHeaderElement;
					parseNameValuePair(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.INameValuePair;
					parseElements(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): native.Array<org.apache.http.IHeaderElement>;
				}
				export class BufferedHeader extends java.lang.Object implements org.apache.http.IFormattedHeader, java.lang.ICloneable {
					constructor(arg1: org.apache.http.util.CharArrayBuffer);
					static class: java.lang.Class<org.apache.http.message.BufferedHeader>;
					getValuePos(): number;
					clone(): any;
					toString(): string;
					getName(): string;
					getValue(): string;
					getBuffer(): org.apache.http.util.CharArrayBuffer;
					getElements(): native.Array<org.apache.http.IHeaderElement>;
				}
				export class BasicHeaderElementIterator extends java.lang.Object implements org.apache.http.IHeaderElementIterator {
					constructor(arg1: org.apache.http.IHeaderIterator, arg2: org.apache.http.message.IHeaderValueParser);
					constructor(arg1: org.apache.http.IHeaderIterator);
					static class: java.lang.Class<org.apache.http.message.BasicHeaderElementIterator>;
					hasNext(): boolean;
					next(): any;
					remove(): void;
					nextElement(): org.apache.http.IHeaderElement;
				}
				export class BasicHttpResponse extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.IHttpResponse {
					constructor(arg1: org.apache.http.IStatusLine);
					constructor(arg1: org.apache.http.IStatusLine, arg2: org.apache.http.IReasonPhraseCatalog, arg3: java.util.Locale);
					constructor(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: java.lang.String);
					constructor(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: string);
					static class: java.lang.Class<org.apache.http.message.BasicHttpResponse>;
					Params: org.apache.http.params.IHttpParams;
					StatusLine: org.apache.http.IStatusLine;
					Locale: java.util.Locale;
					Entity: org.apache.http.IHttpEntity;
					getEntity(): org.apache.http.IHttpEntity;
					setEntity(arg1: org.apache.http.IHttpEntity): void;
					setReasonPhrase(arg1: java.lang.String): void;
					setReasonPhrase(arg1: string): void;
					setStatusLine(arg1: org.apache.http.IStatusLine): void;
					setStatusLine(arg1: org.apache.http.ProtocolVersion, arg2: number): void;
					setStatusLine(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: java.lang.String): void;
					setStatusLine(arg1: org.apache.http.ProtocolVersion, arg2: number, arg3: string): void;
					setStatusCode(arg1: number): void;
					getStatusLine(): org.apache.http.IStatusLine;
					getProtocolVersion(): org.apache.http.ProtocolVersion;
					getLocale(): java.util.Locale;
					setLocale(arg1: java.util.Locale): void;
					removeHeader(arg1: org.apache.http.IHeader): void;
					getFirstHeader(arg1: string): org.apache.http.IHeader;
					headerIterator(): org.apache.http.IHeaderIterator;
					headerIterator(arg1: string): org.apache.http.IHeaderIterator;
					containsHeader(arg1: string): boolean;
					setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
					removeHeaders(arg1: string): void;
					setHeader(arg1: string, arg2: string): void;
					setHeader(arg1: org.apache.http.IHeader): void;
					getLastHeader(arg1: string): org.apache.http.IHeader;
					addHeader(arg1: org.apache.http.IHeader): void;
					addHeader(arg1: string, arg2: string): void;
					getAllHeaders(): native.Array<org.apache.http.IHeader>;
					getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
					setParams(arg1: org.apache.http.params.IHttpParams): void;
					getParams(): org.apache.http.params.IHttpParams;
					getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
					headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
					containsHeader(arg1: java.lang.String): boolean;
					removeHeaders(arg1: java.lang.String): void;
					setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
					getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
					addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
					getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
				}
				export class BasicListHeaderIterator extends java.lang.Object implements org.apache.http.IHeaderIterator {
					constructor(arg1: java.util.IList<any>, arg2: java.lang.String);
					constructor(arg1: java.util.IList<any>, arg2: string);
					static class: java.lang.Class<org.apache.http.message.BasicListHeaderIterator>;
					nextHeader(): org.apache.http.IHeader;
					hasNext(): boolean;
					next(): any;
					remove(): void;
				}
				export interface IHeaderValueFormatter {
					formatElements(arg1: org.apache.http.util.CharArrayBuffer, arg2: native.Array<org.apache.http.IHeaderElement>, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					formatParameters(arg1: org.apache.http.util.CharArrayBuffer, arg2: native.Array<org.apache.http.INameValuePair>, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					formatNameValuePair(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.INameValuePair, arg3: boolean): org.apache.http.util.CharArrayBuffer;
					formatHeaderElement(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IHeaderElement, arg3: boolean): org.apache.http.util.CharArrayBuffer;
				}
				export class BasicLineParser extends java.lang.Object implements org.apache.http.message.ILineParser {
					constructor(arg1: org.apache.http.ProtocolVersion);
					constructor();
					static DEFAULT: org.apache.http.message.BasicLineParser;
					static class: java.lang.Class<org.apache.http.message.BasicLineParser>;
					static parseRequestLine(arg1: java.lang.String, arg2: org.apache.http.message.ILineParser): org.apache.http.IRequestLine;
					static parseRequestLine(arg1: string, arg2: org.apache.http.message.ILineParser): org.apache.http.IRequestLine;
					parseRequestLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IRequestLine;
					hasProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): boolean;
					static parseProtocolVersion(arg1: java.lang.String, arg2: org.apache.http.message.ILineParser): org.apache.http.ProtocolVersion;
					static parseProtocolVersion(arg1: string, arg2: org.apache.http.message.ILineParser): org.apache.http.ProtocolVersion;
					parseProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.ProtocolVersion;
					parseStatusLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IStatusLine;
					static parseStatusLine(arg1: java.lang.String, arg2: org.apache.http.message.ILineParser): org.apache.http.IStatusLine;
					static parseStatusLine(arg1: string, arg2: org.apache.http.message.ILineParser): org.apache.http.IStatusLine;
					static parseHeader(arg1: java.lang.String, arg2: org.apache.http.message.ILineParser): org.apache.http.IHeader;
					static parseHeader(arg1: string, arg2: org.apache.http.message.ILineParser): org.apache.http.IHeader;
					parseHeader(arg1: org.apache.http.util.CharArrayBuffer): org.apache.http.IHeader;
				}
				export class BasicRequestLine extends java.lang.Object implements org.apache.http.IRequestLine, java.lang.ICloneable {
					constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: org.apache.http.ProtocolVersion);
					constructor(arg1: string, arg2: string, arg3: org.apache.http.ProtocolVersion);
					static class: java.lang.Class<org.apache.http.message.BasicRequestLine>;
					getUri(): string;
					clone(): any;
					toString(): string;
					getMethod(): string;
					getProtocolVersion(): org.apache.http.ProtocolVersion;
				}
				export interface ILineParser {
					parseRequestLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IRequestLine;
					hasProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): boolean;
					parseProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.ProtocolVersion;
					parseStatusLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IStatusLine;
					parseHeader(arg1: org.apache.http.util.CharArrayBuffer): org.apache.http.IHeader;
				}
				export class BasicHttpRequest extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.IHttpRequest {
					constructor(arg1: java.lang.String, arg2: java.lang.String);
					constructor(arg1: string, arg2: string);
					constructor(arg1: org.apache.http.IRequestLine);
					constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: org.apache.http.ProtocolVersion);
					constructor(arg1: string, arg2: string, arg3: org.apache.http.ProtocolVersion);
					static class: java.lang.Class<org.apache.http.message.BasicHttpRequest>;
					Params: org.apache.http.params.IHttpParams;
					getRequestLine(): org.apache.http.IRequestLine;
					getProtocolVersion(): org.apache.http.ProtocolVersion;
					removeHeader(arg1: org.apache.http.IHeader): void;
					getFirstHeader(arg1: string): org.apache.http.IHeader;
					headerIterator(): org.apache.http.IHeaderIterator;
					headerIterator(arg1: string): org.apache.http.IHeaderIterator;
					containsHeader(arg1: string): boolean;
					setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
					removeHeaders(arg1: string): void;
					setHeader(arg1: string, arg2: string): void;
					setHeader(arg1: org.apache.http.IHeader): void;
					getLastHeader(arg1: string): org.apache.http.IHeader;
					addHeader(arg1: org.apache.http.IHeader): void;
					addHeader(arg1: string, arg2: string): void;
					getAllHeaders(): native.Array<org.apache.http.IHeader>;
					getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
					setParams(arg1: org.apache.http.params.IHttpParams): void;
					getParams(): org.apache.http.params.IHttpParams;
					getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
					headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
					containsHeader(arg1: java.lang.String): boolean;
					removeHeaders(arg1: java.lang.String): void;
					setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
					getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
					addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
					getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
				}
				export interface IHeaderValueParser {
					parseParameters(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): native.Array<org.apache.http.INameValuePair>;
					parseHeaderElement(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.IHeaderElement;
					parseNameValuePair(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): org.apache.http.INameValuePair;
					parseElements(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.message.ParserCursor): native.Array<org.apache.http.IHeaderElement>;
				}
				export interface ILineFormatter {
					formatHeader(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IHeader): org.apache.http.util.CharArrayBuffer;
					appendProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.ProtocolVersion): org.apache.http.util.CharArrayBuffer;
					formatRequestLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IRequestLine): org.apache.http.util.CharArrayBuffer;
					formatStatusLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IStatusLine): org.apache.http.util.CharArrayBuffer;
				}
				export class BasicLineFormatter extends java.lang.Object implements org.apache.http.message.ILineFormatter {
					constructor();
					static DEFAULT: org.apache.http.message.BasicLineFormatter;
					static class: java.lang.Class<org.apache.http.message.BasicLineFormatter>;
					formatHeader(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IHeader): org.apache.http.util.CharArrayBuffer;
					static formatHeader(arg1: org.apache.http.IHeader, arg2: org.apache.http.message.ILineFormatter): string;
					static formatProtocolVersion(arg1: org.apache.http.ProtocolVersion, arg2: org.apache.http.message.ILineFormatter): string;
					appendProtocolVersion(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.ProtocolVersion): org.apache.http.util.CharArrayBuffer;
					formatRequestLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IRequestLine): org.apache.http.util.CharArrayBuffer;
					static formatRequestLine(arg1: org.apache.http.IRequestLine, arg2: org.apache.http.message.ILineFormatter): string;
					formatStatusLine(arg1: org.apache.http.util.CharArrayBuffer, arg2: org.apache.http.IStatusLine): org.apache.http.util.CharArrayBuffer;
					static formatStatusLine(arg1: org.apache.http.IStatusLine, arg2: org.apache.http.message.ILineFormatter): string;
				}
				export class BasicHeaderIterator extends java.lang.Object implements org.apache.http.IHeaderIterator {
					constructor(arg1: native.Array<org.apache.http.IHeader>, arg2: java.lang.String);
					constructor(arg1: native.Array<org.apache.http.IHeader>, arg2: string);
					static class: java.lang.Class<org.apache.http.message.BasicHeaderIterator>;
					nextHeader(): org.apache.http.IHeader;
					hasNext(): boolean;
					next(): any;
					remove(): void;
				}
			}
			export class HttpMessage implements org.apache.http.IHttpMessage {
				constructor(implementation: org.apache.http.IHttpMessage);
				Params: org.apache.http.params.IHttpParams;
				removeHeader(arg1: org.apache.http.IHeader): void;
				getFirstHeader(arg1: java.lang.String): org.apache.http.IHeader;
				getFirstHeader(arg1: string): org.apache.http.IHeader;
				headerIterator(): org.apache.http.IHeaderIterator;
				headerIterator(arg1: java.lang.String): org.apache.http.IHeaderIterator;
				headerIterator(arg1: string): org.apache.http.IHeaderIterator;
				containsHeader(arg1: java.lang.String): boolean;
				containsHeader(arg1: string): boolean;
				setHeaders(arg1: native.Array<org.apache.http.IHeader>): void;
				removeHeaders(arg1: java.lang.String): void;
				removeHeaders(arg1: string): void;
				setHeader(arg1: java.lang.String, arg2: java.lang.String): void;
				setHeader(arg1: string, arg2: string): void;
				setHeader(arg1: org.apache.http.IHeader): void;
				getLastHeader(arg1: java.lang.String): org.apache.http.IHeader;
				getLastHeader(arg1: string): org.apache.http.IHeader;
				addHeader(arg1: org.apache.http.IHeader): void;
				addHeader(arg1: java.lang.String, arg2: java.lang.String): void;
				addHeader(arg1: string, arg2: string): void;
				getAllHeaders(): native.Array<org.apache.http.IHeader>;
				getProtocolVersion(): org.apache.http.ProtocolVersion;
				getHeaders(arg1: java.lang.String): native.Array<org.apache.http.IHeader>;
				getHeaders(arg1: string): native.Array<org.apache.http.IHeader>;
				setParams(arg1: org.apache.http.params.IHttpParams): void;
				getParams(): org.apache.http.params.IHttpParams;
			}
			export interface ITokenIterator extends java.util.IIterator<any> {
				hasNext(): boolean;
				nextToken(): string;
				next(): any;
				remove(): void;
			}
			export class MalformedChunkCodingException extends java.io.IOException {
				constructor();
				constructor(arg1: java.lang.String);
				constructor(arg1: string);
				static class: java.lang.Class<org.apache.http.MalformedChunkCodingException>;
			}
			export interface IHeader {
				getName(): string;
				getValue(): string;
				getElements(): native.Array<org.apache.http.IHeaderElement>;
			}
			export class FormattedHeader implements org.apache.http.IHeader, org.apache.http.IFormattedHeader {
				constructor(implementation: org.apache.http.IFormattedHeader);
				getValuePos(): number;
				getBuffer(): org.apache.http.util.CharArrayBuffer;
				getName(): string;
				getValue(): string;
				getElements(): native.Array<org.apache.http.IHeaderElement>;
			}
		}
		export module commons {
			export module logging {
				export class Log implements org.apache.commons.logging.ILog {
					constructor(implementation: org.apache.commons.logging.ILog);
					trace(arg1: any): void;
					trace(arg1: any, arg2: java.lang.Throwable): void;
					isErrorEnabled(): boolean;
					isFatalEnabled(): boolean;
					isDebugEnabled(): boolean;
					isTraceEnabled(): boolean;
					isWarnEnabled(): boolean;
					isInfoEnabled(): boolean;
					warn(arg1: any, arg2: java.lang.Throwable): void;
					warn(arg1: any): void;
					fatal(arg1: any): void;
					fatal(arg1: any, arg2: java.lang.Throwable): void;
					debug(arg1: any, arg2: java.lang.Throwable): void;
					debug(arg1: any): void;
					error(arg1: any, arg2: java.lang.Throwable): void;
					error(arg1: any): void;
					info(arg1: any): void;
					info(arg1: any, arg2: java.lang.Throwable): void;
				}
				export interface ILog {
					trace(arg1: any): void;
					trace(arg1: any, arg2: java.lang.Throwable): void;
					isErrorEnabled(): boolean;
					isFatalEnabled(): boolean;
					isDebugEnabled(): boolean;
					isTraceEnabled(): boolean;
					isWarnEnabled(): boolean;
					isInfoEnabled(): boolean;
					warn(arg1: any, arg2: java.lang.Throwable): void;
					warn(arg1: any): void;
					fatal(arg1: any): void;
					fatal(arg1: any, arg2: java.lang.Throwable): void;
					debug(arg1: any, arg2: java.lang.Throwable): void;
					debug(arg1: any): void;
					error(arg1: any, arg2: java.lang.Throwable): void;
					error(arg1: any): void;
					info(arg1: any): void;
					info(arg1: any, arg2: java.lang.Throwable): void;
				}
			}
		}
	}
}
declare module dalvik {
	export module annotation {
		export class TestTarget implements java.lang.annotation.IAnnotation, dalvik.annotation.ITestTarget {
			constructor(implementation: dalvik.annotation.ITestTarget);
			conceptName(): string;
			methodArgs(): native.Array<java.lang.Class<any>>;
			methodName(): string;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export class TestTargetClass implements java.lang.annotation.IAnnotation, dalvik.annotation.ITestTargetClass {
			constructor(implementation: dalvik.annotation.ITestTargetClass);
			value(): java.lang.Class<any>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export interface ITestTargetClass extends java.lang.annotation.IAnnotation {
			value(): java.lang.Class<any>;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
		export interface ITestTarget extends java.lang.annotation.IAnnotation {
			conceptName(): string;
			methodArgs(): native.Array<java.lang.Class<any>>;
			methodName(): string;
			hashCode(): number;
			equals(arg1: any): boolean;
			toString(): string;
			annotationType(): java.lang.Class<any>;
		}
	}
	export module bytecode {
		export class Opcodes implements dalvik.bytecode.IOpcodes {
			constructor(implementation: dalvik.bytecode.IOpcodes);
			static OP_NOP: number;
			static OP_MOVE: number;
			static OP_MOVE_FROM16: number;
			static OP_MOVE_16: number;
			static OP_MOVE_WIDE: number;
			static OP_MOVE_WIDE_FROM16: number;
			static OP_MOVE_WIDE_16: number;
			static OP_MOVE_OBJECT: number;
			static OP_MOVE_OBJECT_FROM16: number;
			static OP_MOVE_OBJECT_16: number;
			static OP_MOVE_RESULT: number;
			static OP_MOVE_RESULT_WIDE: number;
			static OP_MOVE_RESULT_OBJECT: number;
			static OP_MOVE_EXCEPTION: number;
			static OP_RETURN_VOID: number;
			static OP_RETURN: number;
			static OP_RETURN_WIDE: number;
			static OP_RETURN_OBJECT: number;
			static OP_CONST_4: number;
			static OP_CONST_16: number;
			static OP_CONST: number;
			static OP_CONST_HIGH16: number;
			static OP_CONST_WIDE_16: number;
			static OP_CONST_WIDE_32: number;
			static OP_CONST_WIDE: number;
			static OP_CONST_WIDE_HIGH16: number;
			static OP_CONST_STRING: number;
			static OP_CONST_STRING_JUMBO: number;
			static OP_CONST_CLASS: number;
			static OP_MONITOR_ENTER: number;
			static OP_MONITOR_EXIT: number;
			static OP_CHECK_CAST: number;
			static OP_INSTANCE_OF: number;
			static OP_ARRAY_LENGTH: number;
			static OP_NEW_INSTANCE: number;
			static OP_NEW_ARRAY: number;
			static OP_FILLED_NEW_ARRAY: number;
			static OP_FILLED_NEW_ARRAY_RANGE: number;
			static OP_FILL_ARRAY_DATA: number;
			static OP_THROW: number;
			static OP_GOTO: number;
			static OP_GOTO_16: number;
			static OP_GOTO_32: number;
			static OP_PACKED_SWITCH: number;
			static OP_SPARSE_SWITCH: number;
			static OP_CMPL_FLOAT: number;
			static OP_CMPG_FLOAT: number;
			static OP_CMPL_DOUBLE: number;
			static OP_CMPG_DOUBLE: number;
			static OP_CMP_LONG: number;
			static OP_IF_EQ: number;
			static OP_IF_NE: number;
			static OP_IF_LT: number;
			static OP_IF_GE: number;
			static OP_IF_GT: number;
			static OP_IF_LE: number;
			static OP_IF_EQZ: number;
			static OP_IF_NEZ: number;
			static OP_IF_LTZ: number;
			static OP_IF_GEZ: number;
			static OP_IF_GTZ: number;
			static OP_IF_LEZ: number;
			static OP_AGET: number;
			static OP_AGET_WIDE: number;
			static OP_AGET_OBJECT: number;
			static OP_AGET_BOOLEAN: number;
			static OP_AGET_BYTE: number;
			static OP_AGET_CHAR: number;
			static OP_AGET_SHORT: number;
			static OP_APUT: number;
			static OP_APUT_WIDE: number;
			static OP_APUT_OBJECT: number;
			static OP_APUT_BOOLEAN: number;
			static OP_APUT_BYTE: number;
			static OP_APUT_CHAR: number;
			static OP_APUT_SHORT: number;
			static OP_IGET: number;
			static OP_IGET_WIDE: number;
			static OP_IGET_OBJECT: number;
			static OP_IGET_BOOLEAN: number;
			static OP_IGET_BYTE: number;
			static OP_IGET_CHAR: number;
			static OP_IGET_SHORT: number;
			static OP_IPUT: number;
			static OP_IPUT_WIDE: number;
			static OP_IPUT_OBJECT: number;
			static OP_IPUT_BOOLEAN: number;
			static OP_IPUT_BYTE: number;
			static OP_IPUT_CHAR: number;
			static OP_IPUT_SHORT: number;
			static OP_SGET: number;
			static OP_SGET_WIDE: number;
			static OP_SGET_OBJECT: number;
			static OP_SGET_BOOLEAN: number;
			static OP_SGET_BYTE: number;
			static OP_SGET_CHAR: number;
			static OP_SGET_SHORT: number;
			static OP_SPUT: number;
			static OP_SPUT_WIDE: number;
			static OP_SPUT_OBJECT: number;
			static OP_SPUT_BOOLEAN: number;
			static OP_SPUT_BYTE: number;
			static OP_SPUT_CHAR: number;
			static OP_SPUT_SHORT: number;
			static OP_INVOKE_VIRTUAL: number;
			static OP_INVOKE_SUPER: number;
			static OP_INVOKE_DIRECT: number;
			static OP_INVOKE_STATIC: number;
			static OP_INVOKE_INTERFACE: number;
			static OP_INVOKE_VIRTUAL_RANGE: number;
			static OP_INVOKE_SUPER_RANGE: number;
			static OP_INVOKE_DIRECT_RANGE: number;
			static OP_INVOKE_STATIC_RANGE: number;
			static OP_INVOKE_INTERFACE_RANGE: number;
			static OP_NEG_INT: number;
			static OP_NOT_INT: number;
			static OP_NEG_LONG: number;
			static OP_NOT_LONG: number;
			static OP_NEG_FLOAT: number;
			static OP_NEG_DOUBLE: number;
			static OP_INT_TO_LONG: number;
			static OP_INT_TO_FLOAT: number;
			static OP_INT_TO_DOUBLE: number;
			static OP_LONG_TO_INT: number;
			static OP_LONG_TO_FLOAT: number;
			static OP_LONG_TO_DOUBLE: number;
			static OP_FLOAT_TO_INT: number;
			static OP_FLOAT_TO_LONG: number;
			static OP_FLOAT_TO_DOUBLE: number;
			static OP_DOUBLE_TO_INT: number;
			static OP_DOUBLE_TO_LONG: number;
			static OP_DOUBLE_TO_FLOAT: number;
			static OP_INT_TO_BYTE: number;
			static OP_INT_TO_CHAR: number;
			static OP_INT_TO_SHORT: number;
			static OP_ADD_INT: number;
			static OP_SUB_INT: number;
			static OP_MUL_INT: number;
			static OP_DIV_INT: number;
			static OP_REM_INT: number;
			static OP_AND_INT: number;
			static OP_OR_INT: number;
			static OP_XOR_INT: number;
			static OP_SHL_INT: number;
			static OP_SHR_INT: number;
			static OP_USHR_INT: number;
			static OP_ADD_LONG: number;
			static OP_SUB_LONG: number;
			static OP_MUL_LONG: number;
			static OP_DIV_LONG: number;
			static OP_REM_LONG: number;
			static OP_AND_LONG: number;
			static OP_OR_LONG: number;
			static OP_XOR_LONG: number;
			static OP_SHL_LONG: number;
			static OP_SHR_LONG: number;
			static OP_USHR_LONG: number;
			static OP_ADD_FLOAT: number;
			static OP_SUB_FLOAT: number;
			static OP_MUL_FLOAT: number;
			static OP_DIV_FLOAT: number;
			static OP_REM_FLOAT: number;
			static OP_ADD_DOUBLE: number;
			static OP_SUB_DOUBLE: number;
			static OP_MUL_DOUBLE: number;
			static OP_DIV_DOUBLE: number;
			static OP_REM_DOUBLE: number;
			static OP_ADD_INT_2ADDR: number;
			static OP_SUB_INT_2ADDR: number;
			static OP_MUL_INT_2ADDR: number;
			static OP_DIV_INT_2ADDR: number;
			static OP_REM_INT_2ADDR: number;
			static OP_AND_INT_2ADDR: number;
			static OP_OR_INT_2ADDR: number;
			static OP_XOR_INT_2ADDR: number;
			static OP_SHL_INT_2ADDR: number;
			static OP_SHR_INT_2ADDR: number;
			static OP_USHR_INT_2ADDR: number;
			static OP_ADD_LONG_2ADDR: number;
			static OP_SUB_LONG_2ADDR: number;
			static OP_MUL_LONG_2ADDR: number;
			static OP_DIV_LONG_2ADDR: number;
			static OP_REM_LONG_2ADDR: number;
			static OP_AND_LONG_2ADDR: number;
			static OP_OR_LONG_2ADDR: number;
			static OP_XOR_LONG_2ADDR: number;
			static OP_SHL_LONG_2ADDR: number;
			static OP_SHR_LONG_2ADDR: number;
			static OP_USHR_LONG_2ADDR: number;
			static OP_ADD_FLOAT_2ADDR: number;
			static OP_SUB_FLOAT_2ADDR: number;
			static OP_MUL_FLOAT_2ADDR: number;
			static OP_DIV_FLOAT_2ADDR: number;
			static OP_REM_FLOAT_2ADDR: number;
			static OP_ADD_DOUBLE_2ADDR: number;
			static OP_SUB_DOUBLE_2ADDR: number;
			static OP_MUL_DOUBLE_2ADDR: number;
			static OP_DIV_DOUBLE_2ADDR: number;
			static OP_REM_DOUBLE_2ADDR: number;
			static OP_ADD_INT_LIT16: number;
			static OP_RSUB_INT: number;
			static OP_MUL_INT_LIT16: number;
			static OP_DIV_INT_LIT16: number;
			static OP_REM_INT_LIT16: number;
			static OP_AND_INT_LIT16: number;
			static OP_OR_INT_LIT16: number;
			static OP_XOR_INT_LIT16: number;
			static OP_ADD_INT_LIT8: number;
			static OP_RSUB_INT_LIT8: number;
			static OP_MUL_INT_LIT8: number;
			static OP_DIV_INT_LIT8: number;
			static OP_REM_INT_LIT8: number;
			static OP_AND_INT_LIT8: number;
			static OP_OR_INT_LIT8: number;
			static OP_XOR_INT_LIT8: number;
			static OP_SHL_INT_LIT8: number;
			static OP_SHR_INT_LIT8: number;
			static OP_USHR_INT_LIT8: number;
			static OP_CONST_CLASS_JUMBO: number;
			static OP_CHECK_CAST_JUMBO: number;
			static OP_INSTANCE_OF_JUMBO: number;
			static OP_NEW_INSTANCE_JUMBO: number;
			static OP_NEW_ARRAY_JUMBO: number;
			static OP_FILLED_NEW_ARRAY_JUMBO: number;
			static OP_IGET_JUMBO: number;
			static OP_IGET_WIDE_JUMBO: number;
			static OP_IGET_OBJECT_JUMBO: number;
			static OP_IGET_BOOLEAN_JUMBO: number;
			static OP_IGET_BYTE_JUMBO: number;
			static OP_IGET_CHAR_JUMBO: number;
			static OP_IGET_SHORT_JUMBO: number;
			static OP_IPUT_JUMBO: number;
			static OP_IPUT_WIDE_JUMBO: number;
			static OP_IPUT_OBJECT_JUMBO: number;
			static OP_IPUT_BOOLEAN_JUMBO: number;
			static OP_IPUT_BYTE_JUMBO: number;
			static OP_IPUT_CHAR_JUMBO: number;
			static OP_IPUT_SHORT_JUMBO: number;
			static OP_SGET_JUMBO: number;
			static OP_SGET_WIDE_JUMBO: number;
			static OP_SGET_OBJECT_JUMBO: number;
			static OP_SGET_BOOLEAN_JUMBO: number;
			static OP_SGET_BYTE_JUMBO: number;
			static OP_SGET_CHAR_JUMBO: number;
			static OP_SGET_SHORT_JUMBO: number;
			static OP_SPUT_JUMBO: number;
			static OP_SPUT_WIDE_JUMBO: number;
			static OP_SPUT_OBJECT_JUMBO: number;
			static OP_SPUT_BOOLEAN_JUMBO: number;
			static OP_SPUT_BYTE_JUMBO: number;
			static OP_SPUT_CHAR_JUMBO: number;
			static OP_SPUT_SHORT_JUMBO: number;
			static OP_INVOKE_VIRTUAL_JUMBO: number;
			static OP_INVOKE_SUPER_JUMBO: number;
			static OP_INVOKE_DIRECT_JUMBO: number;
			static OP_INVOKE_STATIC_JUMBO: number;
			static OP_INVOKE_INTERFACE_JUMBO: number;
			static OP_IGET_WIDE_VOLATILE: number;
			static OP_IPUT_WIDE_VOLATILE: number;
			static OP_SGET_WIDE_VOLATILE: number;
			static OP_SPUT_WIDE_VOLATILE: number;
			static OP_BREAKPOINT: number;
			static OP_THROW_VERIFICATION_ERROR: number;
			static OP_EXECUTE_INLINE: number;
			static OP_EXECUTE_INLINE_RANGE: number;
			static OP_INVOKE_DIRECT_EMPTY: number;
			static OP_IGET_QUICK: number;
			static OP_IGET_WIDE_QUICK: number;
			static OP_IGET_OBJECT_QUICK: number;
			static OP_IPUT_QUICK: number;
			static OP_IPUT_WIDE_QUICK: number;
			static OP_IPUT_OBJECT_QUICK: number;
			static OP_INVOKE_VIRTUAL_QUICK: number;
			static OP_INVOKE_VIRTUAL_QUICK_RANGE: number;
			static OP_INVOKE_SUPER_QUICK: number;
			static OP_INVOKE_SUPER_QUICK_RANGE: number;
		}
		export interface IOpcodes {
		}
		export module IOpcodes {
			var OP_NOP: number;
			var OP_MOVE: number;
			var OP_MOVE_FROM16: number;
			var OP_MOVE_16: number;
			var OP_MOVE_WIDE: number;
			var OP_MOVE_WIDE_FROM16: number;
			var OP_MOVE_WIDE_16: number;
			var OP_MOVE_OBJECT: number;
			var OP_MOVE_OBJECT_FROM16: number;
			var OP_MOVE_OBJECT_16: number;
			var OP_MOVE_RESULT: number;
			var OP_MOVE_RESULT_WIDE: number;
			var OP_MOVE_RESULT_OBJECT: number;
			var OP_MOVE_EXCEPTION: number;
			var OP_RETURN_VOID: number;
			var OP_RETURN: number;
			var OP_RETURN_WIDE: number;
			var OP_RETURN_OBJECT: number;
			var OP_CONST_4: number;
			var OP_CONST_16: number;
			var OP_CONST: number;
			var OP_CONST_HIGH16: number;
			var OP_CONST_WIDE_16: number;
			var OP_CONST_WIDE_32: number;
			var OP_CONST_WIDE: number;
			var OP_CONST_WIDE_HIGH16: number;
			var OP_CONST_STRING: number;
			var OP_CONST_STRING_JUMBO: number;
			var OP_CONST_CLASS: number;
			var OP_MONITOR_ENTER: number;
			var OP_MONITOR_EXIT: number;
			var OP_CHECK_CAST: number;
			var OP_INSTANCE_OF: number;
			var OP_ARRAY_LENGTH: number;
			var OP_NEW_INSTANCE: number;
			var OP_NEW_ARRAY: number;
			var OP_FILLED_NEW_ARRAY: number;
			var OP_FILLED_NEW_ARRAY_RANGE: number;
			var OP_FILL_ARRAY_DATA: number;
			var OP_THROW: number;
			var OP_GOTO: number;
			var OP_GOTO_16: number;
			var OP_GOTO_32: number;
			var OP_PACKED_SWITCH: number;
			var OP_SPARSE_SWITCH: number;
			var OP_CMPL_FLOAT: number;
			var OP_CMPG_FLOAT: number;
			var OP_CMPL_DOUBLE: number;
			var OP_CMPG_DOUBLE: number;
			var OP_CMP_LONG: number;
			var OP_IF_EQ: number;
			var OP_IF_NE: number;
			var OP_IF_LT: number;
			var OP_IF_GE: number;
			var OP_IF_GT: number;
			var OP_IF_LE: number;
			var OP_IF_EQZ: number;
			var OP_IF_NEZ: number;
			var OP_IF_LTZ: number;
			var OP_IF_GEZ: number;
			var OP_IF_GTZ: number;
			var OP_IF_LEZ: number;
			var OP_AGET: number;
			var OP_AGET_WIDE: number;
			var OP_AGET_OBJECT: number;
			var OP_AGET_BOOLEAN: number;
			var OP_AGET_BYTE: number;
			var OP_AGET_CHAR: number;
			var OP_AGET_SHORT: number;
			var OP_APUT: number;
			var OP_APUT_WIDE: number;
			var OP_APUT_OBJECT: number;
			var OP_APUT_BOOLEAN: number;
			var OP_APUT_BYTE: number;
			var OP_APUT_CHAR: number;
			var OP_APUT_SHORT: number;
			var OP_IGET: number;
			var OP_IGET_WIDE: number;
			var OP_IGET_OBJECT: number;
			var OP_IGET_BOOLEAN: number;
			var OP_IGET_BYTE: number;
			var OP_IGET_CHAR: number;
			var OP_IGET_SHORT: number;
			var OP_IPUT: number;
			var OP_IPUT_WIDE: number;
			var OP_IPUT_OBJECT: number;
			var OP_IPUT_BOOLEAN: number;
			var OP_IPUT_BYTE: number;
			var OP_IPUT_CHAR: number;
			var OP_IPUT_SHORT: number;
			var OP_SGET: number;
			var OP_SGET_WIDE: number;
			var OP_SGET_OBJECT: number;
			var OP_SGET_BOOLEAN: number;
			var OP_SGET_BYTE: number;
			var OP_SGET_CHAR: number;
			var OP_SGET_SHORT: number;
			var OP_SPUT: number;
			var OP_SPUT_WIDE: number;
			var OP_SPUT_OBJECT: number;
			var OP_SPUT_BOOLEAN: number;
			var OP_SPUT_BYTE: number;
			var OP_SPUT_CHAR: number;
			var OP_SPUT_SHORT: number;
			var OP_INVOKE_VIRTUAL: number;
			var OP_INVOKE_SUPER: number;
			var OP_INVOKE_DIRECT: number;
			var OP_INVOKE_STATIC: number;
			var OP_INVOKE_INTERFACE: number;
			var OP_INVOKE_VIRTUAL_RANGE: number;
			var OP_INVOKE_SUPER_RANGE: number;
			var OP_INVOKE_DIRECT_RANGE: number;
			var OP_INVOKE_STATIC_RANGE: number;
			var OP_INVOKE_INTERFACE_RANGE: number;
			var OP_NEG_INT: number;
			var OP_NOT_INT: number;
			var OP_NEG_LONG: number;
			var OP_NOT_LONG: number;
			var OP_NEG_FLOAT: number;
			var OP_NEG_DOUBLE: number;
			var OP_INT_TO_LONG: number;
			var OP_INT_TO_FLOAT: number;
			var OP_INT_TO_DOUBLE: number;
			var OP_LONG_TO_INT: number;
			var OP_LONG_TO_FLOAT: number;
			var OP_LONG_TO_DOUBLE: number;
			var OP_FLOAT_TO_INT: number;
			var OP_FLOAT_TO_LONG: number;
			var OP_FLOAT_TO_DOUBLE: number;
			var OP_DOUBLE_TO_INT: number;
			var OP_DOUBLE_TO_LONG: number;
			var OP_DOUBLE_TO_FLOAT: number;
			var OP_INT_TO_BYTE: number;
			var OP_INT_TO_CHAR: number;
			var OP_INT_TO_SHORT: number;
			var OP_ADD_INT: number;
			var OP_SUB_INT: number;
			var OP_MUL_INT: number;
			var OP_DIV_INT: number;
			var OP_REM_INT: number;
			var OP_AND_INT: number;
			var OP_OR_INT: number;
			var OP_XOR_INT: number;
			var OP_SHL_INT: number;
			var OP_SHR_INT: number;
			var OP_USHR_INT: number;
			var OP_ADD_LONG: number;
			var OP_SUB_LONG: number;
			var OP_MUL_LONG: number;
			var OP_DIV_LONG: number;
			var OP_REM_LONG: number;
			var OP_AND_LONG: number;
			var OP_OR_LONG: number;
			var OP_XOR_LONG: number;
			var OP_SHL_LONG: number;
			var OP_SHR_LONG: number;
			var OP_USHR_LONG: number;
			var OP_ADD_FLOAT: number;
			var OP_SUB_FLOAT: number;
			var OP_MUL_FLOAT: number;
			var OP_DIV_FLOAT: number;
			var OP_REM_FLOAT: number;
			var OP_ADD_DOUBLE: number;
			var OP_SUB_DOUBLE: number;
			var OP_MUL_DOUBLE: number;
			var OP_DIV_DOUBLE: number;
			var OP_REM_DOUBLE: number;
			var OP_ADD_INT_2ADDR: number;
			var OP_SUB_INT_2ADDR: number;
			var OP_MUL_INT_2ADDR: number;
			var OP_DIV_INT_2ADDR: number;
			var OP_REM_INT_2ADDR: number;
			var OP_AND_INT_2ADDR: number;
			var OP_OR_INT_2ADDR: number;
			var OP_XOR_INT_2ADDR: number;
			var OP_SHL_INT_2ADDR: number;
			var OP_SHR_INT_2ADDR: number;
			var OP_USHR_INT_2ADDR: number;
			var OP_ADD_LONG_2ADDR: number;
			var OP_SUB_LONG_2ADDR: number;
			var OP_MUL_LONG_2ADDR: number;
			var OP_DIV_LONG_2ADDR: number;
			var OP_REM_LONG_2ADDR: number;
			var OP_AND_LONG_2ADDR: number;
			var OP_OR_LONG_2ADDR: number;
			var OP_XOR_LONG_2ADDR: number;
			var OP_SHL_LONG_2ADDR: number;
			var OP_SHR_LONG_2ADDR: number;
			var OP_USHR_LONG_2ADDR: number;
			var OP_ADD_FLOAT_2ADDR: number;
			var OP_SUB_FLOAT_2ADDR: number;
			var OP_MUL_FLOAT_2ADDR: number;
			var OP_DIV_FLOAT_2ADDR: number;
			var OP_REM_FLOAT_2ADDR: number;
			var OP_ADD_DOUBLE_2ADDR: number;
			var OP_SUB_DOUBLE_2ADDR: number;
			var OP_MUL_DOUBLE_2ADDR: number;
			var OP_DIV_DOUBLE_2ADDR: number;
			var OP_REM_DOUBLE_2ADDR: number;
			var OP_ADD_INT_LIT16: number;
			var OP_RSUB_INT: number;
			var OP_MUL_INT_LIT16: number;
			var OP_DIV_INT_LIT16: number;
			var OP_REM_INT_LIT16: number;
			var OP_AND_INT_LIT16: number;
			var OP_OR_INT_LIT16: number;
			var OP_XOR_INT_LIT16: number;
			var OP_ADD_INT_LIT8: number;
			var OP_RSUB_INT_LIT8: number;
			var OP_MUL_INT_LIT8: number;
			var OP_DIV_INT_LIT8: number;
			var OP_REM_INT_LIT8: number;
			var OP_AND_INT_LIT8: number;
			var OP_OR_INT_LIT8: number;
			var OP_XOR_INT_LIT8: number;
			var OP_SHL_INT_LIT8: number;
			var OP_SHR_INT_LIT8: number;
			var OP_USHR_INT_LIT8: number;
			var OP_CONST_CLASS_JUMBO: number;
			var OP_CHECK_CAST_JUMBO: number;
			var OP_INSTANCE_OF_JUMBO: number;
			var OP_NEW_INSTANCE_JUMBO: number;
			var OP_NEW_ARRAY_JUMBO: number;
			var OP_FILLED_NEW_ARRAY_JUMBO: number;
			var OP_IGET_JUMBO: number;
			var OP_IGET_WIDE_JUMBO: number;
			var OP_IGET_OBJECT_JUMBO: number;
			var OP_IGET_BOOLEAN_JUMBO: number;
			var OP_IGET_BYTE_JUMBO: number;
			var OP_IGET_CHAR_JUMBO: number;
			var OP_IGET_SHORT_JUMBO: number;
			var OP_IPUT_JUMBO: number;
			var OP_IPUT_WIDE_JUMBO: number;
			var OP_IPUT_OBJECT_JUMBO: number;
			var OP_IPUT_BOOLEAN_JUMBO: number;
			var OP_IPUT_BYTE_JUMBO: number;
			var OP_IPUT_CHAR_JUMBO: number;
			var OP_IPUT_SHORT_JUMBO: number;
			var OP_SGET_JUMBO: number;
			var OP_SGET_WIDE_JUMBO: number;
			var OP_SGET_OBJECT_JUMBO: number;
			var OP_SGET_BOOLEAN_JUMBO: number;
			var OP_SGET_BYTE_JUMBO: number;
			var OP_SGET_CHAR_JUMBO: number;
			var OP_SGET_SHORT_JUMBO: number;
			var OP_SPUT_JUMBO: number;
			var OP_SPUT_WIDE_JUMBO: number;
			var OP_SPUT_OBJECT_JUMBO: number;
			var OP_SPUT_BOOLEAN_JUMBO: number;
			var OP_SPUT_BYTE_JUMBO: number;
			var OP_SPUT_CHAR_JUMBO: number;
			var OP_SPUT_SHORT_JUMBO: number;
			var OP_INVOKE_VIRTUAL_JUMBO: number;
			var OP_INVOKE_SUPER_JUMBO: number;
			var OP_INVOKE_DIRECT_JUMBO: number;
			var OP_INVOKE_STATIC_JUMBO: number;
			var OP_INVOKE_INTERFACE_JUMBO: number;
			var OP_IGET_WIDE_VOLATILE: number;
			var OP_IPUT_WIDE_VOLATILE: number;
			var OP_SGET_WIDE_VOLATILE: number;
			var OP_SPUT_WIDE_VOLATILE: number;
			var OP_BREAKPOINT: number;
			var OP_THROW_VERIFICATION_ERROR: number;
			var OP_EXECUTE_INLINE: number;
			var OP_EXECUTE_INLINE_RANGE: number;
			var OP_INVOKE_DIRECT_EMPTY: number;
			var OP_IGET_QUICK: number;
			var OP_IGET_WIDE_QUICK: number;
			var OP_IGET_OBJECT_QUICK: number;
			var OP_IPUT_QUICK: number;
			var OP_IPUT_WIDE_QUICK: number;
			var OP_IPUT_OBJECT_QUICK: number;
			var OP_INVOKE_VIRTUAL_QUICK: number;
			var OP_INVOKE_VIRTUAL_QUICK_RANGE: number;
			var OP_INVOKE_SUPER_QUICK: number;
			var OP_INVOKE_SUPER_QUICK_RANGE: number;
		}
		export class OpcodeInfo extends java.lang.Object {
			static MAXIMUM_VALUE: number;
			static MAXIMUM_PACKED_VALUE: number;
			static class: java.lang.Class<dalvik.bytecode.OpcodeInfo>;
		}
	}
	export module system {
		export class BaseDexClassLoader extends java.lang.ClassLoader {
			constructor(arg1: java.lang.String, arg2: java.io.File, arg3: java.lang.String, arg4: java.lang.ClassLoader);
			constructor(arg1: string, arg2: java.io.File, arg3: string, arg4: java.lang.ClassLoader);
			static class: java.lang.Class<dalvik.system.BaseDexClassLoader>;
			toString(): string;
			findLibrary(arg1: java.lang.String): string;
			findLibrary(arg1: string): string;
		}
		export class PathClassLoader extends dalvik.system.BaseDexClassLoader {
			constructor(arg1: java.lang.String, arg2: java.lang.ClassLoader);
			constructor(arg1: string, arg2: java.lang.ClassLoader);
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.ClassLoader);
			constructor(arg1: string, arg2: string, arg3: java.lang.ClassLoader);
			static class: java.lang.Class<dalvik.system.PathClassLoader>;
		}
		export class DexClassLoader extends dalvik.system.BaseDexClassLoader {
			constructor(arg1: java.lang.String, arg2: java.lang.String, arg3: java.lang.String, arg4: java.lang.ClassLoader);
			constructor(arg1: string, arg2: string, arg3: string, arg4: java.lang.ClassLoader);
			static class: java.lang.Class<dalvik.system.DexClassLoader>;
		}
		export class DexFile extends java.lang.Object {
			constructor(arg1: java.io.File);
			constructor(arg1: java.lang.String);
			constructor(arg1: string);
			static class: java.lang.Class<dalvik.system.DexFile>;
			static isDexOptNeeded(arg1: java.lang.String): boolean;
			static isDexOptNeeded(arg1: string): boolean;
			static loadDex(arg1: java.lang.String, arg2: java.lang.String, arg3: number): dalvik.system.DexFile;
			static loadDex(arg1: string, arg2: string, arg3: number): dalvik.system.DexFile;
			getName(): string;
			loadClass(arg1: java.lang.String, arg2: java.lang.ClassLoader): java.lang.Class<any>;
			loadClass(arg1: string, arg2: java.lang.ClassLoader): java.lang.Class<any>;
			close(): void;
			entries(): java.util.IEnumeration<string>;
		}
	}
}

